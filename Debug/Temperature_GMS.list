
Temperature_GMS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000080ec  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000760  08008200  08008200  00018200  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008960  08008960  00020278  2**0
                  CONTENTS
  4 .ARM          00000000  08008960  08008960  00020278  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008960  08008960  00020278  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008960  08008960  00018960  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008964  08008964  00018964  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000278  20000000  08008968  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000dd0  20000278  08008be0  00020278  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001048  08008be0  00021048  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020278  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c7fa  00000000  00000000  000202a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024b8  00000000  00000000  0002ca9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000da8  00000000  00000000  0002ef58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cb8  00000000  00000000  0002fd00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019256  00000000  00000000  000309b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f8df  00000000  00000000  00049c0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bd30  00000000  00000000  000594ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e521d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d00  00000000  00000000  000e5270  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000278 	.word	0x20000278
 800012c:	00000000 	.word	0x00000000
 8000130:	080081e4 	.word	0x080081e4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000027c 	.word	0x2000027c
 800014c:	080081e4 	.word	0x080081e4

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2uiz>:
 8000a9c:	004a      	lsls	r2, r1, #1
 8000a9e:	d211      	bcs.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d211      	bcs.n	8000aca <__aeabi_d2uiz+0x2e>
 8000aa6:	d50d      	bpl.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d40e      	bmi.n	8000ad0 <__aeabi_d2uiz+0x34>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d102      	bne.n	8000ad6 <__aeabi_d2uiz+0x3a>
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	4770      	bx	lr
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	4770      	bx	lr

08000adc <__aeabi_d2lz>:
 8000adc:	b538      	push	{r3, r4, r5, lr}
 8000ade:	4605      	mov	r5, r0
 8000ae0:	460c      	mov	r4, r1
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	4628      	mov	r0, r5
 8000ae8:	4621      	mov	r1, r4
 8000aea:	f7ff ff71 	bl	80009d0 <__aeabi_dcmplt>
 8000aee:	b928      	cbnz	r0, 8000afc <__aeabi_d2lz+0x20>
 8000af0:	4628      	mov	r0, r5
 8000af2:	4621      	mov	r1, r4
 8000af4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000af8:	f000 b80a 	b.w	8000b10 <__aeabi_d2ulz>
 8000afc:	4628      	mov	r0, r5
 8000afe:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000b02:	f000 f805 	bl	8000b10 <__aeabi_d2ulz>
 8000b06:	4240      	negs	r0, r0
 8000b08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b0c:	bd38      	pop	{r3, r4, r5, pc}
 8000b0e:	bf00      	nop

08000b10 <__aeabi_d2ulz>:
 8000b10:	b5d0      	push	{r4, r6, r7, lr}
 8000b12:	2200      	movs	r2, #0
 8000b14:	4b0b      	ldr	r3, [pc, #44]	; (8000b44 <__aeabi_d2ulz+0x34>)
 8000b16:	4606      	mov	r6, r0
 8000b18:	460f      	mov	r7, r1
 8000b1a:	f7ff fce7 	bl	80004ec <__aeabi_dmul>
 8000b1e:	f7ff ffbd 	bl	8000a9c <__aeabi_d2uiz>
 8000b22:	4604      	mov	r4, r0
 8000b24:	f7ff fc68 	bl	80003f8 <__aeabi_ui2d>
 8000b28:	2200      	movs	r2, #0
 8000b2a:	4b07      	ldr	r3, [pc, #28]	; (8000b48 <__aeabi_d2ulz+0x38>)
 8000b2c:	f7ff fcde 	bl	80004ec <__aeabi_dmul>
 8000b30:	4602      	mov	r2, r0
 8000b32:	460b      	mov	r3, r1
 8000b34:	4630      	mov	r0, r6
 8000b36:	4639      	mov	r1, r7
 8000b38:	f7ff fb20 	bl	800017c <__aeabi_dsub>
 8000b3c:	f7ff ffae 	bl	8000a9c <__aeabi_d2uiz>
 8000b40:	4621      	mov	r1, r4
 8000b42:	bdd0      	pop	{r4, r6, r7, pc}
 8000b44:	3df00000 	.word	0x3df00000
 8000b48:	41f00000 	.word	0x41f00000

08000b4c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b088      	sub	sp, #32
 8000b50:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b52:	f107 0310 	add.w	r3, r7, #16
 8000b56:	2200      	movs	r2, #0
 8000b58:	601a      	str	r2, [r3, #0]
 8000b5a:	605a      	str	r2, [r3, #4]
 8000b5c:	609a      	str	r2, [r3, #8]
 8000b5e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b60:	4b28      	ldr	r3, [pc, #160]	; (8000c04 <MX_GPIO_Init+0xb8>)
 8000b62:	699b      	ldr	r3, [r3, #24]
 8000b64:	4a27      	ldr	r2, [pc, #156]	; (8000c04 <MX_GPIO_Init+0xb8>)
 8000b66:	f043 0310 	orr.w	r3, r3, #16
 8000b6a:	6193      	str	r3, [r2, #24]
 8000b6c:	4b25      	ldr	r3, [pc, #148]	; (8000c04 <MX_GPIO_Init+0xb8>)
 8000b6e:	699b      	ldr	r3, [r3, #24]
 8000b70:	f003 0310 	and.w	r3, r3, #16
 8000b74:	60fb      	str	r3, [r7, #12]
 8000b76:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b78:	4b22      	ldr	r3, [pc, #136]	; (8000c04 <MX_GPIO_Init+0xb8>)
 8000b7a:	699b      	ldr	r3, [r3, #24]
 8000b7c:	4a21      	ldr	r2, [pc, #132]	; (8000c04 <MX_GPIO_Init+0xb8>)
 8000b7e:	f043 0320 	orr.w	r3, r3, #32
 8000b82:	6193      	str	r3, [r2, #24]
 8000b84:	4b1f      	ldr	r3, [pc, #124]	; (8000c04 <MX_GPIO_Init+0xb8>)
 8000b86:	699b      	ldr	r3, [r3, #24]
 8000b88:	f003 0320 	and.w	r3, r3, #32
 8000b8c:	60bb      	str	r3, [r7, #8]
 8000b8e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b90:	4b1c      	ldr	r3, [pc, #112]	; (8000c04 <MX_GPIO_Init+0xb8>)
 8000b92:	699b      	ldr	r3, [r3, #24]
 8000b94:	4a1b      	ldr	r2, [pc, #108]	; (8000c04 <MX_GPIO_Init+0xb8>)
 8000b96:	f043 0304 	orr.w	r3, r3, #4
 8000b9a:	6193      	str	r3, [r2, #24]
 8000b9c:	4b19      	ldr	r3, [pc, #100]	; (8000c04 <MX_GPIO_Init+0xb8>)
 8000b9e:	699b      	ldr	r3, [r3, #24]
 8000ba0:	f003 0304 	and.w	r3, r3, #4
 8000ba4:	607b      	str	r3, [r7, #4]
 8000ba6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000ba8:	2200      	movs	r2, #0
 8000baa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bae:	4816      	ldr	r0, [pc, #88]	; (8000c08 <MX_GPIO_Init+0xbc>)
 8000bb0:	f001 fbd4 	bl	800235c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_GSM_GPIO_Port, RESET_GSM_Pin, GPIO_PIN_SET);
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bba:	4814      	ldr	r0, [pc, #80]	; (8000c0c <MX_GPIO_Init+0xc0>)
 8000bbc:	f001 fbce 	bl	800235c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000bc0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bc4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000bd2:	f107 0310 	add.w	r3, r7, #16
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	480b      	ldr	r0, [pc, #44]	; (8000c08 <MX_GPIO_Init+0xbc>)
 8000bda:	f001 fa3b 	bl	8002054 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RESET_GSM_Pin;
 8000bde:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000be2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be4:	2301      	movs	r3, #1
 8000be6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bec:	2302      	movs	r3, #2
 8000bee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RESET_GSM_GPIO_Port, &GPIO_InitStruct);
 8000bf0:	f107 0310 	add.w	r3, r7, #16
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	4805      	ldr	r0, [pc, #20]	; (8000c0c <MX_GPIO_Init+0xc0>)
 8000bf8:	f001 fa2c 	bl	8002054 <HAL_GPIO_Init>

}
 8000bfc:	bf00      	nop
 8000bfe:	3720      	adds	r7, #32
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	40021000 	.word	0x40021000
 8000c08:	40011000 	.word	0x40011000
 8000c0c:	40010800 	.word	0x40010800

08000c10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c12:	b097      	sub	sp, #92	; 0x5c
 8000c14:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c16:	f000 fffd 	bl	8001c14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c1a:	f000 fa6f 	bl	80010fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c1e:	f7ff ff95 	bl	8000b4c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000c22:	f000 ff21 	bl	8001a68 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 8000c26:	f000 fe9f 	bl	8001968 <MX_TIM4_Init>
  MX_TIM3_Init();
 8000c2a:	f000 fe4f 	bl	80018cc <MX_TIM3_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000c2e:	f000 faa5 	bl	800117c <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, &ReceiveTmp, 1);
 8000c32:	2201      	movs	r2, #1
 8000c34:	49ad      	ldr	r1, [pc, #692]	; (8000eec <main+0x2dc>)
 8000c36:	48ae      	ldr	r0, [pc, #696]	; (8000ef0 <main+0x2e0>)
 8000c38:	f002 fbfb 	bl	8003432 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
//  HAL_TIM_Base_Start_IT(&htim4);
//  HAL_TIM_Base_Start_IT(&htim3);
  SMSUartTxState = Config;
 8000c3c:	4bad      	ldr	r3, [pc, #692]	; (8000ef4 <main+0x2e4>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	701a      	strb	r2, [r3, #0]
  LastTickForSim800 = HAL_GetTick();
 8000c42:	f001 f83f 	bl	8001cc4 <HAL_GetTick>
 8000c46:	4603      	mov	r3, r0
 8000c48:	4aab      	ldr	r2, [pc, #684]	; (8000ef8 <main+0x2e8>)
 8000c4a:	6013      	str	r3, [r2, #0]
  while (1)
  {
	  temperature = -19.5;
 8000c4c:	4bab      	ldr	r3, [pc, #684]	; (8000efc <main+0x2ec>)
 8000c4e:	4aac      	ldr	r2, [pc, #688]	; (8000f00 <main+0x2f0>)
 8000c50:	601a      	str	r2, [r3, #0]

	  if(LineCounter)
 8000c52:	4bac      	ldr	r3, [pc, #688]	; (8000f04 <main+0x2f4>)
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d00c      	beq.n	8000c74 <main+0x64>
	  {
		  Parser_TakeLine(&ReceiveBuffer, ReceivedData);
 8000c5a:	49ab      	ldr	r1, [pc, #684]	; (8000f08 <main+0x2f8>)
 8000c5c:	48ab      	ldr	r0, [pc, #684]	; (8000f0c <main+0x2fc>)
 8000c5e:	f000 fb8a 	bl	8001376 <Parser_TakeLine>

		  LineCounter--;
 8000c62:	4ba8      	ldr	r3, [pc, #672]	; (8000f04 <main+0x2f4>)
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	3b01      	subs	r3, #1
 8000c68:	b2da      	uxtb	r2, r3
 8000c6a:	4ba6      	ldr	r3, [pc, #664]	; (8000f04 <main+0x2f4>)
 8000c6c:	701a      	strb	r2, [r3, #0]

		  Parser_parse(ReceivedData);
 8000c6e:	48a6      	ldr	r0, [pc, #664]	; (8000f08 <main+0x2f8>)
 8000c70:	f000 fc4e 	bl	8001510 <Parser_parse>
	  }

	  if(Uart1isBusy)
 8000c74:	4ba6      	ldr	r3, [pc, #664]	; (8000f10 <main+0x300>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d006      	beq.n	8000c8a <main+0x7a>
	  {
		  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, RESET);
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c82:	48a4      	ldr	r0, [pc, #656]	; (8000f14 <main+0x304>)
 8000c84:	f001 fb6a 	bl	800235c <HAL_GPIO_WritePin>
 8000c88:	e005      	b.n	8000c96 <main+0x86>
	  }
	  else
	  {
		  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, SET);
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c90:	48a0      	ldr	r0, [pc, #640]	; (8000f14 <main+0x304>)
 8000c92:	f001 fb63 	bl	800235c <HAL_GPIO_WritePin>
	  }


	  if(Uart1isBusy == 0 && HAL_GetTick() - LastTickForSim800 >= inquiryTimeVar)
 8000c96:	4b9e      	ldr	r3, [pc, #632]	; (8000f10 <main+0x300>)
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d1d6      	bne.n	8000c4c <main+0x3c>
 8000c9e:	f001 f811 	bl	8001cc4 <HAL_GetTick>
 8000ca2:	4602      	mov	r2, r0
 8000ca4:	4b94      	ldr	r3, [pc, #592]	; (8000ef8 <main+0x2e8>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	1ad3      	subs	r3, r2, r3
 8000caa:	4a9b      	ldr	r2, [pc, #620]	; (8000f18 <main+0x308>)
 8000cac:	8812      	ldrh	r2, [r2, #0]
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d3cc      	bcc.n	8000c4c <main+0x3c>
	  	{LastTickForSim800 = HAL_GetTick();
 8000cb2:	f001 f807 	bl	8001cc4 <HAL_GetTick>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	4a8f      	ldr	r2, [pc, #572]	; (8000ef8 <main+0x2e8>)
 8000cba:	6013      	str	r3, [r2, #0]
	  		if(SMSUartTxState == Control)
 8000cbc:	4b8d      	ldr	r3, [pc, #564]	; (8000ef4 <main+0x2e4>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	2b01      	cmp	r3, #1
 8000cc2:	d122      	bne.n	8000d0a <main+0xfa>
	  		{
	  			static uint8_t TaskState = 0;

	  			switch(TaskState)
 8000cc4:	4b95      	ldr	r3, [pc, #596]	; (8000f1c <main+0x30c>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	2b02      	cmp	r3, #2
 8000cca:	d014      	beq.n	8000cf6 <main+0xe6>
 8000ccc:	2b02      	cmp	r3, #2
 8000cce:	dcbd      	bgt.n	8000c4c <main+0x3c>
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d002      	beq.n	8000cda <main+0xca>
 8000cd4:	2b01      	cmp	r3, #1
 8000cd6:	d007      	beq.n	8000ce8 <main+0xd8>
 8000cd8:	e1e4      	b.n	80010a4 <main+0x494>
	  			{
	  			case 0:
	  				UartSend("AT+CSQ\r\n");
 8000cda:	4891      	ldr	r0, [pc, #580]	; (8000f20 <main+0x310>)
 8000cdc:	f000 ff3a 	bl	8001b54 <UartSend>
	  				TaskState = 1;
 8000ce0:	4b8e      	ldr	r3, [pc, #568]	; (8000f1c <main+0x30c>)
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	701a      	strb	r2, [r3, #0]
	  				break;
 8000ce6:	e1dd      	b.n	80010a4 <main+0x494>
	  			case 1:
	  				UartSend("AT+CREG?\r\n");
 8000ce8:	488e      	ldr	r0, [pc, #568]	; (8000f24 <main+0x314>)
 8000cea:	f000 ff33 	bl	8001b54 <UartSend>
	  				TaskState = 2;
 8000cee:	4b8b      	ldr	r3, [pc, #556]	; (8000f1c <main+0x30c>)
 8000cf0:	2202      	movs	r2, #2
 8000cf2:	701a      	strb	r2, [r3, #0]
	  				break;
 8000cf4:	e1d6      	b.n	80010a4 <main+0x494>
	  			case 2:
	  				UartSend("AT+CCLK?\r\n");
 8000cf6:	488c      	ldr	r0, [pc, #560]	; (8000f28 <main+0x318>)
 8000cf8:	f000 ff2c 	bl	8001b54 <UartSend>
	  				TaskState = 0;
 8000cfc:	4b87      	ldr	r3, [pc, #540]	; (8000f1c <main+0x30c>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	701a      	strb	r2, [r3, #0]
	  				SMSUartTxState = Control;
 8000d02:	4b7c      	ldr	r3, [pc, #496]	; (8000ef4 <main+0x2e4>)
 8000d04:	2201      	movs	r2, #1
 8000d06:	701a      	strb	r2, [r3, #0]
	  				break;
 8000d08:	e1cc      	b.n	80010a4 <main+0x494>
	  			}
	  		}
	  		else if(SMSUartTxState == SMSMsgWrite)
 8000d0a:	4b7a      	ldr	r3, [pc, #488]	; (8000ef4 <main+0x2e4>)
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	2b02      	cmp	r3, #2
 8000d10:	d143      	bne.n	8000d9a <main+0x18a>
	  		{
	  			static uint8_t TaskState = 0;
	  			switch(TaskState)
 8000d12:	4b86      	ldr	r3, [pc, #536]	; (8000f2c <main+0x31c>)
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	2b03      	cmp	r3, #3
 8000d18:	d898      	bhi.n	8000c4c <main+0x3c>
 8000d1a:	a201      	add	r2, pc, #4	; (adr r2, 8000d20 <main+0x110>)
 8000d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d20:	08000d31 	.word	0x08000d31
 8000d24:	08000d47 	.word	0x08000d47
 8000d28:	08000d6b 	.word	0x08000d6b
 8000d2c:	08000d8b 	.word	0x08000d8b
	  			{
	  			case 0:
	  				UartSendWoRxCtrl("AT+CMGS=\"+48885447216\"\r\n");
 8000d30:	487f      	ldr	r0, [pc, #508]	; (8000f30 <main+0x320>)
 8000d32:	f000 ff2f 	bl	8001b94 <UartSendWoRxCtrl>
	  				inquiryTimeVar = 2000;
 8000d36:	4b78      	ldr	r3, [pc, #480]	; (8000f18 <main+0x308>)
 8000d38:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000d3c:	801a      	strh	r2, [r3, #0]
	  				TaskState = 1;
 8000d3e:	4b7b      	ldr	r3, [pc, #492]	; (8000f2c <main+0x31c>)
 8000d40:	2201      	movs	r2, #1
 8000d42:	701a      	strb	r2, [r3, #0]
	  				break;
 8000d44:	e1ae      	b.n	80010a4 <main+0x494>
	  			case 1:
	  				HAL_UART_Transmit_IT(&huart1, (uint8_t*) SMSMessage, strlen(SMSMessage));
 8000d46:	487b      	ldr	r0, [pc, #492]	; (8000f34 <main+0x324>)
 8000d48:	f7ff fa0c 	bl	8000164 <strlen>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	b29b      	uxth	r3, r3
 8000d50:	461a      	mov	r2, r3
 8000d52:	4978      	ldr	r1, [pc, #480]	; (8000f34 <main+0x324>)
 8000d54:	4866      	ldr	r0, [pc, #408]	; (8000ef0 <main+0x2e0>)
 8000d56:	f002 fb28 	bl	80033aa <HAL_UART_Transmit_IT>
	  				*Uart1isBusyPtr = 1;
 8000d5a:	4b77      	ldr	r3, [pc, #476]	; (8000f38 <main+0x328>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	2201      	movs	r2, #1
 8000d60:	701a      	strb	r2, [r3, #0]
	  				TaskState = 2;
 8000d62:	4b72      	ldr	r3, [pc, #456]	; (8000f2c <main+0x31c>)
 8000d64:	2202      	movs	r2, #2
 8000d66:	701a      	strb	r2, [r3, #0]
	  				break;
 8000d68:	e19c      	b.n	80010a4 <main+0x494>
	  			case 2:
	  				HAL_UART_Transmit_IT(&huart1, (uint8_t*) &ctrlZ, 1);
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	4973      	ldr	r1, [pc, #460]	; (8000f3c <main+0x32c>)
 8000d6e:	4860      	ldr	r0, [pc, #384]	; (8000ef0 <main+0x2e0>)
 8000d70:	f002 fb1b 	bl	80033aa <HAL_UART_Transmit_IT>
	  				*Uart1isBusyPtr = 1;
 8000d74:	4b70      	ldr	r3, [pc, #448]	; (8000f38 <main+0x328>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	2201      	movs	r2, #1
 8000d7a:	701a      	strb	r2, [r3, #0]
	  				TaskState = 3;
 8000d7c:	4b6b      	ldr	r3, [pc, #428]	; (8000f2c <main+0x31c>)
 8000d7e:	2203      	movs	r2, #3
 8000d80:	701a      	strb	r2, [r3, #0]
	  				SMSUartTxState = Control;
 8000d82:	4b5c      	ldr	r3, [pc, #368]	; (8000ef4 <main+0x2e4>)
 8000d84:	2201      	movs	r2, #1
 8000d86:	701a      	strb	r2, [r3, #0]
	  				break;
 8000d88:	e18c      	b.n	80010a4 <main+0x494>
	  			case 3:
	  				inquiryTimeVar = INQUIRY_TIME;
 8000d8a:	4b63      	ldr	r3, [pc, #396]	; (8000f18 <main+0x308>)
 8000d8c:	f240 22ee 	movw	r2, #750	; 0x2ee
 8000d90:	801a      	strh	r2, [r3, #0]
	  				TaskState = 0;
 8000d92:	4b66      	ldr	r3, [pc, #408]	; (8000f2c <main+0x31c>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	701a      	strb	r2, [r3, #0]
	  				break;
 8000d98:	e184      	b.n	80010a4 <main+0x494>
	  			}
	  		}
	  		else if(SMSUartTxState == Config)
 8000d9a:	4b56      	ldr	r3, [pc, #344]	; (8000ef4 <main+0x2e4>)
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d138      	bne.n	8000e14 <main+0x204>
	  		{
	  			static uint8_t TaskState = 0;
	  			switch(TaskState)
 8000da2:	4b67      	ldr	r3, [pc, #412]	; (8000f40 <main+0x330>)
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	2b04      	cmp	r3, #4
 8000da8:	f63f af50 	bhi.w	8000c4c <main+0x3c>
 8000dac:	a201      	add	r2, pc, #4	; (adr r2, 8000db4 <main+0x1a4>)
 8000dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000db2:	bf00      	nop
 8000db4:	08000dc9 	.word	0x08000dc9
 8000db8:	08000dd7 	.word	0x08000dd7
 8000dbc:	08000de5 	.word	0x08000de5
 8000dc0:	08000df3 	.word	0x08000df3
 8000dc4:	08000e01 	.word	0x08000e01
	  			{
	  			case 0:
	  				UartSend("ATE0\r\n");
 8000dc8:	485e      	ldr	r0, [pc, #376]	; (8000f44 <main+0x334>)
 8000dca:	f000 fec3 	bl	8001b54 <UartSend>
	  				TaskState = 1;
 8000dce:	4b5c      	ldr	r3, [pc, #368]	; (8000f40 <main+0x330>)
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	701a      	strb	r2, [r3, #0]
	  				break;
 8000dd4:	e166      	b.n	80010a4 <main+0x494>
	  			case 1:
	  				UartSend("AT+CMGF=1\r\n");
 8000dd6:	485c      	ldr	r0, [pc, #368]	; (8000f48 <main+0x338>)
 8000dd8:	f000 febc 	bl	8001b54 <UartSend>
	  				TaskState = 2;
 8000ddc:	4b58      	ldr	r3, [pc, #352]	; (8000f40 <main+0x330>)
 8000dde:	2202      	movs	r2, #2
 8000de0:	701a      	strb	r2, [r3, #0]
	  				break;
 8000de2:	e15f      	b.n	80010a4 <main+0x494>
	  			case 2:
	  				UartSend("AT+CLTS=1\r\n");
 8000de4:	4859      	ldr	r0, [pc, #356]	; (8000f4c <main+0x33c>)
 8000de6:	f000 feb5 	bl	8001b54 <UartSend>
	  				TaskState = 3;
 8000dea:	4b55      	ldr	r3, [pc, #340]	; (8000f40 <main+0x330>)
 8000dec:	2203      	movs	r2, #3
 8000dee:	701a      	strb	r2, [r3, #0]
	  				break;
 8000df0:	e158      	b.n	80010a4 <main+0x494>
	  			case 3:
	  				UartSend("AT+CNMI=2,2,0,0,0\r\n");
 8000df2:	4857      	ldr	r0, [pc, #348]	; (8000f50 <main+0x340>)
 8000df4:	f000 feae 	bl	8001b54 <UartSend>
	  				TaskState = 4;
 8000df8:	4b51      	ldr	r3, [pc, #324]	; (8000f40 <main+0x330>)
 8000dfa:	2204      	movs	r2, #4
 8000dfc:	701a      	strb	r2, [r3, #0]
	  				break;
 8000dfe:	e151      	b.n	80010a4 <main+0x494>
	  			case 4:
	  				UartSend("AT&W\r\n");
 8000e00:	4854      	ldr	r0, [pc, #336]	; (8000f54 <main+0x344>)
 8000e02:	f000 fea7 	bl	8001b54 <UartSend>
	  				TaskState = 0;
 8000e06:	4b4e      	ldr	r3, [pc, #312]	; (8000f40 <main+0x330>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	701a      	strb	r2, [r3, #0]
	  				SMSUartTxState = Control;
 8000e0c:	4b39      	ldr	r3, [pc, #228]	; (8000ef4 <main+0x2e4>)
 8000e0e:	2201      	movs	r2, #1
 8000e10:	701a      	strb	r2, [r3, #0]
	  				break;
 8000e12:	e147      	b.n	80010a4 <main+0x494>

	  			}
	  		}
	  		else if(SMSUartTxState == FTPMsgWrite)
 8000e14:	4b37      	ldr	r3, [pc, #220]	; (8000ef4 <main+0x2e4>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	2b03      	cmp	r3, #3
 8000e1a:	f47f af17 	bne.w	8000c4c <main+0x3c>
	  		{
	  			static uint8_t TaskState = 0;
  				char ATcmdFtp[64];
  				uint16_t MsgLen;
	  			inquiryTimeVar = INQUIRY_TIME;
 8000e1e:	4b3e      	ldr	r3, [pc, #248]	; (8000f18 <main+0x308>)
 8000e20:	f240 22ee 	movw	r2, #750	; 0x2ee
 8000e24:	801a      	strh	r2, [r3, #0]
	  			switch(TaskState)
 8000e26:	4b4c      	ldr	r3, [pc, #304]	; (8000f58 <main+0x348>)
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	2b0f      	cmp	r3, #15
 8000e2c:	f63f af0e 	bhi.w	8000c4c <main+0x3c>
 8000e30:	a201      	add	r2, pc, #4	; (adr r2, 8000e38 <main+0x228>)
 8000e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e36:	bf00      	nop
 8000e38:	08000e79 	.word	0x08000e79
 8000e3c:	08000e87 	.word	0x08000e87
 8000e40:	08000e95 	.word	0x08000e95
 8000e44:	08000eab 	.word	0x08000eab
 8000e48:	08000ec9 	.word	0x08000ec9
 8000e4c:	08000edf 	.word	0x08000edf
 8000e50:	08000f79 	.word	0x08000f79
 8000e54:	08000f87 	.word	0x08000f87
 8000e58:	08000f95 	.word	0x08000f95
 8000e5c:	08000fa3 	.word	0x08000fa3
 8000e60:	08000fe9 	.word	0x08000fe9
 8000e64:	08000ff7 	.word	0x08000ff7
 8000e68:	0800100d 	.word	0x0800100d
 8000e6c:	08001055 	.word	0x08001055
 8000e70:	0800107b 	.word	0x0800107b
 8000e74:	08001089 	.word	0x08001089
	  			{
	  			case 0:
	  				UartSend("AT+SAPBR=3,1,\"Contype\",\"GPRS\"\r\n");
 8000e78:	4838      	ldr	r0, [pc, #224]	; (8000f5c <main+0x34c>)
 8000e7a:	f000 fe6b 	bl	8001b54 <UartSend>
	  				TaskState = 1;
 8000e7e:	4b36      	ldr	r3, [pc, #216]	; (8000f58 <main+0x348>)
 8000e80:	2201      	movs	r2, #1
 8000e82:	701a      	strb	r2, [r3, #0]
	  				break;
 8000e84:	e10e      	b.n	80010a4 <main+0x494>
	  			case 1:
	  				UartSend("AT+SAPBR=3,1,\"APN\",\"plus\"\r\n");
 8000e86:	4836      	ldr	r0, [pc, #216]	; (8000f60 <main+0x350>)
 8000e88:	f000 fe64 	bl	8001b54 <UartSend>
	  				TaskState = 2;
 8000e8c:	4b32      	ldr	r3, [pc, #200]	; (8000f58 <main+0x348>)
 8000e8e:	2202      	movs	r2, #2
 8000e90:	701a      	strb	r2, [r3, #0]
	  				break;
 8000e92:	e107      	b.n	80010a4 <main+0x494>
	  			case 2:
	  				UartSend("AT+SAPBR=1,1\r\n");
 8000e94:	4833      	ldr	r0, [pc, #204]	; (8000f64 <main+0x354>)
 8000e96:	f000 fe5d 	bl	8001b54 <UartSend>
	  				inquiryTimeVar = 5000;
 8000e9a:	4b1f      	ldr	r3, [pc, #124]	; (8000f18 <main+0x308>)
 8000e9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ea0:	801a      	strh	r2, [r3, #0]
	  				TaskState = 3;
 8000ea2:	4b2d      	ldr	r3, [pc, #180]	; (8000f58 <main+0x348>)
 8000ea4:	2203      	movs	r2, #3
 8000ea6:	701a      	strb	r2, [r3, #0]
	  				break;
 8000ea8:	e0fc      	b.n	80010a4 <main+0x494>
	  			case 3:
	  				if(ReceivedState == 1)
 8000eaa:	4b2f      	ldr	r3, [pc, #188]	; (8000f68 <main+0x358>)
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	2b01      	cmp	r3, #1
 8000eb0:	d103      	bne.n	8000eba <main+0x2aa>
	  				{
	  					TaskState = 4;
 8000eb2:	4b29      	ldr	r3, [pc, #164]	; (8000f58 <main+0x348>)
 8000eb4:	2204      	movs	r2, #4
 8000eb6:	701a      	strb	r2, [r3, #0]
	  				else
	  				{
	  					TaskState = 0;
	  					UartSend("AT+SAPBR=0,1\r\n");
	  				}
	  				break;
 8000eb8:	e0f4      	b.n	80010a4 <main+0x494>
	  					TaskState = 0;
 8000eba:	4b27      	ldr	r3, [pc, #156]	; (8000f58 <main+0x348>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	701a      	strb	r2, [r3, #0]
	  					UartSend("AT+SAPBR=0,1\r\n");
 8000ec0:	482a      	ldr	r0, [pc, #168]	; (8000f6c <main+0x35c>)
 8000ec2:	f000 fe47 	bl	8001b54 <UartSend>
	  				break;
 8000ec6:	e0ed      	b.n	80010a4 <main+0x494>
	  			case 4:
	  				UartSend("AT+SAPBR=2,1\r\n");
 8000ec8:	4829      	ldr	r0, [pc, #164]	; (8000f70 <main+0x360>)
 8000eca:	f000 fe43 	bl	8001b54 <UartSend>
	  				inquiryTimeVar  =INQUIRY_TIME;
 8000ece:	4b12      	ldr	r3, [pc, #72]	; (8000f18 <main+0x308>)
 8000ed0:	f240 22ee 	movw	r2, #750	; 0x2ee
 8000ed4:	801a      	strh	r2, [r3, #0]
	  				TaskState = 5;
 8000ed6:	4b20      	ldr	r3, [pc, #128]	; (8000f58 <main+0x348>)
 8000ed8:	2205      	movs	r2, #5
 8000eda:	701a      	strb	r2, [r3, #0]
	  				break;
 8000edc:	e0e2      	b.n	80010a4 <main+0x494>
	  			case 5:
	  				UartSend("AT+FTPCID=1\r\n");
 8000ede:	4825      	ldr	r0, [pc, #148]	; (8000f74 <main+0x364>)
 8000ee0:	f000 fe38 	bl	8001b54 <UartSend>
	  				TaskState = 6;
 8000ee4:	4b1c      	ldr	r3, [pc, #112]	; (8000f58 <main+0x348>)
 8000ee6:	2206      	movs	r2, #6
 8000ee8:	701a      	strb	r2, [r3, #0]
	  				break;
 8000eea:	e0db      	b.n	80010a4 <main+0x494>
 8000eec:	200003d0 	.word	0x200003d0
 8000ef0:	20000ff0 	.word	0x20000ff0
 8000ef4:	200004e9 	.word	0x200004e9
 8000ef8:	200004d4 	.word	0x200004d4
 8000efc:	20000f54 	.word	0x20000f54
 8000f00:	c19c0000 	.word	0xc19c0000
 8000f04:	200003d1 	.word	0x200003d1
 8000f08:	200003d4 	.word	0x200003d4
 8000f0c:	20000294 	.word	0x20000294
 8000f10:	200004d3 	.word	0x200004d3
 8000f14:	40011000 	.word	0x40011000
 8000f18:	20000004 	.word	0x20000004
 8000f1c:	20000f58 	.word	0x20000f58
 8000f20:	08008200 	.word	0x08008200
 8000f24:	0800820c 	.word	0x0800820c
 8000f28:	08008218 	.word	0x08008218
 8000f2c:	20000f59 	.word	0x20000f59
 8000f30:	08008224 	.word	0x08008224
 8000f34:	20000008 	.word	0x20000008
 8000f38:	20000000 	.word	0x20000000
 8000f3c:	08008448 	.word	0x08008448
 8000f40:	20000f5a 	.word	0x20000f5a
 8000f44:	08008240 	.word	0x08008240
 8000f48:	08008248 	.word	0x08008248
 8000f4c:	08008254 	.word	0x08008254
 8000f50:	08008260 	.word	0x08008260
 8000f54:	08008274 	.word	0x08008274
 8000f58:	20000f5b 	.word	0x20000f5b
 8000f5c:	0800827c 	.word	0x0800827c
 8000f60:	0800829c 	.word	0x0800829c
 8000f64:	080082b8 	.word	0x080082b8
 8000f68:	200004e0 	.word	0x200004e0
 8000f6c:	080082c8 	.word	0x080082c8
 8000f70:	080082d8 	.word	0x080082d8
 8000f74:	080082e8 	.word	0x080082e8
	  			case 6:
	  				UartSend("AT+FTPSERV=\"www.mkwk019.cba.pl\"\r\n");
 8000f78:	484b      	ldr	r0, [pc, #300]	; (80010a8 <main+0x498>)
 8000f7a:	f000 fdeb 	bl	8001b54 <UartSend>
	  				TaskState = 7;
 8000f7e:	4b4b      	ldr	r3, [pc, #300]	; (80010ac <main+0x49c>)
 8000f80:	2207      	movs	r2, #7
 8000f82:	701a      	strb	r2, [r3, #0]
	  				break;
 8000f84:	e08e      	b.n	80010a4 <main+0x494>
	  			case 7:
	  				UartSend("AT+FTPUN=\"hostv1@donakoemb.cba.pl\"\r\n");
 8000f86:	484a      	ldr	r0, [pc, #296]	; (80010b0 <main+0x4a0>)
 8000f88:	f000 fde4 	bl	8001b54 <UartSend>
	  				TaskState = 8;
 8000f8c:	4b47      	ldr	r3, [pc, #284]	; (80010ac <main+0x49c>)
 8000f8e:	2208      	movs	r2, #8
 8000f90:	701a      	strb	r2, [r3, #0]
	  				break;
 8000f92:	e087      	b.n	80010a4 <main+0x494>
	  			case 8:
	  				UartSend("AT+FTPPW=\"FalconEye2022\"\r\n");
 8000f94:	4847      	ldr	r0, [pc, #284]	; (80010b4 <main+0x4a4>)
 8000f96:	f000 fddd 	bl	8001b54 <UartSend>
	  				TaskState = 9;
 8000f9a:	4b44      	ldr	r3, [pc, #272]	; (80010ac <main+0x49c>)
 8000f9c:	2209      	movs	r2, #9
 8000f9e:	701a      	strb	r2, [r3, #0]
	  				break;
 8000fa0:	e080      	b.n	80010a4 <main+0x494>
	  			case 9:
	  				sprintf(ATcmdFtp, "AT+FTPPUTNAME=\"884%.2u%.2u%.2u%.2u%.2u%.2u.txt\"\r\n", year, month, day, hour, minute, second);
 8000fa2:	4b45      	ldr	r3, [pc, #276]	; (80010b8 <main+0x4a8>)
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	461d      	mov	r5, r3
 8000fa8:	4b44      	ldr	r3, [pc, #272]	; (80010bc <main+0x4ac>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	461e      	mov	r6, r3
 8000fae:	4b44      	ldr	r3, [pc, #272]	; (80010c0 <main+0x4b0>)
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	4b43      	ldr	r3, [pc, #268]	; (80010c4 <main+0x4b4>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	4619      	mov	r1, r3
 8000fba:	4b43      	ldr	r3, [pc, #268]	; (80010c8 <main+0x4b8>)
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	461c      	mov	r4, r3
 8000fc0:	4b42      	ldr	r3, [pc, #264]	; (80010cc <main+0x4bc>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	1d38      	adds	r0, r7, #4
 8000fc6:	9303      	str	r3, [sp, #12]
 8000fc8:	9402      	str	r4, [sp, #8]
 8000fca:	9101      	str	r1, [sp, #4]
 8000fcc:	9200      	str	r2, [sp, #0]
 8000fce:	4633      	mov	r3, r6
 8000fd0:	462a      	mov	r2, r5
 8000fd2:	493f      	ldr	r1, [pc, #252]	; (80010d0 <main+0x4c0>)
 8000fd4:	f003 face 	bl	8004574 <siprintf>
	  				UartSend(ATcmdFtp);
 8000fd8:	1d3b      	adds	r3, r7, #4
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f000 fdba 	bl	8001b54 <UartSend>
	  				TaskState = 10;
 8000fe0:	4b32      	ldr	r3, [pc, #200]	; (80010ac <main+0x49c>)
 8000fe2:	220a      	movs	r2, #10
 8000fe4:	701a      	strb	r2, [r3, #0]
	  				break;
 8000fe6:	e05d      	b.n	80010a4 <main+0x494>
	  			case 10:
	  				UartSend("AT+FTPPUTPATH=\"/\"\r\n");
 8000fe8:	483a      	ldr	r0, [pc, #232]	; (80010d4 <main+0x4c4>)
 8000fea:	f000 fdb3 	bl	8001b54 <UartSend>
	  				TaskState = 11;
 8000fee:	4b2f      	ldr	r3, [pc, #188]	; (80010ac <main+0x49c>)
 8000ff0:	220b      	movs	r2, #11
 8000ff2:	701a      	strb	r2, [r3, #0]
	  				break;
 8000ff4:	e056      	b.n	80010a4 <main+0x494>
	  			case 11:
	  				UartSend("AT+FTPPUT=1\r\n");
 8000ff6:	4838      	ldr	r0, [pc, #224]	; (80010d8 <main+0x4c8>)
 8000ff8:	f000 fdac 	bl	8001b54 <UartSend>
	  				inquiryTimeVar = 4000;
 8000ffc:	4b37      	ldr	r3, [pc, #220]	; (80010dc <main+0x4cc>)
 8000ffe:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8001002:	801a      	strh	r2, [r3, #0]
	  				TaskState = 12;
 8001004:	4b29      	ldr	r3, [pc, #164]	; (80010ac <main+0x49c>)
 8001006:	220c      	movs	r2, #12
 8001008:	701a      	strb	r2, [r3, #0]
	  				break;
 800100a:	e04b      	b.n	80010a4 <main+0x494>
	  			case 12:
	  				if(FTPMessageBoxRecordSwitch == 2)
 800100c:	4b34      	ldr	r3, [pc, #208]	; (80010e0 <main+0x4d0>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	2b02      	cmp	r3, #2
 8001012:	d106      	bne.n	8001022 <main+0x412>
	  				{
	  					MsgLen = strlen(FTPMessageBox1);
 8001014:	4833      	ldr	r0, [pc, #204]	; (80010e4 <main+0x4d4>)
 8001016:	f7ff f8a5 	bl	8000164 <strlen>
 800101a:	4603      	mov	r3, r0
 800101c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8001020:	e009      	b.n	8001036 <main+0x426>
	  				}
	  				else if(FTPMessageBoxRecordSwitch == 1)
 8001022:	4b2f      	ldr	r3, [pc, #188]	; (80010e0 <main+0x4d0>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	2b01      	cmp	r3, #1
 8001028:	d105      	bne.n	8001036 <main+0x426>
	  				{
	  					MsgLen = strlen(FTPMessageBox2);
 800102a:	482f      	ldr	r0, [pc, #188]	; (80010e8 <main+0x4d8>)
 800102c:	f7ff f89a 	bl	8000164 <strlen>
 8001030:	4603      	mov	r3, r0
 8001032:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	  				}
	  				sprintf(ATcmdFtp,"AT+FTPPUT=2,%u\r\n", MsgLen);
 8001036:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800103a:	1d3b      	adds	r3, r7, #4
 800103c:	492b      	ldr	r1, [pc, #172]	; (80010ec <main+0x4dc>)
 800103e:	4618      	mov	r0, r3
 8001040:	f003 fa98 	bl	8004574 <siprintf>
	  				UartSendWoRxCtrl(ATcmdFtp);
 8001044:	1d3b      	adds	r3, r7, #4
 8001046:	4618      	mov	r0, r3
 8001048:	f000 fda4 	bl	8001b94 <UartSendWoRxCtrl>
					TaskState = 13;
 800104c:	4b17      	ldr	r3, [pc, #92]	; (80010ac <main+0x49c>)
 800104e:	220d      	movs	r2, #13
 8001050:	701a      	strb	r2, [r3, #0]
					break;
 8001052:	e027      	b.n	80010a4 <main+0x494>
	  			case 13:
	  				if(FTPMessageBoxRecordSwitch == 2)
 8001054:	4b22      	ldr	r3, [pc, #136]	; (80010e0 <main+0x4d0>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	2b02      	cmp	r3, #2
 800105a:	d103      	bne.n	8001064 <main+0x454>
	  				{
	  					UartSendWoRxCtrl(FTPMessageBox1);
 800105c:	4821      	ldr	r0, [pc, #132]	; (80010e4 <main+0x4d4>)
 800105e:	f000 fd99 	bl	8001b94 <UartSendWoRxCtrl>
 8001062:	e006      	b.n	8001072 <main+0x462>
	  				}
	  				else if(FTPMessageBoxRecordSwitch == 1)
 8001064:	4b1e      	ldr	r3, [pc, #120]	; (80010e0 <main+0x4d0>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	2b01      	cmp	r3, #1
 800106a:	d102      	bne.n	8001072 <main+0x462>
	  				{
	  					UartSendWoRxCtrl(FTPMessageBox2);
 800106c:	481e      	ldr	r0, [pc, #120]	; (80010e8 <main+0x4d8>)
 800106e:	f000 fd91 	bl	8001b94 <UartSendWoRxCtrl>
	  				}
	  				TaskState = 14;
 8001072:	4b0e      	ldr	r3, [pc, #56]	; (80010ac <main+0x49c>)
 8001074:	220e      	movs	r2, #14
 8001076:	701a      	strb	r2, [r3, #0]
	  				break;
 8001078:	e014      	b.n	80010a4 <main+0x494>
	  			case 14:
	  				UartSend("AT+FTPPUT=2,0\r\n");
 800107a:	481d      	ldr	r0, [pc, #116]	; (80010f0 <main+0x4e0>)
 800107c:	f000 fd6a 	bl	8001b54 <UartSend>
	  				TaskState = 15;
 8001080:	4b0a      	ldr	r3, [pc, #40]	; (80010ac <main+0x49c>)
 8001082:	220f      	movs	r2, #15
 8001084:	701a      	strb	r2, [r3, #0]
	  				break;
 8001086:	e00d      	b.n	80010a4 <main+0x494>
	  			case 15:
	  				UartSend("AT+SAPBR=0,1\r\n");
 8001088:	481a      	ldr	r0, [pc, #104]	; (80010f4 <main+0x4e4>)
 800108a:	f000 fd63 	bl	8001b54 <UartSend>
	  				TaskState = 0;
 800108e:	4b07      	ldr	r3, [pc, #28]	; (80010ac <main+0x49c>)
 8001090:	2200      	movs	r2, #0
 8001092:	701a      	strb	r2, [r3, #0]
	  				SMSUartTxState = Control;
 8001094:	4b18      	ldr	r3, [pc, #96]	; (80010f8 <main+0x4e8>)
 8001096:	2201      	movs	r2, #1
 8001098:	701a      	strb	r2, [r3, #0]
	  				inquiryTimeVar = INQUIRY_TIME;
 800109a:	4b10      	ldr	r3, [pc, #64]	; (80010dc <main+0x4cc>)
 800109c:	f240 22ee 	movw	r2, #750	; 0x2ee
 80010a0:	801a      	strh	r2, [r3, #0]
	  				break;
 80010a2:	bf00      	nop
	  temperature = -19.5;
 80010a4:	e5d2      	b.n	8000c4c <main+0x3c>
 80010a6:	bf00      	nop
 80010a8:	080082f8 	.word	0x080082f8
 80010ac:	20000f5b 	.word	0x20000f5b
 80010b0:	0800831c 	.word	0x0800831c
 80010b4:	08008344 	.word	0x08008344
 80010b8:	200004e3 	.word	0x200004e3
 80010bc:	200004e4 	.word	0x200004e4
 80010c0:	200004e5 	.word	0x200004e5
 80010c4:	200004e6 	.word	0x200004e6
 80010c8:	200004e7 	.word	0x200004e7
 80010cc:	200004e8 	.word	0x200004e8
 80010d0:	08008360 	.word	0x08008360
 80010d4:	08008394 	.word	0x08008394
 80010d8:	080083a8 	.word	0x080083a8
 80010dc:	20000004 	.word	0x20000004
 80010e0:	20000094 	.word	0x20000094
 80010e4:	200004ec 	.word	0x200004ec
 80010e8:	20000a20 	.word	0x20000a20
 80010ec:	080083b8 	.word	0x080083b8
 80010f0:	080083cc 	.word	0x080083cc
 80010f4:	080082c8 	.word	0x080082c8
 80010f8:	200004e9 	.word	0x200004e9

080010fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b090      	sub	sp, #64	; 0x40
 8001100:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001102:	f107 0318 	add.w	r3, r7, #24
 8001106:	2228      	movs	r2, #40	; 0x28
 8001108:	2100      	movs	r1, #0
 800110a:	4618      	mov	r0, r3
 800110c:	f002 fdca 	bl	8003ca4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001110:	1d3b      	adds	r3, r7, #4
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
 8001116:	605a      	str	r2, [r3, #4]
 8001118:	609a      	str	r2, [r3, #8]
 800111a:	60da      	str	r2, [r3, #12]
 800111c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800111e:	2302      	movs	r3, #2
 8001120:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001122:	2301      	movs	r3, #1
 8001124:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001126:	2310      	movs	r3, #16
 8001128:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800112a:	2302      	movs	r3, #2
 800112c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800112e:	2300      	movs	r3, #0
 8001130:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001132:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001136:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001138:	f107 0318 	add.w	r3, r7, #24
 800113c:	4618      	mov	r0, r3
 800113e:	f001 f925 	bl	800238c <HAL_RCC_OscConfig>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001148:	f000 f910 	bl	800136c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800114c:	230f      	movs	r3, #15
 800114e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001150:	2302      	movs	r3, #2
 8001152:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001154:	2300      	movs	r3, #0
 8001156:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001158:	2300      	movs	r3, #0
 800115a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800115c:	2300      	movs	r3, #0
 800115e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001160:	1d3b      	adds	r3, r7, #4
 8001162:	2100      	movs	r1, #0
 8001164:	4618      	mov	r0, r3
 8001166:	f001 fb93 	bl	8002890 <HAL_RCC_ClockConfig>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001170:	f000 f8fc 	bl	800136c <Error_Handler>
  }
}
 8001174:	bf00      	nop
 8001176:	3740      	adds	r7, #64	; 0x40
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}

0800117c <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* TIM4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001180:	2200      	movs	r2, #0
 8001182:	2100      	movs	r1, #0
 8001184:	201e      	movs	r0, #30
 8001186:	f000 fe7e 	bl	8001e86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800118a:	201e      	movs	r0, #30
 800118c:	f000 fe97 	bl	8001ebe <HAL_NVIC_EnableIRQ>
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001190:	2200      	movs	r2, #0
 8001192:	2100      	movs	r1, #0
 8001194:	2025      	movs	r0, #37	; 0x25
 8001196:	f000 fe76 	bl	8001e86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 800119a:	2025      	movs	r0, #37	; 0x25
 800119c:	f000 fe8f 	bl	8001ebe <HAL_NVIC_EnableIRQ>
  /* TIM3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80011a0:	2200      	movs	r2, #0
 80011a2:	2100      	movs	r1, #0
 80011a4:	201d      	movs	r0, #29
 80011a6:	f000 fe6e 	bl	8001e86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80011aa:	201d      	movs	r0, #29
 80011ac:	f000 fe87 	bl	8001ebe <HAL_NVIC_EnableIRQ>
}
 80011b0:	bf00      	nop
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a11      	ldr	r2, [pc, #68]	; (8001208 <HAL_UART_RxCpltCallback+0x54>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d11b      	bne.n	80011fe <HAL_UART_RxCpltCallback+0x4a>
	{
		if(ReceiveTmp != 0xd)
 80011c6:	4b11      	ldr	r3, [pc, #68]	; (800120c <HAL_UART_RxCpltCallback+0x58>)
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	2b0d      	cmp	r3, #13
 80011cc:	d012      	beq.n	80011f4 <HAL_UART_RxCpltCallback+0x40>
		{
			if (RB_OK == Ring_Buffer_Write(&ReceiveBuffer, ReceiveTmp))
 80011ce:	4b0f      	ldr	r3, [pc, #60]	; (800120c <HAL_UART_RxCpltCallback+0x58>)
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	4619      	mov	r1, r3
 80011d4:	480e      	ldr	r0, [pc, #56]	; (8001210 <HAL_UART_RxCpltCallback+0x5c>)
 80011d6:	f000 fa1b 	bl	8001610 <Ring_Buffer_Write>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d109      	bne.n	80011f4 <HAL_UART_RxCpltCallback+0x40>
			{
				if(ReceiveTmp == ENDLINE)
 80011e0:	4b0a      	ldr	r3, [pc, #40]	; (800120c <HAL_UART_RxCpltCallback+0x58>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	2b0a      	cmp	r3, #10
 80011e6:	d105      	bne.n	80011f4 <HAL_UART_RxCpltCallback+0x40>
				{
					LineCounter++;
 80011e8:	4b0a      	ldr	r3, [pc, #40]	; (8001214 <HAL_UART_RxCpltCallback+0x60>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	3301      	adds	r3, #1
 80011ee:	b2da      	uxtb	r2, r3
 80011f0:	4b08      	ldr	r3, [pc, #32]	; (8001214 <HAL_UART_RxCpltCallback+0x60>)
 80011f2:	701a      	strb	r2, [r3, #0]
				}
			}
		}
		HAL_UART_Receive_IT(&huart1, &ReceiveTmp, 1);
 80011f4:	2201      	movs	r2, #1
 80011f6:	4905      	ldr	r1, [pc, #20]	; (800120c <HAL_UART_RxCpltCallback+0x58>)
 80011f8:	4807      	ldr	r0, [pc, #28]	; (8001218 <HAL_UART_RxCpltCallback+0x64>)
 80011fa:	f002 f91a 	bl	8003432 <HAL_UART_Receive_IT>
	}

}
 80011fe:	bf00      	nop
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	40013800 	.word	0x40013800
 800120c:	200003d0 	.word	0x200003d0
 8001210:	20000294 	.word	0x20000294
 8001214:	200003d1 	.word	0x200003d1
 8001218:	20000ff0 	.word	0x20000ff0

0800121c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
	*Uart1isBusyPtr = 0;
 8001224:	4b04      	ldr	r3, [pc, #16]	; (8001238 <HAL_UART_TxCpltCallback+0x1c>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	2200      	movs	r2, #0
 800122a:	701a      	strb	r2, [r3, #0]
}
 800122c:	bf00      	nop
 800122e:	370c      	adds	r7, #12
 8001230:	46bd      	mov	sp, r7
 8001232:	bc80      	pop	{r7}
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	20000000 	.word	0x20000000

0800123c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800123c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001240:	b093      	sub	sp, #76	; 0x4c
 8001242:	af06      	add	r7, sp, #24
 8001244:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a3a      	ldr	r2, [pc, #232]	; (8001334 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d16c      	bne.n	800132a <HAL_TIM_PeriodElapsedCallback+0xee>
	{   //Period elapsed 128,57s
		timPeriodCounter++;
 8001250:	4b39      	ldr	r3, [pc, #228]	; (8001338 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	3301      	adds	r3, #1
 8001256:	b2da      	uxtb	r2, r3
 8001258:	4b37      	ldr	r3, [pc, #220]	; (8001338 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 800125a:	701a      	strb	r2, [r3, #0]
		char OneSample[32];
		uint8_t helpvarlen1, helpvarlen2; //do usuniecia
		sprintf(OneSample, "%.2u/%.2u/%.2u,%.2u:%.2u:%.2u,%.1f\n", year, month, day, hour, minute, second, temperature);
 800125c:	4b37      	ldr	r3, [pc, #220]	; (800133c <HAL_TIM_PeriodElapsedCallback+0x100>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	4698      	mov	r8, r3
 8001262:	4b37      	ldr	r3, [pc, #220]	; (8001340 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	4699      	mov	r9, r3
 8001268:	4b36      	ldr	r3, [pc, #216]	; (8001344 <HAL_TIM_PeriodElapsedCallback+0x108>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	461c      	mov	r4, r3
 800126e:	4b36      	ldr	r3, [pc, #216]	; (8001348 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	461d      	mov	r5, r3
 8001274:	4b35      	ldr	r3, [pc, #212]	; (800134c <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	461e      	mov	r6, r3
 800127a:	4b35      	ldr	r3, [pc, #212]	; (8001350 <HAL_TIM_PeriodElapsedCallback+0x114>)
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	603b      	str	r3, [r7, #0]
 8001280:	4b34      	ldr	r3, [pc, #208]	; (8001354 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff f8d9 	bl	800043c <__aeabi_f2d>
 800128a:	4602      	mov	r2, r0
 800128c:	460b      	mov	r3, r1
 800128e:	f107 000c 	add.w	r0, r7, #12
 8001292:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	9303      	str	r3, [sp, #12]
 800129a:	9602      	str	r6, [sp, #8]
 800129c:	9501      	str	r5, [sp, #4]
 800129e:	9400      	str	r4, [sp, #0]
 80012a0:	464b      	mov	r3, r9
 80012a2:	4642      	mov	r2, r8
 80012a4:	492c      	ldr	r1, [pc, #176]	; (8001358 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80012a6:	f003 f965 	bl	8004574 <siprintf>
		if(FTPMessageBoxRecordSwitch == 1)
 80012aa:	4b2c      	ldr	r3, [pc, #176]	; (800135c <HAL_TIM_PeriodElapsedCallback+0x120>)
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d106      	bne.n	80012c0 <HAL_TIM_PeriodElapsedCallback+0x84>
		{
			strcat(FTPMessageBox1, OneSample);
 80012b2:	f107 030c 	add.w	r3, r7, #12
 80012b6:	4619      	mov	r1, r3
 80012b8:	4829      	ldr	r0, [pc, #164]	; (8001360 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80012ba:	f003 f97b 	bl	80045b4 <strcat>
 80012be:	e009      	b.n	80012d4 <HAL_TIM_PeriodElapsedCallback+0x98>
		}
		else if(FTPMessageBoxRecordSwitch == 2)
 80012c0:	4b26      	ldr	r3, [pc, #152]	; (800135c <HAL_TIM_PeriodElapsedCallback+0x120>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	2b02      	cmp	r3, #2
 80012c6:	d105      	bne.n	80012d4 <HAL_TIM_PeriodElapsedCallback+0x98>
		{
			strcat(FTPMessageBox2, OneSample);
 80012c8:	f107 030c 	add.w	r3, r7, #12
 80012cc:	4619      	mov	r1, r3
 80012ce:	4825      	ldr	r0, [pc, #148]	; (8001364 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80012d0:	f003 f970 	bl	80045b4 <strcat>
		}

		helpvarlen1 = strlen(FTPMessageBox1);
 80012d4:	4822      	ldr	r0, [pc, #136]	; (8001360 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80012d6:	f7fe ff45 	bl	8000164 <strlen>
 80012da:	4603      	mov	r3, r0
 80012dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		helpvarlen2 = strlen(FTPMessageBox2);
 80012e0:	4820      	ldr	r0, [pc, #128]	; (8001364 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80012e2:	f7fe ff3f 	bl	8000164 <strlen>
 80012e6:	4603      	mov	r3, r0
 80012e8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

		if(timPeriodCounter == 15)
 80012ec:	4b12      	ldr	r3, [pc, #72]	; (8001338 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	2b0f      	cmp	r3, #15
 80012f2:	d11a      	bne.n	800132a <HAL_TIM_PeriodElapsedCallback+0xee>
		{
			SMSUartTxState = FTPMsgWrite;
 80012f4:	4b1c      	ldr	r3, [pc, #112]	; (8001368 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80012f6:	2203      	movs	r2, #3
 80012f8:	701a      	strb	r2, [r3, #0]

			if(FTPMessageBoxRecordSwitch == 1)
 80012fa:	4b18      	ldr	r3, [pc, #96]	; (800135c <HAL_TIM_PeriodElapsedCallback+0x120>)
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d106      	bne.n	8001310 <HAL_TIM_PeriodElapsedCallback+0xd4>
			{
				FTPMessageBox2[0] = '\0';
 8001302:	4b18      	ldr	r3, [pc, #96]	; (8001364 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8001304:	2200      	movs	r2, #0
 8001306:	701a      	strb	r2, [r3, #0]
				FTPMessageBoxRecordSwitch = 2;
 8001308:	4b14      	ldr	r3, [pc, #80]	; (800135c <HAL_TIM_PeriodElapsedCallback+0x120>)
 800130a:	2202      	movs	r2, #2
 800130c:	701a      	strb	r2, [r3, #0]
 800130e:	e009      	b.n	8001324 <HAL_TIM_PeriodElapsedCallback+0xe8>
			}
			else if(FTPMessageBoxRecordSwitch == 2)
 8001310:	4b12      	ldr	r3, [pc, #72]	; (800135c <HAL_TIM_PeriodElapsedCallback+0x120>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	2b02      	cmp	r3, #2
 8001316:	d105      	bne.n	8001324 <HAL_TIM_PeriodElapsedCallback+0xe8>
			{
				FTPMessageBox1[0] = '\0';
 8001318:	4b11      	ldr	r3, [pc, #68]	; (8001360 <HAL_TIM_PeriodElapsedCallback+0x124>)
 800131a:	2200      	movs	r2, #0
 800131c:	701a      	strb	r2, [r3, #0]
				FTPMessageBoxRecordSwitch = 1;
 800131e:	4b0f      	ldr	r3, [pc, #60]	; (800135c <HAL_TIM_PeriodElapsedCallback+0x120>)
 8001320:	2201      	movs	r2, #1
 8001322:	701a      	strb	r2, [r3, #0]
			}

			timPeriodCounter = 0;
 8001324:	4b04      	ldr	r3, [pc, #16]	; (8001338 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001326:	2200      	movs	r2, #0
 8001328:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800132a:	bf00      	nop
 800132c:	3734      	adds	r7, #52	; 0x34
 800132e:	46bd      	mov	sp, r7
 8001330:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001334:	40000400 	.word	0x40000400
 8001338:	200004ea 	.word	0x200004ea
 800133c:	200004e3 	.word	0x200004e3
 8001340:	200004e4 	.word	0x200004e4
 8001344:	200004e5 	.word	0x200004e5
 8001348:	200004e6 	.word	0x200004e6
 800134c:	200004e7 	.word	0x200004e7
 8001350:	200004e8 	.word	0x200004e8
 8001354:	20000f54 	.word	0x20000f54
 8001358:	080083dc 	.word	0x080083dc
 800135c:	20000094 	.word	0x20000094
 8001360:	200004ec 	.word	0x200004ec
 8001364:	20000a20 	.word	0x20000a20
 8001368:	200004e9 	.word	0x200004e9

0800136c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001370:	b672      	cpsid	i
}
 8001372:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001374:	e7fe      	b.n	8001374 <Error_Handler+0x8>

08001376 <Parser_TakeLine>:
#include "stdio.h"
#include "stdlib.h"


void Parser_TakeLine(RingBuffer_t *Buff, uint8_t *Destination)
{
 8001376:	b580      	push	{r7, lr}
 8001378:	b084      	sub	sp, #16
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]
 800137e:	6039      	str	r1, [r7, #0]
	  uint8_t i = 0;
 8001380:	2300      	movs	r3, #0
 8001382:	73fb      	strb	r3, [r7, #15]
	  uint8_t tmp = 0;
 8001384:	2300      	movs	r3, #0
 8001386:	73bb      	strb	r3, [r7, #14]
	do
	{
		 Ring_Buffer_Read(Buff, &tmp);
 8001388:	f107 030e 	add.w	r3, r7, #14
 800138c:	4619      	mov	r1, r3
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	f000 f90e 	bl	80015b0 <Ring_Buffer_Read>
		 if(tmp == ENDLINE)
 8001394:	7bbb      	ldrb	r3, [r7, #14]
 8001396:	2b0a      	cmp	r3, #10
 8001398:	d105      	bne.n	80013a6 <Parser_TakeLine+0x30>
			{
			 Destination[i] = 0;
 800139a:	7bfb      	ldrb	r3, [r7, #15]
 800139c:	683a      	ldr	r2, [r7, #0]
 800139e:	4413      	add	r3, r2
 80013a0:	2200      	movs	r2, #0
 80013a2:	701a      	strb	r2, [r3, #0]
 80013a4:	e004      	b.n	80013b0 <Parser_TakeLine+0x3a>
			}
		else
			{
			Destination[i] = tmp;
 80013a6:	7bfb      	ldrb	r3, [r7, #15]
 80013a8:	683a      	ldr	r2, [r7, #0]
 80013aa:	4413      	add	r3, r2
 80013ac:	7bba      	ldrb	r2, [r7, #14]
 80013ae:	701a      	strb	r2, [r3, #0]
			}

			i++;
 80013b0:	7bfb      	ldrb	r3, [r7, #15]
 80013b2:	3301      	adds	r3, #1
 80013b4:	73fb      	strb	r3, [r7, #15]

	} while(tmp != ENDLINE);
 80013b6:	7bbb      	ldrb	r3, [r7, #14]
 80013b8:	2b0a      	cmp	r3, #10
 80013ba:	d1e5      	bne.n	8001388 <Parser_TakeLine+0x12>
}
 80013bc:	bf00      	nop
 80013be:	bf00      	nop
 80013c0:	3710      	adds	r7, #16
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
	...

080013c8 <Parser_ParseCSQ>:

//CSQ


static void Parser_ParseCSQ(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
	char * ParsePointer = strtok(NULL, ",");
 80013ce:	4908      	ldr	r1, [pc, #32]	; (80013f0 <Parser_ParseCSQ+0x28>)
 80013d0:	2000      	movs	r0, #0
 80013d2:	f003 ff15 	bl	8005200 <strtok>
 80013d6:	6078      	str	r0, [r7, #4]

	SignalQuality = atof(ParsePointer);
 80013d8:	6878      	ldr	r0, [r7, #4]
 80013da:	f002 fc31 	bl	8003c40 <atof>
 80013de:	4602      	mov	r2, r0
 80013e0:	460b      	mov	r3, r1
 80013e2:	4904      	ldr	r1, [pc, #16]	; (80013f4 <Parser_ParseCSQ+0x2c>)
 80013e4:	e9c1 2300 	strd	r2, r3, [r1]
}
 80013e8:	bf00      	nop
 80013ea:	3708      	adds	r7, #8
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	08008400 	.word	0x08008400
 80013f4:	200004d8 	.word	0x200004d8

080013f8 <Parser_ParseCREG>:

static void Parser_ParseCREG(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
	char * ParsePointer = strtok(NULL, ",");
 80013fe:	490e      	ldr	r1, [pc, #56]	; (8001438 <Parser_ParseCREG+0x40>)
 8001400:	2000      	movs	r0, #0
 8001402:	f003 fefd 	bl	8005200 <strtok>
 8001406:	6078      	str	r0, [r7, #4]
	CRegN = atoi(ParsePointer);
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f002 fc1c 	bl	8003c46 <atoi>
 800140e:	4603      	mov	r3, r0
 8001410:	b2da      	uxtb	r2, r3
 8001412:	4b0a      	ldr	r3, [pc, #40]	; (800143c <Parser_ParseCREG+0x44>)
 8001414:	701a      	strb	r2, [r3, #0]
	ParsePointer = strtok(NULL, ",");
 8001416:	4908      	ldr	r1, [pc, #32]	; (8001438 <Parser_ParseCREG+0x40>)
 8001418:	2000      	movs	r0, #0
 800141a:	f003 fef1 	bl	8005200 <strtok>
 800141e:	6078      	str	r0, [r7, #4]
	CRegStat = atoi(ParsePointer);
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	f002 fc10 	bl	8003c46 <atoi>
 8001426:	4603      	mov	r3, r0
 8001428:	b2da      	uxtb	r2, r3
 800142a:	4b05      	ldr	r3, [pc, #20]	; (8001440 <Parser_ParseCREG+0x48>)
 800142c:	701a      	strb	r2, [r3, #0]
}
 800142e:	bf00      	nop
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	08008400 	.word	0x08008400
 800143c:	200004e1 	.word	0x200004e1
 8001440:	200004e2 	.word	0x200004e2

08001444 <Parser_ParseCCLK>:

static void Parser_ParseCCLK(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
	char * ParsePointer = strtok(NULL, "/");
 800144a:	4927      	ldr	r1, [pc, #156]	; (80014e8 <Parser_ParseCCLK+0xa4>)
 800144c:	2000      	movs	r0, #0
 800144e:	f003 fed7 	bl	8005200 <strtok>
 8001452:	6078      	str	r0, [r7, #4]
	year = atoi(ParsePointer+1);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	3301      	adds	r3, #1
 8001458:	4618      	mov	r0, r3
 800145a:	f002 fbf4 	bl	8003c46 <atoi>
 800145e:	4603      	mov	r3, r0
 8001460:	b2da      	uxtb	r2, r3
 8001462:	4b22      	ldr	r3, [pc, #136]	; (80014ec <Parser_ParseCCLK+0xa8>)
 8001464:	701a      	strb	r2, [r3, #0]
	ParsePointer = strtok(NULL, "/");
 8001466:	4920      	ldr	r1, [pc, #128]	; (80014e8 <Parser_ParseCCLK+0xa4>)
 8001468:	2000      	movs	r0, #0
 800146a:	f003 fec9 	bl	8005200 <strtok>
 800146e:	6078      	str	r0, [r7, #4]
	month = atoi(ParsePointer);
 8001470:	6878      	ldr	r0, [r7, #4]
 8001472:	f002 fbe8 	bl	8003c46 <atoi>
 8001476:	4603      	mov	r3, r0
 8001478:	b2da      	uxtb	r2, r3
 800147a:	4b1d      	ldr	r3, [pc, #116]	; (80014f0 <Parser_ParseCCLK+0xac>)
 800147c:	701a      	strb	r2, [r3, #0]
	ParsePointer = strtok(NULL, ",");
 800147e:	491d      	ldr	r1, [pc, #116]	; (80014f4 <Parser_ParseCCLK+0xb0>)
 8001480:	2000      	movs	r0, #0
 8001482:	f003 febd 	bl	8005200 <strtok>
 8001486:	6078      	str	r0, [r7, #4]
	day = atoi(ParsePointer);
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f002 fbdc 	bl	8003c46 <atoi>
 800148e:	4603      	mov	r3, r0
 8001490:	b2da      	uxtb	r2, r3
 8001492:	4b19      	ldr	r3, [pc, #100]	; (80014f8 <Parser_ParseCCLK+0xb4>)
 8001494:	701a      	strb	r2, [r3, #0]
	ParsePointer = strtok(NULL, ":");
 8001496:	4919      	ldr	r1, [pc, #100]	; (80014fc <Parser_ParseCCLK+0xb8>)
 8001498:	2000      	movs	r0, #0
 800149a:	f003 feb1 	bl	8005200 <strtok>
 800149e:	6078      	str	r0, [r7, #4]
	hour = atoi(ParsePointer);
 80014a0:	6878      	ldr	r0, [r7, #4]
 80014a2:	f002 fbd0 	bl	8003c46 <atoi>
 80014a6:	4603      	mov	r3, r0
 80014a8:	b2da      	uxtb	r2, r3
 80014aa:	4b15      	ldr	r3, [pc, #84]	; (8001500 <Parser_ParseCCLK+0xbc>)
 80014ac:	701a      	strb	r2, [r3, #0]
	ParsePointer = strtok(NULL, ":");
 80014ae:	4913      	ldr	r1, [pc, #76]	; (80014fc <Parser_ParseCCLK+0xb8>)
 80014b0:	2000      	movs	r0, #0
 80014b2:	f003 fea5 	bl	8005200 <strtok>
 80014b6:	6078      	str	r0, [r7, #4]
	minute = atoi(ParsePointer);
 80014b8:	6878      	ldr	r0, [r7, #4]
 80014ba:	f002 fbc4 	bl	8003c46 <atoi>
 80014be:	4603      	mov	r3, r0
 80014c0:	b2da      	uxtb	r2, r3
 80014c2:	4b10      	ldr	r3, [pc, #64]	; (8001504 <Parser_ParseCCLK+0xc0>)
 80014c4:	701a      	strb	r2, [r3, #0]
	ParsePointer = strtok(NULL, "+");
 80014c6:	4910      	ldr	r1, [pc, #64]	; (8001508 <Parser_ParseCCLK+0xc4>)
 80014c8:	2000      	movs	r0, #0
 80014ca:	f003 fe99 	bl	8005200 <strtok>
 80014ce:	6078      	str	r0, [r7, #4]
	second = atoi(ParsePointer);
 80014d0:	6878      	ldr	r0, [r7, #4]
 80014d2:	f002 fbb8 	bl	8003c46 <atoi>
 80014d6:	4603      	mov	r3, r0
 80014d8:	b2da      	uxtb	r2, r3
 80014da:	4b0c      	ldr	r3, [pc, #48]	; (800150c <Parser_ParseCCLK+0xc8>)
 80014dc:	701a      	strb	r2, [r3, #0]
}
 80014de:	bf00      	nop
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	08008404 	.word	0x08008404
 80014ec:	200004e3 	.word	0x200004e3
 80014f0:	200004e4 	.word	0x200004e4
 80014f4:	08008400 	.word	0x08008400
 80014f8:	200004e5 	.word	0x200004e5
 80014fc:	08008408 	.word	0x08008408
 8001500:	200004e6 	.word	0x200004e6
 8001504:	200004e7 	.word	0x200004e7
 8001508:	0800840c 	.word	0x0800840c
 800150c:	200004e8 	.word	0x200004e8

08001510 <Parser_parse>:


void Parser_parse(uint8_t * DataToParse)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
	if(strcmp("OK", (char*)DataToParse) == 0)
 8001518:	6879      	ldr	r1, [r7, #4]
 800151a:	481d      	ldr	r0, [pc, #116]	; (8001590 <Parser_parse+0x80>)
 800151c:	f7fe fe18 	bl	8000150 <strcmp>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d103      	bne.n	800152e <Parser_parse+0x1e>
	{
		ReceivedState = 1;
 8001526:	4b1b      	ldr	r3, [pc, #108]	; (8001594 <Parser_parse+0x84>)
 8001528:	2201      	movs	r2, #1
 800152a:	701a      	strb	r2, [r3, #0]
//	  	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
//	  	UartLog("led_off\n\r");
//	  }


}
 800152c:	e02c      	b.n	8001588 <Parser_parse+0x78>
		char * ParsePointer = strtok((char*)DataToParse, " ");
 800152e:	491a      	ldr	r1, [pc, #104]	; (8001598 <Parser_parse+0x88>)
 8001530:	6878      	ldr	r0, [r7, #4]
 8001532:	f003 fe65 	bl	8005200 <strtok>
 8001536:	60f8      	str	r0, [r7, #12]
		if(strcmp("+CSQ:", ParsePointer) == 0)
 8001538:	68f9      	ldr	r1, [r7, #12]
 800153a:	4818      	ldr	r0, [pc, #96]	; (800159c <Parser_parse+0x8c>)
 800153c:	f7fe fe08 	bl	8000150 <strcmp>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d102      	bne.n	800154c <Parser_parse+0x3c>
			Parser_ParseCSQ();
 8001546:	f7ff ff3f 	bl	80013c8 <Parser_ParseCSQ>
}
 800154a:	e01d      	b.n	8001588 <Parser_parse+0x78>
		else if(strcmp("+CREG:", ParsePointer) == 0)
 800154c:	68f9      	ldr	r1, [r7, #12]
 800154e:	4814      	ldr	r0, [pc, #80]	; (80015a0 <Parser_parse+0x90>)
 8001550:	f7fe fdfe 	bl	8000150 <strcmp>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d102      	bne.n	8001560 <Parser_parse+0x50>
			Parser_ParseCREG();
 800155a:	f7ff ff4d 	bl	80013f8 <Parser_ParseCREG>
}
 800155e:	e013      	b.n	8001588 <Parser_parse+0x78>
		else if(strcmp("+CCLK:", ParsePointer) == 0)
 8001560:	68f9      	ldr	r1, [r7, #12]
 8001562:	4810      	ldr	r0, [pc, #64]	; (80015a4 <Parser_parse+0x94>)
 8001564:	f7fe fdf4 	bl	8000150 <strcmp>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d102      	bne.n	8001574 <Parser_parse+0x64>
			Parser_ParseCCLK();
 800156e:	f7ff ff69 	bl	8001444 <Parser_ParseCCLK>
}
 8001572:	e009      	b.n	8001588 <Parser_parse+0x78>
		else if(strcmp("Test2", ParsePointer) == 0)
 8001574:	68f9      	ldr	r1, [r7, #12]
 8001576:	480c      	ldr	r0, [pc, #48]	; (80015a8 <Parser_parse+0x98>)
 8001578:	f7fe fdea 	bl	8000150 <strcmp>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d102      	bne.n	8001588 <Parser_parse+0x78>
			SMSUartTxState = SMSMsgWrite;
 8001582:	4b0a      	ldr	r3, [pc, #40]	; (80015ac <Parser_parse+0x9c>)
 8001584:	2202      	movs	r2, #2
 8001586:	701a      	strb	r2, [r3, #0]
}
 8001588:	bf00      	nop
 800158a:	3710      	adds	r7, #16
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	08008410 	.word	0x08008410
 8001594:	200004e0 	.word	0x200004e0
 8001598:	08008414 	.word	0x08008414
 800159c:	08008418 	.word	0x08008418
 80015a0:	08008420 	.word	0x08008420
 80015a4:	08008428 	.word	0x08008428
 80015a8:	08008430 	.word	0x08008430
 80015ac:	200004e9 	.word	0x200004e9

080015b0 <Ring_Buffer_Read>:
 */
#include "main.h"
#include "ring_buffer.h"

RbStatus_t Ring_Buffer_Read(RingBuffer_t * Buff, uint8_t *value)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	6039      	str	r1, [r7, #0]
	if(Buff->Head == Buff->Tail)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	881a      	ldrh	r2, [r3, #0]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	885b      	ldrh	r3, [r3, #2]
 80015c2:	429a      	cmp	r2, r3
 80015c4:	d101      	bne.n	80015ca <Ring_Buffer_Read+0x1a>
	{
		return RB_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e01a      	b.n	8001600 <Ring_Buffer_Read+0x50>
	}
	*value = Buff->Buffer[Buff->Tail];
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	885b      	ldrh	r3, [r3, #2]
 80015ce:	461a      	mov	r2, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	4413      	add	r3, r2
 80015d4:	791a      	ldrb	r2, [r3, #4]
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	701a      	strb	r2, [r3, #0]

	Buff->Tail = (Buff->Tail + 1) % RING_BUFFER_SIZE;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	885b      	ldrh	r3, [r3, #2]
 80015de:	3301      	adds	r3, #1
 80015e0:	4a0a      	ldr	r2, [pc, #40]	; (800160c <Ring_Buffer_Read+0x5c>)
 80015e2:	fb82 1203 	smull	r1, r2, r2, r3
 80015e6:	441a      	add	r2, r3
 80015e8:	1211      	asrs	r1, r2, #8
 80015ea:	17da      	asrs	r2, r3, #31
 80015ec:	1a8a      	subs	r2, r1, r2
 80015ee:	f44f 719c 	mov.w	r1, #312	; 0x138
 80015f2:	fb01 f202 	mul.w	r2, r1, r2
 80015f6:	1a9a      	subs	r2, r3, r2
 80015f8:	b292      	uxth	r2, r2
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	805a      	strh	r2, [r3, #2]

	return RB_OK;
 80015fe:	2300      	movs	r3, #0
}
 8001600:	4618      	mov	r0, r3
 8001602:	370c      	adds	r7, #12
 8001604:	46bd      	mov	sp, r7
 8001606:	bc80      	pop	{r7}
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	d20d20d3 	.word	0xd20d20d3

08001610 <Ring_Buffer_Write>:

RbStatus_t Ring_Buffer_Write(RingBuffer_t * Buff, uint8_t value)
{
 8001610:	b480      	push	{r7}
 8001612:	b085      	sub	sp, #20
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	460b      	mov	r3, r1
 800161a:	70fb      	strb	r3, [r7, #3]
	uint16_t Head_tmp = (Buff->Head + 1) % RING_BUFFER_SIZE;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	881b      	ldrh	r3, [r3, #0]
 8001620:	3301      	adds	r3, #1
 8001622:	4a12      	ldr	r2, [pc, #72]	; (800166c <Ring_Buffer_Write+0x5c>)
 8001624:	fb82 1203 	smull	r1, r2, r2, r3
 8001628:	441a      	add	r2, r3
 800162a:	1211      	asrs	r1, r2, #8
 800162c:	17da      	asrs	r2, r3, #31
 800162e:	1a8a      	subs	r2, r1, r2
 8001630:	f44f 719c 	mov.w	r1, #312	; 0x138
 8001634:	fb01 f202 	mul.w	r2, r1, r2
 8001638:	1a9a      	subs	r2, r3, r2
 800163a:	4613      	mov	r3, r2
 800163c:	81fb      	strh	r3, [r7, #14]

	if(Head_tmp == Buff->Tail)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	885b      	ldrh	r3, [r3, #2]
 8001642:	89fa      	ldrh	r2, [r7, #14]
 8001644:	429a      	cmp	r2, r3
 8001646:	d101      	bne.n	800164c <Ring_Buffer_Write+0x3c>
	{
		return RB_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	e00a      	b.n	8001662 <Ring_Buffer_Write+0x52>
	}
	Buff->Buffer[Buff->Head] = value;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	881b      	ldrh	r3, [r3, #0]
 8001650:	461a      	mov	r2, r3
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4413      	add	r3, r2
 8001656:	78fa      	ldrb	r2, [r7, #3]
 8001658:	711a      	strb	r2, [r3, #4]
	Buff->Head = Head_tmp;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	89fa      	ldrh	r2, [r7, #14]
 800165e:	801a      	strh	r2, [r3, #0]

	return RB_OK;
 8001660:	2300      	movs	r3, #0
}
 8001662:	4618      	mov	r0, r3
 8001664:	3714      	adds	r7, #20
 8001666:	46bd      	mov	sp, r7
 8001668:	bc80      	pop	{r7}
 800166a:	4770      	bx	lr
 800166c:	d20d20d3 	.word	0xd20d20d3

08001670 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001676:	4b0e      	ldr	r3, [pc, #56]	; (80016b0 <HAL_MspInit+0x40>)
 8001678:	699b      	ldr	r3, [r3, #24]
 800167a:	4a0d      	ldr	r2, [pc, #52]	; (80016b0 <HAL_MspInit+0x40>)
 800167c:	f043 0301 	orr.w	r3, r3, #1
 8001680:	6193      	str	r3, [r2, #24]
 8001682:	4b0b      	ldr	r3, [pc, #44]	; (80016b0 <HAL_MspInit+0x40>)
 8001684:	699b      	ldr	r3, [r3, #24]
 8001686:	f003 0301 	and.w	r3, r3, #1
 800168a:	607b      	str	r3, [r7, #4]
 800168c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800168e:	4b08      	ldr	r3, [pc, #32]	; (80016b0 <HAL_MspInit+0x40>)
 8001690:	69db      	ldr	r3, [r3, #28]
 8001692:	4a07      	ldr	r2, [pc, #28]	; (80016b0 <HAL_MspInit+0x40>)
 8001694:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001698:	61d3      	str	r3, [r2, #28]
 800169a:	4b05      	ldr	r3, [pc, #20]	; (80016b0 <HAL_MspInit+0x40>)
 800169c:	69db      	ldr	r3, [r3, #28]
 800169e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016a2:	603b      	str	r3, [r7, #0]
 80016a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016a6:	bf00      	nop
 80016a8:	370c      	adds	r7, #12
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bc80      	pop	{r7}
 80016ae:	4770      	bx	lr
 80016b0:	40021000 	.word	0x40021000

080016b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016b8:	e7fe      	b.n	80016b8 <NMI_Handler+0x4>

080016ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016ba:	b480      	push	{r7}
 80016bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016be:	e7fe      	b.n	80016be <HardFault_Handler+0x4>

080016c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016c4:	e7fe      	b.n	80016c4 <MemManage_Handler+0x4>

080016c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016c6:	b480      	push	{r7}
 80016c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016ca:	e7fe      	b.n	80016ca <BusFault_Handler+0x4>

080016cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016d0:	e7fe      	b.n	80016d0 <UsageFault_Handler+0x4>

080016d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016d2:	b480      	push	{r7}
 80016d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016d6:	bf00      	nop
 80016d8:	46bd      	mov	sp, r7
 80016da:	bc80      	pop	{r7}
 80016dc:	4770      	bx	lr

080016de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016de:	b480      	push	{r7}
 80016e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016e2:	bf00      	nop
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bc80      	pop	{r7}
 80016e8:	4770      	bx	lr

080016ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016ea:	b480      	push	{r7}
 80016ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016ee:	bf00      	nop
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bc80      	pop	{r7}
 80016f4:	4770      	bx	lr

080016f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016f6:	b580      	push	{r7, lr}
 80016f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016fa:	f000 fad1 	bl	8001ca0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016fe:	bf00      	nop
 8001700:	bd80      	pop	{r7, pc}
	...

08001704 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001708:	4802      	ldr	r0, [pc, #8]	; (8001714 <TIM3_IRQHandler+0x10>)
 800170a:	f001 faa8 	bl	8002c5e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800170e:	bf00      	nop
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	20000f60 	.word	0x20000f60

08001718 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800171c:	4802      	ldr	r0, [pc, #8]	; (8001728 <TIM4_IRQHandler+0x10>)
 800171e:	f001 fa9e 	bl	8002c5e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001722:	bf00      	nop
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	20000fa8 	.word	0x20000fa8

0800172c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001730:	4802      	ldr	r0, [pc, #8]	; (800173c <USART1_IRQHandler+0x10>)
 8001732:	f001 feaf 	bl	8003494 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001736:	bf00      	nop
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	20000ff0 	.word	0x20000ff0

08001740 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  return 1;
 8001744:	2301      	movs	r3, #1
}
 8001746:	4618      	mov	r0, r3
 8001748:	46bd      	mov	sp, r7
 800174a:	bc80      	pop	{r7}
 800174c:	4770      	bx	lr

0800174e <_kill>:

int _kill(int pid, int sig)
{
 800174e:	b580      	push	{r7, lr}
 8001750:	b082      	sub	sp, #8
 8001752:	af00      	add	r7, sp, #0
 8001754:	6078      	str	r0, [r7, #4]
 8001756:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001758:	f002 fa7a 	bl	8003c50 <__errno>
 800175c:	4603      	mov	r3, r0
 800175e:	2216      	movs	r2, #22
 8001760:	601a      	str	r2, [r3, #0]
  return -1;
 8001762:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001766:	4618      	mov	r0, r3
 8001768:	3708      	adds	r7, #8
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}

0800176e <_exit>:

void _exit (int status)
{
 800176e:	b580      	push	{r7, lr}
 8001770:	b082      	sub	sp, #8
 8001772:	af00      	add	r7, sp, #0
 8001774:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001776:	f04f 31ff 	mov.w	r1, #4294967295
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f7ff ffe7 	bl	800174e <_kill>
  while (1) {}    /* Make sure we hang here */
 8001780:	e7fe      	b.n	8001780 <_exit+0x12>

08001782 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001782:	b580      	push	{r7, lr}
 8001784:	b086      	sub	sp, #24
 8001786:	af00      	add	r7, sp, #0
 8001788:	60f8      	str	r0, [r7, #12]
 800178a:	60b9      	str	r1, [r7, #8]
 800178c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800178e:	2300      	movs	r3, #0
 8001790:	617b      	str	r3, [r7, #20]
 8001792:	e00a      	b.n	80017aa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001794:	f3af 8000 	nop.w
 8001798:	4601      	mov	r1, r0
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	1c5a      	adds	r2, r3, #1
 800179e:	60ba      	str	r2, [r7, #8]
 80017a0:	b2ca      	uxtb	r2, r1
 80017a2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	3301      	adds	r3, #1
 80017a8:	617b      	str	r3, [r7, #20]
 80017aa:	697a      	ldr	r2, [r7, #20]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	429a      	cmp	r2, r3
 80017b0:	dbf0      	blt.n	8001794 <_read+0x12>
  }

  return len;
 80017b2:	687b      	ldr	r3, [r7, #4]
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3718      	adds	r7, #24
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}

080017bc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b086      	sub	sp, #24
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	60f8      	str	r0, [r7, #12]
 80017c4:	60b9      	str	r1, [r7, #8]
 80017c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017c8:	2300      	movs	r3, #0
 80017ca:	617b      	str	r3, [r7, #20]
 80017cc:	e009      	b.n	80017e2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	1c5a      	adds	r2, r3, #1
 80017d2:	60ba      	str	r2, [r7, #8]
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	4618      	mov	r0, r3
 80017d8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	3301      	adds	r3, #1
 80017e0:	617b      	str	r3, [r7, #20]
 80017e2:	697a      	ldr	r2, [r7, #20]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	429a      	cmp	r2, r3
 80017e8:	dbf1      	blt.n	80017ce <_write+0x12>
  }
  return len;
 80017ea:	687b      	ldr	r3, [r7, #4]
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	3718      	adds	r7, #24
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}

080017f4 <_close>:

int _close(int file)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80017fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001800:	4618      	mov	r0, r3
 8001802:	370c      	adds	r7, #12
 8001804:	46bd      	mov	sp, r7
 8001806:	bc80      	pop	{r7}
 8001808:	4770      	bx	lr

0800180a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800180a:	b480      	push	{r7}
 800180c:	b083      	sub	sp, #12
 800180e:	af00      	add	r7, sp, #0
 8001810:	6078      	str	r0, [r7, #4]
 8001812:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800181a:	605a      	str	r2, [r3, #4]
  return 0;
 800181c:	2300      	movs	r3, #0
}
 800181e:	4618      	mov	r0, r3
 8001820:	370c      	adds	r7, #12
 8001822:	46bd      	mov	sp, r7
 8001824:	bc80      	pop	{r7}
 8001826:	4770      	bx	lr

08001828 <_isatty>:

int _isatty(int file)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001830:	2301      	movs	r3, #1
}
 8001832:	4618      	mov	r0, r3
 8001834:	370c      	adds	r7, #12
 8001836:	46bd      	mov	sp, r7
 8001838:	bc80      	pop	{r7}
 800183a:	4770      	bx	lr

0800183c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800183c:	b480      	push	{r7}
 800183e:	b085      	sub	sp, #20
 8001840:	af00      	add	r7, sp, #0
 8001842:	60f8      	str	r0, [r7, #12]
 8001844:	60b9      	str	r1, [r7, #8]
 8001846:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001848:	2300      	movs	r3, #0
}
 800184a:	4618      	mov	r0, r3
 800184c:	3714      	adds	r7, #20
 800184e:	46bd      	mov	sp, r7
 8001850:	bc80      	pop	{r7}
 8001852:	4770      	bx	lr

08001854 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b086      	sub	sp, #24
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800185c:	4a14      	ldr	r2, [pc, #80]	; (80018b0 <_sbrk+0x5c>)
 800185e:	4b15      	ldr	r3, [pc, #84]	; (80018b4 <_sbrk+0x60>)
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001868:	4b13      	ldr	r3, [pc, #76]	; (80018b8 <_sbrk+0x64>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d102      	bne.n	8001876 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001870:	4b11      	ldr	r3, [pc, #68]	; (80018b8 <_sbrk+0x64>)
 8001872:	4a12      	ldr	r2, [pc, #72]	; (80018bc <_sbrk+0x68>)
 8001874:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001876:	4b10      	ldr	r3, [pc, #64]	; (80018b8 <_sbrk+0x64>)
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4413      	add	r3, r2
 800187e:	693a      	ldr	r2, [r7, #16]
 8001880:	429a      	cmp	r2, r3
 8001882:	d207      	bcs.n	8001894 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001884:	f002 f9e4 	bl	8003c50 <__errno>
 8001888:	4603      	mov	r3, r0
 800188a:	220c      	movs	r2, #12
 800188c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800188e:	f04f 33ff 	mov.w	r3, #4294967295
 8001892:	e009      	b.n	80018a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001894:	4b08      	ldr	r3, [pc, #32]	; (80018b8 <_sbrk+0x64>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800189a:	4b07      	ldr	r3, [pc, #28]	; (80018b8 <_sbrk+0x64>)
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4413      	add	r3, r2
 80018a2:	4a05      	ldr	r2, [pc, #20]	; (80018b8 <_sbrk+0x64>)
 80018a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018a6:	68fb      	ldr	r3, [r7, #12]
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3718      	adds	r7, #24
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	20005000 	.word	0x20005000
 80018b4:	00000400 	.word	0x00000400
 80018b8:	20000f5c 	.word	0x20000f5c
 80018bc:	20001048 	.word	0x20001048

080018c0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018c4:	bf00      	nop
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bc80      	pop	{r7}
 80018ca:	4770      	bx	lr

080018cc <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b086      	sub	sp, #24
 80018d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018d2:	f107 0308 	add.w	r3, r7, #8
 80018d6:	2200      	movs	r2, #0
 80018d8:	601a      	str	r2, [r3, #0]
 80018da:	605a      	str	r2, [r3, #4]
 80018dc:	609a      	str	r2, [r3, #8]
 80018de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018e0:	463b      	mov	r3, r7
 80018e2:	2200      	movs	r2, #0
 80018e4:	601a      	str	r2, [r3, #0]
 80018e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80018e8:	4b1d      	ldr	r3, [pc, #116]	; (8001960 <MX_TIM3_Init+0x94>)
 80018ea:	4a1e      	ldr	r2, [pc, #120]	; (8001964 <MX_TIM3_Init+0x98>)
 80018ec:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 3553 ;
 80018ee:	4b1c      	ldr	r3, [pc, #112]	; (8001960 <MX_TIM3_Init+0x94>)
 80018f0:	f640 52e1 	movw	r2, #3553	; 0xde1
 80018f4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018f6:	4b1a      	ldr	r3, [pc, #104]	; (8001960 <MX_TIM3_Init+0x94>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 34083;
 80018fc:	4b18      	ldr	r3, [pc, #96]	; (8001960 <MX_TIM3_Init+0x94>)
 80018fe:	f248 5223 	movw	r2, #34083	; 0x8523
 8001902:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001904:	4b16      	ldr	r3, [pc, #88]	; (8001960 <MX_TIM3_Init+0x94>)
 8001906:	2200      	movs	r2, #0
 8001908:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800190a:	4b15      	ldr	r3, [pc, #84]	; (8001960 <MX_TIM3_Init+0x94>)
 800190c:	2200      	movs	r2, #0
 800190e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001910:	4813      	ldr	r0, [pc, #76]	; (8001960 <MX_TIM3_Init+0x94>)
 8001912:	f001 f955 	bl	8002bc0 <HAL_TIM_Base_Init>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800191c:	f7ff fd26 	bl	800136c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001920:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001924:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001926:	f107 0308 	add.w	r3, r7, #8
 800192a:	4619      	mov	r1, r3
 800192c:	480c      	ldr	r0, [pc, #48]	; (8001960 <MX_TIM3_Init+0x94>)
 800192e:	f001 fa9e 	bl	8002e6e <HAL_TIM_ConfigClockSource>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001938:	f7ff fd18 	bl	800136c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800193c:	2300      	movs	r3, #0
 800193e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001940:	2300      	movs	r3, #0
 8001942:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001944:	463b      	mov	r3, r7
 8001946:	4619      	mov	r1, r3
 8001948:	4805      	ldr	r0, [pc, #20]	; (8001960 <MX_TIM3_Init+0x94>)
 800194a:	f001 fc71 	bl	8003230 <HAL_TIMEx_MasterConfigSynchronization>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001954:	f7ff fd0a 	bl	800136c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001958:	bf00      	nop
 800195a:	3718      	adds	r7, #24
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	20000f60 	.word	0x20000f60
 8001964:	40000400 	.word	0x40000400

08001968 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b086      	sub	sp, #24
 800196c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800196e:	f107 0308 	add.w	r3, r7, #8
 8001972:	2200      	movs	r2, #0
 8001974:	601a      	str	r2, [r3, #0]
 8001976:	605a      	str	r2, [r3, #4]
 8001978:	609a      	str	r2, [r3, #8]
 800197a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800197c:	463b      	mov	r3, r7
 800197e:	2200      	movs	r2, #0
 8001980:	601a      	str	r2, [r3, #0]
 8001982:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001984:	4b1d      	ldr	r3, [pc, #116]	; (80019fc <MX_TIM4_Init+0x94>)
 8001986:	4a1e      	ldr	r2, [pc, #120]	; (8001a00 <MX_TIM4_Init+0x98>)
 8001988:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1200;
 800198a:	4b1c      	ldr	r3, [pc, #112]	; (80019fc <MX_TIM4_Init+0x94>)
 800198c:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8001990:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001992:	4b1a      	ldr	r3, [pc, #104]	; (80019fc <MX_TIM4_Init+0x94>)
 8001994:	2200      	movs	r2, #0
 8001996:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 4000;
 8001998:	4b18      	ldr	r3, [pc, #96]	; (80019fc <MX_TIM4_Init+0x94>)
 800199a:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800199e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019a0:	4b16      	ldr	r3, [pc, #88]	; (80019fc <MX_TIM4_Init+0x94>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019a6:	4b15      	ldr	r3, [pc, #84]	; (80019fc <MX_TIM4_Init+0x94>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80019ac:	4813      	ldr	r0, [pc, #76]	; (80019fc <MX_TIM4_Init+0x94>)
 80019ae:	f001 f907 	bl	8002bc0 <HAL_TIM_Base_Init>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80019b8:	f7ff fcd8 	bl	800136c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019c0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80019c2:	f107 0308 	add.w	r3, r7, #8
 80019c6:	4619      	mov	r1, r3
 80019c8:	480c      	ldr	r0, [pc, #48]	; (80019fc <MX_TIM4_Init+0x94>)
 80019ca:	f001 fa50 	bl	8002e6e <HAL_TIM_ConfigClockSource>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d001      	beq.n	80019d8 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80019d4:	f7ff fcca 	bl	800136c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019d8:	2300      	movs	r3, #0
 80019da:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019dc:	2300      	movs	r3, #0
 80019de:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80019e0:	463b      	mov	r3, r7
 80019e2:	4619      	mov	r1, r3
 80019e4:	4805      	ldr	r0, [pc, #20]	; (80019fc <MX_TIM4_Init+0x94>)
 80019e6:	f001 fc23 	bl	8003230 <HAL_TIMEx_MasterConfigSynchronization>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80019f0:	f7ff fcbc 	bl	800136c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80019f4:	bf00      	nop
 80019f6:	3718      	adds	r7, #24
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	20000fa8 	.word	0x20000fa8
 8001a00:	40000800 	.word	0x40000800

08001a04 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b085      	sub	sp, #20
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a12      	ldr	r2, [pc, #72]	; (8001a5c <HAL_TIM_Base_MspInit+0x58>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d10c      	bne.n	8001a30 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a16:	4b12      	ldr	r3, [pc, #72]	; (8001a60 <HAL_TIM_Base_MspInit+0x5c>)
 8001a18:	69db      	ldr	r3, [r3, #28]
 8001a1a:	4a11      	ldr	r2, [pc, #68]	; (8001a60 <HAL_TIM_Base_MspInit+0x5c>)
 8001a1c:	f043 0302 	orr.w	r3, r3, #2
 8001a20:	61d3      	str	r3, [r2, #28]
 8001a22:	4b0f      	ldr	r3, [pc, #60]	; (8001a60 <HAL_TIM_Base_MspInit+0x5c>)
 8001a24:	69db      	ldr	r3, [r3, #28]
 8001a26:	f003 0302 	and.w	r3, r3, #2
 8001a2a:	60fb      	str	r3, [r7, #12]
 8001a2c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001a2e:	e010      	b.n	8001a52 <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM4)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a0b      	ldr	r2, [pc, #44]	; (8001a64 <HAL_TIM_Base_MspInit+0x60>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d10b      	bne.n	8001a52 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001a3a:	4b09      	ldr	r3, [pc, #36]	; (8001a60 <HAL_TIM_Base_MspInit+0x5c>)
 8001a3c:	69db      	ldr	r3, [r3, #28]
 8001a3e:	4a08      	ldr	r2, [pc, #32]	; (8001a60 <HAL_TIM_Base_MspInit+0x5c>)
 8001a40:	f043 0304 	orr.w	r3, r3, #4
 8001a44:	61d3      	str	r3, [r2, #28]
 8001a46:	4b06      	ldr	r3, [pc, #24]	; (8001a60 <HAL_TIM_Base_MspInit+0x5c>)
 8001a48:	69db      	ldr	r3, [r3, #28]
 8001a4a:	f003 0304 	and.w	r3, r3, #4
 8001a4e:	60bb      	str	r3, [r7, #8]
 8001a50:	68bb      	ldr	r3, [r7, #8]
}
 8001a52:	bf00      	nop
 8001a54:	3714      	adds	r7, #20
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bc80      	pop	{r7}
 8001a5a:	4770      	bx	lr
 8001a5c:	40000400 	.word	0x40000400
 8001a60:	40021000 	.word	0x40021000
 8001a64:	40000800 	.word	0x40000800

08001a68 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a6c:	4b11      	ldr	r3, [pc, #68]	; (8001ab4 <MX_USART1_UART_Init+0x4c>)
 8001a6e:	4a12      	ldr	r2, [pc, #72]	; (8001ab8 <MX_USART1_UART_Init+0x50>)
 8001a70:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001a72:	4b10      	ldr	r3, [pc, #64]	; (8001ab4 <MX_USART1_UART_Init+0x4c>)
 8001a74:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001a78:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a7a:	4b0e      	ldr	r3, [pc, #56]	; (8001ab4 <MX_USART1_UART_Init+0x4c>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a80:	4b0c      	ldr	r3, [pc, #48]	; (8001ab4 <MX_USART1_UART_Init+0x4c>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a86:	4b0b      	ldr	r3, [pc, #44]	; (8001ab4 <MX_USART1_UART_Init+0x4c>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a8c:	4b09      	ldr	r3, [pc, #36]	; (8001ab4 <MX_USART1_UART_Init+0x4c>)
 8001a8e:	220c      	movs	r2, #12
 8001a90:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a92:	4b08      	ldr	r3, [pc, #32]	; (8001ab4 <MX_USART1_UART_Init+0x4c>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a98:	4b06      	ldr	r3, [pc, #24]	; (8001ab4 <MX_USART1_UART_Init+0x4c>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a9e:	4805      	ldr	r0, [pc, #20]	; (8001ab4 <MX_USART1_UART_Init+0x4c>)
 8001aa0:	f001 fc36 	bl	8003310 <HAL_UART_Init>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001aaa:	f7ff fc5f 	bl	800136c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001aae:	bf00      	nop
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	20000ff0 	.word	0x20000ff0
 8001ab8:	40013800 	.word	0x40013800

08001abc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b088      	sub	sp, #32
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac4:	f107 0310 	add.w	r3, r7, #16
 8001ac8:	2200      	movs	r2, #0
 8001aca:	601a      	str	r2, [r3, #0]
 8001acc:	605a      	str	r2, [r3, #4]
 8001ace:	609a      	str	r2, [r3, #8]
 8001ad0:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a1c      	ldr	r2, [pc, #112]	; (8001b48 <HAL_UART_MspInit+0x8c>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d131      	bne.n	8001b40 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001adc:	4b1b      	ldr	r3, [pc, #108]	; (8001b4c <HAL_UART_MspInit+0x90>)
 8001ade:	699b      	ldr	r3, [r3, #24]
 8001ae0:	4a1a      	ldr	r2, [pc, #104]	; (8001b4c <HAL_UART_MspInit+0x90>)
 8001ae2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ae6:	6193      	str	r3, [r2, #24]
 8001ae8:	4b18      	ldr	r3, [pc, #96]	; (8001b4c <HAL_UART_MspInit+0x90>)
 8001aea:	699b      	ldr	r3, [r3, #24]
 8001aec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001af0:	60fb      	str	r3, [r7, #12]
 8001af2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001af4:	4b15      	ldr	r3, [pc, #84]	; (8001b4c <HAL_UART_MspInit+0x90>)
 8001af6:	699b      	ldr	r3, [r3, #24]
 8001af8:	4a14      	ldr	r2, [pc, #80]	; (8001b4c <HAL_UART_MspInit+0x90>)
 8001afa:	f043 0304 	orr.w	r3, r3, #4
 8001afe:	6193      	str	r3, [r2, #24]
 8001b00:	4b12      	ldr	r3, [pc, #72]	; (8001b4c <HAL_UART_MspInit+0x90>)
 8001b02:	699b      	ldr	r3, [r3, #24]
 8001b04:	f003 0304 	and.w	r3, r3, #4
 8001b08:	60bb      	str	r3, [r7, #8]
 8001b0a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001b0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b10:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b12:	2302      	movs	r3, #2
 8001b14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b16:	2303      	movs	r3, #3
 8001b18:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b1a:	f107 0310 	add.w	r3, r7, #16
 8001b1e:	4619      	mov	r1, r3
 8001b20:	480b      	ldr	r0, [pc, #44]	; (8001b50 <HAL_UART_MspInit+0x94>)
 8001b22:	f000 fa97 	bl	8002054 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b2a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b30:	2300      	movs	r3, #0
 8001b32:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b34:	f107 0310 	add.w	r3, r7, #16
 8001b38:	4619      	mov	r1, r3
 8001b3a:	4805      	ldr	r0, [pc, #20]	; (8001b50 <HAL_UART_MspInit+0x94>)
 8001b3c:	f000 fa8a 	bl	8002054 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001b40:	bf00      	nop
 8001b42:	3720      	adds	r7, #32
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	40013800 	.word	0x40013800
 8001b4c:	40021000 	.word	0x40021000
 8001b50:	40010800 	.word	0x40010800

08001b54 <UartSend>:
{
	HAL_UART_Transmit(&huart1, (uint8_t*) Message, strlen(Message), 20);
}

void UartSend(char * Message)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
	ReceivedState = 0;
 8001b5c:	4b0a      	ldr	r3, [pc, #40]	; (8001b88 <UartSend+0x34>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&huart1, (uint8_t*) Message, strlen(Message));
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f7fe fafe 	bl	8000164 <strlen>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	b29b      	uxth	r3, r3
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	6879      	ldr	r1, [r7, #4]
 8001b70:	4806      	ldr	r0, [pc, #24]	; (8001b8c <UartSend+0x38>)
 8001b72:	f001 fc1a 	bl	80033aa <HAL_UART_Transmit_IT>
	*Uart1isBusyPtr = 1;
 8001b76:	4b06      	ldr	r3, [pc, #24]	; (8001b90 <UartSend+0x3c>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	701a      	strb	r2, [r3, #0]
}
 8001b7e:	bf00      	nop
 8001b80:	3708      	adds	r7, #8
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	200004e0 	.word	0x200004e0
 8001b8c:	20000ff0 	.word	0x20000ff0
 8001b90:	20000000 	.word	0x20000000

08001b94 <UartSendWoRxCtrl>:

void UartSendWoRxCtrl(char * Message)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit_IT(&huart1, (uint8_t*) Message, strlen(Message));
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f7fe fae1 	bl	8000164 <strlen>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	b29b      	uxth	r3, r3
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	6879      	ldr	r1, [r7, #4]
 8001baa:	4805      	ldr	r0, [pc, #20]	; (8001bc0 <UartSendWoRxCtrl+0x2c>)
 8001bac:	f001 fbfd 	bl	80033aa <HAL_UART_Transmit_IT>
	*Uart1isBusyPtr = 1;
 8001bb0:	4b04      	ldr	r3, [pc, #16]	; (8001bc4 <UartSendWoRxCtrl+0x30>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	701a      	strb	r2, [r3, #0]
}
 8001bb8:	bf00      	nop
 8001bba:	3708      	adds	r7, #8
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	20000ff0 	.word	0x20000ff0
 8001bc4:	20000000 	.word	0x20000000

08001bc8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bc8:	480c      	ldr	r0, [pc, #48]	; (8001bfc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001bca:	490d      	ldr	r1, [pc, #52]	; (8001c00 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001bcc:	4a0d      	ldr	r2, [pc, #52]	; (8001c04 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001bce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bd0:	e002      	b.n	8001bd8 <LoopCopyDataInit>

08001bd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bd6:	3304      	adds	r3, #4

08001bd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bdc:	d3f9      	bcc.n	8001bd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bde:	4a0a      	ldr	r2, [pc, #40]	; (8001c08 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001be0:	4c0a      	ldr	r4, [pc, #40]	; (8001c0c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001be2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001be4:	e001      	b.n	8001bea <LoopFillZerobss>

08001be6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001be6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001be8:	3204      	adds	r2, #4

08001bea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bec:	d3fb      	bcc.n	8001be6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001bee:	f7ff fe67 	bl	80018c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bf2:	f002 f833 	bl	8003c5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001bf6:	f7ff f80b 	bl	8000c10 <main>
  bx lr
 8001bfa:	4770      	bx	lr
  ldr r0, =_sdata
 8001bfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c00:	20000278 	.word	0x20000278
  ldr r2, =_sidata
 8001c04:	08008968 	.word	0x08008968
  ldr r2, =_sbss
 8001c08:	20000278 	.word	0x20000278
  ldr r4, =_ebss
 8001c0c:	20001048 	.word	0x20001048

08001c10 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c10:	e7fe      	b.n	8001c10 <ADC1_2_IRQHandler>
	...

08001c14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c18:	4b08      	ldr	r3, [pc, #32]	; (8001c3c <HAL_Init+0x28>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a07      	ldr	r2, [pc, #28]	; (8001c3c <HAL_Init+0x28>)
 8001c1e:	f043 0310 	orr.w	r3, r3, #16
 8001c22:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c24:	2003      	movs	r0, #3
 8001c26:	f000 f923 	bl	8001e70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c2a:	200f      	movs	r0, #15
 8001c2c:	f000 f808 	bl	8001c40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c30:	f7ff fd1e 	bl	8001670 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	40022000 	.word	0x40022000

08001c40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c48:	4b12      	ldr	r3, [pc, #72]	; (8001c94 <HAL_InitTick+0x54>)
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	4b12      	ldr	r3, [pc, #72]	; (8001c98 <HAL_InitTick+0x58>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	4619      	mov	r1, r3
 8001c52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c56:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f000 f93b 	bl	8001eda <HAL_SYSTICK_Config>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e00e      	b.n	8001c8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2b0f      	cmp	r3, #15
 8001c72:	d80a      	bhi.n	8001c8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c74:	2200      	movs	r2, #0
 8001c76:	6879      	ldr	r1, [r7, #4]
 8001c78:	f04f 30ff 	mov.w	r0, #4294967295
 8001c7c:	f000 f903 	bl	8001e86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c80:	4a06      	ldr	r2, [pc, #24]	; (8001c9c <HAL_InitTick+0x5c>)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c86:	2300      	movs	r3, #0
 8001c88:	e000      	b.n	8001c8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3708      	adds	r7, #8
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	20000098 	.word	0x20000098
 8001c98:	200000a0 	.word	0x200000a0
 8001c9c:	2000009c 	.word	0x2000009c

08001ca0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ca4:	4b05      	ldr	r3, [pc, #20]	; (8001cbc <HAL_IncTick+0x1c>)
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	461a      	mov	r2, r3
 8001caa:	4b05      	ldr	r3, [pc, #20]	; (8001cc0 <HAL_IncTick+0x20>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4413      	add	r3, r2
 8001cb0:	4a03      	ldr	r2, [pc, #12]	; (8001cc0 <HAL_IncTick+0x20>)
 8001cb2:	6013      	str	r3, [r2, #0]
}
 8001cb4:	bf00      	nop
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bc80      	pop	{r7}
 8001cba:	4770      	bx	lr
 8001cbc:	200000a0 	.word	0x200000a0
 8001cc0:	20001034 	.word	0x20001034

08001cc4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  return uwTick;
 8001cc8:	4b02      	ldr	r3, [pc, #8]	; (8001cd4 <HAL_GetTick+0x10>)
 8001cca:	681b      	ldr	r3, [r3, #0]
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bc80      	pop	{r7}
 8001cd2:	4770      	bx	lr
 8001cd4:	20001034 	.word	0x20001034

08001cd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b085      	sub	sp, #20
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f003 0307 	and.w	r3, r3, #7
 8001ce6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ce8:	4b0c      	ldr	r3, [pc, #48]	; (8001d1c <__NVIC_SetPriorityGrouping+0x44>)
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cee:	68ba      	ldr	r2, [r7, #8]
 8001cf0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d0a:	4a04      	ldr	r2, [pc, #16]	; (8001d1c <__NVIC_SetPriorityGrouping+0x44>)
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	60d3      	str	r3, [r2, #12]
}
 8001d10:	bf00      	nop
 8001d12:	3714      	adds	r7, #20
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bc80      	pop	{r7}
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	e000ed00 	.word	0xe000ed00

08001d20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d24:	4b04      	ldr	r3, [pc, #16]	; (8001d38 <__NVIC_GetPriorityGrouping+0x18>)
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	0a1b      	lsrs	r3, r3, #8
 8001d2a:	f003 0307 	and.w	r3, r3, #7
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bc80      	pop	{r7}
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	e000ed00 	.word	0xe000ed00

08001d3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	4603      	mov	r3, r0
 8001d44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	db0b      	blt.n	8001d66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d4e:	79fb      	ldrb	r3, [r7, #7]
 8001d50:	f003 021f 	and.w	r2, r3, #31
 8001d54:	4906      	ldr	r1, [pc, #24]	; (8001d70 <__NVIC_EnableIRQ+0x34>)
 8001d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5a:	095b      	lsrs	r3, r3, #5
 8001d5c:	2001      	movs	r0, #1
 8001d5e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d66:	bf00      	nop
 8001d68:	370c      	adds	r7, #12
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bc80      	pop	{r7}
 8001d6e:	4770      	bx	lr
 8001d70:	e000e100 	.word	0xe000e100

08001d74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	6039      	str	r1, [r7, #0]
 8001d7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	db0a      	blt.n	8001d9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	b2da      	uxtb	r2, r3
 8001d8c:	490c      	ldr	r1, [pc, #48]	; (8001dc0 <__NVIC_SetPriority+0x4c>)
 8001d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d92:	0112      	lsls	r2, r2, #4
 8001d94:	b2d2      	uxtb	r2, r2
 8001d96:	440b      	add	r3, r1
 8001d98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d9c:	e00a      	b.n	8001db4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	b2da      	uxtb	r2, r3
 8001da2:	4908      	ldr	r1, [pc, #32]	; (8001dc4 <__NVIC_SetPriority+0x50>)
 8001da4:	79fb      	ldrb	r3, [r7, #7]
 8001da6:	f003 030f 	and.w	r3, r3, #15
 8001daa:	3b04      	subs	r3, #4
 8001dac:	0112      	lsls	r2, r2, #4
 8001dae:	b2d2      	uxtb	r2, r2
 8001db0:	440b      	add	r3, r1
 8001db2:	761a      	strb	r2, [r3, #24]
}
 8001db4:	bf00      	nop
 8001db6:	370c      	adds	r7, #12
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bc80      	pop	{r7}
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	e000e100 	.word	0xe000e100
 8001dc4:	e000ed00 	.word	0xe000ed00

08001dc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b089      	sub	sp, #36	; 0x24
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	60f8      	str	r0, [r7, #12]
 8001dd0:	60b9      	str	r1, [r7, #8]
 8001dd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	f003 0307 	and.w	r3, r3, #7
 8001dda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	f1c3 0307 	rsb	r3, r3, #7
 8001de2:	2b04      	cmp	r3, #4
 8001de4:	bf28      	it	cs
 8001de6:	2304      	movcs	r3, #4
 8001de8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	3304      	adds	r3, #4
 8001dee:	2b06      	cmp	r3, #6
 8001df0:	d902      	bls.n	8001df8 <NVIC_EncodePriority+0x30>
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	3b03      	subs	r3, #3
 8001df6:	e000      	b.n	8001dfa <NVIC_EncodePriority+0x32>
 8001df8:	2300      	movs	r3, #0
 8001dfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dfc:	f04f 32ff 	mov.w	r2, #4294967295
 8001e00:	69bb      	ldr	r3, [r7, #24]
 8001e02:	fa02 f303 	lsl.w	r3, r2, r3
 8001e06:	43da      	mvns	r2, r3
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	401a      	ands	r2, r3
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e10:	f04f 31ff 	mov.w	r1, #4294967295
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	fa01 f303 	lsl.w	r3, r1, r3
 8001e1a:	43d9      	mvns	r1, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e20:	4313      	orrs	r3, r2
         );
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3724      	adds	r7, #36	; 0x24
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bc80      	pop	{r7}
 8001e2a:	4770      	bx	lr

08001e2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	3b01      	subs	r3, #1
 8001e38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e3c:	d301      	bcc.n	8001e42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e00f      	b.n	8001e62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e42:	4a0a      	ldr	r2, [pc, #40]	; (8001e6c <SysTick_Config+0x40>)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	3b01      	subs	r3, #1
 8001e48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e4a:	210f      	movs	r1, #15
 8001e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e50:	f7ff ff90 	bl	8001d74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e54:	4b05      	ldr	r3, [pc, #20]	; (8001e6c <SysTick_Config+0x40>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e5a:	4b04      	ldr	r3, [pc, #16]	; (8001e6c <SysTick_Config+0x40>)
 8001e5c:	2207      	movs	r2, #7
 8001e5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	e000e010 	.word	0xe000e010

08001e70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f7ff ff2d 	bl	8001cd8 <__NVIC_SetPriorityGrouping>
}
 8001e7e:	bf00      	nop
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e86:	b580      	push	{r7, lr}
 8001e88:	b086      	sub	sp, #24
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	60b9      	str	r1, [r7, #8]
 8001e90:	607a      	str	r2, [r7, #4]
 8001e92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e94:	2300      	movs	r3, #0
 8001e96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e98:	f7ff ff42 	bl	8001d20 <__NVIC_GetPriorityGrouping>
 8001e9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	68b9      	ldr	r1, [r7, #8]
 8001ea2:	6978      	ldr	r0, [r7, #20]
 8001ea4:	f7ff ff90 	bl	8001dc8 <NVIC_EncodePriority>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eae:	4611      	mov	r1, r2
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7ff ff5f 	bl	8001d74 <__NVIC_SetPriority>
}
 8001eb6:	bf00      	nop
 8001eb8:	3718      	adds	r7, #24
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}

08001ebe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b082      	sub	sp, #8
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ec8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7ff ff35 	bl	8001d3c <__NVIC_EnableIRQ>
}
 8001ed2:	bf00      	nop
 8001ed4:	3708      	adds	r7, #8
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b082      	sub	sp, #8
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f7ff ffa2 	bl	8001e2c <SysTick_Config>
 8001ee8:	4603      	mov	r3, r0
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3708      	adds	r7, #8
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}

08001ef2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	b085      	sub	sp, #20
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001efa:	2300      	movs	r3, #0
 8001efc:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001f04:	2b02      	cmp	r3, #2
 8001f06:	d008      	beq.n	8001f1a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2204      	movs	r2, #4
 8001f0c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2200      	movs	r2, #0
 8001f12:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e020      	b.n	8001f5c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f022 020e 	bic.w	r2, r2, #14
 8001f28:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f022 0201 	bic.w	r2, r2, #1
 8001f38:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f42:	2101      	movs	r1, #1
 8001f44:	fa01 f202 	lsl.w	r2, r1, r2
 8001f48:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2200      	movs	r2, #0
 8001f56:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001f5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3714      	adds	r7, #20
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bc80      	pop	{r7}
 8001f64:	4770      	bx	lr
	...

08001f68 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f70:	2300      	movs	r3, #0
 8001f72:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d005      	beq.n	8001f8a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2204      	movs	r2, #4
 8001f82:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	73fb      	strb	r3, [r7, #15]
 8001f88:	e051      	b.n	800202e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f022 020e 	bic.w	r2, r2, #14
 8001f98:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f022 0201 	bic.w	r2, r2, #1
 8001fa8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a22      	ldr	r2, [pc, #136]	; (8002038 <HAL_DMA_Abort_IT+0xd0>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d029      	beq.n	8002008 <HAL_DMA_Abort_IT+0xa0>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a20      	ldr	r2, [pc, #128]	; (800203c <HAL_DMA_Abort_IT+0xd4>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d022      	beq.n	8002004 <HAL_DMA_Abort_IT+0x9c>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a1f      	ldr	r2, [pc, #124]	; (8002040 <HAL_DMA_Abort_IT+0xd8>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d01a      	beq.n	8001ffe <HAL_DMA_Abort_IT+0x96>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a1d      	ldr	r2, [pc, #116]	; (8002044 <HAL_DMA_Abort_IT+0xdc>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d012      	beq.n	8001ff8 <HAL_DMA_Abort_IT+0x90>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a1c      	ldr	r2, [pc, #112]	; (8002048 <HAL_DMA_Abort_IT+0xe0>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d00a      	beq.n	8001ff2 <HAL_DMA_Abort_IT+0x8a>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a1a      	ldr	r2, [pc, #104]	; (800204c <HAL_DMA_Abort_IT+0xe4>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d102      	bne.n	8001fec <HAL_DMA_Abort_IT+0x84>
 8001fe6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001fea:	e00e      	b.n	800200a <HAL_DMA_Abort_IT+0xa2>
 8001fec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ff0:	e00b      	b.n	800200a <HAL_DMA_Abort_IT+0xa2>
 8001ff2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ff6:	e008      	b.n	800200a <HAL_DMA_Abort_IT+0xa2>
 8001ff8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ffc:	e005      	b.n	800200a <HAL_DMA_Abort_IT+0xa2>
 8001ffe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002002:	e002      	b.n	800200a <HAL_DMA_Abort_IT+0xa2>
 8002004:	2310      	movs	r3, #16
 8002006:	e000      	b.n	800200a <HAL_DMA_Abort_IT+0xa2>
 8002008:	2301      	movs	r3, #1
 800200a:	4a11      	ldr	r2, [pc, #68]	; (8002050 <HAL_DMA_Abort_IT+0xe8>)
 800200c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2201      	movs	r2, #1
 8002012:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2200      	movs	r2, #0
 800201a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002022:	2b00      	cmp	r3, #0
 8002024:	d003      	beq.n	800202e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	4798      	blx	r3
    } 
  }
  return status;
 800202e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002030:	4618      	mov	r0, r3
 8002032:	3710      	adds	r7, #16
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}
 8002038:	40020008 	.word	0x40020008
 800203c:	4002001c 	.word	0x4002001c
 8002040:	40020030 	.word	0x40020030
 8002044:	40020044 	.word	0x40020044
 8002048:	40020058 	.word	0x40020058
 800204c:	4002006c 	.word	0x4002006c
 8002050:	40020000 	.word	0x40020000

08002054 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002054:	b480      	push	{r7}
 8002056:	b08b      	sub	sp, #44	; 0x2c
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800205e:	2300      	movs	r3, #0
 8002060:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002062:	2300      	movs	r3, #0
 8002064:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002066:	e169      	b.n	800233c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002068:	2201      	movs	r2, #1
 800206a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206c:	fa02 f303 	lsl.w	r3, r2, r3
 8002070:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	69fa      	ldr	r2, [r7, #28]
 8002078:	4013      	ands	r3, r2
 800207a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	429a      	cmp	r2, r3
 8002082:	f040 8158 	bne.w	8002336 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	4a9a      	ldr	r2, [pc, #616]	; (80022f4 <HAL_GPIO_Init+0x2a0>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d05e      	beq.n	800214e <HAL_GPIO_Init+0xfa>
 8002090:	4a98      	ldr	r2, [pc, #608]	; (80022f4 <HAL_GPIO_Init+0x2a0>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d875      	bhi.n	8002182 <HAL_GPIO_Init+0x12e>
 8002096:	4a98      	ldr	r2, [pc, #608]	; (80022f8 <HAL_GPIO_Init+0x2a4>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d058      	beq.n	800214e <HAL_GPIO_Init+0xfa>
 800209c:	4a96      	ldr	r2, [pc, #600]	; (80022f8 <HAL_GPIO_Init+0x2a4>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d86f      	bhi.n	8002182 <HAL_GPIO_Init+0x12e>
 80020a2:	4a96      	ldr	r2, [pc, #600]	; (80022fc <HAL_GPIO_Init+0x2a8>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d052      	beq.n	800214e <HAL_GPIO_Init+0xfa>
 80020a8:	4a94      	ldr	r2, [pc, #592]	; (80022fc <HAL_GPIO_Init+0x2a8>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d869      	bhi.n	8002182 <HAL_GPIO_Init+0x12e>
 80020ae:	4a94      	ldr	r2, [pc, #592]	; (8002300 <HAL_GPIO_Init+0x2ac>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d04c      	beq.n	800214e <HAL_GPIO_Init+0xfa>
 80020b4:	4a92      	ldr	r2, [pc, #584]	; (8002300 <HAL_GPIO_Init+0x2ac>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d863      	bhi.n	8002182 <HAL_GPIO_Init+0x12e>
 80020ba:	4a92      	ldr	r2, [pc, #584]	; (8002304 <HAL_GPIO_Init+0x2b0>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d046      	beq.n	800214e <HAL_GPIO_Init+0xfa>
 80020c0:	4a90      	ldr	r2, [pc, #576]	; (8002304 <HAL_GPIO_Init+0x2b0>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d85d      	bhi.n	8002182 <HAL_GPIO_Init+0x12e>
 80020c6:	2b12      	cmp	r3, #18
 80020c8:	d82a      	bhi.n	8002120 <HAL_GPIO_Init+0xcc>
 80020ca:	2b12      	cmp	r3, #18
 80020cc:	d859      	bhi.n	8002182 <HAL_GPIO_Init+0x12e>
 80020ce:	a201      	add	r2, pc, #4	; (adr r2, 80020d4 <HAL_GPIO_Init+0x80>)
 80020d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020d4:	0800214f 	.word	0x0800214f
 80020d8:	08002129 	.word	0x08002129
 80020dc:	0800213b 	.word	0x0800213b
 80020e0:	0800217d 	.word	0x0800217d
 80020e4:	08002183 	.word	0x08002183
 80020e8:	08002183 	.word	0x08002183
 80020ec:	08002183 	.word	0x08002183
 80020f0:	08002183 	.word	0x08002183
 80020f4:	08002183 	.word	0x08002183
 80020f8:	08002183 	.word	0x08002183
 80020fc:	08002183 	.word	0x08002183
 8002100:	08002183 	.word	0x08002183
 8002104:	08002183 	.word	0x08002183
 8002108:	08002183 	.word	0x08002183
 800210c:	08002183 	.word	0x08002183
 8002110:	08002183 	.word	0x08002183
 8002114:	08002183 	.word	0x08002183
 8002118:	08002131 	.word	0x08002131
 800211c:	08002145 	.word	0x08002145
 8002120:	4a79      	ldr	r2, [pc, #484]	; (8002308 <HAL_GPIO_Init+0x2b4>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d013      	beq.n	800214e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002126:	e02c      	b.n	8002182 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	623b      	str	r3, [r7, #32]
          break;
 800212e:	e029      	b.n	8002184 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	3304      	adds	r3, #4
 8002136:	623b      	str	r3, [r7, #32]
          break;
 8002138:	e024      	b.n	8002184 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	68db      	ldr	r3, [r3, #12]
 800213e:	3308      	adds	r3, #8
 8002140:	623b      	str	r3, [r7, #32]
          break;
 8002142:	e01f      	b.n	8002184 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	330c      	adds	r3, #12
 800214a:	623b      	str	r3, [r7, #32]
          break;
 800214c:	e01a      	b.n	8002184 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d102      	bne.n	800215c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002156:	2304      	movs	r3, #4
 8002158:	623b      	str	r3, [r7, #32]
          break;
 800215a:	e013      	b.n	8002184 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	2b01      	cmp	r3, #1
 8002162:	d105      	bne.n	8002170 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002164:	2308      	movs	r3, #8
 8002166:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	69fa      	ldr	r2, [r7, #28]
 800216c:	611a      	str	r2, [r3, #16]
          break;
 800216e:	e009      	b.n	8002184 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002170:	2308      	movs	r3, #8
 8002172:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	69fa      	ldr	r2, [r7, #28]
 8002178:	615a      	str	r2, [r3, #20]
          break;
 800217a:	e003      	b.n	8002184 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800217c:	2300      	movs	r3, #0
 800217e:	623b      	str	r3, [r7, #32]
          break;
 8002180:	e000      	b.n	8002184 <HAL_GPIO_Init+0x130>
          break;
 8002182:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002184:	69bb      	ldr	r3, [r7, #24]
 8002186:	2bff      	cmp	r3, #255	; 0xff
 8002188:	d801      	bhi.n	800218e <HAL_GPIO_Init+0x13a>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	e001      	b.n	8002192 <HAL_GPIO_Init+0x13e>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	3304      	adds	r3, #4
 8002192:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002194:	69bb      	ldr	r3, [r7, #24]
 8002196:	2bff      	cmp	r3, #255	; 0xff
 8002198:	d802      	bhi.n	80021a0 <HAL_GPIO_Init+0x14c>
 800219a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	e002      	b.n	80021a6 <HAL_GPIO_Init+0x152>
 80021a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a2:	3b08      	subs	r3, #8
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	210f      	movs	r1, #15
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	fa01 f303 	lsl.w	r3, r1, r3
 80021b4:	43db      	mvns	r3, r3
 80021b6:	401a      	ands	r2, r3
 80021b8:	6a39      	ldr	r1, [r7, #32]
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	fa01 f303 	lsl.w	r3, r1, r3
 80021c0:	431a      	orrs	r2, r3
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	f000 80b1 	beq.w	8002336 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80021d4:	4b4d      	ldr	r3, [pc, #308]	; (800230c <HAL_GPIO_Init+0x2b8>)
 80021d6:	699b      	ldr	r3, [r3, #24]
 80021d8:	4a4c      	ldr	r2, [pc, #304]	; (800230c <HAL_GPIO_Init+0x2b8>)
 80021da:	f043 0301 	orr.w	r3, r3, #1
 80021de:	6193      	str	r3, [r2, #24]
 80021e0:	4b4a      	ldr	r3, [pc, #296]	; (800230c <HAL_GPIO_Init+0x2b8>)
 80021e2:	699b      	ldr	r3, [r3, #24]
 80021e4:	f003 0301 	and.w	r3, r3, #1
 80021e8:	60bb      	str	r3, [r7, #8]
 80021ea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80021ec:	4a48      	ldr	r2, [pc, #288]	; (8002310 <HAL_GPIO_Init+0x2bc>)
 80021ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f0:	089b      	lsrs	r3, r3, #2
 80021f2:	3302      	adds	r3, #2
 80021f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021f8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80021fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fc:	f003 0303 	and.w	r3, r3, #3
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	220f      	movs	r2, #15
 8002204:	fa02 f303 	lsl.w	r3, r2, r3
 8002208:	43db      	mvns	r3, r3
 800220a:	68fa      	ldr	r2, [r7, #12]
 800220c:	4013      	ands	r3, r2
 800220e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	4a40      	ldr	r2, [pc, #256]	; (8002314 <HAL_GPIO_Init+0x2c0>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d013      	beq.n	8002240 <HAL_GPIO_Init+0x1ec>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	4a3f      	ldr	r2, [pc, #252]	; (8002318 <HAL_GPIO_Init+0x2c4>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d00d      	beq.n	800223c <HAL_GPIO_Init+0x1e8>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	4a3e      	ldr	r2, [pc, #248]	; (800231c <HAL_GPIO_Init+0x2c8>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d007      	beq.n	8002238 <HAL_GPIO_Init+0x1e4>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	4a3d      	ldr	r2, [pc, #244]	; (8002320 <HAL_GPIO_Init+0x2cc>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d101      	bne.n	8002234 <HAL_GPIO_Init+0x1e0>
 8002230:	2303      	movs	r3, #3
 8002232:	e006      	b.n	8002242 <HAL_GPIO_Init+0x1ee>
 8002234:	2304      	movs	r3, #4
 8002236:	e004      	b.n	8002242 <HAL_GPIO_Init+0x1ee>
 8002238:	2302      	movs	r3, #2
 800223a:	e002      	b.n	8002242 <HAL_GPIO_Init+0x1ee>
 800223c:	2301      	movs	r3, #1
 800223e:	e000      	b.n	8002242 <HAL_GPIO_Init+0x1ee>
 8002240:	2300      	movs	r3, #0
 8002242:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002244:	f002 0203 	and.w	r2, r2, #3
 8002248:	0092      	lsls	r2, r2, #2
 800224a:	4093      	lsls	r3, r2
 800224c:	68fa      	ldr	r2, [r7, #12]
 800224e:	4313      	orrs	r3, r2
 8002250:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002252:	492f      	ldr	r1, [pc, #188]	; (8002310 <HAL_GPIO_Init+0x2bc>)
 8002254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002256:	089b      	lsrs	r3, r3, #2
 8002258:	3302      	adds	r3, #2
 800225a:	68fa      	ldr	r2, [r7, #12]
 800225c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d006      	beq.n	800227a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800226c:	4b2d      	ldr	r3, [pc, #180]	; (8002324 <HAL_GPIO_Init+0x2d0>)
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	492c      	ldr	r1, [pc, #176]	; (8002324 <HAL_GPIO_Init+0x2d0>)
 8002272:	69bb      	ldr	r3, [r7, #24]
 8002274:	4313      	orrs	r3, r2
 8002276:	600b      	str	r3, [r1, #0]
 8002278:	e006      	b.n	8002288 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800227a:	4b2a      	ldr	r3, [pc, #168]	; (8002324 <HAL_GPIO_Init+0x2d0>)
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	69bb      	ldr	r3, [r7, #24]
 8002280:	43db      	mvns	r3, r3
 8002282:	4928      	ldr	r1, [pc, #160]	; (8002324 <HAL_GPIO_Init+0x2d0>)
 8002284:	4013      	ands	r3, r2
 8002286:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002290:	2b00      	cmp	r3, #0
 8002292:	d006      	beq.n	80022a2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002294:	4b23      	ldr	r3, [pc, #140]	; (8002324 <HAL_GPIO_Init+0x2d0>)
 8002296:	685a      	ldr	r2, [r3, #4]
 8002298:	4922      	ldr	r1, [pc, #136]	; (8002324 <HAL_GPIO_Init+0x2d0>)
 800229a:	69bb      	ldr	r3, [r7, #24]
 800229c:	4313      	orrs	r3, r2
 800229e:	604b      	str	r3, [r1, #4]
 80022a0:	e006      	b.n	80022b0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80022a2:	4b20      	ldr	r3, [pc, #128]	; (8002324 <HAL_GPIO_Init+0x2d0>)
 80022a4:	685a      	ldr	r2, [r3, #4]
 80022a6:	69bb      	ldr	r3, [r7, #24]
 80022a8:	43db      	mvns	r3, r3
 80022aa:	491e      	ldr	r1, [pc, #120]	; (8002324 <HAL_GPIO_Init+0x2d0>)
 80022ac:	4013      	ands	r3, r2
 80022ae:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d006      	beq.n	80022ca <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80022bc:	4b19      	ldr	r3, [pc, #100]	; (8002324 <HAL_GPIO_Init+0x2d0>)
 80022be:	689a      	ldr	r2, [r3, #8]
 80022c0:	4918      	ldr	r1, [pc, #96]	; (8002324 <HAL_GPIO_Init+0x2d0>)
 80022c2:	69bb      	ldr	r3, [r7, #24]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	608b      	str	r3, [r1, #8]
 80022c8:	e006      	b.n	80022d8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80022ca:	4b16      	ldr	r3, [pc, #88]	; (8002324 <HAL_GPIO_Init+0x2d0>)
 80022cc:	689a      	ldr	r2, [r3, #8]
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	43db      	mvns	r3, r3
 80022d2:	4914      	ldr	r1, [pc, #80]	; (8002324 <HAL_GPIO_Init+0x2d0>)
 80022d4:	4013      	ands	r3, r2
 80022d6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d021      	beq.n	8002328 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80022e4:	4b0f      	ldr	r3, [pc, #60]	; (8002324 <HAL_GPIO_Init+0x2d0>)
 80022e6:	68da      	ldr	r2, [r3, #12]
 80022e8:	490e      	ldr	r1, [pc, #56]	; (8002324 <HAL_GPIO_Init+0x2d0>)
 80022ea:	69bb      	ldr	r3, [r7, #24]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	60cb      	str	r3, [r1, #12]
 80022f0:	e021      	b.n	8002336 <HAL_GPIO_Init+0x2e2>
 80022f2:	bf00      	nop
 80022f4:	10320000 	.word	0x10320000
 80022f8:	10310000 	.word	0x10310000
 80022fc:	10220000 	.word	0x10220000
 8002300:	10210000 	.word	0x10210000
 8002304:	10120000 	.word	0x10120000
 8002308:	10110000 	.word	0x10110000
 800230c:	40021000 	.word	0x40021000
 8002310:	40010000 	.word	0x40010000
 8002314:	40010800 	.word	0x40010800
 8002318:	40010c00 	.word	0x40010c00
 800231c:	40011000 	.word	0x40011000
 8002320:	40011400 	.word	0x40011400
 8002324:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002328:	4b0b      	ldr	r3, [pc, #44]	; (8002358 <HAL_GPIO_Init+0x304>)
 800232a:	68da      	ldr	r2, [r3, #12]
 800232c:	69bb      	ldr	r3, [r7, #24]
 800232e:	43db      	mvns	r3, r3
 8002330:	4909      	ldr	r1, [pc, #36]	; (8002358 <HAL_GPIO_Init+0x304>)
 8002332:	4013      	ands	r3, r2
 8002334:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002338:	3301      	adds	r3, #1
 800233a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002342:	fa22 f303 	lsr.w	r3, r2, r3
 8002346:	2b00      	cmp	r3, #0
 8002348:	f47f ae8e 	bne.w	8002068 <HAL_GPIO_Init+0x14>
  }
}
 800234c:	bf00      	nop
 800234e:	bf00      	nop
 8002350:	372c      	adds	r7, #44	; 0x2c
 8002352:	46bd      	mov	sp, r7
 8002354:	bc80      	pop	{r7}
 8002356:	4770      	bx	lr
 8002358:	40010400 	.word	0x40010400

0800235c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	460b      	mov	r3, r1
 8002366:	807b      	strh	r3, [r7, #2]
 8002368:	4613      	mov	r3, r2
 800236a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800236c:	787b      	ldrb	r3, [r7, #1]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d003      	beq.n	800237a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002372:	887a      	ldrh	r2, [r7, #2]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002378:	e003      	b.n	8002382 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800237a:	887b      	ldrh	r3, [r7, #2]
 800237c:	041a      	lsls	r2, r3, #16
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	611a      	str	r2, [r3, #16]
}
 8002382:	bf00      	nop
 8002384:	370c      	adds	r7, #12
 8002386:	46bd      	mov	sp, r7
 8002388:	bc80      	pop	{r7}
 800238a:	4770      	bx	lr

0800238c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b086      	sub	sp, #24
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d101      	bne.n	800239e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e272      	b.n	8002884 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0301 	and.w	r3, r3, #1
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	f000 8087 	beq.w	80024ba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80023ac:	4b92      	ldr	r3, [pc, #584]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f003 030c 	and.w	r3, r3, #12
 80023b4:	2b04      	cmp	r3, #4
 80023b6:	d00c      	beq.n	80023d2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80023b8:	4b8f      	ldr	r3, [pc, #572]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f003 030c 	and.w	r3, r3, #12
 80023c0:	2b08      	cmp	r3, #8
 80023c2:	d112      	bne.n	80023ea <HAL_RCC_OscConfig+0x5e>
 80023c4:	4b8c      	ldr	r3, [pc, #560]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023d0:	d10b      	bne.n	80023ea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023d2:	4b89      	ldr	r3, [pc, #548]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d06c      	beq.n	80024b8 <HAL_RCC_OscConfig+0x12c>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d168      	bne.n	80024b8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e24c      	b.n	8002884 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023f2:	d106      	bne.n	8002402 <HAL_RCC_OscConfig+0x76>
 80023f4:	4b80      	ldr	r3, [pc, #512]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a7f      	ldr	r2, [pc, #508]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 80023fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023fe:	6013      	str	r3, [r2, #0]
 8002400:	e02e      	b.n	8002460 <HAL_RCC_OscConfig+0xd4>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d10c      	bne.n	8002424 <HAL_RCC_OscConfig+0x98>
 800240a:	4b7b      	ldr	r3, [pc, #492]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a7a      	ldr	r2, [pc, #488]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 8002410:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002414:	6013      	str	r3, [r2, #0]
 8002416:	4b78      	ldr	r3, [pc, #480]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a77      	ldr	r2, [pc, #476]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 800241c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002420:	6013      	str	r3, [r2, #0]
 8002422:	e01d      	b.n	8002460 <HAL_RCC_OscConfig+0xd4>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800242c:	d10c      	bne.n	8002448 <HAL_RCC_OscConfig+0xbc>
 800242e:	4b72      	ldr	r3, [pc, #456]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a71      	ldr	r2, [pc, #452]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 8002434:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002438:	6013      	str	r3, [r2, #0]
 800243a:	4b6f      	ldr	r3, [pc, #444]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a6e      	ldr	r2, [pc, #440]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 8002440:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002444:	6013      	str	r3, [r2, #0]
 8002446:	e00b      	b.n	8002460 <HAL_RCC_OscConfig+0xd4>
 8002448:	4b6b      	ldr	r3, [pc, #428]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a6a      	ldr	r2, [pc, #424]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 800244e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002452:	6013      	str	r3, [r2, #0]
 8002454:	4b68      	ldr	r3, [pc, #416]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a67      	ldr	r2, [pc, #412]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 800245a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800245e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d013      	beq.n	8002490 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002468:	f7ff fc2c 	bl	8001cc4 <HAL_GetTick>
 800246c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800246e:	e008      	b.n	8002482 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002470:	f7ff fc28 	bl	8001cc4 <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	2b64      	cmp	r3, #100	; 0x64
 800247c:	d901      	bls.n	8002482 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e200      	b.n	8002884 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002482:	4b5d      	ldr	r3, [pc, #372]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d0f0      	beq.n	8002470 <HAL_RCC_OscConfig+0xe4>
 800248e:	e014      	b.n	80024ba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002490:	f7ff fc18 	bl	8001cc4 <HAL_GetTick>
 8002494:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002496:	e008      	b.n	80024aa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002498:	f7ff fc14 	bl	8001cc4 <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	2b64      	cmp	r3, #100	; 0x64
 80024a4:	d901      	bls.n	80024aa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e1ec      	b.n	8002884 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024aa:	4b53      	ldr	r3, [pc, #332]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d1f0      	bne.n	8002498 <HAL_RCC_OscConfig+0x10c>
 80024b6:	e000      	b.n	80024ba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0302 	and.w	r3, r3, #2
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d063      	beq.n	800258e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80024c6:	4b4c      	ldr	r3, [pc, #304]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	f003 030c 	and.w	r3, r3, #12
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d00b      	beq.n	80024ea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80024d2:	4b49      	ldr	r3, [pc, #292]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f003 030c 	and.w	r3, r3, #12
 80024da:	2b08      	cmp	r3, #8
 80024dc:	d11c      	bne.n	8002518 <HAL_RCC_OscConfig+0x18c>
 80024de:	4b46      	ldr	r3, [pc, #280]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d116      	bne.n	8002518 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024ea:	4b43      	ldr	r3, [pc, #268]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0302 	and.w	r3, r3, #2
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d005      	beq.n	8002502 <HAL_RCC_OscConfig+0x176>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	691b      	ldr	r3, [r3, #16]
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d001      	beq.n	8002502 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e1c0      	b.n	8002884 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002502:	4b3d      	ldr	r3, [pc, #244]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	695b      	ldr	r3, [r3, #20]
 800250e:	00db      	lsls	r3, r3, #3
 8002510:	4939      	ldr	r1, [pc, #228]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 8002512:	4313      	orrs	r3, r2
 8002514:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002516:	e03a      	b.n	800258e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	691b      	ldr	r3, [r3, #16]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d020      	beq.n	8002562 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002520:	4b36      	ldr	r3, [pc, #216]	; (80025fc <HAL_RCC_OscConfig+0x270>)
 8002522:	2201      	movs	r2, #1
 8002524:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002526:	f7ff fbcd 	bl	8001cc4 <HAL_GetTick>
 800252a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800252c:	e008      	b.n	8002540 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800252e:	f7ff fbc9 	bl	8001cc4 <HAL_GetTick>
 8002532:	4602      	mov	r2, r0
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	2b02      	cmp	r3, #2
 800253a:	d901      	bls.n	8002540 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800253c:	2303      	movs	r3, #3
 800253e:	e1a1      	b.n	8002884 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002540:	4b2d      	ldr	r3, [pc, #180]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0302 	and.w	r3, r3, #2
 8002548:	2b00      	cmp	r3, #0
 800254a:	d0f0      	beq.n	800252e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800254c:	4b2a      	ldr	r3, [pc, #168]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	695b      	ldr	r3, [r3, #20]
 8002558:	00db      	lsls	r3, r3, #3
 800255a:	4927      	ldr	r1, [pc, #156]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 800255c:	4313      	orrs	r3, r2
 800255e:	600b      	str	r3, [r1, #0]
 8002560:	e015      	b.n	800258e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002562:	4b26      	ldr	r3, [pc, #152]	; (80025fc <HAL_RCC_OscConfig+0x270>)
 8002564:	2200      	movs	r2, #0
 8002566:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002568:	f7ff fbac 	bl	8001cc4 <HAL_GetTick>
 800256c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800256e:	e008      	b.n	8002582 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002570:	f7ff fba8 	bl	8001cc4 <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	2b02      	cmp	r3, #2
 800257c:	d901      	bls.n	8002582 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800257e:	2303      	movs	r3, #3
 8002580:	e180      	b.n	8002884 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002582:	4b1d      	ldr	r3, [pc, #116]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0302 	and.w	r3, r3, #2
 800258a:	2b00      	cmp	r3, #0
 800258c:	d1f0      	bne.n	8002570 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0308 	and.w	r3, r3, #8
 8002596:	2b00      	cmp	r3, #0
 8002598:	d03a      	beq.n	8002610 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	699b      	ldr	r3, [r3, #24]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d019      	beq.n	80025d6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025a2:	4b17      	ldr	r3, [pc, #92]	; (8002600 <HAL_RCC_OscConfig+0x274>)
 80025a4:	2201      	movs	r2, #1
 80025a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025a8:	f7ff fb8c 	bl	8001cc4 <HAL_GetTick>
 80025ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025ae:	e008      	b.n	80025c2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025b0:	f7ff fb88 	bl	8001cc4 <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d901      	bls.n	80025c2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e160      	b.n	8002884 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025c2:	4b0d      	ldr	r3, [pc, #52]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 80025c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c6:	f003 0302 	and.w	r3, r3, #2
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d0f0      	beq.n	80025b0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80025ce:	2001      	movs	r0, #1
 80025d0:	f000 fad8 	bl	8002b84 <RCC_Delay>
 80025d4:	e01c      	b.n	8002610 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025d6:	4b0a      	ldr	r3, [pc, #40]	; (8002600 <HAL_RCC_OscConfig+0x274>)
 80025d8:	2200      	movs	r2, #0
 80025da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025dc:	f7ff fb72 	bl	8001cc4 <HAL_GetTick>
 80025e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025e2:	e00f      	b.n	8002604 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025e4:	f7ff fb6e 	bl	8001cc4 <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d908      	bls.n	8002604 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e146      	b.n	8002884 <HAL_RCC_OscConfig+0x4f8>
 80025f6:	bf00      	nop
 80025f8:	40021000 	.word	0x40021000
 80025fc:	42420000 	.word	0x42420000
 8002600:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002604:	4b92      	ldr	r3, [pc, #584]	; (8002850 <HAL_RCC_OscConfig+0x4c4>)
 8002606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002608:	f003 0302 	and.w	r3, r3, #2
 800260c:	2b00      	cmp	r3, #0
 800260e:	d1e9      	bne.n	80025e4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0304 	and.w	r3, r3, #4
 8002618:	2b00      	cmp	r3, #0
 800261a:	f000 80a6 	beq.w	800276a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800261e:	2300      	movs	r3, #0
 8002620:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002622:	4b8b      	ldr	r3, [pc, #556]	; (8002850 <HAL_RCC_OscConfig+0x4c4>)
 8002624:	69db      	ldr	r3, [r3, #28]
 8002626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d10d      	bne.n	800264a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800262e:	4b88      	ldr	r3, [pc, #544]	; (8002850 <HAL_RCC_OscConfig+0x4c4>)
 8002630:	69db      	ldr	r3, [r3, #28]
 8002632:	4a87      	ldr	r2, [pc, #540]	; (8002850 <HAL_RCC_OscConfig+0x4c4>)
 8002634:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002638:	61d3      	str	r3, [r2, #28]
 800263a:	4b85      	ldr	r3, [pc, #532]	; (8002850 <HAL_RCC_OscConfig+0x4c4>)
 800263c:	69db      	ldr	r3, [r3, #28]
 800263e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002642:	60bb      	str	r3, [r7, #8]
 8002644:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002646:	2301      	movs	r3, #1
 8002648:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800264a:	4b82      	ldr	r3, [pc, #520]	; (8002854 <HAL_RCC_OscConfig+0x4c8>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002652:	2b00      	cmp	r3, #0
 8002654:	d118      	bne.n	8002688 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002656:	4b7f      	ldr	r3, [pc, #508]	; (8002854 <HAL_RCC_OscConfig+0x4c8>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a7e      	ldr	r2, [pc, #504]	; (8002854 <HAL_RCC_OscConfig+0x4c8>)
 800265c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002660:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002662:	f7ff fb2f 	bl	8001cc4 <HAL_GetTick>
 8002666:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002668:	e008      	b.n	800267c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800266a:	f7ff fb2b 	bl	8001cc4 <HAL_GetTick>
 800266e:	4602      	mov	r2, r0
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	2b64      	cmp	r3, #100	; 0x64
 8002676:	d901      	bls.n	800267c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002678:	2303      	movs	r3, #3
 800267a:	e103      	b.n	8002884 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800267c:	4b75      	ldr	r3, [pc, #468]	; (8002854 <HAL_RCC_OscConfig+0x4c8>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002684:	2b00      	cmp	r3, #0
 8002686:	d0f0      	beq.n	800266a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	2b01      	cmp	r3, #1
 800268e:	d106      	bne.n	800269e <HAL_RCC_OscConfig+0x312>
 8002690:	4b6f      	ldr	r3, [pc, #444]	; (8002850 <HAL_RCC_OscConfig+0x4c4>)
 8002692:	6a1b      	ldr	r3, [r3, #32]
 8002694:	4a6e      	ldr	r2, [pc, #440]	; (8002850 <HAL_RCC_OscConfig+0x4c4>)
 8002696:	f043 0301 	orr.w	r3, r3, #1
 800269a:	6213      	str	r3, [r2, #32]
 800269c:	e02d      	b.n	80026fa <HAL_RCC_OscConfig+0x36e>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d10c      	bne.n	80026c0 <HAL_RCC_OscConfig+0x334>
 80026a6:	4b6a      	ldr	r3, [pc, #424]	; (8002850 <HAL_RCC_OscConfig+0x4c4>)
 80026a8:	6a1b      	ldr	r3, [r3, #32]
 80026aa:	4a69      	ldr	r2, [pc, #420]	; (8002850 <HAL_RCC_OscConfig+0x4c4>)
 80026ac:	f023 0301 	bic.w	r3, r3, #1
 80026b0:	6213      	str	r3, [r2, #32]
 80026b2:	4b67      	ldr	r3, [pc, #412]	; (8002850 <HAL_RCC_OscConfig+0x4c4>)
 80026b4:	6a1b      	ldr	r3, [r3, #32]
 80026b6:	4a66      	ldr	r2, [pc, #408]	; (8002850 <HAL_RCC_OscConfig+0x4c4>)
 80026b8:	f023 0304 	bic.w	r3, r3, #4
 80026bc:	6213      	str	r3, [r2, #32]
 80026be:	e01c      	b.n	80026fa <HAL_RCC_OscConfig+0x36e>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	2b05      	cmp	r3, #5
 80026c6:	d10c      	bne.n	80026e2 <HAL_RCC_OscConfig+0x356>
 80026c8:	4b61      	ldr	r3, [pc, #388]	; (8002850 <HAL_RCC_OscConfig+0x4c4>)
 80026ca:	6a1b      	ldr	r3, [r3, #32]
 80026cc:	4a60      	ldr	r2, [pc, #384]	; (8002850 <HAL_RCC_OscConfig+0x4c4>)
 80026ce:	f043 0304 	orr.w	r3, r3, #4
 80026d2:	6213      	str	r3, [r2, #32]
 80026d4:	4b5e      	ldr	r3, [pc, #376]	; (8002850 <HAL_RCC_OscConfig+0x4c4>)
 80026d6:	6a1b      	ldr	r3, [r3, #32]
 80026d8:	4a5d      	ldr	r2, [pc, #372]	; (8002850 <HAL_RCC_OscConfig+0x4c4>)
 80026da:	f043 0301 	orr.w	r3, r3, #1
 80026de:	6213      	str	r3, [r2, #32]
 80026e0:	e00b      	b.n	80026fa <HAL_RCC_OscConfig+0x36e>
 80026e2:	4b5b      	ldr	r3, [pc, #364]	; (8002850 <HAL_RCC_OscConfig+0x4c4>)
 80026e4:	6a1b      	ldr	r3, [r3, #32]
 80026e6:	4a5a      	ldr	r2, [pc, #360]	; (8002850 <HAL_RCC_OscConfig+0x4c4>)
 80026e8:	f023 0301 	bic.w	r3, r3, #1
 80026ec:	6213      	str	r3, [r2, #32]
 80026ee:	4b58      	ldr	r3, [pc, #352]	; (8002850 <HAL_RCC_OscConfig+0x4c4>)
 80026f0:	6a1b      	ldr	r3, [r3, #32]
 80026f2:	4a57      	ldr	r2, [pc, #348]	; (8002850 <HAL_RCC_OscConfig+0x4c4>)
 80026f4:	f023 0304 	bic.w	r3, r3, #4
 80026f8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	68db      	ldr	r3, [r3, #12]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d015      	beq.n	800272e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002702:	f7ff fadf 	bl	8001cc4 <HAL_GetTick>
 8002706:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002708:	e00a      	b.n	8002720 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800270a:	f7ff fadb 	bl	8001cc4 <HAL_GetTick>
 800270e:	4602      	mov	r2, r0
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	f241 3288 	movw	r2, #5000	; 0x1388
 8002718:	4293      	cmp	r3, r2
 800271a:	d901      	bls.n	8002720 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800271c:	2303      	movs	r3, #3
 800271e:	e0b1      	b.n	8002884 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002720:	4b4b      	ldr	r3, [pc, #300]	; (8002850 <HAL_RCC_OscConfig+0x4c4>)
 8002722:	6a1b      	ldr	r3, [r3, #32]
 8002724:	f003 0302 	and.w	r3, r3, #2
 8002728:	2b00      	cmp	r3, #0
 800272a:	d0ee      	beq.n	800270a <HAL_RCC_OscConfig+0x37e>
 800272c:	e014      	b.n	8002758 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800272e:	f7ff fac9 	bl	8001cc4 <HAL_GetTick>
 8002732:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002734:	e00a      	b.n	800274c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002736:	f7ff fac5 	bl	8001cc4 <HAL_GetTick>
 800273a:	4602      	mov	r2, r0
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	f241 3288 	movw	r2, #5000	; 0x1388
 8002744:	4293      	cmp	r3, r2
 8002746:	d901      	bls.n	800274c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002748:	2303      	movs	r3, #3
 800274a:	e09b      	b.n	8002884 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800274c:	4b40      	ldr	r3, [pc, #256]	; (8002850 <HAL_RCC_OscConfig+0x4c4>)
 800274e:	6a1b      	ldr	r3, [r3, #32]
 8002750:	f003 0302 	and.w	r3, r3, #2
 8002754:	2b00      	cmp	r3, #0
 8002756:	d1ee      	bne.n	8002736 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002758:	7dfb      	ldrb	r3, [r7, #23]
 800275a:	2b01      	cmp	r3, #1
 800275c:	d105      	bne.n	800276a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800275e:	4b3c      	ldr	r3, [pc, #240]	; (8002850 <HAL_RCC_OscConfig+0x4c4>)
 8002760:	69db      	ldr	r3, [r3, #28]
 8002762:	4a3b      	ldr	r2, [pc, #236]	; (8002850 <HAL_RCC_OscConfig+0x4c4>)
 8002764:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002768:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	69db      	ldr	r3, [r3, #28]
 800276e:	2b00      	cmp	r3, #0
 8002770:	f000 8087 	beq.w	8002882 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002774:	4b36      	ldr	r3, [pc, #216]	; (8002850 <HAL_RCC_OscConfig+0x4c4>)
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f003 030c 	and.w	r3, r3, #12
 800277c:	2b08      	cmp	r3, #8
 800277e:	d061      	beq.n	8002844 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	69db      	ldr	r3, [r3, #28]
 8002784:	2b02      	cmp	r3, #2
 8002786:	d146      	bne.n	8002816 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002788:	4b33      	ldr	r3, [pc, #204]	; (8002858 <HAL_RCC_OscConfig+0x4cc>)
 800278a:	2200      	movs	r2, #0
 800278c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800278e:	f7ff fa99 	bl	8001cc4 <HAL_GetTick>
 8002792:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002794:	e008      	b.n	80027a8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002796:	f7ff fa95 	bl	8001cc4 <HAL_GetTick>
 800279a:	4602      	mov	r2, r0
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d901      	bls.n	80027a8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80027a4:	2303      	movs	r3, #3
 80027a6:	e06d      	b.n	8002884 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027a8:	4b29      	ldr	r3, [pc, #164]	; (8002850 <HAL_RCC_OscConfig+0x4c4>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d1f0      	bne.n	8002796 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6a1b      	ldr	r3, [r3, #32]
 80027b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027bc:	d108      	bne.n	80027d0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80027be:	4b24      	ldr	r3, [pc, #144]	; (8002850 <HAL_RCC_OscConfig+0x4c4>)
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	4921      	ldr	r1, [pc, #132]	; (8002850 <HAL_RCC_OscConfig+0x4c4>)
 80027cc:	4313      	orrs	r3, r2
 80027ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027d0:	4b1f      	ldr	r3, [pc, #124]	; (8002850 <HAL_RCC_OscConfig+0x4c4>)
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6a19      	ldr	r1, [r3, #32]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e0:	430b      	orrs	r3, r1
 80027e2:	491b      	ldr	r1, [pc, #108]	; (8002850 <HAL_RCC_OscConfig+0x4c4>)
 80027e4:	4313      	orrs	r3, r2
 80027e6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027e8:	4b1b      	ldr	r3, [pc, #108]	; (8002858 <HAL_RCC_OscConfig+0x4cc>)
 80027ea:	2201      	movs	r2, #1
 80027ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ee:	f7ff fa69 	bl	8001cc4 <HAL_GetTick>
 80027f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027f4:	e008      	b.n	8002808 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027f6:	f7ff fa65 	bl	8001cc4 <HAL_GetTick>
 80027fa:	4602      	mov	r2, r0
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	2b02      	cmp	r3, #2
 8002802:	d901      	bls.n	8002808 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002804:	2303      	movs	r3, #3
 8002806:	e03d      	b.n	8002884 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002808:	4b11      	ldr	r3, [pc, #68]	; (8002850 <HAL_RCC_OscConfig+0x4c4>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002810:	2b00      	cmp	r3, #0
 8002812:	d0f0      	beq.n	80027f6 <HAL_RCC_OscConfig+0x46a>
 8002814:	e035      	b.n	8002882 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002816:	4b10      	ldr	r3, [pc, #64]	; (8002858 <HAL_RCC_OscConfig+0x4cc>)
 8002818:	2200      	movs	r2, #0
 800281a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800281c:	f7ff fa52 	bl	8001cc4 <HAL_GetTick>
 8002820:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002822:	e008      	b.n	8002836 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002824:	f7ff fa4e 	bl	8001cc4 <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	2b02      	cmp	r3, #2
 8002830:	d901      	bls.n	8002836 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e026      	b.n	8002884 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002836:	4b06      	ldr	r3, [pc, #24]	; (8002850 <HAL_RCC_OscConfig+0x4c4>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d1f0      	bne.n	8002824 <HAL_RCC_OscConfig+0x498>
 8002842:	e01e      	b.n	8002882 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	69db      	ldr	r3, [r3, #28]
 8002848:	2b01      	cmp	r3, #1
 800284a:	d107      	bne.n	800285c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e019      	b.n	8002884 <HAL_RCC_OscConfig+0x4f8>
 8002850:	40021000 	.word	0x40021000
 8002854:	40007000 	.word	0x40007000
 8002858:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800285c:	4b0b      	ldr	r3, [pc, #44]	; (800288c <HAL_RCC_OscConfig+0x500>)
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6a1b      	ldr	r3, [r3, #32]
 800286c:	429a      	cmp	r2, r3
 800286e:	d106      	bne.n	800287e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800287a:	429a      	cmp	r2, r3
 800287c:	d001      	beq.n	8002882 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e000      	b.n	8002884 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002882:	2300      	movs	r3, #0
}
 8002884:	4618      	mov	r0, r3
 8002886:	3718      	adds	r7, #24
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}
 800288c:	40021000 	.word	0x40021000

08002890 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b084      	sub	sp, #16
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d101      	bne.n	80028a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e0d0      	b.n	8002a46 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028a4:	4b6a      	ldr	r3, [pc, #424]	; (8002a50 <HAL_RCC_ClockConfig+0x1c0>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 0307 	and.w	r3, r3, #7
 80028ac:	683a      	ldr	r2, [r7, #0]
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d910      	bls.n	80028d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028b2:	4b67      	ldr	r3, [pc, #412]	; (8002a50 <HAL_RCC_ClockConfig+0x1c0>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f023 0207 	bic.w	r2, r3, #7
 80028ba:	4965      	ldr	r1, [pc, #404]	; (8002a50 <HAL_RCC_ClockConfig+0x1c0>)
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	4313      	orrs	r3, r2
 80028c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028c2:	4b63      	ldr	r3, [pc, #396]	; (8002a50 <HAL_RCC_ClockConfig+0x1c0>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0307 	and.w	r3, r3, #7
 80028ca:	683a      	ldr	r2, [r7, #0]
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d001      	beq.n	80028d4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e0b8      	b.n	8002a46 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0302 	and.w	r3, r3, #2
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d020      	beq.n	8002922 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 0304 	and.w	r3, r3, #4
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d005      	beq.n	80028f8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028ec:	4b59      	ldr	r3, [pc, #356]	; (8002a54 <HAL_RCC_ClockConfig+0x1c4>)
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	4a58      	ldr	r2, [pc, #352]	; (8002a54 <HAL_RCC_ClockConfig+0x1c4>)
 80028f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80028f6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0308 	and.w	r3, r3, #8
 8002900:	2b00      	cmp	r3, #0
 8002902:	d005      	beq.n	8002910 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002904:	4b53      	ldr	r3, [pc, #332]	; (8002a54 <HAL_RCC_ClockConfig+0x1c4>)
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	4a52      	ldr	r2, [pc, #328]	; (8002a54 <HAL_RCC_ClockConfig+0x1c4>)
 800290a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800290e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002910:	4b50      	ldr	r3, [pc, #320]	; (8002a54 <HAL_RCC_ClockConfig+0x1c4>)
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	494d      	ldr	r1, [pc, #308]	; (8002a54 <HAL_RCC_ClockConfig+0x1c4>)
 800291e:	4313      	orrs	r3, r2
 8002920:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0301 	and.w	r3, r3, #1
 800292a:	2b00      	cmp	r3, #0
 800292c:	d040      	beq.n	80029b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	2b01      	cmp	r3, #1
 8002934:	d107      	bne.n	8002946 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002936:	4b47      	ldr	r3, [pc, #284]	; (8002a54 <HAL_RCC_ClockConfig+0x1c4>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d115      	bne.n	800296e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e07f      	b.n	8002a46 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	2b02      	cmp	r3, #2
 800294c:	d107      	bne.n	800295e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800294e:	4b41      	ldr	r3, [pc, #260]	; (8002a54 <HAL_RCC_ClockConfig+0x1c4>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d109      	bne.n	800296e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e073      	b.n	8002a46 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800295e:	4b3d      	ldr	r3, [pc, #244]	; (8002a54 <HAL_RCC_ClockConfig+0x1c4>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0302 	and.w	r3, r3, #2
 8002966:	2b00      	cmp	r3, #0
 8002968:	d101      	bne.n	800296e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e06b      	b.n	8002a46 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800296e:	4b39      	ldr	r3, [pc, #228]	; (8002a54 <HAL_RCC_ClockConfig+0x1c4>)
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	f023 0203 	bic.w	r2, r3, #3
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	4936      	ldr	r1, [pc, #216]	; (8002a54 <HAL_RCC_ClockConfig+0x1c4>)
 800297c:	4313      	orrs	r3, r2
 800297e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002980:	f7ff f9a0 	bl	8001cc4 <HAL_GetTick>
 8002984:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002986:	e00a      	b.n	800299e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002988:	f7ff f99c 	bl	8001cc4 <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	f241 3288 	movw	r2, #5000	; 0x1388
 8002996:	4293      	cmp	r3, r2
 8002998:	d901      	bls.n	800299e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	e053      	b.n	8002a46 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800299e:	4b2d      	ldr	r3, [pc, #180]	; (8002a54 <HAL_RCC_ClockConfig+0x1c4>)
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	f003 020c 	and.w	r2, r3, #12
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d1eb      	bne.n	8002988 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029b0:	4b27      	ldr	r3, [pc, #156]	; (8002a50 <HAL_RCC_ClockConfig+0x1c0>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0307 	and.w	r3, r3, #7
 80029b8:	683a      	ldr	r2, [r7, #0]
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d210      	bcs.n	80029e0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029be:	4b24      	ldr	r3, [pc, #144]	; (8002a50 <HAL_RCC_ClockConfig+0x1c0>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f023 0207 	bic.w	r2, r3, #7
 80029c6:	4922      	ldr	r1, [pc, #136]	; (8002a50 <HAL_RCC_ClockConfig+0x1c0>)
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ce:	4b20      	ldr	r3, [pc, #128]	; (8002a50 <HAL_RCC_ClockConfig+0x1c0>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0307 	and.w	r3, r3, #7
 80029d6:	683a      	ldr	r2, [r7, #0]
 80029d8:	429a      	cmp	r2, r3
 80029da:	d001      	beq.n	80029e0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e032      	b.n	8002a46 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0304 	and.w	r3, r3, #4
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d008      	beq.n	80029fe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029ec:	4b19      	ldr	r3, [pc, #100]	; (8002a54 <HAL_RCC_ClockConfig+0x1c4>)
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	4916      	ldr	r1, [pc, #88]	; (8002a54 <HAL_RCC_ClockConfig+0x1c4>)
 80029fa:	4313      	orrs	r3, r2
 80029fc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0308 	and.w	r3, r3, #8
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d009      	beq.n	8002a1e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a0a:	4b12      	ldr	r3, [pc, #72]	; (8002a54 <HAL_RCC_ClockConfig+0x1c4>)
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	691b      	ldr	r3, [r3, #16]
 8002a16:	00db      	lsls	r3, r3, #3
 8002a18:	490e      	ldr	r1, [pc, #56]	; (8002a54 <HAL_RCC_ClockConfig+0x1c4>)
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a1e:	f000 f821 	bl	8002a64 <HAL_RCC_GetSysClockFreq>
 8002a22:	4602      	mov	r2, r0
 8002a24:	4b0b      	ldr	r3, [pc, #44]	; (8002a54 <HAL_RCC_ClockConfig+0x1c4>)
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	091b      	lsrs	r3, r3, #4
 8002a2a:	f003 030f 	and.w	r3, r3, #15
 8002a2e:	490a      	ldr	r1, [pc, #40]	; (8002a58 <HAL_RCC_ClockConfig+0x1c8>)
 8002a30:	5ccb      	ldrb	r3, [r1, r3]
 8002a32:	fa22 f303 	lsr.w	r3, r2, r3
 8002a36:	4a09      	ldr	r2, [pc, #36]	; (8002a5c <HAL_RCC_ClockConfig+0x1cc>)
 8002a38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a3a:	4b09      	ldr	r3, [pc, #36]	; (8002a60 <HAL_RCC_ClockConfig+0x1d0>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f7ff f8fe 	bl	8001c40 <HAL_InitTick>

  return HAL_OK;
 8002a44:	2300      	movs	r3, #0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3710      	adds	r7, #16
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	40022000 	.word	0x40022000
 8002a54:	40021000 	.word	0x40021000
 8002a58:	0800844c 	.word	0x0800844c
 8002a5c:	20000098 	.word	0x20000098
 8002a60:	2000009c 	.word	0x2000009c

08002a64 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a64:	b490      	push	{r4, r7}
 8002a66:	b08a      	sub	sp, #40	; 0x28
 8002a68:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002a6a:	4b29      	ldr	r3, [pc, #164]	; (8002b10 <HAL_RCC_GetSysClockFreq+0xac>)
 8002a6c:	1d3c      	adds	r4, r7, #4
 8002a6e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a70:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002a74:	f240 2301 	movw	r3, #513	; 0x201
 8002a78:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	61fb      	str	r3, [r7, #28]
 8002a7e:	2300      	movs	r3, #0
 8002a80:	61bb      	str	r3, [r7, #24]
 8002a82:	2300      	movs	r3, #0
 8002a84:	627b      	str	r3, [r7, #36]	; 0x24
 8002a86:	2300      	movs	r3, #0
 8002a88:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002a8e:	4b21      	ldr	r3, [pc, #132]	; (8002b14 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	f003 030c 	and.w	r3, r3, #12
 8002a9a:	2b04      	cmp	r3, #4
 8002a9c:	d002      	beq.n	8002aa4 <HAL_RCC_GetSysClockFreq+0x40>
 8002a9e:	2b08      	cmp	r3, #8
 8002aa0:	d003      	beq.n	8002aaa <HAL_RCC_GetSysClockFreq+0x46>
 8002aa2:	e02b      	b.n	8002afc <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002aa4:	4b1c      	ldr	r3, [pc, #112]	; (8002b18 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002aa6:	623b      	str	r3, [r7, #32]
      break;
 8002aa8:	e02b      	b.n	8002b02 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	0c9b      	lsrs	r3, r3, #18
 8002aae:	f003 030f 	and.w	r3, r3, #15
 8002ab2:	3328      	adds	r3, #40	; 0x28
 8002ab4:	443b      	add	r3, r7
 8002ab6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002aba:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d012      	beq.n	8002aec <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002ac6:	4b13      	ldr	r3, [pc, #76]	; (8002b14 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	0c5b      	lsrs	r3, r3, #17
 8002acc:	f003 0301 	and.w	r3, r3, #1
 8002ad0:	3328      	adds	r3, #40	; 0x28
 8002ad2:	443b      	add	r3, r7
 8002ad4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002ad8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	4a0e      	ldr	r2, [pc, #56]	; (8002b18 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002ade:	fb03 f202 	mul.w	r2, r3, r2
 8002ae2:	69bb      	ldr	r3, [r7, #24]
 8002ae4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ae8:	627b      	str	r3, [r7, #36]	; 0x24
 8002aea:	e004      	b.n	8002af6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	4a0b      	ldr	r2, [pc, #44]	; (8002b1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002af0:	fb02 f303 	mul.w	r3, r2, r3
 8002af4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af8:	623b      	str	r3, [r7, #32]
      break;
 8002afa:	e002      	b.n	8002b02 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002afc:	4b06      	ldr	r3, [pc, #24]	; (8002b18 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002afe:	623b      	str	r3, [r7, #32]
      break;
 8002b00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b02:	6a3b      	ldr	r3, [r7, #32]
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3728      	adds	r7, #40	; 0x28
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bc90      	pop	{r4, r7}
 8002b0c:	4770      	bx	lr
 8002b0e:	bf00      	nop
 8002b10:	08008438 	.word	0x08008438
 8002b14:	40021000 	.word	0x40021000
 8002b18:	007a1200 	.word	0x007a1200
 8002b1c:	003d0900 	.word	0x003d0900

08002b20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b20:	b480      	push	{r7}
 8002b22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b24:	4b02      	ldr	r3, [pc, #8]	; (8002b30 <HAL_RCC_GetHCLKFreq+0x10>)
 8002b26:	681b      	ldr	r3, [r3, #0]
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bc80      	pop	{r7}
 8002b2e:	4770      	bx	lr
 8002b30:	20000098 	.word	0x20000098

08002b34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b38:	f7ff fff2 	bl	8002b20 <HAL_RCC_GetHCLKFreq>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	4b05      	ldr	r3, [pc, #20]	; (8002b54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	0a1b      	lsrs	r3, r3, #8
 8002b44:	f003 0307 	and.w	r3, r3, #7
 8002b48:	4903      	ldr	r1, [pc, #12]	; (8002b58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b4a:	5ccb      	ldrb	r3, [r1, r3]
 8002b4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	40021000 	.word	0x40021000
 8002b58:	0800845c 	.word	0x0800845c

08002b5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b60:	f7ff ffde 	bl	8002b20 <HAL_RCC_GetHCLKFreq>
 8002b64:	4602      	mov	r2, r0
 8002b66:	4b05      	ldr	r3, [pc, #20]	; (8002b7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	0adb      	lsrs	r3, r3, #11
 8002b6c:	f003 0307 	and.w	r3, r3, #7
 8002b70:	4903      	ldr	r1, [pc, #12]	; (8002b80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b72:	5ccb      	ldrb	r3, [r1, r3]
 8002b74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	40021000 	.word	0x40021000
 8002b80:	0800845c 	.word	0x0800845c

08002b84 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b085      	sub	sp, #20
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002b8c:	4b0a      	ldr	r3, [pc, #40]	; (8002bb8 <RCC_Delay+0x34>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a0a      	ldr	r2, [pc, #40]	; (8002bbc <RCC_Delay+0x38>)
 8002b92:	fba2 2303 	umull	r2, r3, r2, r3
 8002b96:	0a5b      	lsrs	r3, r3, #9
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	fb02 f303 	mul.w	r3, r2, r3
 8002b9e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002ba0:	bf00      	nop
  }
  while (Delay --);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	1e5a      	subs	r2, r3, #1
 8002ba6:	60fa      	str	r2, [r7, #12]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d1f9      	bne.n	8002ba0 <RCC_Delay+0x1c>
}
 8002bac:	bf00      	nop
 8002bae:	bf00      	nop
 8002bb0:	3714      	adds	r7, #20
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bc80      	pop	{r7}
 8002bb6:	4770      	bx	lr
 8002bb8:	20000098 	.word	0x20000098
 8002bbc:	10624dd3 	.word	0x10624dd3

08002bc0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b082      	sub	sp, #8
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d101      	bne.n	8002bd2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e041      	b.n	8002c56 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d106      	bne.n	8002bec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2200      	movs	r2, #0
 8002be2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f7fe ff0c 	bl	8001a04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2202      	movs	r2, #2
 8002bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	3304      	adds	r3, #4
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	4610      	mov	r0, r2
 8002c00:	f000 fa1e 	bl	8003040 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2201      	movs	r2, #1
 8002c08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2201      	movs	r2, #1
 8002c18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2201      	movs	r2, #1
 8002c28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2201      	movs	r2, #1
 8002c38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2201      	movs	r2, #1
 8002c48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c54:	2300      	movs	r3, #0
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3708      	adds	r7, #8
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}

08002c5e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c5e:	b580      	push	{r7, lr}
 8002c60:	b082      	sub	sp, #8
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	691b      	ldr	r3, [r3, #16]
 8002c6c:	f003 0302 	and.w	r3, r3, #2
 8002c70:	2b02      	cmp	r3, #2
 8002c72:	d122      	bne.n	8002cba <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	f003 0302 	and.w	r3, r3, #2
 8002c7e:	2b02      	cmp	r3, #2
 8002c80:	d11b      	bne.n	8002cba <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f06f 0202 	mvn.w	r2, #2
 8002c8a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	699b      	ldr	r3, [r3, #24]
 8002c98:	f003 0303 	and.w	r3, r3, #3
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d003      	beq.n	8002ca8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	f000 f9b1 	bl	8003008 <HAL_TIM_IC_CaptureCallback>
 8002ca6:	e005      	b.n	8002cb4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	f000 f9a4 	bl	8002ff6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f000 f9b3 	bl	800301a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	691b      	ldr	r3, [r3, #16]
 8002cc0:	f003 0304 	and.w	r3, r3, #4
 8002cc4:	2b04      	cmp	r3, #4
 8002cc6:	d122      	bne.n	8002d0e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	f003 0304 	and.w	r3, r3, #4
 8002cd2:	2b04      	cmp	r3, #4
 8002cd4:	d11b      	bne.n	8002d0e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f06f 0204 	mvn.w	r2, #4
 8002cde:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2202      	movs	r2, #2
 8002ce4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	699b      	ldr	r3, [r3, #24]
 8002cec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d003      	beq.n	8002cfc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f000 f987 	bl	8003008 <HAL_TIM_IC_CaptureCallback>
 8002cfa:	e005      	b.n	8002d08 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	f000 f97a 	bl	8002ff6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f000 f989 	bl	800301a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	691b      	ldr	r3, [r3, #16]
 8002d14:	f003 0308 	and.w	r3, r3, #8
 8002d18:	2b08      	cmp	r3, #8
 8002d1a:	d122      	bne.n	8002d62 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	f003 0308 	and.w	r3, r3, #8
 8002d26:	2b08      	cmp	r3, #8
 8002d28:	d11b      	bne.n	8002d62 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f06f 0208 	mvn.w	r2, #8
 8002d32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2204      	movs	r2, #4
 8002d38:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	69db      	ldr	r3, [r3, #28]
 8002d40:	f003 0303 	and.w	r3, r3, #3
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d003      	beq.n	8002d50 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	f000 f95d 	bl	8003008 <HAL_TIM_IC_CaptureCallback>
 8002d4e:	e005      	b.n	8002d5c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f000 f950 	bl	8002ff6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f000 f95f 	bl	800301a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	691b      	ldr	r3, [r3, #16]
 8002d68:	f003 0310 	and.w	r3, r3, #16
 8002d6c:	2b10      	cmp	r3, #16
 8002d6e:	d122      	bne.n	8002db6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	68db      	ldr	r3, [r3, #12]
 8002d76:	f003 0310 	and.w	r3, r3, #16
 8002d7a:	2b10      	cmp	r3, #16
 8002d7c:	d11b      	bne.n	8002db6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f06f 0210 	mvn.w	r2, #16
 8002d86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2208      	movs	r2, #8
 8002d8c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	69db      	ldr	r3, [r3, #28]
 8002d94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d003      	beq.n	8002da4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	f000 f933 	bl	8003008 <HAL_TIM_IC_CaptureCallback>
 8002da2:	e005      	b.n	8002db0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f000 f926 	bl	8002ff6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f000 f935 	bl	800301a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2200      	movs	r2, #0
 8002db4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	691b      	ldr	r3, [r3, #16]
 8002dbc:	f003 0301 	and.w	r3, r3, #1
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d10e      	bne.n	8002de2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	f003 0301 	and.w	r3, r3, #1
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d107      	bne.n	8002de2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f06f 0201 	mvn.w	r2, #1
 8002dda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f7fe fa2d 	bl	800123c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	691b      	ldr	r3, [r3, #16]
 8002de8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dec:	2b80      	cmp	r3, #128	; 0x80
 8002dee:	d10e      	bne.n	8002e0e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dfa:	2b80      	cmp	r3, #128	; 0x80
 8002dfc:	d107      	bne.n	8002e0e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002e06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f000 fa78 	bl	80032fe <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	691b      	ldr	r3, [r3, #16]
 8002e14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e18:	2b40      	cmp	r3, #64	; 0x40
 8002e1a:	d10e      	bne.n	8002e3a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e26:	2b40      	cmp	r3, #64	; 0x40
 8002e28:	d107      	bne.n	8002e3a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	f000 f8f9 	bl	800302c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	691b      	ldr	r3, [r3, #16]
 8002e40:	f003 0320 	and.w	r3, r3, #32
 8002e44:	2b20      	cmp	r3, #32
 8002e46:	d10e      	bne.n	8002e66 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	68db      	ldr	r3, [r3, #12]
 8002e4e:	f003 0320 	and.w	r3, r3, #32
 8002e52:	2b20      	cmp	r3, #32
 8002e54:	d107      	bne.n	8002e66 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f06f 0220 	mvn.w	r2, #32
 8002e5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	f000 fa43 	bl	80032ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e66:	bf00      	nop
 8002e68:	3708      	adds	r7, #8
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}

08002e6e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e6e:	b580      	push	{r7, lr}
 8002e70:	b084      	sub	sp, #16
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	6078      	str	r0, [r7, #4]
 8002e76:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d101      	bne.n	8002e86 <HAL_TIM_ConfigClockSource+0x18>
 8002e82:	2302      	movs	r3, #2
 8002e84:	e0b3      	b.n	8002fee <HAL_TIM_ConfigClockSource+0x180>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2201      	movs	r2, #1
 8002e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2202      	movs	r2, #2
 8002e92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002ea4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002eac:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	68fa      	ldr	r2, [r7, #12]
 8002eb4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ebe:	d03e      	beq.n	8002f3e <HAL_TIM_ConfigClockSource+0xd0>
 8002ec0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ec4:	f200 8087 	bhi.w	8002fd6 <HAL_TIM_ConfigClockSource+0x168>
 8002ec8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ecc:	f000 8085 	beq.w	8002fda <HAL_TIM_ConfigClockSource+0x16c>
 8002ed0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ed4:	d87f      	bhi.n	8002fd6 <HAL_TIM_ConfigClockSource+0x168>
 8002ed6:	2b70      	cmp	r3, #112	; 0x70
 8002ed8:	d01a      	beq.n	8002f10 <HAL_TIM_ConfigClockSource+0xa2>
 8002eda:	2b70      	cmp	r3, #112	; 0x70
 8002edc:	d87b      	bhi.n	8002fd6 <HAL_TIM_ConfigClockSource+0x168>
 8002ede:	2b60      	cmp	r3, #96	; 0x60
 8002ee0:	d050      	beq.n	8002f84 <HAL_TIM_ConfigClockSource+0x116>
 8002ee2:	2b60      	cmp	r3, #96	; 0x60
 8002ee4:	d877      	bhi.n	8002fd6 <HAL_TIM_ConfigClockSource+0x168>
 8002ee6:	2b50      	cmp	r3, #80	; 0x50
 8002ee8:	d03c      	beq.n	8002f64 <HAL_TIM_ConfigClockSource+0xf6>
 8002eea:	2b50      	cmp	r3, #80	; 0x50
 8002eec:	d873      	bhi.n	8002fd6 <HAL_TIM_ConfigClockSource+0x168>
 8002eee:	2b40      	cmp	r3, #64	; 0x40
 8002ef0:	d058      	beq.n	8002fa4 <HAL_TIM_ConfigClockSource+0x136>
 8002ef2:	2b40      	cmp	r3, #64	; 0x40
 8002ef4:	d86f      	bhi.n	8002fd6 <HAL_TIM_ConfigClockSource+0x168>
 8002ef6:	2b30      	cmp	r3, #48	; 0x30
 8002ef8:	d064      	beq.n	8002fc4 <HAL_TIM_ConfigClockSource+0x156>
 8002efa:	2b30      	cmp	r3, #48	; 0x30
 8002efc:	d86b      	bhi.n	8002fd6 <HAL_TIM_ConfigClockSource+0x168>
 8002efe:	2b20      	cmp	r3, #32
 8002f00:	d060      	beq.n	8002fc4 <HAL_TIM_ConfigClockSource+0x156>
 8002f02:	2b20      	cmp	r3, #32
 8002f04:	d867      	bhi.n	8002fd6 <HAL_TIM_ConfigClockSource+0x168>
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d05c      	beq.n	8002fc4 <HAL_TIM_ConfigClockSource+0x156>
 8002f0a:	2b10      	cmp	r3, #16
 8002f0c:	d05a      	beq.n	8002fc4 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002f0e:	e062      	b.n	8002fd6 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6818      	ldr	r0, [r3, #0]
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	6899      	ldr	r1, [r3, #8]
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	685a      	ldr	r2, [r3, #4]
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	f000 f967 	bl	80031f2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002f32:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	68fa      	ldr	r2, [r7, #12]
 8002f3a:	609a      	str	r2, [r3, #8]
      break;
 8002f3c:	e04e      	b.n	8002fdc <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6818      	ldr	r0, [r3, #0]
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	6899      	ldr	r1, [r3, #8]
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	685a      	ldr	r2, [r3, #4]
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	68db      	ldr	r3, [r3, #12]
 8002f4e:	f000 f950 	bl	80031f2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	689a      	ldr	r2, [r3, #8]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f60:	609a      	str	r2, [r3, #8]
      break;
 8002f62:	e03b      	b.n	8002fdc <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6818      	ldr	r0, [r3, #0]
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	6859      	ldr	r1, [r3, #4]
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	461a      	mov	r2, r3
 8002f72:	f000 f8c7 	bl	8003104 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	2150      	movs	r1, #80	; 0x50
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f000 f91e 	bl	80031be <TIM_ITRx_SetConfig>
      break;
 8002f82:	e02b      	b.n	8002fdc <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6818      	ldr	r0, [r3, #0]
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	6859      	ldr	r1, [r3, #4]
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	461a      	mov	r2, r3
 8002f92:	f000 f8e5 	bl	8003160 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	2160      	movs	r1, #96	; 0x60
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f000 f90e 	bl	80031be <TIM_ITRx_SetConfig>
      break;
 8002fa2:	e01b      	b.n	8002fdc <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6818      	ldr	r0, [r3, #0]
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	6859      	ldr	r1, [r3, #4]
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	f000 f8a7 	bl	8003104 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	2140      	movs	r1, #64	; 0x40
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f000 f8fe 	bl	80031be <TIM_ITRx_SetConfig>
      break;
 8002fc2:	e00b      	b.n	8002fdc <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4619      	mov	r1, r3
 8002fce:	4610      	mov	r0, r2
 8002fd0:	f000 f8f5 	bl	80031be <TIM_ITRx_SetConfig>
        break;
 8002fd4:	e002      	b.n	8002fdc <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002fd6:	bf00      	nop
 8002fd8:	e000      	b.n	8002fdc <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002fda:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002fec:	2300      	movs	r3, #0
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3710      	adds	r7, #16
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}

08002ff6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ff6:	b480      	push	{r7}
 8002ff8:	b083      	sub	sp, #12
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ffe:	bf00      	nop
 8003000:	370c      	adds	r7, #12
 8003002:	46bd      	mov	sp, r7
 8003004:	bc80      	pop	{r7}
 8003006:	4770      	bx	lr

08003008 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003010:	bf00      	nop
 8003012:	370c      	adds	r7, #12
 8003014:	46bd      	mov	sp, r7
 8003016:	bc80      	pop	{r7}
 8003018:	4770      	bx	lr

0800301a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800301a:	b480      	push	{r7}
 800301c:	b083      	sub	sp, #12
 800301e:	af00      	add	r7, sp, #0
 8003020:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003022:	bf00      	nop
 8003024:	370c      	adds	r7, #12
 8003026:	46bd      	mov	sp, r7
 8003028:	bc80      	pop	{r7}
 800302a:	4770      	bx	lr

0800302c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003034:	bf00      	nop
 8003036:	370c      	adds	r7, #12
 8003038:	46bd      	mov	sp, r7
 800303a:	bc80      	pop	{r7}
 800303c:	4770      	bx	lr
	...

08003040 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003040:	b480      	push	{r7}
 8003042:	b085      	sub	sp, #20
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	4a29      	ldr	r2, [pc, #164]	; (80030f8 <TIM_Base_SetConfig+0xb8>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d00b      	beq.n	8003070 <TIM_Base_SetConfig+0x30>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800305e:	d007      	beq.n	8003070 <TIM_Base_SetConfig+0x30>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	4a26      	ldr	r2, [pc, #152]	; (80030fc <TIM_Base_SetConfig+0xbc>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d003      	beq.n	8003070 <TIM_Base_SetConfig+0x30>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	4a25      	ldr	r2, [pc, #148]	; (8003100 <TIM_Base_SetConfig+0xc0>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d108      	bne.n	8003082 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003076:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	68fa      	ldr	r2, [r7, #12]
 800307e:	4313      	orrs	r3, r2
 8003080:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4a1c      	ldr	r2, [pc, #112]	; (80030f8 <TIM_Base_SetConfig+0xb8>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d00b      	beq.n	80030a2 <TIM_Base_SetConfig+0x62>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003090:	d007      	beq.n	80030a2 <TIM_Base_SetConfig+0x62>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4a19      	ldr	r2, [pc, #100]	; (80030fc <TIM_Base_SetConfig+0xbc>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d003      	beq.n	80030a2 <TIM_Base_SetConfig+0x62>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4a18      	ldr	r2, [pc, #96]	; (8003100 <TIM_Base_SetConfig+0xc0>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d108      	bne.n	80030b4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	68db      	ldr	r3, [r3, #12]
 80030ae:	68fa      	ldr	r2, [r7, #12]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	695b      	ldr	r3, [r3, #20]
 80030be:	4313      	orrs	r3, r2
 80030c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	68fa      	ldr	r2, [r7, #12]
 80030c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	689a      	ldr	r2, [r3, #8]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	4a07      	ldr	r2, [pc, #28]	; (80030f8 <TIM_Base_SetConfig+0xb8>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d103      	bne.n	80030e8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	691a      	ldr	r2, [r3, #16]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2201      	movs	r2, #1
 80030ec:	615a      	str	r2, [r3, #20]
}
 80030ee:	bf00      	nop
 80030f0:	3714      	adds	r7, #20
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bc80      	pop	{r7}
 80030f6:	4770      	bx	lr
 80030f8:	40012c00 	.word	0x40012c00
 80030fc:	40000400 	.word	0x40000400
 8003100:	40000800 	.word	0x40000800

08003104 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003104:	b480      	push	{r7}
 8003106:	b087      	sub	sp, #28
 8003108:	af00      	add	r7, sp, #0
 800310a:	60f8      	str	r0, [r7, #12]
 800310c:	60b9      	str	r1, [r7, #8]
 800310e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6a1b      	ldr	r3, [r3, #32]
 8003114:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6a1b      	ldr	r3, [r3, #32]
 800311a:	f023 0201 	bic.w	r2, r3, #1
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	699b      	ldr	r3, [r3, #24]
 8003126:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800312e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	011b      	lsls	r3, r3, #4
 8003134:	693a      	ldr	r2, [r7, #16]
 8003136:	4313      	orrs	r3, r2
 8003138:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	f023 030a 	bic.w	r3, r3, #10
 8003140:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003142:	697a      	ldr	r2, [r7, #20]
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	4313      	orrs	r3, r2
 8003148:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	693a      	ldr	r2, [r7, #16]
 800314e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	697a      	ldr	r2, [r7, #20]
 8003154:	621a      	str	r2, [r3, #32]
}
 8003156:	bf00      	nop
 8003158:	371c      	adds	r7, #28
 800315a:	46bd      	mov	sp, r7
 800315c:	bc80      	pop	{r7}
 800315e:	4770      	bx	lr

08003160 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003160:	b480      	push	{r7}
 8003162:	b087      	sub	sp, #28
 8003164:	af00      	add	r7, sp, #0
 8003166:	60f8      	str	r0, [r7, #12]
 8003168:	60b9      	str	r1, [r7, #8]
 800316a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	6a1b      	ldr	r3, [r3, #32]
 8003170:	f023 0210 	bic.w	r2, r3, #16
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	699b      	ldr	r3, [r3, #24]
 800317c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	6a1b      	ldr	r3, [r3, #32]
 8003182:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800318a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	031b      	lsls	r3, r3, #12
 8003190:	697a      	ldr	r2, [r7, #20]
 8003192:	4313      	orrs	r3, r2
 8003194:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800319c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	011b      	lsls	r3, r3, #4
 80031a2:	693a      	ldr	r2, [r7, #16]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	697a      	ldr	r2, [r7, #20]
 80031ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	693a      	ldr	r2, [r7, #16]
 80031b2:	621a      	str	r2, [r3, #32]
}
 80031b4:	bf00      	nop
 80031b6:	371c      	adds	r7, #28
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bc80      	pop	{r7}
 80031bc:	4770      	bx	lr

080031be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80031be:	b480      	push	{r7}
 80031c0:	b085      	sub	sp, #20
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	6078      	str	r0, [r7, #4]
 80031c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80031d6:	683a      	ldr	r2, [r7, #0]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	4313      	orrs	r3, r2
 80031dc:	f043 0307 	orr.w	r3, r3, #7
 80031e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	68fa      	ldr	r2, [r7, #12]
 80031e6:	609a      	str	r2, [r3, #8]
}
 80031e8:	bf00      	nop
 80031ea:	3714      	adds	r7, #20
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bc80      	pop	{r7}
 80031f0:	4770      	bx	lr

080031f2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80031f2:	b480      	push	{r7}
 80031f4:	b087      	sub	sp, #28
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	60f8      	str	r0, [r7, #12]
 80031fa:	60b9      	str	r1, [r7, #8]
 80031fc:	607a      	str	r2, [r7, #4]
 80031fe:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800320c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	021a      	lsls	r2, r3, #8
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	431a      	orrs	r2, r3
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	4313      	orrs	r3, r2
 800321a:	697a      	ldr	r2, [r7, #20]
 800321c:	4313      	orrs	r3, r2
 800321e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	697a      	ldr	r2, [r7, #20]
 8003224:	609a      	str	r2, [r3, #8]
}
 8003226:	bf00      	nop
 8003228:	371c      	adds	r7, #28
 800322a:	46bd      	mov	sp, r7
 800322c:	bc80      	pop	{r7}
 800322e:	4770      	bx	lr

08003230 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003230:	b480      	push	{r7}
 8003232:	b085      	sub	sp, #20
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003240:	2b01      	cmp	r3, #1
 8003242:	d101      	bne.n	8003248 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003244:	2302      	movs	r3, #2
 8003246:	e046      	b.n	80032d6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2201      	movs	r2, #1
 800324c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2202      	movs	r2, #2
 8003254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800326e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	68fa      	ldr	r2, [r7, #12]
 8003276:	4313      	orrs	r3, r2
 8003278:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	68fa      	ldr	r2, [r7, #12]
 8003280:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a16      	ldr	r2, [pc, #88]	; (80032e0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d00e      	beq.n	80032aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003294:	d009      	beq.n	80032aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a12      	ldr	r2, [pc, #72]	; (80032e4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d004      	beq.n	80032aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a10      	ldr	r2, [pc, #64]	; (80032e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d10c      	bne.n	80032c4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	68ba      	ldr	r2, [r7, #8]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	68ba      	ldr	r2, [r7, #8]
 80032c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2201      	movs	r2, #1
 80032c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2200      	movs	r2, #0
 80032d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80032d4:	2300      	movs	r3, #0
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3714      	adds	r7, #20
 80032da:	46bd      	mov	sp, r7
 80032dc:	bc80      	pop	{r7}
 80032de:	4770      	bx	lr
 80032e0:	40012c00 	.word	0x40012c00
 80032e4:	40000400 	.word	0x40000400
 80032e8:	40000800 	.word	0x40000800

080032ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b083      	sub	sp, #12
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80032f4:	bf00      	nop
 80032f6:	370c      	adds	r7, #12
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bc80      	pop	{r7}
 80032fc:	4770      	bx	lr

080032fe <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80032fe:	b480      	push	{r7}
 8003300:	b083      	sub	sp, #12
 8003302:	af00      	add	r7, sp, #0
 8003304:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003306:	bf00      	nop
 8003308:	370c      	adds	r7, #12
 800330a:	46bd      	mov	sp, r7
 800330c:	bc80      	pop	{r7}
 800330e:	4770      	bx	lr

08003310 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b082      	sub	sp, #8
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d101      	bne.n	8003322 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e03f      	b.n	80033a2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003328:	b2db      	uxtb	r3, r3
 800332a:	2b00      	cmp	r3, #0
 800332c:	d106      	bne.n	800333c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f7fe fbc0 	bl	8001abc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2224      	movs	r2, #36	; 0x24
 8003340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	68da      	ldr	r2, [r3, #12]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003352:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f000 fbe5 	bl	8003b24 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	691a      	ldr	r2, [r3, #16]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003368:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	695a      	ldr	r2, [r3, #20]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003378:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	68da      	ldr	r2, [r3, #12]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003388:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2200      	movs	r2, #0
 800338e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2220      	movs	r2, #32
 8003394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2220      	movs	r2, #32
 800339c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80033a0:	2300      	movs	r3, #0
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3708      	adds	r7, #8
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}

080033aa <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80033aa:	b480      	push	{r7}
 80033ac:	b085      	sub	sp, #20
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	60f8      	str	r0, [r7, #12]
 80033b2:	60b9      	str	r1, [r7, #8]
 80033b4:	4613      	mov	r3, r2
 80033b6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	2b20      	cmp	r3, #32
 80033c2:	d130      	bne.n	8003426 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d002      	beq.n	80033d0 <HAL_UART_Transmit_IT+0x26>
 80033ca:	88fb      	ldrh	r3, [r7, #6]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d101      	bne.n	80033d4 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e029      	b.n	8003428 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d101      	bne.n	80033e2 <HAL_UART_Transmit_IT+0x38>
 80033de:	2302      	movs	r3, #2
 80033e0:	e022      	b.n	8003428 <HAL_UART_Transmit_IT+0x7e>
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2201      	movs	r2, #1
 80033e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	68ba      	ldr	r2, [r7, #8]
 80033ee:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	88fa      	ldrh	r2, [r7, #6]
 80033f4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	88fa      	ldrh	r2, [r7, #6]
 80033fa:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2200      	movs	r2, #0
 8003400:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2221      	movs	r2, #33	; 0x21
 8003406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2200      	movs	r2, #0
 800340e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	68da      	ldr	r2, [r3, #12]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003420:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003422:	2300      	movs	r3, #0
 8003424:	e000      	b.n	8003428 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8003426:	2302      	movs	r3, #2
  }
}
 8003428:	4618      	mov	r0, r3
 800342a:	3714      	adds	r7, #20
 800342c:	46bd      	mov	sp, r7
 800342e:	bc80      	pop	{r7}
 8003430:	4770      	bx	lr

08003432 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003432:	b580      	push	{r7, lr}
 8003434:	b084      	sub	sp, #16
 8003436:	af00      	add	r7, sp, #0
 8003438:	60f8      	str	r0, [r7, #12]
 800343a:	60b9      	str	r1, [r7, #8]
 800343c:	4613      	mov	r3, r2
 800343e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003446:	b2db      	uxtb	r3, r3
 8003448:	2b20      	cmp	r3, #32
 800344a:	d11d      	bne.n	8003488 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d002      	beq.n	8003458 <HAL_UART_Receive_IT+0x26>
 8003452:	88fb      	ldrh	r3, [r7, #6]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d101      	bne.n	800345c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e016      	b.n	800348a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003462:	2b01      	cmp	r3, #1
 8003464:	d101      	bne.n	800346a <HAL_UART_Receive_IT+0x38>
 8003466:	2302      	movs	r3, #2
 8003468:	e00f      	b.n	800348a <HAL_UART_Receive_IT+0x58>
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2201      	movs	r2, #1
 800346e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2200      	movs	r2, #0
 8003476:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003478:	88fb      	ldrh	r3, [r7, #6]
 800347a:	461a      	mov	r2, r3
 800347c:	68b9      	ldr	r1, [r7, #8]
 800347e:	68f8      	ldr	r0, [r7, #12]
 8003480:	f000 f9c6 	bl	8003810 <UART_Start_Receive_IT>
 8003484:	4603      	mov	r3, r0
 8003486:	e000      	b.n	800348a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003488:	2302      	movs	r3, #2
  }
}
 800348a:	4618      	mov	r0, r3
 800348c:	3710      	adds	r7, #16
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
	...

08003494 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b08a      	sub	sp, #40	; 0x28
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	695b      	ldr	r3, [r3, #20]
 80034b2:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80034b4:	2300      	movs	r3, #0
 80034b6:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80034b8:	2300      	movs	r3, #0
 80034ba:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80034bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034be:	f003 030f 	and.w	r3, r3, #15
 80034c2:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80034c4:	69bb      	ldr	r3, [r7, #24]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d10d      	bne.n	80034e6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80034ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034cc:	f003 0320 	and.w	r3, r3, #32
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d008      	beq.n	80034e6 <HAL_UART_IRQHandler+0x52>
 80034d4:	6a3b      	ldr	r3, [r7, #32]
 80034d6:	f003 0320 	and.w	r3, r3, #32
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d003      	beq.n	80034e6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f000 fa76 	bl	80039d0 <UART_Receive_IT>
      return;
 80034e4:	e17b      	b.n	80037de <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80034e6:	69bb      	ldr	r3, [r7, #24]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	f000 80b1 	beq.w	8003650 <HAL_UART_IRQHandler+0x1bc>
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	f003 0301 	and.w	r3, r3, #1
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d105      	bne.n	8003504 <HAL_UART_IRQHandler+0x70>
 80034f8:	6a3b      	ldr	r3, [r7, #32]
 80034fa:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80034fe:	2b00      	cmp	r3, #0
 8003500:	f000 80a6 	beq.w	8003650 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003506:	f003 0301 	and.w	r3, r3, #1
 800350a:	2b00      	cmp	r3, #0
 800350c:	d00a      	beq.n	8003524 <HAL_UART_IRQHandler+0x90>
 800350e:	6a3b      	ldr	r3, [r7, #32]
 8003510:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003514:	2b00      	cmp	r3, #0
 8003516:	d005      	beq.n	8003524 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351c:	f043 0201 	orr.w	r2, r3, #1
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003526:	f003 0304 	and.w	r3, r3, #4
 800352a:	2b00      	cmp	r3, #0
 800352c:	d00a      	beq.n	8003544 <HAL_UART_IRQHandler+0xb0>
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	f003 0301 	and.w	r3, r3, #1
 8003534:	2b00      	cmp	r3, #0
 8003536:	d005      	beq.n	8003544 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353c:	f043 0202 	orr.w	r2, r3, #2
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003546:	f003 0302 	and.w	r3, r3, #2
 800354a:	2b00      	cmp	r3, #0
 800354c:	d00a      	beq.n	8003564 <HAL_UART_IRQHandler+0xd0>
 800354e:	69fb      	ldr	r3, [r7, #28]
 8003550:	f003 0301 	and.w	r3, r3, #1
 8003554:	2b00      	cmp	r3, #0
 8003556:	d005      	beq.n	8003564 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355c:	f043 0204 	orr.w	r2, r3, #4
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003566:	f003 0308 	and.w	r3, r3, #8
 800356a:	2b00      	cmp	r3, #0
 800356c:	d00f      	beq.n	800358e <HAL_UART_IRQHandler+0xfa>
 800356e:	6a3b      	ldr	r3, [r7, #32]
 8003570:	f003 0320 	and.w	r3, r3, #32
 8003574:	2b00      	cmp	r3, #0
 8003576:	d104      	bne.n	8003582 <HAL_UART_IRQHandler+0xee>
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	f003 0301 	and.w	r3, r3, #1
 800357e:	2b00      	cmp	r3, #0
 8003580:	d005      	beq.n	800358e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003586:	f043 0208 	orr.w	r2, r3, #8
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003592:	2b00      	cmp	r3, #0
 8003594:	f000 811e 	beq.w	80037d4 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359a:	f003 0320 	and.w	r3, r3, #32
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d007      	beq.n	80035b2 <HAL_UART_IRQHandler+0x11e>
 80035a2:	6a3b      	ldr	r3, [r7, #32]
 80035a4:	f003 0320 	and.w	r3, r3, #32
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d002      	beq.n	80035b2 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f000 fa0f 	bl	80039d0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	695b      	ldr	r3, [r3, #20]
 80035b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035bc:	2b00      	cmp	r3, #0
 80035be:	bf14      	ite	ne
 80035c0:	2301      	movne	r3, #1
 80035c2:	2300      	moveq	r3, #0
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035cc:	f003 0308 	and.w	r3, r3, #8
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d102      	bne.n	80035da <HAL_UART_IRQHandler+0x146>
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d031      	beq.n	800363e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f000 f951 	bl	8003882 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	695b      	ldr	r3, [r3, #20]
 80035e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d023      	beq.n	8003636 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	695a      	ldr	r2, [r3, #20]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035fc:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003602:	2b00      	cmp	r3, #0
 8003604:	d013      	beq.n	800362e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800360a:	4a76      	ldr	r2, [pc, #472]	; (80037e4 <HAL_UART_IRQHandler+0x350>)
 800360c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003612:	4618      	mov	r0, r3
 8003614:	f7fe fca8 	bl	8001f68 <HAL_DMA_Abort_IT>
 8003618:	4603      	mov	r3, r0
 800361a:	2b00      	cmp	r3, #0
 800361c:	d016      	beq.n	800364c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003622:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003628:	4610      	mov	r0, r2
 800362a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800362c:	e00e      	b.n	800364c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f000 f8da 	bl	80037e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003634:	e00a      	b.n	800364c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f000 f8d6 	bl	80037e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800363c:	e006      	b.n	800364c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f000 f8d2 	bl	80037e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2200      	movs	r2, #0
 8003648:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800364a:	e0c3      	b.n	80037d4 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800364c:	bf00      	nop
    return;
 800364e:	e0c1      	b.n	80037d4 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003654:	2b01      	cmp	r3, #1
 8003656:	f040 80a1 	bne.w	800379c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800365a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365c:	f003 0310 	and.w	r3, r3, #16
 8003660:	2b00      	cmp	r3, #0
 8003662:	f000 809b 	beq.w	800379c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003666:	6a3b      	ldr	r3, [r7, #32]
 8003668:	f003 0310 	and.w	r3, r3, #16
 800366c:	2b00      	cmp	r3, #0
 800366e:	f000 8095 	beq.w	800379c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003672:	2300      	movs	r3, #0
 8003674:	60fb      	str	r3, [r7, #12]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	60fb      	str	r3, [r7, #12]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	60fb      	str	r3, [r7, #12]
 8003686:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	695b      	ldr	r3, [r3, #20]
 800368e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003692:	2b00      	cmp	r3, #0
 8003694:	d04e      	beq.n	8003734 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80036a0:	8a3b      	ldrh	r3, [r7, #16]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	f000 8098 	beq.w	80037d8 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80036ac:	8a3a      	ldrh	r2, [r7, #16]
 80036ae:	429a      	cmp	r2, r3
 80036b0:	f080 8092 	bcs.w	80037d8 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	8a3a      	ldrh	r2, [r7, #16]
 80036b8:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036be:	699b      	ldr	r3, [r3, #24]
 80036c0:	2b20      	cmp	r3, #32
 80036c2:	d02b      	beq.n	800371c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	68da      	ldr	r2, [r3, #12]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036d2:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	695a      	ldr	r2, [r3, #20]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f022 0201 	bic.w	r2, r2, #1
 80036e2:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	695a      	ldr	r2, [r3, #20]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036f2:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2220      	movs	r2, #32
 80036f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	68da      	ldr	r2, [r3, #12]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f022 0210 	bic.w	r2, r2, #16
 8003710:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003716:	4618      	mov	r0, r3
 8003718:	f7fe fbeb 	bl	8001ef2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003724:	b29b      	uxth	r3, r3
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	b29b      	uxth	r3, r3
 800372a:	4619      	mov	r1, r3
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f000 f864 	bl	80037fa <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003732:	e051      	b.n	80037d8 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800373c:	b29b      	uxth	r3, r3
 800373e:	1ad3      	subs	r3, r2, r3
 8003740:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003746:	b29b      	uxth	r3, r3
 8003748:	2b00      	cmp	r3, #0
 800374a:	d047      	beq.n	80037dc <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 800374c:	8a7b      	ldrh	r3, [r7, #18]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d044      	beq.n	80037dc <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	68da      	ldr	r2, [r3, #12]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003760:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	695a      	ldr	r2, [r3, #20]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f022 0201 	bic.w	r2, r2, #1
 8003770:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2220      	movs	r2, #32
 8003776:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2200      	movs	r2, #0
 800377e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	68da      	ldr	r2, [r3, #12]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f022 0210 	bic.w	r2, r2, #16
 800378e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003790:	8a7b      	ldrh	r3, [r7, #18]
 8003792:	4619      	mov	r1, r3
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f000 f830 	bl	80037fa <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800379a:	e01f      	b.n	80037dc <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800379c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d008      	beq.n	80037b8 <HAL_UART_IRQHandler+0x324>
 80037a6:	6a3b      	ldr	r3, [r7, #32]
 80037a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d003      	beq.n	80037b8 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f000 f8a6 	bl	8003902 <UART_Transmit_IT>
    return;
 80037b6:	e012      	b.n	80037de <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80037b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d00d      	beq.n	80037de <HAL_UART_IRQHandler+0x34a>
 80037c2:	6a3b      	ldr	r3, [r7, #32]
 80037c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d008      	beq.n	80037de <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f000 f8e7 	bl	80039a0 <UART_EndTransmit_IT>
    return;
 80037d2:	e004      	b.n	80037de <HAL_UART_IRQHandler+0x34a>
    return;
 80037d4:	bf00      	nop
 80037d6:	e002      	b.n	80037de <HAL_UART_IRQHandler+0x34a>
      return;
 80037d8:	bf00      	nop
 80037da:	e000      	b.n	80037de <HAL_UART_IRQHandler+0x34a>
      return;
 80037dc:	bf00      	nop
  }
}
 80037de:	3728      	adds	r7, #40	; 0x28
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	080038db 	.word	0x080038db

080037e8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b083      	sub	sp, #12
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80037f0:	bf00      	nop
 80037f2:	370c      	adds	r7, #12
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bc80      	pop	{r7}
 80037f8:	4770      	bx	lr

080037fa <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80037fa:	b480      	push	{r7}
 80037fc:	b083      	sub	sp, #12
 80037fe:	af00      	add	r7, sp, #0
 8003800:	6078      	str	r0, [r7, #4]
 8003802:	460b      	mov	r3, r1
 8003804:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003806:	bf00      	nop
 8003808:	370c      	adds	r7, #12
 800380a:	46bd      	mov	sp, r7
 800380c:	bc80      	pop	{r7}
 800380e:	4770      	bx	lr

08003810 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003810:	b480      	push	{r7}
 8003812:	b085      	sub	sp, #20
 8003814:	af00      	add	r7, sp, #0
 8003816:	60f8      	str	r0, [r7, #12]
 8003818:	60b9      	str	r1, [r7, #8]
 800381a:	4613      	mov	r3, r2
 800381c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	68ba      	ldr	r2, [r7, #8]
 8003822:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	88fa      	ldrh	r2, [r7, #6]
 8003828:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	88fa      	ldrh	r2, [r7, #6]
 800382e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2200      	movs	r2, #0
 8003834:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2222      	movs	r2, #34	; 0x22
 800383a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2200      	movs	r2, #0
 8003842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	68da      	ldr	r2, [r3, #12]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003854:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	695a      	ldr	r2, [r3, #20]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f042 0201 	orr.w	r2, r2, #1
 8003864:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	68da      	ldr	r2, [r3, #12]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f042 0220 	orr.w	r2, r2, #32
 8003874:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003876:	2300      	movs	r3, #0
}
 8003878:	4618      	mov	r0, r3
 800387a:	3714      	adds	r7, #20
 800387c:	46bd      	mov	sp, r7
 800387e:	bc80      	pop	{r7}
 8003880:	4770      	bx	lr

08003882 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003882:	b480      	push	{r7}
 8003884:	b083      	sub	sp, #12
 8003886:	af00      	add	r7, sp, #0
 8003888:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	68da      	ldr	r2, [r3, #12]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003898:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	695a      	ldr	r2, [r3, #20]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f022 0201 	bic.w	r2, r2, #1
 80038a8:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d107      	bne.n	80038c2 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	68da      	ldr	r2, [r3, #12]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f022 0210 	bic.w	r2, r2, #16
 80038c0:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2220      	movs	r2, #32
 80038c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	631a      	str	r2, [r3, #48]	; 0x30
}
 80038d0:	bf00      	nop
 80038d2:	370c      	adds	r7, #12
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bc80      	pop	{r7}
 80038d8:	4770      	bx	lr

080038da <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80038da:	b580      	push	{r7, lr}
 80038dc:	b084      	sub	sp, #16
 80038de:	af00      	add	r7, sp, #0
 80038e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2200      	movs	r2, #0
 80038ec:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2200      	movs	r2, #0
 80038f2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80038f4:	68f8      	ldr	r0, [r7, #12]
 80038f6:	f7ff ff77 	bl	80037e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80038fa:	bf00      	nop
 80038fc:	3710      	adds	r7, #16
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}

08003902 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003902:	b480      	push	{r7}
 8003904:	b085      	sub	sp, #20
 8003906:	af00      	add	r7, sp, #0
 8003908:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003910:	b2db      	uxtb	r3, r3
 8003912:	2b21      	cmp	r3, #33	; 0x21
 8003914:	d13e      	bne.n	8003994 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800391e:	d114      	bne.n	800394a <UART_Transmit_IT+0x48>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	691b      	ldr	r3, [r3, #16]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d110      	bne.n	800394a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6a1b      	ldr	r3, [r3, #32]
 800392c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	881b      	ldrh	r3, [r3, #0]
 8003932:	461a      	mov	r2, r3
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800393c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6a1b      	ldr	r3, [r3, #32]
 8003942:	1c9a      	adds	r2, r3, #2
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	621a      	str	r2, [r3, #32]
 8003948:	e008      	b.n	800395c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6a1b      	ldr	r3, [r3, #32]
 800394e:	1c59      	adds	r1, r3, #1
 8003950:	687a      	ldr	r2, [r7, #4]
 8003952:	6211      	str	r1, [r2, #32]
 8003954:	781a      	ldrb	r2, [r3, #0]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003960:	b29b      	uxth	r3, r3
 8003962:	3b01      	subs	r3, #1
 8003964:	b29b      	uxth	r3, r3
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	4619      	mov	r1, r3
 800396a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800396c:	2b00      	cmp	r3, #0
 800396e:	d10f      	bne.n	8003990 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	68da      	ldr	r2, [r3, #12]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800397e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	68da      	ldr	r2, [r3, #12]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800398e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003990:	2300      	movs	r3, #0
 8003992:	e000      	b.n	8003996 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003994:	2302      	movs	r3, #2
  }
}
 8003996:	4618      	mov	r0, r3
 8003998:	3714      	adds	r7, #20
 800399a:	46bd      	mov	sp, r7
 800399c:	bc80      	pop	{r7}
 800399e:	4770      	bx	lr

080039a0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b082      	sub	sp, #8
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	68da      	ldr	r2, [r3, #12]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039b6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2220      	movs	r2, #32
 80039bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f7fd fc2b 	bl	800121c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80039c6:	2300      	movs	r3, #0
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	3708      	adds	r7, #8
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}

080039d0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b086      	sub	sp, #24
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	2b22      	cmp	r3, #34	; 0x22
 80039e2:	f040 8099 	bne.w	8003b18 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039ee:	d117      	bne.n	8003a20 <UART_Receive_IT+0x50>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	691b      	ldr	r3, [r3, #16]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d113      	bne.n	8003a20 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80039f8:	2300      	movs	r3, #0
 80039fa:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a00:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a0e:	b29a      	uxth	r2, r3
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a18:	1c9a      	adds	r2, r3, #2
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	629a      	str	r2, [r3, #40]	; 0x28
 8003a1e:	e026      	b.n	8003a6e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a24:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003a26:	2300      	movs	r3, #0
 8003a28:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a32:	d007      	beq.n	8003a44 <UART_Receive_IT+0x74>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d10a      	bne.n	8003a52 <UART_Receive_IT+0x82>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	691b      	ldr	r3, [r3, #16]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d106      	bne.n	8003a52 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	b2da      	uxtb	r2, r3
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	701a      	strb	r2, [r3, #0]
 8003a50:	e008      	b.n	8003a64 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a5e:	b2da      	uxtb	r2, r3
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a68:	1c5a      	adds	r2, r3, #1
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	3b01      	subs	r3, #1
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	687a      	ldr	r2, [r7, #4]
 8003a7a:	4619      	mov	r1, r3
 8003a7c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d148      	bne.n	8003b14 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	68da      	ldr	r2, [r3, #12]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f022 0220 	bic.w	r2, r2, #32
 8003a90:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	68da      	ldr	r2, [r3, #12]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003aa0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	695a      	ldr	r2, [r3, #20]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f022 0201 	bic.w	r2, r2, #1
 8003ab0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2220      	movs	r2, #32
 8003ab6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d123      	bne.n	8003b0a <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	68da      	ldr	r2, [r3, #12]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f022 0210 	bic.w	r2, r2, #16
 8003ad6:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 0310 	and.w	r3, r3, #16
 8003ae2:	2b10      	cmp	r3, #16
 8003ae4:	d10a      	bne.n	8003afc <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	60fb      	str	r3, [r7, #12]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	60fb      	str	r3, [r7, #12]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	60fb      	str	r3, [r7, #12]
 8003afa:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003b00:	4619      	mov	r1, r3
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f7ff fe79 	bl	80037fa <HAL_UARTEx_RxEventCallback>
 8003b08:	e002      	b.n	8003b10 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f7fd fb52 	bl	80011b4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003b10:	2300      	movs	r3, #0
 8003b12:	e002      	b.n	8003b1a <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003b14:	2300      	movs	r3, #0
 8003b16:	e000      	b.n	8003b1a <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003b18:	2302      	movs	r3, #2
  }
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3718      	adds	r7, #24
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
	...

08003b24 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b084      	sub	sp, #16
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	691b      	ldr	r3, [r3, #16]
 8003b32:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	68da      	ldr	r2, [r3, #12]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	430a      	orrs	r2, r1
 8003b40:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	689a      	ldr	r2, [r3, #8]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	691b      	ldr	r3, [r3, #16]
 8003b4a:	431a      	orrs	r2, r3
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	695b      	ldr	r3, [r3, #20]
 8003b50:	4313      	orrs	r3, r2
 8003b52:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	68db      	ldr	r3, [r3, #12]
 8003b5a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003b5e:	f023 030c 	bic.w	r3, r3, #12
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	6812      	ldr	r2, [r2, #0]
 8003b66:	68b9      	ldr	r1, [r7, #8]
 8003b68:	430b      	orrs	r3, r1
 8003b6a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	695b      	ldr	r3, [r3, #20]
 8003b72:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	699a      	ldr	r2, [r3, #24]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	430a      	orrs	r2, r1
 8003b80:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a2c      	ldr	r2, [pc, #176]	; (8003c38 <UART_SetConfig+0x114>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d103      	bne.n	8003b94 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003b8c:	f7fe ffe6 	bl	8002b5c <HAL_RCC_GetPCLK2Freq>
 8003b90:	60f8      	str	r0, [r7, #12]
 8003b92:	e002      	b.n	8003b9a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003b94:	f7fe ffce 	bl	8002b34 <HAL_RCC_GetPCLK1Freq>
 8003b98:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b9a:	68fa      	ldr	r2, [r7, #12]
 8003b9c:	4613      	mov	r3, r2
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	4413      	add	r3, r2
 8003ba2:	009a      	lsls	r2, r3, #2
 8003ba4:	441a      	add	r2, r3
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bb0:	4a22      	ldr	r2, [pc, #136]	; (8003c3c <UART_SetConfig+0x118>)
 8003bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8003bb6:	095b      	lsrs	r3, r3, #5
 8003bb8:	0119      	lsls	r1, r3, #4
 8003bba:	68fa      	ldr	r2, [r7, #12]
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	4413      	add	r3, r2
 8003bc2:	009a      	lsls	r2, r3, #2
 8003bc4:	441a      	add	r2, r3
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003bd0:	4b1a      	ldr	r3, [pc, #104]	; (8003c3c <UART_SetConfig+0x118>)
 8003bd2:	fba3 0302 	umull	r0, r3, r3, r2
 8003bd6:	095b      	lsrs	r3, r3, #5
 8003bd8:	2064      	movs	r0, #100	; 0x64
 8003bda:	fb00 f303 	mul.w	r3, r0, r3
 8003bde:	1ad3      	subs	r3, r2, r3
 8003be0:	011b      	lsls	r3, r3, #4
 8003be2:	3332      	adds	r3, #50	; 0x32
 8003be4:	4a15      	ldr	r2, [pc, #84]	; (8003c3c <UART_SetConfig+0x118>)
 8003be6:	fba2 2303 	umull	r2, r3, r2, r3
 8003bea:	095b      	lsrs	r3, r3, #5
 8003bec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bf0:	4419      	add	r1, r3
 8003bf2:	68fa      	ldr	r2, [r7, #12]
 8003bf4:	4613      	mov	r3, r2
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	4413      	add	r3, r2
 8003bfa:	009a      	lsls	r2, r3, #2
 8003bfc:	441a      	add	r2, r3
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c08:	4b0c      	ldr	r3, [pc, #48]	; (8003c3c <UART_SetConfig+0x118>)
 8003c0a:	fba3 0302 	umull	r0, r3, r3, r2
 8003c0e:	095b      	lsrs	r3, r3, #5
 8003c10:	2064      	movs	r0, #100	; 0x64
 8003c12:	fb00 f303 	mul.w	r3, r0, r3
 8003c16:	1ad3      	subs	r3, r2, r3
 8003c18:	011b      	lsls	r3, r3, #4
 8003c1a:	3332      	adds	r3, #50	; 0x32
 8003c1c:	4a07      	ldr	r2, [pc, #28]	; (8003c3c <UART_SetConfig+0x118>)
 8003c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c22:	095b      	lsrs	r3, r3, #5
 8003c24:	f003 020f 	and.w	r2, r3, #15
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	440a      	add	r2, r1
 8003c2e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003c30:	bf00      	nop
 8003c32:	3710      	adds	r7, #16
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}
 8003c38:	40013800 	.word	0x40013800
 8003c3c:	51eb851f 	.word	0x51eb851f

08003c40 <atof>:
 8003c40:	2100      	movs	r1, #0
 8003c42:	f001 bad1 	b.w	80051e8 <strtod>

08003c46 <atoi>:
 8003c46:	220a      	movs	r2, #10
 8003c48:	2100      	movs	r1, #0
 8003c4a:	f001 bbb1 	b.w	80053b0 <strtol>
	...

08003c50 <__errno>:
 8003c50:	4b01      	ldr	r3, [pc, #4]	; (8003c58 <__errno+0x8>)
 8003c52:	6818      	ldr	r0, [r3, #0]
 8003c54:	4770      	bx	lr
 8003c56:	bf00      	nop
 8003c58:	200000a4 	.word	0x200000a4

08003c5c <__libc_init_array>:
 8003c5c:	b570      	push	{r4, r5, r6, lr}
 8003c5e:	2600      	movs	r6, #0
 8003c60:	4d0c      	ldr	r5, [pc, #48]	; (8003c94 <__libc_init_array+0x38>)
 8003c62:	4c0d      	ldr	r4, [pc, #52]	; (8003c98 <__libc_init_array+0x3c>)
 8003c64:	1b64      	subs	r4, r4, r5
 8003c66:	10a4      	asrs	r4, r4, #2
 8003c68:	42a6      	cmp	r6, r4
 8003c6a:	d109      	bne.n	8003c80 <__libc_init_array+0x24>
 8003c6c:	f004 faba 	bl	80081e4 <_init>
 8003c70:	2600      	movs	r6, #0
 8003c72:	4d0a      	ldr	r5, [pc, #40]	; (8003c9c <__libc_init_array+0x40>)
 8003c74:	4c0a      	ldr	r4, [pc, #40]	; (8003ca0 <__libc_init_array+0x44>)
 8003c76:	1b64      	subs	r4, r4, r5
 8003c78:	10a4      	asrs	r4, r4, #2
 8003c7a:	42a6      	cmp	r6, r4
 8003c7c:	d105      	bne.n	8003c8a <__libc_init_array+0x2e>
 8003c7e:	bd70      	pop	{r4, r5, r6, pc}
 8003c80:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c84:	4798      	blx	r3
 8003c86:	3601      	adds	r6, #1
 8003c88:	e7ee      	b.n	8003c68 <__libc_init_array+0xc>
 8003c8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c8e:	4798      	blx	r3
 8003c90:	3601      	adds	r6, #1
 8003c92:	e7f2      	b.n	8003c7a <__libc_init_array+0x1e>
 8003c94:	08008960 	.word	0x08008960
 8003c98:	08008960 	.word	0x08008960
 8003c9c:	08008960 	.word	0x08008960
 8003ca0:	08008964 	.word	0x08008964

08003ca4 <memset>:
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	4402      	add	r2, r0
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d100      	bne.n	8003cae <memset+0xa>
 8003cac:	4770      	bx	lr
 8003cae:	f803 1b01 	strb.w	r1, [r3], #1
 8003cb2:	e7f9      	b.n	8003ca8 <memset+0x4>

08003cb4 <__cvt>:
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003cba:	461f      	mov	r7, r3
 8003cbc:	bfbb      	ittet	lt
 8003cbe:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8003cc2:	461f      	movlt	r7, r3
 8003cc4:	2300      	movge	r3, #0
 8003cc6:	232d      	movlt	r3, #45	; 0x2d
 8003cc8:	b088      	sub	sp, #32
 8003cca:	4614      	mov	r4, r2
 8003ccc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003cce:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003cd0:	7013      	strb	r3, [r2, #0]
 8003cd2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003cd4:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8003cd8:	f023 0820 	bic.w	r8, r3, #32
 8003cdc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003ce0:	d005      	beq.n	8003cee <__cvt+0x3a>
 8003ce2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003ce6:	d100      	bne.n	8003cea <__cvt+0x36>
 8003ce8:	3501      	adds	r5, #1
 8003cea:	2302      	movs	r3, #2
 8003cec:	e000      	b.n	8003cf0 <__cvt+0x3c>
 8003cee:	2303      	movs	r3, #3
 8003cf0:	aa07      	add	r2, sp, #28
 8003cf2:	9204      	str	r2, [sp, #16]
 8003cf4:	aa06      	add	r2, sp, #24
 8003cf6:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003cfa:	e9cd 3500 	strd	r3, r5, [sp]
 8003cfe:	4622      	mov	r2, r4
 8003d00:	463b      	mov	r3, r7
 8003d02:	f001 fc09 	bl	8005518 <_dtoa_r>
 8003d06:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003d0a:	4606      	mov	r6, r0
 8003d0c:	d102      	bne.n	8003d14 <__cvt+0x60>
 8003d0e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003d10:	07db      	lsls	r3, r3, #31
 8003d12:	d522      	bpl.n	8003d5a <__cvt+0xa6>
 8003d14:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003d18:	eb06 0905 	add.w	r9, r6, r5
 8003d1c:	d110      	bne.n	8003d40 <__cvt+0x8c>
 8003d1e:	7833      	ldrb	r3, [r6, #0]
 8003d20:	2b30      	cmp	r3, #48	; 0x30
 8003d22:	d10a      	bne.n	8003d3a <__cvt+0x86>
 8003d24:	2200      	movs	r2, #0
 8003d26:	2300      	movs	r3, #0
 8003d28:	4620      	mov	r0, r4
 8003d2a:	4639      	mov	r1, r7
 8003d2c:	f7fc fe46 	bl	80009bc <__aeabi_dcmpeq>
 8003d30:	b918      	cbnz	r0, 8003d3a <__cvt+0x86>
 8003d32:	f1c5 0501 	rsb	r5, r5, #1
 8003d36:	f8ca 5000 	str.w	r5, [sl]
 8003d3a:	f8da 3000 	ldr.w	r3, [sl]
 8003d3e:	4499      	add	r9, r3
 8003d40:	2200      	movs	r2, #0
 8003d42:	2300      	movs	r3, #0
 8003d44:	4620      	mov	r0, r4
 8003d46:	4639      	mov	r1, r7
 8003d48:	f7fc fe38 	bl	80009bc <__aeabi_dcmpeq>
 8003d4c:	b108      	cbz	r0, 8003d52 <__cvt+0x9e>
 8003d4e:	f8cd 901c 	str.w	r9, [sp, #28]
 8003d52:	2230      	movs	r2, #48	; 0x30
 8003d54:	9b07      	ldr	r3, [sp, #28]
 8003d56:	454b      	cmp	r3, r9
 8003d58:	d307      	bcc.n	8003d6a <__cvt+0xb6>
 8003d5a:	4630      	mov	r0, r6
 8003d5c:	9b07      	ldr	r3, [sp, #28]
 8003d5e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003d60:	1b9b      	subs	r3, r3, r6
 8003d62:	6013      	str	r3, [r2, #0]
 8003d64:	b008      	add	sp, #32
 8003d66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d6a:	1c59      	adds	r1, r3, #1
 8003d6c:	9107      	str	r1, [sp, #28]
 8003d6e:	701a      	strb	r2, [r3, #0]
 8003d70:	e7f0      	b.n	8003d54 <__cvt+0xa0>

08003d72 <__exponent>:
 8003d72:	4603      	mov	r3, r0
 8003d74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003d76:	2900      	cmp	r1, #0
 8003d78:	f803 2b02 	strb.w	r2, [r3], #2
 8003d7c:	bfb6      	itet	lt
 8003d7e:	222d      	movlt	r2, #45	; 0x2d
 8003d80:	222b      	movge	r2, #43	; 0x2b
 8003d82:	4249      	neglt	r1, r1
 8003d84:	2909      	cmp	r1, #9
 8003d86:	7042      	strb	r2, [r0, #1]
 8003d88:	dd2b      	ble.n	8003de2 <__exponent+0x70>
 8003d8a:	f10d 0407 	add.w	r4, sp, #7
 8003d8e:	46a4      	mov	ip, r4
 8003d90:	270a      	movs	r7, #10
 8003d92:	fb91 f6f7 	sdiv	r6, r1, r7
 8003d96:	460a      	mov	r2, r1
 8003d98:	46a6      	mov	lr, r4
 8003d9a:	fb07 1516 	mls	r5, r7, r6, r1
 8003d9e:	2a63      	cmp	r2, #99	; 0x63
 8003da0:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8003da4:	4631      	mov	r1, r6
 8003da6:	f104 34ff 	add.w	r4, r4, #4294967295
 8003daa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003dae:	dcf0      	bgt.n	8003d92 <__exponent+0x20>
 8003db0:	3130      	adds	r1, #48	; 0x30
 8003db2:	f1ae 0502 	sub.w	r5, lr, #2
 8003db6:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003dba:	4629      	mov	r1, r5
 8003dbc:	1c44      	adds	r4, r0, #1
 8003dbe:	4561      	cmp	r1, ip
 8003dc0:	d30a      	bcc.n	8003dd8 <__exponent+0x66>
 8003dc2:	f10d 0209 	add.w	r2, sp, #9
 8003dc6:	eba2 020e 	sub.w	r2, r2, lr
 8003dca:	4565      	cmp	r5, ip
 8003dcc:	bf88      	it	hi
 8003dce:	2200      	movhi	r2, #0
 8003dd0:	4413      	add	r3, r2
 8003dd2:	1a18      	subs	r0, r3, r0
 8003dd4:	b003      	add	sp, #12
 8003dd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003dd8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003ddc:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003de0:	e7ed      	b.n	8003dbe <__exponent+0x4c>
 8003de2:	2330      	movs	r3, #48	; 0x30
 8003de4:	3130      	adds	r1, #48	; 0x30
 8003de6:	7083      	strb	r3, [r0, #2]
 8003de8:	70c1      	strb	r1, [r0, #3]
 8003dea:	1d03      	adds	r3, r0, #4
 8003dec:	e7f1      	b.n	8003dd2 <__exponent+0x60>
	...

08003df0 <_printf_float>:
 8003df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003df4:	b091      	sub	sp, #68	; 0x44
 8003df6:	460c      	mov	r4, r1
 8003df8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8003dfc:	4616      	mov	r6, r2
 8003dfe:	461f      	mov	r7, r3
 8003e00:	4605      	mov	r5, r0
 8003e02:	f002 fcef 	bl	80067e4 <_localeconv_r>
 8003e06:	6803      	ldr	r3, [r0, #0]
 8003e08:	4618      	mov	r0, r3
 8003e0a:	9309      	str	r3, [sp, #36]	; 0x24
 8003e0c:	f7fc f9aa 	bl	8000164 <strlen>
 8003e10:	2300      	movs	r3, #0
 8003e12:	930e      	str	r3, [sp, #56]	; 0x38
 8003e14:	f8d8 3000 	ldr.w	r3, [r8]
 8003e18:	900a      	str	r0, [sp, #40]	; 0x28
 8003e1a:	3307      	adds	r3, #7
 8003e1c:	f023 0307 	bic.w	r3, r3, #7
 8003e20:	f103 0208 	add.w	r2, r3, #8
 8003e24:	f894 9018 	ldrb.w	r9, [r4, #24]
 8003e28:	f8d4 b000 	ldr.w	fp, [r4]
 8003e2c:	f8c8 2000 	str.w	r2, [r8]
 8003e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e34:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003e38:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8003e3c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8003e40:	930b      	str	r3, [sp, #44]	; 0x2c
 8003e42:	f04f 32ff 	mov.w	r2, #4294967295
 8003e46:	4640      	mov	r0, r8
 8003e48:	4b9c      	ldr	r3, [pc, #624]	; (80040bc <_printf_float+0x2cc>)
 8003e4a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003e4c:	f7fc fde8 	bl	8000a20 <__aeabi_dcmpun>
 8003e50:	bb70      	cbnz	r0, 8003eb0 <_printf_float+0xc0>
 8003e52:	f04f 32ff 	mov.w	r2, #4294967295
 8003e56:	4640      	mov	r0, r8
 8003e58:	4b98      	ldr	r3, [pc, #608]	; (80040bc <_printf_float+0x2cc>)
 8003e5a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003e5c:	f7fc fdc2 	bl	80009e4 <__aeabi_dcmple>
 8003e60:	bb30      	cbnz	r0, 8003eb0 <_printf_float+0xc0>
 8003e62:	2200      	movs	r2, #0
 8003e64:	2300      	movs	r3, #0
 8003e66:	4640      	mov	r0, r8
 8003e68:	4651      	mov	r1, sl
 8003e6a:	f7fc fdb1 	bl	80009d0 <__aeabi_dcmplt>
 8003e6e:	b110      	cbz	r0, 8003e76 <_printf_float+0x86>
 8003e70:	232d      	movs	r3, #45	; 0x2d
 8003e72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e76:	4b92      	ldr	r3, [pc, #584]	; (80040c0 <_printf_float+0x2d0>)
 8003e78:	4892      	ldr	r0, [pc, #584]	; (80040c4 <_printf_float+0x2d4>)
 8003e7a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8003e7e:	bf94      	ite	ls
 8003e80:	4698      	movls	r8, r3
 8003e82:	4680      	movhi	r8, r0
 8003e84:	2303      	movs	r3, #3
 8003e86:	f04f 0a00 	mov.w	sl, #0
 8003e8a:	6123      	str	r3, [r4, #16]
 8003e8c:	f02b 0304 	bic.w	r3, fp, #4
 8003e90:	6023      	str	r3, [r4, #0]
 8003e92:	4633      	mov	r3, r6
 8003e94:	4621      	mov	r1, r4
 8003e96:	4628      	mov	r0, r5
 8003e98:	9700      	str	r7, [sp, #0]
 8003e9a:	aa0f      	add	r2, sp, #60	; 0x3c
 8003e9c:	f000 f9d4 	bl	8004248 <_printf_common>
 8003ea0:	3001      	adds	r0, #1
 8003ea2:	f040 8090 	bne.w	8003fc6 <_printf_float+0x1d6>
 8003ea6:	f04f 30ff 	mov.w	r0, #4294967295
 8003eaa:	b011      	add	sp, #68	; 0x44
 8003eac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003eb0:	4642      	mov	r2, r8
 8003eb2:	4653      	mov	r3, sl
 8003eb4:	4640      	mov	r0, r8
 8003eb6:	4651      	mov	r1, sl
 8003eb8:	f7fc fdb2 	bl	8000a20 <__aeabi_dcmpun>
 8003ebc:	b148      	cbz	r0, 8003ed2 <_printf_float+0xe2>
 8003ebe:	f1ba 0f00 	cmp.w	sl, #0
 8003ec2:	bfb8      	it	lt
 8003ec4:	232d      	movlt	r3, #45	; 0x2d
 8003ec6:	4880      	ldr	r0, [pc, #512]	; (80040c8 <_printf_float+0x2d8>)
 8003ec8:	bfb8      	it	lt
 8003eca:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003ece:	4b7f      	ldr	r3, [pc, #508]	; (80040cc <_printf_float+0x2dc>)
 8003ed0:	e7d3      	b.n	8003e7a <_printf_float+0x8a>
 8003ed2:	6863      	ldr	r3, [r4, #4]
 8003ed4:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8003ed8:	1c5a      	adds	r2, r3, #1
 8003eda:	d142      	bne.n	8003f62 <_printf_float+0x172>
 8003edc:	2306      	movs	r3, #6
 8003ede:	6063      	str	r3, [r4, #4]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	9206      	str	r2, [sp, #24]
 8003ee4:	aa0e      	add	r2, sp, #56	; 0x38
 8003ee6:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8003eea:	aa0d      	add	r2, sp, #52	; 0x34
 8003eec:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8003ef0:	9203      	str	r2, [sp, #12]
 8003ef2:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8003ef6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003efa:	6023      	str	r3, [r4, #0]
 8003efc:	6863      	ldr	r3, [r4, #4]
 8003efe:	4642      	mov	r2, r8
 8003f00:	9300      	str	r3, [sp, #0]
 8003f02:	4628      	mov	r0, r5
 8003f04:	4653      	mov	r3, sl
 8003f06:	910b      	str	r1, [sp, #44]	; 0x2c
 8003f08:	f7ff fed4 	bl	8003cb4 <__cvt>
 8003f0c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003f0e:	4680      	mov	r8, r0
 8003f10:	2947      	cmp	r1, #71	; 0x47
 8003f12:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003f14:	d108      	bne.n	8003f28 <_printf_float+0x138>
 8003f16:	1cc8      	adds	r0, r1, #3
 8003f18:	db02      	blt.n	8003f20 <_printf_float+0x130>
 8003f1a:	6863      	ldr	r3, [r4, #4]
 8003f1c:	4299      	cmp	r1, r3
 8003f1e:	dd40      	ble.n	8003fa2 <_printf_float+0x1b2>
 8003f20:	f1a9 0902 	sub.w	r9, r9, #2
 8003f24:	fa5f f989 	uxtb.w	r9, r9
 8003f28:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003f2c:	d81f      	bhi.n	8003f6e <_printf_float+0x17e>
 8003f2e:	464a      	mov	r2, r9
 8003f30:	3901      	subs	r1, #1
 8003f32:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003f36:	910d      	str	r1, [sp, #52]	; 0x34
 8003f38:	f7ff ff1b 	bl	8003d72 <__exponent>
 8003f3c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003f3e:	4682      	mov	sl, r0
 8003f40:	1813      	adds	r3, r2, r0
 8003f42:	2a01      	cmp	r2, #1
 8003f44:	6123      	str	r3, [r4, #16]
 8003f46:	dc02      	bgt.n	8003f4e <_printf_float+0x15e>
 8003f48:	6822      	ldr	r2, [r4, #0]
 8003f4a:	07d2      	lsls	r2, r2, #31
 8003f4c:	d501      	bpl.n	8003f52 <_printf_float+0x162>
 8003f4e:	3301      	adds	r3, #1
 8003f50:	6123      	str	r3, [r4, #16]
 8003f52:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d09b      	beq.n	8003e92 <_printf_float+0xa2>
 8003f5a:	232d      	movs	r3, #45	; 0x2d
 8003f5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f60:	e797      	b.n	8003e92 <_printf_float+0xa2>
 8003f62:	2947      	cmp	r1, #71	; 0x47
 8003f64:	d1bc      	bne.n	8003ee0 <_printf_float+0xf0>
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d1ba      	bne.n	8003ee0 <_printf_float+0xf0>
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e7b7      	b.n	8003ede <_printf_float+0xee>
 8003f6e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8003f72:	d118      	bne.n	8003fa6 <_printf_float+0x1b6>
 8003f74:	2900      	cmp	r1, #0
 8003f76:	6863      	ldr	r3, [r4, #4]
 8003f78:	dd0b      	ble.n	8003f92 <_printf_float+0x1a2>
 8003f7a:	6121      	str	r1, [r4, #16]
 8003f7c:	b913      	cbnz	r3, 8003f84 <_printf_float+0x194>
 8003f7e:	6822      	ldr	r2, [r4, #0]
 8003f80:	07d0      	lsls	r0, r2, #31
 8003f82:	d502      	bpl.n	8003f8a <_printf_float+0x19a>
 8003f84:	3301      	adds	r3, #1
 8003f86:	440b      	add	r3, r1
 8003f88:	6123      	str	r3, [r4, #16]
 8003f8a:	f04f 0a00 	mov.w	sl, #0
 8003f8e:	65a1      	str	r1, [r4, #88]	; 0x58
 8003f90:	e7df      	b.n	8003f52 <_printf_float+0x162>
 8003f92:	b913      	cbnz	r3, 8003f9a <_printf_float+0x1aa>
 8003f94:	6822      	ldr	r2, [r4, #0]
 8003f96:	07d2      	lsls	r2, r2, #31
 8003f98:	d501      	bpl.n	8003f9e <_printf_float+0x1ae>
 8003f9a:	3302      	adds	r3, #2
 8003f9c:	e7f4      	b.n	8003f88 <_printf_float+0x198>
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e7f2      	b.n	8003f88 <_printf_float+0x198>
 8003fa2:	f04f 0967 	mov.w	r9, #103	; 0x67
 8003fa6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003fa8:	4299      	cmp	r1, r3
 8003faa:	db05      	blt.n	8003fb8 <_printf_float+0x1c8>
 8003fac:	6823      	ldr	r3, [r4, #0]
 8003fae:	6121      	str	r1, [r4, #16]
 8003fb0:	07d8      	lsls	r0, r3, #31
 8003fb2:	d5ea      	bpl.n	8003f8a <_printf_float+0x19a>
 8003fb4:	1c4b      	adds	r3, r1, #1
 8003fb6:	e7e7      	b.n	8003f88 <_printf_float+0x198>
 8003fb8:	2900      	cmp	r1, #0
 8003fba:	bfcc      	ite	gt
 8003fbc:	2201      	movgt	r2, #1
 8003fbe:	f1c1 0202 	rsble	r2, r1, #2
 8003fc2:	4413      	add	r3, r2
 8003fc4:	e7e0      	b.n	8003f88 <_printf_float+0x198>
 8003fc6:	6823      	ldr	r3, [r4, #0]
 8003fc8:	055a      	lsls	r2, r3, #21
 8003fca:	d407      	bmi.n	8003fdc <_printf_float+0x1ec>
 8003fcc:	6923      	ldr	r3, [r4, #16]
 8003fce:	4642      	mov	r2, r8
 8003fd0:	4631      	mov	r1, r6
 8003fd2:	4628      	mov	r0, r5
 8003fd4:	47b8      	blx	r7
 8003fd6:	3001      	adds	r0, #1
 8003fd8:	d12b      	bne.n	8004032 <_printf_float+0x242>
 8003fda:	e764      	b.n	8003ea6 <_printf_float+0xb6>
 8003fdc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003fe0:	f240 80dd 	bls.w	800419e <_printf_float+0x3ae>
 8003fe4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003fe8:	2200      	movs	r2, #0
 8003fea:	2300      	movs	r3, #0
 8003fec:	f7fc fce6 	bl	80009bc <__aeabi_dcmpeq>
 8003ff0:	2800      	cmp	r0, #0
 8003ff2:	d033      	beq.n	800405c <_printf_float+0x26c>
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	4631      	mov	r1, r6
 8003ff8:	4628      	mov	r0, r5
 8003ffa:	4a35      	ldr	r2, [pc, #212]	; (80040d0 <_printf_float+0x2e0>)
 8003ffc:	47b8      	blx	r7
 8003ffe:	3001      	adds	r0, #1
 8004000:	f43f af51 	beq.w	8003ea6 <_printf_float+0xb6>
 8004004:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004008:	429a      	cmp	r2, r3
 800400a:	db02      	blt.n	8004012 <_printf_float+0x222>
 800400c:	6823      	ldr	r3, [r4, #0]
 800400e:	07d8      	lsls	r0, r3, #31
 8004010:	d50f      	bpl.n	8004032 <_printf_float+0x242>
 8004012:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004016:	4631      	mov	r1, r6
 8004018:	4628      	mov	r0, r5
 800401a:	47b8      	blx	r7
 800401c:	3001      	adds	r0, #1
 800401e:	f43f af42 	beq.w	8003ea6 <_printf_float+0xb6>
 8004022:	f04f 0800 	mov.w	r8, #0
 8004026:	f104 091a 	add.w	r9, r4, #26
 800402a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800402c:	3b01      	subs	r3, #1
 800402e:	4543      	cmp	r3, r8
 8004030:	dc09      	bgt.n	8004046 <_printf_float+0x256>
 8004032:	6823      	ldr	r3, [r4, #0]
 8004034:	079b      	lsls	r3, r3, #30
 8004036:	f100 8102 	bmi.w	800423e <_printf_float+0x44e>
 800403a:	68e0      	ldr	r0, [r4, #12]
 800403c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800403e:	4298      	cmp	r0, r3
 8004040:	bfb8      	it	lt
 8004042:	4618      	movlt	r0, r3
 8004044:	e731      	b.n	8003eaa <_printf_float+0xba>
 8004046:	2301      	movs	r3, #1
 8004048:	464a      	mov	r2, r9
 800404a:	4631      	mov	r1, r6
 800404c:	4628      	mov	r0, r5
 800404e:	47b8      	blx	r7
 8004050:	3001      	adds	r0, #1
 8004052:	f43f af28 	beq.w	8003ea6 <_printf_float+0xb6>
 8004056:	f108 0801 	add.w	r8, r8, #1
 800405a:	e7e6      	b.n	800402a <_printf_float+0x23a>
 800405c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800405e:	2b00      	cmp	r3, #0
 8004060:	dc38      	bgt.n	80040d4 <_printf_float+0x2e4>
 8004062:	2301      	movs	r3, #1
 8004064:	4631      	mov	r1, r6
 8004066:	4628      	mov	r0, r5
 8004068:	4a19      	ldr	r2, [pc, #100]	; (80040d0 <_printf_float+0x2e0>)
 800406a:	47b8      	blx	r7
 800406c:	3001      	adds	r0, #1
 800406e:	f43f af1a 	beq.w	8003ea6 <_printf_float+0xb6>
 8004072:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004076:	4313      	orrs	r3, r2
 8004078:	d102      	bne.n	8004080 <_printf_float+0x290>
 800407a:	6823      	ldr	r3, [r4, #0]
 800407c:	07d9      	lsls	r1, r3, #31
 800407e:	d5d8      	bpl.n	8004032 <_printf_float+0x242>
 8004080:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004084:	4631      	mov	r1, r6
 8004086:	4628      	mov	r0, r5
 8004088:	47b8      	blx	r7
 800408a:	3001      	adds	r0, #1
 800408c:	f43f af0b 	beq.w	8003ea6 <_printf_float+0xb6>
 8004090:	f04f 0900 	mov.w	r9, #0
 8004094:	f104 0a1a 	add.w	sl, r4, #26
 8004098:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800409a:	425b      	negs	r3, r3
 800409c:	454b      	cmp	r3, r9
 800409e:	dc01      	bgt.n	80040a4 <_printf_float+0x2b4>
 80040a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80040a2:	e794      	b.n	8003fce <_printf_float+0x1de>
 80040a4:	2301      	movs	r3, #1
 80040a6:	4652      	mov	r2, sl
 80040a8:	4631      	mov	r1, r6
 80040aa:	4628      	mov	r0, r5
 80040ac:	47b8      	blx	r7
 80040ae:	3001      	adds	r0, #1
 80040b0:	f43f aef9 	beq.w	8003ea6 <_printf_float+0xb6>
 80040b4:	f109 0901 	add.w	r9, r9, #1
 80040b8:	e7ee      	b.n	8004098 <_printf_float+0x2a8>
 80040ba:	bf00      	nop
 80040bc:	7fefffff 	.word	0x7fefffff
 80040c0:	08008468 	.word	0x08008468
 80040c4:	0800846c 	.word	0x0800846c
 80040c8:	08008474 	.word	0x08008474
 80040cc:	08008470 	.word	0x08008470
 80040d0:	08008478 	.word	0x08008478
 80040d4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80040d6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80040d8:	429a      	cmp	r2, r3
 80040da:	bfa8      	it	ge
 80040dc:	461a      	movge	r2, r3
 80040de:	2a00      	cmp	r2, #0
 80040e0:	4691      	mov	r9, r2
 80040e2:	dc37      	bgt.n	8004154 <_printf_float+0x364>
 80040e4:	f04f 0b00 	mov.w	fp, #0
 80040e8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80040ec:	f104 021a 	add.w	r2, r4, #26
 80040f0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80040f4:	ebaa 0309 	sub.w	r3, sl, r9
 80040f8:	455b      	cmp	r3, fp
 80040fa:	dc33      	bgt.n	8004164 <_printf_float+0x374>
 80040fc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004100:	429a      	cmp	r2, r3
 8004102:	db3b      	blt.n	800417c <_printf_float+0x38c>
 8004104:	6823      	ldr	r3, [r4, #0]
 8004106:	07da      	lsls	r2, r3, #31
 8004108:	d438      	bmi.n	800417c <_printf_float+0x38c>
 800410a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800410c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800410e:	eba3 020a 	sub.w	r2, r3, sl
 8004112:	eba3 0901 	sub.w	r9, r3, r1
 8004116:	4591      	cmp	r9, r2
 8004118:	bfa8      	it	ge
 800411a:	4691      	movge	r9, r2
 800411c:	f1b9 0f00 	cmp.w	r9, #0
 8004120:	dc34      	bgt.n	800418c <_printf_float+0x39c>
 8004122:	f04f 0800 	mov.w	r8, #0
 8004126:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800412a:	f104 0a1a 	add.w	sl, r4, #26
 800412e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004132:	1a9b      	subs	r3, r3, r2
 8004134:	eba3 0309 	sub.w	r3, r3, r9
 8004138:	4543      	cmp	r3, r8
 800413a:	f77f af7a 	ble.w	8004032 <_printf_float+0x242>
 800413e:	2301      	movs	r3, #1
 8004140:	4652      	mov	r2, sl
 8004142:	4631      	mov	r1, r6
 8004144:	4628      	mov	r0, r5
 8004146:	47b8      	blx	r7
 8004148:	3001      	adds	r0, #1
 800414a:	f43f aeac 	beq.w	8003ea6 <_printf_float+0xb6>
 800414e:	f108 0801 	add.w	r8, r8, #1
 8004152:	e7ec      	b.n	800412e <_printf_float+0x33e>
 8004154:	4613      	mov	r3, r2
 8004156:	4631      	mov	r1, r6
 8004158:	4642      	mov	r2, r8
 800415a:	4628      	mov	r0, r5
 800415c:	47b8      	blx	r7
 800415e:	3001      	adds	r0, #1
 8004160:	d1c0      	bne.n	80040e4 <_printf_float+0x2f4>
 8004162:	e6a0      	b.n	8003ea6 <_printf_float+0xb6>
 8004164:	2301      	movs	r3, #1
 8004166:	4631      	mov	r1, r6
 8004168:	4628      	mov	r0, r5
 800416a:	920b      	str	r2, [sp, #44]	; 0x2c
 800416c:	47b8      	blx	r7
 800416e:	3001      	adds	r0, #1
 8004170:	f43f ae99 	beq.w	8003ea6 <_printf_float+0xb6>
 8004174:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004176:	f10b 0b01 	add.w	fp, fp, #1
 800417a:	e7b9      	b.n	80040f0 <_printf_float+0x300>
 800417c:	4631      	mov	r1, r6
 800417e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004182:	4628      	mov	r0, r5
 8004184:	47b8      	blx	r7
 8004186:	3001      	adds	r0, #1
 8004188:	d1bf      	bne.n	800410a <_printf_float+0x31a>
 800418a:	e68c      	b.n	8003ea6 <_printf_float+0xb6>
 800418c:	464b      	mov	r3, r9
 800418e:	4631      	mov	r1, r6
 8004190:	4628      	mov	r0, r5
 8004192:	eb08 020a 	add.w	r2, r8, sl
 8004196:	47b8      	blx	r7
 8004198:	3001      	adds	r0, #1
 800419a:	d1c2      	bne.n	8004122 <_printf_float+0x332>
 800419c:	e683      	b.n	8003ea6 <_printf_float+0xb6>
 800419e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80041a0:	2a01      	cmp	r2, #1
 80041a2:	dc01      	bgt.n	80041a8 <_printf_float+0x3b8>
 80041a4:	07db      	lsls	r3, r3, #31
 80041a6:	d537      	bpl.n	8004218 <_printf_float+0x428>
 80041a8:	2301      	movs	r3, #1
 80041aa:	4642      	mov	r2, r8
 80041ac:	4631      	mov	r1, r6
 80041ae:	4628      	mov	r0, r5
 80041b0:	47b8      	blx	r7
 80041b2:	3001      	adds	r0, #1
 80041b4:	f43f ae77 	beq.w	8003ea6 <_printf_float+0xb6>
 80041b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80041bc:	4631      	mov	r1, r6
 80041be:	4628      	mov	r0, r5
 80041c0:	47b8      	blx	r7
 80041c2:	3001      	adds	r0, #1
 80041c4:	f43f ae6f 	beq.w	8003ea6 <_printf_float+0xb6>
 80041c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80041cc:	2200      	movs	r2, #0
 80041ce:	2300      	movs	r3, #0
 80041d0:	f7fc fbf4 	bl	80009bc <__aeabi_dcmpeq>
 80041d4:	b9d8      	cbnz	r0, 800420e <_printf_float+0x41e>
 80041d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80041d8:	f108 0201 	add.w	r2, r8, #1
 80041dc:	3b01      	subs	r3, #1
 80041de:	4631      	mov	r1, r6
 80041e0:	4628      	mov	r0, r5
 80041e2:	47b8      	blx	r7
 80041e4:	3001      	adds	r0, #1
 80041e6:	d10e      	bne.n	8004206 <_printf_float+0x416>
 80041e8:	e65d      	b.n	8003ea6 <_printf_float+0xb6>
 80041ea:	2301      	movs	r3, #1
 80041ec:	464a      	mov	r2, r9
 80041ee:	4631      	mov	r1, r6
 80041f0:	4628      	mov	r0, r5
 80041f2:	47b8      	blx	r7
 80041f4:	3001      	adds	r0, #1
 80041f6:	f43f ae56 	beq.w	8003ea6 <_printf_float+0xb6>
 80041fa:	f108 0801 	add.w	r8, r8, #1
 80041fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004200:	3b01      	subs	r3, #1
 8004202:	4543      	cmp	r3, r8
 8004204:	dcf1      	bgt.n	80041ea <_printf_float+0x3fa>
 8004206:	4653      	mov	r3, sl
 8004208:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800420c:	e6e0      	b.n	8003fd0 <_printf_float+0x1e0>
 800420e:	f04f 0800 	mov.w	r8, #0
 8004212:	f104 091a 	add.w	r9, r4, #26
 8004216:	e7f2      	b.n	80041fe <_printf_float+0x40e>
 8004218:	2301      	movs	r3, #1
 800421a:	4642      	mov	r2, r8
 800421c:	e7df      	b.n	80041de <_printf_float+0x3ee>
 800421e:	2301      	movs	r3, #1
 8004220:	464a      	mov	r2, r9
 8004222:	4631      	mov	r1, r6
 8004224:	4628      	mov	r0, r5
 8004226:	47b8      	blx	r7
 8004228:	3001      	adds	r0, #1
 800422a:	f43f ae3c 	beq.w	8003ea6 <_printf_float+0xb6>
 800422e:	f108 0801 	add.w	r8, r8, #1
 8004232:	68e3      	ldr	r3, [r4, #12]
 8004234:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004236:	1a5b      	subs	r3, r3, r1
 8004238:	4543      	cmp	r3, r8
 800423a:	dcf0      	bgt.n	800421e <_printf_float+0x42e>
 800423c:	e6fd      	b.n	800403a <_printf_float+0x24a>
 800423e:	f04f 0800 	mov.w	r8, #0
 8004242:	f104 0919 	add.w	r9, r4, #25
 8004246:	e7f4      	b.n	8004232 <_printf_float+0x442>

08004248 <_printf_common>:
 8004248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800424c:	4616      	mov	r6, r2
 800424e:	4699      	mov	r9, r3
 8004250:	688a      	ldr	r2, [r1, #8]
 8004252:	690b      	ldr	r3, [r1, #16]
 8004254:	4607      	mov	r7, r0
 8004256:	4293      	cmp	r3, r2
 8004258:	bfb8      	it	lt
 800425a:	4613      	movlt	r3, r2
 800425c:	6033      	str	r3, [r6, #0]
 800425e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004262:	460c      	mov	r4, r1
 8004264:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004268:	b10a      	cbz	r2, 800426e <_printf_common+0x26>
 800426a:	3301      	adds	r3, #1
 800426c:	6033      	str	r3, [r6, #0]
 800426e:	6823      	ldr	r3, [r4, #0]
 8004270:	0699      	lsls	r1, r3, #26
 8004272:	bf42      	ittt	mi
 8004274:	6833      	ldrmi	r3, [r6, #0]
 8004276:	3302      	addmi	r3, #2
 8004278:	6033      	strmi	r3, [r6, #0]
 800427a:	6825      	ldr	r5, [r4, #0]
 800427c:	f015 0506 	ands.w	r5, r5, #6
 8004280:	d106      	bne.n	8004290 <_printf_common+0x48>
 8004282:	f104 0a19 	add.w	sl, r4, #25
 8004286:	68e3      	ldr	r3, [r4, #12]
 8004288:	6832      	ldr	r2, [r6, #0]
 800428a:	1a9b      	subs	r3, r3, r2
 800428c:	42ab      	cmp	r3, r5
 800428e:	dc28      	bgt.n	80042e2 <_printf_common+0x9a>
 8004290:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004294:	1e13      	subs	r3, r2, #0
 8004296:	6822      	ldr	r2, [r4, #0]
 8004298:	bf18      	it	ne
 800429a:	2301      	movne	r3, #1
 800429c:	0692      	lsls	r2, r2, #26
 800429e:	d42d      	bmi.n	80042fc <_printf_common+0xb4>
 80042a0:	4649      	mov	r1, r9
 80042a2:	4638      	mov	r0, r7
 80042a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80042a8:	47c0      	blx	r8
 80042aa:	3001      	adds	r0, #1
 80042ac:	d020      	beq.n	80042f0 <_printf_common+0xa8>
 80042ae:	6823      	ldr	r3, [r4, #0]
 80042b0:	68e5      	ldr	r5, [r4, #12]
 80042b2:	f003 0306 	and.w	r3, r3, #6
 80042b6:	2b04      	cmp	r3, #4
 80042b8:	bf18      	it	ne
 80042ba:	2500      	movne	r5, #0
 80042bc:	6832      	ldr	r2, [r6, #0]
 80042be:	f04f 0600 	mov.w	r6, #0
 80042c2:	68a3      	ldr	r3, [r4, #8]
 80042c4:	bf08      	it	eq
 80042c6:	1aad      	subeq	r5, r5, r2
 80042c8:	6922      	ldr	r2, [r4, #16]
 80042ca:	bf08      	it	eq
 80042cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80042d0:	4293      	cmp	r3, r2
 80042d2:	bfc4      	itt	gt
 80042d4:	1a9b      	subgt	r3, r3, r2
 80042d6:	18ed      	addgt	r5, r5, r3
 80042d8:	341a      	adds	r4, #26
 80042da:	42b5      	cmp	r5, r6
 80042dc:	d11a      	bne.n	8004314 <_printf_common+0xcc>
 80042de:	2000      	movs	r0, #0
 80042e0:	e008      	b.n	80042f4 <_printf_common+0xac>
 80042e2:	2301      	movs	r3, #1
 80042e4:	4652      	mov	r2, sl
 80042e6:	4649      	mov	r1, r9
 80042e8:	4638      	mov	r0, r7
 80042ea:	47c0      	blx	r8
 80042ec:	3001      	adds	r0, #1
 80042ee:	d103      	bne.n	80042f8 <_printf_common+0xb0>
 80042f0:	f04f 30ff 	mov.w	r0, #4294967295
 80042f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042f8:	3501      	adds	r5, #1
 80042fa:	e7c4      	b.n	8004286 <_printf_common+0x3e>
 80042fc:	2030      	movs	r0, #48	; 0x30
 80042fe:	18e1      	adds	r1, r4, r3
 8004300:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004304:	1c5a      	adds	r2, r3, #1
 8004306:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800430a:	4422      	add	r2, r4
 800430c:	3302      	adds	r3, #2
 800430e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004312:	e7c5      	b.n	80042a0 <_printf_common+0x58>
 8004314:	2301      	movs	r3, #1
 8004316:	4622      	mov	r2, r4
 8004318:	4649      	mov	r1, r9
 800431a:	4638      	mov	r0, r7
 800431c:	47c0      	blx	r8
 800431e:	3001      	adds	r0, #1
 8004320:	d0e6      	beq.n	80042f0 <_printf_common+0xa8>
 8004322:	3601      	adds	r6, #1
 8004324:	e7d9      	b.n	80042da <_printf_common+0x92>
	...

08004328 <_printf_i>:
 8004328:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800432c:	7e0f      	ldrb	r7, [r1, #24]
 800432e:	4691      	mov	r9, r2
 8004330:	2f78      	cmp	r7, #120	; 0x78
 8004332:	4680      	mov	r8, r0
 8004334:	460c      	mov	r4, r1
 8004336:	469a      	mov	sl, r3
 8004338:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800433a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800433e:	d807      	bhi.n	8004350 <_printf_i+0x28>
 8004340:	2f62      	cmp	r7, #98	; 0x62
 8004342:	d80a      	bhi.n	800435a <_printf_i+0x32>
 8004344:	2f00      	cmp	r7, #0
 8004346:	f000 80d9 	beq.w	80044fc <_printf_i+0x1d4>
 800434a:	2f58      	cmp	r7, #88	; 0x58
 800434c:	f000 80a4 	beq.w	8004498 <_printf_i+0x170>
 8004350:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004354:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004358:	e03a      	b.n	80043d0 <_printf_i+0xa8>
 800435a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800435e:	2b15      	cmp	r3, #21
 8004360:	d8f6      	bhi.n	8004350 <_printf_i+0x28>
 8004362:	a101      	add	r1, pc, #4	; (adr r1, 8004368 <_printf_i+0x40>)
 8004364:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004368:	080043c1 	.word	0x080043c1
 800436c:	080043d5 	.word	0x080043d5
 8004370:	08004351 	.word	0x08004351
 8004374:	08004351 	.word	0x08004351
 8004378:	08004351 	.word	0x08004351
 800437c:	08004351 	.word	0x08004351
 8004380:	080043d5 	.word	0x080043d5
 8004384:	08004351 	.word	0x08004351
 8004388:	08004351 	.word	0x08004351
 800438c:	08004351 	.word	0x08004351
 8004390:	08004351 	.word	0x08004351
 8004394:	080044e3 	.word	0x080044e3
 8004398:	08004405 	.word	0x08004405
 800439c:	080044c5 	.word	0x080044c5
 80043a0:	08004351 	.word	0x08004351
 80043a4:	08004351 	.word	0x08004351
 80043a8:	08004505 	.word	0x08004505
 80043ac:	08004351 	.word	0x08004351
 80043b0:	08004405 	.word	0x08004405
 80043b4:	08004351 	.word	0x08004351
 80043b8:	08004351 	.word	0x08004351
 80043bc:	080044cd 	.word	0x080044cd
 80043c0:	682b      	ldr	r3, [r5, #0]
 80043c2:	1d1a      	adds	r2, r3, #4
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	602a      	str	r2, [r5, #0]
 80043c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80043cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80043d0:	2301      	movs	r3, #1
 80043d2:	e0a4      	b.n	800451e <_printf_i+0x1f6>
 80043d4:	6820      	ldr	r0, [r4, #0]
 80043d6:	6829      	ldr	r1, [r5, #0]
 80043d8:	0606      	lsls	r6, r0, #24
 80043da:	f101 0304 	add.w	r3, r1, #4
 80043de:	d50a      	bpl.n	80043f6 <_printf_i+0xce>
 80043e0:	680e      	ldr	r6, [r1, #0]
 80043e2:	602b      	str	r3, [r5, #0]
 80043e4:	2e00      	cmp	r6, #0
 80043e6:	da03      	bge.n	80043f0 <_printf_i+0xc8>
 80043e8:	232d      	movs	r3, #45	; 0x2d
 80043ea:	4276      	negs	r6, r6
 80043ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043f0:	230a      	movs	r3, #10
 80043f2:	485e      	ldr	r0, [pc, #376]	; (800456c <_printf_i+0x244>)
 80043f4:	e019      	b.n	800442a <_printf_i+0x102>
 80043f6:	680e      	ldr	r6, [r1, #0]
 80043f8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80043fc:	602b      	str	r3, [r5, #0]
 80043fe:	bf18      	it	ne
 8004400:	b236      	sxthne	r6, r6
 8004402:	e7ef      	b.n	80043e4 <_printf_i+0xbc>
 8004404:	682b      	ldr	r3, [r5, #0]
 8004406:	6820      	ldr	r0, [r4, #0]
 8004408:	1d19      	adds	r1, r3, #4
 800440a:	6029      	str	r1, [r5, #0]
 800440c:	0601      	lsls	r1, r0, #24
 800440e:	d501      	bpl.n	8004414 <_printf_i+0xec>
 8004410:	681e      	ldr	r6, [r3, #0]
 8004412:	e002      	b.n	800441a <_printf_i+0xf2>
 8004414:	0646      	lsls	r6, r0, #25
 8004416:	d5fb      	bpl.n	8004410 <_printf_i+0xe8>
 8004418:	881e      	ldrh	r6, [r3, #0]
 800441a:	2f6f      	cmp	r7, #111	; 0x6f
 800441c:	bf0c      	ite	eq
 800441e:	2308      	moveq	r3, #8
 8004420:	230a      	movne	r3, #10
 8004422:	4852      	ldr	r0, [pc, #328]	; (800456c <_printf_i+0x244>)
 8004424:	2100      	movs	r1, #0
 8004426:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800442a:	6865      	ldr	r5, [r4, #4]
 800442c:	2d00      	cmp	r5, #0
 800442e:	bfa8      	it	ge
 8004430:	6821      	ldrge	r1, [r4, #0]
 8004432:	60a5      	str	r5, [r4, #8]
 8004434:	bfa4      	itt	ge
 8004436:	f021 0104 	bicge.w	r1, r1, #4
 800443a:	6021      	strge	r1, [r4, #0]
 800443c:	b90e      	cbnz	r6, 8004442 <_printf_i+0x11a>
 800443e:	2d00      	cmp	r5, #0
 8004440:	d04d      	beq.n	80044de <_printf_i+0x1b6>
 8004442:	4615      	mov	r5, r2
 8004444:	fbb6 f1f3 	udiv	r1, r6, r3
 8004448:	fb03 6711 	mls	r7, r3, r1, r6
 800444c:	5dc7      	ldrb	r7, [r0, r7]
 800444e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004452:	4637      	mov	r7, r6
 8004454:	42bb      	cmp	r3, r7
 8004456:	460e      	mov	r6, r1
 8004458:	d9f4      	bls.n	8004444 <_printf_i+0x11c>
 800445a:	2b08      	cmp	r3, #8
 800445c:	d10b      	bne.n	8004476 <_printf_i+0x14e>
 800445e:	6823      	ldr	r3, [r4, #0]
 8004460:	07de      	lsls	r6, r3, #31
 8004462:	d508      	bpl.n	8004476 <_printf_i+0x14e>
 8004464:	6923      	ldr	r3, [r4, #16]
 8004466:	6861      	ldr	r1, [r4, #4]
 8004468:	4299      	cmp	r1, r3
 800446a:	bfde      	ittt	le
 800446c:	2330      	movle	r3, #48	; 0x30
 800446e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004472:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004476:	1b52      	subs	r2, r2, r5
 8004478:	6122      	str	r2, [r4, #16]
 800447a:	464b      	mov	r3, r9
 800447c:	4621      	mov	r1, r4
 800447e:	4640      	mov	r0, r8
 8004480:	f8cd a000 	str.w	sl, [sp]
 8004484:	aa03      	add	r2, sp, #12
 8004486:	f7ff fedf 	bl	8004248 <_printf_common>
 800448a:	3001      	adds	r0, #1
 800448c:	d14c      	bne.n	8004528 <_printf_i+0x200>
 800448e:	f04f 30ff 	mov.w	r0, #4294967295
 8004492:	b004      	add	sp, #16
 8004494:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004498:	4834      	ldr	r0, [pc, #208]	; (800456c <_printf_i+0x244>)
 800449a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800449e:	6829      	ldr	r1, [r5, #0]
 80044a0:	6823      	ldr	r3, [r4, #0]
 80044a2:	f851 6b04 	ldr.w	r6, [r1], #4
 80044a6:	6029      	str	r1, [r5, #0]
 80044a8:	061d      	lsls	r5, r3, #24
 80044aa:	d514      	bpl.n	80044d6 <_printf_i+0x1ae>
 80044ac:	07df      	lsls	r7, r3, #31
 80044ae:	bf44      	itt	mi
 80044b0:	f043 0320 	orrmi.w	r3, r3, #32
 80044b4:	6023      	strmi	r3, [r4, #0]
 80044b6:	b91e      	cbnz	r6, 80044c0 <_printf_i+0x198>
 80044b8:	6823      	ldr	r3, [r4, #0]
 80044ba:	f023 0320 	bic.w	r3, r3, #32
 80044be:	6023      	str	r3, [r4, #0]
 80044c0:	2310      	movs	r3, #16
 80044c2:	e7af      	b.n	8004424 <_printf_i+0xfc>
 80044c4:	6823      	ldr	r3, [r4, #0]
 80044c6:	f043 0320 	orr.w	r3, r3, #32
 80044ca:	6023      	str	r3, [r4, #0]
 80044cc:	2378      	movs	r3, #120	; 0x78
 80044ce:	4828      	ldr	r0, [pc, #160]	; (8004570 <_printf_i+0x248>)
 80044d0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80044d4:	e7e3      	b.n	800449e <_printf_i+0x176>
 80044d6:	0659      	lsls	r1, r3, #25
 80044d8:	bf48      	it	mi
 80044da:	b2b6      	uxthmi	r6, r6
 80044dc:	e7e6      	b.n	80044ac <_printf_i+0x184>
 80044de:	4615      	mov	r5, r2
 80044e0:	e7bb      	b.n	800445a <_printf_i+0x132>
 80044e2:	682b      	ldr	r3, [r5, #0]
 80044e4:	6826      	ldr	r6, [r4, #0]
 80044e6:	1d18      	adds	r0, r3, #4
 80044e8:	6961      	ldr	r1, [r4, #20]
 80044ea:	6028      	str	r0, [r5, #0]
 80044ec:	0635      	lsls	r5, r6, #24
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	d501      	bpl.n	80044f6 <_printf_i+0x1ce>
 80044f2:	6019      	str	r1, [r3, #0]
 80044f4:	e002      	b.n	80044fc <_printf_i+0x1d4>
 80044f6:	0670      	lsls	r0, r6, #25
 80044f8:	d5fb      	bpl.n	80044f2 <_printf_i+0x1ca>
 80044fa:	8019      	strh	r1, [r3, #0]
 80044fc:	2300      	movs	r3, #0
 80044fe:	4615      	mov	r5, r2
 8004500:	6123      	str	r3, [r4, #16]
 8004502:	e7ba      	b.n	800447a <_printf_i+0x152>
 8004504:	682b      	ldr	r3, [r5, #0]
 8004506:	2100      	movs	r1, #0
 8004508:	1d1a      	adds	r2, r3, #4
 800450a:	602a      	str	r2, [r5, #0]
 800450c:	681d      	ldr	r5, [r3, #0]
 800450e:	6862      	ldr	r2, [r4, #4]
 8004510:	4628      	mov	r0, r5
 8004512:	f002 f985 	bl	8006820 <memchr>
 8004516:	b108      	cbz	r0, 800451c <_printf_i+0x1f4>
 8004518:	1b40      	subs	r0, r0, r5
 800451a:	6060      	str	r0, [r4, #4]
 800451c:	6863      	ldr	r3, [r4, #4]
 800451e:	6123      	str	r3, [r4, #16]
 8004520:	2300      	movs	r3, #0
 8004522:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004526:	e7a8      	b.n	800447a <_printf_i+0x152>
 8004528:	462a      	mov	r2, r5
 800452a:	4649      	mov	r1, r9
 800452c:	4640      	mov	r0, r8
 800452e:	6923      	ldr	r3, [r4, #16]
 8004530:	47d0      	blx	sl
 8004532:	3001      	adds	r0, #1
 8004534:	d0ab      	beq.n	800448e <_printf_i+0x166>
 8004536:	6823      	ldr	r3, [r4, #0]
 8004538:	079b      	lsls	r3, r3, #30
 800453a:	d413      	bmi.n	8004564 <_printf_i+0x23c>
 800453c:	68e0      	ldr	r0, [r4, #12]
 800453e:	9b03      	ldr	r3, [sp, #12]
 8004540:	4298      	cmp	r0, r3
 8004542:	bfb8      	it	lt
 8004544:	4618      	movlt	r0, r3
 8004546:	e7a4      	b.n	8004492 <_printf_i+0x16a>
 8004548:	2301      	movs	r3, #1
 800454a:	4632      	mov	r2, r6
 800454c:	4649      	mov	r1, r9
 800454e:	4640      	mov	r0, r8
 8004550:	47d0      	blx	sl
 8004552:	3001      	adds	r0, #1
 8004554:	d09b      	beq.n	800448e <_printf_i+0x166>
 8004556:	3501      	adds	r5, #1
 8004558:	68e3      	ldr	r3, [r4, #12]
 800455a:	9903      	ldr	r1, [sp, #12]
 800455c:	1a5b      	subs	r3, r3, r1
 800455e:	42ab      	cmp	r3, r5
 8004560:	dcf2      	bgt.n	8004548 <_printf_i+0x220>
 8004562:	e7eb      	b.n	800453c <_printf_i+0x214>
 8004564:	2500      	movs	r5, #0
 8004566:	f104 0619 	add.w	r6, r4, #25
 800456a:	e7f5      	b.n	8004558 <_printf_i+0x230>
 800456c:	0800847a 	.word	0x0800847a
 8004570:	0800848b 	.word	0x0800848b

08004574 <siprintf>:
 8004574:	b40e      	push	{r1, r2, r3}
 8004576:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800457a:	b500      	push	{lr}
 800457c:	b09c      	sub	sp, #112	; 0x70
 800457e:	ab1d      	add	r3, sp, #116	; 0x74
 8004580:	9002      	str	r0, [sp, #8]
 8004582:	9006      	str	r0, [sp, #24]
 8004584:	9107      	str	r1, [sp, #28]
 8004586:	9104      	str	r1, [sp, #16]
 8004588:	4808      	ldr	r0, [pc, #32]	; (80045ac <siprintf+0x38>)
 800458a:	4909      	ldr	r1, [pc, #36]	; (80045b0 <siprintf+0x3c>)
 800458c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004590:	9105      	str	r1, [sp, #20]
 8004592:	6800      	ldr	r0, [r0, #0]
 8004594:	a902      	add	r1, sp, #8
 8004596:	9301      	str	r3, [sp, #4]
 8004598:	f002 ff62 	bl	8007460 <_svfiprintf_r>
 800459c:	2200      	movs	r2, #0
 800459e:	9b02      	ldr	r3, [sp, #8]
 80045a0:	701a      	strb	r2, [r3, #0]
 80045a2:	b01c      	add	sp, #112	; 0x70
 80045a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80045a8:	b003      	add	sp, #12
 80045aa:	4770      	bx	lr
 80045ac:	200000a4 	.word	0x200000a4
 80045b0:	ffff0208 	.word	0xffff0208

080045b4 <strcat>:
 80045b4:	4602      	mov	r2, r0
 80045b6:	b510      	push	{r4, lr}
 80045b8:	7814      	ldrb	r4, [r2, #0]
 80045ba:	4613      	mov	r3, r2
 80045bc:	3201      	adds	r2, #1
 80045be:	2c00      	cmp	r4, #0
 80045c0:	d1fa      	bne.n	80045b8 <strcat+0x4>
 80045c2:	3b01      	subs	r3, #1
 80045c4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80045c8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80045cc:	2a00      	cmp	r2, #0
 80045ce:	d1f9      	bne.n	80045c4 <strcat+0x10>
 80045d0:	bd10      	pop	{r4, pc}

080045d2 <sulp>:
 80045d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045d6:	460f      	mov	r7, r1
 80045d8:	4690      	mov	r8, r2
 80045da:	f002 fcad 	bl	8006f38 <__ulp>
 80045de:	4604      	mov	r4, r0
 80045e0:	460d      	mov	r5, r1
 80045e2:	f1b8 0f00 	cmp.w	r8, #0
 80045e6:	d011      	beq.n	800460c <sulp+0x3a>
 80045e8:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80045ec:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	dd0b      	ble.n	800460c <sulp+0x3a>
 80045f4:	2400      	movs	r4, #0
 80045f6:	051b      	lsls	r3, r3, #20
 80045f8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80045fc:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8004600:	4622      	mov	r2, r4
 8004602:	462b      	mov	r3, r5
 8004604:	f7fb ff72 	bl	80004ec <__aeabi_dmul>
 8004608:	4604      	mov	r4, r0
 800460a:	460d      	mov	r5, r1
 800460c:	4620      	mov	r0, r4
 800460e:	4629      	mov	r1, r5
 8004610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004614:	0000      	movs	r0, r0
	...

08004618 <_strtod_l>:
 8004618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800461c:	469b      	mov	fp, r3
 800461e:	2300      	movs	r3, #0
 8004620:	b09f      	sub	sp, #124	; 0x7c
 8004622:	931a      	str	r3, [sp, #104]	; 0x68
 8004624:	4b9e      	ldr	r3, [pc, #632]	; (80048a0 <_strtod_l+0x288>)
 8004626:	4682      	mov	sl, r0
 8004628:	681f      	ldr	r7, [r3, #0]
 800462a:	460e      	mov	r6, r1
 800462c:	4638      	mov	r0, r7
 800462e:	9215      	str	r2, [sp, #84]	; 0x54
 8004630:	f7fb fd98 	bl	8000164 <strlen>
 8004634:	f04f 0800 	mov.w	r8, #0
 8004638:	4604      	mov	r4, r0
 800463a:	f04f 0900 	mov.w	r9, #0
 800463e:	9619      	str	r6, [sp, #100]	; 0x64
 8004640:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004642:	781a      	ldrb	r2, [r3, #0]
 8004644:	2a2b      	cmp	r2, #43	; 0x2b
 8004646:	d04c      	beq.n	80046e2 <_strtod_l+0xca>
 8004648:	d83a      	bhi.n	80046c0 <_strtod_l+0xa8>
 800464a:	2a0d      	cmp	r2, #13
 800464c:	d833      	bhi.n	80046b6 <_strtod_l+0x9e>
 800464e:	2a08      	cmp	r2, #8
 8004650:	d833      	bhi.n	80046ba <_strtod_l+0xa2>
 8004652:	2a00      	cmp	r2, #0
 8004654:	d03d      	beq.n	80046d2 <_strtod_l+0xba>
 8004656:	2300      	movs	r3, #0
 8004658:	930a      	str	r3, [sp, #40]	; 0x28
 800465a:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800465c:	782b      	ldrb	r3, [r5, #0]
 800465e:	2b30      	cmp	r3, #48	; 0x30
 8004660:	f040 80aa 	bne.w	80047b8 <_strtod_l+0x1a0>
 8004664:	786b      	ldrb	r3, [r5, #1]
 8004666:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800466a:	2b58      	cmp	r3, #88	; 0x58
 800466c:	d166      	bne.n	800473c <_strtod_l+0x124>
 800466e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004670:	4650      	mov	r0, sl
 8004672:	9301      	str	r3, [sp, #4]
 8004674:	ab1a      	add	r3, sp, #104	; 0x68
 8004676:	9300      	str	r3, [sp, #0]
 8004678:	4a8a      	ldr	r2, [pc, #552]	; (80048a4 <_strtod_l+0x28c>)
 800467a:	f8cd b008 	str.w	fp, [sp, #8]
 800467e:	ab1b      	add	r3, sp, #108	; 0x6c
 8004680:	a919      	add	r1, sp, #100	; 0x64
 8004682:	f001 fdb1 	bl	80061e8 <__gethex>
 8004686:	f010 0607 	ands.w	r6, r0, #7
 800468a:	4604      	mov	r4, r0
 800468c:	d005      	beq.n	800469a <_strtod_l+0x82>
 800468e:	2e06      	cmp	r6, #6
 8004690:	d129      	bne.n	80046e6 <_strtod_l+0xce>
 8004692:	2300      	movs	r3, #0
 8004694:	3501      	adds	r5, #1
 8004696:	9519      	str	r5, [sp, #100]	; 0x64
 8004698:	930a      	str	r3, [sp, #40]	; 0x28
 800469a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800469c:	2b00      	cmp	r3, #0
 800469e:	f040 858a 	bne.w	80051b6 <_strtod_l+0xb9e>
 80046a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80046a4:	b1d3      	cbz	r3, 80046dc <_strtod_l+0xc4>
 80046a6:	4642      	mov	r2, r8
 80046a8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80046ac:	4610      	mov	r0, r2
 80046ae:	4619      	mov	r1, r3
 80046b0:	b01f      	add	sp, #124	; 0x7c
 80046b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046b6:	2a20      	cmp	r2, #32
 80046b8:	d1cd      	bne.n	8004656 <_strtod_l+0x3e>
 80046ba:	3301      	adds	r3, #1
 80046bc:	9319      	str	r3, [sp, #100]	; 0x64
 80046be:	e7bf      	b.n	8004640 <_strtod_l+0x28>
 80046c0:	2a2d      	cmp	r2, #45	; 0x2d
 80046c2:	d1c8      	bne.n	8004656 <_strtod_l+0x3e>
 80046c4:	2201      	movs	r2, #1
 80046c6:	920a      	str	r2, [sp, #40]	; 0x28
 80046c8:	1c5a      	adds	r2, r3, #1
 80046ca:	9219      	str	r2, [sp, #100]	; 0x64
 80046cc:	785b      	ldrb	r3, [r3, #1]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d1c3      	bne.n	800465a <_strtod_l+0x42>
 80046d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80046d4:	9619      	str	r6, [sp, #100]	; 0x64
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	f040 856b 	bne.w	80051b2 <_strtod_l+0xb9a>
 80046dc:	4642      	mov	r2, r8
 80046de:	464b      	mov	r3, r9
 80046e0:	e7e4      	b.n	80046ac <_strtod_l+0x94>
 80046e2:	2200      	movs	r2, #0
 80046e4:	e7ef      	b.n	80046c6 <_strtod_l+0xae>
 80046e6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80046e8:	b13a      	cbz	r2, 80046fa <_strtod_l+0xe2>
 80046ea:	2135      	movs	r1, #53	; 0x35
 80046ec:	a81c      	add	r0, sp, #112	; 0x70
 80046ee:	f002 fd27 	bl	8007140 <__copybits>
 80046f2:	4650      	mov	r0, sl
 80046f4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80046f6:	f002 f8ef 	bl	80068d8 <_Bfree>
 80046fa:	3e01      	subs	r6, #1
 80046fc:	2e04      	cmp	r6, #4
 80046fe:	d806      	bhi.n	800470e <_strtod_l+0xf6>
 8004700:	e8df f006 	tbb	[pc, r6]
 8004704:	1714030a 	.word	0x1714030a
 8004708:	0a          	.byte	0x0a
 8004709:	00          	.byte	0x00
 800470a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800470e:	0721      	lsls	r1, r4, #28
 8004710:	d5c3      	bpl.n	800469a <_strtod_l+0x82>
 8004712:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8004716:	e7c0      	b.n	800469a <_strtod_l+0x82>
 8004718:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800471a:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 800471e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8004722:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004726:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800472a:	e7f0      	b.n	800470e <_strtod_l+0xf6>
 800472c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80048a8 <_strtod_l+0x290>
 8004730:	e7ed      	b.n	800470e <_strtod_l+0xf6>
 8004732:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8004736:	f04f 38ff 	mov.w	r8, #4294967295
 800473a:	e7e8      	b.n	800470e <_strtod_l+0xf6>
 800473c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800473e:	1c5a      	adds	r2, r3, #1
 8004740:	9219      	str	r2, [sp, #100]	; 0x64
 8004742:	785b      	ldrb	r3, [r3, #1]
 8004744:	2b30      	cmp	r3, #48	; 0x30
 8004746:	d0f9      	beq.n	800473c <_strtod_l+0x124>
 8004748:	2b00      	cmp	r3, #0
 800474a:	d0a6      	beq.n	800469a <_strtod_l+0x82>
 800474c:	2301      	movs	r3, #1
 800474e:	9307      	str	r3, [sp, #28]
 8004750:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004752:	220a      	movs	r2, #10
 8004754:	9308      	str	r3, [sp, #32]
 8004756:	2300      	movs	r3, #0
 8004758:	469b      	mov	fp, r3
 800475a:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800475e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8004760:	7805      	ldrb	r5, [r0, #0]
 8004762:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8004766:	b2d9      	uxtb	r1, r3
 8004768:	2909      	cmp	r1, #9
 800476a:	d927      	bls.n	80047bc <_strtod_l+0x1a4>
 800476c:	4622      	mov	r2, r4
 800476e:	4639      	mov	r1, r7
 8004770:	f003 f8e4 	bl	800793c <strncmp>
 8004774:	2800      	cmp	r0, #0
 8004776:	d033      	beq.n	80047e0 <_strtod_l+0x1c8>
 8004778:	2000      	movs	r0, #0
 800477a:	462a      	mov	r2, r5
 800477c:	465c      	mov	r4, fp
 800477e:	4603      	mov	r3, r0
 8004780:	9004      	str	r0, [sp, #16]
 8004782:	2a65      	cmp	r2, #101	; 0x65
 8004784:	d001      	beq.n	800478a <_strtod_l+0x172>
 8004786:	2a45      	cmp	r2, #69	; 0x45
 8004788:	d114      	bne.n	80047b4 <_strtod_l+0x19c>
 800478a:	b91c      	cbnz	r4, 8004794 <_strtod_l+0x17c>
 800478c:	9a07      	ldr	r2, [sp, #28]
 800478e:	4302      	orrs	r2, r0
 8004790:	d09f      	beq.n	80046d2 <_strtod_l+0xba>
 8004792:	2400      	movs	r4, #0
 8004794:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8004796:	1c72      	adds	r2, r6, #1
 8004798:	9219      	str	r2, [sp, #100]	; 0x64
 800479a:	7872      	ldrb	r2, [r6, #1]
 800479c:	2a2b      	cmp	r2, #43	; 0x2b
 800479e:	d079      	beq.n	8004894 <_strtod_l+0x27c>
 80047a0:	2a2d      	cmp	r2, #45	; 0x2d
 80047a2:	f000 8083 	beq.w	80048ac <_strtod_l+0x294>
 80047a6:	2700      	movs	r7, #0
 80047a8:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80047ac:	2909      	cmp	r1, #9
 80047ae:	f240 8083 	bls.w	80048b8 <_strtod_l+0x2a0>
 80047b2:	9619      	str	r6, [sp, #100]	; 0x64
 80047b4:	2500      	movs	r5, #0
 80047b6:	e09f      	b.n	80048f8 <_strtod_l+0x2e0>
 80047b8:	2300      	movs	r3, #0
 80047ba:	e7c8      	b.n	800474e <_strtod_l+0x136>
 80047bc:	f1bb 0f08 	cmp.w	fp, #8
 80047c0:	bfd5      	itete	le
 80047c2:	9906      	ldrle	r1, [sp, #24]
 80047c4:	9905      	ldrgt	r1, [sp, #20]
 80047c6:	fb02 3301 	mlale	r3, r2, r1, r3
 80047ca:	fb02 3301 	mlagt	r3, r2, r1, r3
 80047ce:	f100 0001 	add.w	r0, r0, #1
 80047d2:	bfd4      	ite	le
 80047d4:	9306      	strle	r3, [sp, #24]
 80047d6:	9305      	strgt	r3, [sp, #20]
 80047d8:	f10b 0b01 	add.w	fp, fp, #1
 80047dc:	9019      	str	r0, [sp, #100]	; 0x64
 80047de:	e7be      	b.n	800475e <_strtod_l+0x146>
 80047e0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80047e2:	191a      	adds	r2, r3, r4
 80047e4:	9219      	str	r2, [sp, #100]	; 0x64
 80047e6:	5d1a      	ldrb	r2, [r3, r4]
 80047e8:	f1bb 0f00 	cmp.w	fp, #0
 80047ec:	d036      	beq.n	800485c <_strtod_l+0x244>
 80047ee:	465c      	mov	r4, fp
 80047f0:	9004      	str	r0, [sp, #16]
 80047f2:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80047f6:	2b09      	cmp	r3, #9
 80047f8:	d912      	bls.n	8004820 <_strtod_l+0x208>
 80047fa:	2301      	movs	r3, #1
 80047fc:	e7c1      	b.n	8004782 <_strtod_l+0x16a>
 80047fe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004800:	3001      	adds	r0, #1
 8004802:	1c5a      	adds	r2, r3, #1
 8004804:	9219      	str	r2, [sp, #100]	; 0x64
 8004806:	785a      	ldrb	r2, [r3, #1]
 8004808:	2a30      	cmp	r2, #48	; 0x30
 800480a:	d0f8      	beq.n	80047fe <_strtod_l+0x1e6>
 800480c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8004810:	2b08      	cmp	r3, #8
 8004812:	f200 84d5 	bhi.w	80051c0 <_strtod_l+0xba8>
 8004816:	9004      	str	r0, [sp, #16]
 8004818:	2000      	movs	r0, #0
 800481a:	4604      	mov	r4, r0
 800481c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800481e:	9308      	str	r3, [sp, #32]
 8004820:	3a30      	subs	r2, #48	; 0x30
 8004822:	f100 0301 	add.w	r3, r0, #1
 8004826:	d013      	beq.n	8004850 <_strtod_l+0x238>
 8004828:	9904      	ldr	r1, [sp, #16]
 800482a:	1905      	adds	r5, r0, r4
 800482c:	4419      	add	r1, r3
 800482e:	9104      	str	r1, [sp, #16]
 8004830:	4623      	mov	r3, r4
 8004832:	210a      	movs	r1, #10
 8004834:	42ab      	cmp	r3, r5
 8004836:	d113      	bne.n	8004860 <_strtod_l+0x248>
 8004838:	1823      	adds	r3, r4, r0
 800483a:	2b08      	cmp	r3, #8
 800483c:	f104 0401 	add.w	r4, r4, #1
 8004840:	4404      	add	r4, r0
 8004842:	dc1b      	bgt.n	800487c <_strtod_l+0x264>
 8004844:	230a      	movs	r3, #10
 8004846:	9906      	ldr	r1, [sp, #24]
 8004848:	fb03 2301 	mla	r3, r3, r1, r2
 800484c:	9306      	str	r3, [sp, #24]
 800484e:	2300      	movs	r3, #0
 8004850:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004852:	4618      	mov	r0, r3
 8004854:	1c51      	adds	r1, r2, #1
 8004856:	9119      	str	r1, [sp, #100]	; 0x64
 8004858:	7852      	ldrb	r2, [r2, #1]
 800485a:	e7ca      	b.n	80047f2 <_strtod_l+0x1da>
 800485c:	4658      	mov	r0, fp
 800485e:	e7d3      	b.n	8004808 <_strtod_l+0x1f0>
 8004860:	2b08      	cmp	r3, #8
 8004862:	dc04      	bgt.n	800486e <_strtod_l+0x256>
 8004864:	9f06      	ldr	r7, [sp, #24]
 8004866:	434f      	muls	r7, r1
 8004868:	9706      	str	r7, [sp, #24]
 800486a:	3301      	adds	r3, #1
 800486c:	e7e2      	b.n	8004834 <_strtod_l+0x21c>
 800486e:	1c5f      	adds	r7, r3, #1
 8004870:	2f10      	cmp	r7, #16
 8004872:	bfde      	ittt	le
 8004874:	9f05      	ldrle	r7, [sp, #20]
 8004876:	434f      	mulle	r7, r1
 8004878:	9705      	strle	r7, [sp, #20]
 800487a:	e7f6      	b.n	800486a <_strtod_l+0x252>
 800487c:	2c10      	cmp	r4, #16
 800487e:	bfdf      	itttt	le
 8004880:	230a      	movle	r3, #10
 8004882:	9905      	ldrle	r1, [sp, #20]
 8004884:	fb03 2301 	mlale	r3, r3, r1, r2
 8004888:	9305      	strle	r3, [sp, #20]
 800488a:	e7e0      	b.n	800484e <_strtod_l+0x236>
 800488c:	2300      	movs	r3, #0
 800488e:	9304      	str	r3, [sp, #16]
 8004890:	2301      	movs	r3, #1
 8004892:	e77b      	b.n	800478c <_strtod_l+0x174>
 8004894:	2700      	movs	r7, #0
 8004896:	1cb2      	adds	r2, r6, #2
 8004898:	9219      	str	r2, [sp, #100]	; 0x64
 800489a:	78b2      	ldrb	r2, [r6, #2]
 800489c:	e784      	b.n	80047a8 <_strtod_l+0x190>
 800489e:	bf00      	nop
 80048a0:	08008780 	.word	0x08008780
 80048a4:	0800849c 	.word	0x0800849c
 80048a8:	7ff00000 	.word	0x7ff00000
 80048ac:	2701      	movs	r7, #1
 80048ae:	e7f2      	b.n	8004896 <_strtod_l+0x27e>
 80048b0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80048b2:	1c51      	adds	r1, r2, #1
 80048b4:	9119      	str	r1, [sp, #100]	; 0x64
 80048b6:	7852      	ldrb	r2, [r2, #1]
 80048b8:	2a30      	cmp	r2, #48	; 0x30
 80048ba:	d0f9      	beq.n	80048b0 <_strtod_l+0x298>
 80048bc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80048c0:	2908      	cmp	r1, #8
 80048c2:	f63f af77 	bhi.w	80047b4 <_strtod_l+0x19c>
 80048c6:	f04f 0e0a 	mov.w	lr, #10
 80048ca:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 80048ce:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80048d0:	9209      	str	r2, [sp, #36]	; 0x24
 80048d2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80048d4:	1c51      	adds	r1, r2, #1
 80048d6:	9119      	str	r1, [sp, #100]	; 0x64
 80048d8:	7852      	ldrb	r2, [r2, #1]
 80048da:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 80048de:	2d09      	cmp	r5, #9
 80048e0:	d935      	bls.n	800494e <_strtod_l+0x336>
 80048e2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80048e4:	1b49      	subs	r1, r1, r5
 80048e6:	2908      	cmp	r1, #8
 80048e8:	f644 651f 	movw	r5, #19999	; 0x4e1f
 80048ec:	dc02      	bgt.n	80048f4 <_strtod_l+0x2dc>
 80048ee:	4565      	cmp	r5, ip
 80048f0:	bfa8      	it	ge
 80048f2:	4665      	movge	r5, ip
 80048f4:	b107      	cbz	r7, 80048f8 <_strtod_l+0x2e0>
 80048f6:	426d      	negs	r5, r5
 80048f8:	2c00      	cmp	r4, #0
 80048fa:	d14c      	bne.n	8004996 <_strtod_l+0x37e>
 80048fc:	9907      	ldr	r1, [sp, #28]
 80048fe:	4301      	orrs	r1, r0
 8004900:	f47f aecb 	bne.w	800469a <_strtod_l+0x82>
 8004904:	2b00      	cmp	r3, #0
 8004906:	f47f aee4 	bne.w	80046d2 <_strtod_l+0xba>
 800490a:	2a69      	cmp	r2, #105	; 0x69
 800490c:	d026      	beq.n	800495c <_strtod_l+0x344>
 800490e:	dc23      	bgt.n	8004958 <_strtod_l+0x340>
 8004910:	2a49      	cmp	r2, #73	; 0x49
 8004912:	d023      	beq.n	800495c <_strtod_l+0x344>
 8004914:	2a4e      	cmp	r2, #78	; 0x4e
 8004916:	f47f aedc 	bne.w	80046d2 <_strtod_l+0xba>
 800491a:	499d      	ldr	r1, [pc, #628]	; (8004b90 <_strtod_l+0x578>)
 800491c:	a819      	add	r0, sp, #100	; 0x64
 800491e:	f001 feb1 	bl	8006684 <__match>
 8004922:	2800      	cmp	r0, #0
 8004924:	f43f aed5 	beq.w	80046d2 <_strtod_l+0xba>
 8004928:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800492a:	781b      	ldrb	r3, [r3, #0]
 800492c:	2b28      	cmp	r3, #40	; 0x28
 800492e:	d12c      	bne.n	800498a <_strtod_l+0x372>
 8004930:	4998      	ldr	r1, [pc, #608]	; (8004b94 <_strtod_l+0x57c>)
 8004932:	aa1c      	add	r2, sp, #112	; 0x70
 8004934:	a819      	add	r0, sp, #100	; 0x64
 8004936:	f001 feb9 	bl	80066ac <__hexnan>
 800493a:	2805      	cmp	r0, #5
 800493c:	d125      	bne.n	800498a <_strtod_l+0x372>
 800493e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004940:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8004944:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8004948:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800494c:	e6a5      	b.n	800469a <_strtod_l+0x82>
 800494e:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8004952:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8004956:	e7bc      	b.n	80048d2 <_strtod_l+0x2ba>
 8004958:	2a6e      	cmp	r2, #110	; 0x6e
 800495a:	e7dc      	b.n	8004916 <_strtod_l+0x2fe>
 800495c:	498e      	ldr	r1, [pc, #568]	; (8004b98 <_strtod_l+0x580>)
 800495e:	a819      	add	r0, sp, #100	; 0x64
 8004960:	f001 fe90 	bl	8006684 <__match>
 8004964:	2800      	cmp	r0, #0
 8004966:	f43f aeb4 	beq.w	80046d2 <_strtod_l+0xba>
 800496a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800496c:	498b      	ldr	r1, [pc, #556]	; (8004b9c <_strtod_l+0x584>)
 800496e:	3b01      	subs	r3, #1
 8004970:	a819      	add	r0, sp, #100	; 0x64
 8004972:	9319      	str	r3, [sp, #100]	; 0x64
 8004974:	f001 fe86 	bl	8006684 <__match>
 8004978:	b910      	cbnz	r0, 8004980 <_strtod_l+0x368>
 800497a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800497c:	3301      	adds	r3, #1
 800497e:	9319      	str	r3, [sp, #100]	; 0x64
 8004980:	f04f 0800 	mov.w	r8, #0
 8004984:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8004ba0 <_strtod_l+0x588>
 8004988:	e687      	b.n	800469a <_strtod_l+0x82>
 800498a:	4886      	ldr	r0, [pc, #536]	; (8004ba4 <_strtod_l+0x58c>)
 800498c:	f002 ffc0 	bl	8007910 <nan>
 8004990:	4680      	mov	r8, r0
 8004992:	4689      	mov	r9, r1
 8004994:	e681      	b.n	800469a <_strtod_l+0x82>
 8004996:	9b04      	ldr	r3, [sp, #16]
 8004998:	f1bb 0f00 	cmp.w	fp, #0
 800499c:	bf08      	it	eq
 800499e:	46a3      	moveq	fp, r4
 80049a0:	1aeb      	subs	r3, r5, r3
 80049a2:	2c10      	cmp	r4, #16
 80049a4:	9806      	ldr	r0, [sp, #24]
 80049a6:	4626      	mov	r6, r4
 80049a8:	9307      	str	r3, [sp, #28]
 80049aa:	bfa8      	it	ge
 80049ac:	2610      	movge	r6, #16
 80049ae:	f7fb fd23 	bl	80003f8 <__aeabi_ui2d>
 80049b2:	2c09      	cmp	r4, #9
 80049b4:	4680      	mov	r8, r0
 80049b6:	4689      	mov	r9, r1
 80049b8:	dd13      	ble.n	80049e2 <_strtod_l+0x3ca>
 80049ba:	4b7b      	ldr	r3, [pc, #492]	; (8004ba8 <_strtod_l+0x590>)
 80049bc:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80049c0:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80049c4:	f7fb fd92 	bl	80004ec <__aeabi_dmul>
 80049c8:	4680      	mov	r8, r0
 80049ca:	9805      	ldr	r0, [sp, #20]
 80049cc:	4689      	mov	r9, r1
 80049ce:	f7fb fd13 	bl	80003f8 <__aeabi_ui2d>
 80049d2:	4602      	mov	r2, r0
 80049d4:	460b      	mov	r3, r1
 80049d6:	4640      	mov	r0, r8
 80049d8:	4649      	mov	r1, r9
 80049da:	f7fb fbd1 	bl	8000180 <__adddf3>
 80049de:	4680      	mov	r8, r0
 80049e0:	4689      	mov	r9, r1
 80049e2:	2c0f      	cmp	r4, #15
 80049e4:	dc36      	bgt.n	8004a54 <_strtod_l+0x43c>
 80049e6:	9b07      	ldr	r3, [sp, #28]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	f43f ae56 	beq.w	800469a <_strtod_l+0x82>
 80049ee:	dd22      	ble.n	8004a36 <_strtod_l+0x41e>
 80049f0:	2b16      	cmp	r3, #22
 80049f2:	dc09      	bgt.n	8004a08 <_strtod_l+0x3f0>
 80049f4:	496c      	ldr	r1, [pc, #432]	; (8004ba8 <_strtod_l+0x590>)
 80049f6:	4642      	mov	r2, r8
 80049f8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80049fc:	464b      	mov	r3, r9
 80049fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004a02:	f7fb fd73 	bl	80004ec <__aeabi_dmul>
 8004a06:	e7c3      	b.n	8004990 <_strtod_l+0x378>
 8004a08:	9a07      	ldr	r2, [sp, #28]
 8004a0a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	db20      	blt.n	8004a54 <_strtod_l+0x43c>
 8004a12:	4d65      	ldr	r5, [pc, #404]	; (8004ba8 <_strtod_l+0x590>)
 8004a14:	f1c4 040f 	rsb	r4, r4, #15
 8004a18:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8004a1c:	4642      	mov	r2, r8
 8004a1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004a22:	464b      	mov	r3, r9
 8004a24:	f7fb fd62 	bl	80004ec <__aeabi_dmul>
 8004a28:	9b07      	ldr	r3, [sp, #28]
 8004a2a:	1b1c      	subs	r4, r3, r4
 8004a2c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8004a30:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004a34:	e7e5      	b.n	8004a02 <_strtod_l+0x3ea>
 8004a36:	9b07      	ldr	r3, [sp, #28]
 8004a38:	3316      	adds	r3, #22
 8004a3a:	db0b      	blt.n	8004a54 <_strtod_l+0x43c>
 8004a3c:	9b04      	ldr	r3, [sp, #16]
 8004a3e:	4640      	mov	r0, r8
 8004a40:	1b5d      	subs	r5, r3, r5
 8004a42:	4b59      	ldr	r3, [pc, #356]	; (8004ba8 <_strtod_l+0x590>)
 8004a44:	4649      	mov	r1, r9
 8004a46:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8004a4a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004a4e:	f7fb fe77 	bl	8000740 <__aeabi_ddiv>
 8004a52:	e79d      	b.n	8004990 <_strtod_l+0x378>
 8004a54:	9b07      	ldr	r3, [sp, #28]
 8004a56:	1ba6      	subs	r6, r4, r6
 8004a58:	441e      	add	r6, r3
 8004a5a:	2e00      	cmp	r6, #0
 8004a5c:	dd74      	ble.n	8004b48 <_strtod_l+0x530>
 8004a5e:	f016 030f 	ands.w	r3, r6, #15
 8004a62:	d00a      	beq.n	8004a7a <_strtod_l+0x462>
 8004a64:	4950      	ldr	r1, [pc, #320]	; (8004ba8 <_strtod_l+0x590>)
 8004a66:	4642      	mov	r2, r8
 8004a68:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004a6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004a70:	464b      	mov	r3, r9
 8004a72:	f7fb fd3b 	bl	80004ec <__aeabi_dmul>
 8004a76:	4680      	mov	r8, r0
 8004a78:	4689      	mov	r9, r1
 8004a7a:	f036 060f 	bics.w	r6, r6, #15
 8004a7e:	d052      	beq.n	8004b26 <_strtod_l+0x50e>
 8004a80:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8004a84:	dd27      	ble.n	8004ad6 <_strtod_l+0x4be>
 8004a86:	f04f 0b00 	mov.w	fp, #0
 8004a8a:	f8cd b010 	str.w	fp, [sp, #16]
 8004a8e:	f8cd b020 	str.w	fp, [sp, #32]
 8004a92:	f8cd b018 	str.w	fp, [sp, #24]
 8004a96:	2322      	movs	r3, #34	; 0x22
 8004a98:	f04f 0800 	mov.w	r8, #0
 8004a9c:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8004ba0 <_strtod_l+0x588>
 8004aa0:	f8ca 3000 	str.w	r3, [sl]
 8004aa4:	9b08      	ldr	r3, [sp, #32]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	f43f adf7 	beq.w	800469a <_strtod_l+0x82>
 8004aac:	4650      	mov	r0, sl
 8004aae:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004ab0:	f001 ff12 	bl	80068d8 <_Bfree>
 8004ab4:	4650      	mov	r0, sl
 8004ab6:	9906      	ldr	r1, [sp, #24]
 8004ab8:	f001 ff0e 	bl	80068d8 <_Bfree>
 8004abc:	4650      	mov	r0, sl
 8004abe:	9904      	ldr	r1, [sp, #16]
 8004ac0:	f001 ff0a 	bl	80068d8 <_Bfree>
 8004ac4:	4650      	mov	r0, sl
 8004ac6:	9908      	ldr	r1, [sp, #32]
 8004ac8:	f001 ff06 	bl	80068d8 <_Bfree>
 8004acc:	4659      	mov	r1, fp
 8004ace:	4650      	mov	r0, sl
 8004ad0:	f001 ff02 	bl	80068d8 <_Bfree>
 8004ad4:	e5e1      	b.n	800469a <_strtod_l+0x82>
 8004ad6:	4b35      	ldr	r3, [pc, #212]	; (8004bac <_strtod_l+0x594>)
 8004ad8:	4640      	mov	r0, r8
 8004ada:	9305      	str	r3, [sp, #20]
 8004adc:	2300      	movs	r3, #0
 8004ade:	4649      	mov	r1, r9
 8004ae0:	461f      	mov	r7, r3
 8004ae2:	1136      	asrs	r6, r6, #4
 8004ae4:	2e01      	cmp	r6, #1
 8004ae6:	dc21      	bgt.n	8004b2c <_strtod_l+0x514>
 8004ae8:	b10b      	cbz	r3, 8004aee <_strtod_l+0x4d6>
 8004aea:	4680      	mov	r8, r0
 8004aec:	4689      	mov	r9, r1
 8004aee:	4b2f      	ldr	r3, [pc, #188]	; (8004bac <_strtod_l+0x594>)
 8004af0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8004af4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8004af8:	4642      	mov	r2, r8
 8004afa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004afe:	464b      	mov	r3, r9
 8004b00:	f7fb fcf4 	bl	80004ec <__aeabi_dmul>
 8004b04:	4b26      	ldr	r3, [pc, #152]	; (8004ba0 <_strtod_l+0x588>)
 8004b06:	460a      	mov	r2, r1
 8004b08:	400b      	ands	r3, r1
 8004b0a:	4929      	ldr	r1, [pc, #164]	; (8004bb0 <_strtod_l+0x598>)
 8004b0c:	4680      	mov	r8, r0
 8004b0e:	428b      	cmp	r3, r1
 8004b10:	d8b9      	bhi.n	8004a86 <_strtod_l+0x46e>
 8004b12:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8004b16:	428b      	cmp	r3, r1
 8004b18:	bf86      	itte	hi
 8004b1a:	f04f 38ff 	movhi.w	r8, #4294967295
 8004b1e:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8004bb4 <_strtod_l+0x59c>
 8004b22:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8004b26:	2300      	movs	r3, #0
 8004b28:	9305      	str	r3, [sp, #20]
 8004b2a:	e07f      	b.n	8004c2c <_strtod_l+0x614>
 8004b2c:	07f2      	lsls	r2, r6, #31
 8004b2e:	d505      	bpl.n	8004b3c <_strtod_l+0x524>
 8004b30:	9b05      	ldr	r3, [sp, #20]
 8004b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b36:	f7fb fcd9 	bl	80004ec <__aeabi_dmul>
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	9a05      	ldr	r2, [sp, #20]
 8004b3e:	3701      	adds	r7, #1
 8004b40:	3208      	adds	r2, #8
 8004b42:	1076      	asrs	r6, r6, #1
 8004b44:	9205      	str	r2, [sp, #20]
 8004b46:	e7cd      	b.n	8004ae4 <_strtod_l+0x4cc>
 8004b48:	d0ed      	beq.n	8004b26 <_strtod_l+0x50e>
 8004b4a:	4276      	negs	r6, r6
 8004b4c:	f016 020f 	ands.w	r2, r6, #15
 8004b50:	d00a      	beq.n	8004b68 <_strtod_l+0x550>
 8004b52:	4b15      	ldr	r3, [pc, #84]	; (8004ba8 <_strtod_l+0x590>)
 8004b54:	4640      	mov	r0, r8
 8004b56:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004b5a:	4649      	mov	r1, r9
 8004b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b60:	f7fb fdee 	bl	8000740 <__aeabi_ddiv>
 8004b64:	4680      	mov	r8, r0
 8004b66:	4689      	mov	r9, r1
 8004b68:	1136      	asrs	r6, r6, #4
 8004b6a:	d0dc      	beq.n	8004b26 <_strtod_l+0x50e>
 8004b6c:	2e1f      	cmp	r6, #31
 8004b6e:	dd23      	ble.n	8004bb8 <_strtod_l+0x5a0>
 8004b70:	f04f 0b00 	mov.w	fp, #0
 8004b74:	f8cd b010 	str.w	fp, [sp, #16]
 8004b78:	f8cd b020 	str.w	fp, [sp, #32]
 8004b7c:	f8cd b018 	str.w	fp, [sp, #24]
 8004b80:	2322      	movs	r3, #34	; 0x22
 8004b82:	f04f 0800 	mov.w	r8, #0
 8004b86:	f04f 0900 	mov.w	r9, #0
 8004b8a:	f8ca 3000 	str.w	r3, [sl]
 8004b8e:	e789      	b.n	8004aa4 <_strtod_l+0x48c>
 8004b90:	08008475 	.word	0x08008475
 8004b94:	080084b0 	.word	0x080084b0
 8004b98:	0800846d 	.word	0x0800846d
 8004b9c:	080086a4 	.word	0x080086a4
 8004ba0:	7ff00000 	.word	0x7ff00000
 8004ba4:	0800859f 	.word	0x0800859f
 8004ba8:	08008818 	.word	0x08008818
 8004bac:	080087f0 	.word	0x080087f0
 8004bb0:	7ca00000 	.word	0x7ca00000
 8004bb4:	7fefffff 	.word	0x7fefffff
 8004bb8:	f016 0310 	ands.w	r3, r6, #16
 8004bbc:	bf18      	it	ne
 8004bbe:	236a      	movne	r3, #106	; 0x6a
 8004bc0:	4640      	mov	r0, r8
 8004bc2:	9305      	str	r3, [sp, #20]
 8004bc4:	4649      	mov	r1, r9
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	4fb0      	ldr	r7, [pc, #704]	; (8004e8c <_strtod_l+0x874>)
 8004bca:	07f2      	lsls	r2, r6, #31
 8004bcc:	d504      	bpl.n	8004bd8 <_strtod_l+0x5c0>
 8004bce:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004bd2:	f7fb fc8b 	bl	80004ec <__aeabi_dmul>
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	1076      	asrs	r6, r6, #1
 8004bda:	f107 0708 	add.w	r7, r7, #8
 8004bde:	d1f4      	bne.n	8004bca <_strtod_l+0x5b2>
 8004be0:	b10b      	cbz	r3, 8004be6 <_strtod_l+0x5ce>
 8004be2:	4680      	mov	r8, r0
 8004be4:	4689      	mov	r9, r1
 8004be6:	9b05      	ldr	r3, [sp, #20]
 8004be8:	b1c3      	cbz	r3, 8004c1c <_strtod_l+0x604>
 8004bea:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8004bee:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	4649      	mov	r1, r9
 8004bf6:	dd11      	ble.n	8004c1c <_strtod_l+0x604>
 8004bf8:	2b1f      	cmp	r3, #31
 8004bfa:	f340 8127 	ble.w	8004e4c <_strtod_l+0x834>
 8004bfe:	2b34      	cmp	r3, #52	; 0x34
 8004c00:	bfd8      	it	le
 8004c02:	f04f 33ff 	movle.w	r3, #4294967295
 8004c06:	f04f 0800 	mov.w	r8, #0
 8004c0a:	bfcf      	iteee	gt
 8004c0c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8004c10:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8004c14:	fa03 f202 	lslle.w	r2, r3, r2
 8004c18:	ea02 0901 	andle.w	r9, r2, r1
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	2300      	movs	r3, #0
 8004c20:	4640      	mov	r0, r8
 8004c22:	4649      	mov	r1, r9
 8004c24:	f7fb feca 	bl	80009bc <__aeabi_dcmpeq>
 8004c28:	2800      	cmp	r0, #0
 8004c2a:	d1a1      	bne.n	8004b70 <_strtod_l+0x558>
 8004c2c:	9b06      	ldr	r3, [sp, #24]
 8004c2e:	465a      	mov	r2, fp
 8004c30:	9300      	str	r3, [sp, #0]
 8004c32:	4650      	mov	r0, sl
 8004c34:	4623      	mov	r3, r4
 8004c36:	9908      	ldr	r1, [sp, #32]
 8004c38:	f001 feb6 	bl	80069a8 <__s2b>
 8004c3c:	9008      	str	r0, [sp, #32]
 8004c3e:	2800      	cmp	r0, #0
 8004c40:	f43f af21 	beq.w	8004a86 <_strtod_l+0x46e>
 8004c44:	9b04      	ldr	r3, [sp, #16]
 8004c46:	f04f 0b00 	mov.w	fp, #0
 8004c4a:	1b5d      	subs	r5, r3, r5
 8004c4c:	9b07      	ldr	r3, [sp, #28]
 8004c4e:	f8cd b010 	str.w	fp, [sp, #16]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	bfb4      	ite	lt
 8004c56:	462b      	movlt	r3, r5
 8004c58:	2300      	movge	r3, #0
 8004c5a:	930e      	str	r3, [sp, #56]	; 0x38
 8004c5c:	9b07      	ldr	r3, [sp, #28]
 8004c5e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004c62:	9314      	str	r3, [sp, #80]	; 0x50
 8004c64:	9b08      	ldr	r3, [sp, #32]
 8004c66:	4650      	mov	r0, sl
 8004c68:	6859      	ldr	r1, [r3, #4]
 8004c6a:	f001 fdf5 	bl	8006858 <_Balloc>
 8004c6e:	9006      	str	r0, [sp, #24]
 8004c70:	2800      	cmp	r0, #0
 8004c72:	f43f af10 	beq.w	8004a96 <_strtod_l+0x47e>
 8004c76:	9b08      	ldr	r3, [sp, #32]
 8004c78:	300c      	adds	r0, #12
 8004c7a:	691a      	ldr	r2, [r3, #16]
 8004c7c:	f103 010c 	add.w	r1, r3, #12
 8004c80:	3202      	adds	r2, #2
 8004c82:	0092      	lsls	r2, r2, #2
 8004c84:	f001 fdda 	bl	800683c <memcpy>
 8004c88:	ab1c      	add	r3, sp, #112	; 0x70
 8004c8a:	9301      	str	r3, [sp, #4]
 8004c8c:	ab1b      	add	r3, sp, #108	; 0x6c
 8004c8e:	9300      	str	r3, [sp, #0]
 8004c90:	4642      	mov	r2, r8
 8004c92:	464b      	mov	r3, r9
 8004c94:	4650      	mov	r0, sl
 8004c96:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8004c9a:	f002 f9c7 	bl	800702c <__d2b>
 8004c9e:	901a      	str	r0, [sp, #104]	; 0x68
 8004ca0:	2800      	cmp	r0, #0
 8004ca2:	f43f aef8 	beq.w	8004a96 <_strtod_l+0x47e>
 8004ca6:	2101      	movs	r1, #1
 8004ca8:	4650      	mov	r0, sl
 8004caa:	f001 ff15 	bl	8006ad8 <__i2b>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	9004      	str	r0, [sp, #16]
 8004cb2:	2800      	cmp	r0, #0
 8004cb4:	f43f aeef 	beq.w	8004a96 <_strtod_l+0x47e>
 8004cb8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8004cba:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8004cbc:	2d00      	cmp	r5, #0
 8004cbe:	bfab      	itete	ge
 8004cc0:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8004cc2:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 8004cc4:	18ee      	addge	r6, r5, r3
 8004cc6:	1b5c      	sublt	r4, r3, r5
 8004cc8:	9b05      	ldr	r3, [sp, #20]
 8004cca:	bfa8      	it	ge
 8004ccc:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 8004cce:	eba5 0503 	sub.w	r5, r5, r3
 8004cd2:	4415      	add	r5, r2
 8004cd4:	4b6e      	ldr	r3, [pc, #440]	; (8004e90 <_strtod_l+0x878>)
 8004cd6:	f105 35ff 	add.w	r5, r5, #4294967295
 8004cda:	bfb8      	it	lt
 8004cdc:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8004cde:	429d      	cmp	r5, r3
 8004ce0:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8004ce4:	f280 80c4 	bge.w	8004e70 <_strtod_l+0x858>
 8004ce8:	1b5b      	subs	r3, r3, r5
 8004cea:	2b1f      	cmp	r3, #31
 8004cec:	f04f 0701 	mov.w	r7, #1
 8004cf0:	eba2 0203 	sub.w	r2, r2, r3
 8004cf4:	f300 80b1 	bgt.w	8004e5a <_strtod_l+0x842>
 8004cf8:	2500      	movs	r5, #0
 8004cfa:	fa07 f303 	lsl.w	r3, r7, r3
 8004cfe:	930f      	str	r3, [sp, #60]	; 0x3c
 8004d00:	18b7      	adds	r7, r6, r2
 8004d02:	9b05      	ldr	r3, [sp, #20]
 8004d04:	42be      	cmp	r6, r7
 8004d06:	4414      	add	r4, r2
 8004d08:	441c      	add	r4, r3
 8004d0a:	4633      	mov	r3, r6
 8004d0c:	bfa8      	it	ge
 8004d0e:	463b      	movge	r3, r7
 8004d10:	42a3      	cmp	r3, r4
 8004d12:	bfa8      	it	ge
 8004d14:	4623      	movge	r3, r4
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	bfc2      	ittt	gt
 8004d1a:	1aff      	subgt	r7, r7, r3
 8004d1c:	1ae4      	subgt	r4, r4, r3
 8004d1e:	1af6      	subgt	r6, r6, r3
 8004d20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	dd17      	ble.n	8004d56 <_strtod_l+0x73e>
 8004d26:	461a      	mov	r2, r3
 8004d28:	4650      	mov	r0, sl
 8004d2a:	9904      	ldr	r1, [sp, #16]
 8004d2c:	f001 ff92 	bl	8006c54 <__pow5mult>
 8004d30:	9004      	str	r0, [sp, #16]
 8004d32:	2800      	cmp	r0, #0
 8004d34:	f43f aeaf 	beq.w	8004a96 <_strtod_l+0x47e>
 8004d38:	4601      	mov	r1, r0
 8004d3a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8004d3c:	4650      	mov	r0, sl
 8004d3e:	f001 fee1 	bl	8006b04 <__multiply>
 8004d42:	9009      	str	r0, [sp, #36]	; 0x24
 8004d44:	2800      	cmp	r0, #0
 8004d46:	f43f aea6 	beq.w	8004a96 <_strtod_l+0x47e>
 8004d4a:	4650      	mov	r0, sl
 8004d4c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004d4e:	f001 fdc3 	bl	80068d8 <_Bfree>
 8004d52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d54:	931a      	str	r3, [sp, #104]	; 0x68
 8004d56:	2f00      	cmp	r7, #0
 8004d58:	f300 808e 	bgt.w	8004e78 <_strtod_l+0x860>
 8004d5c:	9b07      	ldr	r3, [sp, #28]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	dd08      	ble.n	8004d74 <_strtod_l+0x75c>
 8004d62:	4650      	mov	r0, sl
 8004d64:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8004d66:	9906      	ldr	r1, [sp, #24]
 8004d68:	f001 ff74 	bl	8006c54 <__pow5mult>
 8004d6c:	9006      	str	r0, [sp, #24]
 8004d6e:	2800      	cmp	r0, #0
 8004d70:	f43f ae91 	beq.w	8004a96 <_strtod_l+0x47e>
 8004d74:	2c00      	cmp	r4, #0
 8004d76:	dd08      	ble.n	8004d8a <_strtod_l+0x772>
 8004d78:	4622      	mov	r2, r4
 8004d7a:	4650      	mov	r0, sl
 8004d7c:	9906      	ldr	r1, [sp, #24]
 8004d7e:	f001 ffc3 	bl	8006d08 <__lshift>
 8004d82:	9006      	str	r0, [sp, #24]
 8004d84:	2800      	cmp	r0, #0
 8004d86:	f43f ae86 	beq.w	8004a96 <_strtod_l+0x47e>
 8004d8a:	2e00      	cmp	r6, #0
 8004d8c:	dd08      	ble.n	8004da0 <_strtod_l+0x788>
 8004d8e:	4632      	mov	r2, r6
 8004d90:	4650      	mov	r0, sl
 8004d92:	9904      	ldr	r1, [sp, #16]
 8004d94:	f001 ffb8 	bl	8006d08 <__lshift>
 8004d98:	9004      	str	r0, [sp, #16]
 8004d9a:	2800      	cmp	r0, #0
 8004d9c:	f43f ae7b 	beq.w	8004a96 <_strtod_l+0x47e>
 8004da0:	4650      	mov	r0, sl
 8004da2:	9a06      	ldr	r2, [sp, #24]
 8004da4:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004da6:	f002 f83b 	bl	8006e20 <__mdiff>
 8004daa:	4683      	mov	fp, r0
 8004dac:	2800      	cmp	r0, #0
 8004dae:	f43f ae72 	beq.w	8004a96 <_strtod_l+0x47e>
 8004db2:	2400      	movs	r4, #0
 8004db4:	68c3      	ldr	r3, [r0, #12]
 8004db6:	9904      	ldr	r1, [sp, #16]
 8004db8:	60c4      	str	r4, [r0, #12]
 8004dba:	930b      	str	r3, [sp, #44]	; 0x2c
 8004dbc:	f002 f814 	bl	8006de8 <__mcmp>
 8004dc0:	42a0      	cmp	r0, r4
 8004dc2:	da6b      	bge.n	8004e9c <_strtod_l+0x884>
 8004dc4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004dc6:	ea53 0308 	orrs.w	r3, r3, r8
 8004dca:	f040 8091 	bne.w	8004ef0 <_strtod_l+0x8d8>
 8004dce:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	f040 808c 	bne.w	8004ef0 <_strtod_l+0x8d8>
 8004dd8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004ddc:	0d1b      	lsrs	r3, r3, #20
 8004dde:	051b      	lsls	r3, r3, #20
 8004de0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8004de4:	f240 8084 	bls.w	8004ef0 <_strtod_l+0x8d8>
 8004de8:	f8db 3014 	ldr.w	r3, [fp, #20]
 8004dec:	b91b      	cbnz	r3, 8004df6 <_strtod_l+0x7de>
 8004dee:	f8db 3010 	ldr.w	r3, [fp, #16]
 8004df2:	2b01      	cmp	r3, #1
 8004df4:	dd7c      	ble.n	8004ef0 <_strtod_l+0x8d8>
 8004df6:	4659      	mov	r1, fp
 8004df8:	2201      	movs	r2, #1
 8004dfa:	4650      	mov	r0, sl
 8004dfc:	f001 ff84 	bl	8006d08 <__lshift>
 8004e00:	9904      	ldr	r1, [sp, #16]
 8004e02:	4683      	mov	fp, r0
 8004e04:	f001 fff0 	bl	8006de8 <__mcmp>
 8004e08:	2800      	cmp	r0, #0
 8004e0a:	dd71      	ble.n	8004ef0 <_strtod_l+0x8d8>
 8004e0c:	9905      	ldr	r1, [sp, #20]
 8004e0e:	464b      	mov	r3, r9
 8004e10:	4a20      	ldr	r2, [pc, #128]	; (8004e94 <_strtod_l+0x87c>)
 8004e12:	2900      	cmp	r1, #0
 8004e14:	f000 808c 	beq.w	8004f30 <_strtod_l+0x918>
 8004e18:	ea02 0109 	and.w	r1, r2, r9
 8004e1c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8004e20:	f300 8086 	bgt.w	8004f30 <_strtod_l+0x918>
 8004e24:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8004e28:	f77f aeaa 	ble.w	8004b80 <_strtod_l+0x568>
 8004e2c:	4640      	mov	r0, r8
 8004e2e:	4649      	mov	r1, r9
 8004e30:	4b19      	ldr	r3, [pc, #100]	; (8004e98 <_strtod_l+0x880>)
 8004e32:	2200      	movs	r2, #0
 8004e34:	f7fb fb5a 	bl	80004ec <__aeabi_dmul>
 8004e38:	460b      	mov	r3, r1
 8004e3a:	4303      	orrs	r3, r0
 8004e3c:	bf08      	it	eq
 8004e3e:	2322      	moveq	r3, #34	; 0x22
 8004e40:	4680      	mov	r8, r0
 8004e42:	4689      	mov	r9, r1
 8004e44:	bf08      	it	eq
 8004e46:	f8ca 3000 	streq.w	r3, [sl]
 8004e4a:	e62f      	b.n	8004aac <_strtod_l+0x494>
 8004e4c:	f04f 32ff 	mov.w	r2, #4294967295
 8004e50:	fa02 f303 	lsl.w	r3, r2, r3
 8004e54:	ea03 0808 	and.w	r8, r3, r8
 8004e58:	e6e0      	b.n	8004c1c <_strtod_l+0x604>
 8004e5a:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8004e5e:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8004e62:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8004e66:	35e2      	adds	r5, #226	; 0xe2
 8004e68:	fa07 f505 	lsl.w	r5, r7, r5
 8004e6c:	970f      	str	r7, [sp, #60]	; 0x3c
 8004e6e:	e747      	b.n	8004d00 <_strtod_l+0x6e8>
 8004e70:	2301      	movs	r3, #1
 8004e72:	2500      	movs	r5, #0
 8004e74:	930f      	str	r3, [sp, #60]	; 0x3c
 8004e76:	e743      	b.n	8004d00 <_strtod_l+0x6e8>
 8004e78:	463a      	mov	r2, r7
 8004e7a:	4650      	mov	r0, sl
 8004e7c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004e7e:	f001 ff43 	bl	8006d08 <__lshift>
 8004e82:	901a      	str	r0, [sp, #104]	; 0x68
 8004e84:	2800      	cmp	r0, #0
 8004e86:	f47f af69 	bne.w	8004d5c <_strtod_l+0x744>
 8004e8a:	e604      	b.n	8004a96 <_strtod_l+0x47e>
 8004e8c:	080084c8 	.word	0x080084c8
 8004e90:	fffffc02 	.word	0xfffffc02
 8004e94:	7ff00000 	.word	0x7ff00000
 8004e98:	39500000 	.word	0x39500000
 8004e9c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8004ea0:	d165      	bne.n	8004f6e <_strtod_l+0x956>
 8004ea2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004ea4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004ea8:	b35a      	cbz	r2, 8004f02 <_strtod_l+0x8ea>
 8004eaa:	4a99      	ldr	r2, [pc, #612]	; (8005110 <_strtod_l+0xaf8>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d12b      	bne.n	8004f08 <_strtod_l+0x8f0>
 8004eb0:	9b05      	ldr	r3, [sp, #20]
 8004eb2:	4641      	mov	r1, r8
 8004eb4:	b303      	cbz	r3, 8004ef8 <_strtod_l+0x8e0>
 8004eb6:	464a      	mov	r2, r9
 8004eb8:	4b96      	ldr	r3, [pc, #600]	; (8005114 <_strtod_l+0xafc>)
 8004eba:	4013      	ands	r3, r2
 8004ebc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8004ec0:	f04f 32ff 	mov.w	r2, #4294967295
 8004ec4:	d81b      	bhi.n	8004efe <_strtod_l+0x8e6>
 8004ec6:	0d1b      	lsrs	r3, r3, #20
 8004ec8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ed0:	4299      	cmp	r1, r3
 8004ed2:	d119      	bne.n	8004f08 <_strtod_l+0x8f0>
 8004ed4:	4b90      	ldr	r3, [pc, #576]	; (8005118 <_strtod_l+0xb00>)
 8004ed6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d102      	bne.n	8004ee2 <_strtod_l+0x8ca>
 8004edc:	3101      	adds	r1, #1
 8004ede:	f43f adda 	beq.w	8004a96 <_strtod_l+0x47e>
 8004ee2:	f04f 0800 	mov.w	r8, #0
 8004ee6:	4b8b      	ldr	r3, [pc, #556]	; (8005114 <_strtod_l+0xafc>)
 8004ee8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004eea:	401a      	ands	r2, r3
 8004eec:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8004ef0:	9b05      	ldr	r3, [sp, #20]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d19a      	bne.n	8004e2c <_strtod_l+0x814>
 8004ef6:	e5d9      	b.n	8004aac <_strtod_l+0x494>
 8004ef8:	f04f 33ff 	mov.w	r3, #4294967295
 8004efc:	e7e8      	b.n	8004ed0 <_strtod_l+0x8b8>
 8004efe:	4613      	mov	r3, r2
 8004f00:	e7e6      	b.n	8004ed0 <_strtod_l+0x8b8>
 8004f02:	ea53 0308 	orrs.w	r3, r3, r8
 8004f06:	d081      	beq.n	8004e0c <_strtod_l+0x7f4>
 8004f08:	b1e5      	cbz	r5, 8004f44 <_strtod_l+0x92c>
 8004f0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f0c:	421d      	tst	r5, r3
 8004f0e:	d0ef      	beq.n	8004ef0 <_strtod_l+0x8d8>
 8004f10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004f12:	4640      	mov	r0, r8
 8004f14:	4649      	mov	r1, r9
 8004f16:	9a05      	ldr	r2, [sp, #20]
 8004f18:	b1c3      	cbz	r3, 8004f4c <_strtod_l+0x934>
 8004f1a:	f7ff fb5a 	bl	80045d2 <sulp>
 8004f1e:	4602      	mov	r2, r0
 8004f20:	460b      	mov	r3, r1
 8004f22:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004f26:	f7fb f92b 	bl	8000180 <__adddf3>
 8004f2a:	4680      	mov	r8, r0
 8004f2c:	4689      	mov	r9, r1
 8004f2e:	e7df      	b.n	8004ef0 <_strtod_l+0x8d8>
 8004f30:	4013      	ands	r3, r2
 8004f32:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8004f36:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8004f3a:	f04f 38ff 	mov.w	r8, #4294967295
 8004f3e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8004f42:	e7d5      	b.n	8004ef0 <_strtod_l+0x8d8>
 8004f44:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004f46:	ea13 0f08 	tst.w	r3, r8
 8004f4a:	e7e0      	b.n	8004f0e <_strtod_l+0x8f6>
 8004f4c:	f7ff fb41 	bl	80045d2 <sulp>
 8004f50:	4602      	mov	r2, r0
 8004f52:	460b      	mov	r3, r1
 8004f54:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004f58:	f7fb f910 	bl	800017c <__aeabi_dsub>
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	2300      	movs	r3, #0
 8004f60:	4680      	mov	r8, r0
 8004f62:	4689      	mov	r9, r1
 8004f64:	f7fb fd2a 	bl	80009bc <__aeabi_dcmpeq>
 8004f68:	2800      	cmp	r0, #0
 8004f6a:	d0c1      	beq.n	8004ef0 <_strtod_l+0x8d8>
 8004f6c:	e608      	b.n	8004b80 <_strtod_l+0x568>
 8004f6e:	4658      	mov	r0, fp
 8004f70:	9904      	ldr	r1, [sp, #16]
 8004f72:	f002 f8b7 	bl	80070e4 <__ratio>
 8004f76:	2200      	movs	r2, #0
 8004f78:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004f7c:	4606      	mov	r6, r0
 8004f7e:	460f      	mov	r7, r1
 8004f80:	f7fb fd30 	bl	80009e4 <__aeabi_dcmple>
 8004f84:	2800      	cmp	r0, #0
 8004f86:	d070      	beq.n	800506a <_strtod_l+0xa52>
 8004f88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d042      	beq.n	8005014 <_strtod_l+0x9fc>
 8004f8e:	2600      	movs	r6, #0
 8004f90:	4f62      	ldr	r7, [pc, #392]	; (800511c <_strtod_l+0xb04>)
 8004f92:	4d62      	ldr	r5, [pc, #392]	; (800511c <_strtod_l+0xb04>)
 8004f94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f96:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004f9a:	0d1b      	lsrs	r3, r3, #20
 8004f9c:	051b      	lsls	r3, r3, #20
 8004f9e:	930f      	str	r3, [sp, #60]	; 0x3c
 8004fa0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004fa2:	4b5f      	ldr	r3, [pc, #380]	; (8005120 <_strtod_l+0xb08>)
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	f040 80c3 	bne.w	8005130 <_strtod_l+0xb18>
 8004faa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fac:	4640      	mov	r0, r8
 8004fae:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8004fb2:	4649      	mov	r1, r9
 8004fb4:	f001 ffc0 	bl	8006f38 <__ulp>
 8004fb8:	4602      	mov	r2, r0
 8004fba:	460b      	mov	r3, r1
 8004fbc:	4630      	mov	r0, r6
 8004fbe:	4639      	mov	r1, r7
 8004fc0:	f7fb fa94 	bl	80004ec <__aeabi_dmul>
 8004fc4:	4642      	mov	r2, r8
 8004fc6:	464b      	mov	r3, r9
 8004fc8:	f7fb f8da 	bl	8000180 <__adddf3>
 8004fcc:	460b      	mov	r3, r1
 8004fce:	4951      	ldr	r1, [pc, #324]	; (8005114 <_strtod_l+0xafc>)
 8004fd0:	4a54      	ldr	r2, [pc, #336]	; (8005124 <_strtod_l+0xb0c>)
 8004fd2:	4019      	ands	r1, r3
 8004fd4:	4291      	cmp	r1, r2
 8004fd6:	4680      	mov	r8, r0
 8004fd8:	d95d      	bls.n	8005096 <_strtod_l+0xa7e>
 8004fda:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004fdc:	4b4e      	ldr	r3, [pc, #312]	; (8005118 <_strtod_l+0xb00>)
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d103      	bne.n	8004fea <_strtod_l+0x9d2>
 8004fe2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004fe4:	3301      	adds	r3, #1
 8004fe6:	f43f ad56 	beq.w	8004a96 <_strtod_l+0x47e>
 8004fea:	f04f 38ff 	mov.w	r8, #4294967295
 8004fee:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8005118 <_strtod_l+0xb00>
 8004ff2:	4650      	mov	r0, sl
 8004ff4:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004ff6:	f001 fc6f 	bl	80068d8 <_Bfree>
 8004ffa:	4650      	mov	r0, sl
 8004ffc:	9906      	ldr	r1, [sp, #24]
 8004ffe:	f001 fc6b 	bl	80068d8 <_Bfree>
 8005002:	4650      	mov	r0, sl
 8005004:	9904      	ldr	r1, [sp, #16]
 8005006:	f001 fc67 	bl	80068d8 <_Bfree>
 800500a:	4659      	mov	r1, fp
 800500c:	4650      	mov	r0, sl
 800500e:	f001 fc63 	bl	80068d8 <_Bfree>
 8005012:	e627      	b.n	8004c64 <_strtod_l+0x64c>
 8005014:	f1b8 0f00 	cmp.w	r8, #0
 8005018:	d119      	bne.n	800504e <_strtod_l+0xa36>
 800501a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800501c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005020:	b9e3      	cbnz	r3, 800505c <_strtod_l+0xa44>
 8005022:	2200      	movs	r2, #0
 8005024:	4630      	mov	r0, r6
 8005026:	4639      	mov	r1, r7
 8005028:	4b3c      	ldr	r3, [pc, #240]	; (800511c <_strtod_l+0xb04>)
 800502a:	f7fb fcd1 	bl	80009d0 <__aeabi_dcmplt>
 800502e:	b9c8      	cbnz	r0, 8005064 <_strtod_l+0xa4c>
 8005030:	2200      	movs	r2, #0
 8005032:	4630      	mov	r0, r6
 8005034:	4639      	mov	r1, r7
 8005036:	4b3c      	ldr	r3, [pc, #240]	; (8005128 <_strtod_l+0xb10>)
 8005038:	f7fb fa58 	bl	80004ec <__aeabi_dmul>
 800503c:	4604      	mov	r4, r0
 800503e:	460d      	mov	r5, r1
 8005040:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8005044:	9416      	str	r4, [sp, #88]	; 0x58
 8005046:	9317      	str	r3, [sp, #92]	; 0x5c
 8005048:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 800504c:	e7a2      	b.n	8004f94 <_strtod_l+0x97c>
 800504e:	f1b8 0f01 	cmp.w	r8, #1
 8005052:	d103      	bne.n	800505c <_strtod_l+0xa44>
 8005054:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005056:	2b00      	cmp	r3, #0
 8005058:	f43f ad92 	beq.w	8004b80 <_strtod_l+0x568>
 800505c:	2600      	movs	r6, #0
 800505e:	2400      	movs	r4, #0
 8005060:	4f32      	ldr	r7, [pc, #200]	; (800512c <_strtod_l+0xb14>)
 8005062:	e796      	b.n	8004f92 <_strtod_l+0x97a>
 8005064:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8005066:	4d30      	ldr	r5, [pc, #192]	; (8005128 <_strtod_l+0xb10>)
 8005068:	e7ea      	b.n	8005040 <_strtod_l+0xa28>
 800506a:	4b2f      	ldr	r3, [pc, #188]	; (8005128 <_strtod_l+0xb10>)
 800506c:	2200      	movs	r2, #0
 800506e:	4630      	mov	r0, r6
 8005070:	4639      	mov	r1, r7
 8005072:	f7fb fa3b 	bl	80004ec <__aeabi_dmul>
 8005076:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005078:	4604      	mov	r4, r0
 800507a:	460d      	mov	r5, r1
 800507c:	b933      	cbnz	r3, 800508c <_strtod_l+0xa74>
 800507e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005082:	9010      	str	r0, [sp, #64]	; 0x40
 8005084:	9311      	str	r3, [sp, #68]	; 0x44
 8005086:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800508a:	e783      	b.n	8004f94 <_strtod_l+0x97c>
 800508c:	4602      	mov	r2, r0
 800508e:	460b      	mov	r3, r1
 8005090:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8005094:	e7f7      	b.n	8005086 <_strtod_l+0xa6e>
 8005096:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800509a:	9b05      	ldr	r3, [sp, #20]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d1a8      	bne.n	8004ff2 <_strtod_l+0x9da>
 80050a0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80050a4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80050a6:	0d1b      	lsrs	r3, r3, #20
 80050a8:	051b      	lsls	r3, r3, #20
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d1a1      	bne.n	8004ff2 <_strtod_l+0x9da>
 80050ae:	4620      	mov	r0, r4
 80050b0:	4629      	mov	r1, r5
 80050b2:	f7fb fd13 	bl	8000adc <__aeabi_d2lz>
 80050b6:	f7fb f9eb 	bl	8000490 <__aeabi_l2d>
 80050ba:	4602      	mov	r2, r0
 80050bc:	460b      	mov	r3, r1
 80050be:	4620      	mov	r0, r4
 80050c0:	4629      	mov	r1, r5
 80050c2:	f7fb f85b 	bl	800017c <__aeabi_dsub>
 80050c6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80050c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80050cc:	ea43 0308 	orr.w	r3, r3, r8
 80050d0:	4313      	orrs	r3, r2
 80050d2:	4604      	mov	r4, r0
 80050d4:	460d      	mov	r5, r1
 80050d6:	d066      	beq.n	80051a6 <_strtod_l+0xb8e>
 80050d8:	a309      	add	r3, pc, #36	; (adr r3, 8005100 <_strtod_l+0xae8>)
 80050da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050de:	f7fb fc77 	bl	80009d0 <__aeabi_dcmplt>
 80050e2:	2800      	cmp	r0, #0
 80050e4:	f47f ace2 	bne.w	8004aac <_strtod_l+0x494>
 80050e8:	a307      	add	r3, pc, #28	; (adr r3, 8005108 <_strtod_l+0xaf0>)
 80050ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ee:	4620      	mov	r0, r4
 80050f0:	4629      	mov	r1, r5
 80050f2:	f7fb fc8b 	bl	8000a0c <__aeabi_dcmpgt>
 80050f6:	2800      	cmp	r0, #0
 80050f8:	f43f af7b 	beq.w	8004ff2 <_strtod_l+0x9da>
 80050fc:	e4d6      	b.n	8004aac <_strtod_l+0x494>
 80050fe:	bf00      	nop
 8005100:	94a03595 	.word	0x94a03595
 8005104:	3fdfffff 	.word	0x3fdfffff
 8005108:	35afe535 	.word	0x35afe535
 800510c:	3fe00000 	.word	0x3fe00000
 8005110:	000fffff 	.word	0x000fffff
 8005114:	7ff00000 	.word	0x7ff00000
 8005118:	7fefffff 	.word	0x7fefffff
 800511c:	3ff00000 	.word	0x3ff00000
 8005120:	7fe00000 	.word	0x7fe00000
 8005124:	7c9fffff 	.word	0x7c9fffff
 8005128:	3fe00000 	.word	0x3fe00000
 800512c:	bff00000 	.word	0xbff00000
 8005130:	9b05      	ldr	r3, [sp, #20]
 8005132:	b313      	cbz	r3, 800517a <_strtod_l+0xb62>
 8005134:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005136:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800513a:	d81e      	bhi.n	800517a <_strtod_l+0xb62>
 800513c:	a326      	add	r3, pc, #152	; (adr r3, 80051d8 <_strtod_l+0xbc0>)
 800513e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005142:	4620      	mov	r0, r4
 8005144:	4629      	mov	r1, r5
 8005146:	f7fb fc4d 	bl	80009e4 <__aeabi_dcmple>
 800514a:	b190      	cbz	r0, 8005172 <_strtod_l+0xb5a>
 800514c:	4629      	mov	r1, r5
 800514e:	4620      	mov	r0, r4
 8005150:	f7fb fca4 	bl	8000a9c <__aeabi_d2uiz>
 8005154:	2801      	cmp	r0, #1
 8005156:	bf38      	it	cc
 8005158:	2001      	movcc	r0, #1
 800515a:	f7fb f94d 	bl	80003f8 <__aeabi_ui2d>
 800515e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005160:	4604      	mov	r4, r0
 8005162:	460d      	mov	r5, r1
 8005164:	b9d3      	cbnz	r3, 800519c <_strtod_l+0xb84>
 8005166:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800516a:	9012      	str	r0, [sp, #72]	; 0x48
 800516c:	9313      	str	r3, [sp, #76]	; 0x4c
 800516e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8005172:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005174:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8005178:	1a9f      	subs	r7, r3, r2
 800517a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800517e:	f001 fedb 	bl	8006f38 <__ulp>
 8005182:	4602      	mov	r2, r0
 8005184:	460b      	mov	r3, r1
 8005186:	4630      	mov	r0, r6
 8005188:	4639      	mov	r1, r7
 800518a:	f7fb f9af 	bl	80004ec <__aeabi_dmul>
 800518e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005192:	f7fa fff5 	bl	8000180 <__adddf3>
 8005196:	4680      	mov	r8, r0
 8005198:	4689      	mov	r9, r1
 800519a:	e77e      	b.n	800509a <_strtod_l+0xa82>
 800519c:	4602      	mov	r2, r0
 800519e:	460b      	mov	r3, r1
 80051a0:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 80051a4:	e7e3      	b.n	800516e <_strtod_l+0xb56>
 80051a6:	a30e      	add	r3, pc, #56	; (adr r3, 80051e0 <_strtod_l+0xbc8>)
 80051a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ac:	f7fb fc10 	bl	80009d0 <__aeabi_dcmplt>
 80051b0:	e7a1      	b.n	80050f6 <_strtod_l+0xade>
 80051b2:	2300      	movs	r3, #0
 80051b4:	930a      	str	r3, [sp, #40]	; 0x28
 80051b6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80051b8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80051ba:	6013      	str	r3, [r2, #0]
 80051bc:	f7ff ba71 	b.w	80046a2 <_strtod_l+0x8a>
 80051c0:	2a65      	cmp	r2, #101	; 0x65
 80051c2:	f43f ab63 	beq.w	800488c <_strtod_l+0x274>
 80051c6:	2a45      	cmp	r2, #69	; 0x45
 80051c8:	f43f ab60 	beq.w	800488c <_strtod_l+0x274>
 80051cc:	2301      	movs	r3, #1
 80051ce:	f7ff bb95 	b.w	80048fc <_strtod_l+0x2e4>
 80051d2:	bf00      	nop
 80051d4:	f3af 8000 	nop.w
 80051d8:	ffc00000 	.word	0xffc00000
 80051dc:	41dfffff 	.word	0x41dfffff
 80051e0:	94a03595 	.word	0x94a03595
 80051e4:	3fcfffff 	.word	0x3fcfffff

080051e8 <strtod>:
 80051e8:	460a      	mov	r2, r1
 80051ea:	4601      	mov	r1, r0
 80051ec:	4802      	ldr	r0, [pc, #8]	; (80051f8 <strtod+0x10>)
 80051ee:	4b03      	ldr	r3, [pc, #12]	; (80051fc <strtod+0x14>)
 80051f0:	6800      	ldr	r0, [r0, #0]
 80051f2:	f7ff ba11 	b.w	8004618 <_strtod_l>
 80051f6:	bf00      	nop
 80051f8:	200000a4 	.word	0x200000a4
 80051fc:	2000010c 	.word	0x2000010c

08005200 <strtok>:
 8005200:	4b16      	ldr	r3, [pc, #88]	; (800525c <strtok+0x5c>)
 8005202:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005206:	681f      	ldr	r7, [r3, #0]
 8005208:	4605      	mov	r5, r0
 800520a:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 800520c:	460e      	mov	r6, r1
 800520e:	b9ec      	cbnz	r4, 800524c <strtok+0x4c>
 8005210:	2050      	movs	r0, #80	; 0x50
 8005212:	f001 faeb 	bl	80067ec <malloc>
 8005216:	4602      	mov	r2, r0
 8005218:	65b8      	str	r0, [r7, #88]	; 0x58
 800521a:	b920      	cbnz	r0, 8005226 <strtok+0x26>
 800521c:	2157      	movs	r1, #87	; 0x57
 800521e:	4b10      	ldr	r3, [pc, #64]	; (8005260 <strtok+0x60>)
 8005220:	4810      	ldr	r0, [pc, #64]	; (8005264 <strtok+0x64>)
 8005222:	f000 f8cf 	bl	80053c4 <__assert_func>
 8005226:	e9c0 4400 	strd	r4, r4, [r0]
 800522a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800522e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8005232:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8005236:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800523a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800523e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8005242:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8005246:	6184      	str	r4, [r0, #24]
 8005248:	7704      	strb	r4, [r0, #28]
 800524a:	6244      	str	r4, [r0, #36]	; 0x24
 800524c:	4631      	mov	r1, r6
 800524e:	4628      	mov	r0, r5
 8005250:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005252:	2301      	movs	r3, #1
 8005254:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005258:	f000 b806 	b.w	8005268 <__strtok_r>
 800525c:	200000a4 	.word	0x200000a4
 8005260:	080084f0 	.word	0x080084f0
 8005264:	08008507 	.word	0x08008507

08005268 <__strtok_r>:
 8005268:	b5f0      	push	{r4, r5, r6, r7, lr}
 800526a:	b908      	cbnz	r0, 8005270 <__strtok_r+0x8>
 800526c:	6810      	ldr	r0, [r2, #0]
 800526e:	b188      	cbz	r0, 8005294 <__strtok_r+0x2c>
 8005270:	4604      	mov	r4, r0
 8005272:	460f      	mov	r7, r1
 8005274:	4620      	mov	r0, r4
 8005276:	f814 5b01 	ldrb.w	r5, [r4], #1
 800527a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800527e:	b91e      	cbnz	r6, 8005288 <__strtok_r+0x20>
 8005280:	b965      	cbnz	r5, 800529c <__strtok_r+0x34>
 8005282:	4628      	mov	r0, r5
 8005284:	6015      	str	r5, [r2, #0]
 8005286:	e005      	b.n	8005294 <__strtok_r+0x2c>
 8005288:	42b5      	cmp	r5, r6
 800528a:	d1f6      	bne.n	800527a <__strtok_r+0x12>
 800528c:	2b00      	cmp	r3, #0
 800528e:	d1f0      	bne.n	8005272 <__strtok_r+0xa>
 8005290:	6014      	str	r4, [r2, #0]
 8005292:	7003      	strb	r3, [r0, #0]
 8005294:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005296:	461c      	mov	r4, r3
 8005298:	e00c      	b.n	80052b4 <__strtok_r+0x4c>
 800529a:	b915      	cbnz	r5, 80052a2 <__strtok_r+0x3a>
 800529c:	460e      	mov	r6, r1
 800529e:	f814 3b01 	ldrb.w	r3, [r4], #1
 80052a2:	f816 5b01 	ldrb.w	r5, [r6], #1
 80052a6:	42ab      	cmp	r3, r5
 80052a8:	d1f7      	bne.n	800529a <__strtok_r+0x32>
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d0f3      	beq.n	8005296 <__strtok_r+0x2e>
 80052ae:	2300      	movs	r3, #0
 80052b0:	f804 3c01 	strb.w	r3, [r4, #-1]
 80052b4:	6014      	str	r4, [r2, #0]
 80052b6:	e7ed      	b.n	8005294 <__strtok_r+0x2c>

080052b8 <_strtol_l.constprop.0>:
 80052b8:	2b01      	cmp	r3, #1
 80052ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052be:	4680      	mov	r8, r0
 80052c0:	d001      	beq.n	80052c6 <_strtol_l.constprop.0+0xe>
 80052c2:	2b24      	cmp	r3, #36	; 0x24
 80052c4:	d906      	bls.n	80052d4 <_strtol_l.constprop.0+0x1c>
 80052c6:	f7fe fcc3 	bl	8003c50 <__errno>
 80052ca:	2316      	movs	r3, #22
 80052cc:	6003      	str	r3, [r0, #0]
 80052ce:	2000      	movs	r0, #0
 80052d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052d4:	460d      	mov	r5, r1
 80052d6:	4f35      	ldr	r7, [pc, #212]	; (80053ac <_strtol_l.constprop.0+0xf4>)
 80052d8:	4628      	mov	r0, r5
 80052da:	f815 4b01 	ldrb.w	r4, [r5], #1
 80052de:	5de6      	ldrb	r6, [r4, r7]
 80052e0:	f016 0608 	ands.w	r6, r6, #8
 80052e4:	d1f8      	bne.n	80052d8 <_strtol_l.constprop.0+0x20>
 80052e6:	2c2d      	cmp	r4, #45	; 0x2d
 80052e8:	d12f      	bne.n	800534a <_strtol_l.constprop.0+0x92>
 80052ea:	2601      	movs	r6, #1
 80052ec:	782c      	ldrb	r4, [r5, #0]
 80052ee:	1c85      	adds	r5, r0, #2
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d057      	beq.n	80053a4 <_strtol_l.constprop.0+0xec>
 80052f4:	2b10      	cmp	r3, #16
 80052f6:	d109      	bne.n	800530c <_strtol_l.constprop.0+0x54>
 80052f8:	2c30      	cmp	r4, #48	; 0x30
 80052fa:	d107      	bne.n	800530c <_strtol_l.constprop.0+0x54>
 80052fc:	7828      	ldrb	r0, [r5, #0]
 80052fe:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8005302:	2858      	cmp	r0, #88	; 0x58
 8005304:	d149      	bne.n	800539a <_strtol_l.constprop.0+0xe2>
 8005306:	2310      	movs	r3, #16
 8005308:	786c      	ldrb	r4, [r5, #1]
 800530a:	3502      	adds	r5, #2
 800530c:	2700      	movs	r7, #0
 800530e:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8005312:	f10e 3eff 	add.w	lr, lr, #4294967295
 8005316:	fbbe f9f3 	udiv	r9, lr, r3
 800531a:	4638      	mov	r0, r7
 800531c:	fb03 ea19 	mls	sl, r3, r9, lr
 8005320:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8005324:	f1bc 0f09 	cmp.w	ip, #9
 8005328:	d814      	bhi.n	8005354 <_strtol_l.constprop.0+0x9c>
 800532a:	4664      	mov	r4, ip
 800532c:	42a3      	cmp	r3, r4
 800532e:	dd22      	ble.n	8005376 <_strtol_l.constprop.0+0xbe>
 8005330:	2f00      	cmp	r7, #0
 8005332:	db1d      	blt.n	8005370 <_strtol_l.constprop.0+0xb8>
 8005334:	4581      	cmp	r9, r0
 8005336:	d31b      	bcc.n	8005370 <_strtol_l.constprop.0+0xb8>
 8005338:	d101      	bne.n	800533e <_strtol_l.constprop.0+0x86>
 800533a:	45a2      	cmp	sl, r4
 800533c:	db18      	blt.n	8005370 <_strtol_l.constprop.0+0xb8>
 800533e:	2701      	movs	r7, #1
 8005340:	fb00 4003 	mla	r0, r0, r3, r4
 8005344:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005348:	e7ea      	b.n	8005320 <_strtol_l.constprop.0+0x68>
 800534a:	2c2b      	cmp	r4, #43	; 0x2b
 800534c:	bf04      	itt	eq
 800534e:	782c      	ldrbeq	r4, [r5, #0]
 8005350:	1c85      	addeq	r5, r0, #2
 8005352:	e7cd      	b.n	80052f0 <_strtol_l.constprop.0+0x38>
 8005354:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8005358:	f1bc 0f19 	cmp.w	ip, #25
 800535c:	d801      	bhi.n	8005362 <_strtol_l.constprop.0+0xaa>
 800535e:	3c37      	subs	r4, #55	; 0x37
 8005360:	e7e4      	b.n	800532c <_strtol_l.constprop.0+0x74>
 8005362:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8005366:	f1bc 0f19 	cmp.w	ip, #25
 800536a:	d804      	bhi.n	8005376 <_strtol_l.constprop.0+0xbe>
 800536c:	3c57      	subs	r4, #87	; 0x57
 800536e:	e7dd      	b.n	800532c <_strtol_l.constprop.0+0x74>
 8005370:	f04f 37ff 	mov.w	r7, #4294967295
 8005374:	e7e6      	b.n	8005344 <_strtol_l.constprop.0+0x8c>
 8005376:	2f00      	cmp	r7, #0
 8005378:	da07      	bge.n	800538a <_strtol_l.constprop.0+0xd2>
 800537a:	2322      	movs	r3, #34	; 0x22
 800537c:	4670      	mov	r0, lr
 800537e:	f8c8 3000 	str.w	r3, [r8]
 8005382:	2a00      	cmp	r2, #0
 8005384:	d0a4      	beq.n	80052d0 <_strtol_l.constprop.0+0x18>
 8005386:	1e69      	subs	r1, r5, #1
 8005388:	e005      	b.n	8005396 <_strtol_l.constprop.0+0xde>
 800538a:	b106      	cbz	r6, 800538e <_strtol_l.constprop.0+0xd6>
 800538c:	4240      	negs	r0, r0
 800538e:	2a00      	cmp	r2, #0
 8005390:	d09e      	beq.n	80052d0 <_strtol_l.constprop.0+0x18>
 8005392:	2f00      	cmp	r7, #0
 8005394:	d1f7      	bne.n	8005386 <_strtol_l.constprop.0+0xce>
 8005396:	6011      	str	r1, [r2, #0]
 8005398:	e79a      	b.n	80052d0 <_strtol_l.constprop.0+0x18>
 800539a:	2430      	movs	r4, #48	; 0x30
 800539c:	2b00      	cmp	r3, #0
 800539e:	d1b5      	bne.n	800530c <_strtol_l.constprop.0+0x54>
 80053a0:	2308      	movs	r3, #8
 80053a2:	e7b3      	b.n	800530c <_strtol_l.constprop.0+0x54>
 80053a4:	2c30      	cmp	r4, #48	; 0x30
 80053a6:	d0a9      	beq.n	80052fc <_strtol_l.constprop.0+0x44>
 80053a8:	230a      	movs	r3, #10
 80053aa:	e7af      	b.n	800530c <_strtol_l.constprop.0+0x54>
 80053ac:	080085a1 	.word	0x080085a1

080053b0 <strtol>:
 80053b0:	4613      	mov	r3, r2
 80053b2:	460a      	mov	r2, r1
 80053b4:	4601      	mov	r1, r0
 80053b6:	4802      	ldr	r0, [pc, #8]	; (80053c0 <strtol+0x10>)
 80053b8:	6800      	ldr	r0, [r0, #0]
 80053ba:	f7ff bf7d 	b.w	80052b8 <_strtol_l.constprop.0>
 80053be:	bf00      	nop
 80053c0:	200000a4 	.word	0x200000a4

080053c4 <__assert_func>:
 80053c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80053c6:	4614      	mov	r4, r2
 80053c8:	461a      	mov	r2, r3
 80053ca:	4b09      	ldr	r3, [pc, #36]	; (80053f0 <__assert_func+0x2c>)
 80053cc:	4605      	mov	r5, r0
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	68d8      	ldr	r0, [r3, #12]
 80053d2:	b14c      	cbz	r4, 80053e8 <__assert_func+0x24>
 80053d4:	4b07      	ldr	r3, [pc, #28]	; (80053f4 <__assert_func+0x30>)
 80053d6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80053da:	9100      	str	r1, [sp, #0]
 80053dc:	462b      	mov	r3, r5
 80053de:	4906      	ldr	r1, [pc, #24]	; (80053f8 <__assert_func+0x34>)
 80053e0:	f000 fe88 	bl	80060f4 <fiprintf>
 80053e4:	f002 fb8c 	bl	8007b00 <abort>
 80053e8:	4b04      	ldr	r3, [pc, #16]	; (80053fc <__assert_func+0x38>)
 80053ea:	461c      	mov	r4, r3
 80053ec:	e7f3      	b.n	80053d6 <__assert_func+0x12>
 80053ee:	bf00      	nop
 80053f0:	200000a4 	.word	0x200000a4
 80053f4:	08008564 	.word	0x08008564
 80053f8:	08008571 	.word	0x08008571
 80053fc:	0800859f 	.word	0x0800859f

08005400 <quorem>:
 8005400:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005404:	6903      	ldr	r3, [r0, #16]
 8005406:	690c      	ldr	r4, [r1, #16]
 8005408:	4607      	mov	r7, r0
 800540a:	42a3      	cmp	r3, r4
 800540c:	f2c0 8082 	blt.w	8005514 <quorem+0x114>
 8005410:	3c01      	subs	r4, #1
 8005412:	f100 0514 	add.w	r5, r0, #20
 8005416:	f101 0814 	add.w	r8, r1, #20
 800541a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800541e:	9301      	str	r3, [sp, #4]
 8005420:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005424:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005428:	3301      	adds	r3, #1
 800542a:	429a      	cmp	r2, r3
 800542c:	fbb2 f6f3 	udiv	r6, r2, r3
 8005430:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005434:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005438:	d331      	bcc.n	800549e <quorem+0x9e>
 800543a:	f04f 0e00 	mov.w	lr, #0
 800543e:	4640      	mov	r0, r8
 8005440:	46ac      	mov	ip, r5
 8005442:	46f2      	mov	sl, lr
 8005444:	f850 2b04 	ldr.w	r2, [r0], #4
 8005448:	b293      	uxth	r3, r2
 800544a:	fb06 e303 	mla	r3, r6, r3, lr
 800544e:	0c12      	lsrs	r2, r2, #16
 8005450:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005454:	b29b      	uxth	r3, r3
 8005456:	fb06 e202 	mla	r2, r6, r2, lr
 800545a:	ebaa 0303 	sub.w	r3, sl, r3
 800545e:	f8dc a000 	ldr.w	sl, [ip]
 8005462:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005466:	fa1f fa8a 	uxth.w	sl, sl
 800546a:	4453      	add	r3, sl
 800546c:	f8dc a000 	ldr.w	sl, [ip]
 8005470:	b292      	uxth	r2, r2
 8005472:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005476:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800547a:	b29b      	uxth	r3, r3
 800547c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005480:	4581      	cmp	r9, r0
 8005482:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005486:	f84c 3b04 	str.w	r3, [ip], #4
 800548a:	d2db      	bcs.n	8005444 <quorem+0x44>
 800548c:	f855 300b 	ldr.w	r3, [r5, fp]
 8005490:	b92b      	cbnz	r3, 800549e <quorem+0x9e>
 8005492:	9b01      	ldr	r3, [sp, #4]
 8005494:	3b04      	subs	r3, #4
 8005496:	429d      	cmp	r5, r3
 8005498:	461a      	mov	r2, r3
 800549a:	d32f      	bcc.n	80054fc <quorem+0xfc>
 800549c:	613c      	str	r4, [r7, #16]
 800549e:	4638      	mov	r0, r7
 80054a0:	f001 fca2 	bl	8006de8 <__mcmp>
 80054a4:	2800      	cmp	r0, #0
 80054a6:	db25      	blt.n	80054f4 <quorem+0xf4>
 80054a8:	4628      	mov	r0, r5
 80054aa:	f04f 0c00 	mov.w	ip, #0
 80054ae:	3601      	adds	r6, #1
 80054b0:	f858 1b04 	ldr.w	r1, [r8], #4
 80054b4:	f8d0 e000 	ldr.w	lr, [r0]
 80054b8:	b28b      	uxth	r3, r1
 80054ba:	ebac 0303 	sub.w	r3, ip, r3
 80054be:	fa1f f28e 	uxth.w	r2, lr
 80054c2:	4413      	add	r3, r2
 80054c4:	0c0a      	lsrs	r2, r1, #16
 80054c6:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80054ca:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80054ce:	b29b      	uxth	r3, r3
 80054d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80054d4:	45c1      	cmp	r9, r8
 80054d6:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80054da:	f840 3b04 	str.w	r3, [r0], #4
 80054de:	d2e7      	bcs.n	80054b0 <quorem+0xb0>
 80054e0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80054e4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80054e8:	b922      	cbnz	r2, 80054f4 <quorem+0xf4>
 80054ea:	3b04      	subs	r3, #4
 80054ec:	429d      	cmp	r5, r3
 80054ee:	461a      	mov	r2, r3
 80054f0:	d30a      	bcc.n	8005508 <quorem+0x108>
 80054f2:	613c      	str	r4, [r7, #16]
 80054f4:	4630      	mov	r0, r6
 80054f6:	b003      	add	sp, #12
 80054f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054fc:	6812      	ldr	r2, [r2, #0]
 80054fe:	3b04      	subs	r3, #4
 8005500:	2a00      	cmp	r2, #0
 8005502:	d1cb      	bne.n	800549c <quorem+0x9c>
 8005504:	3c01      	subs	r4, #1
 8005506:	e7c6      	b.n	8005496 <quorem+0x96>
 8005508:	6812      	ldr	r2, [r2, #0]
 800550a:	3b04      	subs	r3, #4
 800550c:	2a00      	cmp	r2, #0
 800550e:	d1f0      	bne.n	80054f2 <quorem+0xf2>
 8005510:	3c01      	subs	r4, #1
 8005512:	e7eb      	b.n	80054ec <quorem+0xec>
 8005514:	2000      	movs	r0, #0
 8005516:	e7ee      	b.n	80054f6 <quorem+0xf6>

08005518 <_dtoa_r>:
 8005518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800551c:	4616      	mov	r6, r2
 800551e:	461f      	mov	r7, r3
 8005520:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005522:	b099      	sub	sp, #100	; 0x64
 8005524:	4605      	mov	r5, r0
 8005526:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800552a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800552e:	b974      	cbnz	r4, 800554e <_dtoa_r+0x36>
 8005530:	2010      	movs	r0, #16
 8005532:	f001 f95b 	bl	80067ec <malloc>
 8005536:	4602      	mov	r2, r0
 8005538:	6268      	str	r0, [r5, #36]	; 0x24
 800553a:	b920      	cbnz	r0, 8005546 <_dtoa_r+0x2e>
 800553c:	21ea      	movs	r1, #234	; 0xea
 800553e:	4ba8      	ldr	r3, [pc, #672]	; (80057e0 <_dtoa_r+0x2c8>)
 8005540:	48a8      	ldr	r0, [pc, #672]	; (80057e4 <_dtoa_r+0x2cc>)
 8005542:	f7ff ff3f 	bl	80053c4 <__assert_func>
 8005546:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800554a:	6004      	str	r4, [r0, #0]
 800554c:	60c4      	str	r4, [r0, #12]
 800554e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005550:	6819      	ldr	r1, [r3, #0]
 8005552:	b151      	cbz	r1, 800556a <_dtoa_r+0x52>
 8005554:	685a      	ldr	r2, [r3, #4]
 8005556:	2301      	movs	r3, #1
 8005558:	4093      	lsls	r3, r2
 800555a:	604a      	str	r2, [r1, #4]
 800555c:	608b      	str	r3, [r1, #8]
 800555e:	4628      	mov	r0, r5
 8005560:	f001 f9ba 	bl	80068d8 <_Bfree>
 8005564:	2200      	movs	r2, #0
 8005566:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005568:	601a      	str	r2, [r3, #0]
 800556a:	1e3b      	subs	r3, r7, #0
 800556c:	bfaf      	iteee	ge
 800556e:	2300      	movge	r3, #0
 8005570:	2201      	movlt	r2, #1
 8005572:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005576:	9305      	strlt	r3, [sp, #20]
 8005578:	bfa8      	it	ge
 800557a:	f8c8 3000 	strge.w	r3, [r8]
 800557e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8005582:	4b99      	ldr	r3, [pc, #612]	; (80057e8 <_dtoa_r+0x2d0>)
 8005584:	bfb8      	it	lt
 8005586:	f8c8 2000 	strlt.w	r2, [r8]
 800558a:	ea33 0309 	bics.w	r3, r3, r9
 800558e:	d119      	bne.n	80055c4 <_dtoa_r+0xac>
 8005590:	f242 730f 	movw	r3, #9999	; 0x270f
 8005594:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005596:	6013      	str	r3, [r2, #0]
 8005598:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800559c:	4333      	orrs	r3, r6
 800559e:	f000 857f 	beq.w	80060a0 <_dtoa_r+0xb88>
 80055a2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80055a4:	b953      	cbnz	r3, 80055bc <_dtoa_r+0xa4>
 80055a6:	4b91      	ldr	r3, [pc, #580]	; (80057ec <_dtoa_r+0x2d4>)
 80055a8:	e022      	b.n	80055f0 <_dtoa_r+0xd8>
 80055aa:	4b91      	ldr	r3, [pc, #580]	; (80057f0 <_dtoa_r+0x2d8>)
 80055ac:	9303      	str	r3, [sp, #12]
 80055ae:	3308      	adds	r3, #8
 80055b0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80055b2:	6013      	str	r3, [r2, #0]
 80055b4:	9803      	ldr	r0, [sp, #12]
 80055b6:	b019      	add	sp, #100	; 0x64
 80055b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055bc:	4b8b      	ldr	r3, [pc, #556]	; (80057ec <_dtoa_r+0x2d4>)
 80055be:	9303      	str	r3, [sp, #12]
 80055c0:	3303      	adds	r3, #3
 80055c2:	e7f5      	b.n	80055b0 <_dtoa_r+0x98>
 80055c4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80055c8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80055cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80055d0:	2200      	movs	r2, #0
 80055d2:	2300      	movs	r3, #0
 80055d4:	f7fb f9f2 	bl	80009bc <__aeabi_dcmpeq>
 80055d8:	4680      	mov	r8, r0
 80055da:	b158      	cbz	r0, 80055f4 <_dtoa_r+0xdc>
 80055dc:	2301      	movs	r3, #1
 80055de:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80055e0:	6013      	str	r3, [r2, #0]
 80055e2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	f000 8558 	beq.w	800609a <_dtoa_r+0xb82>
 80055ea:	4882      	ldr	r0, [pc, #520]	; (80057f4 <_dtoa_r+0x2dc>)
 80055ec:	6018      	str	r0, [r3, #0]
 80055ee:	1e43      	subs	r3, r0, #1
 80055f0:	9303      	str	r3, [sp, #12]
 80055f2:	e7df      	b.n	80055b4 <_dtoa_r+0x9c>
 80055f4:	ab16      	add	r3, sp, #88	; 0x58
 80055f6:	9301      	str	r3, [sp, #4]
 80055f8:	ab17      	add	r3, sp, #92	; 0x5c
 80055fa:	9300      	str	r3, [sp, #0]
 80055fc:	4628      	mov	r0, r5
 80055fe:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005602:	f001 fd13 	bl	800702c <__d2b>
 8005606:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800560a:	4683      	mov	fp, r0
 800560c:	2c00      	cmp	r4, #0
 800560e:	d07f      	beq.n	8005710 <_dtoa_r+0x1f8>
 8005610:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005614:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005616:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800561a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800561e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8005622:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8005626:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800562a:	2200      	movs	r2, #0
 800562c:	4b72      	ldr	r3, [pc, #456]	; (80057f8 <_dtoa_r+0x2e0>)
 800562e:	f7fa fda5 	bl	800017c <__aeabi_dsub>
 8005632:	a365      	add	r3, pc, #404	; (adr r3, 80057c8 <_dtoa_r+0x2b0>)
 8005634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005638:	f7fa ff58 	bl	80004ec <__aeabi_dmul>
 800563c:	a364      	add	r3, pc, #400	; (adr r3, 80057d0 <_dtoa_r+0x2b8>)
 800563e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005642:	f7fa fd9d 	bl	8000180 <__adddf3>
 8005646:	4606      	mov	r6, r0
 8005648:	4620      	mov	r0, r4
 800564a:	460f      	mov	r7, r1
 800564c:	f7fa fee4 	bl	8000418 <__aeabi_i2d>
 8005650:	a361      	add	r3, pc, #388	; (adr r3, 80057d8 <_dtoa_r+0x2c0>)
 8005652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005656:	f7fa ff49 	bl	80004ec <__aeabi_dmul>
 800565a:	4602      	mov	r2, r0
 800565c:	460b      	mov	r3, r1
 800565e:	4630      	mov	r0, r6
 8005660:	4639      	mov	r1, r7
 8005662:	f7fa fd8d 	bl	8000180 <__adddf3>
 8005666:	4606      	mov	r6, r0
 8005668:	460f      	mov	r7, r1
 800566a:	f7fb f9ef 	bl	8000a4c <__aeabi_d2iz>
 800566e:	2200      	movs	r2, #0
 8005670:	4682      	mov	sl, r0
 8005672:	2300      	movs	r3, #0
 8005674:	4630      	mov	r0, r6
 8005676:	4639      	mov	r1, r7
 8005678:	f7fb f9aa 	bl	80009d0 <__aeabi_dcmplt>
 800567c:	b148      	cbz	r0, 8005692 <_dtoa_r+0x17a>
 800567e:	4650      	mov	r0, sl
 8005680:	f7fa feca 	bl	8000418 <__aeabi_i2d>
 8005684:	4632      	mov	r2, r6
 8005686:	463b      	mov	r3, r7
 8005688:	f7fb f998 	bl	80009bc <__aeabi_dcmpeq>
 800568c:	b908      	cbnz	r0, 8005692 <_dtoa_r+0x17a>
 800568e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005692:	f1ba 0f16 	cmp.w	sl, #22
 8005696:	d858      	bhi.n	800574a <_dtoa_r+0x232>
 8005698:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800569c:	4b57      	ldr	r3, [pc, #348]	; (80057fc <_dtoa_r+0x2e4>)
 800569e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80056a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056a6:	f7fb f993 	bl	80009d0 <__aeabi_dcmplt>
 80056aa:	2800      	cmp	r0, #0
 80056ac:	d04f      	beq.n	800574e <_dtoa_r+0x236>
 80056ae:	2300      	movs	r3, #0
 80056b0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80056b4:	930f      	str	r3, [sp, #60]	; 0x3c
 80056b6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80056b8:	1b1c      	subs	r4, r3, r4
 80056ba:	1e63      	subs	r3, r4, #1
 80056bc:	9309      	str	r3, [sp, #36]	; 0x24
 80056be:	bf49      	itett	mi
 80056c0:	f1c4 0301 	rsbmi	r3, r4, #1
 80056c4:	2300      	movpl	r3, #0
 80056c6:	9306      	strmi	r3, [sp, #24]
 80056c8:	2300      	movmi	r3, #0
 80056ca:	bf54      	ite	pl
 80056cc:	9306      	strpl	r3, [sp, #24]
 80056ce:	9309      	strmi	r3, [sp, #36]	; 0x24
 80056d0:	f1ba 0f00 	cmp.w	sl, #0
 80056d4:	db3d      	blt.n	8005752 <_dtoa_r+0x23a>
 80056d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056d8:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80056dc:	4453      	add	r3, sl
 80056de:	9309      	str	r3, [sp, #36]	; 0x24
 80056e0:	2300      	movs	r3, #0
 80056e2:	930a      	str	r3, [sp, #40]	; 0x28
 80056e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80056e6:	2b09      	cmp	r3, #9
 80056e8:	f200 808c 	bhi.w	8005804 <_dtoa_r+0x2ec>
 80056ec:	2b05      	cmp	r3, #5
 80056ee:	bfc4      	itt	gt
 80056f0:	3b04      	subgt	r3, #4
 80056f2:	9322      	strgt	r3, [sp, #136]	; 0x88
 80056f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80056f6:	bfc8      	it	gt
 80056f8:	2400      	movgt	r4, #0
 80056fa:	f1a3 0302 	sub.w	r3, r3, #2
 80056fe:	bfd8      	it	le
 8005700:	2401      	movle	r4, #1
 8005702:	2b03      	cmp	r3, #3
 8005704:	f200 808a 	bhi.w	800581c <_dtoa_r+0x304>
 8005708:	e8df f003 	tbb	[pc, r3]
 800570c:	5b4d4f2d 	.word	0x5b4d4f2d
 8005710:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8005714:	441c      	add	r4, r3
 8005716:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800571a:	2b20      	cmp	r3, #32
 800571c:	bfc3      	ittte	gt
 800571e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005722:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8005726:	fa09 f303 	lslgt.w	r3, r9, r3
 800572a:	f1c3 0320 	rsble	r3, r3, #32
 800572e:	bfc6      	itte	gt
 8005730:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005734:	4318      	orrgt	r0, r3
 8005736:	fa06 f003 	lslle.w	r0, r6, r3
 800573a:	f7fa fe5d 	bl	80003f8 <__aeabi_ui2d>
 800573e:	2301      	movs	r3, #1
 8005740:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8005744:	3c01      	subs	r4, #1
 8005746:	9313      	str	r3, [sp, #76]	; 0x4c
 8005748:	e76f      	b.n	800562a <_dtoa_r+0x112>
 800574a:	2301      	movs	r3, #1
 800574c:	e7b2      	b.n	80056b4 <_dtoa_r+0x19c>
 800574e:	900f      	str	r0, [sp, #60]	; 0x3c
 8005750:	e7b1      	b.n	80056b6 <_dtoa_r+0x19e>
 8005752:	9b06      	ldr	r3, [sp, #24]
 8005754:	eba3 030a 	sub.w	r3, r3, sl
 8005758:	9306      	str	r3, [sp, #24]
 800575a:	f1ca 0300 	rsb	r3, sl, #0
 800575e:	930a      	str	r3, [sp, #40]	; 0x28
 8005760:	2300      	movs	r3, #0
 8005762:	930e      	str	r3, [sp, #56]	; 0x38
 8005764:	e7be      	b.n	80056e4 <_dtoa_r+0x1cc>
 8005766:	2300      	movs	r3, #0
 8005768:	930b      	str	r3, [sp, #44]	; 0x2c
 800576a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800576c:	2b00      	cmp	r3, #0
 800576e:	dc58      	bgt.n	8005822 <_dtoa_r+0x30a>
 8005770:	f04f 0901 	mov.w	r9, #1
 8005774:	464b      	mov	r3, r9
 8005776:	f8cd 9020 	str.w	r9, [sp, #32]
 800577a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800577e:	2200      	movs	r2, #0
 8005780:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8005782:	6042      	str	r2, [r0, #4]
 8005784:	2204      	movs	r2, #4
 8005786:	f102 0614 	add.w	r6, r2, #20
 800578a:	429e      	cmp	r6, r3
 800578c:	6841      	ldr	r1, [r0, #4]
 800578e:	d94e      	bls.n	800582e <_dtoa_r+0x316>
 8005790:	4628      	mov	r0, r5
 8005792:	f001 f861 	bl	8006858 <_Balloc>
 8005796:	9003      	str	r0, [sp, #12]
 8005798:	2800      	cmp	r0, #0
 800579a:	d14c      	bne.n	8005836 <_dtoa_r+0x31e>
 800579c:	4602      	mov	r2, r0
 800579e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80057a2:	4b17      	ldr	r3, [pc, #92]	; (8005800 <_dtoa_r+0x2e8>)
 80057a4:	e6cc      	b.n	8005540 <_dtoa_r+0x28>
 80057a6:	2301      	movs	r3, #1
 80057a8:	e7de      	b.n	8005768 <_dtoa_r+0x250>
 80057aa:	2300      	movs	r3, #0
 80057ac:	930b      	str	r3, [sp, #44]	; 0x2c
 80057ae:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80057b0:	eb0a 0903 	add.w	r9, sl, r3
 80057b4:	f109 0301 	add.w	r3, r9, #1
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	9308      	str	r3, [sp, #32]
 80057bc:	bfb8      	it	lt
 80057be:	2301      	movlt	r3, #1
 80057c0:	e7dd      	b.n	800577e <_dtoa_r+0x266>
 80057c2:	2301      	movs	r3, #1
 80057c4:	e7f2      	b.n	80057ac <_dtoa_r+0x294>
 80057c6:	bf00      	nop
 80057c8:	636f4361 	.word	0x636f4361
 80057cc:	3fd287a7 	.word	0x3fd287a7
 80057d0:	8b60c8b3 	.word	0x8b60c8b3
 80057d4:	3fc68a28 	.word	0x3fc68a28
 80057d8:	509f79fb 	.word	0x509f79fb
 80057dc:	3fd34413 	.word	0x3fd34413
 80057e0:	080084f0 	.word	0x080084f0
 80057e4:	080086ae 	.word	0x080086ae
 80057e8:	7ff00000 	.word	0x7ff00000
 80057ec:	080086aa 	.word	0x080086aa
 80057f0:	080086a1 	.word	0x080086a1
 80057f4:	08008479 	.word	0x08008479
 80057f8:	3ff80000 	.word	0x3ff80000
 80057fc:	08008818 	.word	0x08008818
 8005800:	08008709 	.word	0x08008709
 8005804:	2401      	movs	r4, #1
 8005806:	2300      	movs	r3, #0
 8005808:	940b      	str	r4, [sp, #44]	; 0x2c
 800580a:	9322      	str	r3, [sp, #136]	; 0x88
 800580c:	f04f 39ff 	mov.w	r9, #4294967295
 8005810:	2200      	movs	r2, #0
 8005812:	2312      	movs	r3, #18
 8005814:	f8cd 9020 	str.w	r9, [sp, #32]
 8005818:	9223      	str	r2, [sp, #140]	; 0x8c
 800581a:	e7b0      	b.n	800577e <_dtoa_r+0x266>
 800581c:	2301      	movs	r3, #1
 800581e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005820:	e7f4      	b.n	800580c <_dtoa_r+0x2f4>
 8005822:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8005826:	464b      	mov	r3, r9
 8005828:	f8cd 9020 	str.w	r9, [sp, #32]
 800582c:	e7a7      	b.n	800577e <_dtoa_r+0x266>
 800582e:	3101      	adds	r1, #1
 8005830:	6041      	str	r1, [r0, #4]
 8005832:	0052      	lsls	r2, r2, #1
 8005834:	e7a7      	b.n	8005786 <_dtoa_r+0x26e>
 8005836:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005838:	9a03      	ldr	r2, [sp, #12]
 800583a:	601a      	str	r2, [r3, #0]
 800583c:	9b08      	ldr	r3, [sp, #32]
 800583e:	2b0e      	cmp	r3, #14
 8005840:	f200 80a8 	bhi.w	8005994 <_dtoa_r+0x47c>
 8005844:	2c00      	cmp	r4, #0
 8005846:	f000 80a5 	beq.w	8005994 <_dtoa_r+0x47c>
 800584a:	f1ba 0f00 	cmp.w	sl, #0
 800584e:	dd34      	ble.n	80058ba <_dtoa_r+0x3a2>
 8005850:	4a9a      	ldr	r2, [pc, #616]	; (8005abc <_dtoa_r+0x5a4>)
 8005852:	f00a 030f 	and.w	r3, sl, #15
 8005856:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800585a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800585e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005862:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005866:	ea4f 142a 	mov.w	r4, sl, asr #4
 800586a:	d016      	beq.n	800589a <_dtoa_r+0x382>
 800586c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005870:	4b93      	ldr	r3, [pc, #588]	; (8005ac0 <_dtoa_r+0x5a8>)
 8005872:	2703      	movs	r7, #3
 8005874:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005878:	f7fa ff62 	bl	8000740 <__aeabi_ddiv>
 800587c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005880:	f004 040f 	and.w	r4, r4, #15
 8005884:	4e8e      	ldr	r6, [pc, #568]	; (8005ac0 <_dtoa_r+0x5a8>)
 8005886:	b954      	cbnz	r4, 800589e <_dtoa_r+0x386>
 8005888:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800588c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005890:	f7fa ff56 	bl	8000740 <__aeabi_ddiv>
 8005894:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005898:	e029      	b.n	80058ee <_dtoa_r+0x3d6>
 800589a:	2702      	movs	r7, #2
 800589c:	e7f2      	b.n	8005884 <_dtoa_r+0x36c>
 800589e:	07e1      	lsls	r1, r4, #31
 80058a0:	d508      	bpl.n	80058b4 <_dtoa_r+0x39c>
 80058a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80058a6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80058aa:	f7fa fe1f 	bl	80004ec <__aeabi_dmul>
 80058ae:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80058b2:	3701      	adds	r7, #1
 80058b4:	1064      	asrs	r4, r4, #1
 80058b6:	3608      	adds	r6, #8
 80058b8:	e7e5      	b.n	8005886 <_dtoa_r+0x36e>
 80058ba:	f000 80a5 	beq.w	8005a08 <_dtoa_r+0x4f0>
 80058be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80058c2:	f1ca 0400 	rsb	r4, sl, #0
 80058c6:	4b7d      	ldr	r3, [pc, #500]	; (8005abc <_dtoa_r+0x5a4>)
 80058c8:	f004 020f 	and.w	r2, r4, #15
 80058cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80058d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058d4:	f7fa fe0a 	bl	80004ec <__aeabi_dmul>
 80058d8:	2702      	movs	r7, #2
 80058da:	2300      	movs	r3, #0
 80058dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80058e0:	4e77      	ldr	r6, [pc, #476]	; (8005ac0 <_dtoa_r+0x5a8>)
 80058e2:	1124      	asrs	r4, r4, #4
 80058e4:	2c00      	cmp	r4, #0
 80058e6:	f040 8084 	bne.w	80059f2 <_dtoa_r+0x4da>
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d1d2      	bne.n	8005894 <_dtoa_r+0x37c>
 80058ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	f000 808b 	beq.w	8005a0c <_dtoa_r+0x4f4>
 80058f6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80058fa:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80058fe:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005902:	2200      	movs	r2, #0
 8005904:	4b6f      	ldr	r3, [pc, #444]	; (8005ac4 <_dtoa_r+0x5ac>)
 8005906:	f7fb f863 	bl	80009d0 <__aeabi_dcmplt>
 800590a:	2800      	cmp	r0, #0
 800590c:	d07e      	beq.n	8005a0c <_dtoa_r+0x4f4>
 800590e:	9b08      	ldr	r3, [sp, #32]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d07b      	beq.n	8005a0c <_dtoa_r+0x4f4>
 8005914:	f1b9 0f00 	cmp.w	r9, #0
 8005918:	dd38      	ble.n	800598c <_dtoa_r+0x474>
 800591a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800591e:	2200      	movs	r2, #0
 8005920:	4b69      	ldr	r3, [pc, #420]	; (8005ac8 <_dtoa_r+0x5b0>)
 8005922:	f7fa fde3 	bl	80004ec <__aeabi_dmul>
 8005926:	464c      	mov	r4, r9
 8005928:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800592c:	f10a 38ff 	add.w	r8, sl, #4294967295
 8005930:	3701      	adds	r7, #1
 8005932:	4638      	mov	r0, r7
 8005934:	f7fa fd70 	bl	8000418 <__aeabi_i2d>
 8005938:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800593c:	f7fa fdd6 	bl	80004ec <__aeabi_dmul>
 8005940:	2200      	movs	r2, #0
 8005942:	4b62      	ldr	r3, [pc, #392]	; (8005acc <_dtoa_r+0x5b4>)
 8005944:	f7fa fc1c 	bl	8000180 <__adddf3>
 8005948:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800594c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005950:	9611      	str	r6, [sp, #68]	; 0x44
 8005952:	2c00      	cmp	r4, #0
 8005954:	d15d      	bne.n	8005a12 <_dtoa_r+0x4fa>
 8005956:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800595a:	2200      	movs	r2, #0
 800595c:	4b5c      	ldr	r3, [pc, #368]	; (8005ad0 <_dtoa_r+0x5b8>)
 800595e:	f7fa fc0d 	bl	800017c <__aeabi_dsub>
 8005962:	4602      	mov	r2, r0
 8005964:	460b      	mov	r3, r1
 8005966:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800596a:	4633      	mov	r3, r6
 800596c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800596e:	f7fb f84d 	bl	8000a0c <__aeabi_dcmpgt>
 8005972:	2800      	cmp	r0, #0
 8005974:	f040 829c 	bne.w	8005eb0 <_dtoa_r+0x998>
 8005978:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800597c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800597e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005982:	f7fb f825 	bl	80009d0 <__aeabi_dcmplt>
 8005986:	2800      	cmp	r0, #0
 8005988:	f040 8290 	bne.w	8005eac <_dtoa_r+0x994>
 800598c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005990:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005994:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005996:	2b00      	cmp	r3, #0
 8005998:	f2c0 8152 	blt.w	8005c40 <_dtoa_r+0x728>
 800599c:	f1ba 0f0e 	cmp.w	sl, #14
 80059a0:	f300 814e 	bgt.w	8005c40 <_dtoa_r+0x728>
 80059a4:	4b45      	ldr	r3, [pc, #276]	; (8005abc <_dtoa_r+0x5a4>)
 80059a6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80059aa:	e9d3 3400 	ldrd	r3, r4, [r3]
 80059ae:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80059b2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	f280 80db 	bge.w	8005b70 <_dtoa_r+0x658>
 80059ba:	9b08      	ldr	r3, [sp, #32]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	f300 80d7 	bgt.w	8005b70 <_dtoa_r+0x658>
 80059c2:	f040 8272 	bne.w	8005eaa <_dtoa_r+0x992>
 80059c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80059ca:	2200      	movs	r2, #0
 80059cc:	4b40      	ldr	r3, [pc, #256]	; (8005ad0 <_dtoa_r+0x5b8>)
 80059ce:	f7fa fd8d 	bl	80004ec <__aeabi_dmul>
 80059d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80059d6:	f7fb f80f 	bl	80009f8 <__aeabi_dcmpge>
 80059da:	9c08      	ldr	r4, [sp, #32]
 80059dc:	4626      	mov	r6, r4
 80059de:	2800      	cmp	r0, #0
 80059e0:	f040 8248 	bne.w	8005e74 <_dtoa_r+0x95c>
 80059e4:	2331      	movs	r3, #49	; 0x31
 80059e6:	9f03      	ldr	r7, [sp, #12]
 80059e8:	f10a 0a01 	add.w	sl, sl, #1
 80059ec:	f807 3b01 	strb.w	r3, [r7], #1
 80059f0:	e244      	b.n	8005e7c <_dtoa_r+0x964>
 80059f2:	07e2      	lsls	r2, r4, #31
 80059f4:	d505      	bpl.n	8005a02 <_dtoa_r+0x4ea>
 80059f6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80059fa:	f7fa fd77 	bl	80004ec <__aeabi_dmul>
 80059fe:	2301      	movs	r3, #1
 8005a00:	3701      	adds	r7, #1
 8005a02:	1064      	asrs	r4, r4, #1
 8005a04:	3608      	adds	r6, #8
 8005a06:	e76d      	b.n	80058e4 <_dtoa_r+0x3cc>
 8005a08:	2702      	movs	r7, #2
 8005a0a:	e770      	b.n	80058ee <_dtoa_r+0x3d6>
 8005a0c:	46d0      	mov	r8, sl
 8005a0e:	9c08      	ldr	r4, [sp, #32]
 8005a10:	e78f      	b.n	8005932 <_dtoa_r+0x41a>
 8005a12:	9903      	ldr	r1, [sp, #12]
 8005a14:	4b29      	ldr	r3, [pc, #164]	; (8005abc <_dtoa_r+0x5a4>)
 8005a16:	4421      	add	r1, r4
 8005a18:	9112      	str	r1, [sp, #72]	; 0x48
 8005a1a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005a1c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005a20:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005a24:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005a28:	2900      	cmp	r1, #0
 8005a2a:	d055      	beq.n	8005ad8 <_dtoa_r+0x5c0>
 8005a2c:	2000      	movs	r0, #0
 8005a2e:	4929      	ldr	r1, [pc, #164]	; (8005ad4 <_dtoa_r+0x5bc>)
 8005a30:	f7fa fe86 	bl	8000740 <__aeabi_ddiv>
 8005a34:	463b      	mov	r3, r7
 8005a36:	4632      	mov	r2, r6
 8005a38:	f7fa fba0 	bl	800017c <__aeabi_dsub>
 8005a3c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005a40:	9f03      	ldr	r7, [sp, #12]
 8005a42:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a46:	f7fb f801 	bl	8000a4c <__aeabi_d2iz>
 8005a4a:	4604      	mov	r4, r0
 8005a4c:	f7fa fce4 	bl	8000418 <__aeabi_i2d>
 8005a50:	4602      	mov	r2, r0
 8005a52:	460b      	mov	r3, r1
 8005a54:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a58:	f7fa fb90 	bl	800017c <__aeabi_dsub>
 8005a5c:	4602      	mov	r2, r0
 8005a5e:	460b      	mov	r3, r1
 8005a60:	3430      	adds	r4, #48	; 0x30
 8005a62:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005a66:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005a6a:	f807 4b01 	strb.w	r4, [r7], #1
 8005a6e:	f7fa ffaf 	bl	80009d0 <__aeabi_dcmplt>
 8005a72:	2800      	cmp	r0, #0
 8005a74:	d174      	bne.n	8005b60 <_dtoa_r+0x648>
 8005a76:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a7a:	2000      	movs	r0, #0
 8005a7c:	4911      	ldr	r1, [pc, #68]	; (8005ac4 <_dtoa_r+0x5ac>)
 8005a7e:	f7fa fb7d 	bl	800017c <__aeabi_dsub>
 8005a82:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005a86:	f7fa ffa3 	bl	80009d0 <__aeabi_dcmplt>
 8005a8a:	2800      	cmp	r0, #0
 8005a8c:	f040 80b7 	bne.w	8005bfe <_dtoa_r+0x6e6>
 8005a90:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005a92:	429f      	cmp	r7, r3
 8005a94:	f43f af7a 	beq.w	800598c <_dtoa_r+0x474>
 8005a98:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	4b0a      	ldr	r3, [pc, #40]	; (8005ac8 <_dtoa_r+0x5b0>)
 8005aa0:	f7fa fd24 	bl	80004ec <__aeabi_dmul>
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005aaa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005aae:	4b06      	ldr	r3, [pc, #24]	; (8005ac8 <_dtoa_r+0x5b0>)
 8005ab0:	f7fa fd1c 	bl	80004ec <__aeabi_dmul>
 8005ab4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005ab8:	e7c3      	b.n	8005a42 <_dtoa_r+0x52a>
 8005aba:	bf00      	nop
 8005abc:	08008818 	.word	0x08008818
 8005ac0:	080087f0 	.word	0x080087f0
 8005ac4:	3ff00000 	.word	0x3ff00000
 8005ac8:	40240000 	.word	0x40240000
 8005acc:	401c0000 	.word	0x401c0000
 8005ad0:	40140000 	.word	0x40140000
 8005ad4:	3fe00000 	.word	0x3fe00000
 8005ad8:	4630      	mov	r0, r6
 8005ada:	4639      	mov	r1, r7
 8005adc:	f7fa fd06 	bl	80004ec <__aeabi_dmul>
 8005ae0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005ae2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005ae6:	9c03      	ldr	r4, [sp, #12]
 8005ae8:	9314      	str	r3, [sp, #80]	; 0x50
 8005aea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005aee:	f7fa ffad 	bl	8000a4c <__aeabi_d2iz>
 8005af2:	9015      	str	r0, [sp, #84]	; 0x54
 8005af4:	f7fa fc90 	bl	8000418 <__aeabi_i2d>
 8005af8:	4602      	mov	r2, r0
 8005afa:	460b      	mov	r3, r1
 8005afc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005b00:	f7fa fb3c 	bl	800017c <__aeabi_dsub>
 8005b04:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005b06:	4606      	mov	r6, r0
 8005b08:	3330      	adds	r3, #48	; 0x30
 8005b0a:	f804 3b01 	strb.w	r3, [r4], #1
 8005b0e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005b10:	460f      	mov	r7, r1
 8005b12:	429c      	cmp	r4, r3
 8005b14:	f04f 0200 	mov.w	r2, #0
 8005b18:	d124      	bne.n	8005b64 <_dtoa_r+0x64c>
 8005b1a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005b1e:	4bb0      	ldr	r3, [pc, #704]	; (8005de0 <_dtoa_r+0x8c8>)
 8005b20:	f7fa fb2e 	bl	8000180 <__adddf3>
 8005b24:	4602      	mov	r2, r0
 8005b26:	460b      	mov	r3, r1
 8005b28:	4630      	mov	r0, r6
 8005b2a:	4639      	mov	r1, r7
 8005b2c:	f7fa ff6e 	bl	8000a0c <__aeabi_dcmpgt>
 8005b30:	2800      	cmp	r0, #0
 8005b32:	d163      	bne.n	8005bfc <_dtoa_r+0x6e4>
 8005b34:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005b38:	2000      	movs	r0, #0
 8005b3a:	49a9      	ldr	r1, [pc, #676]	; (8005de0 <_dtoa_r+0x8c8>)
 8005b3c:	f7fa fb1e 	bl	800017c <__aeabi_dsub>
 8005b40:	4602      	mov	r2, r0
 8005b42:	460b      	mov	r3, r1
 8005b44:	4630      	mov	r0, r6
 8005b46:	4639      	mov	r1, r7
 8005b48:	f7fa ff42 	bl	80009d0 <__aeabi_dcmplt>
 8005b4c:	2800      	cmp	r0, #0
 8005b4e:	f43f af1d 	beq.w	800598c <_dtoa_r+0x474>
 8005b52:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005b54:	1e7b      	subs	r3, r7, #1
 8005b56:	9314      	str	r3, [sp, #80]	; 0x50
 8005b58:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8005b5c:	2b30      	cmp	r3, #48	; 0x30
 8005b5e:	d0f8      	beq.n	8005b52 <_dtoa_r+0x63a>
 8005b60:	46c2      	mov	sl, r8
 8005b62:	e03b      	b.n	8005bdc <_dtoa_r+0x6c4>
 8005b64:	4b9f      	ldr	r3, [pc, #636]	; (8005de4 <_dtoa_r+0x8cc>)
 8005b66:	f7fa fcc1 	bl	80004ec <__aeabi_dmul>
 8005b6a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005b6e:	e7bc      	b.n	8005aea <_dtoa_r+0x5d2>
 8005b70:	9f03      	ldr	r7, [sp, #12]
 8005b72:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8005b76:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005b7a:	4640      	mov	r0, r8
 8005b7c:	4649      	mov	r1, r9
 8005b7e:	f7fa fddf 	bl	8000740 <__aeabi_ddiv>
 8005b82:	f7fa ff63 	bl	8000a4c <__aeabi_d2iz>
 8005b86:	4604      	mov	r4, r0
 8005b88:	f7fa fc46 	bl	8000418 <__aeabi_i2d>
 8005b8c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005b90:	f7fa fcac 	bl	80004ec <__aeabi_dmul>
 8005b94:	4602      	mov	r2, r0
 8005b96:	460b      	mov	r3, r1
 8005b98:	4640      	mov	r0, r8
 8005b9a:	4649      	mov	r1, r9
 8005b9c:	f7fa faee 	bl	800017c <__aeabi_dsub>
 8005ba0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8005ba4:	f807 6b01 	strb.w	r6, [r7], #1
 8005ba8:	9e03      	ldr	r6, [sp, #12]
 8005baa:	f8dd c020 	ldr.w	ip, [sp, #32]
 8005bae:	1bbe      	subs	r6, r7, r6
 8005bb0:	45b4      	cmp	ip, r6
 8005bb2:	4602      	mov	r2, r0
 8005bb4:	460b      	mov	r3, r1
 8005bb6:	d136      	bne.n	8005c26 <_dtoa_r+0x70e>
 8005bb8:	f7fa fae2 	bl	8000180 <__adddf3>
 8005bbc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005bc0:	4680      	mov	r8, r0
 8005bc2:	4689      	mov	r9, r1
 8005bc4:	f7fa ff22 	bl	8000a0c <__aeabi_dcmpgt>
 8005bc8:	bb58      	cbnz	r0, 8005c22 <_dtoa_r+0x70a>
 8005bca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005bce:	4640      	mov	r0, r8
 8005bd0:	4649      	mov	r1, r9
 8005bd2:	f7fa fef3 	bl	80009bc <__aeabi_dcmpeq>
 8005bd6:	b108      	cbz	r0, 8005bdc <_dtoa_r+0x6c4>
 8005bd8:	07e1      	lsls	r1, r4, #31
 8005bda:	d422      	bmi.n	8005c22 <_dtoa_r+0x70a>
 8005bdc:	4628      	mov	r0, r5
 8005bde:	4659      	mov	r1, fp
 8005be0:	f000 fe7a 	bl	80068d8 <_Bfree>
 8005be4:	2300      	movs	r3, #0
 8005be6:	703b      	strb	r3, [r7, #0]
 8005be8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005bea:	f10a 0001 	add.w	r0, sl, #1
 8005bee:	6018      	str	r0, [r3, #0]
 8005bf0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	f43f acde 	beq.w	80055b4 <_dtoa_r+0x9c>
 8005bf8:	601f      	str	r7, [r3, #0]
 8005bfa:	e4db      	b.n	80055b4 <_dtoa_r+0x9c>
 8005bfc:	4627      	mov	r7, r4
 8005bfe:	463b      	mov	r3, r7
 8005c00:	461f      	mov	r7, r3
 8005c02:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005c06:	2a39      	cmp	r2, #57	; 0x39
 8005c08:	d107      	bne.n	8005c1a <_dtoa_r+0x702>
 8005c0a:	9a03      	ldr	r2, [sp, #12]
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d1f7      	bne.n	8005c00 <_dtoa_r+0x6e8>
 8005c10:	2230      	movs	r2, #48	; 0x30
 8005c12:	9903      	ldr	r1, [sp, #12]
 8005c14:	f108 0801 	add.w	r8, r8, #1
 8005c18:	700a      	strb	r2, [r1, #0]
 8005c1a:	781a      	ldrb	r2, [r3, #0]
 8005c1c:	3201      	adds	r2, #1
 8005c1e:	701a      	strb	r2, [r3, #0]
 8005c20:	e79e      	b.n	8005b60 <_dtoa_r+0x648>
 8005c22:	46d0      	mov	r8, sl
 8005c24:	e7eb      	b.n	8005bfe <_dtoa_r+0x6e6>
 8005c26:	2200      	movs	r2, #0
 8005c28:	4b6e      	ldr	r3, [pc, #440]	; (8005de4 <_dtoa_r+0x8cc>)
 8005c2a:	f7fa fc5f 	bl	80004ec <__aeabi_dmul>
 8005c2e:	2200      	movs	r2, #0
 8005c30:	2300      	movs	r3, #0
 8005c32:	4680      	mov	r8, r0
 8005c34:	4689      	mov	r9, r1
 8005c36:	f7fa fec1 	bl	80009bc <__aeabi_dcmpeq>
 8005c3a:	2800      	cmp	r0, #0
 8005c3c:	d09b      	beq.n	8005b76 <_dtoa_r+0x65e>
 8005c3e:	e7cd      	b.n	8005bdc <_dtoa_r+0x6c4>
 8005c40:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005c42:	2a00      	cmp	r2, #0
 8005c44:	f000 80d0 	beq.w	8005de8 <_dtoa_r+0x8d0>
 8005c48:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005c4a:	2a01      	cmp	r2, #1
 8005c4c:	f300 80ae 	bgt.w	8005dac <_dtoa_r+0x894>
 8005c50:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005c52:	2a00      	cmp	r2, #0
 8005c54:	f000 80a6 	beq.w	8005da4 <_dtoa_r+0x88c>
 8005c58:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005c5c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005c5e:	9f06      	ldr	r7, [sp, #24]
 8005c60:	9a06      	ldr	r2, [sp, #24]
 8005c62:	2101      	movs	r1, #1
 8005c64:	441a      	add	r2, r3
 8005c66:	9206      	str	r2, [sp, #24]
 8005c68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005c6a:	4628      	mov	r0, r5
 8005c6c:	441a      	add	r2, r3
 8005c6e:	9209      	str	r2, [sp, #36]	; 0x24
 8005c70:	f000 ff32 	bl	8006ad8 <__i2b>
 8005c74:	4606      	mov	r6, r0
 8005c76:	2f00      	cmp	r7, #0
 8005c78:	dd0c      	ble.n	8005c94 <_dtoa_r+0x77c>
 8005c7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	dd09      	ble.n	8005c94 <_dtoa_r+0x77c>
 8005c80:	42bb      	cmp	r3, r7
 8005c82:	bfa8      	it	ge
 8005c84:	463b      	movge	r3, r7
 8005c86:	9a06      	ldr	r2, [sp, #24]
 8005c88:	1aff      	subs	r7, r7, r3
 8005c8a:	1ad2      	subs	r2, r2, r3
 8005c8c:	9206      	str	r2, [sp, #24]
 8005c8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005c90:	1ad3      	subs	r3, r2, r3
 8005c92:	9309      	str	r3, [sp, #36]	; 0x24
 8005c94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c96:	b1f3      	cbz	r3, 8005cd6 <_dtoa_r+0x7be>
 8005c98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	f000 80a8 	beq.w	8005df0 <_dtoa_r+0x8d8>
 8005ca0:	2c00      	cmp	r4, #0
 8005ca2:	dd10      	ble.n	8005cc6 <_dtoa_r+0x7ae>
 8005ca4:	4631      	mov	r1, r6
 8005ca6:	4622      	mov	r2, r4
 8005ca8:	4628      	mov	r0, r5
 8005caa:	f000 ffd3 	bl	8006c54 <__pow5mult>
 8005cae:	465a      	mov	r2, fp
 8005cb0:	4601      	mov	r1, r0
 8005cb2:	4606      	mov	r6, r0
 8005cb4:	4628      	mov	r0, r5
 8005cb6:	f000 ff25 	bl	8006b04 <__multiply>
 8005cba:	4680      	mov	r8, r0
 8005cbc:	4659      	mov	r1, fp
 8005cbe:	4628      	mov	r0, r5
 8005cc0:	f000 fe0a 	bl	80068d8 <_Bfree>
 8005cc4:	46c3      	mov	fp, r8
 8005cc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005cc8:	1b1a      	subs	r2, r3, r4
 8005cca:	d004      	beq.n	8005cd6 <_dtoa_r+0x7be>
 8005ccc:	4659      	mov	r1, fp
 8005cce:	4628      	mov	r0, r5
 8005cd0:	f000 ffc0 	bl	8006c54 <__pow5mult>
 8005cd4:	4683      	mov	fp, r0
 8005cd6:	2101      	movs	r1, #1
 8005cd8:	4628      	mov	r0, r5
 8005cda:	f000 fefd 	bl	8006ad8 <__i2b>
 8005cde:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005ce0:	4604      	mov	r4, r0
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	f340 8086 	ble.w	8005df4 <_dtoa_r+0x8dc>
 8005ce8:	461a      	mov	r2, r3
 8005cea:	4601      	mov	r1, r0
 8005cec:	4628      	mov	r0, r5
 8005cee:	f000 ffb1 	bl	8006c54 <__pow5mult>
 8005cf2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005cf4:	4604      	mov	r4, r0
 8005cf6:	2b01      	cmp	r3, #1
 8005cf8:	dd7f      	ble.n	8005dfa <_dtoa_r+0x8e2>
 8005cfa:	f04f 0800 	mov.w	r8, #0
 8005cfe:	6923      	ldr	r3, [r4, #16]
 8005d00:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005d04:	6918      	ldr	r0, [r3, #16]
 8005d06:	f000 fe99 	bl	8006a3c <__hi0bits>
 8005d0a:	f1c0 0020 	rsb	r0, r0, #32
 8005d0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d10:	4418      	add	r0, r3
 8005d12:	f010 001f 	ands.w	r0, r0, #31
 8005d16:	f000 8092 	beq.w	8005e3e <_dtoa_r+0x926>
 8005d1a:	f1c0 0320 	rsb	r3, r0, #32
 8005d1e:	2b04      	cmp	r3, #4
 8005d20:	f340 808a 	ble.w	8005e38 <_dtoa_r+0x920>
 8005d24:	f1c0 001c 	rsb	r0, r0, #28
 8005d28:	9b06      	ldr	r3, [sp, #24]
 8005d2a:	4407      	add	r7, r0
 8005d2c:	4403      	add	r3, r0
 8005d2e:	9306      	str	r3, [sp, #24]
 8005d30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d32:	4403      	add	r3, r0
 8005d34:	9309      	str	r3, [sp, #36]	; 0x24
 8005d36:	9b06      	ldr	r3, [sp, #24]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	dd05      	ble.n	8005d48 <_dtoa_r+0x830>
 8005d3c:	4659      	mov	r1, fp
 8005d3e:	461a      	mov	r2, r3
 8005d40:	4628      	mov	r0, r5
 8005d42:	f000 ffe1 	bl	8006d08 <__lshift>
 8005d46:	4683      	mov	fp, r0
 8005d48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	dd05      	ble.n	8005d5a <_dtoa_r+0x842>
 8005d4e:	4621      	mov	r1, r4
 8005d50:	461a      	mov	r2, r3
 8005d52:	4628      	mov	r0, r5
 8005d54:	f000 ffd8 	bl	8006d08 <__lshift>
 8005d58:	4604      	mov	r4, r0
 8005d5a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d070      	beq.n	8005e42 <_dtoa_r+0x92a>
 8005d60:	4621      	mov	r1, r4
 8005d62:	4658      	mov	r0, fp
 8005d64:	f001 f840 	bl	8006de8 <__mcmp>
 8005d68:	2800      	cmp	r0, #0
 8005d6a:	da6a      	bge.n	8005e42 <_dtoa_r+0x92a>
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	4659      	mov	r1, fp
 8005d70:	220a      	movs	r2, #10
 8005d72:	4628      	mov	r0, r5
 8005d74:	f000 fdd2 	bl	800691c <__multadd>
 8005d78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d7a:	4683      	mov	fp, r0
 8005d7c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	f000 8194 	beq.w	80060ae <_dtoa_r+0xb96>
 8005d86:	4631      	mov	r1, r6
 8005d88:	2300      	movs	r3, #0
 8005d8a:	220a      	movs	r2, #10
 8005d8c:	4628      	mov	r0, r5
 8005d8e:	f000 fdc5 	bl	800691c <__multadd>
 8005d92:	f1b9 0f00 	cmp.w	r9, #0
 8005d96:	4606      	mov	r6, r0
 8005d98:	f300 8093 	bgt.w	8005ec2 <_dtoa_r+0x9aa>
 8005d9c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005d9e:	2b02      	cmp	r3, #2
 8005da0:	dc57      	bgt.n	8005e52 <_dtoa_r+0x93a>
 8005da2:	e08e      	b.n	8005ec2 <_dtoa_r+0x9aa>
 8005da4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005da6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005daa:	e757      	b.n	8005c5c <_dtoa_r+0x744>
 8005dac:	9b08      	ldr	r3, [sp, #32]
 8005dae:	1e5c      	subs	r4, r3, #1
 8005db0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005db2:	42a3      	cmp	r3, r4
 8005db4:	bfb7      	itett	lt
 8005db6:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005db8:	1b1c      	subge	r4, r3, r4
 8005dba:	1ae2      	sublt	r2, r4, r3
 8005dbc:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005dbe:	bfbe      	ittt	lt
 8005dc0:	940a      	strlt	r4, [sp, #40]	; 0x28
 8005dc2:	189b      	addlt	r3, r3, r2
 8005dc4:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005dc6:	9b08      	ldr	r3, [sp, #32]
 8005dc8:	bfb8      	it	lt
 8005dca:	2400      	movlt	r4, #0
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	bfbb      	ittet	lt
 8005dd0:	9b06      	ldrlt	r3, [sp, #24]
 8005dd2:	9a08      	ldrlt	r2, [sp, #32]
 8005dd4:	9f06      	ldrge	r7, [sp, #24]
 8005dd6:	1a9f      	sublt	r7, r3, r2
 8005dd8:	bfac      	ite	ge
 8005dda:	9b08      	ldrge	r3, [sp, #32]
 8005ddc:	2300      	movlt	r3, #0
 8005dde:	e73f      	b.n	8005c60 <_dtoa_r+0x748>
 8005de0:	3fe00000 	.word	0x3fe00000
 8005de4:	40240000 	.word	0x40240000
 8005de8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005dea:	9f06      	ldr	r7, [sp, #24]
 8005dec:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005dee:	e742      	b.n	8005c76 <_dtoa_r+0x75e>
 8005df0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005df2:	e76b      	b.n	8005ccc <_dtoa_r+0x7b4>
 8005df4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005df6:	2b01      	cmp	r3, #1
 8005df8:	dc19      	bgt.n	8005e2e <_dtoa_r+0x916>
 8005dfa:	9b04      	ldr	r3, [sp, #16]
 8005dfc:	b9bb      	cbnz	r3, 8005e2e <_dtoa_r+0x916>
 8005dfe:	9b05      	ldr	r3, [sp, #20]
 8005e00:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005e04:	b99b      	cbnz	r3, 8005e2e <_dtoa_r+0x916>
 8005e06:	9b05      	ldr	r3, [sp, #20]
 8005e08:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005e0c:	0d1b      	lsrs	r3, r3, #20
 8005e0e:	051b      	lsls	r3, r3, #20
 8005e10:	b183      	cbz	r3, 8005e34 <_dtoa_r+0x91c>
 8005e12:	f04f 0801 	mov.w	r8, #1
 8005e16:	9b06      	ldr	r3, [sp, #24]
 8005e18:	3301      	adds	r3, #1
 8005e1a:	9306      	str	r3, [sp, #24]
 8005e1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e1e:	3301      	adds	r3, #1
 8005e20:	9309      	str	r3, [sp, #36]	; 0x24
 8005e22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	f47f af6a 	bne.w	8005cfe <_dtoa_r+0x7e6>
 8005e2a:	2001      	movs	r0, #1
 8005e2c:	e76f      	b.n	8005d0e <_dtoa_r+0x7f6>
 8005e2e:	f04f 0800 	mov.w	r8, #0
 8005e32:	e7f6      	b.n	8005e22 <_dtoa_r+0x90a>
 8005e34:	4698      	mov	r8, r3
 8005e36:	e7f4      	b.n	8005e22 <_dtoa_r+0x90a>
 8005e38:	f43f af7d 	beq.w	8005d36 <_dtoa_r+0x81e>
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	301c      	adds	r0, #28
 8005e40:	e772      	b.n	8005d28 <_dtoa_r+0x810>
 8005e42:	9b08      	ldr	r3, [sp, #32]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	dc36      	bgt.n	8005eb6 <_dtoa_r+0x99e>
 8005e48:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005e4a:	2b02      	cmp	r3, #2
 8005e4c:	dd33      	ble.n	8005eb6 <_dtoa_r+0x99e>
 8005e4e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005e52:	f1b9 0f00 	cmp.w	r9, #0
 8005e56:	d10d      	bne.n	8005e74 <_dtoa_r+0x95c>
 8005e58:	4621      	mov	r1, r4
 8005e5a:	464b      	mov	r3, r9
 8005e5c:	2205      	movs	r2, #5
 8005e5e:	4628      	mov	r0, r5
 8005e60:	f000 fd5c 	bl	800691c <__multadd>
 8005e64:	4601      	mov	r1, r0
 8005e66:	4604      	mov	r4, r0
 8005e68:	4658      	mov	r0, fp
 8005e6a:	f000 ffbd 	bl	8006de8 <__mcmp>
 8005e6e:	2800      	cmp	r0, #0
 8005e70:	f73f adb8 	bgt.w	80059e4 <_dtoa_r+0x4cc>
 8005e74:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005e76:	9f03      	ldr	r7, [sp, #12]
 8005e78:	ea6f 0a03 	mvn.w	sl, r3
 8005e7c:	f04f 0800 	mov.w	r8, #0
 8005e80:	4621      	mov	r1, r4
 8005e82:	4628      	mov	r0, r5
 8005e84:	f000 fd28 	bl	80068d8 <_Bfree>
 8005e88:	2e00      	cmp	r6, #0
 8005e8a:	f43f aea7 	beq.w	8005bdc <_dtoa_r+0x6c4>
 8005e8e:	f1b8 0f00 	cmp.w	r8, #0
 8005e92:	d005      	beq.n	8005ea0 <_dtoa_r+0x988>
 8005e94:	45b0      	cmp	r8, r6
 8005e96:	d003      	beq.n	8005ea0 <_dtoa_r+0x988>
 8005e98:	4641      	mov	r1, r8
 8005e9a:	4628      	mov	r0, r5
 8005e9c:	f000 fd1c 	bl	80068d8 <_Bfree>
 8005ea0:	4631      	mov	r1, r6
 8005ea2:	4628      	mov	r0, r5
 8005ea4:	f000 fd18 	bl	80068d8 <_Bfree>
 8005ea8:	e698      	b.n	8005bdc <_dtoa_r+0x6c4>
 8005eaa:	2400      	movs	r4, #0
 8005eac:	4626      	mov	r6, r4
 8005eae:	e7e1      	b.n	8005e74 <_dtoa_r+0x95c>
 8005eb0:	46c2      	mov	sl, r8
 8005eb2:	4626      	mov	r6, r4
 8005eb4:	e596      	b.n	80059e4 <_dtoa_r+0x4cc>
 8005eb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005eb8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	f000 80fd 	beq.w	80060bc <_dtoa_r+0xba4>
 8005ec2:	2f00      	cmp	r7, #0
 8005ec4:	dd05      	ble.n	8005ed2 <_dtoa_r+0x9ba>
 8005ec6:	4631      	mov	r1, r6
 8005ec8:	463a      	mov	r2, r7
 8005eca:	4628      	mov	r0, r5
 8005ecc:	f000 ff1c 	bl	8006d08 <__lshift>
 8005ed0:	4606      	mov	r6, r0
 8005ed2:	f1b8 0f00 	cmp.w	r8, #0
 8005ed6:	d05c      	beq.n	8005f92 <_dtoa_r+0xa7a>
 8005ed8:	4628      	mov	r0, r5
 8005eda:	6871      	ldr	r1, [r6, #4]
 8005edc:	f000 fcbc 	bl	8006858 <_Balloc>
 8005ee0:	4607      	mov	r7, r0
 8005ee2:	b928      	cbnz	r0, 8005ef0 <_dtoa_r+0x9d8>
 8005ee4:	4602      	mov	r2, r0
 8005ee6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005eea:	4b7f      	ldr	r3, [pc, #508]	; (80060e8 <_dtoa_r+0xbd0>)
 8005eec:	f7ff bb28 	b.w	8005540 <_dtoa_r+0x28>
 8005ef0:	6932      	ldr	r2, [r6, #16]
 8005ef2:	f106 010c 	add.w	r1, r6, #12
 8005ef6:	3202      	adds	r2, #2
 8005ef8:	0092      	lsls	r2, r2, #2
 8005efa:	300c      	adds	r0, #12
 8005efc:	f000 fc9e 	bl	800683c <memcpy>
 8005f00:	2201      	movs	r2, #1
 8005f02:	4639      	mov	r1, r7
 8005f04:	4628      	mov	r0, r5
 8005f06:	f000 feff 	bl	8006d08 <__lshift>
 8005f0a:	46b0      	mov	r8, r6
 8005f0c:	4606      	mov	r6, r0
 8005f0e:	9b03      	ldr	r3, [sp, #12]
 8005f10:	3301      	adds	r3, #1
 8005f12:	9308      	str	r3, [sp, #32]
 8005f14:	9b03      	ldr	r3, [sp, #12]
 8005f16:	444b      	add	r3, r9
 8005f18:	930a      	str	r3, [sp, #40]	; 0x28
 8005f1a:	9b04      	ldr	r3, [sp, #16]
 8005f1c:	f003 0301 	and.w	r3, r3, #1
 8005f20:	9309      	str	r3, [sp, #36]	; 0x24
 8005f22:	9b08      	ldr	r3, [sp, #32]
 8005f24:	4621      	mov	r1, r4
 8005f26:	3b01      	subs	r3, #1
 8005f28:	4658      	mov	r0, fp
 8005f2a:	9304      	str	r3, [sp, #16]
 8005f2c:	f7ff fa68 	bl	8005400 <quorem>
 8005f30:	4603      	mov	r3, r0
 8005f32:	4641      	mov	r1, r8
 8005f34:	3330      	adds	r3, #48	; 0x30
 8005f36:	9006      	str	r0, [sp, #24]
 8005f38:	4658      	mov	r0, fp
 8005f3a:	930b      	str	r3, [sp, #44]	; 0x2c
 8005f3c:	f000 ff54 	bl	8006de8 <__mcmp>
 8005f40:	4632      	mov	r2, r6
 8005f42:	4681      	mov	r9, r0
 8005f44:	4621      	mov	r1, r4
 8005f46:	4628      	mov	r0, r5
 8005f48:	f000 ff6a 	bl	8006e20 <__mdiff>
 8005f4c:	68c2      	ldr	r2, [r0, #12]
 8005f4e:	4607      	mov	r7, r0
 8005f50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f52:	bb02      	cbnz	r2, 8005f96 <_dtoa_r+0xa7e>
 8005f54:	4601      	mov	r1, r0
 8005f56:	4658      	mov	r0, fp
 8005f58:	f000 ff46 	bl	8006de8 <__mcmp>
 8005f5c:	4602      	mov	r2, r0
 8005f5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f60:	4639      	mov	r1, r7
 8005f62:	4628      	mov	r0, r5
 8005f64:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8005f68:	f000 fcb6 	bl	80068d8 <_Bfree>
 8005f6c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005f6e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005f70:	9f08      	ldr	r7, [sp, #32]
 8005f72:	ea43 0102 	orr.w	r1, r3, r2
 8005f76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f78:	430b      	orrs	r3, r1
 8005f7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f7c:	d10d      	bne.n	8005f9a <_dtoa_r+0xa82>
 8005f7e:	2b39      	cmp	r3, #57	; 0x39
 8005f80:	d029      	beq.n	8005fd6 <_dtoa_r+0xabe>
 8005f82:	f1b9 0f00 	cmp.w	r9, #0
 8005f86:	dd01      	ble.n	8005f8c <_dtoa_r+0xa74>
 8005f88:	9b06      	ldr	r3, [sp, #24]
 8005f8a:	3331      	adds	r3, #49	; 0x31
 8005f8c:	9a04      	ldr	r2, [sp, #16]
 8005f8e:	7013      	strb	r3, [r2, #0]
 8005f90:	e776      	b.n	8005e80 <_dtoa_r+0x968>
 8005f92:	4630      	mov	r0, r6
 8005f94:	e7b9      	b.n	8005f0a <_dtoa_r+0x9f2>
 8005f96:	2201      	movs	r2, #1
 8005f98:	e7e2      	b.n	8005f60 <_dtoa_r+0xa48>
 8005f9a:	f1b9 0f00 	cmp.w	r9, #0
 8005f9e:	db06      	blt.n	8005fae <_dtoa_r+0xa96>
 8005fa0:	9922      	ldr	r1, [sp, #136]	; 0x88
 8005fa2:	ea41 0909 	orr.w	r9, r1, r9
 8005fa6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005fa8:	ea59 0101 	orrs.w	r1, r9, r1
 8005fac:	d120      	bne.n	8005ff0 <_dtoa_r+0xad8>
 8005fae:	2a00      	cmp	r2, #0
 8005fb0:	ddec      	ble.n	8005f8c <_dtoa_r+0xa74>
 8005fb2:	4659      	mov	r1, fp
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	4628      	mov	r0, r5
 8005fb8:	9308      	str	r3, [sp, #32]
 8005fba:	f000 fea5 	bl	8006d08 <__lshift>
 8005fbe:	4621      	mov	r1, r4
 8005fc0:	4683      	mov	fp, r0
 8005fc2:	f000 ff11 	bl	8006de8 <__mcmp>
 8005fc6:	2800      	cmp	r0, #0
 8005fc8:	9b08      	ldr	r3, [sp, #32]
 8005fca:	dc02      	bgt.n	8005fd2 <_dtoa_r+0xaba>
 8005fcc:	d1de      	bne.n	8005f8c <_dtoa_r+0xa74>
 8005fce:	07da      	lsls	r2, r3, #31
 8005fd0:	d5dc      	bpl.n	8005f8c <_dtoa_r+0xa74>
 8005fd2:	2b39      	cmp	r3, #57	; 0x39
 8005fd4:	d1d8      	bne.n	8005f88 <_dtoa_r+0xa70>
 8005fd6:	2339      	movs	r3, #57	; 0x39
 8005fd8:	9a04      	ldr	r2, [sp, #16]
 8005fda:	7013      	strb	r3, [r2, #0]
 8005fdc:	463b      	mov	r3, r7
 8005fde:	461f      	mov	r7, r3
 8005fe0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8005fe4:	3b01      	subs	r3, #1
 8005fe6:	2a39      	cmp	r2, #57	; 0x39
 8005fe8:	d050      	beq.n	800608c <_dtoa_r+0xb74>
 8005fea:	3201      	adds	r2, #1
 8005fec:	701a      	strb	r2, [r3, #0]
 8005fee:	e747      	b.n	8005e80 <_dtoa_r+0x968>
 8005ff0:	2a00      	cmp	r2, #0
 8005ff2:	dd03      	ble.n	8005ffc <_dtoa_r+0xae4>
 8005ff4:	2b39      	cmp	r3, #57	; 0x39
 8005ff6:	d0ee      	beq.n	8005fd6 <_dtoa_r+0xabe>
 8005ff8:	3301      	adds	r3, #1
 8005ffa:	e7c7      	b.n	8005f8c <_dtoa_r+0xa74>
 8005ffc:	9a08      	ldr	r2, [sp, #32]
 8005ffe:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006000:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006004:	428a      	cmp	r2, r1
 8006006:	d02a      	beq.n	800605e <_dtoa_r+0xb46>
 8006008:	4659      	mov	r1, fp
 800600a:	2300      	movs	r3, #0
 800600c:	220a      	movs	r2, #10
 800600e:	4628      	mov	r0, r5
 8006010:	f000 fc84 	bl	800691c <__multadd>
 8006014:	45b0      	cmp	r8, r6
 8006016:	4683      	mov	fp, r0
 8006018:	f04f 0300 	mov.w	r3, #0
 800601c:	f04f 020a 	mov.w	r2, #10
 8006020:	4641      	mov	r1, r8
 8006022:	4628      	mov	r0, r5
 8006024:	d107      	bne.n	8006036 <_dtoa_r+0xb1e>
 8006026:	f000 fc79 	bl	800691c <__multadd>
 800602a:	4680      	mov	r8, r0
 800602c:	4606      	mov	r6, r0
 800602e:	9b08      	ldr	r3, [sp, #32]
 8006030:	3301      	adds	r3, #1
 8006032:	9308      	str	r3, [sp, #32]
 8006034:	e775      	b.n	8005f22 <_dtoa_r+0xa0a>
 8006036:	f000 fc71 	bl	800691c <__multadd>
 800603a:	4631      	mov	r1, r6
 800603c:	4680      	mov	r8, r0
 800603e:	2300      	movs	r3, #0
 8006040:	220a      	movs	r2, #10
 8006042:	4628      	mov	r0, r5
 8006044:	f000 fc6a 	bl	800691c <__multadd>
 8006048:	4606      	mov	r6, r0
 800604a:	e7f0      	b.n	800602e <_dtoa_r+0xb16>
 800604c:	f1b9 0f00 	cmp.w	r9, #0
 8006050:	bfcc      	ite	gt
 8006052:	464f      	movgt	r7, r9
 8006054:	2701      	movle	r7, #1
 8006056:	f04f 0800 	mov.w	r8, #0
 800605a:	9a03      	ldr	r2, [sp, #12]
 800605c:	4417      	add	r7, r2
 800605e:	4659      	mov	r1, fp
 8006060:	2201      	movs	r2, #1
 8006062:	4628      	mov	r0, r5
 8006064:	9308      	str	r3, [sp, #32]
 8006066:	f000 fe4f 	bl	8006d08 <__lshift>
 800606a:	4621      	mov	r1, r4
 800606c:	4683      	mov	fp, r0
 800606e:	f000 febb 	bl	8006de8 <__mcmp>
 8006072:	2800      	cmp	r0, #0
 8006074:	dcb2      	bgt.n	8005fdc <_dtoa_r+0xac4>
 8006076:	d102      	bne.n	800607e <_dtoa_r+0xb66>
 8006078:	9b08      	ldr	r3, [sp, #32]
 800607a:	07db      	lsls	r3, r3, #31
 800607c:	d4ae      	bmi.n	8005fdc <_dtoa_r+0xac4>
 800607e:	463b      	mov	r3, r7
 8006080:	461f      	mov	r7, r3
 8006082:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006086:	2a30      	cmp	r2, #48	; 0x30
 8006088:	d0fa      	beq.n	8006080 <_dtoa_r+0xb68>
 800608a:	e6f9      	b.n	8005e80 <_dtoa_r+0x968>
 800608c:	9a03      	ldr	r2, [sp, #12]
 800608e:	429a      	cmp	r2, r3
 8006090:	d1a5      	bne.n	8005fde <_dtoa_r+0xac6>
 8006092:	2331      	movs	r3, #49	; 0x31
 8006094:	f10a 0a01 	add.w	sl, sl, #1
 8006098:	e779      	b.n	8005f8e <_dtoa_r+0xa76>
 800609a:	4b14      	ldr	r3, [pc, #80]	; (80060ec <_dtoa_r+0xbd4>)
 800609c:	f7ff baa8 	b.w	80055f0 <_dtoa_r+0xd8>
 80060a0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	f47f aa81 	bne.w	80055aa <_dtoa_r+0x92>
 80060a8:	4b11      	ldr	r3, [pc, #68]	; (80060f0 <_dtoa_r+0xbd8>)
 80060aa:	f7ff baa1 	b.w	80055f0 <_dtoa_r+0xd8>
 80060ae:	f1b9 0f00 	cmp.w	r9, #0
 80060b2:	dc03      	bgt.n	80060bc <_dtoa_r+0xba4>
 80060b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80060b6:	2b02      	cmp	r3, #2
 80060b8:	f73f aecb 	bgt.w	8005e52 <_dtoa_r+0x93a>
 80060bc:	9f03      	ldr	r7, [sp, #12]
 80060be:	4621      	mov	r1, r4
 80060c0:	4658      	mov	r0, fp
 80060c2:	f7ff f99d 	bl	8005400 <quorem>
 80060c6:	9a03      	ldr	r2, [sp, #12]
 80060c8:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80060cc:	f807 3b01 	strb.w	r3, [r7], #1
 80060d0:	1aba      	subs	r2, r7, r2
 80060d2:	4591      	cmp	r9, r2
 80060d4:	ddba      	ble.n	800604c <_dtoa_r+0xb34>
 80060d6:	4659      	mov	r1, fp
 80060d8:	2300      	movs	r3, #0
 80060da:	220a      	movs	r2, #10
 80060dc:	4628      	mov	r0, r5
 80060de:	f000 fc1d 	bl	800691c <__multadd>
 80060e2:	4683      	mov	fp, r0
 80060e4:	e7eb      	b.n	80060be <_dtoa_r+0xba6>
 80060e6:	bf00      	nop
 80060e8:	08008709 	.word	0x08008709
 80060ec:	08008478 	.word	0x08008478
 80060f0:	080086a1 	.word	0x080086a1

080060f4 <fiprintf>:
 80060f4:	b40e      	push	{r1, r2, r3}
 80060f6:	b503      	push	{r0, r1, lr}
 80060f8:	4601      	mov	r1, r0
 80060fa:	ab03      	add	r3, sp, #12
 80060fc:	4805      	ldr	r0, [pc, #20]	; (8006114 <fiprintf+0x20>)
 80060fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8006102:	6800      	ldr	r0, [r0, #0]
 8006104:	9301      	str	r3, [sp, #4]
 8006106:	f001 fad3 	bl	80076b0 <_vfiprintf_r>
 800610a:	b002      	add	sp, #8
 800610c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006110:	b003      	add	sp, #12
 8006112:	4770      	bx	lr
 8006114:	200000a4 	.word	0x200000a4

08006118 <rshift>:
 8006118:	6903      	ldr	r3, [r0, #16]
 800611a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800611e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8006122:	f100 0414 	add.w	r4, r0, #20
 8006126:	ea4f 1261 	mov.w	r2, r1, asr #5
 800612a:	dd46      	ble.n	80061ba <rshift+0xa2>
 800612c:	f011 011f 	ands.w	r1, r1, #31
 8006130:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8006134:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8006138:	d10c      	bne.n	8006154 <rshift+0x3c>
 800613a:	4629      	mov	r1, r5
 800613c:	f100 0710 	add.w	r7, r0, #16
 8006140:	42b1      	cmp	r1, r6
 8006142:	d335      	bcc.n	80061b0 <rshift+0x98>
 8006144:	1a9b      	subs	r3, r3, r2
 8006146:	009b      	lsls	r3, r3, #2
 8006148:	1eea      	subs	r2, r5, #3
 800614a:	4296      	cmp	r6, r2
 800614c:	bf38      	it	cc
 800614e:	2300      	movcc	r3, #0
 8006150:	4423      	add	r3, r4
 8006152:	e015      	b.n	8006180 <rshift+0x68>
 8006154:	46a1      	mov	r9, r4
 8006156:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800615a:	f1c1 0820 	rsb	r8, r1, #32
 800615e:	40cf      	lsrs	r7, r1
 8006160:	f105 0e04 	add.w	lr, r5, #4
 8006164:	4576      	cmp	r6, lr
 8006166:	46f4      	mov	ip, lr
 8006168:	d816      	bhi.n	8006198 <rshift+0x80>
 800616a:	1a9a      	subs	r2, r3, r2
 800616c:	0092      	lsls	r2, r2, #2
 800616e:	3a04      	subs	r2, #4
 8006170:	3501      	adds	r5, #1
 8006172:	42ae      	cmp	r6, r5
 8006174:	bf38      	it	cc
 8006176:	2200      	movcc	r2, #0
 8006178:	18a3      	adds	r3, r4, r2
 800617a:	50a7      	str	r7, [r4, r2]
 800617c:	b107      	cbz	r7, 8006180 <rshift+0x68>
 800617e:	3304      	adds	r3, #4
 8006180:	42a3      	cmp	r3, r4
 8006182:	eba3 0204 	sub.w	r2, r3, r4
 8006186:	bf08      	it	eq
 8006188:	2300      	moveq	r3, #0
 800618a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800618e:	6102      	str	r2, [r0, #16]
 8006190:	bf08      	it	eq
 8006192:	6143      	streq	r3, [r0, #20]
 8006194:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006198:	f8dc c000 	ldr.w	ip, [ip]
 800619c:	fa0c fc08 	lsl.w	ip, ip, r8
 80061a0:	ea4c 0707 	orr.w	r7, ip, r7
 80061a4:	f849 7b04 	str.w	r7, [r9], #4
 80061a8:	f85e 7b04 	ldr.w	r7, [lr], #4
 80061ac:	40cf      	lsrs	r7, r1
 80061ae:	e7d9      	b.n	8006164 <rshift+0x4c>
 80061b0:	f851 cb04 	ldr.w	ip, [r1], #4
 80061b4:	f847 cf04 	str.w	ip, [r7, #4]!
 80061b8:	e7c2      	b.n	8006140 <rshift+0x28>
 80061ba:	4623      	mov	r3, r4
 80061bc:	e7e0      	b.n	8006180 <rshift+0x68>

080061be <__hexdig_fun>:
 80061be:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80061c2:	2b09      	cmp	r3, #9
 80061c4:	d802      	bhi.n	80061cc <__hexdig_fun+0xe>
 80061c6:	3820      	subs	r0, #32
 80061c8:	b2c0      	uxtb	r0, r0
 80061ca:	4770      	bx	lr
 80061cc:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80061d0:	2b05      	cmp	r3, #5
 80061d2:	d801      	bhi.n	80061d8 <__hexdig_fun+0x1a>
 80061d4:	3847      	subs	r0, #71	; 0x47
 80061d6:	e7f7      	b.n	80061c8 <__hexdig_fun+0xa>
 80061d8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80061dc:	2b05      	cmp	r3, #5
 80061de:	d801      	bhi.n	80061e4 <__hexdig_fun+0x26>
 80061e0:	3827      	subs	r0, #39	; 0x27
 80061e2:	e7f1      	b.n	80061c8 <__hexdig_fun+0xa>
 80061e4:	2000      	movs	r0, #0
 80061e6:	4770      	bx	lr

080061e8 <__gethex>:
 80061e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061ec:	b08b      	sub	sp, #44	; 0x2c
 80061ee:	9305      	str	r3, [sp, #20]
 80061f0:	4bb2      	ldr	r3, [pc, #712]	; (80064bc <__gethex+0x2d4>)
 80061f2:	9002      	str	r0, [sp, #8]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	468b      	mov	fp, r1
 80061f8:	4618      	mov	r0, r3
 80061fa:	4690      	mov	r8, r2
 80061fc:	9303      	str	r3, [sp, #12]
 80061fe:	f7f9 ffb1 	bl	8000164 <strlen>
 8006202:	4682      	mov	sl, r0
 8006204:	9b03      	ldr	r3, [sp, #12]
 8006206:	f8db 2000 	ldr.w	r2, [fp]
 800620a:	4403      	add	r3, r0
 800620c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8006210:	9306      	str	r3, [sp, #24]
 8006212:	1c93      	adds	r3, r2, #2
 8006214:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8006218:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800621c:	32fe      	adds	r2, #254	; 0xfe
 800621e:	18d1      	adds	r1, r2, r3
 8006220:	461f      	mov	r7, r3
 8006222:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006226:	9101      	str	r1, [sp, #4]
 8006228:	2830      	cmp	r0, #48	; 0x30
 800622a:	d0f8      	beq.n	800621e <__gethex+0x36>
 800622c:	f7ff ffc7 	bl	80061be <__hexdig_fun>
 8006230:	4604      	mov	r4, r0
 8006232:	2800      	cmp	r0, #0
 8006234:	d13a      	bne.n	80062ac <__gethex+0xc4>
 8006236:	4652      	mov	r2, sl
 8006238:	4638      	mov	r0, r7
 800623a:	9903      	ldr	r1, [sp, #12]
 800623c:	f001 fb7e 	bl	800793c <strncmp>
 8006240:	4605      	mov	r5, r0
 8006242:	2800      	cmp	r0, #0
 8006244:	d166      	bne.n	8006314 <__gethex+0x12c>
 8006246:	f817 000a 	ldrb.w	r0, [r7, sl]
 800624a:	eb07 060a 	add.w	r6, r7, sl
 800624e:	f7ff ffb6 	bl	80061be <__hexdig_fun>
 8006252:	2800      	cmp	r0, #0
 8006254:	d060      	beq.n	8006318 <__gethex+0x130>
 8006256:	4633      	mov	r3, r6
 8006258:	7818      	ldrb	r0, [r3, #0]
 800625a:	461f      	mov	r7, r3
 800625c:	2830      	cmp	r0, #48	; 0x30
 800625e:	f103 0301 	add.w	r3, r3, #1
 8006262:	d0f9      	beq.n	8006258 <__gethex+0x70>
 8006264:	f7ff ffab 	bl	80061be <__hexdig_fun>
 8006268:	2301      	movs	r3, #1
 800626a:	fab0 f480 	clz	r4, r0
 800626e:	4635      	mov	r5, r6
 8006270:	0964      	lsrs	r4, r4, #5
 8006272:	9301      	str	r3, [sp, #4]
 8006274:	463a      	mov	r2, r7
 8006276:	4616      	mov	r6, r2
 8006278:	7830      	ldrb	r0, [r6, #0]
 800627a:	3201      	adds	r2, #1
 800627c:	f7ff ff9f 	bl	80061be <__hexdig_fun>
 8006280:	2800      	cmp	r0, #0
 8006282:	d1f8      	bne.n	8006276 <__gethex+0x8e>
 8006284:	4652      	mov	r2, sl
 8006286:	4630      	mov	r0, r6
 8006288:	9903      	ldr	r1, [sp, #12]
 800628a:	f001 fb57 	bl	800793c <strncmp>
 800628e:	b980      	cbnz	r0, 80062b2 <__gethex+0xca>
 8006290:	b94d      	cbnz	r5, 80062a6 <__gethex+0xbe>
 8006292:	eb06 050a 	add.w	r5, r6, sl
 8006296:	462a      	mov	r2, r5
 8006298:	4616      	mov	r6, r2
 800629a:	7830      	ldrb	r0, [r6, #0]
 800629c:	3201      	adds	r2, #1
 800629e:	f7ff ff8e 	bl	80061be <__hexdig_fun>
 80062a2:	2800      	cmp	r0, #0
 80062a4:	d1f8      	bne.n	8006298 <__gethex+0xb0>
 80062a6:	1bad      	subs	r5, r5, r6
 80062a8:	00ad      	lsls	r5, r5, #2
 80062aa:	e004      	b.n	80062b6 <__gethex+0xce>
 80062ac:	2400      	movs	r4, #0
 80062ae:	4625      	mov	r5, r4
 80062b0:	e7e0      	b.n	8006274 <__gethex+0x8c>
 80062b2:	2d00      	cmp	r5, #0
 80062b4:	d1f7      	bne.n	80062a6 <__gethex+0xbe>
 80062b6:	7833      	ldrb	r3, [r6, #0]
 80062b8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80062bc:	2b50      	cmp	r3, #80	; 0x50
 80062be:	d139      	bne.n	8006334 <__gethex+0x14c>
 80062c0:	7873      	ldrb	r3, [r6, #1]
 80062c2:	2b2b      	cmp	r3, #43	; 0x2b
 80062c4:	d02a      	beq.n	800631c <__gethex+0x134>
 80062c6:	2b2d      	cmp	r3, #45	; 0x2d
 80062c8:	d02c      	beq.n	8006324 <__gethex+0x13c>
 80062ca:	f04f 0900 	mov.w	r9, #0
 80062ce:	1c71      	adds	r1, r6, #1
 80062d0:	7808      	ldrb	r0, [r1, #0]
 80062d2:	f7ff ff74 	bl	80061be <__hexdig_fun>
 80062d6:	1e43      	subs	r3, r0, #1
 80062d8:	b2db      	uxtb	r3, r3
 80062da:	2b18      	cmp	r3, #24
 80062dc:	d82a      	bhi.n	8006334 <__gethex+0x14c>
 80062de:	f1a0 0210 	sub.w	r2, r0, #16
 80062e2:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80062e6:	f7ff ff6a 	bl	80061be <__hexdig_fun>
 80062ea:	1e43      	subs	r3, r0, #1
 80062ec:	b2db      	uxtb	r3, r3
 80062ee:	2b18      	cmp	r3, #24
 80062f0:	d91b      	bls.n	800632a <__gethex+0x142>
 80062f2:	f1b9 0f00 	cmp.w	r9, #0
 80062f6:	d000      	beq.n	80062fa <__gethex+0x112>
 80062f8:	4252      	negs	r2, r2
 80062fa:	4415      	add	r5, r2
 80062fc:	f8cb 1000 	str.w	r1, [fp]
 8006300:	b1d4      	cbz	r4, 8006338 <__gethex+0x150>
 8006302:	9b01      	ldr	r3, [sp, #4]
 8006304:	2b00      	cmp	r3, #0
 8006306:	bf14      	ite	ne
 8006308:	2700      	movne	r7, #0
 800630a:	2706      	moveq	r7, #6
 800630c:	4638      	mov	r0, r7
 800630e:	b00b      	add	sp, #44	; 0x2c
 8006310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006314:	463e      	mov	r6, r7
 8006316:	4625      	mov	r5, r4
 8006318:	2401      	movs	r4, #1
 800631a:	e7cc      	b.n	80062b6 <__gethex+0xce>
 800631c:	f04f 0900 	mov.w	r9, #0
 8006320:	1cb1      	adds	r1, r6, #2
 8006322:	e7d5      	b.n	80062d0 <__gethex+0xe8>
 8006324:	f04f 0901 	mov.w	r9, #1
 8006328:	e7fa      	b.n	8006320 <__gethex+0x138>
 800632a:	230a      	movs	r3, #10
 800632c:	fb03 0202 	mla	r2, r3, r2, r0
 8006330:	3a10      	subs	r2, #16
 8006332:	e7d6      	b.n	80062e2 <__gethex+0xfa>
 8006334:	4631      	mov	r1, r6
 8006336:	e7e1      	b.n	80062fc <__gethex+0x114>
 8006338:	4621      	mov	r1, r4
 800633a:	1bf3      	subs	r3, r6, r7
 800633c:	3b01      	subs	r3, #1
 800633e:	2b07      	cmp	r3, #7
 8006340:	dc0a      	bgt.n	8006358 <__gethex+0x170>
 8006342:	9802      	ldr	r0, [sp, #8]
 8006344:	f000 fa88 	bl	8006858 <_Balloc>
 8006348:	4604      	mov	r4, r0
 800634a:	b940      	cbnz	r0, 800635e <__gethex+0x176>
 800634c:	4602      	mov	r2, r0
 800634e:	21de      	movs	r1, #222	; 0xde
 8006350:	4b5b      	ldr	r3, [pc, #364]	; (80064c0 <__gethex+0x2d8>)
 8006352:	485c      	ldr	r0, [pc, #368]	; (80064c4 <__gethex+0x2dc>)
 8006354:	f7ff f836 	bl	80053c4 <__assert_func>
 8006358:	3101      	adds	r1, #1
 800635a:	105b      	asrs	r3, r3, #1
 800635c:	e7ef      	b.n	800633e <__gethex+0x156>
 800635e:	f04f 0b00 	mov.w	fp, #0
 8006362:	f100 0914 	add.w	r9, r0, #20
 8006366:	f1ca 0301 	rsb	r3, sl, #1
 800636a:	f8cd 9010 	str.w	r9, [sp, #16]
 800636e:	f8cd b004 	str.w	fp, [sp, #4]
 8006372:	9308      	str	r3, [sp, #32]
 8006374:	42b7      	cmp	r7, r6
 8006376:	d33f      	bcc.n	80063f8 <__gethex+0x210>
 8006378:	9f04      	ldr	r7, [sp, #16]
 800637a:	9b01      	ldr	r3, [sp, #4]
 800637c:	f847 3b04 	str.w	r3, [r7], #4
 8006380:	eba7 0709 	sub.w	r7, r7, r9
 8006384:	10bf      	asrs	r7, r7, #2
 8006386:	6127      	str	r7, [r4, #16]
 8006388:	4618      	mov	r0, r3
 800638a:	f000 fb57 	bl	8006a3c <__hi0bits>
 800638e:	017f      	lsls	r7, r7, #5
 8006390:	f8d8 6000 	ldr.w	r6, [r8]
 8006394:	1a3f      	subs	r7, r7, r0
 8006396:	42b7      	cmp	r7, r6
 8006398:	dd62      	ble.n	8006460 <__gethex+0x278>
 800639a:	1bbf      	subs	r7, r7, r6
 800639c:	4639      	mov	r1, r7
 800639e:	4620      	mov	r0, r4
 80063a0:	f000 fef1 	bl	8007186 <__any_on>
 80063a4:	4682      	mov	sl, r0
 80063a6:	b1a8      	cbz	r0, 80063d4 <__gethex+0x1ec>
 80063a8:	f04f 0a01 	mov.w	sl, #1
 80063ac:	1e7b      	subs	r3, r7, #1
 80063ae:	1159      	asrs	r1, r3, #5
 80063b0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80063b4:	f003 021f 	and.w	r2, r3, #31
 80063b8:	fa0a f202 	lsl.w	r2, sl, r2
 80063bc:	420a      	tst	r2, r1
 80063be:	d009      	beq.n	80063d4 <__gethex+0x1ec>
 80063c0:	4553      	cmp	r3, sl
 80063c2:	dd05      	ble.n	80063d0 <__gethex+0x1e8>
 80063c4:	4620      	mov	r0, r4
 80063c6:	1eb9      	subs	r1, r7, #2
 80063c8:	f000 fedd 	bl	8007186 <__any_on>
 80063cc:	2800      	cmp	r0, #0
 80063ce:	d144      	bne.n	800645a <__gethex+0x272>
 80063d0:	f04f 0a02 	mov.w	sl, #2
 80063d4:	4639      	mov	r1, r7
 80063d6:	4620      	mov	r0, r4
 80063d8:	f7ff fe9e 	bl	8006118 <rshift>
 80063dc:	443d      	add	r5, r7
 80063de:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80063e2:	42ab      	cmp	r3, r5
 80063e4:	da4a      	bge.n	800647c <__gethex+0x294>
 80063e6:	4621      	mov	r1, r4
 80063e8:	9802      	ldr	r0, [sp, #8]
 80063ea:	f000 fa75 	bl	80068d8 <_Bfree>
 80063ee:	2300      	movs	r3, #0
 80063f0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80063f2:	27a3      	movs	r7, #163	; 0xa3
 80063f4:	6013      	str	r3, [r2, #0]
 80063f6:	e789      	b.n	800630c <__gethex+0x124>
 80063f8:	1e73      	subs	r3, r6, #1
 80063fa:	9a06      	ldr	r2, [sp, #24]
 80063fc:	9307      	str	r3, [sp, #28]
 80063fe:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006402:	4293      	cmp	r3, r2
 8006404:	d019      	beq.n	800643a <__gethex+0x252>
 8006406:	f1bb 0f20 	cmp.w	fp, #32
 800640a:	d107      	bne.n	800641c <__gethex+0x234>
 800640c:	9b04      	ldr	r3, [sp, #16]
 800640e:	9a01      	ldr	r2, [sp, #4]
 8006410:	f843 2b04 	str.w	r2, [r3], #4
 8006414:	9304      	str	r3, [sp, #16]
 8006416:	2300      	movs	r3, #0
 8006418:	469b      	mov	fp, r3
 800641a:	9301      	str	r3, [sp, #4]
 800641c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8006420:	f7ff fecd 	bl	80061be <__hexdig_fun>
 8006424:	9b01      	ldr	r3, [sp, #4]
 8006426:	f000 000f 	and.w	r0, r0, #15
 800642a:	fa00 f00b 	lsl.w	r0, r0, fp
 800642e:	4303      	orrs	r3, r0
 8006430:	9301      	str	r3, [sp, #4]
 8006432:	f10b 0b04 	add.w	fp, fp, #4
 8006436:	9b07      	ldr	r3, [sp, #28]
 8006438:	e00d      	b.n	8006456 <__gethex+0x26e>
 800643a:	9a08      	ldr	r2, [sp, #32]
 800643c:	1e73      	subs	r3, r6, #1
 800643e:	4413      	add	r3, r2
 8006440:	42bb      	cmp	r3, r7
 8006442:	d3e0      	bcc.n	8006406 <__gethex+0x21e>
 8006444:	4618      	mov	r0, r3
 8006446:	4652      	mov	r2, sl
 8006448:	9903      	ldr	r1, [sp, #12]
 800644a:	9309      	str	r3, [sp, #36]	; 0x24
 800644c:	f001 fa76 	bl	800793c <strncmp>
 8006450:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006452:	2800      	cmp	r0, #0
 8006454:	d1d7      	bne.n	8006406 <__gethex+0x21e>
 8006456:	461e      	mov	r6, r3
 8006458:	e78c      	b.n	8006374 <__gethex+0x18c>
 800645a:	f04f 0a03 	mov.w	sl, #3
 800645e:	e7b9      	b.n	80063d4 <__gethex+0x1ec>
 8006460:	da09      	bge.n	8006476 <__gethex+0x28e>
 8006462:	1bf7      	subs	r7, r6, r7
 8006464:	4621      	mov	r1, r4
 8006466:	463a      	mov	r2, r7
 8006468:	9802      	ldr	r0, [sp, #8]
 800646a:	f000 fc4d 	bl	8006d08 <__lshift>
 800646e:	4604      	mov	r4, r0
 8006470:	1bed      	subs	r5, r5, r7
 8006472:	f100 0914 	add.w	r9, r0, #20
 8006476:	f04f 0a00 	mov.w	sl, #0
 800647a:	e7b0      	b.n	80063de <__gethex+0x1f6>
 800647c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006480:	42a8      	cmp	r0, r5
 8006482:	dd72      	ble.n	800656a <__gethex+0x382>
 8006484:	1b45      	subs	r5, r0, r5
 8006486:	42ae      	cmp	r6, r5
 8006488:	dc35      	bgt.n	80064f6 <__gethex+0x30e>
 800648a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800648e:	2b02      	cmp	r3, #2
 8006490:	d029      	beq.n	80064e6 <__gethex+0x2fe>
 8006492:	2b03      	cmp	r3, #3
 8006494:	d02b      	beq.n	80064ee <__gethex+0x306>
 8006496:	2b01      	cmp	r3, #1
 8006498:	d11c      	bne.n	80064d4 <__gethex+0x2ec>
 800649a:	42ae      	cmp	r6, r5
 800649c:	d11a      	bne.n	80064d4 <__gethex+0x2ec>
 800649e:	2e01      	cmp	r6, #1
 80064a0:	d112      	bne.n	80064c8 <__gethex+0x2e0>
 80064a2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80064a6:	9a05      	ldr	r2, [sp, #20]
 80064a8:	2762      	movs	r7, #98	; 0x62
 80064aa:	6013      	str	r3, [r2, #0]
 80064ac:	2301      	movs	r3, #1
 80064ae:	6123      	str	r3, [r4, #16]
 80064b0:	f8c9 3000 	str.w	r3, [r9]
 80064b4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80064b6:	601c      	str	r4, [r3, #0]
 80064b8:	e728      	b.n	800630c <__gethex+0x124>
 80064ba:	bf00      	nop
 80064bc:	08008780 	.word	0x08008780
 80064c0:	08008709 	.word	0x08008709
 80064c4:	0800871a 	.word	0x0800871a
 80064c8:	4620      	mov	r0, r4
 80064ca:	1e71      	subs	r1, r6, #1
 80064cc:	f000 fe5b 	bl	8007186 <__any_on>
 80064d0:	2800      	cmp	r0, #0
 80064d2:	d1e6      	bne.n	80064a2 <__gethex+0x2ba>
 80064d4:	4621      	mov	r1, r4
 80064d6:	9802      	ldr	r0, [sp, #8]
 80064d8:	f000 f9fe 	bl	80068d8 <_Bfree>
 80064dc:	2300      	movs	r3, #0
 80064de:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80064e0:	2750      	movs	r7, #80	; 0x50
 80064e2:	6013      	str	r3, [r2, #0]
 80064e4:	e712      	b.n	800630c <__gethex+0x124>
 80064e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d1f3      	bne.n	80064d4 <__gethex+0x2ec>
 80064ec:	e7d9      	b.n	80064a2 <__gethex+0x2ba>
 80064ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d1d6      	bne.n	80064a2 <__gethex+0x2ba>
 80064f4:	e7ee      	b.n	80064d4 <__gethex+0x2ec>
 80064f6:	1e6f      	subs	r7, r5, #1
 80064f8:	f1ba 0f00 	cmp.w	sl, #0
 80064fc:	d132      	bne.n	8006564 <__gethex+0x37c>
 80064fe:	b127      	cbz	r7, 800650a <__gethex+0x322>
 8006500:	4639      	mov	r1, r7
 8006502:	4620      	mov	r0, r4
 8006504:	f000 fe3f 	bl	8007186 <__any_on>
 8006508:	4682      	mov	sl, r0
 800650a:	2101      	movs	r1, #1
 800650c:	117b      	asrs	r3, r7, #5
 800650e:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8006512:	f007 071f 	and.w	r7, r7, #31
 8006516:	fa01 f707 	lsl.w	r7, r1, r7
 800651a:	421f      	tst	r7, r3
 800651c:	f04f 0702 	mov.w	r7, #2
 8006520:	4629      	mov	r1, r5
 8006522:	4620      	mov	r0, r4
 8006524:	bf18      	it	ne
 8006526:	f04a 0a02 	orrne.w	sl, sl, #2
 800652a:	1b76      	subs	r6, r6, r5
 800652c:	f7ff fdf4 	bl	8006118 <rshift>
 8006530:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8006534:	f1ba 0f00 	cmp.w	sl, #0
 8006538:	d048      	beq.n	80065cc <__gethex+0x3e4>
 800653a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800653e:	2b02      	cmp	r3, #2
 8006540:	d015      	beq.n	800656e <__gethex+0x386>
 8006542:	2b03      	cmp	r3, #3
 8006544:	d017      	beq.n	8006576 <__gethex+0x38e>
 8006546:	2b01      	cmp	r3, #1
 8006548:	d109      	bne.n	800655e <__gethex+0x376>
 800654a:	f01a 0f02 	tst.w	sl, #2
 800654e:	d006      	beq.n	800655e <__gethex+0x376>
 8006550:	f8d9 0000 	ldr.w	r0, [r9]
 8006554:	ea4a 0a00 	orr.w	sl, sl, r0
 8006558:	f01a 0f01 	tst.w	sl, #1
 800655c:	d10e      	bne.n	800657c <__gethex+0x394>
 800655e:	f047 0710 	orr.w	r7, r7, #16
 8006562:	e033      	b.n	80065cc <__gethex+0x3e4>
 8006564:	f04f 0a01 	mov.w	sl, #1
 8006568:	e7cf      	b.n	800650a <__gethex+0x322>
 800656a:	2701      	movs	r7, #1
 800656c:	e7e2      	b.n	8006534 <__gethex+0x34c>
 800656e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006570:	f1c3 0301 	rsb	r3, r3, #1
 8006574:	9315      	str	r3, [sp, #84]	; 0x54
 8006576:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006578:	2b00      	cmp	r3, #0
 800657a:	d0f0      	beq.n	800655e <__gethex+0x376>
 800657c:	f04f 0c00 	mov.w	ip, #0
 8006580:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8006584:	f104 0314 	add.w	r3, r4, #20
 8006588:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800658c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8006590:	4618      	mov	r0, r3
 8006592:	f853 2b04 	ldr.w	r2, [r3], #4
 8006596:	f1b2 3fff 	cmp.w	r2, #4294967295
 800659a:	d01c      	beq.n	80065d6 <__gethex+0x3ee>
 800659c:	3201      	adds	r2, #1
 800659e:	6002      	str	r2, [r0, #0]
 80065a0:	2f02      	cmp	r7, #2
 80065a2:	f104 0314 	add.w	r3, r4, #20
 80065a6:	d13d      	bne.n	8006624 <__gethex+0x43c>
 80065a8:	f8d8 2000 	ldr.w	r2, [r8]
 80065ac:	3a01      	subs	r2, #1
 80065ae:	42b2      	cmp	r2, r6
 80065b0:	d10a      	bne.n	80065c8 <__gethex+0x3e0>
 80065b2:	2201      	movs	r2, #1
 80065b4:	1171      	asrs	r1, r6, #5
 80065b6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80065ba:	f006 061f 	and.w	r6, r6, #31
 80065be:	fa02 f606 	lsl.w	r6, r2, r6
 80065c2:	421e      	tst	r6, r3
 80065c4:	bf18      	it	ne
 80065c6:	4617      	movne	r7, r2
 80065c8:	f047 0720 	orr.w	r7, r7, #32
 80065cc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80065ce:	601c      	str	r4, [r3, #0]
 80065d0:	9b05      	ldr	r3, [sp, #20]
 80065d2:	601d      	str	r5, [r3, #0]
 80065d4:	e69a      	b.n	800630c <__gethex+0x124>
 80065d6:	4299      	cmp	r1, r3
 80065d8:	f843 cc04 	str.w	ip, [r3, #-4]
 80065dc:	d8d8      	bhi.n	8006590 <__gethex+0x3a8>
 80065de:	68a3      	ldr	r3, [r4, #8]
 80065e0:	459b      	cmp	fp, r3
 80065e2:	db17      	blt.n	8006614 <__gethex+0x42c>
 80065e4:	6861      	ldr	r1, [r4, #4]
 80065e6:	9802      	ldr	r0, [sp, #8]
 80065e8:	3101      	adds	r1, #1
 80065ea:	f000 f935 	bl	8006858 <_Balloc>
 80065ee:	4681      	mov	r9, r0
 80065f0:	b918      	cbnz	r0, 80065fa <__gethex+0x412>
 80065f2:	4602      	mov	r2, r0
 80065f4:	2184      	movs	r1, #132	; 0x84
 80065f6:	4b19      	ldr	r3, [pc, #100]	; (800665c <__gethex+0x474>)
 80065f8:	e6ab      	b.n	8006352 <__gethex+0x16a>
 80065fa:	6922      	ldr	r2, [r4, #16]
 80065fc:	f104 010c 	add.w	r1, r4, #12
 8006600:	3202      	adds	r2, #2
 8006602:	0092      	lsls	r2, r2, #2
 8006604:	300c      	adds	r0, #12
 8006606:	f000 f919 	bl	800683c <memcpy>
 800660a:	4621      	mov	r1, r4
 800660c:	9802      	ldr	r0, [sp, #8]
 800660e:	f000 f963 	bl	80068d8 <_Bfree>
 8006612:	464c      	mov	r4, r9
 8006614:	6923      	ldr	r3, [r4, #16]
 8006616:	1c5a      	adds	r2, r3, #1
 8006618:	6122      	str	r2, [r4, #16]
 800661a:	2201      	movs	r2, #1
 800661c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006620:	615a      	str	r2, [r3, #20]
 8006622:	e7bd      	b.n	80065a0 <__gethex+0x3b8>
 8006624:	6922      	ldr	r2, [r4, #16]
 8006626:	455a      	cmp	r2, fp
 8006628:	dd0b      	ble.n	8006642 <__gethex+0x45a>
 800662a:	2101      	movs	r1, #1
 800662c:	4620      	mov	r0, r4
 800662e:	f7ff fd73 	bl	8006118 <rshift>
 8006632:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006636:	3501      	adds	r5, #1
 8006638:	42ab      	cmp	r3, r5
 800663a:	f6ff aed4 	blt.w	80063e6 <__gethex+0x1fe>
 800663e:	2701      	movs	r7, #1
 8006640:	e7c2      	b.n	80065c8 <__gethex+0x3e0>
 8006642:	f016 061f 	ands.w	r6, r6, #31
 8006646:	d0fa      	beq.n	800663e <__gethex+0x456>
 8006648:	4453      	add	r3, sl
 800664a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800664e:	f000 f9f5 	bl	8006a3c <__hi0bits>
 8006652:	f1c6 0620 	rsb	r6, r6, #32
 8006656:	42b0      	cmp	r0, r6
 8006658:	dbe7      	blt.n	800662a <__gethex+0x442>
 800665a:	e7f0      	b.n	800663e <__gethex+0x456>
 800665c:	08008709 	.word	0x08008709

08006660 <L_shift>:
 8006660:	f1c2 0208 	rsb	r2, r2, #8
 8006664:	0092      	lsls	r2, r2, #2
 8006666:	b570      	push	{r4, r5, r6, lr}
 8006668:	f1c2 0620 	rsb	r6, r2, #32
 800666c:	6843      	ldr	r3, [r0, #4]
 800666e:	6804      	ldr	r4, [r0, #0]
 8006670:	fa03 f506 	lsl.w	r5, r3, r6
 8006674:	432c      	orrs	r4, r5
 8006676:	40d3      	lsrs	r3, r2
 8006678:	6004      	str	r4, [r0, #0]
 800667a:	f840 3f04 	str.w	r3, [r0, #4]!
 800667e:	4288      	cmp	r0, r1
 8006680:	d3f4      	bcc.n	800666c <L_shift+0xc>
 8006682:	bd70      	pop	{r4, r5, r6, pc}

08006684 <__match>:
 8006684:	b530      	push	{r4, r5, lr}
 8006686:	6803      	ldr	r3, [r0, #0]
 8006688:	3301      	adds	r3, #1
 800668a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800668e:	b914      	cbnz	r4, 8006696 <__match+0x12>
 8006690:	6003      	str	r3, [r0, #0]
 8006692:	2001      	movs	r0, #1
 8006694:	bd30      	pop	{r4, r5, pc}
 8006696:	f813 2b01 	ldrb.w	r2, [r3], #1
 800669a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800669e:	2d19      	cmp	r5, #25
 80066a0:	bf98      	it	ls
 80066a2:	3220      	addls	r2, #32
 80066a4:	42a2      	cmp	r2, r4
 80066a6:	d0f0      	beq.n	800668a <__match+0x6>
 80066a8:	2000      	movs	r0, #0
 80066aa:	e7f3      	b.n	8006694 <__match+0x10>

080066ac <__hexnan>:
 80066ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066b0:	2500      	movs	r5, #0
 80066b2:	680b      	ldr	r3, [r1, #0]
 80066b4:	4682      	mov	sl, r0
 80066b6:	115e      	asrs	r6, r3, #5
 80066b8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80066bc:	f013 031f 	ands.w	r3, r3, #31
 80066c0:	bf18      	it	ne
 80066c2:	3604      	addne	r6, #4
 80066c4:	1f37      	subs	r7, r6, #4
 80066c6:	46b9      	mov	r9, r7
 80066c8:	463c      	mov	r4, r7
 80066ca:	46ab      	mov	fp, r5
 80066cc:	b087      	sub	sp, #28
 80066ce:	4690      	mov	r8, r2
 80066d0:	6802      	ldr	r2, [r0, #0]
 80066d2:	9301      	str	r3, [sp, #4]
 80066d4:	f846 5c04 	str.w	r5, [r6, #-4]
 80066d8:	9502      	str	r5, [sp, #8]
 80066da:	7851      	ldrb	r1, [r2, #1]
 80066dc:	1c53      	adds	r3, r2, #1
 80066de:	9303      	str	r3, [sp, #12]
 80066e0:	b341      	cbz	r1, 8006734 <__hexnan+0x88>
 80066e2:	4608      	mov	r0, r1
 80066e4:	9205      	str	r2, [sp, #20]
 80066e6:	9104      	str	r1, [sp, #16]
 80066e8:	f7ff fd69 	bl	80061be <__hexdig_fun>
 80066ec:	2800      	cmp	r0, #0
 80066ee:	d14f      	bne.n	8006790 <__hexnan+0xe4>
 80066f0:	9904      	ldr	r1, [sp, #16]
 80066f2:	9a05      	ldr	r2, [sp, #20]
 80066f4:	2920      	cmp	r1, #32
 80066f6:	d818      	bhi.n	800672a <__hexnan+0x7e>
 80066f8:	9b02      	ldr	r3, [sp, #8]
 80066fa:	459b      	cmp	fp, r3
 80066fc:	dd13      	ble.n	8006726 <__hexnan+0x7a>
 80066fe:	454c      	cmp	r4, r9
 8006700:	d206      	bcs.n	8006710 <__hexnan+0x64>
 8006702:	2d07      	cmp	r5, #7
 8006704:	dc04      	bgt.n	8006710 <__hexnan+0x64>
 8006706:	462a      	mov	r2, r5
 8006708:	4649      	mov	r1, r9
 800670a:	4620      	mov	r0, r4
 800670c:	f7ff ffa8 	bl	8006660 <L_shift>
 8006710:	4544      	cmp	r4, r8
 8006712:	d950      	bls.n	80067b6 <__hexnan+0x10a>
 8006714:	2300      	movs	r3, #0
 8006716:	f1a4 0904 	sub.w	r9, r4, #4
 800671a:	f844 3c04 	str.w	r3, [r4, #-4]
 800671e:	461d      	mov	r5, r3
 8006720:	464c      	mov	r4, r9
 8006722:	f8cd b008 	str.w	fp, [sp, #8]
 8006726:	9a03      	ldr	r2, [sp, #12]
 8006728:	e7d7      	b.n	80066da <__hexnan+0x2e>
 800672a:	2929      	cmp	r1, #41	; 0x29
 800672c:	d156      	bne.n	80067dc <__hexnan+0x130>
 800672e:	3202      	adds	r2, #2
 8006730:	f8ca 2000 	str.w	r2, [sl]
 8006734:	f1bb 0f00 	cmp.w	fp, #0
 8006738:	d050      	beq.n	80067dc <__hexnan+0x130>
 800673a:	454c      	cmp	r4, r9
 800673c:	d206      	bcs.n	800674c <__hexnan+0xa0>
 800673e:	2d07      	cmp	r5, #7
 8006740:	dc04      	bgt.n	800674c <__hexnan+0xa0>
 8006742:	462a      	mov	r2, r5
 8006744:	4649      	mov	r1, r9
 8006746:	4620      	mov	r0, r4
 8006748:	f7ff ff8a 	bl	8006660 <L_shift>
 800674c:	4544      	cmp	r4, r8
 800674e:	d934      	bls.n	80067ba <__hexnan+0x10e>
 8006750:	4623      	mov	r3, r4
 8006752:	f1a8 0204 	sub.w	r2, r8, #4
 8006756:	f853 1b04 	ldr.w	r1, [r3], #4
 800675a:	429f      	cmp	r7, r3
 800675c:	f842 1f04 	str.w	r1, [r2, #4]!
 8006760:	d2f9      	bcs.n	8006756 <__hexnan+0xaa>
 8006762:	1b3b      	subs	r3, r7, r4
 8006764:	f023 0303 	bic.w	r3, r3, #3
 8006768:	3304      	adds	r3, #4
 800676a:	3401      	adds	r4, #1
 800676c:	3e03      	subs	r6, #3
 800676e:	42b4      	cmp	r4, r6
 8006770:	bf88      	it	hi
 8006772:	2304      	movhi	r3, #4
 8006774:	2200      	movs	r2, #0
 8006776:	4443      	add	r3, r8
 8006778:	f843 2b04 	str.w	r2, [r3], #4
 800677c:	429f      	cmp	r7, r3
 800677e:	d2fb      	bcs.n	8006778 <__hexnan+0xcc>
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	b91b      	cbnz	r3, 800678c <__hexnan+0xe0>
 8006784:	4547      	cmp	r7, r8
 8006786:	d127      	bne.n	80067d8 <__hexnan+0x12c>
 8006788:	2301      	movs	r3, #1
 800678a:	603b      	str	r3, [r7, #0]
 800678c:	2005      	movs	r0, #5
 800678e:	e026      	b.n	80067de <__hexnan+0x132>
 8006790:	3501      	adds	r5, #1
 8006792:	2d08      	cmp	r5, #8
 8006794:	f10b 0b01 	add.w	fp, fp, #1
 8006798:	dd06      	ble.n	80067a8 <__hexnan+0xfc>
 800679a:	4544      	cmp	r4, r8
 800679c:	d9c3      	bls.n	8006726 <__hexnan+0x7a>
 800679e:	2300      	movs	r3, #0
 80067a0:	2501      	movs	r5, #1
 80067a2:	f844 3c04 	str.w	r3, [r4, #-4]
 80067a6:	3c04      	subs	r4, #4
 80067a8:	6822      	ldr	r2, [r4, #0]
 80067aa:	f000 000f 	and.w	r0, r0, #15
 80067ae:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80067b2:	6022      	str	r2, [r4, #0]
 80067b4:	e7b7      	b.n	8006726 <__hexnan+0x7a>
 80067b6:	2508      	movs	r5, #8
 80067b8:	e7b5      	b.n	8006726 <__hexnan+0x7a>
 80067ba:	9b01      	ldr	r3, [sp, #4]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d0df      	beq.n	8006780 <__hexnan+0xd4>
 80067c0:	f04f 32ff 	mov.w	r2, #4294967295
 80067c4:	f1c3 0320 	rsb	r3, r3, #32
 80067c8:	fa22 f303 	lsr.w	r3, r2, r3
 80067cc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80067d0:	401a      	ands	r2, r3
 80067d2:	f846 2c04 	str.w	r2, [r6, #-4]
 80067d6:	e7d3      	b.n	8006780 <__hexnan+0xd4>
 80067d8:	3f04      	subs	r7, #4
 80067da:	e7d1      	b.n	8006780 <__hexnan+0xd4>
 80067dc:	2004      	movs	r0, #4
 80067de:	b007      	add	sp, #28
 80067e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080067e4 <_localeconv_r>:
 80067e4:	4800      	ldr	r0, [pc, #0]	; (80067e8 <_localeconv_r+0x4>)
 80067e6:	4770      	bx	lr
 80067e8:	200001fc 	.word	0x200001fc

080067ec <malloc>:
 80067ec:	4b02      	ldr	r3, [pc, #8]	; (80067f8 <malloc+0xc>)
 80067ee:	4601      	mov	r1, r0
 80067f0:	6818      	ldr	r0, [r3, #0]
 80067f2:	f000 bd65 	b.w	80072c0 <_malloc_r>
 80067f6:	bf00      	nop
 80067f8:	200000a4 	.word	0x200000a4

080067fc <__ascii_mbtowc>:
 80067fc:	b082      	sub	sp, #8
 80067fe:	b901      	cbnz	r1, 8006802 <__ascii_mbtowc+0x6>
 8006800:	a901      	add	r1, sp, #4
 8006802:	b142      	cbz	r2, 8006816 <__ascii_mbtowc+0x1a>
 8006804:	b14b      	cbz	r3, 800681a <__ascii_mbtowc+0x1e>
 8006806:	7813      	ldrb	r3, [r2, #0]
 8006808:	600b      	str	r3, [r1, #0]
 800680a:	7812      	ldrb	r2, [r2, #0]
 800680c:	1e10      	subs	r0, r2, #0
 800680e:	bf18      	it	ne
 8006810:	2001      	movne	r0, #1
 8006812:	b002      	add	sp, #8
 8006814:	4770      	bx	lr
 8006816:	4610      	mov	r0, r2
 8006818:	e7fb      	b.n	8006812 <__ascii_mbtowc+0x16>
 800681a:	f06f 0001 	mvn.w	r0, #1
 800681e:	e7f8      	b.n	8006812 <__ascii_mbtowc+0x16>

08006820 <memchr>:
 8006820:	4603      	mov	r3, r0
 8006822:	b510      	push	{r4, lr}
 8006824:	b2c9      	uxtb	r1, r1
 8006826:	4402      	add	r2, r0
 8006828:	4293      	cmp	r3, r2
 800682a:	4618      	mov	r0, r3
 800682c:	d101      	bne.n	8006832 <memchr+0x12>
 800682e:	2000      	movs	r0, #0
 8006830:	e003      	b.n	800683a <memchr+0x1a>
 8006832:	7804      	ldrb	r4, [r0, #0]
 8006834:	3301      	adds	r3, #1
 8006836:	428c      	cmp	r4, r1
 8006838:	d1f6      	bne.n	8006828 <memchr+0x8>
 800683a:	bd10      	pop	{r4, pc}

0800683c <memcpy>:
 800683c:	440a      	add	r2, r1
 800683e:	4291      	cmp	r1, r2
 8006840:	f100 33ff 	add.w	r3, r0, #4294967295
 8006844:	d100      	bne.n	8006848 <memcpy+0xc>
 8006846:	4770      	bx	lr
 8006848:	b510      	push	{r4, lr}
 800684a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800684e:	4291      	cmp	r1, r2
 8006850:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006854:	d1f9      	bne.n	800684a <memcpy+0xe>
 8006856:	bd10      	pop	{r4, pc}

08006858 <_Balloc>:
 8006858:	b570      	push	{r4, r5, r6, lr}
 800685a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800685c:	4604      	mov	r4, r0
 800685e:	460d      	mov	r5, r1
 8006860:	b976      	cbnz	r6, 8006880 <_Balloc+0x28>
 8006862:	2010      	movs	r0, #16
 8006864:	f7ff ffc2 	bl	80067ec <malloc>
 8006868:	4602      	mov	r2, r0
 800686a:	6260      	str	r0, [r4, #36]	; 0x24
 800686c:	b920      	cbnz	r0, 8006878 <_Balloc+0x20>
 800686e:	2166      	movs	r1, #102	; 0x66
 8006870:	4b17      	ldr	r3, [pc, #92]	; (80068d0 <_Balloc+0x78>)
 8006872:	4818      	ldr	r0, [pc, #96]	; (80068d4 <_Balloc+0x7c>)
 8006874:	f7fe fda6 	bl	80053c4 <__assert_func>
 8006878:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800687c:	6006      	str	r6, [r0, #0]
 800687e:	60c6      	str	r6, [r0, #12]
 8006880:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006882:	68f3      	ldr	r3, [r6, #12]
 8006884:	b183      	cbz	r3, 80068a8 <_Balloc+0x50>
 8006886:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006888:	68db      	ldr	r3, [r3, #12]
 800688a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800688e:	b9b8      	cbnz	r0, 80068c0 <_Balloc+0x68>
 8006890:	2101      	movs	r1, #1
 8006892:	fa01 f605 	lsl.w	r6, r1, r5
 8006896:	1d72      	adds	r2, r6, #5
 8006898:	4620      	mov	r0, r4
 800689a:	0092      	lsls	r2, r2, #2
 800689c:	f000 fc94 	bl	80071c8 <_calloc_r>
 80068a0:	b160      	cbz	r0, 80068bc <_Balloc+0x64>
 80068a2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80068a6:	e00e      	b.n	80068c6 <_Balloc+0x6e>
 80068a8:	2221      	movs	r2, #33	; 0x21
 80068aa:	2104      	movs	r1, #4
 80068ac:	4620      	mov	r0, r4
 80068ae:	f000 fc8b 	bl	80071c8 <_calloc_r>
 80068b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80068b4:	60f0      	str	r0, [r6, #12]
 80068b6:	68db      	ldr	r3, [r3, #12]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d1e4      	bne.n	8006886 <_Balloc+0x2e>
 80068bc:	2000      	movs	r0, #0
 80068be:	bd70      	pop	{r4, r5, r6, pc}
 80068c0:	6802      	ldr	r2, [r0, #0]
 80068c2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80068c6:	2300      	movs	r3, #0
 80068c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80068cc:	e7f7      	b.n	80068be <_Balloc+0x66>
 80068ce:	bf00      	nop
 80068d0:	080084f0 	.word	0x080084f0
 80068d4:	08008794 	.word	0x08008794

080068d8 <_Bfree>:
 80068d8:	b570      	push	{r4, r5, r6, lr}
 80068da:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80068dc:	4605      	mov	r5, r0
 80068de:	460c      	mov	r4, r1
 80068e0:	b976      	cbnz	r6, 8006900 <_Bfree+0x28>
 80068e2:	2010      	movs	r0, #16
 80068e4:	f7ff ff82 	bl	80067ec <malloc>
 80068e8:	4602      	mov	r2, r0
 80068ea:	6268      	str	r0, [r5, #36]	; 0x24
 80068ec:	b920      	cbnz	r0, 80068f8 <_Bfree+0x20>
 80068ee:	218a      	movs	r1, #138	; 0x8a
 80068f0:	4b08      	ldr	r3, [pc, #32]	; (8006914 <_Bfree+0x3c>)
 80068f2:	4809      	ldr	r0, [pc, #36]	; (8006918 <_Bfree+0x40>)
 80068f4:	f7fe fd66 	bl	80053c4 <__assert_func>
 80068f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80068fc:	6006      	str	r6, [r0, #0]
 80068fe:	60c6      	str	r6, [r0, #12]
 8006900:	b13c      	cbz	r4, 8006912 <_Bfree+0x3a>
 8006902:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006904:	6862      	ldr	r2, [r4, #4]
 8006906:	68db      	ldr	r3, [r3, #12]
 8006908:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800690c:	6021      	str	r1, [r4, #0]
 800690e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006912:	bd70      	pop	{r4, r5, r6, pc}
 8006914:	080084f0 	.word	0x080084f0
 8006918:	08008794 	.word	0x08008794

0800691c <__multadd>:
 800691c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006920:	4607      	mov	r7, r0
 8006922:	460c      	mov	r4, r1
 8006924:	461e      	mov	r6, r3
 8006926:	2000      	movs	r0, #0
 8006928:	690d      	ldr	r5, [r1, #16]
 800692a:	f101 0c14 	add.w	ip, r1, #20
 800692e:	f8dc 3000 	ldr.w	r3, [ip]
 8006932:	3001      	adds	r0, #1
 8006934:	b299      	uxth	r1, r3
 8006936:	fb02 6101 	mla	r1, r2, r1, r6
 800693a:	0c1e      	lsrs	r6, r3, #16
 800693c:	0c0b      	lsrs	r3, r1, #16
 800693e:	fb02 3306 	mla	r3, r2, r6, r3
 8006942:	b289      	uxth	r1, r1
 8006944:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006948:	4285      	cmp	r5, r0
 800694a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800694e:	f84c 1b04 	str.w	r1, [ip], #4
 8006952:	dcec      	bgt.n	800692e <__multadd+0x12>
 8006954:	b30e      	cbz	r6, 800699a <__multadd+0x7e>
 8006956:	68a3      	ldr	r3, [r4, #8]
 8006958:	42ab      	cmp	r3, r5
 800695a:	dc19      	bgt.n	8006990 <__multadd+0x74>
 800695c:	6861      	ldr	r1, [r4, #4]
 800695e:	4638      	mov	r0, r7
 8006960:	3101      	adds	r1, #1
 8006962:	f7ff ff79 	bl	8006858 <_Balloc>
 8006966:	4680      	mov	r8, r0
 8006968:	b928      	cbnz	r0, 8006976 <__multadd+0x5a>
 800696a:	4602      	mov	r2, r0
 800696c:	21b5      	movs	r1, #181	; 0xb5
 800696e:	4b0c      	ldr	r3, [pc, #48]	; (80069a0 <__multadd+0x84>)
 8006970:	480c      	ldr	r0, [pc, #48]	; (80069a4 <__multadd+0x88>)
 8006972:	f7fe fd27 	bl	80053c4 <__assert_func>
 8006976:	6922      	ldr	r2, [r4, #16]
 8006978:	f104 010c 	add.w	r1, r4, #12
 800697c:	3202      	adds	r2, #2
 800697e:	0092      	lsls	r2, r2, #2
 8006980:	300c      	adds	r0, #12
 8006982:	f7ff ff5b 	bl	800683c <memcpy>
 8006986:	4621      	mov	r1, r4
 8006988:	4638      	mov	r0, r7
 800698a:	f7ff ffa5 	bl	80068d8 <_Bfree>
 800698e:	4644      	mov	r4, r8
 8006990:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006994:	3501      	adds	r5, #1
 8006996:	615e      	str	r6, [r3, #20]
 8006998:	6125      	str	r5, [r4, #16]
 800699a:	4620      	mov	r0, r4
 800699c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069a0:	08008709 	.word	0x08008709
 80069a4:	08008794 	.word	0x08008794

080069a8 <__s2b>:
 80069a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069ac:	4615      	mov	r5, r2
 80069ae:	2209      	movs	r2, #9
 80069b0:	461f      	mov	r7, r3
 80069b2:	3308      	adds	r3, #8
 80069b4:	460c      	mov	r4, r1
 80069b6:	fb93 f3f2 	sdiv	r3, r3, r2
 80069ba:	4606      	mov	r6, r0
 80069bc:	2201      	movs	r2, #1
 80069be:	2100      	movs	r1, #0
 80069c0:	429a      	cmp	r2, r3
 80069c2:	db09      	blt.n	80069d8 <__s2b+0x30>
 80069c4:	4630      	mov	r0, r6
 80069c6:	f7ff ff47 	bl	8006858 <_Balloc>
 80069ca:	b940      	cbnz	r0, 80069de <__s2b+0x36>
 80069cc:	4602      	mov	r2, r0
 80069ce:	21ce      	movs	r1, #206	; 0xce
 80069d0:	4b18      	ldr	r3, [pc, #96]	; (8006a34 <__s2b+0x8c>)
 80069d2:	4819      	ldr	r0, [pc, #100]	; (8006a38 <__s2b+0x90>)
 80069d4:	f7fe fcf6 	bl	80053c4 <__assert_func>
 80069d8:	0052      	lsls	r2, r2, #1
 80069da:	3101      	adds	r1, #1
 80069dc:	e7f0      	b.n	80069c0 <__s2b+0x18>
 80069de:	9b08      	ldr	r3, [sp, #32]
 80069e0:	2d09      	cmp	r5, #9
 80069e2:	6143      	str	r3, [r0, #20]
 80069e4:	f04f 0301 	mov.w	r3, #1
 80069e8:	6103      	str	r3, [r0, #16]
 80069ea:	dd16      	ble.n	8006a1a <__s2b+0x72>
 80069ec:	f104 0909 	add.w	r9, r4, #9
 80069f0:	46c8      	mov	r8, r9
 80069f2:	442c      	add	r4, r5
 80069f4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80069f8:	4601      	mov	r1, r0
 80069fa:	220a      	movs	r2, #10
 80069fc:	4630      	mov	r0, r6
 80069fe:	3b30      	subs	r3, #48	; 0x30
 8006a00:	f7ff ff8c 	bl	800691c <__multadd>
 8006a04:	45a0      	cmp	r8, r4
 8006a06:	d1f5      	bne.n	80069f4 <__s2b+0x4c>
 8006a08:	f1a5 0408 	sub.w	r4, r5, #8
 8006a0c:	444c      	add	r4, r9
 8006a0e:	1b2d      	subs	r5, r5, r4
 8006a10:	1963      	adds	r3, r4, r5
 8006a12:	42bb      	cmp	r3, r7
 8006a14:	db04      	blt.n	8006a20 <__s2b+0x78>
 8006a16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a1a:	2509      	movs	r5, #9
 8006a1c:	340a      	adds	r4, #10
 8006a1e:	e7f6      	b.n	8006a0e <__s2b+0x66>
 8006a20:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006a24:	4601      	mov	r1, r0
 8006a26:	220a      	movs	r2, #10
 8006a28:	4630      	mov	r0, r6
 8006a2a:	3b30      	subs	r3, #48	; 0x30
 8006a2c:	f7ff ff76 	bl	800691c <__multadd>
 8006a30:	e7ee      	b.n	8006a10 <__s2b+0x68>
 8006a32:	bf00      	nop
 8006a34:	08008709 	.word	0x08008709
 8006a38:	08008794 	.word	0x08008794

08006a3c <__hi0bits>:
 8006a3c:	0c02      	lsrs	r2, r0, #16
 8006a3e:	0412      	lsls	r2, r2, #16
 8006a40:	4603      	mov	r3, r0
 8006a42:	b9ca      	cbnz	r2, 8006a78 <__hi0bits+0x3c>
 8006a44:	0403      	lsls	r3, r0, #16
 8006a46:	2010      	movs	r0, #16
 8006a48:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006a4c:	bf04      	itt	eq
 8006a4e:	021b      	lsleq	r3, r3, #8
 8006a50:	3008      	addeq	r0, #8
 8006a52:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006a56:	bf04      	itt	eq
 8006a58:	011b      	lsleq	r3, r3, #4
 8006a5a:	3004      	addeq	r0, #4
 8006a5c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006a60:	bf04      	itt	eq
 8006a62:	009b      	lsleq	r3, r3, #2
 8006a64:	3002      	addeq	r0, #2
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	db05      	blt.n	8006a76 <__hi0bits+0x3a>
 8006a6a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8006a6e:	f100 0001 	add.w	r0, r0, #1
 8006a72:	bf08      	it	eq
 8006a74:	2020      	moveq	r0, #32
 8006a76:	4770      	bx	lr
 8006a78:	2000      	movs	r0, #0
 8006a7a:	e7e5      	b.n	8006a48 <__hi0bits+0xc>

08006a7c <__lo0bits>:
 8006a7c:	6803      	ldr	r3, [r0, #0]
 8006a7e:	4602      	mov	r2, r0
 8006a80:	f013 0007 	ands.w	r0, r3, #7
 8006a84:	d00b      	beq.n	8006a9e <__lo0bits+0x22>
 8006a86:	07d9      	lsls	r1, r3, #31
 8006a88:	d421      	bmi.n	8006ace <__lo0bits+0x52>
 8006a8a:	0798      	lsls	r0, r3, #30
 8006a8c:	bf49      	itett	mi
 8006a8e:	085b      	lsrmi	r3, r3, #1
 8006a90:	089b      	lsrpl	r3, r3, #2
 8006a92:	2001      	movmi	r0, #1
 8006a94:	6013      	strmi	r3, [r2, #0]
 8006a96:	bf5c      	itt	pl
 8006a98:	2002      	movpl	r0, #2
 8006a9a:	6013      	strpl	r3, [r2, #0]
 8006a9c:	4770      	bx	lr
 8006a9e:	b299      	uxth	r1, r3
 8006aa0:	b909      	cbnz	r1, 8006aa6 <__lo0bits+0x2a>
 8006aa2:	2010      	movs	r0, #16
 8006aa4:	0c1b      	lsrs	r3, r3, #16
 8006aa6:	b2d9      	uxtb	r1, r3
 8006aa8:	b909      	cbnz	r1, 8006aae <__lo0bits+0x32>
 8006aaa:	3008      	adds	r0, #8
 8006aac:	0a1b      	lsrs	r3, r3, #8
 8006aae:	0719      	lsls	r1, r3, #28
 8006ab0:	bf04      	itt	eq
 8006ab2:	091b      	lsreq	r3, r3, #4
 8006ab4:	3004      	addeq	r0, #4
 8006ab6:	0799      	lsls	r1, r3, #30
 8006ab8:	bf04      	itt	eq
 8006aba:	089b      	lsreq	r3, r3, #2
 8006abc:	3002      	addeq	r0, #2
 8006abe:	07d9      	lsls	r1, r3, #31
 8006ac0:	d403      	bmi.n	8006aca <__lo0bits+0x4e>
 8006ac2:	085b      	lsrs	r3, r3, #1
 8006ac4:	f100 0001 	add.w	r0, r0, #1
 8006ac8:	d003      	beq.n	8006ad2 <__lo0bits+0x56>
 8006aca:	6013      	str	r3, [r2, #0]
 8006acc:	4770      	bx	lr
 8006ace:	2000      	movs	r0, #0
 8006ad0:	4770      	bx	lr
 8006ad2:	2020      	movs	r0, #32
 8006ad4:	4770      	bx	lr
	...

08006ad8 <__i2b>:
 8006ad8:	b510      	push	{r4, lr}
 8006ada:	460c      	mov	r4, r1
 8006adc:	2101      	movs	r1, #1
 8006ade:	f7ff febb 	bl	8006858 <_Balloc>
 8006ae2:	4602      	mov	r2, r0
 8006ae4:	b928      	cbnz	r0, 8006af2 <__i2b+0x1a>
 8006ae6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006aea:	4b04      	ldr	r3, [pc, #16]	; (8006afc <__i2b+0x24>)
 8006aec:	4804      	ldr	r0, [pc, #16]	; (8006b00 <__i2b+0x28>)
 8006aee:	f7fe fc69 	bl	80053c4 <__assert_func>
 8006af2:	2301      	movs	r3, #1
 8006af4:	6144      	str	r4, [r0, #20]
 8006af6:	6103      	str	r3, [r0, #16]
 8006af8:	bd10      	pop	{r4, pc}
 8006afa:	bf00      	nop
 8006afc:	08008709 	.word	0x08008709
 8006b00:	08008794 	.word	0x08008794

08006b04 <__multiply>:
 8006b04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b08:	4691      	mov	r9, r2
 8006b0a:	690a      	ldr	r2, [r1, #16]
 8006b0c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006b10:	460c      	mov	r4, r1
 8006b12:	429a      	cmp	r2, r3
 8006b14:	bfbe      	ittt	lt
 8006b16:	460b      	movlt	r3, r1
 8006b18:	464c      	movlt	r4, r9
 8006b1a:	4699      	movlt	r9, r3
 8006b1c:	6927      	ldr	r7, [r4, #16]
 8006b1e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006b22:	68a3      	ldr	r3, [r4, #8]
 8006b24:	6861      	ldr	r1, [r4, #4]
 8006b26:	eb07 060a 	add.w	r6, r7, sl
 8006b2a:	42b3      	cmp	r3, r6
 8006b2c:	b085      	sub	sp, #20
 8006b2e:	bfb8      	it	lt
 8006b30:	3101      	addlt	r1, #1
 8006b32:	f7ff fe91 	bl	8006858 <_Balloc>
 8006b36:	b930      	cbnz	r0, 8006b46 <__multiply+0x42>
 8006b38:	4602      	mov	r2, r0
 8006b3a:	f240 115d 	movw	r1, #349	; 0x15d
 8006b3e:	4b43      	ldr	r3, [pc, #268]	; (8006c4c <__multiply+0x148>)
 8006b40:	4843      	ldr	r0, [pc, #268]	; (8006c50 <__multiply+0x14c>)
 8006b42:	f7fe fc3f 	bl	80053c4 <__assert_func>
 8006b46:	f100 0514 	add.w	r5, r0, #20
 8006b4a:	462b      	mov	r3, r5
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006b52:	4543      	cmp	r3, r8
 8006b54:	d321      	bcc.n	8006b9a <__multiply+0x96>
 8006b56:	f104 0314 	add.w	r3, r4, #20
 8006b5a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006b5e:	f109 0314 	add.w	r3, r9, #20
 8006b62:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006b66:	9202      	str	r2, [sp, #8]
 8006b68:	1b3a      	subs	r2, r7, r4
 8006b6a:	3a15      	subs	r2, #21
 8006b6c:	f022 0203 	bic.w	r2, r2, #3
 8006b70:	3204      	adds	r2, #4
 8006b72:	f104 0115 	add.w	r1, r4, #21
 8006b76:	428f      	cmp	r7, r1
 8006b78:	bf38      	it	cc
 8006b7a:	2204      	movcc	r2, #4
 8006b7c:	9201      	str	r2, [sp, #4]
 8006b7e:	9a02      	ldr	r2, [sp, #8]
 8006b80:	9303      	str	r3, [sp, #12]
 8006b82:	429a      	cmp	r2, r3
 8006b84:	d80c      	bhi.n	8006ba0 <__multiply+0x9c>
 8006b86:	2e00      	cmp	r6, #0
 8006b88:	dd03      	ble.n	8006b92 <__multiply+0x8e>
 8006b8a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d059      	beq.n	8006c46 <__multiply+0x142>
 8006b92:	6106      	str	r6, [r0, #16]
 8006b94:	b005      	add	sp, #20
 8006b96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b9a:	f843 2b04 	str.w	r2, [r3], #4
 8006b9e:	e7d8      	b.n	8006b52 <__multiply+0x4e>
 8006ba0:	f8b3 a000 	ldrh.w	sl, [r3]
 8006ba4:	f1ba 0f00 	cmp.w	sl, #0
 8006ba8:	d023      	beq.n	8006bf2 <__multiply+0xee>
 8006baa:	46a9      	mov	r9, r5
 8006bac:	f04f 0c00 	mov.w	ip, #0
 8006bb0:	f104 0e14 	add.w	lr, r4, #20
 8006bb4:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006bb8:	f8d9 1000 	ldr.w	r1, [r9]
 8006bbc:	fa1f fb82 	uxth.w	fp, r2
 8006bc0:	b289      	uxth	r1, r1
 8006bc2:	fb0a 110b 	mla	r1, sl, fp, r1
 8006bc6:	4461      	add	r1, ip
 8006bc8:	f8d9 c000 	ldr.w	ip, [r9]
 8006bcc:	0c12      	lsrs	r2, r2, #16
 8006bce:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006bd2:	fb0a c202 	mla	r2, sl, r2, ip
 8006bd6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006bda:	b289      	uxth	r1, r1
 8006bdc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006be0:	4577      	cmp	r7, lr
 8006be2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006be6:	f849 1b04 	str.w	r1, [r9], #4
 8006bea:	d8e3      	bhi.n	8006bb4 <__multiply+0xb0>
 8006bec:	9a01      	ldr	r2, [sp, #4]
 8006bee:	f845 c002 	str.w	ip, [r5, r2]
 8006bf2:	9a03      	ldr	r2, [sp, #12]
 8006bf4:	3304      	adds	r3, #4
 8006bf6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006bfa:	f1b9 0f00 	cmp.w	r9, #0
 8006bfe:	d020      	beq.n	8006c42 <__multiply+0x13e>
 8006c00:	46ae      	mov	lr, r5
 8006c02:	f04f 0a00 	mov.w	sl, #0
 8006c06:	6829      	ldr	r1, [r5, #0]
 8006c08:	f104 0c14 	add.w	ip, r4, #20
 8006c0c:	f8bc b000 	ldrh.w	fp, [ip]
 8006c10:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006c14:	b289      	uxth	r1, r1
 8006c16:	fb09 220b 	mla	r2, r9, fp, r2
 8006c1a:	4492      	add	sl, r2
 8006c1c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006c20:	f84e 1b04 	str.w	r1, [lr], #4
 8006c24:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006c28:	f8be 1000 	ldrh.w	r1, [lr]
 8006c2c:	0c12      	lsrs	r2, r2, #16
 8006c2e:	fb09 1102 	mla	r1, r9, r2, r1
 8006c32:	4567      	cmp	r7, ip
 8006c34:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006c38:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006c3c:	d8e6      	bhi.n	8006c0c <__multiply+0x108>
 8006c3e:	9a01      	ldr	r2, [sp, #4]
 8006c40:	50a9      	str	r1, [r5, r2]
 8006c42:	3504      	adds	r5, #4
 8006c44:	e79b      	b.n	8006b7e <__multiply+0x7a>
 8006c46:	3e01      	subs	r6, #1
 8006c48:	e79d      	b.n	8006b86 <__multiply+0x82>
 8006c4a:	bf00      	nop
 8006c4c:	08008709 	.word	0x08008709
 8006c50:	08008794 	.word	0x08008794

08006c54 <__pow5mult>:
 8006c54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c58:	4615      	mov	r5, r2
 8006c5a:	f012 0203 	ands.w	r2, r2, #3
 8006c5e:	4606      	mov	r6, r0
 8006c60:	460f      	mov	r7, r1
 8006c62:	d007      	beq.n	8006c74 <__pow5mult+0x20>
 8006c64:	4c25      	ldr	r4, [pc, #148]	; (8006cfc <__pow5mult+0xa8>)
 8006c66:	3a01      	subs	r2, #1
 8006c68:	2300      	movs	r3, #0
 8006c6a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006c6e:	f7ff fe55 	bl	800691c <__multadd>
 8006c72:	4607      	mov	r7, r0
 8006c74:	10ad      	asrs	r5, r5, #2
 8006c76:	d03d      	beq.n	8006cf4 <__pow5mult+0xa0>
 8006c78:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006c7a:	b97c      	cbnz	r4, 8006c9c <__pow5mult+0x48>
 8006c7c:	2010      	movs	r0, #16
 8006c7e:	f7ff fdb5 	bl	80067ec <malloc>
 8006c82:	4602      	mov	r2, r0
 8006c84:	6270      	str	r0, [r6, #36]	; 0x24
 8006c86:	b928      	cbnz	r0, 8006c94 <__pow5mult+0x40>
 8006c88:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006c8c:	4b1c      	ldr	r3, [pc, #112]	; (8006d00 <__pow5mult+0xac>)
 8006c8e:	481d      	ldr	r0, [pc, #116]	; (8006d04 <__pow5mult+0xb0>)
 8006c90:	f7fe fb98 	bl	80053c4 <__assert_func>
 8006c94:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006c98:	6004      	str	r4, [r0, #0]
 8006c9a:	60c4      	str	r4, [r0, #12]
 8006c9c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006ca0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006ca4:	b94c      	cbnz	r4, 8006cba <__pow5mult+0x66>
 8006ca6:	f240 2171 	movw	r1, #625	; 0x271
 8006caa:	4630      	mov	r0, r6
 8006cac:	f7ff ff14 	bl	8006ad8 <__i2b>
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	4604      	mov	r4, r0
 8006cb4:	f8c8 0008 	str.w	r0, [r8, #8]
 8006cb8:	6003      	str	r3, [r0, #0]
 8006cba:	f04f 0900 	mov.w	r9, #0
 8006cbe:	07eb      	lsls	r3, r5, #31
 8006cc0:	d50a      	bpl.n	8006cd8 <__pow5mult+0x84>
 8006cc2:	4639      	mov	r1, r7
 8006cc4:	4622      	mov	r2, r4
 8006cc6:	4630      	mov	r0, r6
 8006cc8:	f7ff ff1c 	bl	8006b04 <__multiply>
 8006ccc:	4680      	mov	r8, r0
 8006cce:	4639      	mov	r1, r7
 8006cd0:	4630      	mov	r0, r6
 8006cd2:	f7ff fe01 	bl	80068d8 <_Bfree>
 8006cd6:	4647      	mov	r7, r8
 8006cd8:	106d      	asrs	r5, r5, #1
 8006cda:	d00b      	beq.n	8006cf4 <__pow5mult+0xa0>
 8006cdc:	6820      	ldr	r0, [r4, #0]
 8006cde:	b938      	cbnz	r0, 8006cf0 <__pow5mult+0x9c>
 8006ce0:	4622      	mov	r2, r4
 8006ce2:	4621      	mov	r1, r4
 8006ce4:	4630      	mov	r0, r6
 8006ce6:	f7ff ff0d 	bl	8006b04 <__multiply>
 8006cea:	6020      	str	r0, [r4, #0]
 8006cec:	f8c0 9000 	str.w	r9, [r0]
 8006cf0:	4604      	mov	r4, r0
 8006cf2:	e7e4      	b.n	8006cbe <__pow5mult+0x6a>
 8006cf4:	4638      	mov	r0, r7
 8006cf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006cfa:	bf00      	nop
 8006cfc:	080088e0 	.word	0x080088e0
 8006d00:	080084f0 	.word	0x080084f0
 8006d04:	08008794 	.word	0x08008794

08006d08 <__lshift>:
 8006d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d0c:	460c      	mov	r4, r1
 8006d0e:	4607      	mov	r7, r0
 8006d10:	4691      	mov	r9, r2
 8006d12:	6923      	ldr	r3, [r4, #16]
 8006d14:	6849      	ldr	r1, [r1, #4]
 8006d16:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006d1a:	68a3      	ldr	r3, [r4, #8]
 8006d1c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006d20:	f108 0601 	add.w	r6, r8, #1
 8006d24:	42b3      	cmp	r3, r6
 8006d26:	db0b      	blt.n	8006d40 <__lshift+0x38>
 8006d28:	4638      	mov	r0, r7
 8006d2a:	f7ff fd95 	bl	8006858 <_Balloc>
 8006d2e:	4605      	mov	r5, r0
 8006d30:	b948      	cbnz	r0, 8006d46 <__lshift+0x3e>
 8006d32:	4602      	mov	r2, r0
 8006d34:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006d38:	4b29      	ldr	r3, [pc, #164]	; (8006de0 <__lshift+0xd8>)
 8006d3a:	482a      	ldr	r0, [pc, #168]	; (8006de4 <__lshift+0xdc>)
 8006d3c:	f7fe fb42 	bl	80053c4 <__assert_func>
 8006d40:	3101      	adds	r1, #1
 8006d42:	005b      	lsls	r3, r3, #1
 8006d44:	e7ee      	b.n	8006d24 <__lshift+0x1c>
 8006d46:	2300      	movs	r3, #0
 8006d48:	f100 0114 	add.w	r1, r0, #20
 8006d4c:	f100 0210 	add.w	r2, r0, #16
 8006d50:	4618      	mov	r0, r3
 8006d52:	4553      	cmp	r3, sl
 8006d54:	db37      	blt.n	8006dc6 <__lshift+0xbe>
 8006d56:	6920      	ldr	r0, [r4, #16]
 8006d58:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006d5c:	f104 0314 	add.w	r3, r4, #20
 8006d60:	f019 091f 	ands.w	r9, r9, #31
 8006d64:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006d68:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006d6c:	d02f      	beq.n	8006dce <__lshift+0xc6>
 8006d6e:	468a      	mov	sl, r1
 8006d70:	f04f 0c00 	mov.w	ip, #0
 8006d74:	f1c9 0e20 	rsb	lr, r9, #32
 8006d78:	681a      	ldr	r2, [r3, #0]
 8006d7a:	fa02 f209 	lsl.w	r2, r2, r9
 8006d7e:	ea42 020c 	orr.w	r2, r2, ip
 8006d82:	f84a 2b04 	str.w	r2, [sl], #4
 8006d86:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d8a:	4298      	cmp	r0, r3
 8006d8c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006d90:	d8f2      	bhi.n	8006d78 <__lshift+0x70>
 8006d92:	1b03      	subs	r3, r0, r4
 8006d94:	3b15      	subs	r3, #21
 8006d96:	f023 0303 	bic.w	r3, r3, #3
 8006d9a:	3304      	adds	r3, #4
 8006d9c:	f104 0215 	add.w	r2, r4, #21
 8006da0:	4290      	cmp	r0, r2
 8006da2:	bf38      	it	cc
 8006da4:	2304      	movcc	r3, #4
 8006da6:	f841 c003 	str.w	ip, [r1, r3]
 8006daa:	f1bc 0f00 	cmp.w	ip, #0
 8006dae:	d001      	beq.n	8006db4 <__lshift+0xac>
 8006db0:	f108 0602 	add.w	r6, r8, #2
 8006db4:	3e01      	subs	r6, #1
 8006db6:	4638      	mov	r0, r7
 8006db8:	4621      	mov	r1, r4
 8006dba:	612e      	str	r6, [r5, #16]
 8006dbc:	f7ff fd8c 	bl	80068d8 <_Bfree>
 8006dc0:	4628      	mov	r0, r5
 8006dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dc6:	f842 0f04 	str.w	r0, [r2, #4]!
 8006dca:	3301      	adds	r3, #1
 8006dcc:	e7c1      	b.n	8006d52 <__lshift+0x4a>
 8006dce:	3904      	subs	r1, #4
 8006dd0:	f853 2b04 	ldr.w	r2, [r3], #4
 8006dd4:	4298      	cmp	r0, r3
 8006dd6:	f841 2f04 	str.w	r2, [r1, #4]!
 8006dda:	d8f9      	bhi.n	8006dd0 <__lshift+0xc8>
 8006ddc:	e7ea      	b.n	8006db4 <__lshift+0xac>
 8006dde:	bf00      	nop
 8006de0:	08008709 	.word	0x08008709
 8006de4:	08008794 	.word	0x08008794

08006de8 <__mcmp>:
 8006de8:	4603      	mov	r3, r0
 8006dea:	690a      	ldr	r2, [r1, #16]
 8006dec:	6900      	ldr	r0, [r0, #16]
 8006dee:	b530      	push	{r4, r5, lr}
 8006df0:	1a80      	subs	r0, r0, r2
 8006df2:	d10d      	bne.n	8006e10 <__mcmp+0x28>
 8006df4:	3314      	adds	r3, #20
 8006df6:	3114      	adds	r1, #20
 8006df8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006dfc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006e00:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006e04:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006e08:	4295      	cmp	r5, r2
 8006e0a:	d002      	beq.n	8006e12 <__mcmp+0x2a>
 8006e0c:	d304      	bcc.n	8006e18 <__mcmp+0x30>
 8006e0e:	2001      	movs	r0, #1
 8006e10:	bd30      	pop	{r4, r5, pc}
 8006e12:	42a3      	cmp	r3, r4
 8006e14:	d3f4      	bcc.n	8006e00 <__mcmp+0x18>
 8006e16:	e7fb      	b.n	8006e10 <__mcmp+0x28>
 8006e18:	f04f 30ff 	mov.w	r0, #4294967295
 8006e1c:	e7f8      	b.n	8006e10 <__mcmp+0x28>
	...

08006e20 <__mdiff>:
 8006e20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e24:	460d      	mov	r5, r1
 8006e26:	4607      	mov	r7, r0
 8006e28:	4611      	mov	r1, r2
 8006e2a:	4628      	mov	r0, r5
 8006e2c:	4614      	mov	r4, r2
 8006e2e:	f7ff ffdb 	bl	8006de8 <__mcmp>
 8006e32:	1e06      	subs	r6, r0, #0
 8006e34:	d111      	bne.n	8006e5a <__mdiff+0x3a>
 8006e36:	4631      	mov	r1, r6
 8006e38:	4638      	mov	r0, r7
 8006e3a:	f7ff fd0d 	bl	8006858 <_Balloc>
 8006e3e:	4602      	mov	r2, r0
 8006e40:	b928      	cbnz	r0, 8006e4e <__mdiff+0x2e>
 8006e42:	f240 2132 	movw	r1, #562	; 0x232
 8006e46:	4b3a      	ldr	r3, [pc, #232]	; (8006f30 <__mdiff+0x110>)
 8006e48:	483a      	ldr	r0, [pc, #232]	; (8006f34 <__mdiff+0x114>)
 8006e4a:	f7fe fabb 	bl	80053c4 <__assert_func>
 8006e4e:	2301      	movs	r3, #1
 8006e50:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006e54:	4610      	mov	r0, r2
 8006e56:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e5a:	bfa4      	itt	ge
 8006e5c:	4623      	movge	r3, r4
 8006e5e:	462c      	movge	r4, r5
 8006e60:	4638      	mov	r0, r7
 8006e62:	6861      	ldr	r1, [r4, #4]
 8006e64:	bfa6      	itte	ge
 8006e66:	461d      	movge	r5, r3
 8006e68:	2600      	movge	r6, #0
 8006e6a:	2601      	movlt	r6, #1
 8006e6c:	f7ff fcf4 	bl	8006858 <_Balloc>
 8006e70:	4602      	mov	r2, r0
 8006e72:	b918      	cbnz	r0, 8006e7c <__mdiff+0x5c>
 8006e74:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006e78:	4b2d      	ldr	r3, [pc, #180]	; (8006f30 <__mdiff+0x110>)
 8006e7a:	e7e5      	b.n	8006e48 <__mdiff+0x28>
 8006e7c:	f102 0814 	add.w	r8, r2, #20
 8006e80:	46c2      	mov	sl, r8
 8006e82:	f04f 0c00 	mov.w	ip, #0
 8006e86:	6927      	ldr	r7, [r4, #16]
 8006e88:	60c6      	str	r6, [r0, #12]
 8006e8a:	692e      	ldr	r6, [r5, #16]
 8006e8c:	f104 0014 	add.w	r0, r4, #20
 8006e90:	f105 0914 	add.w	r9, r5, #20
 8006e94:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8006e98:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006e9c:	3410      	adds	r4, #16
 8006e9e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8006ea2:	f859 3b04 	ldr.w	r3, [r9], #4
 8006ea6:	fa1f f18b 	uxth.w	r1, fp
 8006eaa:	448c      	add	ip, r1
 8006eac:	b299      	uxth	r1, r3
 8006eae:	0c1b      	lsrs	r3, r3, #16
 8006eb0:	ebac 0101 	sub.w	r1, ip, r1
 8006eb4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006eb8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006ebc:	b289      	uxth	r1, r1
 8006ebe:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006ec2:	454e      	cmp	r6, r9
 8006ec4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006ec8:	f84a 3b04 	str.w	r3, [sl], #4
 8006ecc:	d8e7      	bhi.n	8006e9e <__mdiff+0x7e>
 8006ece:	1b73      	subs	r3, r6, r5
 8006ed0:	3b15      	subs	r3, #21
 8006ed2:	f023 0303 	bic.w	r3, r3, #3
 8006ed6:	3515      	adds	r5, #21
 8006ed8:	3304      	adds	r3, #4
 8006eda:	42ae      	cmp	r6, r5
 8006edc:	bf38      	it	cc
 8006ede:	2304      	movcc	r3, #4
 8006ee0:	4418      	add	r0, r3
 8006ee2:	4443      	add	r3, r8
 8006ee4:	461e      	mov	r6, r3
 8006ee6:	4605      	mov	r5, r0
 8006ee8:	4575      	cmp	r5, lr
 8006eea:	d30e      	bcc.n	8006f0a <__mdiff+0xea>
 8006eec:	f10e 0103 	add.w	r1, lr, #3
 8006ef0:	1a09      	subs	r1, r1, r0
 8006ef2:	f021 0103 	bic.w	r1, r1, #3
 8006ef6:	3803      	subs	r0, #3
 8006ef8:	4586      	cmp	lr, r0
 8006efa:	bf38      	it	cc
 8006efc:	2100      	movcc	r1, #0
 8006efe:	4419      	add	r1, r3
 8006f00:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006f04:	b18b      	cbz	r3, 8006f2a <__mdiff+0x10a>
 8006f06:	6117      	str	r7, [r2, #16]
 8006f08:	e7a4      	b.n	8006e54 <__mdiff+0x34>
 8006f0a:	f855 8b04 	ldr.w	r8, [r5], #4
 8006f0e:	fa1f f188 	uxth.w	r1, r8
 8006f12:	4461      	add	r1, ip
 8006f14:	140c      	asrs	r4, r1, #16
 8006f16:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006f1a:	b289      	uxth	r1, r1
 8006f1c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006f20:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8006f24:	f846 1b04 	str.w	r1, [r6], #4
 8006f28:	e7de      	b.n	8006ee8 <__mdiff+0xc8>
 8006f2a:	3f01      	subs	r7, #1
 8006f2c:	e7e8      	b.n	8006f00 <__mdiff+0xe0>
 8006f2e:	bf00      	nop
 8006f30:	08008709 	.word	0x08008709
 8006f34:	08008794 	.word	0x08008794

08006f38 <__ulp>:
 8006f38:	4b11      	ldr	r3, [pc, #68]	; (8006f80 <__ulp+0x48>)
 8006f3a:	400b      	ands	r3, r1
 8006f3c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	dd02      	ble.n	8006f4a <__ulp+0x12>
 8006f44:	2000      	movs	r0, #0
 8006f46:	4619      	mov	r1, r3
 8006f48:	4770      	bx	lr
 8006f4a:	425b      	negs	r3, r3
 8006f4c:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8006f50:	f04f 0000 	mov.w	r0, #0
 8006f54:	f04f 0100 	mov.w	r1, #0
 8006f58:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006f5c:	da04      	bge.n	8006f68 <__ulp+0x30>
 8006f5e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006f62:	fa43 f102 	asr.w	r1, r3, r2
 8006f66:	4770      	bx	lr
 8006f68:	f1a2 0314 	sub.w	r3, r2, #20
 8006f6c:	2b1e      	cmp	r3, #30
 8006f6e:	bfd6      	itet	le
 8006f70:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8006f74:	2301      	movgt	r3, #1
 8006f76:	fa22 f303 	lsrle.w	r3, r2, r3
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	4770      	bx	lr
 8006f7e:	bf00      	nop
 8006f80:	7ff00000 	.word	0x7ff00000

08006f84 <__b2d>:
 8006f84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f88:	6907      	ldr	r7, [r0, #16]
 8006f8a:	f100 0914 	add.w	r9, r0, #20
 8006f8e:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8006f92:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8006f96:	f1a7 0804 	sub.w	r8, r7, #4
 8006f9a:	4630      	mov	r0, r6
 8006f9c:	f7ff fd4e 	bl	8006a3c <__hi0bits>
 8006fa0:	f1c0 0320 	rsb	r3, r0, #32
 8006fa4:	280a      	cmp	r0, #10
 8006fa6:	600b      	str	r3, [r1, #0]
 8006fa8:	491f      	ldr	r1, [pc, #124]	; (8007028 <__b2d+0xa4>)
 8006faa:	dc17      	bgt.n	8006fdc <__b2d+0x58>
 8006fac:	45c1      	cmp	r9, r8
 8006fae:	bf28      	it	cs
 8006fb0:	2200      	movcs	r2, #0
 8006fb2:	f1c0 0c0b 	rsb	ip, r0, #11
 8006fb6:	fa26 f30c 	lsr.w	r3, r6, ip
 8006fba:	bf38      	it	cc
 8006fbc:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8006fc0:	ea43 0501 	orr.w	r5, r3, r1
 8006fc4:	f100 0315 	add.w	r3, r0, #21
 8006fc8:	fa06 f303 	lsl.w	r3, r6, r3
 8006fcc:	fa22 f20c 	lsr.w	r2, r2, ip
 8006fd0:	ea43 0402 	orr.w	r4, r3, r2
 8006fd4:	4620      	mov	r0, r4
 8006fd6:	4629      	mov	r1, r5
 8006fd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006fdc:	45c1      	cmp	r9, r8
 8006fde:	bf2e      	itee	cs
 8006fe0:	2200      	movcs	r2, #0
 8006fe2:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8006fe6:	f1a7 0808 	subcc.w	r8, r7, #8
 8006fea:	f1b0 030b 	subs.w	r3, r0, #11
 8006fee:	d016      	beq.n	800701e <__b2d+0x9a>
 8006ff0:	f1c3 0720 	rsb	r7, r3, #32
 8006ff4:	fa22 f107 	lsr.w	r1, r2, r7
 8006ff8:	45c8      	cmp	r8, r9
 8006ffa:	fa06 f603 	lsl.w	r6, r6, r3
 8006ffe:	ea46 0601 	orr.w	r6, r6, r1
 8007002:	bf94      	ite	ls
 8007004:	2100      	movls	r1, #0
 8007006:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800700a:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800700e:	fa02 f003 	lsl.w	r0, r2, r3
 8007012:	40f9      	lsrs	r1, r7
 8007014:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007018:	ea40 0401 	orr.w	r4, r0, r1
 800701c:	e7da      	b.n	8006fd4 <__b2d+0x50>
 800701e:	4614      	mov	r4, r2
 8007020:	ea46 0501 	orr.w	r5, r6, r1
 8007024:	e7d6      	b.n	8006fd4 <__b2d+0x50>
 8007026:	bf00      	nop
 8007028:	3ff00000 	.word	0x3ff00000

0800702c <__d2b>:
 800702c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007030:	2101      	movs	r1, #1
 8007032:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8007036:	4690      	mov	r8, r2
 8007038:	461d      	mov	r5, r3
 800703a:	f7ff fc0d 	bl	8006858 <_Balloc>
 800703e:	4604      	mov	r4, r0
 8007040:	b930      	cbnz	r0, 8007050 <__d2b+0x24>
 8007042:	4602      	mov	r2, r0
 8007044:	f240 310a 	movw	r1, #778	; 0x30a
 8007048:	4b24      	ldr	r3, [pc, #144]	; (80070dc <__d2b+0xb0>)
 800704a:	4825      	ldr	r0, [pc, #148]	; (80070e0 <__d2b+0xb4>)
 800704c:	f7fe f9ba 	bl	80053c4 <__assert_func>
 8007050:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8007054:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8007058:	bb2d      	cbnz	r5, 80070a6 <__d2b+0x7a>
 800705a:	9301      	str	r3, [sp, #4]
 800705c:	f1b8 0300 	subs.w	r3, r8, #0
 8007060:	d026      	beq.n	80070b0 <__d2b+0x84>
 8007062:	4668      	mov	r0, sp
 8007064:	9300      	str	r3, [sp, #0]
 8007066:	f7ff fd09 	bl	8006a7c <__lo0bits>
 800706a:	9900      	ldr	r1, [sp, #0]
 800706c:	b1f0      	cbz	r0, 80070ac <__d2b+0x80>
 800706e:	9a01      	ldr	r2, [sp, #4]
 8007070:	f1c0 0320 	rsb	r3, r0, #32
 8007074:	fa02 f303 	lsl.w	r3, r2, r3
 8007078:	430b      	orrs	r3, r1
 800707a:	40c2      	lsrs	r2, r0
 800707c:	6163      	str	r3, [r4, #20]
 800707e:	9201      	str	r2, [sp, #4]
 8007080:	9b01      	ldr	r3, [sp, #4]
 8007082:	2b00      	cmp	r3, #0
 8007084:	bf14      	ite	ne
 8007086:	2102      	movne	r1, #2
 8007088:	2101      	moveq	r1, #1
 800708a:	61a3      	str	r3, [r4, #24]
 800708c:	6121      	str	r1, [r4, #16]
 800708e:	b1c5      	cbz	r5, 80070c2 <__d2b+0x96>
 8007090:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007094:	4405      	add	r5, r0
 8007096:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800709a:	603d      	str	r5, [r7, #0]
 800709c:	6030      	str	r0, [r6, #0]
 800709e:	4620      	mov	r0, r4
 80070a0:	b002      	add	sp, #8
 80070a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80070aa:	e7d6      	b.n	800705a <__d2b+0x2e>
 80070ac:	6161      	str	r1, [r4, #20]
 80070ae:	e7e7      	b.n	8007080 <__d2b+0x54>
 80070b0:	a801      	add	r0, sp, #4
 80070b2:	f7ff fce3 	bl	8006a7c <__lo0bits>
 80070b6:	2101      	movs	r1, #1
 80070b8:	9b01      	ldr	r3, [sp, #4]
 80070ba:	6121      	str	r1, [r4, #16]
 80070bc:	6163      	str	r3, [r4, #20]
 80070be:	3020      	adds	r0, #32
 80070c0:	e7e5      	b.n	800708e <__d2b+0x62>
 80070c2:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80070c6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80070ca:	6038      	str	r0, [r7, #0]
 80070cc:	6918      	ldr	r0, [r3, #16]
 80070ce:	f7ff fcb5 	bl	8006a3c <__hi0bits>
 80070d2:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80070d6:	6031      	str	r1, [r6, #0]
 80070d8:	e7e1      	b.n	800709e <__d2b+0x72>
 80070da:	bf00      	nop
 80070dc:	08008709 	.word	0x08008709
 80070e0:	08008794 	.word	0x08008794

080070e4 <__ratio>:
 80070e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070e8:	4688      	mov	r8, r1
 80070ea:	4669      	mov	r1, sp
 80070ec:	4681      	mov	r9, r0
 80070ee:	f7ff ff49 	bl	8006f84 <__b2d>
 80070f2:	460f      	mov	r7, r1
 80070f4:	4604      	mov	r4, r0
 80070f6:	460d      	mov	r5, r1
 80070f8:	4640      	mov	r0, r8
 80070fa:	a901      	add	r1, sp, #4
 80070fc:	f7ff ff42 	bl	8006f84 <__b2d>
 8007100:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007104:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007108:	468b      	mov	fp, r1
 800710a:	eba3 0c02 	sub.w	ip, r3, r2
 800710e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007112:	1a9b      	subs	r3, r3, r2
 8007114:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007118:	2b00      	cmp	r3, #0
 800711a:	bfd5      	itete	le
 800711c:	460a      	movle	r2, r1
 800711e:	462a      	movgt	r2, r5
 8007120:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007124:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007128:	bfd8      	it	le
 800712a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800712e:	465b      	mov	r3, fp
 8007130:	4602      	mov	r2, r0
 8007132:	4639      	mov	r1, r7
 8007134:	4620      	mov	r0, r4
 8007136:	f7f9 fb03 	bl	8000740 <__aeabi_ddiv>
 800713a:	b003      	add	sp, #12
 800713c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007140 <__copybits>:
 8007140:	3901      	subs	r1, #1
 8007142:	b570      	push	{r4, r5, r6, lr}
 8007144:	1149      	asrs	r1, r1, #5
 8007146:	6914      	ldr	r4, [r2, #16]
 8007148:	3101      	adds	r1, #1
 800714a:	f102 0314 	add.w	r3, r2, #20
 800714e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007152:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007156:	1f05      	subs	r5, r0, #4
 8007158:	42a3      	cmp	r3, r4
 800715a:	d30c      	bcc.n	8007176 <__copybits+0x36>
 800715c:	1aa3      	subs	r3, r4, r2
 800715e:	3b11      	subs	r3, #17
 8007160:	f023 0303 	bic.w	r3, r3, #3
 8007164:	3211      	adds	r2, #17
 8007166:	42a2      	cmp	r2, r4
 8007168:	bf88      	it	hi
 800716a:	2300      	movhi	r3, #0
 800716c:	4418      	add	r0, r3
 800716e:	2300      	movs	r3, #0
 8007170:	4288      	cmp	r0, r1
 8007172:	d305      	bcc.n	8007180 <__copybits+0x40>
 8007174:	bd70      	pop	{r4, r5, r6, pc}
 8007176:	f853 6b04 	ldr.w	r6, [r3], #4
 800717a:	f845 6f04 	str.w	r6, [r5, #4]!
 800717e:	e7eb      	b.n	8007158 <__copybits+0x18>
 8007180:	f840 3b04 	str.w	r3, [r0], #4
 8007184:	e7f4      	b.n	8007170 <__copybits+0x30>

08007186 <__any_on>:
 8007186:	f100 0214 	add.w	r2, r0, #20
 800718a:	6900      	ldr	r0, [r0, #16]
 800718c:	114b      	asrs	r3, r1, #5
 800718e:	4298      	cmp	r0, r3
 8007190:	b510      	push	{r4, lr}
 8007192:	db11      	blt.n	80071b8 <__any_on+0x32>
 8007194:	dd0a      	ble.n	80071ac <__any_on+0x26>
 8007196:	f011 011f 	ands.w	r1, r1, #31
 800719a:	d007      	beq.n	80071ac <__any_on+0x26>
 800719c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80071a0:	fa24 f001 	lsr.w	r0, r4, r1
 80071a4:	fa00 f101 	lsl.w	r1, r0, r1
 80071a8:	428c      	cmp	r4, r1
 80071aa:	d10b      	bne.n	80071c4 <__any_on+0x3e>
 80071ac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d803      	bhi.n	80071bc <__any_on+0x36>
 80071b4:	2000      	movs	r0, #0
 80071b6:	bd10      	pop	{r4, pc}
 80071b8:	4603      	mov	r3, r0
 80071ba:	e7f7      	b.n	80071ac <__any_on+0x26>
 80071bc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80071c0:	2900      	cmp	r1, #0
 80071c2:	d0f5      	beq.n	80071b0 <__any_on+0x2a>
 80071c4:	2001      	movs	r0, #1
 80071c6:	e7f6      	b.n	80071b6 <__any_on+0x30>

080071c8 <_calloc_r>:
 80071c8:	b570      	push	{r4, r5, r6, lr}
 80071ca:	fba1 5402 	umull	r5, r4, r1, r2
 80071ce:	b934      	cbnz	r4, 80071de <_calloc_r+0x16>
 80071d0:	4629      	mov	r1, r5
 80071d2:	f000 f875 	bl	80072c0 <_malloc_r>
 80071d6:	4606      	mov	r6, r0
 80071d8:	b928      	cbnz	r0, 80071e6 <_calloc_r+0x1e>
 80071da:	4630      	mov	r0, r6
 80071dc:	bd70      	pop	{r4, r5, r6, pc}
 80071de:	220c      	movs	r2, #12
 80071e0:	2600      	movs	r6, #0
 80071e2:	6002      	str	r2, [r0, #0]
 80071e4:	e7f9      	b.n	80071da <_calloc_r+0x12>
 80071e6:	462a      	mov	r2, r5
 80071e8:	4621      	mov	r1, r4
 80071ea:	f7fc fd5b 	bl	8003ca4 <memset>
 80071ee:	e7f4      	b.n	80071da <_calloc_r+0x12>

080071f0 <_free_r>:
 80071f0:	b538      	push	{r3, r4, r5, lr}
 80071f2:	4605      	mov	r5, r0
 80071f4:	2900      	cmp	r1, #0
 80071f6:	d040      	beq.n	800727a <_free_r+0x8a>
 80071f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071fc:	1f0c      	subs	r4, r1, #4
 80071fe:	2b00      	cmp	r3, #0
 8007200:	bfb8      	it	lt
 8007202:	18e4      	addlt	r4, r4, r3
 8007204:	f000 feba 	bl	8007f7c <__malloc_lock>
 8007208:	4a1c      	ldr	r2, [pc, #112]	; (800727c <_free_r+0x8c>)
 800720a:	6813      	ldr	r3, [r2, #0]
 800720c:	b933      	cbnz	r3, 800721c <_free_r+0x2c>
 800720e:	6063      	str	r3, [r4, #4]
 8007210:	6014      	str	r4, [r2, #0]
 8007212:	4628      	mov	r0, r5
 8007214:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007218:	f000 beb6 	b.w	8007f88 <__malloc_unlock>
 800721c:	42a3      	cmp	r3, r4
 800721e:	d908      	bls.n	8007232 <_free_r+0x42>
 8007220:	6820      	ldr	r0, [r4, #0]
 8007222:	1821      	adds	r1, r4, r0
 8007224:	428b      	cmp	r3, r1
 8007226:	bf01      	itttt	eq
 8007228:	6819      	ldreq	r1, [r3, #0]
 800722a:	685b      	ldreq	r3, [r3, #4]
 800722c:	1809      	addeq	r1, r1, r0
 800722e:	6021      	streq	r1, [r4, #0]
 8007230:	e7ed      	b.n	800720e <_free_r+0x1e>
 8007232:	461a      	mov	r2, r3
 8007234:	685b      	ldr	r3, [r3, #4]
 8007236:	b10b      	cbz	r3, 800723c <_free_r+0x4c>
 8007238:	42a3      	cmp	r3, r4
 800723a:	d9fa      	bls.n	8007232 <_free_r+0x42>
 800723c:	6811      	ldr	r1, [r2, #0]
 800723e:	1850      	adds	r0, r2, r1
 8007240:	42a0      	cmp	r0, r4
 8007242:	d10b      	bne.n	800725c <_free_r+0x6c>
 8007244:	6820      	ldr	r0, [r4, #0]
 8007246:	4401      	add	r1, r0
 8007248:	1850      	adds	r0, r2, r1
 800724a:	4283      	cmp	r3, r0
 800724c:	6011      	str	r1, [r2, #0]
 800724e:	d1e0      	bne.n	8007212 <_free_r+0x22>
 8007250:	6818      	ldr	r0, [r3, #0]
 8007252:	685b      	ldr	r3, [r3, #4]
 8007254:	4401      	add	r1, r0
 8007256:	6011      	str	r1, [r2, #0]
 8007258:	6053      	str	r3, [r2, #4]
 800725a:	e7da      	b.n	8007212 <_free_r+0x22>
 800725c:	d902      	bls.n	8007264 <_free_r+0x74>
 800725e:	230c      	movs	r3, #12
 8007260:	602b      	str	r3, [r5, #0]
 8007262:	e7d6      	b.n	8007212 <_free_r+0x22>
 8007264:	6820      	ldr	r0, [r4, #0]
 8007266:	1821      	adds	r1, r4, r0
 8007268:	428b      	cmp	r3, r1
 800726a:	bf01      	itttt	eq
 800726c:	6819      	ldreq	r1, [r3, #0]
 800726e:	685b      	ldreq	r3, [r3, #4]
 8007270:	1809      	addeq	r1, r1, r0
 8007272:	6021      	streq	r1, [r4, #0]
 8007274:	6063      	str	r3, [r4, #4]
 8007276:	6054      	str	r4, [r2, #4]
 8007278:	e7cb      	b.n	8007212 <_free_r+0x22>
 800727a:	bd38      	pop	{r3, r4, r5, pc}
 800727c:	20001038 	.word	0x20001038

08007280 <sbrk_aligned>:
 8007280:	b570      	push	{r4, r5, r6, lr}
 8007282:	4e0e      	ldr	r6, [pc, #56]	; (80072bc <sbrk_aligned+0x3c>)
 8007284:	460c      	mov	r4, r1
 8007286:	6831      	ldr	r1, [r6, #0]
 8007288:	4605      	mov	r5, r0
 800728a:	b911      	cbnz	r1, 8007292 <sbrk_aligned+0x12>
 800728c:	f000 fb46 	bl	800791c <_sbrk_r>
 8007290:	6030      	str	r0, [r6, #0]
 8007292:	4621      	mov	r1, r4
 8007294:	4628      	mov	r0, r5
 8007296:	f000 fb41 	bl	800791c <_sbrk_r>
 800729a:	1c43      	adds	r3, r0, #1
 800729c:	d00a      	beq.n	80072b4 <sbrk_aligned+0x34>
 800729e:	1cc4      	adds	r4, r0, #3
 80072a0:	f024 0403 	bic.w	r4, r4, #3
 80072a4:	42a0      	cmp	r0, r4
 80072a6:	d007      	beq.n	80072b8 <sbrk_aligned+0x38>
 80072a8:	1a21      	subs	r1, r4, r0
 80072aa:	4628      	mov	r0, r5
 80072ac:	f000 fb36 	bl	800791c <_sbrk_r>
 80072b0:	3001      	adds	r0, #1
 80072b2:	d101      	bne.n	80072b8 <sbrk_aligned+0x38>
 80072b4:	f04f 34ff 	mov.w	r4, #4294967295
 80072b8:	4620      	mov	r0, r4
 80072ba:	bd70      	pop	{r4, r5, r6, pc}
 80072bc:	2000103c 	.word	0x2000103c

080072c0 <_malloc_r>:
 80072c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072c4:	1ccd      	adds	r5, r1, #3
 80072c6:	f025 0503 	bic.w	r5, r5, #3
 80072ca:	3508      	adds	r5, #8
 80072cc:	2d0c      	cmp	r5, #12
 80072ce:	bf38      	it	cc
 80072d0:	250c      	movcc	r5, #12
 80072d2:	2d00      	cmp	r5, #0
 80072d4:	4607      	mov	r7, r0
 80072d6:	db01      	blt.n	80072dc <_malloc_r+0x1c>
 80072d8:	42a9      	cmp	r1, r5
 80072da:	d905      	bls.n	80072e8 <_malloc_r+0x28>
 80072dc:	230c      	movs	r3, #12
 80072de:	2600      	movs	r6, #0
 80072e0:	603b      	str	r3, [r7, #0]
 80072e2:	4630      	mov	r0, r6
 80072e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072e8:	4e2e      	ldr	r6, [pc, #184]	; (80073a4 <_malloc_r+0xe4>)
 80072ea:	f000 fe47 	bl	8007f7c <__malloc_lock>
 80072ee:	6833      	ldr	r3, [r6, #0]
 80072f0:	461c      	mov	r4, r3
 80072f2:	bb34      	cbnz	r4, 8007342 <_malloc_r+0x82>
 80072f4:	4629      	mov	r1, r5
 80072f6:	4638      	mov	r0, r7
 80072f8:	f7ff ffc2 	bl	8007280 <sbrk_aligned>
 80072fc:	1c43      	adds	r3, r0, #1
 80072fe:	4604      	mov	r4, r0
 8007300:	d14d      	bne.n	800739e <_malloc_r+0xde>
 8007302:	6834      	ldr	r4, [r6, #0]
 8007304:	4626      	mov	r6, r4
 8007306:	2e00      	cmp	r6, #0
 8007308:	d140      	bne.n	800738c <_malloc_r+0xcc>
 800730a:	6823      	ldr	r3, [r4, #0]
 800730c:	4631      	mov	r1, r6
 800730e:	4638      	mov	r0, r7
 8007310:	eb04 0803 	add.w	r8, r4, r3
 8007314:	f000 fb02 	bl	800791c <_sbrk_r>
 8007318:	4580      	cmp	r8, r0
 800731a:	d13a      	bne.n	8007392 <_malloc_r+0xd2>
 800731c:	6821      	ldr	r1, [r4, #0]
 800731e:	3503      	adds	r5, #3
 8007320:	1a6d      	subs	r5, r5, r1
 8007322:	f025 0503 	bic.w	r5, r5, #3
 8007326:	3508      	adds	r5, #8
 8007328:	2d0c      	cmp	r5, #12
 800732a:	bf38      	it	cc
 800732c:	250c      	movcc	r5, #12
 800732e:	4638      	mov	r0, r7
 8007330:	4629      	mov	r1, r5
 8007332:	f7ff ffa5 	bl	8007280 <sbrk_aligned>
 8007336:	3001      	adds	r0, #1
 8007338:	d02b      	beq.n	8007392 <_malloc_r+0xd2>
 800733a:	6823      	ldr	r3, [r4, #0]
 800733c:	442b      	add	r3, r5
 800733e:	6023      	str	r3, [r4, #0]
 8007340:	e00e      	b.n	8007360 <_malloc_r+0xa0>
 8007342:	6822      	ldr	r2, [r4, #0]
 8007344:	1b52      	subs	r2, r2, r5
 8007346:	d41e      	bmi.n	8007386 <_malloc_r+0xc6>
 8007348:	2a0b      	cmp	r2, #11
 800734a:	d916      	bls.n	800737a <_malloc_r+0xba>
 800734c:	1961      	adds	r1, r4, r5
 800734e:	42a3      	cmp	r3, r4
 8007350:	6025      	str	r5, [r4, #0]
 8007352:	bf18      	it	ne
 8007354:	6059      	strne	r1, [r3, #4]
 8007356:	6863      	ldr	r3, [r4, #4]
 8007358:	bf08      	it	eq
 800735a:	6031      	streq	r1, [r6, #0]
 800735c:	5162      	str	r2, [r4, r5]
 800735e:	604b      	str	r3, [r1, #4]
 8007360:	4638      	mov	r0, r7
 8007362:	f104 060b 	add.w	r6, r4, #11
 8007366:	f000 fe0f 	bl	8007f88 <__malloc_unlock>
 800736a:	f026 0607 	bic.w	r6, r6, #7
 800736e:	1d23      	adds	r3, r4, #4
 8007370:	1af2      	subs	r2, r6, r3
 8007372:	d0b6      	beq.n	80072e2 <_malloc_r+0x22>
 8007374:	1b9b      	subs	r3, r3, r6
 8007376:	50a3      	str	r3, [r4, r2]
 8007378:	e7b3      	b.n	80072e2 <_malloc_r+0x22>
 800737a:	6862      	ldr	r2, [r4, #4]
 800737c:	42a3      	cmp	r3, r4
 800737e:	bf0c      	ite	eq
 8007380:	6032      	streq	r2, [r6, #0]
 8007382:	605a      	strne	r2, [r3, #4]
 8007384:	e7ec      	b.n	8007360 <_malloc_r+0xa0>
 8007386:	4623      	mov	r3, r4
 8007388:	6864      	ldr	r4, [r4, #4]
 800738a:	e7b2      	b.n	80072f2 <_malloc_r+0x32>
 800738c:	4634      	mov	r4, r6
 800738e:	6876      	ldr	r6, [r6, #4]
 8007390:	e7b9      	b.n	8007306 <_malloc_r+0x46>
 8007392:	230c      	movs	r3, #12
 8007394:	4638      	mov	r0, r7
 8007396:	603b      	str	r3, [r7, #0]
 8007398:	f000 fdf6 	bl	8007f88 <__malloc_unlock>
 800739c:	e7a1      	b.n	80072e2 <_malloc_r+0x22>
 800739e:	6025      	str	r5, [r4, #0]
 80073a0:	e7de      	b.n	8007360 <_malloc_r+0xa0>
 80073a2:	bf00      	nop
 80073a4:	20001038 	.word	0x20001038

080073a8 <__ssputs_r>:
 80073a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073ac:	688e      	ldr	r6, [r1, #8]
 80073ae:	4682      	mov	sl, r0
 80073b0:	429e      	cmp	r6, r3
 80073b2:	460c      	mov	r4, r1
 80073b4:	4690      	mov	r8, r2
 80073b6:	461f      	mov	r7, r3
 80073b8:	d838      	bhi.n	800742c <__ssputs_r+0x84>
 80073ba:	898a      	ldrh	r2, [r1, #12]
 80073bc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80073c0:	d032      	beq.n	8007428 <__ssputs_r+0x80>
 80073c2:	6825      	ldr	r5, [r4, #0]
 80073c4:	6909      	ldr	r1, [r1, #16]
 80073c6:	3301      	adds	r3, #1
 80073c8:	eba5 0901 	sub.w	r9, r5, r1
 80073cc:	6965      	ldr	r5, [r4, #20]
 80073ce:	444b      	add	r3, r9
 80073d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80073d4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80073d8:	106d      	asrs	r5, r5, #1
 80073da:	429d      	cmp	r5, r3
 80073dc:	bf38      	it	cc
 80073de:	461d      	movcc	r5, r3
 80073e0:	0553      	lsls	r3, r2, #21
 80073e2:	d531      	bpl.n	8007448 <__ssputs_r+0xa0>
 80073e4:	4629      	mov	r1, r5
 80073e6:	f7ff ff6b 	bl	80072c0 <_malloc_r>
 80073ea:	4606      	mov	r6, r0
 80073ec:	b950      	cbnz	r0, 8007404 <__ssputs_r+0x5c>
 80073ee:	230c      	movs	r3, #12
 80073f0:	f04f 30ff 	mov.w	r0, #4294967295
 80073f4:	f8ca 3000 	str.w	r3, [sl]
 80073f8:	89a3      	ldrh	r3, [r4, #12]
 80073fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073fe:	81a3      	strh	r3, [r4, #12]
 8007400:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007404:	464a      	mov	r2, r9
 8007406:	6921      	ldr	r1, [r4, #16]
 8007408:	f7ff fa18 	bl	800683c <memcpy>
 800740c:	89a3      	ldrh	r3, [r4, #12]
 800740e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007412:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007416:	81a3      	strh	r3, [r4, #12]
 8007418:	6126      	str	r6, [r4, #16]
 800741a:	444e      	add	r6, r9
 800741c:	6026      	str	r6, [r4, #0]
 800741e:	463e      	mov	r6, r7
 8007420:	6165      	str	r5, [r4, #20]
 8007422:	eba5 0509 	sub.w	r5, r5, r9
 8007426:	60a5      	str	r5, [r4, #8]
 8007428:	42be      	cmp	r6, r7
 800742a:	d900      	bls.n	800742e <__ssputs_r+0x86>
 800742c:	463e      	mov	r6, r7
 800742e:	4632      	mov	r2, r6
 8007430:	4641      	mov	r1, r8
 8007432:	6820      	ldr	r0, [r4, #0]
 8007434:	f000 fd88 	bl	8007f48 <memmove>
 8007438:	68a3      	ldr	r3, [r4, #8]
 800743a:	2000      	movs	r0, #0
 800743c:	1b9b      	subs	r3, r3, r6
 800743e:	60a3      	str	r3, [r4, #8]
 8007440:	6823      	ldr	r3, [r4, #0]
 8007442:	4433      	add	r3, r6
 8007444:	6023      	str	r3, [r4, #0]
 8007446:	e7db      	b.n	8007400 <__ssputs_r+0x58>
 8007448:	462a      	mov	r2, r5
 800744a:	f000 fda3 	bl	8007f94 <_realloc_r>
 800744e:	4606      	mov	r6, r0
 8007450:	2800      	cmp	r0, #0
 8007452:	d1e1      	bne.n	8007418 <__ssputs_r+0x70>
 8007454:	4650      	mov	r0, sl
 8007456:	6921      	ldr	r1, [r4, #16]
 8007458:	f7ff feca 	bl	80071f0 <_free_r>
 800745c:	e7c7      	b.n	80073ee <__ssputs_r+0x46>
	...

08007460 <_svfiprintf_r>:
 8007460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007464:	4698      	mov	r8, r3
 8007466:	898b      	ldrh	r3, [r1, #12]
 8007468:	4607      	mov	r7, r0
 800746a:	061b      	lsls	r3, r3, #24
 800746c:	460d      	mov	r5, r1
 800746e:	4614      	mov	r4, r2
 8007470:	b09d      	sub	sp, #116	; 0x74
 8007472:	d50e      	bpl.n	8007492 <_svfiprintf_r+0x32>
 8007474:	690b      	ldr	r3, [r1, #16]
 8007476:	b963      	cbnz	r3, 8007492 <_svfiprintf_r+0x32>
 8007478:	2140      	movs	r1, #64	; 0x40
 800747a:	f7ff ff21 	bl	80072c0 <_malloc_r>
 800747e:	6028      	str	r0, [r5, #0]
 8007480:	6128      	str	r0, [r5, #16]
 8007482:	b920      	cbnz	r0, 800748e <_svfiprintf_r+0x2e>
 8007484:	230c      	movs	r3, #12
 8007486:	603b      	str	r3, [r7, #0]
 8007488:	f04f 30ff 	mov.w	r0, #4294967295
 800748c:	e0d1      	b.n	8007632 <_svfiprintf_r+0x1d2>
 800748e:	2340      	movs	r3, #64	; 0x40
 8007490:	616b      	str	r3, [r5, #20]
 8007492:	2300      	movs	r3, #0
 8007494:	9309      	str	r3, [sp, #36]	; 0x24
 8007496:	2320      	movs	r3, #32
 8007498:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800749c:	2330      	movs	r3, #48	; 0x30
 800749e:	f04f 0901 	mov.w	r9, #1
 80074a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80074a6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800764c <_svfiprintf_r+0x1ec>
 80074aa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80074ae:	4623      	mov	r3, r4
 80074b0:	469a      	mov	sl, r3
 80074b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80074b6:	b10a      	cbz	r2, 80074bc <_svfiprintf_r+0x5c>
 80074b8:	2a25      	cmp	r2, #37	; 0x25
 80074ba:	d1f9      	bne.n	80074b0 <_svfiprintf_r+0x50>
 80074bc:	ebba 0b04 	subs.w	fp, sl, r4
 80074c0:	d00b      	beq.n	80074da <_svfiprintf_r+0x7a>
 80074c2:	465b      	mov	r3, fp
 80074c4:	4622      	mov	r2, r4
 80074c6:	4629      	mov	r1, r5
 80074c8:	4638      	mov	r0, r7
 80074ca:	f7ff ff6d 	bl	80073a8 <__ssputs_r>
 80074ce:	3001      	adds	r0, #1
 80074d0:	f000 80aa 	beq.w	8007628 <_svfiprintf_r+0x1c8>
 80074d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80074d6:	445a      	add	r2, fp
 80074d8:	9209      	str	r2, [sp, #36]	; 0x24
 80074da:	f89a 3000 	ldrb.w	r3, [sl]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	f000 80a2 	beq.w	8007628 <_svfiprintf_r+0x1c8>
 80074e4:	2300      	movs	r3, #0
 80074e6:	f04f 32ff 	mov.w	r2, #4294967295
 80074ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80074ee:	f10a 0a01 	add.w	sl, sl, #1
 80074f2:	9304      	str	r3, [sp, #16]
 80074f4:	9307      	str	r3, [sp, #28]
 80074f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80074fa:	931a      	str	r3, [sp, #104]	; 0x68
 80074fc:	4654      	mov	r4, sl
 80074fe:	2205      	movs	r2, #5
 8007500:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007504:	4851      	ldr	r0, [pc, #324]	; (800764c <_svfiprintf_r+0x1ec>)
 8007506:	f7ff f98b 	bl	8006820 <memchr>
 800750a:	9a04      	ldr	r2, [sp, #16]
 800750c:	b9d8      	cbnz	r0, 8007546 <_svfiprintf_r+0xe6>
 800750e:	06d0      	lsls	r0, r2, #27
 8007510:	bf44      	itt	mi
 8007512:	2320      	movmi	r3, #32
 8007514:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007518:	0711      	lsls	r1, r2, #28
 800751a:	bf44      	itt	mi
 800751c:	232b      	movmi	r3, #43	; 0x2b
 800751e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007522:	f89a 3000 	ldrb.w	r3, [sl]
 8007526:	2b2a      	cmp	r3, #42	; 0x2a
 8007528:	d015      	beq.n	8007556 <_svfiprintf_r+0xf6>
 800752a:	4654      	mov	r4, sl
 800752c:	2000      	movs	r0, #0
 800752e:	f04f 0c0a 	mov.w	ip, #10
 8007532:	9a07      	ldr	r2, [sp, #28]
 8007534:	4621      	mov	r1, r4
 8007536:	f811 3b01 	ldrb.w	r3, [r1], #1
 800753a:	3b30      	subs	r3, #48	; 0x30
 800753c:	2b09      	cmp	r3, #9
 800753e:	d94e      	bls.n	80075de <_svfiprintf_r+0x17e>
 8007540:	b1b0      	cbz	r0, 8007570 <_svfiprintf_r+0x110>
 8007542:	9207      	str	r2, [sp, #28]
 8007544:	e014      	b.n	8007570 <_svfiprintf_r+0x110>
 8007546:	eba0 0308 	sub.w	r3, r0, r8
 800754a:	fa09 f303 	lsl.w	r3, r9, r3
 800754e:	4313      	orrs	r3, r2
 8007550:	46a2      	mov	sl, r4
 8007552:	9304      	str	r3, [sp, #16]
 8007554:	e7d2      	b.n	80074fc <_svfiprintf_r+0x9c>
 8007556:	9b03      	ldr	r3, [sp, #12]
 8007558:	1d19      	adds	r1, r3, #4
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	9103      	str	r1, [sp, #12]
 800755e:	2b00      	cmp	r3, #0
 8007560:	bfbb      	ittet	lt
 8007562:	425b      	neglt	r3, r3
 8007564:	f042 0202 	orrlt.w	r2, r2, #2
 8007568:	9307      	strge	r3, [sp, #28]
 800756a:	9307      	strlt	r3, [sp, #28]
 800756c:	bfb8      	it	lt
 800756e:	9204      	strlt	r2, [sp, #16]
 8007570:	7823      	ldrb	r3, [r4, #0]
 8007572:	2b2e      	cmp	r3, #46	; 0x2e
 8007574:	d10c      	bne.n	8007590 <_svfiprintf_r+0x130>
 8007576:	7863      	ldrb	r3, [r4, #1]
 8007578:	2b2a      	cmp	r3, #42	; 0x2a
 800757a:	d135      	bne.n	80075e8 <_svfiprintf_r+0x188>
 800757c:	9b03      	ldr	r3, [sp, #12]
 800757e:	3402      	adds	r4, #2
 8007580:	1d1a      	adds	r2, r3, #4
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	9203      	str	r2, [sp, #12]
 8007586:	2b00      	cmp	r3, #0
 8007588:	bfb8      	it	lt
 800758a:	f04f 33ff 	movlt.w	r3, #4294967295
 800758e:	9305      	str	r3, [sp, #20]
 8007590:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8007650 <_svfiprintf_r+0x1f0>
 8007594:	2203      	movs	r2, #3
 8007596:	4650      	mov	r0, sl
 8007598:	7821      	ldrb	r1, [r4, #0]
 800759a:	f7ff f941 	bl	8006820 <memchr>
 800759e:	b140      	cbz	r0, 80075b2 <_svfiprintf_r+0x152>
 80075a0:	2340      	movs	r3, #64	; 0x40
 80075a2:	eba0 000a 	sub.w	r0, r0, sl
 80075a6:	fa03 f000 	lsl.w	r0, r3, r0
 80075aa:	9b04      	ldr	r3, [sp, #16]
 80075ac:	3401      	adds	r4, #1
 80075ae:	4303      	orrs	r3, r0
 80075b0:	9304      	str	r3, [sp, #16]
 80075b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075b6:	2206      	movs	r2, #6
 80075b8:	4826      	ldr	r0, [pc, #152]	; (8007654 <_svfiprintf_r+0x1f4>)
 80075ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80075be:	f7ff f92f 	bl	8006820 <memchr>
 80075c2:	2800      	cmp	r0, #0
 80075c4:	d038      	beq.n	8007638 <_svfiprintf_r+0x1d8>
 80075c6:	4b24      	ldr	r3, [pc, #144]	; (8007658 <_svfiprintf_r+0x1f8>)
 80075c8:	bb1b      	cbnz	r3, 8007612 <_svfiprintf_r+0x1b2>
 80075ca:	9b03      	ldr	r3, [sp, #12]
 80075cc:	3307      	adds	r3, #7
 80075ce:	f023 0307 	bic.w	r3, r3, #7
 80075d2:	3308      	adds	r3, #8
 80075d4:	9303      	str	r3, [sp, #12]
 80075d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075d8:	4433      	add	r3, r6
 80075da:	9309      	str	r3, [sp, #36]	; 0x24
 80075dc:	e767      	b.n	80074ae <_svfiprintf_r+0x4e>
 80075de:	460c      	mov	r4, r1
 80075e0:	2001      	movs	r0, #1
 80075e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80075e6:	e7a5      	b.n	8007534 <_svfiprintf_r+0xd4>
 80075e8:	2300      	movs	r3, #0
 80075ea:	f04f 0c0a 	mov.w	ip, #10
 80075ee:	4619      	mov	r1, r3
 80075f0:	3401      	adds	r4, #1
 80075f2:	9305      	str	r3, [sp, #20]
 80075f4:	4620      	mov	r0, r4
 80075f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80075fa:	3a30      	subs	r2, #48	; 0x30
 80075fc:	2a09      	cmp	r2, #9
 80075fe:	d903      	bls.n	8007608 <_svfiprintf_r+0x1a8>
 8007600:	2b00      	cmp	r3, #0
 8007602:	d0c5      	beq.n	8007590 <_svfiprintf_r+0x130>
 8007604:	9105      	str	r1, [sp, #20]
 8007606:	e7c3      	b.n	8007590 <_svfiprintf_r+0x130>
 8007608:	4604      	mov	r4, r0
 800760a:	2301      	movs	r3, #1
 800760c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007610:	e7f0      	b.n	80075f4 <_svfiprintf_r+0x194>
 8007612:	ab03      	add	r3, sp, #12
 8007614:	9300      	str	r3, [sp, #0]
 8007616:	462a      	mov	r2, r5
 8007618:	4638      	mov	r0, r7
 800761a:	4b10      	ldr	r3, [pc, #64]	; (800765c <_svfiprintf_r+0x1fc>)
 800761c:	a904      	add	r1, sp, #16
 800761e:	f7fc fbe7 	bl	8003df0 <_printf_float>
 8007622:	1c42      	adds	r2, r0, #1
 8007624:	4606      	mov	r6, r0
 8007626:	d1d6      	bne.n	80075d6 <_svfiprintf_r+0x176>
 8007628:	89ab      	ldrh	r3, [r5, #12]
 800762a:	065b      	lsls	r3, r3, #25
 800762c:	f53f af2c 	bmi.w	8007488 <_svfiprintf_r+0x28>
 8007630:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007632:	b01d      	add	sp, #116	; 0x74
 8007634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007638:	ab03      	add	r3, sp, #12
 800763a:	9300      	str	r3, [sp, #0]
 800763c:	462a      	mov	r2, r5
 800763e:	4638      	mov	r0, r7
 8007640:	4b06      	ldr	r3, [pc, #24]	; (800765c <_svfiprintf_r+0x1fc>)
 8007642:	a904      	add	r1, sp, #16
 8007644:	f7fc fe70 	bl	8004328 <_printf_i>
 8007648:	e7eb      	b.n	8007622 <_svfiprintf_r+0x1c2>
 800764a:	bf00      	nop
 800764c:	080088ec 	.word	0x080088ec
 8007650:	080088f2 	.word	0x080088f2
 8007654:	080088f6 	.word	0x080088f6
 8007658:	08003df1 	.word	0x08003df1
 800765c:	080073a9 	.word	0x080073a9

08007660 <__sfputc_r>:
 8007660:	6893      	ldr	r3, [r2, #8]
 8007662:	b410      	push	{r4}
 8007664:	3b01      	subs	r3, #1
 8007666:	2b00      	cmp	r3, #0
 8007668:	6093      	str	r3, [r2, #8]
 800766a:	da07      	bge.n	800767c <__sfputc_r+0x1c>
 800766c:	6994      	ldr	r4, [r2, #24]
 800766e:	42a3      	cmp	r3, r4
 8007670:	db01      	blt.n	8007676 <__sfputc_r+0x16>
 8007672:	290a      	cmp	r1, #10
 8007674:	d102      	bne.n	800767c <__sfputc_r+0x1c>
 8007676:	bc10      	pop	{r4}
 8007678:	f000 b974 	b.w	8007964 <__swbuf_r>
 800767c:	6813      	ldr	r3, [r2, #0]
 800767e:	1c58      	adds	r0, r3, #1
 8007680:	6010      	str	r0, [r2, #0]
 8007682:	7019      	strb	r1, [r3, #0]
 8007684:	4608      	mov	r0, r1
 8007686:	bc10      	pop	{r4}
 8007688:	4770      	bx	lr

0800768a <__sfputs_r>:
 800768a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800768c:	4606      	mov	r6, r0
 800768e:	460f      	mov	r7, r1
 8007690:	4614      	mov	r4, r2
 8007692:	18d5      	adds	r5, r2, r3
 8007694:	42ac      	cmp	r4, r5
 8007696:	d101      	bne.n	800769c <__sfputs_r+0x12>
 8007698:	2000      	movs	r0, #0
 800769a:	e007      	b.n	80076ac <__sfputs_r+0x22>
 800769c:	463a      	mov	r2, r7
 800769e:	4630      	mov	r0, r6
 80076a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076a4:	f7ff ffdc 	bl	8007660 <__sfputc_r>
 80076a8:	1c43      	adds	r3, r0, #1
 80076aa:	d1f3      	bne.n	8007694 <__sfputs_r+0xa>
 80076ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080076b0 <_vfiprintf_r>:
 80076b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076b4:	460d      	mov	r5, r1
 80076b6:	4614      	mov	r4, r2
 80076b8:	4698      	mov	r8, r3
 80076ba:	4606      	mov	r6, r0
 80076bc:	b09d      	sub	sp, #116	; 0x74
 80076be:	b118      	cbz	r0, 80076c8 <_vfiprintf_r+0x18>
 80076c0:	6983      	ldr	r3, [r0, #24]
 80076c2:	b90b      	cbnz	r3, 80076c8 <_vfiprintf_r+0x18>
 80076c4:	f000 fb3a 	bl	8007d3c <__sinit>
 80076c8:	4b89      	ldr	r3, [pc, #548]	; (80078f0 <_vfiprintf_r+0x240>)
 80076ca:	429d      	cmp	r5, r3
 80076cc:	d11b      	bne.n	8007706 <_vfiprintf_r+0x56>
 80076ce:	6875      	ldr	r5, [r6, #4]
 80076d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80076d2:	07d9      	lsls	r1, r3, #31
 80076d4:	d405      	bmi.n	80076e2 <_vfiprintf_r+0x32>
 80076d6:	89ab      	ldrh	r3, [r5, #12]
 80076d8:	059a      	lsls	r2, r3, #22
 80076da:	d402      	bmi.n	80076e2 <_vfiprintf_r+0x32>
 80076dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80076de:	f000 fbcb 	bl	8007e78 <__retarget_lock_acquire_recursive>
 80076e2:	89ab      	ldrh	r3, [r5, #12]
 80076e4:	071b      	lsls	r3, r3, #28
 80076e6:	d501      	bpl.n	80076ec <_vfiprintf_r+0x3c>
 80076e8:	692b      	ldr	r3, [r5, #16]
 80076ea:	b9eb      	cbnz	r3, 8007728 <_vfiprintf_r+0x78>
 80076ec:	4629      	mov	r1, r5
 80076ee:	4630      	mov	r0, r6
 80076f0:	f000 f998 	bl	8007a24 <__swsetup_r>
 80076f4:	b1c0      	cbz	r0, 8007728 <_vfiprintf_r+0x78>
 80076f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80076f8:	07dc      	lsls	r4, r3, #31
 80076fa:	d50e      	bpl.n	800771a <_vfiprintf_r+0x6a>
 80076fc:	f04f 30ff 	mov.w	r0, #4294967295
 8007700:	b01d      	add	sp, #116	; 0x74
 8007702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007706:	4b7b      	ldr	r3, [pc, #492]	; (80078f4 <_vfiprintf_r+0x244>)
 8007708:	429d      	cmp	r5, r3
 800770a:	d101      	bne.n	8007710 <_vfiprintf_r+0x60>
 800770c:	68b5      	ldr	r5, [r6, #8]
 800770e:	e7df      	b.n	80076d0 <_vfiprintf_r+0x20>
 8007710:	4b79      	ldr	r3, [pc, #484]	; (80078f8 <_vfiprintf_r+0x248>)
 8007712:	429d      	cmp	r5, r3
 8007714:	bf08      	it	eq
 8007716:	68f5      	ldreq	r5, [r6, #12]
 8007718:	e7da      	b.n	80076d0 <_vfiprintf_r+0x20>
 800771a:	89ab      	ldrh	r3, [r5, #12]
 800771c:	0598      	lsls	r0, r3, #22
 800771e:	d4ed      	bmi.n	80076fc <_vfiprintf_r+0x4c>
 8007720:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007722:	f000 fbaa 	bl	8007e7a <__retarget_lock_release_recursive>
 8007726:	e7e9      	b.n	80076fc <_vfiprintf_r+0x4c>
 8007728:	2300      	movs	r3, #0
 800772a:	9309      	str	r3, [sp, #36]	; 0x24
 800772c:	2320      	movs	r3, #32
 800772e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007732:	2330      	movs	r3, #48	; 0x30
 8007734:	f04f 0901 	mov.w	r9, #1
 8007738:	f8cd 800c 	str.w	r8, [sp, #12]
 800773c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80078fc <_vfiprintf_r+0x24c>
 8007740:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007744:	4623      	mov	r3, r4
 8007746:	469a      	mov	sl, r3
 8007748:	f813 2b01 	ldrb.w	r2, [r3], #1
 800774c:	b10a      	cbz	r2, 8007752 <_vfiprintf_r+0xa2>
 800774e:	2a25      	cmp	r2, #37	; 0x25
 8007750:	d1f9      	bne.n	8007746 <_vfiprintf_r+0x96>
 8007752:	ebba 0b04 	subs.w	fp, sl, r4
 8007756:	d00b      	beq.n	8007770 <_vfiprintf_r+0xc0>
 8007758:	465b      	mov	r3, fp
 800775a:	4622      	mov	r2, r4
 800775c:	4629      	mov	r1, r5
 800775e:	4630      	mov	r0, r6
 8007760:	f7ff ff93 	bl	800768a <__sfputs_r>
 8007764:	3001      	adds	r0, #1
 8007766:	f000 80aa 	beq.w	80078be <_vfiprintf_r+0x20e>
 800776a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800776c:	445a      	add	r2, fp
 800776e:	9209      	str	r2, [sp, #36]	; 0x24
 8007770:	f89a 3000 	ldrb.w	r3, [sl]
 8007774:	2b00      	cmp	r3, #0
 8007776:	f000 80a2 	beq.w	80078be <_vfiprintf_r+0x20e>
 800777a:	2300      	movs	r3, #0
 800777c:	f04f 32ff 	mov.w	r2, #4294967295
 8007780:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007784:	f10a 0a01 	add.w	sl, sl, #1
 8007788:	9304      	str	r3, [sp, #16]
 800778a:	9307      	str	r3, [sp, #28]
 800778c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007790:	931a      	str	r3, [sp, #104]	; 0x68
 8007792:	4654      	mov	r4, sl
 8007794:	2205      	movs	r2, #5
 8007796:	f814 1b01 	ldrb.w	r1, [r4], #1
 800779a:	4858      	ldr	r0, [pc, #352]	; (80078fc <_vfiprintf_r+0x24c>)
 800779c:	f7ff f840 	bl	8006820 <memchr>
 80077a0:	9a04      	ldr	r2, [sp, #16]
 80077a2:	b9d8      	cbnz	r0, 80077dc <_vfiprintf_r+0x12c>
 80077a4:	06d1      	lsls	r1, r2, #27
 80077a6:	bf44      	itt	mi
 80077a8:	2320      	movmi	r3, #32
 80077aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80077ae:	0713      	lsls	r3, r2, #28
 80077b0:	bf44      	itt	mi
 80077b2:	232b      	movmi	r3, #43	; 0x2b
 80077b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80077b8:	f89a 3000 	ldrb.w	r3, [sl]
 80077bc:	2b2a      	cmp	r3, #42	; 0x2a
 80077be:	d015      	beq.n	80077ec <_vfiprintf_r+0x13c>
 80077c0:	4654      	mov	r4, sl
 80077c2:	2000      	movs	r0, #0
 80077c4:	f04f 0c0a 	mov.w	ip, #10
 80077c8:	9a07      	ldr	r2, [sp, #28]
 80077ca:	4621      	mov	r1, r4
 80077cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80077d0:	3b30      	subs	r3, #48	; 0x30
 80077d2:	2b09      	cmp	r3, #9
 80077d4:	d94e      	bls.n	8007874 <_vfiprintf_r+0x1c4>
 80077d6:	b1b0      	cbz	r0, 8007806 <_vfiprintf_r+0x156>
 80077d8:	9207      	str	r2, [sp, #28]
 80077da:	e014      	b.n	8007806 <_vfiprintf_r+0x156>
 80077dc:	eba0 0308 	sub.w	r3, r0, r8
 80077e0:	fa09 f303 	lsl.w	r3, r9, r3
 80077e4:	4313      	orrs	r3, r2
 80077e6:	46a2      	mov	sl, r4
 80077e8:	9304      	str	r3, [sp, #16]
 80077ea:	e7d2      	b.n	8007792 <_vfiprintf_r+0xe2>
 80077ec:	9b03      	ldr	r3, [sp, #12]
 80077ee:	1d19      	adds	r1, r3, #4
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	9103      	str	r1, [sp, #12]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	bfbb      	ittet	lt
 80077f8:	425b      	neglt	r3, r3
 80077fa:	f042 0202 	orrlt.w	r2, r2, #2
 80077fe:	9307      	strge	r3, [sp, #28]
 8007800:	9307      	strlt	r3, [sp, #28]
 8007802:	bfb8      	it	lt
 8007804:	9204      	strlt	r2, [sp, #16]
 8007806:	7823      	ldrb	r3, [r4, #0]
 8007808:	2b2e      	cmp	r3, #46	; 0x2e
 800780a:	d10c      	bne.n	8007826 <_vfiprintf_r+0x176>
 800780c:	7863      	ldrb	r3, [r4, #1]
 800780e:	2b2a      	cmp	r3, #42	; 0x2a
 8007810:	d135      	bne.n	800787e <_vfiprintf_r+0x1ce>
 8007812:	9b03      	ldr	r3, [sp, #12]
 8007814:	3402      	adds	r4, #2
 8007816:	1d1a      	adds	r2, r3, #4
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	9203      	str	r2, [sp, #12]
 800781c:	2b00      	cmp	r3, #0
 800781e:	bfb8      	it	lt
 8007820:	f04f 33ff 	movlt.w	r3, #4294967295
 8007824:	9305      	str	r3, [sp, #20]
 8007826:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8007900 <_vfiprintf_r+0x250>
 800782a:	2203      	movs	r2, #3
 800782c:	4650      	mov	r0, sl
 800782e:	7821      	ldrb	r1, [r4, #0]
 8007830:	f7fe fff6 	bl	8006820 <memchr>
 8007834:	b140      	cbz	r0, 8007848 <_vfiprintf_r+0x198>
 8007836:	2340      	movs	r3, #64	; 0x40
 8007838:	eba0 000a 	sub.w	r0, r0, sl
 800783c:	fa03 f000 	lsl.w	r0, r3, r0
 8007840:	9b04      	ldr	r3, [sp, #16]
 8007842:	3401      	adds	r4, #1
 8007844:	4303      	orrs	r3, r0
 8007846:	9304      	str	r3, [sp, #16]
 8007848:	f814 1b01 	ldrb.w	r1, [r4], #1
 800784c:	2206      	movs	r2, #6
 800784e:	482d      	ldr	r0, [pc, #180]	; (8007904 <_vfiprintf_r+0x254>)
 8007850:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007854:	f7fe ffe4 	bl	8006820 <memchr>
 8007858:	2800      	cmp	r0, #0
 800785a:	d03f      	beq.n	80078dc <_vfiprintf_r+0x22c>
 800785c:	4b2a      	ldr	r3, [pc, #168]	; (8007908 <_vfiprintf_r+0x258>)
 800785e:	bb1b      	cbnz	r3, 80078a8 <_vfiprintf_r+0x1f8>
 8007860:	9b03      	ldr	r3, [sp, #12]
 8007862:	3307      	adds	r3, #7
 8007864:	f023 0307 	bic.w	r3, r3, #7
 8007868:	3308      	adds	r3, #8
 800786a:	9303      	str	r3, [sp, #12]
 800786c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800786e:	443b      	add	r3, r7
 8007870:	9309      	str	r3, [sp, #36]	; 0x24
 8007872:	e767      	b.n	8007744 <_vfiprintf_r+0x94>
 8007874:	460c      	mov	r4, r1
 8007876:	2001      	movs	r0, #1
 8007878:	fb0c 3202 	mla	r2, ip, r2, r3
 800787c:	e7a5      	b.n	80077ca <_vfiprintf_r+0x11a>
 800787e:	2300      	movs	r3, #0
 8007880:	f04f 0c0a 	mov.w	ip, #10
 8007884:	4619      	mov	r1, r3
 8007886:	3401      	adds	r4, #1
 8007888:	9305      	str	r3, [sp, #20]
 800788a:	4620      	mov	r0, r4
 800788c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007890:	3a30      	subs	r2, #48	; 0x30
 8007892:	2a09      	cmp	r2, #9
 8007894:	d903      	bls.n	800789e <_vfiprintf_r+0x1ee>
 8007896:	2b00      	cmp	r3, #0
 8007898:	d0c5      	beq.n	8007826 <_vfiprintf_r+0x176>
 800789a:	9105      	str	r1, [sp, #20]
 800789c:	e7c3      	b.n	8007826 <_vfiprintf_r+0x176>
 800789e:	4604      	mov	r4, r0
 80078a0:	2301      	movs	r3, #1
 80078a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80078a6:	e7f0      	b.n	800788a <_vfiprintf_r+0x1da>
 80078a8:	ab03      	add	r3, sp, #12
 80078aa:	9300      	str	r3, [sp, #0]
 80078ac:	462a      	mov	r2, r5
 80078ae:	4630      	mov	r0, r6
 80078b0:	4b16      	ldr	r3, [pc, #88]	; (800790c <_vfiprintf_r+0x25c>)
 80078b2:	a904      	add	r1, sp, #16
 80078b4:	f7fc fa9c 	bl	8003df0 <_printf_float>
 80078b8:	4607      	mov	r7, r0
 80078ba:	1c78      	adds	r0, r7, #1
 80078bc:	d1d6      	bne.n	800786c <_vfiprintf_r+0x1bc>
 80078be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80078c0:	07d9      	lsls	r1, r3, #31
 80078c2:	d405      	bmi.n	80078d0 <_vfiprintf_r+0x220>
 80078c4:	89ab      	ldrh	r3, [r5, #12]
 80078c6:	059a      	lsls	r2, r3, #22
 80078c8:	d402      	bmi.n	80078d0 <_vfiprintf_r+0x220>
 80078ca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80078cc:	f000 fad5 	bl	8007e7a <__retarget_lock_release_recursive>
 80078d0:	89ab      	ldrh	r3, [r5, #12]
 80078d2:	065b      	lsls	r3, r3, #25
 80078d4:	f53f af12 	bmi.w	80076fc <_vfiprintf_r+0x4c>
 80078d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80078da:	e711      	b.n	8007700 <_vfiprintf_r+0x50>
 80078dc:	ab03      	add	r3, sp, #12
 80078de:	9300      	str	r3, [sp, #0]
 80078e0:	462a      	mov	r2, r5
 80078e2:	4630      	mov	r0, r6
 80078e4:	4b09      	ldr	r3, [pc, #36]	; (800790c <_vfiprintf_r+0x25c>)
 80078e6:	a904      	add	r1, sp, #16
 80078e8:	f7fc fd1e 	bl	8004328 <_printf_i>
 80078ec:	e7e4      	b.n	80078b8 <_vfiprintf_r+0x208>
 80078ee:	bf00      	nop
 80078f0:	08008920 	.word	0x08008920
 80078f4:	08008940 	.word	0x08008940
 80078f8:	08008900 	.word	0x08008900
 80078fc:	080088ec 	.word	0x080088ec
 8007900:	080088f2 	.word	0x080088f2
 8007904:	080088f6 	.word	0x080088f6
 8007908:	08003df1 	.word	0x08003df1
 800790c:	0800768b 	.word	0x0800768b

08007910 <nan>:
 8007910:	2000      	movs	r0, #0
 8007912:	4901      	ldr	r1, [pc, #4]	; (8007918 <nan+0x8>)
 8007914:	4770      	bx	lr
 8007916:	bf00      	nop
 8007918:	7ff80000 	.word	0x7ff80000

0800791c <_sbrk_r>:
 800791c:	b538      	push	{r3, r4, r5, lr}
 800791e:	2300      	movs	r3, #0
 8007920:	4d05      	ldr	r5, [pc, #20]	; (8007938 <_sbrk_r+0x1c>)
 8007922:	4604      	mov	r4, r0
 8007924:	4608      	mov	r0, r1
 8007926:	602b      	str	r3, [r5, #0]
 8007928:	f7f9 ff94 	bl	8001854 <_sbrk>
 800792c:	1c43      	adds	r3, r0, #1
 800792e:	d102      	bne.n	8007936 <_sbrk_r+0x1a>
 8007930:	682b      	ldr	r3, [r5, #0]
 8007932:	b103      	cbz	r3, 8007936 <_sbrk_r+0x1a>
 8007934:	6023      	str	r3, [r4, #0]
 8007936:	bd38      	pop	{r3, r4, r5, pc}
 8007938:	20001044 	.word	0x20001044

0800793c <strncmp>:
 800793c:	4603      	mov	r3, r0
 800793e:	b510      	push	{r4, lr}
 8007940:	b172      	cbz	r2, 8007960 <strncmp+0x24>
 8007942:	3901      	subs	r1, #1
 8007944:	1884      	adds	r4, r0, r2
 8007946:	f813 0b01 	ldrb.w	r0, [r3], #1
 800794a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800794e:	4290      	cmp	r0, r2
 8007950:	d101      	bne.n	8007956 <strncmp+0x1a>
 8007952:	42a3      	cmp	r3, r4
 8007954:	d101      	bne.n	800795a <strncmp+0x1e>
 8007956:	1a80      	subs	r0, r0, r2
 8007958:	bd10      	pop	{r4, pc}
 800795a:	2800      	cmp	r0, #0
 800795c:	d1f3      	bne.n	8007946 <strncmp+0xa>
 800795e:	e7fa      	b.n	8007956 <strncmp+0x1a>
 8007960:	4610      	mov	r0, r2
 8007962:	e7f9      	b.n	8007958 <strncmp+0x1c>

08007964 <__swbuf_r>:
 8007964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007966:	460e      	mov	r6, r1
 8007968:	4614      	mov	r4, r2
 800796a:	4605      	mov	r5, r0
 800796c:	b118      	cbz	r0, 8007976 <__swbuf_r+0x12>
 800796e:	6983      	ldr	r3, [r0, #24]
 8007970:	b90b      	cbnz	r3, 8007976 <__swbuf_r+0x12>
 8007972:	f000 f9e3 	bl	8007d3c <__sinit>
 8007976:	4b21      	ldr	r3, [pc, #132]	; (80079fc <__swbuf_r+0x98>)
 8007978:	429c      	cmp	r4, r3
 800797a:	d12b      	bne.n	80079d4 <__swbuf_r+0x70>
 800797c:	686c      	ldr	r4, [r5, #4]
 800797e:	69a3      	ldr	r3, [r4, #24]
 8007980:	60a3      	str	r3, [r4, #8]
 8007982:	89a3      	ldrh	r3, [r4, #12]
 8007984:	071a      	lsls	r2, r3, #28
 8007986:	d52f      	bpl.n	80079e8 <__swbuf_r+0x84>
 8007988:	6923      	ldr	r3, [r4, #16]
 800798a:	b36b      	cbz	r3, 80079e8 <__swbuf_r+0x84>
 800798c:	6923      	ldr	r3, [r4, #16]
 800798e:	6820      	ldr	r0, [r4, #0]
 8007990:	b2f6      	uxtb	r6, r6
 8007992:	1ac0      	subs	r0, r0, r3
 8007994:	6963      	ldr	r3, [r4, #20]
 8007996:	4637      	mov	r7, r6
 8007998:	4283      	cmp	r3, r0
 800799a:	dc04      	bgt.n	80079a6 <__swbuf_r+0x42>
 800799c:	4621      	mov	r1, r4
 800799e:	4628      	mov	r0, r5
 80079a0:	f000 f938 	bl	8007c14 <_fflush_r>
 80079a4:	bb30      	cbnz	r0, 80079f4 <__swbuf_r+0x90>
 80079a6:	68a3      	ldr	r3, [r4, #8]
 80079a8:	3001      	adds	r0, #1
 80079aa:	3b01      	subs	r3, #1
 80079ac:	60a3      	str	r3, [r4, #8]
 80079ae:	6823      	ldr	r3, [r4, #0]
 80079b0:	1c5a      	adds	r2, r3, #1
 80079b2:	6022      	str	r2, [r4, #0]
 80079b4:	701e      	strb	r6, [r3, #0]
 80079b6:	6963      	ldr	r3, [r4, #20]
 80079b8:	4283      	cmp	r3, r0
 80079ba:	d004      	beq.n	80079c6 <__swbuf_r+0x62>
 80079bc:	89a3      	ldrh	r3, [r4, #12]
 80079be:	07db      	lsls	r3, r3, #31
 80079c0:	d506      	bpl.n	80079d0 <__swbuf_r+0x6c>
 80079c2:	2e0a      	cmp	r6, #10
 80079c4:	d104      	bne.n	80079d0 <__swbuf_r+0x6c>
 80079c6:	4621      	mov	r1, r4
 80079c8:	4628      	mov	r0, r5
 80079ca:	f000 f923 	bl	8007c14 <_fflush_r>
 80079ce:	b988      	cbnz	r0, 80079f4 <__swbuf_r+0x90>
 80079d0:	4638      	mov	r0, r7
 80079d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079d4:	4b0a      	ldr	r3, [pc, #40]	; (8007a00 <__swbuf_r+0x9c>)
 80079d6:	429c      	cmp	r4, r3
 80079d8:	d101      	bne.n	80079de <__swbuf_r+0x7a>
 80079da:	68ac      	ldr	r4, [r5, #8]
 80079dc:	e7cf      	b.n	800797e <__swbuf_r+0x1a>
 80079de:	4b09      	ldr	r3, [pc, #36]	; (8007a04 <__swbuf_r+0xa0>)
 80079e0:	429c      	cmp	r4, r3
 80079e2:	bf08      	it	eq
 80079e4:	68ec      	ldreq	r4, [r5, #12]
 80079e6:	e7ca      	b.n	800797e <__swbuf_r+0x1a>
 80079e8:	4621      	mov	r1, r4
 80079ea:	4628      	mov	r0, r5
 80079ec:	f000 f81a 	bl	8007a24 <__swsetup_r>
 80079f0:	2800      	cmp	r0, #0
 80079f2:	d0cb      	beq.n	800798c <__swbuf_r+0x28>
 80079f4:	f04f 37ff 	mov.w	r7, #4294967295
 80079f8:	e7ea      	b.n	80079d0 <__swbuf_r+0x6c>
 80079fa:	bf00      	nop
 80079fc:	08008920 	.word	0x08008920
 8007a00:	08008940 	.word	0x08008940
 8007a04:	08008900 	.word	0x08008900

08007a08 <__ascii_wctomb>:
 8007a08:	4603      	mov	r3, r0
 8007a0a:	4608      	mov	r0, r1
 8007a0c:	b141      	cbz	r1, 8007a20 <__ascii_wctomb+0x18>
 8007a0e:	2aff      	cmp	r2, #255	; 0xff
 8007a10:	d904      	bls.n	8007a1c <__ascii_wctomb+0x14>
 8007a12:	228a      	movs	r2, #138	; 0x8a
 8007a14:	f04f 30ff 	mov.w	r0, #4294967295
 8007a18:	601a      	str	r2, [r3, #0]
 8007a1a:	4770      	bx	lr
 8007a1c:	2001      	movs	r0, #1
 8007a1e:	700a      	strb	r2, [r1, #0]
 8007a20:	4770      	bx	lr
	...

08007a24 <__swsetup_r>:
 8007a24:	4b32      	ldr	r3, [pc, #200]	; (8007af0 <__swsetup_r+0xcc>)
 8007a26:	b570      	push	{r4, r5, r6, lr}
 8007a28:	681d      	ldr	r5, [r3, #0]
 8007a2a:	4606      	mov	r6, r0
 8007a2c:	460c      	mov	r4, r1
 8007a2e:	b125      	cbz	r5, 8007a3a <__swsetup_r+0x16>
 8007a30:	69ab      	ldr	r3, [r5, #24]
 8007a32:	b913      	cbnz	r3, 8007a3a <__swsetup_r+0x16>
 8007a34:	4628      	mov	r0, r5
 8007a36:	f000 f981 	bl	8007d3c <__sinit>
 8007a3a:	4b2e      	ldr	r3, [pc, #184]	; (8007af4 <__swsetup_r+0xd0>)
 8007a3c:	429c      	cmp	r4, r3
 8007a3e:	d10f      	bne.n	8007a60 <__swsetup_r+0x3c>
 8007a40:	686c      	ldr	r4, [r5, #4]
 8007a42:	89a3      	ldrh	r3, [r4, #12]
 8007a44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007a48:	0719      	lsls	r1, r3, #28
 8007a4a:	d42c      	bmi.n	8007aa6 <__swsetup_r+0x82>
 8007a4c:	06dd      	lsls	r5, r3, #27
 8007a4e:	d411      	bmi.n	8007a74 <__swsetup_r+0x50>
 8007a50:	2309      	movs	r3, #9
 8007a52:	6033      	str	r3, [r6, #0]
 8007a54:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007a58:	f04f 30ff 	mov.w	r0, #4294967295
 8007a5c:	81a3      	strh	r3, [r4, #12]
 8007a5e:	e03e      	b.n	8007ade <__swsetup_r+0xba>
 8007a60:	4b25      	ldr	r3, [pc, #148]	; (8007af8 <__swsetup_r+0xd4>)
 8007a62:	429c      	cmp	r4, r3
 8007a64:	d101      	bne.n	8007a6a <__swsetup_r+0x46>
 8007a66:	68ac      	ldr	r4, [r5, #8]
 8007a68:	e7eb      	b.n	8007a42 <__swsetup_r+0x1e>
 8007a6a:	4b24      	ldr	r3, [pc, #144]	; (8007afc <__swsetup_r+0xd8>)
 8007a6c:	429c      	cmp	r4, r3
 8007a6e:	bf08      	it	eq
 8007a70:	68ec      	ldreq	r4, [r5, #12]
 8007a72:	e7e6      	b.n	8007a42 <__swsetup_r+0x1e>
 8007a74:	0758      	lsls	r0, r3, #29
 8007a76:	d512      	bpl.n	8007a9e <__swsetup_r+0x7a>
 8007a78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007a7a:	b141      	cbz	r1, 8007a8e <__swsetup_r+0x6a>
 8007a7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007a80:	4299      	cmp	r1, r3
 8007a82:	d002      	beq.n	8007a8a <__swsetup_r+0x66>
 8007a84:	4630      	mov	r0, r6
 8007a86:	f7ff fbb3 	bl	80071f0 <_free_r>
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	6363      	str	r3, [r4, #52]	; 0x34
 8007a8e:	89a3      	ldrh	r3, [r4, #12]
 8007a90:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007a94:	81a3      	strh	r3, [r4, #12]
 8007a96:	2300      	movs	r3, #0
 8007a98:	6063      	str	r3, [r4, #4]
 8007a9a:	6923      	ldr	r3, [r4, #16]
 8007a9c:	6023      	str	r3, [r4, #0]
 8007a9e:	89a3      	ldrh	r3, [r4, #12]
 8007aa0:	f043 0308 	orr.w	r3, r3, #8
 8007aa4:	81a3      	strh	r3, [r4, #12]
 8007aa6:	6923      	ldr	r3, [r4, #16]
 8007aa8:	b94b      	cbnz	r3, 8007abe <__swsetup_r+0x9a>
 8007aaa:	89a3      	ldrh	r3, [r4, #12]
 8007aac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007ab0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ab4:	d003      	beq.n	8007abe <__swsetup_r+0x9a>
 8007ab6:	4621      	mov	r1, r4
 8007ab8:	4630      	mov	r0, r6
 8007aba:	f000 fa05 	bl	8007ec8 <__smakebuf_r>
 8007abe:	89a0      	ldrh	r0, [r4, #12]
 8007ac0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007ac4:	f010 0301 	ands.w	r3, r0, #1
 8007ac8:	d00a      	beq.n	8007ae0 <__swsetup_r+0xbc>
 8007aca:	2300      	movs	r3, #0
 8007acc:	60a3      	str	r3, [r4, #8]
 8007ace:	6963      	ldr	r3, [r4, #20]
 8007ad0:	425b      	negs	r3, r3
 8007ad2:	61a3      	str	r3, [r4, #24]
 8007ad4:	6923      	ldr	r3, [r4, #16]
 8007ad6:	b943      	cbnz	r3, 8007aea <__swsetup_r+0xc6>
 8007ad8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007adc:	d1ba      	bne.n	8007a54 <__swsetup_r+0x30>
 8007ade:	bd70      	pop	{r4, r5, r6, pc}
 8007ae0:	0781      	lsls	r1, r0, #30
 8007ae2:	bf58      	it	pl
 8007ae4:	6963      	ldrpl	r3, [r4, #20]
 8007ae6:	60a3      	str	r3, [r4, #8]
 8007ae8:	e7f4      	b.n	8007ad4 <__swsetup_r+0xb0>
 8007aea:	2000      	movs	r0, #0
 8007aec:	e7f7      	b.n	8007ade <__swsetup_r+0xba>
 8007aee:	bf00      	nop
 8007af0:	200000a4 	.word	0x200000a4
 8007af4:	08008920 	.word	0x08008920
 8007af8:	08008940 	.word	0x08008940
 8007afc:	08008900 	.word	0x08008900

08007b00 <abort>:
 8007b00:	2006      	movs	r0, #6
 8007b02:	b508      	push	{r3, lr}
 8007b04:	f000 fa9e 	bl	8008044 <raise>
 8007b08:	2001      	movs	r0, #1
 8007b0a:	f7f9 fe30 	bl	800176e <_exit>
	...

08007b10 <__sflush_r>:
 8007b10:	898a      	ldrh	r2, [r1, #12]
 8007b12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b14:	4605      	mov	r5, r0
 8007b16:	0710      	lsls	r0, r2, #28
 8007b18:	460c      	mov	r4, r1
 8007b1a:	d457      	bmi.n	8007bcc <__sflush_r+0xbc>
 8007b1c:	684b      	ldr	r3, [r1, #4]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	dc04      	bgt.n	8007b2c <__sflush_r+0x1c>
 8007b22:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	dc01      	bgt.n	8007b2c <__sflush_r+0x1c>
 8007b28:	2000      	movs	r0, #0
 8007b2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007b2e:	2e00      	cmp	r6, #0
 8007b30:	d0fa      	beq.n	8007b28 <__sflush_r+0x18>
 8007b32:	2300      	movs	r3, #0
 8007b34:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007b38:	682f      	ldr	r7, [r5, #0]
 8007b3a:	602b      	str	r3, [r5, #0]
 8007b3c:	d032      	beq.n	8007ba4 <__sflush_r+0x94>
 8007b3e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007b40:	89a3      	ldrh	r3, [r4, #12]
 8007b42:	075a      	lsls	r2, r3, #29
 8007b44:	d505      	bpl.n	8007b52 <__sflush_r+0x42>
 8007b46:	6863      	ldr	r3, [r4, #4]
 8007b48:	1ac0      	subs	r0, r0, r3
 8007b4a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007b4c:	b10b      	cbz	r3, 8007b52 <__sflush_r+0x42>
 8007b4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007b50:	1ac0      	subs	r0, r0, r3
 8007b52:	2300      	movs	r3, #0
 8007b54:	4602      	mov	r2, r0
 8007b56:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007b58:	4628      	mov	r0, r5
 8007b5a:	6a21      	ldr	r1, [r4, #32]
 8007b5c:	47b0      	blx	r6
 8007b5e:	1c43      	adds	r3, r0, #1
 8007b60:	89a3      	ldrh	r3, [r4, #12]
 8007b62:	d106      	bne.n	8007b72 <__sflush_r+0x62>
 8007b64:	6829      	ldr	r1, [r5, #0]
 8007b66:	291d      	cmp	r1, #29
 8007b68:	d82c      	bhi.n	8007bc4 <__sflush_r+0xb4>
 8007b6a:	4a29      	ldr	r2, [pc, #164]	; (8007c10 <__sflush_r+0x100>)
 8007b6c:	40ca      	lsrs	r2, r1
 8007b6e:	07d6      	lsls	r6, r2, #31
 8007b70:	d528      	bpl.n	8007bc4 <__sflush_r+0xb4>
 8007b72:	2200      	movs	r2, #0
 8007b74:	6062      	str	r2, [r4, #4]
 8007b76:	6922      	ldr	r2, [r4, #16]
 8007b78:	04d9      	lsls	r1, r3, #19
 8007b7a:	6022      	str	r2, [r4, #0]
 8007b7c:	d504      	bpl.n	8007b88 <__sflush_r+0x78>
 8007b7e:	1c42      	adds	r2, r0, #1
 8007b80:	d101      	bne.n	8007b86 <__sflush_r+0x76>
 8007b82:	682b      	ldr	r3, [r5, #0]
 8007b84:	b903      	cbnz	r3, 8007b88 <__sflush_r+0x78>
 8007b86:	6560      	str	r0, [r4, #84]	; 0x54
 8007b88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007b8a:	602f      	str	r7, [r5, #0]
 8007b8c:	2900      	cmp	r1, #0
 8007b8e:	d0cb      	beq.n	8007b28 <__sflush_r+0x18>
 8007b90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007b94:	4299      	cmp	r1, r3
 8007b96:	d002      	beq.n	8007b9e <__sflush_r+0x8e>
 8007b98:	4628      	mov	r0, r5
 8007b9a:	f7ff fb29 	bl	80071f0 <_free_r>
 8007b9e:	2000      	movs	r0, #0
 8007ba0:	6360      	str	r0, [r4, #52]	; 0x34
 8007ba2:	e7c2      	b.n	8007b2a <__sflush_r+0x1a>
 8007ba4:	6a21      	ldr	r1, [r4, #32]
 8007ba6:	2301      	movs	r3, #1
 8007ba8:	4628      	mov	r0, r5
 8007baa:	47b0      	blx	r6
 8007bac:	1c41      	adds	r1, r0, #1
 8007bae:	d1c7      	bne.n	8007b40 <__sflush_r+0x30>
 8007bb0:	682b      	ldr	r3, [r5, #0]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d0c4      	beq.n	8007b40 <__sflush_r+0x30>
 8007bb6:	2b1d      	cmp	r3, #29
 8007bb8:	d001      	beq.n	8007bbe <__sflush_r+0xae>
 8007bba:	2b16      	cmp	r3, #22
 8007bbc:	d101      	bne.n	8007bc2 <__sflush_r+0xb2>
 8007bbe:	602f      	str	r7, [r5, #0]
 8007bc0:	e7b2      	b.n	8007b28 <__sflush_r+0x18>
 8007bc2:	89a3      	ldrh	r3, [r4, #12]
 8007bc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007bc8:	81a3      	strh	r3, [r4, #12]
 8007bca:	e7ae      	b.n	8007b2a <__sflush_r+0x1a>
 8007bcc:	690f      	ldr	r7, [r1, #16]
 8007bce:	2f00      	cmp	r7, #0
 8007bd0:	d0aa      	beq.n	8007b28 <__sflush_r+0x18>
 8007bd2:	0793      	lsls	r3, r2, #30
 8007bd4:	bf18      	it	ne
 8007bd6:	2300      	movne	r3, #0
 8007bd8:	680e      	ldr	r6, [r1, #0]
 8007bda:	bf08      	it	eq
 8007bdc:	694b      	ldreq	r3, [r1, #20]
 8007bde:	1bf6      	subs	r6, r6, r7
 8007be0:	600f      	str	r7, [r1, #0]
 8007be2:	608b      	str	r3, [r1, #8]
 8007be4:	2e00      	cmp	r6, #0
 8007be6:	dd9f      	ble.n	8007b28 <__sflush_r+0x18>
 8007be8:	4633      	mov	r3, r6
 8007bea:	463a      	mov	r2, r7
 8007bec:	4628      	mov	r0, r5
 8007bee:	6a21      	ldr	r1, [r4, #32]
 8007bf0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007bf4:	47e0      	blx	ip
 8007bf6:	2800      	cmp	r0, #0
 8007bf8:	dc06      	bgt.n	8007c08 <__sflush_r+0xf8>
 8007bfa:	89a3      	ldrh	r3, [r4, #12]
 8007bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8007c00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c04:	81a3      	strh	r3, [r4, #12]
 8007c06:	e790      	b.n	8007b2a <__sflush_r+0x1a>
 8007c08:	4407      	add	r7, r0
 8007c0a:	1a36      	subs	r6, r6, r0
 8007c0c:	e7ea      	b.n	8007be4 <__sflush_r+0xd4>
 8007c0e:	bf00      	nop
 8007c10:	20400001 	.word	0x20400001

08007c14 <_fflush_r>:
 8007c14:	b538      	push	{r3, r4, r5, lr}
 8007c16:	690b      	ldr	r3, [r1, #16]
 8007c18:	4605      	mov	r5, r0
 8007c1a:	460c      	mov	r4, r1
 8007c1c:	b913      	cbnz	r3, 8007c24 <_fflush_r+0x10>
 8007c1e:	2500      	movs	r5, #0
 8007c20:	4628      	mov	r0, r5
 8007c22:	bd38      	pop	{r3, r4, r5, pc}
 8007c24:	b118      	cbz	r0, 8007c2e <_fflush_r+0x1a>
 8007c26:	6983      	ldr	r3, [r0, #24]
 8007c28:	b90b      	cbnz	r3, 8007c2e <_fflush_r+0x1a>
 8007c2a:	f000 f887 	bl	8007d3c <__sinit>
 8007c2e:	4b14      	ldr	r3, [pc, #80]	; (8007c80 <_fflush_r+0x6c>)
 8007c30:	429c      	cmp	r4, r3
 8007c32:	d11b      	bne.n	8007c6c <_fflush_r+0x58>
 8007c34:	686c      	ldr	r4, [r5, #4]
 8007c36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d0ef      	beq.n	8007c1e <_fflush_r+0xa>
 8007c3e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007c40:	07d0      	lsls	r0, r2, #31
 8007c42:	d404      	bmi.n	8007c4e <_fflush_r+0x3a>
 8007c44:	0599      	lsls	r1, r3, #22
 8007c46:	d402      	bmi.n	8007c4e <_fflush_r+0x3a>
 8007c48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c4a:	f000 f915 	bl	8007e78 <__retarget_lock_acquire_recursive>
 8007c4e:	4628      	mov	r0, r5
 8007c50:	4621      	mov	r1, r4
 8007c52:	f7ff ff5d 	bl	8007b10 <__sflush_r>
 8007c56:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007c58:	4605      	mov	r5, r0
 8007c5a:	07da      	lsls	r2, r3, #31
 8007c5c:	d4e0      	bmi.n	8007c20 <_fflush_r+0xc>
 8007c5e:	89a3      	ldrh	r3, [r4, #12]
 8007c60:	059b      	lsls	r3, r3, #22
 8007c62:	d4dd      	bmi.n	8007c20 <_fflush_r+0xc>
 8007c64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c66:	f000 f908 	bl	8007e7a <__retarget_lock_release_recursive>
 8007c6a:	e7d9      	b.n	8007c20 <_fflush_r+0xc>
 8007c6c:	4b05      	ldr	r3, [pc, #20]	; (8007c84 <_fflush_r+0x70>)
 8007c6e:	429c      	cmp	r4, r3
 8007c70:	d101      	bne.n	8007c76 <_fflush_r+0x62>
 8007c72:	68ac      	ldr	r4, [r5, #8]
 8007c74:	e7df      	b.n	8007c36 <_fflush_r+0x22>
 8007c76:	4b04      	ldr	r3, [pc, #16]	; (8007c88 <_fflush_r+0x74>)
 8007c78:	429c      	cmp	r4, r3
 8007c7a:	bf08      	it	eq
 8007c7c:	68ec      	ldreq	r4, [r5, #12]
 8007c7e:	e7da      	b.n	8007c36 <_fflush_r+0x22>
 8007c80:	08008920 	.word	0x08008920
 8007c84:	08008940 	.word	0x08008940
 8007c88:	08008900 	.word	0x08008900

08007c8c <std>:
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	b510      	push	{r4, lr}
 8007c90:	4604      	mov	r4, r0
 8007c92:	e9c0 3300 	strd	r3, r3, [r0]
 8007c96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007c9a:	6083      	str	r3, [r0, #8]
 8007c9c:	8181      	strh	r1, [r0, #12]
 8007c9e:	6643      	str	r3, [r0, #100]	; 0x64
 8007ca0:	81c2      	strh	r2, [r0, #14]
 8007ca2:	6183      	str	r3, [r0, #24]
 8007ca4:	4619      	mov	r1, r3
 8007ca6:	2208      	movs	r2, #8
 8007ca8:	305c      	adds	r0, #92	; 0x5c
 8007caa:	f7fb fffb 	bl	8003ca4 <memset>
 8007cae:	4b05      	ldr	r3, [pc, #20]	; (8007cc4 <std+0x38>)
 8007cb0:	6224      	str	r4, [r4, #32]
 8007cb2:	6263      	str	r3, [r4, #36]	; 0x24
 8007cb4:	4b04      	ldr	r3, [pc, #16]	; (8007cc8 <std+0x3c>)
 8007cb6:	62a3      	str	r3, [r4, #40]	; 0x28
 8007cb8:	4b04      	ldr	r3, [pc, #16]	; (8007ccc <std+0x40>)
 8007cba:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007cbc:	4b04      	ldr	r3, [pc, #16]	; (8007cd0 <std+0x44>)
 8007cbe:	6323      	str	r3, [r4, #48]	; 0x30
 8007cc0:	bd10      	pop	{r4, pc}
 8007cc2:	bf00      	nop
 8007cc4:	0800807d 	.word	0x0800807d
 8007cc8:	0800809f 	.word	0x0800809f
 8007ccc:	080080d7 	.word	0x080080d7
 8007cd0:	080080fb 	.word	0x080080fb

08007cd4 <_cleanup_r>:
 8007cd4:	4901      	ldr	r1, [pc, #4]	; (8007cdc <_cleanup_r+0x8>)
 8007cd6:	f000 b8af 	b.w	8007e38 <_fwalk_reent>
 8007cda:	bf00      	nop
 8007cdc:	08007c15 	.word	0x08007c15

08007ce0 <__sfmoreglue>:
 8007ce0:	2268      	movs	r2, #104	; 0x68
 8007ce2:	b570      	push	{r4, r5, r6, lr}
 8007ce4:	1e4d      	subs	r5, r1, #1
 8007ce6:	4355      	muls	r5, r2
 8007ce8:	460e      	mov	r6, r1
 8007cea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007cee:	f7ff fae7 	bl	80072c0 <_malloc_r>
 8007cf2:	4604      	mov	r4, r0
 8007cf4:	b140      	cbz	r0, 8007d08 <__sfmoreglue+0x28>
 8007cf6:	2100      	movs	r1, #0
 8007cf8:	e9c0 1600 	strd	r1, r6, [r0]
 8007cfc:	300c      	adds	r0, #12
 8007cfe:	60a0      	str	r0, [r4, #8]
 8007d00:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007d04:	f7fb ffce 	bl	8003ca4 <memset>
 8007d08:	4620      	mov	r0, r4
 8007d0a:	bd70      	pop	{r4, r5, r6, pc}

08007d0c <__sfp_lock_acquire>:
 8007d0c:	4801      	ldr	r0, [pc, #4]	; (8007d14 <__sfp_lock_acquire+0x8>)
 8007d0e:	f000 b8b3 	b.w	8007e78 <__retarget_lock_acquire_recursive>
 8007d12:	bf00      	nop
 8007d14:	20001041 	.word	0x20001041

08007d18 <__sfp_lock_release>:
 8007d18:	4801      	ldr	r0, [pc, #4]	; (8007d20 <__sfp_lock_release+0x8>)
 8007d1a:	f000 b8ae 	b.w	8007e7a <__retarget_lock_release_recursive>
 8007d1e:	bf00      	nop
 8007d20:	20001041 	.word	0x20001041

08007d24 <__sinit_lock_acquire>:
 8007d24:	4801      	ldr	r0, [pc, #4]	; (8007d2c <__sinit_lock_acquire+0x8>)
 8007d26:	f000 b8a7 	b.w	8007e78 <__retarget_lock_acquire_recursive>
 8007d2a:	bf00      	nop
 8007d2c:	20001042 	.word	0x20001042

08007d30 <__sinit_lock_release>:
 8007d30:	4801      	ldr	r0, [pc, #4]	; (8007d38 <__sinit_lock_release+0x8>)
 8007d32:	f000 b8a2 	b.w	8007e7a <__retarget_lock_release_recursive>
 8007d36:	bf00      	nop
 8007d38:	20001042 	.word	0x20001042

08007d3c <__sinit>:
 8007d3c:	b510      	push	{r4, lr}
 8007d3e:	4604      	mov	r4, r0
 8007d40:	f7ff fff0 	bl	8007d24 <__sinit_lock_acquire>
 8007d44:	69a3      	ldr	r3, [r4, #24]
 8007d46:	b11b      	cbz	r3, 8007d50 <__sinit+0x14>
 8007d48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d4c:	f7ff bff0 	b.w	8007d30 <__sinit_lock_release>
 8007d50:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007d54:	6523      	str	r3, [r4, #80]	; 0x50
 8007d56:	4b13      	ldr	r3, [pc, #76]	; (8007da4 <__sinit+0x68>)
 8007d58:	4a13      	ldr	r2, [pc, #76]	; (8007da8 <__sinit+0x6c>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	62a2      	str	r2, [r4, #40]	; 0x28
 8007d5e:	42a3      	cmp	r3, r4
 8007d60:	bf08      	it	eq
 8007d62:	2301      	moveq	r3, #1
 8007d64:	4620      	mov	r0, r4
 8007d66:	bf08      	it	eq
 8007d68:	61a3      	streq	r3, [r4, #24]
 8007d6a:	f000 f81f 	bl	8007dac <__sfp>
 8007d6e:	6060      	str	r0, [r4, #4]
 8007d70:	4620      	mov	r0, r4
 8007d72:	f000 f81b 	bl	8007dac <__sfp>
 8007d76:	60a0      	str	r0, [r4, #8]
 8007d78:	4620      	mov	r0, r4
 8007d7a:	f000 f817 	bl	8007dac <__sfp>
 8007d7e:	2200      	movs	r2, #0
 8007d80:	2104      	movs	r1, #4
 8007d82:	60e0      	str	r0, [r4, #12]
 8007d84:	6860      	ldr	r0, [r4, #4]
 8007d86:	f7ff ff81 	bl	8007c8c <std>
 8007d8a:	2201      	movs	r2, #1
 8007d8c:	2109      	movs	r1, #9
 8007d8e:	68a0      	ldr	r0, [r4, #8]
 8007d90:	f7ff ff7c 	bl	8007c8c <std>
 8007d94:	2202      	movs	r2, #2
 8007d96:	2112      	movs	r1, #18
 8007d98:	68e0      	ldr	r0, [r4, #12]
 8007d9a:	f7ff ff77 	bl	8007c8c <std>
 8007d9e:	2301      	movs	r3, #1
 8007da0:	61a3      	str	r3, [r4, #24]
 8007da2:	e7d1      	b.n	8007d48 <__sinit+0xc>
 8007da4:	08008464 	.word	0x08008464
 8007da8:	08007cd5 	.word	0x08007cd5

08007dac <__sfp>:
 8007dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dae:	4607      	mov	r7, r0
 8007db0:	f7ff ffac 	bl	8007d0c <__sfp_lock_acquire>
 8007db4:	4b1e      	ldr	r3, [pc, #120]	; (8007e30 <__sfp+0x84>)
 8007db6:	681e      	ldr	r6, [r3, #0]
 8007db8:	69b3      	ldr	r3, [r6, #24]
 8007dba:	b913      	cbnz	r3, 8007dc2 <__sfp+0x16>
 8007dbc:	4630      	mov	r0, r6
 8007dbe:	f7ff ffbd 	bl	8007d3c <__sinit>
 8007dc2:	3648      	adds	r6, #72	; 0x48
 8007dc4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007dc8:	3b01      	subs	r3, #1
 8007dca:	d503      	bpl.n	8007dd4 <__sfp+0x28>
 8007dcc:	6833      	ldr	r3, [r6, #0]
 8007dce:	b30b      	cbz	r3, 8007e14 <__sfp+0x68>
 8007dd0:	6836      	ldr	r6, [r6, #0]
 8007dd2:	e7f7      	b.n	8007dc4 <__sfp+0x18>
 8007dd4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007dd8:	b9d5      	cbnz	r5, 8007e10 <__sfp+0x64>
 8007dda:	4b16      	ldr	r3, [pc, #88]	; (8007e34 <__sfp+0x88>)
 8007ddc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007de0:	60e3      	str	r3, [r4, #12]
 8007de2:	6665      	str	r5, [r4, #100]	; 0x64
 8007de4:	f000 f847 	bl	8007e76 <__retarget_lock_init_recursive>
 8007de8:	f7ff ff96 	bl	8007d18 <__sfp_lock_release>
 8007dec:	2208      	movs	r2, #8
 8007dee:	4629      	mov	r1, r5
 8007df0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007df4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007df8:	6025      	str	r5, [r4, #0]
 8007dfa:	61a5      	str	r5, [r4, #24]
 8007dfc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007e00:	f7fb ff50 	bl	8003ca4 <memset>
 8007e04:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007e08:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007e0c:	4620      	mov	r0, r4
 8007e0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e10:	3468      	adds	r4, #104	; 0x68
 8007e12:	e7d9      	b.n	8007dc8 <__sfp+0x1c>
 8007e14:	2104      	movs	r1, #4
 8007e16:	4638      	mov	r0, r7
 8007e18:	f7ff ff62 	bl	8007ce0 <__sfmoreglue>
 8007e1c:	4604      	mov	r4, r0
 8007e1e:	6030      	str	r0, [r6, #0]
 8007e20:	2800      	cmp	r0, #0
 8007e22:	d1d5      	bne.n	8007dd0 <__sfp+0x24>
 8007e24:	f7ff ff78 	bl	8007d18 <__sfp_lock_release>
 8007e28:	230c      	movs	r3, #12
 8007e2a:	603b      	str	r3, [r7, #0]
 8007e2c:	e7ee      	b.n	8007e0c <__sfp+0x60>
 8007e2e:	bf00      	nop
 8007e30:	08008464 	.word	0x08008464
 8007e34:	ffff0001 	.word	0xffff0001

08007e38 <_fwalk_reent>:
 8007e38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e3c:	4606      	mov	r6, r0
 8007e3e:	4688      	mov	r8, r1
 8007e40:	2700      	movs	r7, #0
 8007e42:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007e46:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007e4a:	f1b9 0901 	subs.w	r9, r9, #1
 8007e4e:	d505      	bpl.n	8007e5c <_fwalk_reent+0x24>
 8007e50:	6824      	ldr	r4, [r4, #0]
 8007e52:	2c00      	cmp	r4, #0
 8007e54:	d1f7      	bne.n	8007e46 <_fwalk_reent+0xe>
 8007e56:	4638      	mov	r0, r7
 8007e58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e5c:	89ab      	ldrh	r3, [r5, #12]
 8007e5e:	2b01      	cmp	r3, #1
 8007e60:	d907      	bls.n	8007e72 <_fwalk_reent+0x3a>
 8007e62:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007e66:	3301      	adds	r3, #1
 8007e68:	d003      	beq.n	8007e72 <_fwalk_reent+0x3a>
 8007e6a:	4629      	mov	r1, r5
 8007e6c:	4630      	mov	r0, r6
 8007e6e:	47c0      	blx	r8
 8007e70:	4307      	orrs	r7, r0
 8007e72:	3568      	adds	r5, #104	; 0x68
 8007e74:	e7e9      	b.n	8007e4a <_fwalk_reent+0x12>

08007e76 <__retarget_lock_init_recursive>:
 8007e76:	4770      	bx	lr

08007e78 <__retarget_lock_acquire_recursive>:
 8007e78:	4770      	bx	lr

08007e7a <__retarget_lock_release_recursive>:
 8007e7a:	4770      	bx	lr

08007e7c <__swhatbuf_r>:
 8007e7c:	b570      	push	{r4, r5, r6, lr}
 8007e7e:	460e      	mov	r6, r1
 8007e80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e84:	4614      	mov	r4, r2
 8007e86:	2900      	cmp	r1, #0
 8007e88:	461d      	mov	r5, r3
 8007e8a:	b096      	sub	sp, #88	; 0x58
 8007e8c:	da08      	bge.n	8007ea0 <__swhatbuf_r+0x24>
 8007e8e:	2200      	movs	r2, #0
 8007e90:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007e94:	602a      	str	r2, [r5, #0]
 8007e96:	061a      	lsls	r2, r3, #24
 8007e98:	d410      	bmi.n	8007ebc <__swhatbuf_r+0x40>
 8007e9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007e9e:	e00e      	b.n	8007ebe <__swhatbuf_r+0x42>
 8007ea0:	466a      	mov	r2, sp
 8007ea2:	f000 f951 	bl	8008148 <_fstat_r>
 8007ea6:	2800      	cmp	r0, #0
 8007ea8:	dbf1      	blt.n	8007e8e <__swhatbuf_r+0x12>
 8007eaa:	9a01      	ldr	r2, [sp, #4]
 8007eac:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007eb0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007eb4:	425a      	negs	r2, r3
 8007eb6:	415a      	adcs	r2, r3
 8007eb8:	602a      	str	r2, [r5, #0]
 8007eba:	e7ee      	b.n	8007e9a <__swhatbuf_r+0x1e>
 8007ebc:	2340      	movs	r3, #64	; 0x40
 8007ebe:	2000      	movs	r0, #0
 8007ec0:	6023      	str	r3, [r4, #0]
 8007ec2:	b016      	add	sp, #88	; 0x58
 8007ec4:	bd70      	pop	{r4, r5, r6, pc}
	...

08007ec8 <__smakebuf_r>:
 8007ec8:	898b      	ldrh	r3, [r1, #12]
 8007eca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007ecc:	079d      	lsls	r5, r3, #30
 8007ece:	4606      	mov	r6, r0
 8007ed0:	460c      	mov	r4, r1
 8007ed2:	d507      	bpl.n	8007ee4 <__smakebuf_r+0x1c>
 8007ed4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007ed8:	6023      	str	r3, [r4, #0]
 8007eda:	6123      	str	r3, [r4, #16]
 8007edc:	2301      	movs	r3, #1
 8007ede:	6163      	str	r3, [r4, #20]
 8007ee0:	b002      	add	sp, #8
 8007ee2:	bd70      	pop	{r4, r5, r6, pc}
 8007ee4:	466a      	mov	r2, sp
 8007ee6:	ab01      	add	r3, sp, #4
 8007ee8:	f7ff ffc8 	bl	8007e7c <__swhatbuf_r>
 8007eec:	9900      	ldr	r1, [sp, #0]
 8007eee:	4605      	mov	r5, r0
 8007ef0:	4630      	mov	r0, r6
 8007ef2:	f7ff f9e5 	bl	80072c0 <_malloc_r>
 8007ef6:	b948      	cbnz	r0, 8007f0c <__smakebuf_r+0x44>
 8007ef8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007efc:	059a      	lsls	r2, r3, #22
 8007efe:	d4ef      	bmi.n	8007ee0 <__smakebuf_r+0x18>
 8007f00:	f023 0303 	bic.w	r3, r3, #3
 8007f04:	f043 0302 	orr.w	r3, r3, #2
 8007f08:	81a3      	strh	r3, [r4, #12]
 8007f0a:	e7e3      	b.n	8007ed4 <__smakebuf_r+0xc>
 8007f0c:	4b0d      	ldr	r3, [pc, #52]	; (8007f44 <__smakebuf_r+0x7c>)
 8007f0e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007f10:	89a3      	ldrh	r3, [r4, #12]
 8007f12:	6020      	str	r0, [r4, #0]
 8007f14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f18:	81a3      	strh	r3, [r4, #12]
 8007f1a:	9b00      	ldr	r3, [sp, #0]
 8007f1c:	6120      	str	r0, [r4, #16]
 8007f1e:	6163      	str	r3, [r4, #20]
 8007f20:	9b01      	ldr	r3, [sp, #4]
 8007f22:	b15b      	cbz	r3, 8007f3c <__smakebuf_r+0x74>
 8007f24:	4630      	mov	r0, r6
 8007f26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f2a:	f000 f91f 	bl	800816c <_isatty_r>
 8007f2e:	b128      	cbz	r0, 8007f3c <__smakebuf_r+0x74>
 8007f30:	89a3      	ldrh	r3, [r4, #12]
 8007f32:	f023 0303 	bic.w	r3, r3, #3
 8007f36:	f043 0301 	orr.w	r3, r3, #1
 8007f3a:	81a3      	strh	r3, [r4, #12]
 8007f3c:	89a0      	ldrh	r0, [r4, #12]
 8007f3e:	4305      	orrs	r5, r0
 8007f40:	81a5      	strh	r5, [r4, #12]
 8007f42:	e7cd      	b.n	8007ee0 <__smakebuf_r+0x18>
 8007f44:	08007cd5 	.word	0x08007cd5

08007f48 <memmove>:
 8007f48:	4288      	cmp	r0, r1
 8007f4a:	b510      	push	{r4, lr}
 8007f4c:	eb01 0402 	add.w	r4, r1, r2
 8007f50:	d902      	bls.n	8007f58 <memmove+0x10>
 8007f52:	4284      	cmp	r4, r0
 8007f54:	4623      	mov	r3, r4
 8007f56:	d807      	bhi.n	8007f68 <memmove+0x20>
 8007f58:	1e43      	subs	r3, r0, #1
 8007f5a:	42a1      	cmp	r1, r4
 8007f5c:	d008      	beq.n	8007f70 <memmove+0x28>
 8007f5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007f62:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007f66:	e7f8      	b.n	8007f5a <memmove+0x12>
 8007f68:	4601      	mov	r1, r0
 8007f6a:	4402      	add	r2, r0
 8007f6c:	428a      	cmp	r2, r1
 8007f6e:	d100      	bne.n	8007f72 <memmove+0x2a>
 8007f70:	bd10      	pop	{r4, pc}
 8007f72:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007f76:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007f7a:	e7f7      	b.n	8007f6c <memmove+0x24>

08007f7c <__malloc_lock>:
 8007f7c:	4801      	ldr	r0, [pc, #4]	; (8007f84 <__malloc_lock+0x8>)
 8007f7e:	f7ff bf7b 	b.w	8007e78 <__retarget_lock_acquire_recursive>
 8007f82:	bf00      	nop
 8007f84:	20001040 	.word	0x20001040

08007f88 <__malloc_unlock>:
 8007f88:	4801      	ldr	r0, [pc, #4]	; (8007f90 <__malloc_unlock+0x8>)
 8007f8a:	f7ff bf76 	b.w	8007e7a <__retarget_lock_release_recursive>
 8007f8e:	bf00      	nop
 8007f90:	20001040 	.word	0x20001040

08007f94 <_realloc_r>:
 8007f94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f98:	4680      	mov	r8, r0
 8007f9a:	4614      	mov	r4, r2
 8007f9c:	460e      	mov	r6, r1
 8007f9e:	b921      	cbnz	r1, 8007faa <_realloc_r+0x16>
 8007fa0:	4611      	mov	r1, r2
 8007fa2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007fa6:	f7ff b98b 	b.w	80072c0 <_malloc_r>
 8007faa:	b92a      	cbnz	r2, 8007fb8 <_realloc_r+0x24>
 8007fac:	f7ff f920 	bl	80071f0 <_free_r>
 8007fb0:	4625      	mov	r5, r4
 8007fb2:	4628      	mov	r0, r5
 8007fb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fb8:	f000 f8fa 	bl	80081b0 <_malloc_usable_size_r>
 8007fbc:	4284      	cmp	r4, r0
 8007fbe:	4607      	mov	r7, r0
 8007fc0:	d802      	bhi.n	8007fc8 <_realloc_r+0x34>
 8007fc2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007fc6:	d812      	bhi.n	8007fee <_realloc_r+0x5a>
 8007fc8:	4621      	mov	r1, r4
 8007fca:	4640      	mov	r0, r8
 8007fcc:	f7ff f978 	bl	80072c0 <_malloc_r>
 8007fd0:	4605      	mov	r5, r0
 8007fd2:	2800      	cmp	r0, #0
 8007fd4:	d0ed      	beq.n	8007fb2 <_realloc_r+0x1e>
 8007fd6:	42bc      	cmp	r4, r7
 8007fd8:	4622      	mov	r2, r4
 8007fda:	4631      	mov	r1, r6
 8007fdc:	bf28      	it	cs
 8007fde:	463a      	movcs	r2, r7
 8007fe0:	f7fe fc2c 	bl	800683c <memcpy>
 8007fe4:	4631      	mov	r1, r6
 8007fe6:	4640      	mov	r0, r8
 8007fe8:	f7ff f902 	bl	80071f0 <_free_r>
 8007fec:	e7e1      	b.n	8007fb2 <_realloc_r+0x1e>
 8007fee:	4635      	mov	r5, r6
 8007ff0:	e7df      	b.n	8007fb2 <_realloc_r+0x1e>

08007ff2 <_raise_r>:
 8007ff2:	291f      	cmp	r1, #31
 8007ff4:	b538      	push	{r3, r4, r5, lr}
 8007ff6:	4604      	mov	r4, r0
 8007ff8:	460d      	mov	r5, r1
 8007ffa:	d904      	bls.n	8008006 <_raise_r+0x14>
 8007ffc:	2316      	movs	r3, #22
 8007ffe:	6003      	str	r3, [r0, #0]
 8008000:	f04f 30ff 	mov.w	r0, #4294967295
 8008004:	bd38      	pop	{r3, r4, r5, pc}
 8008006:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008008:	b112      	cbz	r2, 8008010 <_raise_r+0x1e>
 800800a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800800e:	b94b      	cbnz	r3, 8008024 <_raise_r+0x32>
 8008010:	4620      	mov	r0, r4
 8008012:	f000 f831 	bl	8008078 <_getpid_r>
 8008016:	462a      	mov	r2, r5
 8008018:	4601      	mov	r1, r0
 800801a:	4620      	mov	r0, r4
 800801c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008020:	f000 b818 	b.w	8008054 <_kill_r>
 8008024:	2b01      	cmp	r3, #1
 8008026:	d00a      	beq.n	800803e <_raise_r+0x4c>
 8008028:	1c59      	adds	r1, r3, #1
 800802a:	d103      	bne.n	8008034 <_raise_r+0x42>
 800802c:	2316      	movs	r3, #22
 800802e:	6003      	str	r3, [r0, #0]
 8008030:	2001      	movs	r0, #1
 8008032:	e7e7      	b.n	8008004 <_raise_r+0x12>
 8008034:	2400      	movs	r4, #0
 8008036:	4628      	mov	r0, r5
 8008038:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800803c:	4798      	blx	r3
 800803e:	2000      	movs	r0, #0
 8008040:	e7e0      	b.n	8008004 <_raise_r+0x12>
	...

08008044 <raise>:
 8008044:	4b02      	ldr	r3, [pc, #8]	; (8008050 <raise+0xc>)
 8008046:	4601      	mov	r1, r0
 8008048:	6818      	ldr	r0, [r3, #0]
 800804a:	f7ff bfd2 	b.w	8007ff2 <_raise_r>
 800804e:	bf00      	nop
 8008050:	200000a4 	.word	0x200000a4

08008054 <_kill_r>:
 8008054:	b538      	push	{r3, r4, r5, lr}
 8008056:	2300      	movs	r3, #0
 8008058:	4d06      	ldr	r5, [pc, #24]	; (8008074 <_kill_r+0x20>)
 800805a:	4604      	mov	r4, r0
 800805c:	4608      	mov	r0, r1
 800805e:	4611      	mov	r1, r2
 8008060:	602b      	str	r3, [r5, #0]
 8008062:	f7f9 fb74 	bl	800174e <_kill>
 8008066:	1c43      	adds	r3, r0, #1
 8008068:	d102      	bne.n	8008070 <_kill_r+0x1c>
 800806a:	682b      	ldr	r3, [r5, #0]
 800806c:	b103      	cbz	r3, 8008070 <_kill_r+0x1c>
 800806e:	6023      	str	r3, [r4, #0]
 8008070:	bd38      	pop	{r3, r4, r5, pc}
 8008072:	bf00      	nop
 8008074:	20001044 	.word	0x20001044

08008078 <_getpid_r>:
 8008078:	f7f9 bb62 	b.w	8001740 <_getpid>

0800807c <__sread>:
 800807c:	b510      	push	{r4, lr}
 800807e:	460c      	mov	r4, r1
 8008080:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008084:	f000 f89c 	bl	80081c0 <_read_r>
 8008088:	2800      	cmp	r0, #0
 800808a:	bfab      	itete	ge
 800808c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800808e:	89a3      	ldrhlt	r3, [r4, #12]
 8008090:	181b      	addge	r3, r3, r0
 8008092:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008096:	bfac      	ite	ge
 8008098:	6563      	strge	r3, [r4, #84]	; 0x54
 800809a:	81a3      	strhlt	r3, [r4, #12]
 800809c:	bd10      	pop	{r4, pc}

0800809e <__swrite>:
 800809e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080a2:	461f      	mov	r7, r3
 80080a4:	898b      	ldrh	r3, [r1, #12]
 80080a6:	4605      	mov	r5, r0
 80080a8:	05db      	lsls	r3, r3, #23
 80080aa:	460c      	mov	r4, r1
 80080ac:	4616      	mov	r6, r2
 80080ae:	d505      	bpl.n	80080bc <__swrite+0x1e>
 80080b0:	2302      	movs	r3, #2
 80080b2:	2200      	movs	r2, #0
 80080b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080b8:	f000 f868 	bl	800818c <_lseek_r>
 80080bc:	89a3      	ldrh	r3, [r4, #12]
 80080be:	4632      	mov	r2, r6
 80080c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80080c4:	81a3      	strh	r3, [r4, #12]
 80080c6:	4628      	mov	r0, r5
 80080c8:	463b      	mov	r3, r7
 80080ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80080ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80080d2:	f000 b817 	b.w	8008104 <_write_r>

080080d6 <__sseek>:
 80080d6:	b510      	push	{r4, lr}
 80080d8:	460c      	mov	r4, r1
 80080da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080de:	f000 f855 	bl	800818c <_lseek_r>
 80080e2:	1c43      	adds	r3, r0, #1
 80080e4:	89a3      	ldrh	r3, [r4, #12]
 80080e6:	bf15      	itete	ne
 80080e8:	6560      	strne	r0, [r4, #84]	; 0x54
 80080ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80080ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80080f2:	81a3      	strheq	r3, [r4, #12]
 80080f4:	bf18      	it	ne
 80080f6:	81a3      	strhne	r3, [r4, #12]
 80080f8:	bd10      	pop	{r4, pc}

080080fa <__sclose>:
 80080fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080fe:	f000 b813 	b.w	8008128 <_close_r>
	...

08008104 <_write_r>:
 8008104:	b538      	push	{r3, r4, r5, lr}
 8008106:	4604      	mov	r4, r0
 8008108:	4608      	mov	r0, r1
 800810a:	4611      	mov	r1, r2
 800810c:	2200      	movs	r2, #0
 800810e:	4d05      	ldr	r5, [pc, #20]	; (8008124 <_write_r+0x20>)
 8008110:	602a      	str	r2, [r5, #0]
 8008112:	461a      	mov	r2, r3
 8008114:	f7f9 fb52 	bl	80017bc <_write>
 8008118:	1c43      	adds	r3, r0, #1
 800811a:	d102      	bne.n	8008122 <_write_r+0x1e>
 800811c:	682b      	ldr	r3, [r5, #0]
 800811e:	b103      	cbz	r3, 8008122 <_write_r+0x1e>
 8008120:	6023      	str	r3, [r4, #0]
 8008122:	bd38      	pop	{r3, r4, r5, pc}
 8008124:	20001044 	.word	0x20001044

08008128 <_close_r>:
 8008128:	b538      	push	{r3, r4, r5, lr}
 800812a:	2300      	movs	r3, #0
 800812c:	4d05      	ldr	r5, [pc, #20]	; (8008144 <_close_r+0x1c>)
 800812e:	4604      	mov	r4, r0
 8008130:	4608      	mov	r0, r1
 8008132:	602b      	str	r3, [r5, #0]
 8008134:	f7f9 fb5e 	bl	80017f4 <_close>
 8008138:	1c43      	adds	r3, r0, #1
 800813a:	d102      	bne.n	8008142 <_close_r+0x1a>
 800813c:	682b      	ldr	r3, [r5, #0]
 800813e:	b103      	cbz	r3, 8008142 <_close_r+0x1a>
 8008140:	6023      	str	r3, [r4, #0]
 8008142:	bd38      	pop	{r3, r4, r5, pc}
 8008144:	20001044 	.word	0x20001044

08008148 <_fstat_r>:
 8008148:	b538      	push	{r3, r4, r5, lr}
 800814a:	2300      	movs	r3, #0
 800814c:	4d06      	ldr	r5, [pc, #24]	; (8008168 <_fstat_r+0x20>)
 800814e:	4604      	mov	r4, r0
 8008150:	4608      	mov	r0, r1
 8008152:	4611      	mov	r1, r2
 8008154:	602b      	str	r3, [r5, #0]
 8008156:	f7f9 fb58 	bl	800180a <_fstat>
 800815a:	1c43      	adds	r3, r0, #1
 800815c:	d102      	bne.n	8008164 <_fstat_r+0x1c>
 800815e:	682b      	ldr	r3, [r5, #0]
 8008160:	b103      	cbz	r3, 8008164 <_fstat_r+0x1c>
 8008162:	6023      	str	r3, [r4, #0]
 8008164:	bd38      	pop	{r3, r4, r5, pc}
 8008166:	bf00      	nop
 8008168:	20001044 	.word	0x20001044

0800816c <_isatty_r>:
 800816c:	b538      	push	{r3, r4, r5, lr}
 800816e:	2300      	movs	r3, #0
 8008170:	4d05      	ldr	r5, [pc, #20]	; (8008188 <_isatty_r+0x1c>)
 8008172:	4604      	mov	r4, r0
 8008174:	4608      	mov	r0, r1
 8008176:	602b      	str	r3, [r5, #0]
 8008178:	f7f9 fb56 	bl	8001828 <_isatty>
 800817c:	1c43      	adds	r3, r0, #1
 800817e:	d102      	bne.n	8008186 <_isatty_r+0x1a>
 8008180:	682b      	ldr	r3, [r5, #0]
 8008182:	b103      	cbz	r3, 8008186 <_isatty_r+0x1a>
 8008184:	6023      	str	r3, [r4, #0]
 8008186:	bd38      	pop	{r3, r4, r5, pc}
 8008188:	20001044 	.word	0x20001044

0800818c <_lseek_r>:
 800818c:	b538      	push	{r3, r4, r5, lr}
 800818e:	4604      	mov	r4, r0
 8008190:	4608      	mov	r0, r1
 8008192:	4611      	mov	r1, r2
 8008194:	2200      	movs	r2, #0
 8008196:	4d05      	ldr	r5, [pc, #20]	; (80081ac <_lseek_r+0x20>)
 8008198:	602a      	str	r2, [r5, #0]
 800819a:	461a      	mov	r2, r3
 800819c:	f7f9 fb4e 	bl	800183c <_lseek>
 80081a0:	1c43      	adds	r3, r0, #1
 80081a2:	d102      	bne.n	80081aa <_lseek_r+0x1e>
 80081a4:	682b      	ldr	r3, [r5, #0]
 80081a6:	b103      	cbz	r3, 80081aa <_lseek_r+0x1e>
 80081a8:	6023      	str	r3, [r4, #0]
 80081aa:	bd38      	pop	{r3, r4, r5, pc}
 80081ac:	20001044 	.word	0x20001044

080081b0 <_malloc_usable_size_r>:
 80081b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081b4:	1f18      	subs	r0, r3, #4
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	bfbc      	itt	lt
 80081ba:	580b      	ldrlt	r3, [r1, r0]
 80081bc:	18c0      	addlt	r0, r0, r3
 80081be:	4770      	bx	lr

080081c0 <_read_r>:
 80081c0:	b538      	push	{r3, r4, r5, lr}
 80081c2:	4604      	mov	r4, r0
 80081c4:	4608      	mov	r0, r1
 80081c6:	4611      	mov	r1, r2
 80081c8:	2200      	movs	r2, #0
 80081ca:	4d05      	ldr	r5, [pc, #20]	; (80081e0 <_read_r+0x20>)
 80081cc:	602a      	str	r2, [r5, #0]
 80081ce:	461a      	mov	r2, r3
 80081d0:	f7f9 fad7 	bl	8001782 <_read>
 80081d4:	1c43      	adds	r3, r0, #1
 80081d6:	d102      	bne.n	80081de <_read_r+0x1e>
 80081d8:	682b      	ldr	r3, [r5, #0]
 80081da:	b103      	cbz	r3, 80081de <_read_r+0x1e>
 80081dc:	6023      	str	r3, [r4, #0]
 80081de:	bd38      	pop	{r3, r4, r5, pc}
 80081e0:	20001044 	.word	0x20001044

080081e4 <_init>:
 80081e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081e6:	bf00      	nop
 80081e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081ea:	bc08      	pop	{r3}
 80081ec:	469e      	mov	lr, r3
 80081ee:	4770      	bx	lr

080081f0 <_fini>:
 80081f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081f2:	bf00      	nop
 80081f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081f6:	bc08      	pop	{r3}
 80081f8:	469e      	mov	lr, r3
 80081fa:	4770      	bx	lr
