
Temperature_GMS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ada8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007a0  0800aeb8  0800aeb8  0001aeb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b658  0800b658  000203f0  2**0
                  CONTENTS
  4 .ARM          00000000  0800b658  0800b658  000203f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b658  0800b658  000203f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b658  0800b658  0001b658  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b65c  0800b65c  0001b65c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003f0  20000000  0800b660  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002184  200003f0  0800ba50  000203f0  2**3
                  ALLOC
 10 ._user_heap_stack 00001804  20002574  0800ba50  00022574  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000203f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e9e8  00000000  00000000  00020419  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005418  00000000  00000000  0003ee01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00014621  00000000  00000000  00044219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014c8  00000000  00000000  00058840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000019c0  00000000  00000000  00059d08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d552  00000000  00000000  0005b6c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000223fb  00000000  00000000  00078c1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00091f74  00000000  00000000  0009b015  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012cf89  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004a4c  00000000  00000000  0012cfdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200003f0 	.word	0x200003f0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800aea0 	.word	0x0800aea0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200003f4 	.word	0x200003f4
 800014c:	0800aea0 	.word	0x0800aea0

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2uiz>:
 8000a9c:	004a      	lsls	r2, r1, #1
 8000a9e:	d211      	bcs.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d211      	bcs.n	8000aca <__aeabi_d2uiz+0x2e>
 8000aa6:	d50d      	bpl.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d40e      	bmi.n	8000ad0 <__aeabi_d2uiz+0x34>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d102      	bne.n	8000ad6 <__aeabi_d2uiz+0x3a>
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	4770      	bx	lr
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	4770      	bx	lr

08000adc <__aeabi_d2lz>:
 8000adc:	b538      	push	{r3, r4, r5, lr}
 8000ade:	4605      	mov	r5, r0
 8000ae0:	460c      	mov	r4, r1
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	4628      	mov	r0, r5
 8000ae8:	4621      	mov	r1, r4
 8000aea:	f7ff ff71 	bl	80009d0 <__aeabi_dcmplt>
 8000aee:	b928      	cbnz	r0, 8000afc <__aeabi_d2lz+0x20>
 8000af0:	4628      	mov	r0, r5
 8000af2:	4621      	mov	r1, r4
 8000af4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000af8:	f000 b80a 	b.w	8000b10 <__aeabi_d2ulz>
 8000afc:	4628      	mov	r0, r5
 8000afe:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000b02:	f000 f805 	bl	8000b10 <__aeabi_d2ulz>
 8000b06:	4240      	negs	r0, r0
 8000b08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b0c:	bd38      	pop	{r3, r4, r5, pc}
 8000b0e:	bf00      	nop

08000b10 <__aeabi_d2ulz>:
 8000b10:	b5d0      	push	{r4, r6, r7, lr}
 8000b12:	2200      	movs	r2, #0
 8000b14:	4b0b      	ldr	r3, [pc, #44]	; (8000b44 <__aeabi_d2ulz+0x34>)
 8000b16:	4606      	mov	r6, r0
 8000b18:	460f      	mov	r7, r1
 8000b1a:	f7ff fce7 	bl	80004ec <__aeabi_dmul>
 8000b1e:	f7ff ffbd 	bl	8000a9c <__aeabi_d2uiz>
 8000b22:	4604      	mov	r4, r0
 8000b24:	f7ff fc68 	bl	80003f8 <__aeabi_ui2d>
 8000b28:	2200      	movs	r2, #0
 8000b2a:	4b07      	ldr	r3, [pc, #28]	; (8000b48 <__aeabi_d2ulz+0x38>)
 8000b2c:	f7ff fcde 	bl	80004ec <__aeabi_dmul>
 8000b30:	4602      	mov	r2, r0
 8000b32:	460b      	mov	r3, r1
 8000b34:	4630      	mov	r0, r6
 8000b36:	4639      	mov	r1, r7
 8000b38:	f7ff fb20 	bl	800017c <__aeabi_dsub>
 8000b3c:	f7ff ffae 	bl	8000a9c <__aeabi_d2uiz>
 8000b40:	4621      	mov	r1, r4
 8000b42:	bdd0      	pop	{r4, r6, r7, pc}
 8000b44:	3df00000 	.word	0x3df00000
 8000b48:	41f00000 	.word	0x41f00000

08000b4c <set_baudrate>:
#include "usart.h"



static void set_baudrate(uint32_t baudrate)
{
 8000b4c:	b508      	push	{r3, lr}
	  huart2.Instance = USART2;
 8000b4e:	4b0a      	ldr	r3, [pc, #40]	; (8000b78 <set_baudrate+0x2c>)
 8000b50:	4a0a      	ldr	r2, [pc, #40]	; (8000b7c <set_baudrate+0x30>)
 8000b52:	601a      	str	r2, [r3, #0]
	  huart2.Init.BaudRate = baudrate;
 8000b54:	6058      	str	r0, [r3, #4]
	  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b56:	2200      	movs	r2, #0
 8000b58:	609a      	str	r2, [r3, #8]
	  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b5a:	60da      	str	r2, [r3, #12]
	  huart2.Init.Parity = UART_PARITY_NONE;
 8000b5c:	611a      	str	r2, [r3, #16]
	  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b5e:	210c      	movs	r1, #12
 8000b60:	6159      	str	r1, [r3, #20]
	  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b62:	619a      	str	r2, [r3, #24]
	  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b64:	61da      	str	r2, [r3, #28]
	  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 8000b66:	4618      	mov	r0, r3
 8000b68:	f003 fbdf 	bl	800432a <HAL_HalfDuplex_Init>
 8000b6c:	b900      	cbnz	r0, 8000b70 <set_baudrate+0x24>
	  {
	    Error_Handler();
	  }
}
 8000b6e:	bd08      	pop	{r3, pc}
	    Error_Handler();
 8000b70:	f000 fdae 	bl	80016d0 <Error_Handler>
}
 8000b74:	e7fb      	b.n	8000b6e <set_baudrate+0x22>
 8000b76:	bf00      	nop
 8000b78:	20001728 	.word	0x20001728
 8000b7c:	40004400 	.word	0x40004400

08000b80 <wire_reset>:


HAL_StatusTypeDef wire_reset(void)
{
 8000b80:	b510      	push	{r4, lr}
 8000b82:	b082      	sub	sp, #8
	uint8_t data_out = 0xF0;
 8000b84:	23f0      	movs	r3, #240	; 0xf0
 8000b86:	f88d 3007 	strb.w	r3, [sp, #7]
	uint8_t data_in = 0;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	f88d 3006 	strb.w	r3, [sp, #6]

	set_baudrate(9600);
 8000b90:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8000b94:	f7ff ffda 	bl	8000b4c <set_baudrate>
	HAL_UART_Transmit(&UART, &data_out, 1, HAL_MAX_DELAY);
 8000b98:	4c0e      	ldr	r4, [pc, #56]	; (8000bd4 <wire_reset+0x54>)
 8000b9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	f10d 0107 	add.w	r1, sp, #7
 8000ba4:	4620      	mov	r0, r4
 8000ba6:	f003 fbf5 	bl	8004394 <HAL_UART_Transmit>
	HAL_UART_Receive(&UART, &data_in, 1, HAL_MAX_DELAY);
 8000baa:	f04f 33ff 	mov.w	r3, #4294967295
 8000bae:	2201      	movs	r2, #1
 8000bb0:	f10d 0106 	add.w	r1, sp, #6
 8000bb4:	4620      	mov	r0, r4
 8000bb6:	f003 fc5f 	bl	8004478 <HAL_UART_Receive>
	set_baudrate(115200);
 8000bba:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 8000bbe:	f7ff ffc5 	bl	8000b4c <set_baudrate>

	if (data_in != 0xF0)
 8000bc2:	f89d 0006 	ldrb.w	r0, [sp, #6]
		return HAL_OK;
	else
		return HAL_ERROR;
}
 8000bc6:	28f0      	cmp	r0, #240	; 0xf0
 8000bc8:	bf14      	ite	ne
 8000bca:	2000      	movne	r0, #0
 8000bcc:	2001      	moveq	r0, #1
 8000bce:	b002      	add	sp, #8
 8000bd0:	bd10      	pop	{r4, pc}
 8000bd2:	bf00      	nop
 8000bd4:	20001728 	.word	0x20001728

08000bd8 <wire_read>:

	return data_in & 0x01;
}

uint8_t wire_read(void)
{
 8000bd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000bdc:	b082      	sub	sp, #8
 8000bde:	2508      	movs	r5, #8
  uint8_t value = 0;
 8000be0:	2400      	movs	r4, #0
	if(USARTn -> SR & (1<<5))
 8000be2:	f8df 805c 	ldr.w	r8, [pc, #92]	; 8000c40 <wire_read+0x68>
	HAL_UART_Transmit(&UART, &data_out, 1, HAL_MAX_DELAY);
 8000be6:	4f17      	ldr	r7, [pc, #92]	; (8000c44 <wire_read+0x6c>)
 8000be8:	f04f 36ff 	mov.w	r6, #4294967295
  int i;
  for (i = 0; i < 8; i++)
  {
    value >>= 1;
 8000bec:	0864      	lsrs	r4, r4, #1
	uint8_t data_out = 0xff;
 8000bee:	23ff      	movs	r3, #255	; 0xff
 8000bf0:	f88d 3006 	strb.w	r3, [sp, #6]
	uint8_t data_in = 0x0;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	f88d 3007 	strb.w	r3, [sp, #7]
	if(USARTn -> SR & (1<<5))
 8000bfa:	f8d8 3000 	ldr.w	r3, [r8]
 8000bfe:	f013 0f20 	tst.w	r3, #32
		USARTn -> DR;
 8000c02:	bf18      	it	ne
 8000c04:	f8d8 3004 	ldrne.w	r3, [r8, #4]
	HAL_UART_Transmit(&UART, &data_out, 1, HAL_MAX_DELAY);
 8000c08:	4633      	mov	r3, r6
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	f10d 0106 	add.w	r1, sp, #6
 8000c10:	4638      	mov	r0, r7
 8000c12:	f003 fbbf 	bl	8004394 <HAL_UART_Transmit>
	HAL_UART_Receive(&UART, &data_in, 1, HAL_MAX_DELAY);
 8000c16:	4633      	mov	r3, r6
 8000c18:	2201      	movs	r2, #1
 8000c1a:	f10d 0107 	add.w	r1, sp, #7
 8000c1e:	4638      	mov	r0, r7
 8000c20:	f003 fc2a 	bl	8004478 <HAL_UART_Receive>
	return data_in & 0x01;
 8000c24:	f89d 3007 	ldrb.w	r3, [sp, #7]
    if (read_bit())
 8000c28:	f013 0f01 	tst.w	r3, #1
      value |= 0x80;
 8000c2c:	bf18      	it	ne
 8000c2e:	f044 0480 	orrne.w	r4, r4, #128	; 0x80
  for (i = 0; i < 8; i++)
 8000c32:	3d01      	subs	r5, #1
 8000c34:	d1da      	bne.n	8000bec <wire_read+0x14>
  }
  return value;
}
 8000c36:	4620      	mov	r0, r4
 8000c38:	b002      	add	sp, #8
 8000c3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000c3e:	bf00      	nop
 8000c40:	40004400 	.word	0x40004400
 8000c44:	20001728 	.word	0x20001728

08000c48 <wire_write>:
    HAL_UART_Transmit(&UART, &data_out, 1, HAL_MAX_DELAY);
  }
}

void wire_write(uint8_t byte)
{
 8000c48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	4604      	mov	r4, r0
 8000c4e:	2508      	movs	r5, #8
    uint8_t data_out = 0x0;
 8000c50:	2700      	movs	r7, #0
    HAL_UART_Transmit(&UART, &data_out, 1, HAL_MAX_DELAY);
 8000c52:	4e0b      	ldr	r6, [pc, #44]	; (8000c80 <wire_write+0x38>)
  if (value)
 8000c54:	f014 0f01 	tst.w	r4, #1
    uint8_t data_out = 0xff;
 8000c58:	bf1a      	itte	ne
 8000c5a:	23ff      	movne	r3, #255	; 0xff
 8000c5c:	f88d 3007 	strbne.w	r3, [sp, #7]
    uint8_t data_out = 0x0;
 8000c60:	f88d 7007 	strbeq.w	r7, [sp, #7]
    HAL_UART_Transmit(&UART, &data_out, 1, HAL_MAX_DELAY);
 8000c64:	f04f 33ff 	mov.w	r3, #4294967295
 8000c68:	2201      	movs	r2, #1
 8000c6a:	f10d 0107 	add.w	r1, sp, #7
 8000c6e:	4630      	mov	r0, r6
 8000c70:	f003 fb90 	bl	8004394 <HAL_UART_Transmit>
  int i;
  for (i = 0; i < 8; i++) {
    write_bit(byte & 0x01);
    byte >>= 1;
 8000c74:	0864      	lsrs	r4, r4, #1
  for (i = 0; i < 8; i++) {
 8000c76:	3d01      	subs	r5, #1
 8000c78:	d1ec      	bne.n	8000c54 <wire_write+0xc>
  }
}
 8000c7a:	b003      	add	sp, #12
 8000c7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	20001728 	.word	0x20001728

08000c84 <wire_crc>:
uint8_t wire_crc(const uint8_t* data, int len)
{
  int i;
    uint8_t crc = 0;

    for (i = 0; i < len; i++)
 8000c84:	2900      	cmp	r1, #0
 8000c86:	dd19      	ble.n	8000cbc <wire_crc+0x38>
{
 8000c88:	b500      	push	{lr}
 8000c8a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c8e:	eb0c 0e01 	add.w	lr, ip, r1
    uint8_t crc = 0;
 8000c92:	2000      	movs	r0, #0
 8000c94:	e001      	b.n	8000c9a <wire_crc+0x16>
    for (i = 0; i < len; i++)
 8000c96:	45f4      	cmp	ip, lr
 8000c98:	d012      	beq.n	8000cc0 <wire_crc+0x3c>
      crc = byte_crc(crc, data[i]);
 8000c9a:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
 8000c9e:	2208      	movs	r2, #8
    uint8_t b = crc ^ byte;
 8000ca0:	ea80 0301 	eor.w	r3, r0, r1
    if (b & 0x01)
 8000ca4:	f013 0f01 	tst.w	r3, #1
 8000ca8:	ea4f 0050 	mov.w	r0, r0, lsr #1
      crc ^= 0x8c;
 8000cac:	bf1c      	itt	ne
 8000cae:	f080 008c 	eorne.w	r0, r0, #140	; 0x8c
 8000cb2:	b2c0      	uxtbne	r0, r0
    byte >>= 1;
 8000cb4:	0849      	lsrs	r1, r1, #1
  for (i = 0; i < 8; i++) {
 8000cb6:	3a01      	subs	r2, #1
 8000cb8:	d1f2      	bne.n	8000ca0 <wire_crc+0x1c>
 8000cba:	e7ec      	b.n	8000c96 <wire_crc+0x12>
    uint8_t crc = 0;
 8000cbc:	2000      	movs	r0, #0

    return crc;
}
 8000cbe:	4770      	bx	lr
 8000cc0:	f85d fb04 	ldr.w	pc, [sp], #4

08000cc4 <GetPage>:
 * Some STM32F103C8 have 64 KB FLASH Memory, so I guess they have Page 0 to Page 63 only.
 */

/* FLASH_PAGE_SIZE should be able to get the size of the Page according to the controller */
static uint32_t GetPage(uint32_t Address)
{
 8000cc4:	4602      	mov	r2, r0
 8000cc6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
  for (int indx=0; indx<128; indx++)
 8000cca:	4907      	ldr	r1, [pc, #28]	; (8000ce8 <GetPage+0x24>)
 8000ccc:	e001      	b.n	8000cd2 <GetPage+0xe>
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d007      	beq.n	8000ce2 <GetPage+0x1e>
  {
	  if((Address < (0x08000000 + (FLASH_PAGE_SIZE *(indx+1))) ) && (Address >= (0x08000000 + FLASH_PAGE_SIZE*indx)))
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	d2f8      	bcs.n	8000cce <GetPage+0xa>
 8000cdc:	4282      	cmp	r2, r0
 8000cde:	d3f6      	bcc.n	8000cce <GetPage+0xa>
		  return (0x08000000 + FLASH_PAGE_SIZE*indx);
	  }
  }

  return 0;
}
 8000ce0:	4770      	bx	lr
  return 0;
 8000ce2:	2000      	movs	r0, #0
 8000ce4:	e7fc      	b.n	8000ce0 <GetPage+0x1c>
 8000ce6:	bf00      	nop
 8000ce8:	08020000 	.word	0x08020000

08000cec <Flash_Write_Data>:
   float float_variable =  thing.a;
   return float_variable;
}

uint32_t Flash_Write_Data (uint32_t StartPageAddress, uint32_t *Data, uint16_t numberofwords)
{
 8000cec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000cf0:	b083      	sub	sp, #12
 8000cf2:	4680      	mov	r8, r0
 8000cf4:	460e      	mov	r6, r1
 8000cf6:	4617      	mov	r7, r2
	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t PAGEError;
	int sofar=0;

	  /* Unlock the Flash to enable the flash control register access *************/
	   HAL_FLASH_Unlock();
 8000cf8:	f001 f9c6 	bl	8002088 <HAL_FLASH_Unlock>

	   /* Erase the user Flash area*/

	  uint32_t StartPage = GetPage(StartPageAddress);
 8000cfc:	4640      	mov	r0, r8
 8000cfe:	f7ff ffe1 	bl	8000cc4 <GetPage>
 8000d02:	4604      	mov	r4, r0
	  uint32_t EndPageAdress = StartPageAddress + numberofwords*4;
	  uint32_t EndPage = GetPage(EndPageAdress);
 8000d04:	eb08 0087 	add.w	r0, r8, r7, lsl #2
 8000d08:	f7ff ffdc 	bl	8000cc4 <GetPage>
 8000d0c:	4603      	mov	r3, r0

	   /* Fill EraseInit structure*/
	   EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 8000d0e:	4816      	ldr	r0, [pc, #88]	; (8000d68 <Flash_Write_Data+0x7c>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	6002      	str	r2, [r0, #0]
	   EraseInitStruct.PageAddress = StartPage;
 8000d14:	6084      	str	r4, [r0, #8]
	   EraseInitStruct.NbPages     = ((EndPage - StartPage)/FLASH_PAGE_SIZE) +1;
 8000d16:	1b1b      	subs	r3, r3, r4
 8000d18:	0a9b      	lsrs	r3, r3, #10
 8000d1a:	3301      	adds	r3, #1
 8000d1c:	60c3      	str	r3, [r0, #12]

	   if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)
 8000d1e:	a901      	add	r1, sp, #4
 8000d20:	f001 fa74 	bl	800220c <HAL_FLASHEx_Erase>
 8000d24:	b9c8      	cbnz	r0, 8000d5a <Flash_Write_Data+0x6e>
		  return HAL_FLASH_GetError ();
	   }

	   /* Program the user Flash area word by word*/

	   while (sofar<numberofwords)
 8000d26:	b197      	cbz	r7, 8000d4e <Flash_Write_Data+0x62>
 8000d28:	1f34      	subs	r4, r6, #4
	int sofar=0;
 8000d2a:	2500      	movs	r5, #0
 8000d2c:	eba8 0606 	sub.w	r6, r8, r6
 8000d30:	3604      	adds	r6, #4
	   {
	     if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartPageAddress, Data[sofar]) == HAL_OK)
 8000d32:	46a9      	mov	r9, r5
 8000d34:	f04f 0802 	mov.w	r8, #2
 8000d38:	1931      	adds	r1, r6, r4
 8000d3a:	f854 2f04 	ldr.w	r2, [r4, #4]!
 8000d3e:	464b      	mov	r3, r9
 8000d40:	4640      	mov	r0, r8
 8000d42:	f001 f9fd 	bl	8002140 <HAL_FLASH_Program>
 8000d46:	b958      	cbnz	r0, 8000d60 <Flash_Write_Data+0x74>
	     {
	    	 StartPageAddress += 4;  // use StartPageAddress += 2 for half word and 8 for double word
	    	 sofar++;
 8000d48:	3501      	adds	r5, #1
	   while (sofar<numberofwords)
 8000d4a:	42af      	cmp	r7, r5
 8000d4c:	d1f4      	bne.n	8000d38 <Flash_Write_Data+0x4c>
	     }
	   }

	   /* Lock the Flash to disable the flash control register access (recommended
	      to protect the FLASH memory against possible unwanted operation) *********/
	   HAL_FLASH_Lock();
 8000d4e:	f001 f9b1 	bl	80020b4 <HAL_FLASH_Lock>

	   return 0;
 8000d52:	2000      	movs	r0, #0
}
 8000d54:	b003      	add	sp, #12
 8000d56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		  return HAL_FLASH_GetError ();
 8000d5a:	f001 f9b5 	bl	80020c8 <HAL_FLASH_GetError>
 8000d5e:	e7f9      	b.n	8000d54 <Flash_Write_Data+0x68>
	    	 return HAL_FLASH_GetError ();
 8000d60:	f001 f9b2 	bl	80020c8 <HAL_FLASH_GetError>
 8000d64:	e7f6      	b.n	8000d54 <Flash_Write_Data+0x68>
 8000d66:	bf00      	nop
 8000d68:	2000040c 	.word	0x2000040c

08000d6c <send_cmd>:
  else
    return HAL_ERROR;
}

static HAL_StatusTypeDef send_cmd(const uint8_t* rom_code, uint8_t cmd)
{
 8000d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d6e:	4605      	mov	r5, r0
 8000d70:	460e      	mov	r6, r1
  int i;

  if (wire_reset() != HAL_OK)
 8000d72:	f7ff ff05 	bl	8000b80 <wire_reset>
 8000d76:	b9a8      	cbnz	r0, 8000da4 <send_cmd+0x38>
 8000d78:	4607      	mov	r7, r0
    return HAL_ERROR;

  if (!rom_code) {
 8000d7a:	b17d      	cbz	r5, 8000d9c <send_cmd+0x30>
    wire_write(DS18B20_SKIP_ROM);
  } else {
    wire_write(DS18B20_MATCH_ROM);
 8000d7c:	2055      	movs	r0, #85	; 0x55
 8000d7e:	f7ff ff63 	bl	8000c48 <wire_write>
    for (i = 0; i < DS18B20_ROM_CODE_SIZE; i++)
 8000d82:	1e6c      	subs	r4, r5, #1
 8000d84:	3507      	adds	r5, #7
      wire_write(rom_code[i]);
 8000d86:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8000d8a:	f7ff ff5d 	bl	8000c48 <wire_write>
    for (i = 0; i < DS18B20_ROM_CODE_SIZE; i++)
 8000d8e:	42ac      	cmp	r4, r5
 8000d90:	d1f9      	bne.n	8000d86 <send_cmd+0x1a>
  }
  wire_write(cmd);
 8000d92:	4630      	mov	r0, r6
 8000d94:	f7ff ff58 	bl	8000c48 <wire_write>
  return HAL_OK;
}
 8000d98:	4638      	mov	r0, r7
 8000d9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    wire_write(DS18B20_SKIP_ROM);
 8000d9c:	20cc      	movs	r0, #204	; 0xcc
 8000d9e:	f7ff ff53 	bl	8000c48 <wire_write>
 8000da2:	e7f6      	b.n	8000d92 <send_cmd+0x26>
    return HAL_ERROR;
 8000da4:	2701      	movs	r7, #1
 8000da6:	e7f7      	b.n	8000d98 <send_cmd+0x2c>

08000da8 <ds18b20_read_scratchpad>:
{
  return send_cmd(rom_code, DS18B20_CONVERT_T);
}

static HAL_StatusTypeDef ds18b20_read_scratchpad(const uint8_t* rom_code, uint8_t* scratchpad)
{
 8000da8:	b570      	push	{r4, r5, r6, lr}
 8000daa:	460e      	mov	r6, r1
  int i;
  uint8_t crc;

  if (send_cmd(rom_code, DS18B20_READ_SCRATCHPAD) != HAL_OK)
 8000dac:	21be      	movs	r1, #190	; 0xbe
 8000dae:	f7ff ffdd 	bl	8000d6c <send_cmd>
 8000db2:	b988      	cbnz	r0, 8000dd8 <ds18b20_read_scratchpad+0x30>
 8000db4:	1e74      	subs	r4, r6, #1
 8000db6:	f106 0508 	add.w	r5, r6, #8
    return HAL_ERROR;

  for (i = 0; i < DS18B20_SCRATCHPAD_SIZE; i++)
    scratchpad[i] = wire_read();
 8000dba:	f7ff ff0d 	bl	8000bd8 <wire_read>
 8000dbe:	f804 0f01 	strb.w	r0, [r4, #1]!
  for (i = 0; i < DS18B20_SCRATCHPAD_SIZE; i++)
 8000dc2:	42ac      	cmp	r4, r5
 8000dc4:	d1f9      	bne.n	8000dba <ds18b20_read_scratchpad+0x12>

  crc = wire_crc(scratchpad, DS18B20_SCRATCHPAD_SIZE - 1);
 8000dc6:	2108      	movs	r1, #8
 8000dc8:	4630      	mov	r0, r6
 8000dca:	f7ff ff5b 	bl	8000c84 <wire_crc>
  if (scratchpad[DS18B20_SCRATCHPAD_SIZE - 1] == crc)
 8000dce:	7a33      	ldrb	r3, [r6, #8]
    return HAL_ERROR;
 8000dd0:	1a18      	subs	r0, r3, r0
 8000dd2:	bf18      	it	ne
 8000dd4:	2001      	movne	r0, #1
    return HAL_OK;
  else
    return HAL_ERROR;
}
 8000dd6:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8000dd8:	2001      	movs	r0, #1
 8000dda:	e7fc      	b.n	8000dd6 <ds18b20_read_scratchpad+0x2e>

08000ddc <ds18b20_read_address>:
{
 8000ddc:	b570      	push	{r4, r5, r6, lr}
 8000dde:	4605      	mov	r5, r0
  if (wire_reset() != HAL_OK)
 8000de0:	f7ff fece 	bl	8000b80 <wire_reset>
 8000de4:	b108      	cbz	r0, 8000dea <ds18b20_read_address+0xe>
    return HAL_ERROR;
 8000de6:	2001      	movs	r0, #1
}
 8000de8:	bd70      	pop	{r4, r5, r6, pc}
  wire_write(DS18B20_READ_ROM);
 8000dea:	2033      	movs	r0, #51	; 0x33
 8000dec:	f7ff ff2c 	bl	8000c48 <wire_write>
  for (i = 0; i < DS18B20_ROM_CODE_SIZE; i++)
 8000df0:	1e6c      	subs	r4, r5, #1
 8000df2:	1dee      	adds	r6, r5, #7
    rom_code[i] = wire_read();
 8000df4:	f7ff fef0 	bl	8000bd8 <wire_read>
 8000df8:	f804 0f01 	strb.w	r0, [r4, #1]!
  for (i = 0; i < DS18B20_ROM_CODE_SIZE; i++)
 8000dfc:	42b4      	cmp	r4, r6
 8000dfe:	d1f9      	bne.n	8000df4 <ds18b20_read_address+0x18>
  crc = wire_crc(rom_code, DS18B20_ROM_CODE_SIZE - 1);
 8000e00:	2107      	movs	r1, #7
 8000e02:	4628      	mov	r0, r5
 8000e04:	f7ff ff3e 	bl	8000c84 <wire_crc>
  if (rom_code[DS18B20_ROM_CODE_SIZE - 1] == crc)
 8000e08:	79eb      	ldrb	r3, [r5, #7]
    return HAL_ERROR;
 8000e0a:	1a18      	subs	r0, r3, r0
 8000e0c:	bf18      	it	ne
 8000e0e:	2001      	movne	r0, #1
 8000e10:	e7ea      	b.n	8000de8 <ds18b20_read_address+0xc>

08000e12 <ds18b20_start_measure>:
{
 8000e12:	b508      	push	{r3, lr}
  return send_cmd(rom_code, DS18B20_CONVERT_T);
 8000e14:	2144      	movs	r1, #68	; 0x44
 8000e16:	f7ff ffa9 	bl	8000d6c <send_cmd>
}
 8000e1a:	bd08      	pop	{r3, pc}

08000e1c <ds18b20_get_temp_wo_fp>:

  return temp / 16.0f;
}

int32_t ds18b20_get_temp_wo_fp(const uint8_t* rom_code)
{
 8000e1c:	b500      	push	{lr}
 8000e1e:	b085      	sub	sp, #20
  uint8_t scratchpad[DS18B20_SCRATCHPAD_SIZE];
  int16_t temp;

  if (ds18b20_read_scratchpad(rom_code, scratchpad) != HAL_OK)
 8000e20:	a901      	add	r1, sp, #4
 8000e22:	f7ff ffc1 	bl	8000da8 <ds18b20_read_scratchpad>
 8000e26:	b958      	cbnz	r0, 8000e40 <ds18b20_get_temp_wo_fp+0x24>
    return 8500;

  memcpy(&temp, &scratchpad[0], sizeof(temp));

  return (temp * 100) / 16;
 8000e28:	f9bd 0004 	ldrsh.w	r0, [sp, #4]
 8000e2c:	2364      	movs	r3, #100	; 0x64
 8000e2e:	fb03 f000 	mul.w	r0, r3, r0
 8000e32:	2800      	cmp	r0, #0
 8000e34:	bfb8      	it	lt
 8000e36:	300f      	addlt	r0, #15
 8000e38:	1100      	asrs	r0, r0, #4
}
 8000e3a:	b005      	add	sp, #20
 8000e3c:	f85d fb04 	ldr.w	pc, [sp], #4
    return 8500;
 8000e40:	f242 1034 	movw	r0, #8500	; 0x2134
 8000e44:	e7f9      	b.n	8000e3a <ds18b20_get_temp_wo_fp+0x1e>
	...

08000e48 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e4c:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e4e:	2400      	movs	r4, #0
 8000e50:	9404      	str	r4, [sp, #16]
 8000e52:	9405      	str	r4, [sp, #20]
 8000e54:	9406      	str	r4, [sp, #24]
 8000e56:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e58:	4b2f      	ldr	r3, [pc, #188]	; (8000f18 <MX_GPIO_Init+0xd0>)
 8000e5a:	699a      	ldr	r2, [r3, #24]
 8000e5c:	f042 0210 	orr.w	r2, r2, #16
 8000e60:	619a      	str	r2, [r3, #24]
 8000e62:	699a      	ldr	r2, [r3, #24]
 8000e64:	f002 0210 	and.w	r2, r2, #16
 8000e68:	9200      	str	r2, [sp, #0]
 8000e6a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e6c:	699a      	ldr	r2, [r3, #24]
 8000e6e:	f042 0220 	orr.w	r2, r2, #32
 8000e72:	619a      	str	r2, [r3, #24]
 8000e74:	699a      	ldr	r2, [r3, #24]
 8000e76:	f002 0220 	and.w	r2, r2, #32
 8000e7a:	9201      	str	r2, [sp, #4]
 8000e7c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e7e:	699a      	ldr	r2, [r3, #24]
 8000e80:	f042 0204 	orr.w	r2, r2, #4
 8000e84:	619a      	str	r2, [r3, #24]
 8000e86:	699a      	ldr	r2, [r3, #24]
 8000e88:	f002 0204 	and.w	r2, r2, #4
 8000e8c:	9202      	str	r2, [sp, #8]
 8000e8e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e90:	699a      	ldr	r2, [r3, #24]
 8000e92:	f042 0208 	orr.w	r2, r2, #8
 8000e96:	619a      	str	r2, [r3, #24]
 8000e98:	699b      	ldr	r3, [r3, #24]
 8000e9a:	f003 0308 	and.w	r3, r3, #8
 8000e9e:	9303      	str	r3, [sp, #12]
 8000ea0:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000ea2:	f8df a078 	ldr.w	sl, [pc, #120]	; 8000f1c <MX_GPIO_Init+0xd4>
 8000ea6:	4622      	mov	r2, r4
 8000ea8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000eac:	4650      	mov	r0, sl
 8000eae:	f001 fb4b 	bl	8002548 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_GSM_GPIO_Port, RESET_GSM_Pin, GPIO_PIN_SET);
 8000eb2:	4f1b      	ldr	r7, [pc, #108]	; (8000f20 <MX_GPIO_Init+0xd8>)
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000eba:	4638      	mov	r0, r7
 8000ebc:	f001 fb44 	bl	8002548 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DS18B20_GPIO_Port, DS18B20_Pin, GPIO_PIN_RESET);
 8000ec0:	4e18      	ldr	r6, [pc, #96]	; (8000f24 <MX_GPIO_Init+0xdc>)
 8000ec2:	4622      	mov	r2, r4
 8000ec4:	2180      	movs	r1, #128	; 0x80
 8000ec6:	4630      	mov	r0, r6
 8000ec8:	f001 fb3e 	bl	8002548 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000ecc:	f44f 5900 	mov.w	r9, #8192	; 0x2000
 8000ed0:	f8cd 9010 	str.w	r9, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed4:	2501      	movs	r5, #1
 8000ed6:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed8:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eda:	f04f 0802 	mov.w	r8, #2
 8000ede:	f8cd 801c 	str.w	r8, [sp, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000ee2:	a904      	add	r1, sp, #16
 8000ee4:	4650      	mov	r0, sl
 8000ee6:	f001 f9f5 	bl	80022d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RESET_GSM_Pin;
 8000eea:	f8cd 9010 	str.w	r9, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eee:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef0:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef2:	f8cd 801c 	str.w	r8, [sp, #28]
  HAL_GPIO_Init(RESET_GSM_GPIO_Port, &GPIO_InitStruct);
 8000ef6:	a904      	add	r1, sp, #16
 8000ef8:	4638      	mov	r0, r7
 8000efa:	f001 f9eb 	bl	80022d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DS18B20_Pin;
 8000efe:	2380      	movs	r3, #128	; 0x80
 8000f00:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f02:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f04:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f06:	2303      	movs	r3, #3
 8000f08:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(DS18B20_GPIO_Port, &GPIO_InitStruct);
 8000f0a:	a904      	add	r1, sp, #16
 8000f0c:	4630      	mov	r0, r6
 8000f0e:	f001 f9e1 	bl	80022d4 <HAL_GPIO_Init>

}
 8000f12:	b008      	add	sp, #32
 8000f14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f18:	40021000 	.word	0x40021000
 8000f1c:	40011000 	.word	0x40011000
 8000f20:	40010800 	.word	0x40010800
 8000f24:	40010c00 	.word	0x40010c00

08000f28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f28:	b500      	push	{lr}
 8000f2a:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	930c      	str	r3, [sp, #48]	; 0x30
 8000f30:	930d      	str	r3, [sp, #52]	; 0x34
 8000f32:	930f      	str	r3, [sp, #60]	; 0x3c
 8000f34:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f36:	9305      	str	r3, [sp, #20]
 8000f38:	9306      	str	r3, [sp, #24]
 8000f3a:	9307      	str	r3, [sp, #28]
 8000f3c:	9308      	str	r3, [sp, #32]
 8000f3e:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f40:	9301      	str	r3, [sp, #4]
 8000f42:	9302      	str	r3, [sp, #8]
 8000f44:	9303      	str	r3, [sp, #12]
 8000f46:	9304      	str	r3, [sp, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f48:	2201      	movs	r2, #1
 8000f4a:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f4c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f50:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f52:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f54:	2202      	movs	r2, #2
 8000f56:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f58:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000f5a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000f5e:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f60:	a80a      	add	r0, sp, #40	; 0x28
 8000f62:	f002 fb13 	bl	800358c <HAL_RCC_OscConfig>
 8000f66:	b9c0      	cbnz	r0, 8000f9a <SystemClock_Config+0x72>
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f68:	230f      	movs	r3, #15
 8000f6a:	9305      	str	r3, [sp, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f6c:	2102      	movs	r1, #2
 8000f6e:	9106      	str	r1, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f70:	2300      	movs	r3, #0
 8000f72:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f78:	9208      	str	r2, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f7a:	9309      	str	r3, [sp, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f7c:	a805      	add	r0, sp, #20
 8000f7e:	f002 fd53 	bl	8003a28 <HAL_RCC_ClockConfig>
 8000f82:	b960      	cbnz	r0, 8000f9e <SystemClock_Config+0x76>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000f84:	2310      	movs	r3, #16
 8000f86:	9301      	str	r3, [sp, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	9304      	str	r3, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f8c:	a801      	add	r0, sp, #4
 8000f8e:	f002 fe23 	bl	8003bd8 <HAL_RCCEx_PeriphCLKConfig>
 8000f92:	b930      	cbnz	r0, 8000fa2 <SystemClock_Config+0x7a>
  {
    Error_Handler();
  }
}
 8000f94:	b015      	add	sp, #84	; 0x54
 8000f96:	f85d fb04 	ldr.w	pc, [sp], #4
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f9a:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f9c:	e7fe      	b.n	8000f9c <SystemClock_Config+0x74>
 8000f9e:	b672      	cpsid	i
 8000fa0:	e7fe      	b.n	8000fa0 <SystemClock_Config+0x78>
 8000fa2:	b672      	cpsid	i
 8000fa4:	e7fe      	b.n	8000fa4 <SystemClock_Config+0x7c>
	...

08000fa8 <HAL_UART_RxCpltCallback>:
{
 8000fa8:	b508      	push	{r3, lr}
	if(huart->Instance == USART1)
 8000faa:	6802      	ldr	r2, [r0, #0]
 8000fac:	4b0d      	ldr	r3, [pc, #52]	; (8000fe4 <HAL_UART_RxCpltCallback+0x3c>)
 8000fae:	429a      	cmp	r2, r3
 8000fb0:	d000      	beq.n	8000fb4 <HAL_UART_RxCpltCallback+0xc>
}
 8000fb2:	bd08      	pop	{r3, pc}
		if(ReceiveTmp != 0xd)
 8000fb4:	4b0c      	ldr	r3, [pc, #48]	; (8000fe8 <HAL_UART_RxCpltCallback+0x40>)
 8000fb6:	7819      	ldrb	r1, [r3, #0]
 8000fb8:	290d      	cmp	r1, #13
 8000fba:	d105      	bne.n	8000fc8 <HAL_UART_RxCpltCallback+0x20>
		HAL_UART_Receive_IT(&huart1, &ReceiveTmp, 1);
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	490a      	ldr	r1, [pc, #40]	; (8000fe8 <HAL_UART_RxCpltCallback+0x40>)
 8000fc0:	480a      	ldr	r0, [pc, #40]	; (8000fec <HAL_UART_RxCpltCallback+0x44>)
 8000fc2:	f003 fcc0 	bl	8004946 <HAL_UART_Receive_IT>
}
 8000fc6:	e7f4      	b.n	8000fb2 <HAL_UART_RxCpltCallback+0xa>
			if (RB_OK == Ring_Buffer_Write(&ReceiveBuffer, ReceiveTmp))
 8000fc8:	4809      	ldr	r0, [pc, #36]	; (8000ff0 <HAL_UART_RxCpltCallback+0x48>)
 8000fca:	f000 fcb4 	bl	8001936 <Ring_Buffer_Write>
 8000fce:	2800      	cmp	r0, #0
 8000fd0:	d1f4      	bne.n	8000fbc <HAL_UART_RxCpltCallback+0x14>
				if(ReceiveTmp == ENDLINE)
 8000fd2:	4b05      	ldr	r3, [pc, #20]	; (8000fe8 <HAL_UART_RxCpltCallback+0x40>)
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	2b0a      	cmp	r3, #10
 8000fd8:	d1f0      	bne.n	8000fbc <HAL_UART_RxCpltCallback+0x14>
					LineCounter++;
 8000fda:	4a06      	ldr	r2, [pc, #24]	; (8000ff4 <HAL_UART_RxCpltCallback+0x4c>)
 8000fdc:	7813      	ldrb	r3, [r2, #0]
 8000fde:	3301      	adds	r3, #1
 8000fe0:	7013      	strb	r3, [r2, #0]
 8000fe2:	e7eb      	b.n	8000fbc <HAL_UART_RxCpltCallback+0x14>
 8000fe4:	40013800 	.word	0x40013800
 8000fe8:	20001328 	.word	0x20001328
 8000fec:	200016e4 	.word	0x200016e4
 8000ff0:	20001124 	.word	0x20001124
 8000ff4:	20001120 	.word	0x20001120

08000ff8 <HAL_UART_TxCpltCallback>:
	*Uart1isBusyPtr = 0;
 8000ff8:	4b02      	ldr	r3, [pc, #8]	; (8001004 <HAL_UART_TxCpltCallback+0xc>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	701a      	strb	r2, [r3, #0]
}
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	20000090 	.word	0x20000090

08001008 <HAL_TIM_PeriodElapsedCallback>:
	if(htim->Instance == TIM3)
 8001008:	6802      	ldr	r2, [r0, #0]
 800100a:	4b2e      	ldr	r3, [pc, #184]	; (80010c4 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800100c:	429a      	cmp	r2, r3
 800100e:	d000      	beq.n	8001012 <HAL_TIM_PeriodElapsedCallback+0xa>
 8001010:	4770      	bx	lr
{
 8001012:	b510      	push	{r4, lr}
 8001014:	b090      	sub	sp, #64	; 0x40
		timPeriodCounter++;
 8001016:	4a2c      	ldr	r2, [pc, #176]	; (80010c8 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001018:	7813      	ldrb	r3, [r2, #0]
 800101a:	3301      	adds	r3, #1
 800101c:	7013      	strb	r3, [r2, #0]
		Temperature100ToString(temperature, TemperatureString);
 800101e:	ac06      	add	r4, sp, #24
 8001020:	4621      	mov	r1, r4
 8001022:	4b2a      	ldr	r3, [pc, #168]	; (80010cc <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001024:	6818      	ldr	r0, [r3, #0]
 8001026:	f000 fe93 	bl	8001d50 <Temperature100ToString>
		sprintf(OneSample, "%.2u/%.2u/%.2u,%.2u:%.2u:%.2u,%s\n", year, month, day, hour, minute, second, TemperatureString);
 800102a:	9404      	str	r4, [sp, #16]
 800102c:	4b28      	ldr	r3, [pc, #160]	; (80010d0 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	9303      	str	r3, [sp, #12]
 8001032:	4b28      	ldr	r3, [pc, #160]	; (80010d4 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	9302      	str	r3, [sp, #8]
 8001038:	4b27      	ldr	r3, [pc, #156]	; (80010d8 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	9301      	str	r3, [sp, #4]
 800103e:	4b27      	ldr	r3, [pc, #156]	; (80010dc <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	9300      	str	r3, [sp, #0]
 8001044:	4b26      	ldr	r3, [pc, #152]	; (80010e0 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	4a26      	ldr	r2, [pc, #152]	; (80010e4 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 800104a:	7812      	ldrb	r2, [r2, #0]
 800104c:	4926      	ldr	r1, [pc, #152]	; (80010e8 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800104e:	a808      	add	r0, sp, #32
 8001050:	f006 f8f4 	bl	800723c <siprintf>
		if(FTPMessageBoxRecordSwitch == 1)
 8001054:	4b25      	ldr	r3, [pc, #148]	; (80010ec <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	2b01      	cmp	r3, #1
 800105a:	d007      	beq.n	800106c <HAL_TIM_PeriodElapsedCallback+0x64>
		else if(FTPMessageBoxRecordSwitch == 2)
 800105c:	2b02      	cmp	r3, #2
 800105e:	d017      	beq.n	8001090 <HAL_TIM_PeriodElapsedCallback+0x88>
		if(timPeriodCounter == 42)
 8001060:	4b19      	ldr	r3, [pc, #100]	; (80010c8 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	2b2a      	cmp	r3, #42	; 0x2a
 8001066:	d025      	beq.n	80010b4 <HAL_TIM_PeriodElapsedCallback+0xac>
}
 8001068:	b010      	add	sp, #64	; 0x40
 800106a:	bd10      	pop	{r4, pc}
			strcat(FTPMessageBox1, OneSample);
 800106c:	a908      	add	r1, sp, #32
 800106e:	4820      	ldr	r0, [pc, #128]	; (80010f0 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001070:	f006 f904 	bl	800727c <strcat>
		if(timPeriodCounter == 42)
 8001074:	4b14      	ldr	r3, [pc, #80]	; (80010c8 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	2b2a      	cmp	r3, #42	; 0x2a
 800107a:	d1f5      	bne.n	8001068 <HAL_TIM_PeriodElapsedCallback+0x60>
			SMSUartTxState = FTPMsgWrite;
 800107c:	4b1d      	ldr	r3, [pc, #116]	; (80010f4 <HAL_TIM_PeriodElapsedCallback+0xec>)
 800107e:	2203      	movs	r2, #3
 8001080:	701a      	strb	r2, [r3, #0]
				FTPMessageBox2[0] = '\0';
 8001082:	4b1d      	ldr	r3, [pc, #116]	; (80010f8 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001084:	2200      	movs	r2, #0
 8001086:	701a      	strb	r2, [r3, #0]
				FTPMessageBoxRecordSwitch = 2;
 8001088:	4b18      	ldr	r3, [pc, #96]	; (80010ec <HAL_TIM_PeriodElapsedCallback+0xe4>)
 800108a:	2202      	movs	r2, #2
 800108c:	701a      	strb	r2, [r3, #0]
 800108e:	e014      	b.n	80010ba <HAL_TIM_PeriodElapsedCallback+0xb2>
			strcat(FTPMessageBox2, OneSample);
 8001090:	a908      	add	r1, sp, #32
 8001092:	4819      	ldr	r0, [pc, #100]	; (80010f8 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001094:	f006 f8f2 	bl	800727c <strcat>
		if(timPeriodCounter == 42)
 8001098:	4b0b      	ldr	r3, [pc, #44]	; (80010c8 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	2b2a      	cmp	r3, #42	; 0x2a
 800109e:	d1e3      	bne.n	8001068 <HAL_TIM_PeriodElapsedCallback+0x60>
			SMSUartTxState = FTPMsgWrite;
 80010a0:	4b14      	ldr	r3, [pc, #80]	; (80010f4 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80010a2:	2203      	movs	r2, #3
 80010a4:	701a      	strb	r2, [r3, #0]
				FTPMessageBox1[0] = '\0';
 80010a6:	4b12      	ldr	r3, [pc, #72]	; (80010f0 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	701a      	strb	r2, [r3, #0]
				FTPMessageBoxRecordSwitch = 1;
 80010ac:	4b0f      	ldr	r3, [pc, #60]	; (80010ec <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80010ae:	2201      	movs	r2, #1
 80010b0:	701a      	strb	r2, [r3, #0]
 80010b2:	e002      	b.n	80010ba <HAL_TIM_PeriodElapsedCallback+0xb2>
			SMSUartTxState = FTPMsgWrite;
 80010b4:	4b0f      	ldr	r3, [pc, #60]	; (80010f4 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80010b6:	2203      	movs	r2, #3
 80010b8:	701a      	strb	r2, [r3, #0]
			timPeriodCounter = 0;
 80010ba:	4b03      	ldr	r3, [pc, #12]	; (80010c8 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80010bc:	2200      	movs	r2, #0
 80010be:	701a      	strb	r2, [r3, #0]
}
 80010c0:	e7d2      	b.n	8001068 <HAL_TIM_PeriodElapsedCallback+0x60>
 80010c2:	bf00      	nop
 80010c4:	40000400 	.word	0x40000400
 80010c8:	2000164c 	.word	0x2000164c
 80010cc:	20001648 	.word	0x20001648
 80010d0:	20001643 	.word	0x20001643
 80010d4:	20001641 	.word	0x20001641
 80010d8:	20001640 	.word	0x20001640
 80010dc:	20001636 	.word	0x20001636
 80010e0:	20001642 	.word	0x20001642
 80010e4:	2000164d 	.word	0x2000164d
 80010e8:	0800aeb8 	.word	0x0800aeb8
 80010ec:	20000000 	.word	0x20000000
 80010f0:	2000049c 	.word	0x2000049c
 80010f4:	2000142b 	.word	0x2000142b
 80010f8:	200009d0 	.word	0x200009d0

080010fc <CommStateMachineTask>:
	  if(Uart1isBusy == 0 && HAL_GetTick() - LastTickForSim800 >= inquiryTimeVar)
 80010fc:	4b93      	ldr	r3, [pc, #588]	; (800134c <CommStateMachineTask+0x250>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	b103      	cbz	r3, 8001104 <CommStateMachineTask+0x8>
 8001102:	4770      	bx	lr
{
 8001104:	b530      	push	{r4, r5, lr}
 8001106:	b087      	sub	sp, #28
 8001108:	2400      	movs	r4, #0
	  if(Uart1isBusy == 0 && HAL_GetTick() - LastTickForSim800 >= inquiryTimeVar)
 800110a:	f000 feb3 	bl	8001e74 <HAL_GetTick>
 800110e:	4b90      	ldr	r3, [pc, #576]	; (8001350 <CommStateMachineTask+0x254>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	1ac0      	subs	r0, r0, r3
 8001114:	4b8f      	ldr	r3, [pc, #572]	; (8001354 <CommStateMachineTask+0x258>)
 8001116:	881b      	ldrh	r3, [r3, #0]
 8001118:	4298      	cmp	r0, r3
 800111a:	d201      	bcs.n	8001120 <CommStateMachineTask+0x24>
}
 800111c:	b007      	add	sp, #28
 800111e:	bd30      	pop	{r4, r5, pc}
	  	{LastTickForSim800 = HAL_GetTick();
 8001120:	f000 fea8 	bl	8001e74 <HAL_GetTick>
 8001124:	4b8a      	ldr	r3, [pc, #552]	; (8001350 <CommStateMachineTask+0x254>)
 8001126:	6018      	str	r0, [r3, #0]
	  		if(SMSUartTxState == Control)
 8001128:	4b8b      	ldr	r3, [pc, #556]	; (8001358 <CommStateMachineTask+0x25c>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	2b01      	cmp	r3, #1
 800112e:	d00d      	beq.n	800114c <CommStateMachineTask+0x50>
	  		else if(SMSUartTxState == SMSMsgWrite)
 8001130:	2b02      	cmp	r3, #2
 8001132:	d02b      	beq.n	800118c <CommStateMachineTask+0x90>
	  		else if(SMSUartTxState == Config)
 8001134:	2b00      	cmp	r3, #0
 8001136:	f040 808a 	bne.w	800124e <CommStateMachineTask+0x152>
	  			switch(TaskState)
 800113a:	4b88      	ldr	r3, [pc, #544]	; (800135c <CommStateMachineTask+0x260>)
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	2b04      	cmp	r3, #4
 8001140:	d8ec      	bhi.n	800111c <CommStateMachineTask+0x20>
 8001142:	e8df f003 	tbb	[pc, r3]
 8001146:	655e      	.short	0x655e
 8001148:	736c      	.short	0x736c
 800114a:	7a          	.byte	0x7a
 800114b:	00          	.byte	0x00
	  			switch(TaskState)
 800114c:	4b84      	ldr	r3, [pc, #528]	; (8001360 <CommStateMachineTask+0x264>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	2b01      	cmp	r3, #1
 8001152:	d00a      	beq.n	800116a <CommStateMachineTask+0x6e>
 8001154:	2b02      	cmp	r3, #2
 8001156:	d00f      	beq.n	8001178 <CommStateMachineTask+0x7c>
 8001158:	2b00      	cmp	r3, #0
 800115a:	d1df      	bne.n	800111c <CommStateMachineTask+0x20>
	  				UartSend("AT+CSQ\r\n");
 800115c:	4881      	ldr	r0, [pc, #516]	; (8001364 <CommStateMachineTask+0x268>)
 800115e:	f000 fdcd 	bl	8001cfc <UartSend>
	  				TaskState = 1;
 8001162:	4b7f      	ldr	r3, [pc, #508]	; (8001360 <CommStateMachineTask+0x264>)
 8001164:	2201      	movs	r2, #1
 8001166:	701a      	strb	r2, [r3, #0]
	  				break;
 8001168:	e7d8      	b.n	800111c <CommStateMachineTask+0x20>
	  				UartSend("AT+CREG?\r\n");
 800116a:	487f      	ldr	r0, [pc, #508]	; (8001368 <CommStateMachineTask+0x26c>)
 800116c:	f000 fdc6 	bl	8001cfc <UartSend>
	  				TaskState = 2;
 8001170:	4b7b      	ldr	r3, [pc, #492]	; (8001360 <CommStateMachineTask+0x264>)
 8001172:	2202      	movs	r2, #2
 8001174:	701a      	strb	r2, [r3, #0]
	  				break;
 8001176:	e7d1      	b.n	800111c <CommStateMachineTask+0x20>
	  				UartSend("AT+CCLK?\r\n");
 8001178:	487c      	ldr	r0, [pc, #496]	; (800136c <CommStateMachineTask+0x270>)
 800117a:	f000 fdbf 	bl	8001cfc <UartSend>
	  				TaskState = 0;
 800117e:	4b78      	ldr	r3, [pc, #480]	; (8001360 <CommStateMachineTask+0x264>)
 8001180:	2200      	movs	r2, #0
 8001182:	701a      	strb	r2, [r3, #0]
	  				SMSUartTxState = Control;
 8001184:	4b74      	ldr	r3, [pc, #464]	; (8001358 <CommStateMachineTask+0x25c>)
 8001186:	2201      	movs	r2, #1
 8001188:	701a      	strb	r2, [r3, #0]
	  				break;
 800118a:	e7c7      	b.n	800111c <CommStateMachineTask+0x20>
	  			switch(TaskState)
 800118c:	4b78      	ldr	r3, [pc, #480]	; (8001370 <CommStateMachineTask+0x274>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	2b03      	cmp	r3, #3
 8001192:	d8c3      	bhi.n	800111c <CommStateMachineTask+0x20>
 8001194:	e8df f003 	tbb	[pc, r3]
 8001198:	2d1e0d02 	.word	0x2d1e0d02
	  				UartSendWoRxCtrl("AT+CMGS=\"+48885447216\"\r\n");
 800119c:	4875      	ldr	r0, [pc, #468]	; (8001374 <CommStateMachineTask+0x278>)
 800119e:	f000 fdc5 	bl	8001d2c <UartSendWoRxCtrl>
	  				inquiryTimeVar = 2000;
 80011a2:	4b6c      	ldr	r3, [pc, #432]	; (8001354 <CommStateMachineTask+0x258>)
 80011a4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80011a8:	801a      	strh	r2, [r3, #0]
	  				TaskState = 1;
 80011aa:	4b71      	ldr	r3, [pc, #452]	; (8001370 <CommStateMachineTask+0x274>)
 80011ac:	2201      	movs	r2, #1
 80011ae:	701a      	strb	r2, [r3, #0]
	  				break;
 80011b0:	e7b4      	b.n	800111c <CommStateMachineTask+0x20>
	  				HAL_UART_Transmit_IT(&huart1, (uint8_t*) SMSMessage, strlen(SMSMessage));
 80011b2:	4c71      	ldr	r4, [pc, #452]	; (8001378 <CommStateMachineTask+0x27c>)
 80011b4:	4620      	mov	r0, r4
 80011b6:	f7fe ffd5 	bl	8000164 <strlen>
 80011ba:	b282      	uxth	r2, r0
 80011bc:	4621      	mov	r1, r4
 80011be:	486f      	ldr	r0, [pc, #444]	; (800137c <CommStateMachineTask+0x280>)
 80011c0:	f003 f9d3 	bl	800456a <HAL_UART_Transmit_IT>
	  				*Uart1isBusyPtr = 1;
 80011c4:	4b6e      	ldr	r3, [pc, #440]	; (8001380 <CommStateMachineTask+0x284>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	2201      	movs	r2, #1
 80011ca:	701a      	strb	r2, [r3, #0]
	  				TaskState = 2;
 80011cc:	4b68      	ldr	r3, [pc, #416]	; (8001370 <CommStateMachineTask+0x274>)
 80011ce:	2202      	movs	r2, #2
 80011d0:	701a      	strb	r2, [r3, #0]
	  				break;
 80011d2:	e7a3      	b.n	800111c <CommStateMachineTask+0x20>
	  				HAL_UART_Transmit_IT(&huart1, (uint8_t*) &ctrlZ, 1);
 80011d4:	2201      	movs	r2, #1
 80011d6:	496b      	ldr	r1, [pc, #428]	; (8001384 <CommStateMachineTask+0x288>)
 80011d8:	4868      	ldr	r0, [pc, #416]	; (800137c <CommStateMachineTask+0x280>)
 80011da:	f003 f9c6 	bl	800456a <HAL_UART_Transmit_IT>
	  				*Uart1isBusyPtr = 1;
 80011de:	4b68      	ldr	r3, [pc, #416]	; (8001380 <CommStateMachineTask+0x284>)
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	2301      	movs	r3, #1
 80011e4:	7013      	strb	r3, [r2, #0]
	  				TaskState = 3;
 80011e6:	4a62      	ldr	r2, [pc, #392]	; (8001370 <CommStateMachineTask+0x274>)
 80011e8:	2103      	movs	r1, #3
 80011ea:	7011      	strb	r1, [r2, #0]
	  				SMSUartTxState = Control;
 80011ec:	4a5a      	ldr	r2, [pc, #360]	; (8001358 <CommStateMachineTask+0x25c>)
 80011ee:	7013      	strb	r3, [r2, #0]
	  				break;
 80011f0:	e794      	b.n	800111c <CommStateMachineTask+0x20>
	  				inquiryTimeVar = INQUIRY_TIME;
 80011f2:	4b58      	ldr	r3, [pc, #352]	; (8001354 <CommStateMachineTask+0x258>)
 80011f4:	f240 22ee 	movw	r2, #750	; 0x2ee
 80011f8:	801a      	strh	r2, [r3, #0]
	  				TaskState = 0;
 80011fa:	4b5d      	ldr	r3, [pc, #372]	; (8001370 <CommStateMachineTask+0x274>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	701a      	strb	r2, [r3, #0]
	  				break;
 8001200:	e78c      	b.n	800111c <CommStateMachineTask+0x20>
	  				UartSend("ATE0\r\n");
 8001202:	4861      	ldr	r0, [pc, #388]	; (8001388 <CommStateMachineTask+0x28c>)
 8001204:	f000 fd7a 	bl	8001cfc <UartSend>
	  				TaskState = 1;
 8001208:	4b54      	ldr	r3, [pc, #336]	; (800135c <CommStateMachineTask+0x260>)
 800120a:	2201      	movs	r2, #1
 800120c:	701a      	strb	r2, [r3, #0]
	  				break;
 800120e:	e785      	b.n	800111c <CommStateMachineTask+0x20>
	  				UartSend("AT+CMGF=1\r\n");
 8001210:	485e      	ldr	r0, [pc, #376]	; (800138c <CommStateMachineTask+0x290>)
 8001212:	f000 fd73 	bl	8001cfc <UartSend>
	  				TaskState = 2;
 8001216:	4b51      	ldr	r3, [pc, #324]	; (800135c <CommStateMachineTask+0x260>)
 8001218:	2202      	movs	r2, #2
 800121a:	701a      	strb	r2, [r3, #0]
	  				break;
 800121c:	e77e      	b.n	800111c <CommStateMachineTask+0x20>
	  				UartSend("AT+CLTS=1\r\n");
 800121e:	485c      	ldr	r0, [pc, #368]	; (8001390 <CommStateMachineTask+0x294>)
 8001220:	f000 fd6c 	bl	8001cfc <UartSend>
	  				TaskState = 3;
 8001224:	4b4d      	ldr	r3, [pc, #308]	; (800135c <CommStateMachineTask+0x260>)
 8001226:	2203      	movs	r2, #3
 8001228:	701a      	strb	r2, [r3, #0]
	  				break;
 800122a:	e777      	b.n	800111c <CommStateMachineTask+0x20>
	  				UartSend("AT+CNMI=2,2,0,0,0\r\n");
 800122c:	4859      	ldr	r0, [pc, #356]	; (8001394 <CommStateMachineTask+0x298>)
 800122e:	f000 fd65 	bl	8001cfc <UartSend>
	  				TaskState = 4;
 8001232:	4b4a      	ldr	r3, [pc, #296]	; (800135c <CommStateMachineTask+0x260>)
 8001234:	2204      	movs	r2, #4
 8001236:	701a      	strb	r2, [r3, #0]
	  				break;
 8001238:	e770      	b.n	800111c <CommStateMachineTask+0x20>
	  				UartSend("AT&W\r\n");
 800123a:	4857      	ldr	r0, [pc, #348]	; (8001398 <CommStateMachineTask+0x29c>)
 800123c:	f000 fd5e 	bl	8001cfc <UartSend>
	  				TaskState = 0;
 8001240:	4b46      	ldr	r3, [pc, #280]	; (800135c <CommStateMachineTask+0x260>)
 8001242:	2200      	movs	r2, #0
 8001244:	701a      	strb	r2, [r3, #0]
	  				SMSUartTxState = Control;
 8001246:	4b44      	ldr	r3, [pc, #272]	; (8001358 <CommStateMachineTask+0x25c>)
 8001248:	2201      	movs	r2, #1
 800124a:	701a      	strb	r2, [r3, #0]
	  				break;
 800124c:	e766      	b.n	800111c <CommStateMachineTask+0x20>
	  		else if(SMSUartTxState == FTPMsgWrite)
 800124e:	2b03      	cmp	r3, #3
 8001250:	f47f af64 	bne.w	800111c <CommStateMachineTask+0x20>
	  			inquiryTimeVar = INQUIRY_TIME;
 8001254:	4b3f      	ldr	r3, [pc, #252]	; (8001354 <CommStateMachineTask+0x258>)
 8001256:	f240 22ee 	movw	r2, #750	; 0x2ee
 800125a:	801a      	strh	r2, [r3, #0]
	  			switch(TaskState)
 800125c:	4b4f      	ldr	r3, [pc, #316]	; (800139c <CommStateMachineTask+0x2a0>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	2b0f      	cmp	r3, #15
 8001262:	f63f af5b 	bhi.w	800111c <CommStateMachineTask+0x20>
 8001266:	e8df f013 	tbh	[pc, r3, lsl #1]
 800126a:	0010      	.short	0x0010
 800126c:	001e0017 	.word	0x001e0017
 8001270:	00380029 	.word	0x00380029
 8001274:	004a0043 	.word	0x004a0043
 8001278:	00640057 	.word	0x00640057
 800127c:	00d500b7 	.word	0x00d500b7
 8001280:	00ed00e2 	.word	0x00ed00e2
 8001284:	011c010a 	.word	0x011c010a
 8001288:	0123      	.short	0x0123
	  				UartSend("AT+SAPBR=3,1,\"Contype\",\"GPRS\"\r\n");
 800128a:	4845      	ldr	r0, [pc, #276]	; (80013a0 <CommStateMachineTask+0x2a4>)
 800128c:	f000 fd36 	bl	8001cfc <UartSend>
	  				TaskState = 1;
 8001290:	4b42      	ldr	r3, [pc, #264]	; (800139c <CommStateMachineTask+0x2a0>)
 8001292:	2201      	movs	r2, #1
 8001294:	701a      	strb	r2, [r3, #0]
	  				break;
 8001296:	e741      	b.n	800111c <CommStateMachineTask+0x20>
	  				UartSend("AT+SAPBR=3,1,\"APN\",\"plus\"\r\n");
 8001298:	4842      	ldr	r0, [pc, #264]	; (80013a4 <CommStateMachineTask+0x2a8>)
 800129a:	f000 fd2f 	bl	8001cfc <UartSend>
	  				TaskState = 2;
 800129e:	4b3f      	ldr	r3, [pc, #252]	; (800139c <CommStateMachineTask+0x2a0>)
 80012a0:	2202      	movs	r2, #2
 80012a2:	701a      	strb	r2, [r3, #0]
	  				break;
 80012a4:	e73a      	b.n	800111c <CommStateMachineTask+0x20>
	  				UartSend("AT+SAPBR=1,1\r\n");
 80012a6:	4840      	ldr	r0, [pc, #256]	; (80013a8 <CommStateMachineTask+0x2ac>)
 80012a8:	f000 fd28 	bl	8001cfc <UartSend>
	  				inquiryTimeVar = 5000;
 80012ac:	4b29      	ldr	r3, [pc, #164]	; (8001354 <CommStateMachineTask+0x258>)
 80012ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80012b2:	801a      	strh	r2, [r3, #0]
	  				TaskState = 3;
 80012b4:	4b39      	ldr	r3, [pc, #228]	; (800139c <CommStateMachineTask+0x2a0>)
 80012b6:	2203      	movs	r2, #3
 80012b8:	701a      	strb	r2, [r3, #0]
	  				break;
 80012ba:	e72f      	b.n	800111c <CommStateMachineTask+0x20>
	  				if(GSM.ReceivedState == 1)
 80012bc:	4b3b      	ldr	r3, [pc, #236]	; (80013ac <CommStateMachineTask+0x2b0>)
 80012be:	7a1b      	ldrb	r3, [r3, #8]
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d103      	bne.n	80012cc <CommStateMachineTask+0x1d0>
	  					TaskState = 4;
 80012c4:	4b35      	ldr	r3, [pc, #212]	; (800139c <CommStateMachineTask+0x2a0>)
 80012c6:	2204      	movs	r2, #4
 80012c8:	701a      	strb	r2, [r3, #0]
 80012ca:	e727      	b.n	800111c <CommStateMachineTask+0x20>
	  					TaskState = 0;
 80012cc:	4b33      	ldr	r3, [pc, #204]	; (800139c <CommStateMachineTask+0x2a0>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	701a      	strb	r2, [r3, #0]
	  					UartSend("AT+SAPBR=0,1\r\n");
 80012d2:	4837      	ldr	r0, [pc, #220]	; (80013b0 <CommStateMachineTask+0x2b4>)
 80012d4:	f000 fd12 	bl	8001cfc <UartSend>
 80012d8:	e720      	b.n	800111c <CommStateMachineTask+0x20>
	  				UartSend("AT+SAPBR=2,1\r\n");
 80012da:	4836      	ldr	r0, [pc, #216]	; (80013b4 <CommStateMachineTask+0x2b8>)
 80012dc:	f000 fd0e 	bl	8001cfc <UartSend>
	  				inquiryTimeVar = INQUIRY_TIME;
 80012e0:	4b1c      	ldr	r3, [pc, #112]	; (8001354 <CommStateMachineTask+0x258>)
 80012e2:	f240 22ee 	movw	r2, #750	; 0x2ee
 80012e6:	801a      	strh	r2, [r3, #0]
	  				TaskState = 5;
 80012e8:	4b2c      	ldr	r3, [pc, #176]	; (800139c <CommStateMachineTask+0x2a0>)
 80012ea:	2205      	movs	r2, #5
 80012ec:	701a      	strb	r2, [r3, #0]
	  				break;
 80012ee:	e715      	b.n	800111c <CommStateMachineTask+0x20>
	  				UartSend("AT+FTPCID=1\r\n");
 80012f0:	4831      	ldr	r0, [pc, #196]	; (80013b8 <CommStateMachineTask+0x2bc>)
 80012f2:	f000 fd03 	bl	8001cfc <UartSend>
	  				TaskState = 6;
 80012f6:	4b29      	ldr	r3, [pc, #164]	; (800139c <CommStateMachineTask+0x2a0>)
 80012f8:	2206      	movs	r2, #6
 80012fa:	701a      	strb	r2, [r3, #0]
	  				break;
 80012fc:	e70e      	b.n	800111c <CommStateMachineTask+0x20>
	  				sprintf(ATcmdFtp, "AT+FTPSERV=\"%s\"\r\n", GSM.ConfigFlash.server);
 80012fe:	4c2f      	ldr	r4, [pc, #188]	; (80013bc <CommStateMachineTask+0x2c0>)
 8001300:	4a2f      	ldr	r2, [pc, #188]	; (80013c0 <CommStateMachineTask+0x2c4>)
 8001302:	4930      	ldr	r1, [pc, #192]	; (80013c4 <CommStateMachineTask+0x2c8>)
 8001304:	4620      	mov	r0, r4
 8001306:	f005 ff99 	bl	800723c <siprintf>
	  				UartSend(ATcmdFtp);
 800130a:	4620      	mov	r0, r4
 800130c:	f000 fcf6 	bl	8001cfc <UartSend>
	  				TaskState = 7;
 8001310:	4b22      	ldr	r3, [pc, #136]	; (800139c <CommStateMachineTask+0x2a0>)
 8001312:	2207      	movs	r2, #7
 8001314:	701a      	strb	r2, [r3, #0]
	  				break;
 8001316:	e701      	b.n	800111c <CommStateMachineTask+0x20>
	  				sprintf(ATcmdFtp, "AT+FTPUN=\"%s\"\r\n", GSM.ConfigFlash.login);
 8001318:	4c28      	ldr	r4, [pc, #160]	; (80013bc <CommStateMachineTask+0x2c0>)
 800131a:	4a2b      	ldr	r2, [pc, #172]	; (80013c8 <CommStateMachineTask+0x2cc>)
 800131c:	492b      	ldr	r1, [pc, #172]	; (80013cc <CommStateMachineTask+0x2d0>)
 800131e:	4620      	mov	r0, r4
 8001320:	f005 ff8c 	bl	800723c <siprintf>
	  				UartSend(ATcmdFtp);
 8001324:	4620      	mov	r0, r4
 8001326:	f000 fce9 	bl	8001cfc <UartSend>
	  				TaskState = 8;
 800132a:	4b1c      	ldr	r3, [pc, #112]	; (800139c <CommStateMachineTask+0x2a0>)
 800132c:	2208      	movs	r2, #8
 800132e:	701a      	strb	r2, [r3, #0]
	  				break;
 8001330:	e6f4      	b.n	800111c <CommStateMachineTask+0x20>
	  				sprintf(ATcmdFtp, "AT+FTPPW=\"%s\"\r\n", GSM.ConfigFlash.password);
 8001332:	4c22      	ldr	r4, [pc, #136]	; (80013bc <CommStateMachineTask+0x2c0>)
 8001334:	4a26      	ldr	r2, [pc, #152]	; (80013d0 <CommStateMachineTask+0x2d4>)
 8001336:	4927      	ldr	r1, [pc, #156]	; (80013d4 <CommStateMachineTask+0x2d8>)
 8001338:	4620      	mov	r0, r4
 800133a:	f005 ff7f 	bl	800723c <siprintf>
	  				UartSend(ATcmdFtp);
 800133e:	4620      	mov	r0, r4
 8001340:	f000 fcdc 	bl	8001cfc <UartSend>
	  				TaskState = 9;
 8001344:	4b15      	ldr	r3, [pc, #84]	; (800139c <CommStateMachineTask+0x2a0>)
 8001346:	2209      	movs	r2, #9
 8001348:	701a      	strb	r2, [r3, #0]
	  				break;
 800134a:	e6e7      	b.n	800111c <CommStateMachineTask+0x20>
 800134c:	20001635 	.word	0x20001635
 8001350:	20001118 	.word	0x20001118
 8001354:	20000094 	.word	0x20000094
 8001358:	2000142b 	.word	0x2000142b
 800135c:	2000142d 	.word	0x2000142d
 8001360:	2000142f 	.word	0x2000142f
 8001364:	0800aedc 	.word	0x0800aedc
 8001368:	0800aee8 	.word	0x0800aee8
 800136c:	0800aef4 	.word	0x0800aef4
 8001370:	2000142e 	.word	0x2000142e
 8001374:	0800af00 	.word	0x0800af00
 8001378:	20000004 	.word	0x20000004
 800137c:	200016e4 	.word	0x200016e4
 8001380:	20000090 	.word	0x20000090
 8001384:	0800b088 	.word	0x0800b088
 8001388:	0800af1c 	.word	0x0800af1c
 800138c:	0800af24 	.word	0x0800af24
 8001390:	0800af30 	.word	0x0800af30
 8001394:	0800af3c 	.word	0x0800af3c
 8001398:	0800af50 	.word	0x0800af50
 800139c:	2000142c 	.word	0x2000142c
 80013a0:	0800af58 	.word	0x0800af58
 80013a4:	0800af78 	.word	0x0800af78
 80013a8:	0800af94 	.word	0x0800af94
 80013ac:	20000f08 	.word	0x20000f08
 80013b0:	0800afa4 	.word	0x0800afa4
 80013b4:	0800afb4 	.word	0x0800afb4
 80013b8:	0800afc4 	.word	0x0800afc4
 80013bc:	2000041c 	.word	0x2000041c
 80013c0:	20000f50 	.word	0x20000f50
 80013c4:	0800afd4 	.word	0x0800afd4
 80013c8:	20000f14 	.word	0x20000f14
 80013cc:	0800afe8 	.word	0x0800afe8
 80013d0:	20000f32 	.word	0x20000f32
 80013d4:	0800aff8 	.word	0x0800aff8
	  				sprintf(ATcmdFtp, "AT+FTPPUTNAME=\"%s%.2u%.2u%.2u%.2u%.2u%.2u.txt\"\r\n",GSM.ConfigFlash.deviceNumber, year, month, day, hour, minute, second);
 80013d8:	4c3c      	ldr	r4, [pc, #240]	; (80014cc <CommStateMachineTask+0x3d0>)
 80013da:	4b3d      	ldr	r3, [pc, #244]	; (80014d0 <CommStateMachineTask+0x3d4>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	9304      	str	r3, [sp, #16]
 80013e0:	4b3c      	ldr	r3, [pc, #240]	; (80014d4 <CommStateMachineTask+0x3d8>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	9303      	str	r3, [sp, #12]
 80013e6:	4b3c      	ldr	r3, [pc, #240]	; (80014d8 <CommStateMachineTask+0x3dc>)
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	9302      	str	r3, [sp, #8]
 80013ec:	4b3b      	ldr	r3, [pc, #236]	; (80014dc <CommStateMachineTask+0x3e0>)
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	9301      	str	r3, [sp, #4]
 80013f2:	4b3b      	ldr	r3, [pc, #236]	; (80014e0 <CommStateMachineTask+0x3e4>)
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	9300      	str	r3, [sp, #0]
 80013f8:	4b3a      	ldr	r3, [pc, #232]	; (80014e4 <CommStateMachineTask+0x3e8>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	4a3a      	ldr	r2, [pc, #232]	; (80014e8 <CommStateMachineTask+0x3ec>)
 80013fe:	493b      	ldr	r1, [pc, #236]	; (80014ec <CommStateMachineTask+0x3f0>)
 8001400:	4620      	mov	r0, r4
 8001402:	f005 ff1b 	bl	800723c <siprintf>
	  				UartSend(ATcmdFtp);
 8001406:	4620      	mov	r0, r4
 8001408:	f000 fc78 	bl	8001cfc <UartSend>
	  				TaskState = 10;
 800140c:	4b38      	ldr	r3, [pc, #224]	; (80014f0 <CommStateMachineTask+0x3f4>)
 800140e:	220a      	movs	r2, #10
 8001410:	701a      	strb	r2, [r3, #0]
	  				break;
 8001412:	e683      	b.n	800111c <CommStateMachineTask+0x20>
	  				sprintf(ATcmdFtp, "AT+FTPPUTPATH=\"%s\"\r\n", GSM.ConfigFlash.path);
 8001414:	4c2d      	ldr	r4, [pc, #180]	; (80014cc <CommStateMachineTask+0x3d0>)
 8001416:	4a37      	ldr	r2, [pc, #220]	; (80014f4 <CommStateMachineTask+0x3f8>)
 8001418:	4937      	ldr	r1, [pc, #220]	; (80014f8 <CommStateMachineTask+0x3fc>)
 800141a:	4620      	mov	r0, r4
 800141c:	f005 ff0e 	bl	800723c <siprintf>
	  				UartSend(ATcmdFtp);
 8001420:	4620      	mov	r0, r4
 8001422:	f000 fc6b 	bl	8001cfc <UartSend>
	  				TaskState = 11;
 8001426:	4b32      	ldr	r3, [pc, #200]	; (80014f0 <CommStateMachineTask+0x3f4>)
 8001428:	220b      	movs	r2, #11
 800142a:	701a      	strb	r2, [r3, #0]
	  				break;
 800142c:	e676      	b.n	800111c <CommStateMachineTask+0x20>
	  				UartSend("AT+FTPPUT=1\r\n");
 800142e:	4833      	ldr	r0, [pc, #204]	; (80014fc <CommStateMachineTask+0x400>)
 8001430:	f000 fc64 	bl	8001cfc <UartSend>
	  				inquiryTimeVar = 4000;
 8001434:	4b32      	ldr	r3, [pc, #200]	; (8001500 <CommStateMachineTask+0x404>)
 8001436:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800143a:	801a      	strh	r2, [r3, #0]
	  				TaskState = 12;
 800143c:	4b2c      	ldr	r3, [pc, #176]	; (80014f0 <CommStateMachineTask+0x3f4>)
 800143e:	220c      	movs	r2, #12
 8001440:	701a      	strb	r2, [r3, #0]
	  				break;
 8001442:	e66b      	b.n	800111c <CommStateMachineTask+0x20>
	  				if(FTPMessageBoxRecordSwitch == 2)
 8001444:	4b2f      	ldr	r3, [pc, #188]	; (8001504 <CommStateMachineTask+0x408>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	2b02      	cmp	r3, #2
 800144a:	d00e      	beq.n	800146a <CommStateMachineTask+0x36e>
	  				else if(FTPMessageBoxRecordSwitch == 1)
 800144c:	2b01      	cmp	r3, #1
 800144e:	d011      	beq.n	8001474 <CommStateMachineTask+0x378>
	  				sprintf(ATcmdFtp,"AT+FTPPUT=2,%u\r\n", MsgLen);
 8001450:	4d1e      	ldr	r5, [pc, #120]	; (80014cc <CommStateMachineTask+0x3d0>)
 8001452:	4622      	mov	r2, r4
 8001454:	492c      	ldr	r1, [pc, #176]	; (8001508 <CommStateMachineTask+0x40c>)
 8001456:	4628      	mov	r0, r5
 8001458:	f005 fef0 	bl	800723c <siprintf>
	  				UartSendWoRxCtrl(ATcmdFtp);
 800145c:	4628      	mov	r0, r5
 800145e:	f000 fc65 	bl	8001d2c <UartSendWoRxCtrl>
					TaskState = 13;
 8001462:	4b23      	ldr	r3, [pc, #140]	; (80014f0 <CommStateMachineTask+0x3f4>)
 8001464:	220d      	movs	r2, #13
 8001466:	701a      	strb	r2, [r3, #0]
					break;
 8001468:	e658      	b.n	800111c <CommStateMachineTask+0x20>
	  					MsgLen = strlen(FTPMessageBox1);
 800146a:	4828      	ldr	r0, [pc, #160]	; (800150c <CommStateMachineTask+0x410>)
 800146c:	f7fe fe7a 	bl	8000164 <strlen>
 8001470:	b284      	uxth	r4, r0
 8001472:	e7ed      	b.n	8001450 <CommStateMachineTask+0x354>
	  					MsgLen = strlen(FTPMessageBox2);
 8001474:	4826      	ldr	r0, [pc, #152]	; (8001510 <CommStateMachineTask+0x414>)
 8001476:	f7fe fe75 	bl	8000164 <strlen>
 800147a:	b284      	uxth	r4, r0
 800147c:	e7e8      	b.n	8001450 <CommStateMachineTask+0x354>
	  				if(FTPMessageBoxRecordSwitch == 2)
 800147e:	4b21      	ldr	r3, [pc, #132]	; (8001504 <CommStateMachineTask+0x408>)
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	2b02      	cmp	r3, #2
 8001484:	d005      	beq.n	8001492 <CommStateMachineTask+0x396>
	  				else if(FTPMessageBoxRecordSwitch == 1)
 8001486:	2b01      	cmp	r3, #1
 8001488:	d007      	beq.n	800149a <CommStateMachineTask+0x39e>
	  				TaskState = 14;
 800148a:	4b19      	ldr	r3, [pc, #100]	; (80014f0 <CommStateMachineTask+0x3f4>)
 800148c:	220e      	movs	r2, #14
 800148e:	701a      	strb	r2, [r3, #0]
	  				break;
 8001490:	e644      	b.n	800111c <CommStateMachineTask+0x20>
	  					UartSendWoRxCtrl(FTPMessageBox1);
 8001492:	481e      	ldr	r0, [pc, #120]	; (800150c <CommStateMachineTask+0x410>)
 8001494:	f000 fc4a 	bl	8001d2c <UartSendWoRxCtrl>
 8001498:	e7f7      	b.n	800148a <CommStateMachineTask+0x38e>
	  					UartSendWoRxCtrl(FTPMessageBox2);
 800149a:	481d      	ldr	r0, [pc, #116]	; (8001510 <CommStateMachineTask+0x414>)
 800149c:	f000 fc46 	bl	8001d2c <UartSendWoRxCtrl>
 80014a0:	e7f3      	b.n	800148a <CommStateMachineTask+0x38e>
	  				UartSend("AT+FTPPUT=2,0\r\n");
 80014a2:	481c      	ldr	r0, [pc, #112]	; (8001514 <CommStateMachineTask+0x418>)
 80014a4:	f000 fc2a 	bl	8001cfc <UartSend>
	  				TaskState = 15;
 80014a8:	4b11      	ldr	r3, [pc, #68]	; (80014f0 <CommStateMachineTask+0x3f4>)
 80014aa:	220f      	movs	r2, #15
 80014ac:	701a      	strb	r2, [r3, #0]
	  				break;
 80014ae:	e635      	b.n	800111c <CommStateMachineTask+0x20>
	  				UartSend("AT+SAPBR=0,1\r\n");
 80014b0:	4819      	ldr	r0, [pc, #100]	; (8001518 <CommStateMachineTask+0x41c>)
 80014b2:	f000 fc23 	bl	8001cfc <UartSend>
	  				TaskState = 0;
 80014b6:	4b0e      	ldr	r3, [pc, #56]	; (80014f0 <CommStateMachineTask+0x3f4>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	701a      	strb	r2, [r3, #0]
	  				SMSUartTxState = Control;
 80014bc:	4b17      	ldr	r3, [pc, #92]	; (800151c <CommStateMachineTask+0x420>)
 80014be:	2201      	movs	r2, #1
 80014c0:	701a      	strb	r2, [r3, #0]
	  				inquiryTimeVar = INQUIRY_TIME;
 80014c2:	4b0f      	ldr	r3, [pc, #60]	; (8001500 <CommStateMachineTask+0x404>)
 80014c4:	f240 22ee 	movw	r2, #750	; 0x2ee
 80014c8:	801a      	strh	r2, [r3, #0]
}
 80014ca:	e627      	b.n	800111c <CommStateMachineTask+0x20>
 80014cc:	2000041c 	.word	0x2000041c
 80014d0:	20001643 	.word	0x20001643
 80014d4:	20001641 	.word	0x20001641
 80014d8:	20001640 	.word	0x20001640
 80014dc:	20001636 	.word	0x20001636
 80014e0:	20001642 	.word	0x20001642
 80014e4:	2000164d 	.word	0x2000164d
 80014e8:	20000fce 	.word	0x20000fce
 80014ec:	0800b008 	.word	0x0800b008
 80014f0:	2000142c 	.word	0x2000142c
 80014f4:	20000f82 	.word	0x20000f82
 80014f8:	0800b03c 	.word	0x0800b03c
 80014fc:	0800b054 	.word	0x0800b054
 8001500:	20000094 	.word	0x20000094
 8001504:	20000000 	.word	0x20000000
 8001508:	0800b064 	.word	0x0800b064
 800150c:	2000049c 	.word	0x2000049c
 8001510:	200009d0 	.word	0x200009d0
 8001514:	0800b078 	.word	0x0800b078
 8001518:	0800afa4 	.word	0x0800afa4
 800151c:	2000142b 	.word	0x2000142b

08001520 <main>:
{
 8001520:	b580      	push	{r7, lr}
  HAL_Init();
 8001522:	f000 fc89 	bl	8001e38 <HAL_Init>
  SystemClock_Config();
 8001526:	f7ff fcff 	bl	8000f28 <SystemClock_Config>
  MX_GPIO_Init();
 800152a:	f7ff fc8d 	bl	8000e48 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800152e:	f000 fb51 	bl	8001bd4 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 8001532:	f000 fae7 	bl	8001b04 <MX_TIM4_Init>
  MX_TIM3_Init();
 8001536:	f000 faad 	bl	8001a94 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 800153a:	f000 fb65 	bl	8001c08 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 800153e:	f004 ffdd 	bl	80064fc <MX_USB_DEVICE_Init>
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001542:	2200      	movs	r2, #0
 8001544:	4611      	mov	r1, r2
 8001546:	2025      	movs	r0, #37	; 0x25
 8001548:	f000 fcac 	bl	8001ea4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 800154c:	2025      	movs	r0, #37	; 0x25
 800154e:	f000 fcdf 	bl	8001f10 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8001552:	2200      	movs	r2, #0
 8001554:	4611      	mov	r1, r2
 8001556:	2014      	movs	r0, #20
 8001558:	f000 fca4 	bl	8001ea4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800155c:	2014      	movs	r0, #20
 800155e:	f000 fcd7 	bl	8001f10 <HAL_NVIC_EnableIRQ>
  HAL_UART_Receive_IT(&huart1, &ReceiveTmp, 1);
 8001562:	2201      	movs	r2, #1
 8001564:	4930      	ldr	r1, [pc, #192]	; (8001628 <main+0x108>)
 8001566:	4831      	ldr	r0, [pc, #196]	; (800162c <main+0x10c>)
 8001568:	f003 f9ed 	bl	8004946 <HAL_UART_Receive_IT>
  if (ds18b20_read_address(ds_address) != HAL_OK)
 800156c:	4830      	ldr	r0, [pc, #192]	; (8001630 <main+0x110>)
 800156e:	f7ff fc35 	bl	8000ddc <ds18b20_read_address>
 8001572:	b108      	cbz	r0, 8001578 <main+0x58>
 8001574:	b672      	cpsid	i
  while (1)
 8001576:	e7fe      	b.n	8001576 <main+0x56>
  SMSUartTxState = Config;
 8001578:	4b2e      	ldr	r3, [pc, #184]	; (8001634 <main+0x114>)
 800157a:	2200      	movs	r2, #0
 800157c:	701a      	strb	r2, [r3, #0]
  LastTickForSim800 = HAL_GetTick();
 800157e:	f000 fc79 	bl	8001e74 <HAL_GetTick>
 8001582:	4b2d      	ldr	r3, [pc, #180]	; (8001638 <main+0x118>)
 8001584:	6018      	str	r0, [r3, #0]
  LastTickTempMeasure = HAL_GetTick();
 8001586:	f000 fc75 	bl	8001e74 <HAL_GetTick>
 800158a:	4b2c      	ldr	r3, [pc, #176]	; (800163c <main+0x11c>)
 800158c:	6018      	str	r0, [r3, #0]
  memcpy(GSM.FlashBuff, 0x0801FC00, 128*4);
 800158e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001592:	492b      	ldr	r1, [pc, #172]	; (8001640 <main+0x120>)
 8001594:	482b      	ldr	r0, [pc, #172]	; (8001644 <main+0x124>)
 8001596:	f005 f9db 	bl	8006950 <memcpy>
  HAL_TIM_Base_Start_IT(&htim3);
 800159a:	482b      	ldr	r0, [pc, #172]	; (8001648 <main+0x128>)
 800159c:	f002 fbaa 	bl	8003cf4 <HAL_TIM_Base_Start_IT>
	  if(HAL_GetTick() - LastTickTempMeasure >= 800)
 80015a0:	4f26      	ldr	r7, [pc, #152]	; (800163c <main+0x11c>)
		  if(!tempMeasureFlag)
 80015a2:	4e2a      	ldr	r6, [pc, #168]	; (800164c <main+0x12c>)
		  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GSM.ReceivedState);
 80015a4:	4d2a      	ldr	r5, [pc, #168]	; (8001650 <main+0x130>)
 80015a6:	e021      	b.n	80015ec <main+0xcc>
			  temperature = ds18b20_get_temp_wo_fp(NULL);
 80015a8:	2000      	movs	r0, #0
 80015aa:	f7ff fc37 	bl	8000e1c <ds18b20_get_temp_wo_fp>
 80015ae:	4b29      	ldr	r3, [pc, #164]	; (8001654 <main+0x134>)
 80015b0:	6018      	str	r0, [r3, #0]
			  tempMeasureFlag = 0;
 80015b2:	2300      	movs	r3, #0
 80015b4:	7033      	strb	r3, [r6, #0]
	  if(LineCounter)
 80015b6:	4b28      	ldr	r3, [pc, #160]	; (8001658 <main+0x138>)
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	bb3b      	cbnz	r3, 800160c <main+0xec>
	  if(USBLineCounter)
 80015bc:	4b27      	ldr	r3, [pc, #156]	; (800165c <main+0x13c>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	b15b      	cbz	r3, 80015da <main+0xba>
		  Parser_TakeLine(&USBConfBuffer, ReceivedData);
 80015c2:	4c27      	ldr	r4, [pc, #156]	; (8001660 <main+0x140>)
 80015c4:	4621      	mov	r1, r4
 80015c6:	4827      	ldr	r0, [pc, #156]	; (8001664 <main+0x144>)
 80015c8:	f000 f884 	bl	80016d4 <Parser_TakeLine>
		  USBLineCounter--;
 80015cc:	4a23      	ldr	r2, [pc, #140]	; (800165c <main+0x13c>)
 80015ce:	7813      	ldrb	r3, [r2, #0]
 80015d0:	3b01      	subs	r3, #1
 80015d2:	7013      	strb	r3, [r2, #0]
		  Parser_parse(ReceivedData);
 80015d4:	4620      	mov	r0, r4
 80015d6:	f000 f897 	bl	8001708 <Parser_parse>
		  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GSM.ReceivedState);
 80015da:	4b23      	ldr	r3, [pc, #140]	; (8001668 <main+0x148>)
 80015dc:	7a1a      	ldrb	r2, [r3, #8]
 80015de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015e2:	4628      	mov	r0, r5
 80015e4:	f000 ffb0 	bl	8002548 <HAL_GPIO_WritePin>
		  CommStateMachineTask();
 80015e8:	f7ff fd88 	bl	80010fc <CommStateMachineTask>
	  if(HAL_GetTick() - LastTickTempMeasure >= 800)
 80015ec:	f000 fc42 	bl	8001e74 <HAL_GetTick>
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	1ac0      	subs	r0, r0, r3
 80015f4:	f5b0 7f48 	cmp.w	r0, #800	; 0x320
 80015f8:	d3dd      	bcc.n	80015b6 <main+0x96>
		  if(!tempMeasureFlag)
 80015fa:	7833      	ldrb	r3, [r6, #0]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d1d3      	bne.n	80015a8 <main+0x88>
			  ds18b20_start_measure(NULL);
 8001600:	2000      	movs	r0, #0
 8001602:	f7ff fc06 	bl	8000e12 <ds18b20_start_measure>
			  tempMeasureFlag = 1;
 8001606:	2301      	movs	r3, #1
 8001608:	7033      	strb	r3, [r6, #0]
 800160a:	e7d4      	b.n	80015b6 <main+0x96>
		  Parser_TakeLine(&ReceiveBuffer, ReceivedData);
 800160c:	4c14      	ldr	r4, [pc, #80]	; (8001660 <main+0x140>)
 800160e:	4621      	mov	r1, r4
 8001610:	4816      	ldr	r0, [pc, #88]	; (800166c <main+0x14c>)
 8001612:	f000 f85f 	bl	80016d4 <Parser_TakeLine>
		  LineCounter--;
 8001616:	4a10      	ldr	r2, [pc, #64]	; (8001658 <main+0x138>)
 8001618:	7813      	ldrb	r3, [r2, #0]
 800161a:	3b01      	subs	r3, #1
 800161c:	7013      	strb	r3, [r2, #0]
		  Parser_parse(ReceivedData);
 800161e:	4620      	mov	r0, r4
 8001620:	f000 f872 	bl	8001708 <Parser_parse>
 8001624:	e7ca      	b.n	80015bc <main+0x9c>
 8001626:	bf00      	nop
 8001628:	20001328 	.word	0x20001328
 800162c:	200016e4 	.word	0x200016e4
 8001630:	20001638 	.word	0x20001638
 8001634:	2000142b 	.word	0x2000142b
 8001638:	20001118 	.word	0x20001118
 800163c:	2000111c 	.word	0x2000111c
 8001640:	0801fc00 	.word	0x0801fc00
 8001644:	20000f14 	.word	0x20000f14
 8001648:	20001654 	.word	0x20001654
 800164c:	20001644 	.word	0x20001644
 8001650:	40011000 	.word	0x40011000
 8001654:	20001648 	.word	0x20001648
 8001658:	20001120 	.word	0x20001120
 800165c:	20001634 	.word	0x20001634
 8001660:	2000132c 	.word	0x2000132c
 8001664:	20001430 	.word	0x20001430
 8001668:	20000f08 	.word	0x20000f08
 800166c:	20001124 	.word	0x20001124

08001670 <CDC_ReveiveCallback>:
	if(Length > 0)
 8001670:	b349      	cbz	r1, 80016c6 <CDC_ReveiveCallback+0x56>
{
 8001672:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001674:	b083      	sub	sp, #12
 8001676:	4604      	mov	r4, r0
 8001678:	460d      	mov	r5, r1
			volatile uint8_t i = 0;
 800167a:	2300      	movs	r3, #0
 800167c:	f88d 3007 	strb.w	r3, [sp, #7]
					if (RB_OK == Ring_Buffer_Write(&USBConfBuffer, Buffer[i]))
 8001680:	4e11      	ldr	r6, [pc, #68]	; (80016c8 <CDC_ReveiveCallback+0x58>)
							USBLineCounter++;
 8001682:	4f12      	ldr	r7, [pc, #72]	; (80016cc <CDC_ReveiveCallback+0x5c>)
			while(i < Length)
 8001684:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001688:	b2db      	uxtb	r3, r3
 800168a:	42ab      	cmp	r3, r5
 800168c:	d219      	bcs.n	80016c2 <CDC_ReveiveCallback+0x52>
					if (RB_OK == Ring_Buffer_Write(&USBConfBuffer, Buffer[i]))
 800168e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001692:	b2db      	uxtb	r3, r3
 8001694:	5ce1      	ldrb	r1, [r4, r3]
 8001696:	4630      	mov	r0, r6
 8001698:	f000 f94d 	bl	8001936 <Ring_Buffer_Write>
 800169c:	2800      	cmp	r0, #0
 800169e:	d1f1      	bne.n	8001684 <CDC_ReveiveCallback+0x14>
						if(Buffer[i] == ENDLINE)
 80016a0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	5ce3      	ldrb	r3, [r4, r3]
 80016a8:	2b0a      	cmp	r3, #10
 80016aa:	d006      	beq.n	80016ba <CDC_ReveiveCallback+0x4a>
				i++;
 80016ac:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80016b0:	3301      	adds	r3, #1
 80016b2:	b2db      	uxtb	r3, r3
 80016b4:	f88d 3007 	strb.w	r3, [sp, #7]
 80016b8:	e7e4      	b.n	8001684 <CDC_ReveiveCallback+0x14>
							USBLineCounter++;
 80016ba:	783b      	ldrb	r3, [r7, #0]
 80016bc:	3301      	adds	r3, #1
 80016be:	703b      	strb	r3, [r7, #0]
 80016c0:	e7f4      	b.n	80016ac <CDC_ReveiveCallback+0x3c>
}
 80016c2:	b003      	add	sp, #12
 80016c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016c6:	4770      	bx	lr
 80016c8:	20001430 	.word	0x20001430
 80016cc:	20001634 	.word	0x20001634

080016d0 <Error_Handler>:
 80016d0:	b672      	cpsid	i
  while (1)
 80016d2:	e7fe      	b.n	80016d2 <Error_Handler+0x2>

080016d4 <Parser_TakeLine>:
#include "stdlib.h"
#include "FLASH_PAGE_F1.h"


void Parser_TakeLine(RingBuffer_t *Buff, uint8_t *Destination)
{
 80016d4:	b570      	push	{r4, r5, r6, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	4606      	mov	r6, r0
 80016da:	460d      	mov	r5, r1
	  uint8_t i = 0;
	  uint8_t tmp = 0;
 80016dc:	2400      	movs	r4, #0
 80016de:	f88d 4007 	strb.w	r4, [sp, #7]
 80016e2:	e002      	b.n	80016ea <Parser_TakeLine+0x16>
			{
			 Destination[i] = 0;
			}
		else
			{
			Destination[i] = tmp;
 80016e4:	b2e4      	uxtb	r4, r4
 80016e6:	552b      	strb	r3, [r5, r4]
 80016e8:	4614      	mov	r4, r2
		 Ring_Buffer_Read(Buff, &tmp);
 80016ea:	f10d 0107 	add.w	r1, sp, #7
 80016ee:	4630      	mov	r0, r6
 80016f0:	f000 f90c 	bl	800190c <Ring_Buffer_Read>
		 if(tmp == ENDLINE)
 80016f4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80016f8:	1c62      	adds	r2, r4, #1
 80016fa:	2b0a      	cmp	r3, #10
 80016fc:	d1f2      	bne.n	80016e4 <Parser_TakeLine+0x10>
			 Destination[i] = 0;
 80016fe:	b2e4      	uxtb	r4, r4
 8001700:	2300      	movs	r3, #0
 8001702:	552b      	strb	r3, [r5, r4]
			}

			i++;

	} while(tmp != ENDLINE);
}
 8001704:	b002      	add	sp, #8
 8001706:	bd70      	pop	{r4, r5, r6, pc}

08001708 <Parser_parse>:
	second = atoi(ParsePointer);
}


void Parser_parse(uint8_t * DataToParse)
{
 8001708:	b538      	push	{r3, r4, r5, lr}
 800170a:	4604      	mov	r4, r0

	if(strcmp("OK", (char*)DataToParse) == 0)
 800170c:	4601      	mov	r1, r0
 800170e:	4860      	ldr	r0, [pc, #384]	; (8001890 <Parser_parse+0x188>)
 8001710:	f7fe fd1e 	bl	8000150 <strcmp>
 8001714:	b918      	cbnz	r0, 800171e <Parser_parse+0x16>
	{
		GSM.ReceivedState = 1;
 8001716:	4b5f      	ldr	r3, [pc, #380]	; (8001894 <Parser_parse+0x18c>)
 8001718:	2201      	movs	r2, #1
 800171a:	721a      	strb	r2, [r3, #8]
//	  	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
//	  	UartLog("led_off\n\r");
//	  }


}
 800171c:	bd38      	pop	{r3, r4, r5, pc}
	else if(strcmp("save\r", (char*)DataToParse) == 0)
 800171e:	4621      	mov	r1, r4
 8001720:	485d      	ldr	r0, [pc, #372]	; (8001898 <Parser_parse+0x190>)
 8001722:	f7fe fd15 	bl	8000150 <strcmp>
 8001726:	b928      	cbnz	r0, 8001734 <Parser_parse+0x2c>
		Flash_Write_Data(0x0801FC00, GSM.FlashBuff, 128);
 8001728:	2280      	movs	r2, #128	; 0x80
 800172a:	495c      	ldr	r1, [pc, #368]	; (800189c <Parser_parse+0x194>)
 800172c:	485c      	ldr	r0, [pc, #368]	; (80018a0 <Parser_parse+0x198>)
 800172e:	f7ff fadd 	bl	8000cec <Flash_Write_Data>
 8001732:	e7f3      	b.n	800171c <Parser_parse+0x14>
		char * ParsePointer = strtok((char*)DataToParse, " ");
 8001734:	495b      	ldr	r1, [pc, #364]	; (80018a4 <Parser_parse+0x19c>)
 8001736:	4620      	mov	r0, r4
 8001738:	f006 fbce 	bl	8007ed8 <strtok>
 800173c:	4604      	mov	r4, r0
		if(strcmp("+CSQ:", ParsePointer) == 0)
 800173e:	4601      	mov	r1, r0
 8001740:	4859      	ldr	r0, [pc, #356]	; (80018a8 <Parser_parse+0x1a0>)
 8001742:	f7fe fd05 	bl	8000150 <strcmp>
 8001746:	b198      	cbz	r0, 8001770 <Parser_parse+0x68>
		else if(strcmp("+CREG:", ParsePointer) == 0)
 8001748:	4621      	mov	r1, r4
 800174a:	4858      	ldr	r0, [pc, #352]	; (80018ac <Parser_parse+0x1a4>)
 800174c:	f7fe fd00 	bl	8000150 <strcmp>
 8001750:	b1b8      	cbz	r0, 8001782 <Parser_parse+0x7a>
		else if(strcmp("+CCLK:", ParsePointer) == 0)
 8001752:	4621      	mov	r1, r4
 8001754:	4856      	ldr	r0, [pc, #344]	; (80018b0 <Parser_parse+0x1a8>)
 8001756:	f7fe fcfb 	bl	8000150 <strcmp>
 800175a:	b310      	cbz	r0, 80017a2 <Parser_parse+0x9a>
		else if(strcmp("Test2", ParsePointer) == 0)
 800175c:	4621      	mov	r1, r4
 800175e:	4855      	ldr	r0, [pc, #340]	; (80018b4 <Parser_parse+0x1ac>)
 8001760:	f7fe fcf6 	bl	8000150 <strcmp>
 8001764:	2800      	cmp	r0, #0
 8001766:	d14f      	bne.n	8001808 <Parser_parse+0x100>
			SMSUartTxState = SMSMsgWrite;
 8001768:	4b53      	ldr	r3, [pc, #332]	; (80018b8 <Parser_parse+0x1b0>)
 800176a:	2202      	movs	r2, #2
 800176c:	701a      	strb	r2, [r3, #0]
 800176e:	e7d5      	b.n	800171c <Parser_parse+0x14>
	char * ParsePointer = strtok(NULL, ",");
 8001770:	4952      	ldr	r1, [pc, #328]	; (80018bc <Parser_parse+0x1b4>)
 8001772:	f006 fbb1 	bl	8007ed8 <strtok>
	GSM.SignalQuality = atof(ParsePointer);
 8001776:	f005 f8b9 	bl	80068ec <atof>
 800177a:	4b46      	ldr	r3, [pc, #280]	; (8001894 <Parser_parse+0x18c>)
 800177c:	e9c3 0100 	strd	r0, r1, [r3]
}
 8001780:	e7cc      	b.n	800171c <Parser_parse+0x14>
	char * ParsePointer = strtok(NULL, ",");
 8001782:	4d4e      	ldr	r5, [pc, #312]	; (80018bc <Parser_parse+0x1b4>)
 8001784:	4629      	mov	r1, r5
 8001786:	f006 fba7 	bl	8007ed8 <strtok>
	GSM.CRegN = atoi(ParsePointer);
 800178a:	f005 f8b2 	bl	80068f2 <atoi>
 800178e:	4c41      	ldr	r4, [pc, #260]	; (8001894 <Parser_parse+0x18c>)
 8001790:	7260      	strb	r0, [r4, #9]
	ParsePointer = strtok(NULL, ",");
 8001792:	4629      	mov	r1, r5
 8001794:	2000      	movs	r0, #0
 8001796:	f006 fb9f 	bl	8007ed8 <strtok>
	GSM.CRegStat = atoi(ParsePointer);
 800179a:	f005 f8aa 	bl	80068f2 <atoi>
 800179e:	72a0      	strb	r0, [r4, #10]
}
 80017a0:	e7bc      	b.n	800171c <Parser_parse+0x14>
	char * ParsePointer = strtok(NULL, "/");
 80017a2:	4c47      	ldr	r4, [pc, #284]	; (80018c0 <Parser_parse+0x1b8>)
 80017a4:	4621      	mov	r1, r4
 80017a6:	f006 fb97 	bl	8007ed8 <strtok>
	year = atoi(ParsePointer+1);
 80017aa:	3001      	adds	r0, #1
 80017ac:	f005 f8a1 	bl	80068f2 <atoi>
 80017b0:	4b44      	ldr	r3, [pc, #272]	; (80018c4 <Parser_parse+0x1bc>)
 80017b2:	7018      	strb	r0, [r3, #0]
	ParsePointer = strtok(NULL, "/");
 80017b4:	4621      	mov	r1, r4
 80017b6:	2000      	movs	r0, #0
 80017b8:	f006 fb8e 	bl	8007ed8 <strtok>
	month = atoi(ParsePointer);
 80017bc:	f005 f899 	bl	80068f2 <atoi>
 80017c0:	4b41      	ldr	r3, [pc, #260]	; (80018c8 <Parser_parse+0x1c0>)
 80017c2:	7018      	strb	r0, [r3, #0]
	ParsePointer = strtok(NULL, ",");
 80017c4:	493d      	ldr	r1, [pc, #244]	; (80018bc <Parser_parse+0x1b4>)
 80017c6:	2000      	movs	r0, #0
 80017c8:	f006 fb86 	bl	8007ed8 <strtok>
	day = atoi(ParsePointer);
 80017cc:	f005 f891 	bl	80068f2 <atoi>
 80017d0:	4b3e      	ldr	r3, [pc, #248]	; (80018cc <Parser_parse+0x1c4>)
 80017d2:	7018      	strb	r0, [r3, #0]
	ParsePointer = strtok(NULL, ":");
 80017d4:	4c3e      	ldr	r4, [pc, #248]	; (80018d0 <Parser_parse+0x1c8>)
 80017d6:	4621      	mov	r1, r4
 80017d8:	2000      	movs	r0, #0
 80017da:	f006 fb7d 	bl	8007ed8 <strtok>
	hour = atoi(ParsePointer);
 80017de:	f005 f888 	bl	80068f2 <atoi>
 80017e2:	4b3c      	ldr	r3, [pc, #240]	; (80018d4 <Parser_parse+0x1cc>)
 80017e4:	7018      	strb	r0, [r3, #0]
	ParsePointer = strtok(NULL, ":");
 80017e6:	4621      	mov	r1, r4
 80017e8:	2000      	movs	r0, #0
 80017ea:	f006 fb75 	bl	8007ed8 <strtok>
	minute = atoi(ParsePointer);
 80017ee:	f005 f880 	bl	80068f2 <atoi>
 80017f2:	4b39      	ldr	r3, [pc, #228]	; (80018d8 <Parser_parse+0x1d0>)
 80017f4:	7018      	strb	r0, [r3, #0]
	ParsePointer = strtok(NULL, "+");
 80017f6:	4939      	ldr	r1, [pc, #228]	; (80018dc <Parser_parse+0x1d4>)
 80017f8:	2000      	movs	r0, #0
 80017fa:	f006 fb6d 	bl	8007ed8 <strtok>
	second = atoi(ParsePointer);
 80017fe:	f005 f878 	bl	80068f2 <atoi>
 8001802:	4b37      	ldr	r3, [pc, #220]	; (80018e0 <Parser_parse+0x1d8>)
 8001804:	7018      	strb	r0, [r3, #0]
}
 8001806:	e789      	b.n	800171c <Parser_parse+0x14>
		else if(strcmp("login:", ParsePointer) == 0)
 8001808:	4621      	mov	r1, r4
 800180a:	4836      	ldr	r0, [pc, #216]	; (80018e4 <Parser_parse+0x1dc>)
 800180c:	f7fe fca0 	bl	8000150 <strcmp>
 8001810:	b1e8      	cbz	r0, 800184e <Parser_parse+0x146>
		else if(strcmp("password:", ParsePointer) == 0)
 8001812:	4621      	mov	r1, r4
 8001814:	4834      	ldr	r0, [pc, #208]	; (80018e8 <Parser_parse+0x1e0>)
 8001816:	f7fe fc9b 	bl	8000150 <strcmp>
 800181a:	b300      	cbz	r0, 800185e <Parser_parse+0x156>
		else if(strcmp("server:", ParsePointer) == 0)
 800181c:	4621      	mov	r1, r4
 800181e:	4833      	ldr	r0, [pc, #204]	; (80018ec <Parser_parse+0x1e4>)
 8001820:	f7fe fc96 	bl	8000150 <strcmp>
 8001824:	b318      	cbz	r0, 800186e <Parser_parse+0x166>
		else if(strcmp("path:", ParsePointer) == 0)
 8001826:	4621      	mov	r1, r4
 8001828:	4831      	ldr	r0, [pc, #196]	; (80018f0 <Parser_parse+0x1e8>)
 800182a:	f7fe fc91 	bl	8000150 <strcmp>
 800182e:	b330      	cbz	r0, 800187e <Parser_parse+0x176>
		else if(strcmp("device:", ParsePointer) == 0)
 8001830:	4621      	mov	r1, r4
 8001832:	4830      	ldr	r0, [pc, #192]	; (80018f4 <Parser_parse+0x1ec>)
 8001834:	f7fe fc8c 	bl	8000150 <strcmp>
 8001838:	2800      	cmp	r0, #0
 800183a:	f47f af6f 	bne.w	800171c <Parser_parse+0x14>
			ParsePointer = strtok(NULL, "\r");
 800183e:	492e      	ldr	r1, [pc, #184]	; (80018f8 <Parser_parse+0x1f0>)
 8001840:	f006 fb4a 	bl	8007ed8 <strtok>
 8001844:	4601      	mov	r1, r0
			strcpy(GSM.ConfigFlash.deviceNumber, ParsePointer);
 8001846:	482d      	ldr	r0, [pc, #180]	; (80018fc <Parser_parse+0x1f4>)
 8001848:	f005 fd27 	bl	800729a <strcpy>
}
 800184c:	e766      	b.n	800171c <Parser_parse+0x14>
			ParsePointer = strtok(NULL, "\r");
 800184e:	492a      	ldr	r1, [pc, #168]	; (80018f8 <Parser_parse+0x1f0>)
 8001850:	f006 fb42 	bl	8007ed8 <strtok>
 8001854:	4601      	mov	r1, r0
			strcpy(GSM.ConfigFlash.login, ParsePointer);
 8001856:	4811      	ldr	r0, [pc, #68]	; (800189c <Parser_parse+0x194>)
 8001858:	f005 fd1f 	bl	800729a <strcpy>
 800185c:	e75e      	b.n	800171c <Parser_parse+0x14>
			ParsePointer = strtok(NULL, "\r");
 800185e:	4926      	ldr	r1, [pc, #152]	; (80018f8 <Parser_parse+0x1f0>)
 8001860:	f006 fb3a 	bl	8007ed8 <strtok>
 8001864:	4601      	mov	r1, r0
			strcpy(GSM.ConfigFlash.password, ParsePointer);
 8001866:	4826      	ldr	r0, [pc, #152]	; (8001900 <Parser_parse+0x1f8>)
 8001868:	f005 fd17 	bl	800729a <strcpy>
 800186c:	e756      	b.n	800171c <Parser_parse+0x14>
			ParsePointer = strtok(NULL, "\r");
 800186e:	4922      	ldr	r1, [pc, #136]	; (80018f8 <Parser_parse+0x1f0>)
 8001870:	f006 fb32 	bl	8007ed8 <strtok>
 8001874:	4601      	mov	r1, r0
			strcpy(GSM.ConfigFlash.server, ParsePointer);
 8001876:	4823      	ldr	r0, [pc, #140]	; (8001904 <Parser_parse+0x1fc>)
 8001878:	f005 fd0f 	bl	800729a <strcpy>
 800187c:	e74e      	b.n	800171c <Parser_parse+0x14>
			ParsePointer = strtok(NULL, "\r");
 800187e:	491e      	ldr	r1, [pc, #120]	; (80018f8 <Parser_parse+0x1f0>)
 8001880:	f006 fb2a 	bl	8007ed8 <strtok>
 8001884:	4601      	mov	r1, r0
			strcpy(GSM.ConfigFlash.path, ParsePointer);
 8001886:	4820      	ldr	r0, [pc, #128]	; (8001908 <Parser_parse+0x200>)
 8001888:	f005 fd07 	bl	800729a <strcpy>
 800188c:	e746      	b.n	800171c <Parser_parse+0x14>
 800188e:	bf00      	nop
 8001890:	0800b08c 	.word	0x0800b08c
 8001894:	20000f08 	.word	0x20000f08
 8001898:	0800b090 	.word	0x0800b090
 800189c:	20000f14 	.word	0x20000f14
 80018a0:	0801fc00 	.word	0x0801fc00
 80018a4:	0800b098 	.word	0x0800b098
 80018a8:	0800b09c 	.word	0x0800b09c
 80018ac:	0800b0a8 	.word	0x0800b0a8
 80018b0:	0800b0b0 	.word	0x0800b0b0
 80018b4:	0800b0c0 	.word	0x0800b0c0
 80018b8:	2000142b 	.word	0x2000142b
 80018bc:	0800b0a4 	.word	0x0800b0a4
 80018c0:	0800b0b8 	.word	0x0800b0b8
 80018c4:	2000164d 	.word	0x2000164d
 80018c8:	20001642 	.word	0x20001642
 80018cc:	20001636 	.word	0x20001636
 80018d0:	0800b0a0 	.word	0x0800b0a0
 80018d4:	20001640 	.word	0x20001640
 80018d8:	20001641 	.word	0x20001641
 80018dc:	0800b0bc 	.word	0x0800b0bc
 80018e0:	20001643 	.word	0x20001643
 80018e4:	0800b0c8 	.word	0x0800b0c8
 80018e8:	0800b0d0 	.word	0x0800b0d0
 80018ec:	0800b0dc 	.word	0x0800b0dc
 80018f0:	0800b0e4 	.word	0x0800b0e4
 80018f4:	0800b0ec 	.word	0x0800b0ec
 80018f8:	0800b094 	.word	0x0800b094
 80018fc:	20000fce 	.word	0x20000fce
 8001900:	20000f32 	.word	0x20000f32
 8001904:	20000f50 	.word	0x20000f50
 8001908:	20000f82 	.word	0x20000f82

0800190c <Ring_Buffer_Read>:
#include "main.h"
#include "ring_buffer.h"

RbStatus_t Ring_Buffer_Read(RingBuffer_t * Buff, uint8_t *value)
{
	if(Buff->Head == Buff->Tail)
 800190c:	8843      	ldrh	r3, [r0, #2]
 800190e:	8802      	ldrh	r2, [r0, #0]
 8001910:	429a      	cmp	r2, r3
 8001912:	d00e      	beq.n	8001932 <Ring_Buffer_Read+0x26>
	{
		return RB_ERROR;
	}
	*value = Buff->Buffer[Buff->Tail];
 8001914:	4403      	add	r3, r0
 8001916:	791b      	ldrb	r3, [r3, #4]
 8001918:	700b      	strb	r3, [r1, #0]

	Buff->Tail = (Buff->Tail + 1) % RING_BUFFER_SIZE;
 800191a:	8843      	ldrh	r3, [r0, #2]
 800191c:	3301      	adds	r3, #1
 800191e:	425a      	negs	r2, r3
 8001920:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001924:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001928:	bf58      	it	pl
 800192a:	4253      	negpl	r3, r2
 800192c:	8043      	strh	r3, [r0, #2]

	return RB_OK;
 800192e:	2000      	movs	r0, #0
 8001930:	4770      	bx	lr
		return RB_ERROR;
 8001932:	2001      	movs	r0, #1
}
 8001934:	4770      	bx	lr

08001936 <Ring_Buffer_Write>:

RbStatus_t Ring_Buffer_Write(RingBuffer_t * Buff, uint8_t value)
{
	uint16_t Head_tmp = (Buff->Head + 1) % RING_BUFFER_SIZE;
 8001936:	8802      	ldrh	r2, [r0, #0]
 8001938:	1c53      	adds	r3, r2, #1
 800193a:	f1d3 0c00 	rsbs	ip, r3, #0
 800193e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001942:	f3cc 0c08 	ubfx	ip, ip, #0, #9
 8001946:	bf58      	it	pl
 8001948:	f1cc 0300 	rsbpl	r3, ip, #0
 800194c:	b29b      	uxth	r3, r3

	if(Head_tmp == Buff->Tail)
 800194e:	f8b0 c002 	ldrh.w	ip, [r0, #2]
 8001952:	459c      	cmp	ip, r3
 8001954:	d004      	beq.n	8001960 <Ring_Buffer_Write+0x2a>
	{
		return RB_ERROR;
	}
	Buff->Buffer[Buff->Head] = value;
 8001956:	4402      	add	r2, r0
 8001958:	7111      	strb	r1, [r2, #4]
	Buff->Head = Head_tmp;
 800195a:	8003      	strh	r3, [r0, #0]

	return RB_OK;
 800195c:	2000      	movs	r0, #0
 800195e:	4770      	bx	lr
		return RB_ERROR;
 8001960:	2001      	movs	r0, #1
}
 8001962:	4770      	bx	lr

08001964 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001964:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001966:	4b0a      	ldr	r3, [pc, #40]	; (8001990 <HAL_MspInit+0x2c>)
 8001968:	699a      	ldr	r2, [r3, #24]
 800196a:	f042 0201 	orr.w	r2, r2, #1
 800196e:	619a      	str	r2, [r3, #24]
 8001970:	699a      	ldr	r2, [r3, #24]
 8001972:	f002 0201 	and.w	r2, r2, #1
 8001976:	9200      	str	r2, [sp, #0]
 8001978:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800197a:	69da      	ldr	r2, [r3, #28]
 800197c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001980:	61da      	str	r2, [r3, #28]
 8001982:	69db      	ldr	r3, [r3, #28]
 8001984:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001988:	9301      	str	r3, [sp, #4]
 800198a:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800198c:	b002      	add	sp, #8
 800198e:	4770      	bx	lr
 8001990:	40021000 	.word	0x40021000

08001994 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001994:	e7fe      	b.n	8001994 <NMI_Handler>

08001996 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001996:	e7fe      	b.n	8001996 <HardFault_Handler>

08001998 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001998:	e7fe      	b.n	8001998 <MemManage_Handler>

0800199a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800199a:	e7fe      	b.n	800199a <BusFault_Handler>

0800199c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800199c:	e7fe      	b.n	800199c <UsageFault_Handler>

0800199e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800199e:	4770      	bx	lr

080019a0 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019a0:	4770      	bx	lr

080019a2 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019a2:	4770      	bx	lr

080019a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019a4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019a6:	f000 fa59 	bl	8001e5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019aa:	bd08      	pop	{r3, pc}

080019ac <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80019ac:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80019ae:	4802      	ldr	r0, [pc, #8]	; (80019b8 <USB_LP_CAN1_RX0_IRQHandler+0xc>)
 80019b0:	f000 fe83 	bl	80026ba <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80019b4:	bd08      	pop	{r3, pc}
 80019b6:	bf00      	nop
 80019b8:	20002058 	.word	0x20002058

080019bc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80019bc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80019be:	4802      	ldr	r0, [pc, #8]	; (80019c8 <TIM3_IRQHandler+0xc>)
 80019c0:	f002 f9d0 	bl	8003d64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80019c4:	bd08      	pop	{r3, pc}
 80019c6:	bf00      	nop
 80019c8:	20001654 	.word	0x20001654

080019cc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80019cc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80019ce:	4802      	ldr	r0, [pc, #8]	; (80019d8 <USART1_IRQHandler+0xc>)
 80019d0:	f002 fe60 	bl	8004694 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80019d4:	bd08      	pop	{r3, pc}
 80019d6:	bf00      	nop
 80019d8:	200016e4 	.word	0x200016e4

080019dc <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 80019dc:	2001      	movs	r0, #1
 80019de:	4770      	bx	lr

080019e0 <_kill>:

int _kill(int pid, int sig)
{
 80019e0:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80019e2:	f004 ff8b 	bl	80068fc <__errno>
 80019e6:	2316      	movs	r3, #22
 80019e8:	6003      	str	r3, [r0, #0]
  return -1;
}
 80019ea:	f04f 30ff 	mov.w	r0, #4294967295
 80019ee:	bd08      	pop	{r3, pc}

080019f0 <_exit>:

void _exit (int status)
{
 80019f0:	b508      	push	{r3, lr}
  errno = EINVAL;
 80019f2:	f004 ff83 	bl	80068fc <__errno>
 80019f6:	2316      	movs	r3, #22
 80019f8:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 80019fa:	e7fe      	b.n	80019fa <_exit+0xa>

080019fc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019fc:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019fe:	1e16      	subs	r6, r2, #0
 8001a00:	dd07      	ble.n	8001a12 <_read+0x16>
 8001a02:	460c      	mov	r4, r1
 8001a04:	198d      	adds	r5, r1, r6
  {
    *ptr++ = __io_getchar();
 8001a06:	f3af 8000 	nop.w
 8001a0a:	f804 0b01 	strb.w	r0, [r4], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a0e:	42a5      	cmp	r5, r4
 8001a10:	d1f9      	bne.n	8001a06 <_read+0xa>
  }

  return len;
}
 8001a12:	4630      	mov	r0, r6
 8001a14:	bd70      	pop	{r4, r5, r6, pc}

08001a16 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a16:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a18:	1e16      	subs	r6, r2, #0
 8001a1a:	dd07      	ble.n	8001a2c <_write+0x16>
 8001a1c:	460c      	mov	r4, r1
 8001a1e:	198d      	adds	r5, r1, r6
  {
    __io_putchar(*ptr++);
 8001a20:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001a24:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a28:	42a5      	cmp	r5, r4
 8001a2a:	d1f9      	bne.n	8001a20 <_write+0xa>
  }
  return len;
}
 8001a2c:	4630      	mov	r0, r6
 8001a2e:	bd70      	pop	{r4, r5, r6, pc}

08001a30 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8001a30:	f04f 30ff 	mov.w	r0, #4294967295
 8001a34:	4770      	bx	lr

08001a36 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8001a36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a3a:	604b      	str	r3, [r1, #4]
  return 0;
}
 8001a3c:	2000      	movs	r0, #0
 8001a3e:	4770      	bx	lr

08001a40 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8001a40:	2001      	movs	r0, #1
 8001a42:	4770      	bx	lr

08001a44 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8001a44:	2000      	movs	r0, #0
 8001a46:	4770      	bx	lr

08001a48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a48:	b508      	push	{r3, lr}
 8001a4a:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a4c:	4a0c      	ldr	r2, [pc, #48]	; (8001a80 <_sbrk+0x38>)
 8001a4e:	6812      	ldr	r2, [r2, #0]
 8001a50:	b152      	cbz	r2, 8001a68 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a52:	4a0b      	ldr	r2, [pc, #44]	; (8001a80 <_sbrk+0x38>)
 8001a54:	6810      	ldr	r0, [r2, #0]
 8001a56:	4403      	add	r3, r0
 8001a58:	4a0a      	ldr	r2, [pc, #40]	; (8001a84 <_sbrk+0x3c>)
 8001a5a:	490b      	ldr	r1, [pc, #44]	; (8001a88 <_sbrk+0x40>)
 8001a5c:	1a52      	subs	r2, r2, r1
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d806      	bhi.n	8001a70 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001a62:	4a07      	ldr	r2, [pc, #28]	; (8001a80 <_sbrk+0x38>)
 8001a64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8001a66:	bd08      	pop	{r3, pc}
    __sbrk_heap_end = &_end;
 8001a68:	4a05      	ldr	r2, [pc, #20]	; (8001a80 <_sbrk+0x38>)
 8001a6a:	4908      	ldr	r1, [pc, #32]	; (8001a8c <_sbrk+0x44>)
 8001a6c:	6011      	str	r1, [r2, #0]
 8001a6e:	e7f0      	b.n	8001a52 <_sbrk+0xa>
    errno = ENOMEM;
 8001a70:	f004 ff44 	bl	80068fc <__errno>
 8001a74:	230c      	movs	r3, #12
 8001a76:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001a78:	f04f 30ff 	mov.w	r0, #4294967295
 8001a7c:	e7f3      	b.n	8001a66 <_sbrk+0x1e>
 8001a7e:	bf00      	nop
 8001a80:	20001650 	.word	0x20001650
 8001a84:	20005000 	.word	0x20005000
 8001a88:	00001000 	.word	0x00001000
 8001a8c:	20002578 	.word	0x20002578

08001a90 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a90:	4770      	bx	lr
	...

08001a94 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001a94:	b500      	push	{lr}
 8001a96:	b087      	sub	sp, #28

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a98:	2300      	movs	r3, #0
 8001a9a:	9302      	str	r3, [sp, #8]
 8001a9c:	9303      	str	r3, [sp, #12]
 8001a9e:	9304      	str	r3, [sp, #16]
 8001aa0:	9305      	str	r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001aa2:	9300      	str	r3, [sp, #0]
 8001aa4:	9301      	str	r3, [sp, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001aa6:	4815      	ldr	r0, [pc, #84]	; (8001afc <MX_TIM3_Init+0x68>)
 8001aa8:	4a15      	ldr	r2, [pc, #84]	; (8001b00 <MX_TIM3_Init+0x6c>)
 8001aaa:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 10659 / 8;
 8001aac:	f240 5234 	movw	r2, #1332	; 0x534
 8001ab0:	6042      	str	r2, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ab2:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 65000;
 8001ab4:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8001ab8:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aba:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001abc:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001abe:	f002 fa5d 	bl	8003f7c <HAL_TIM_Base_Init>
 8001ac2:	b990      	cbnz	r0, 8001aea <MX_TIM3_Init+0x56>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ac4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ac8:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001aca:	a902      	add	r1, sp, #8
 8001acc:	480b      	ldr	r0, [pc, #44]	; (8001afc <MX_TIM3_Init+0x68>)
 8001ace:	f002 fa8d 	bl	8003fec <HAL_TIM_ConfigClockSource>
 8001ad2:	b968      	cbnz	r0, 8001af0 <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ad8:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ada:	4669      	mov	r1, sp
 8001adc:	4807      	ldr	r0, [pc, #28]	; (8001afc <MX_TIM3_Init+0x68>)
 8001ade:	f002 fb29 	bl	8004134 <HAL_TIMEx_MasterConfigSynchronization>
 8001ae2:	b940      	cbnz	r0, 8001af6 <MX_TIM3_Init+0x62>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001ae4:	b007      	add	sp, #28
 8001ae6:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001aea:	f7ff fdf1 	bl	80016d0 <Error_Handler>
 8001aee:	e7e9      	b.n	8001ac4 <MX_TIM3_Init+0x30>
    Error_Handler();
 8001af0:	f7ff fdee 	bl	80016d0 <Error_Handler>
 8001af4:	e7ee      	b.n	8001ad4 <MX_TIM3_Init+0x40>
    Error_Handler();
 8001af6:	f7ff fdeb 	bl	80016d0 <Error_Handler>
}
 8001afa:	e7f3      	b.n	8001ae4 <MX_TIM3_Init+0x50>
 8001afc:	20001654 	.word	0x20001654
 8001b00:	40000400 	.word	0x40000400

08001b04 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001b04:	b500      	push	{lr}
 8001b06:	b087      	sub	sp, #28

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b08:	2300      	movs	r3, #0
 8001b0a:	9302      	str	r3, [sp, #8]
 8001b0c:	9303      	str	r3, [sp, #12]
 8001b0e:	9304      	str	r3, [sp, #16]
 8001b10:	9305      	str	r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b12:	9300      	str	r3, [sp, #0]
 8001b14:	9301      	str	r3, [sp, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001b16:	4815      	ldr	r0, [pc, #84]	; (8001b6c <MX_TIM4_Init+0x68>)
 8001b18:	4a15      	ldr	r2, [pc, #84]	; (8001b70 <MX_TIM4_Init+0x6c>)
 8001b1a:	6002      	str	r2, [r0, #0]
  htim4.Init.Prescaler = 32-1;
 8001b1c:	221f      	movs	r2, #31
 8001b1e:	6042      	str	r2, [r0, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b20:	6083      	str	r3, [r0, #8]
  htim4.Init.Period = 0xffff;
 8001b22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b26:	60c2      	str	r2, [r0, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b28:	6103      	str	r3, [r0, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b2a:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001b2c:	f002 fa26 	bl	8003f7c <HAL_TIM_Base_Init>
 8001b30:	b990      	cbnz	r0, 8001b58 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b36:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001b38:	a902      	add	r1, sp, #8
 8001b3a:	480c      	ldr	r0, [pc, #48]	; (8001b6c <MX_TIM4_Init+0x68>)
 8001b3c:	f002 fa56 	bl	8003fec <HAL_TIM_ConfigClockSource>
 8001b40:	b968      	cbnz	r0, 8001b5e <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b42:	2300      	movs	r3, #0
 8001b44:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b46:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001b48:	4669      	mov	r1, sp
 8001b4a:	4808      	ldr	r0, [pc, #32]	; (8001b6c <MX_TIM4_Init+0x68>)
 8001b4c:	f002 faf2 	bl	8004134 <HAL_TIMEx_MasterConfigSynchronization>
 8001b50:	b940      	cbnz	r0, 8001b64 <MX_TIM4_Init+0x60>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001b52:	b007      	add	sp, #28
 8001b54:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001b58:	f7ff fdba 	bl	80016d0 <Error_Handler>
 8001b5c:	e7e9      	b.n	8001b32 <MX_TIM4_Init+0x2e>
    Error_Handler();
 8001b5e:	f7ff fdb7 	bl	80016d0 <Error_Handler>
 8001b62:	e7ee      	b.n	8001b42 <MX_TIM4_Init+0x3e>
    Error_Handler();
 8001b64:	f7ff fdb4 	bl	80016d0 <Error_Handler>
}
 8001b68:	e7f3      	b.n	8001b52 <MX_TIM4_Init+0x4e>
 8001b6a:	bf00      	nop
 8001b6c:	2000169c 	.word	0x2000169c
 8001b70:	40000800 	.word	0x40000800

08001b74 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001b74:	b500      	push	{lr}
 8001b76:	b083      	sub	sp, #12

  if(tim_baseHandle->Instance==TIM3)
 8001b78:	6803      	ldr	r3, [r0, #0]
 8001b7a:	4a13      	ldr	r2, [pc, #76]	; (8001bc8 <HAL_TIM_Base_MspInit+0x54>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d005      	beq.n	8001b8c <HAL_TIM_Base_MspInit+0x18>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM4)
 8001b80:	4a12      	ldr	r2, [pc, #72]	; (8001bcc <HAL_TIM_Base_MspInit+0x58>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d015      	beq.n	8001bb2 <HAL_TIM_Base_MspInit+0x3e>
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001b86:	b003      	add	sp, #12
 8001b88:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b8c:	4b10      	ldr	r3, [pc, #64]	; (8001bd0 <HAL_TIM_Base_MspInit+0x5c>)
 8001b8e:	69da      	ldr	r2, [r3, #28]
 8001b90:	f042 0202 	orr.w	r2, r2, #2
 8001b94:	61da      	str	r2, [r3, #28]
 8001b96:	69db      	ldr	r3, [r3, #28]
 8001b98:	f003 0302 	and.w	r3, r3, #2
 8001b9c:	9300      	str	r3, [sp, #0]
 8001b9e:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	4611      	mov	r1, r2
 8001ba4:	201d      	movs	r0, #29
 8001ba6:	f000 f97d 	bl	8001ea4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001baa:	201d      	movs	r0, #29
 8001bac:	f000 f9b0 	bl	8001f10 <HAL_NVIC_EnableIRQ>
 8001bb0:	e7e9      	b.n	8001b86 <HAL_TIM_Base_MspInit+0x12>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001bb2:	4b07      	ldr	r3, [pc, #28]	; (8001bd0 <HAL_TIM_Base_MspInit+0x5c>)
 8001bb4:	69da      	ldr	r2, [r3, #28]
 8001bb6:	f042 0204 	orr.w	r2, r2, #4
 8001bba:	61da      	str	r2, [r3, #28]
 8001bbc:	69db      	ldr	r3, [r3, #28]
 8001bbe:	f003 0304 	and.w	r3, r3, #4
 8001bc2:	9301      	str	r3, [sp, #4]
 8001bc4:	9b01      	ldr	r3, [sp, #4]
}
 8001bc6:	e7de      	b.n	8001b86 <HAL_TIM_Base_MspInit+0x12>
 8001bc8:	40000400 	.word	0x40000400
 8001bcc:	40000800 	.word	0x40000800
 8001bd0:	40021000 	.word	0x40021000

08001bd4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001bd4:	b508      	push	{r3, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001bd6:	480a      	ldr	r0, [pc, #40]	; (8001c00 <MX_USART1_UART_Init+0x2c>)
 8001bd8:	4b0a      	ldr	r3, [pc, #40]	; (8001c04 <MX_USART1_UART_Init+0x30>)
 8001bda:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 9600;
 8001bdc:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8001be0:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001be2:	2300      	movs	r3, #0
 8001be4:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001be6:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001be8:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001bea:	220c      	movs	r2, #12
 8001bec:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bee:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bf0:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001bf2:	f002 fb6b 	bl	80042cc <HAL_UART_Init>
 8001bf6:	b900      	cbnz	r0, 8001bfa <MX_USART1_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001bf8:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001bfa:	f7ff fd69 	bl	80016d0 <Error_Handler>
}
 8001bfe:	e7fb      	b.n	8001bf8 <MX_USART1_UART_Init+0x24>
 8001c00:	200016e4 	.word	0x200016e4
 8001c04:	40013800 	.word	0x40013800

08001c08 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001c08:	b508      	push	{r3, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c0a:	480a      	ldr	r0, [pc, #40]	; (8001c34 <MX_USART2_UART_Init+0x2c>)
 8001c0c:	4b0a      	ldr	r3, [pc, #40]	; (8001c38 <MX_USART2_UART_Init+0x30>)
 8001c0e:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 9600;
 8001c10:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8001c14:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c16:	2300      	movs	r3, #0
 8001c18:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c1a:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c1c:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c1e:	220c      	movs	r2, #12
 8001c20:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c22:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c24:	61c3      	str	r3, [r0, #28]
  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 8001c26:	f002 fb80 	bl	800432a <HAL_HalfDuplex_Init>
 8001c2a:	b900      	cbnz	r0, 8001c2e <MX_USART2_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c2c:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001c2e:	f7ff fd4f 	bl	80016d0 <Error_Handler>
}
 8001c32:	e7fb      	b.n	8001c2c <MX_USART2_UART_Init+0x24>
 8001c34:	20001728 	.word	0x20001728
 8001c38:	40004400 	.word	0x40004400

08001c3c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c3c:	b510      	push	{r4, lr}
 8001c3e:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c40:	2300      	movs	r3, #0
 8001c42:	9304      	str	r3, [sp, #16]
 8001c44:	9305      	str	r3, [sp, #20]
 8001c46:	9306      	str	r3, [sp, #24]
 8001c48:	9307      	str	r3, [sp, #28]
  if(uartHandle->Instance==USART1)
 8001c4a:	6803      	ldr	r3, [r0, #0]
 8001c4c:	4a27      	ldr	r2, [pc, #156]	; (8001cec <HAL_UART_MspInit+0xb0>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d004      	beq.n	8001c5c <HAL_UART_MspInit+0x20>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(uartHandle->Instance==USART2)
 8001c52:	4a27      	ldr	r2, [pc, #156]	; (8001cf0 <HAL_UART_MspInit+0xb4>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d02b      	beq.n	8001cb0 <HAL_UART_MspInit+0x74>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001c58:	b008      	add	sp, #32
 8001c5a:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c5c:	4b25      	ldr	r3, [pc, #148]	; (8001cf4 <HAL_UART_MspInit+0xb8>)
 8001c5e:	699a      	ldr	r2, [r3, #24]
 8001c60:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001c64:	619a      	str	r2, [r3, #24]
 8001c66:	699a      	ldr	r2, [r3, #24]
 8001c68:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001c6c:	9200      	str	r2, [sp, #0]
 8001c6e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c70:	699a      	ldr	r2, [r3, #24]
 8001c72:	f042 0204 	orr.w	r2, r2, #4
 8001c76:	619a      	str	r2, [r3, #24]
 8001c78:	699b      	ldr	r3, [r3, #24]
 8001c7a:	f003 0304 	and.w	r3, r3, #4
 8001c7e:	9301      	str	r3, [sp, #4]
 8001c80:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001c82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c86:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c88:	2302      	movs	r3, #2
 8001c8a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c90:	4c19      	ldr	r4, [pc, #100]	; (8001cf8 <HAL_UART_MspInit+0xbc>)
 8001c92:	a904      	add	r1, sp, #16
 8001c94:	4620      	mov	r0, r4
 8001c96:	f000 fb1d 	bl	80022d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001c9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c9e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca4:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ca6:	a904      	add	r1, sp, #16
 8001ca8:	4620      	mov	r0, r4
 8001caa:	f000 fb13 	bl	80022d4 <HAL_GPIO_Init>
 8001cae:	e7d3      	b.n	8001c58 <HAL_UART_MspInit+0x1c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001cb0:	4b10      	ldr	r3, [pc, #64]	; (8001cf4 <HAL_UART_MspInit+0xb8>)
 8001cb2:	69da      	ldr	r2, [r3, #28]
 8001cb4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001cb8:	61da      	str	r2, [r3, #28]
 8001cba:	69da      	ldr	r2, [r3, #28]
 8001cbc:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001cc0:	9202      	str	r2, [sp, #8]
 8001cc2:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cc4:	699a      	ldr	r2, [r3, #24]
 8001cc6:	f042 0204 	orr.w	r2, r2, #4
 8001cca:	619a      	str	r2, [r3, #24]
 8001ccc:	699b      	ldr	r3, [r3, #24]
 8001cce:	f003 0304 	and.w	r3, r3, #4
 8001cd2:	9303      	str	r3, [sp, #12]
 8001cd4:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001cd6:	2304      	movs	r3, #4
 8001cd8:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cda:	2312      	movs	r3, #18
 8001cdc:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ce2:	a904      	add	r1, sp, #16
 8001ce4:	4804      	ldr	r0, [pc, #16]	; (8001cf8 <HAL_UART_MspInit+0xbc>)
 8001ce6:	f000 faf5 	bl	80022d4 <HAL_GPIO_Init>
}
 8001cea:	e7b5      	b.n	8001c58 <HAL_UART_MspInit+0x1c>
 8001cec:	40013800 	.word	0x40013800
 8001cf0:	40004400 	.word	0x40004400
 8001cf4:	40021000 	.word	0x40021000
 8001cf8:	40010800 	.word	0x40010800

08001cfc <UartSend>:
{
	HAL_UART_Transmit(&huart1, (uint8_t*) Message, strlen(Message), 20);
}

void UartSend(char * Message)
{
 8001cfc:	b510      	push	{r4, lr}
 8001cfe:	4604      	mov	r4, r0
	GSM.ReceivedState = 0;
 8001d00:	4b07      	ldr	r3, [pc, #28]	; (8001d20 <UartSend+0x24>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	721a      	strb	r2, [r3, #8]
	HAL_UART_Transmit_IT(&huart1, (uint8_t*) Message, strlen(Message));
 8001d06:	f7fe fa2d 	bl	8000164 <strlen>
 8001d0a:	b282      	uxth	r2, r0
 8001d0c:	4621      	mov	r1, r4
 8001d0e:	4805      	ldr	r0, [pc, #20]	; (8001d24 <UartSend+0x28>)
 8001d10:	f002 fc2b 	bl	800456a <HAL_UART_Transmit_IT>
	*Uart1isBusyPtr = 1;
 8001d14:	4b04      	ldr	r3, [pc, #16]	; (8001d28 <UartSend+0x2c>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	2201      	movs	r2, #1
 8001d1a:	701a      	strb	r2, [r3, #0]
}
 8001d1c:	bd10      	pop	{r4, pc}
 8001d1e:	bf00      	nop
 8001d20:	20000f08 	.word	0x20000f08
 8001d24:	200016e4 	.word	0x200016e4
 8001d28:	20000090 	.word	0x20000090

08001d2c <UartSendWoRxCtrl>:

void UartSendWoRxCtrl(char * Message)
{
 8001d2c:	b510      	push	{r4, lr}
 8001d2e:	4604      	mov	r4, r0
	HAL_UART_Transmit_IT(&huart1, (uint8_t*) Message, strlen(Message));
 8001d30:	f7fe fa18 	bl	8000164 <strlen>
 8001d34:	b282      	uxth	r2, r0
 8001d36:	4621      	mov	r1, r4
 8001d38:	4803      	ldr	r0, [pc, #12]	; (8001d48 <UartSendWoRxCtrl+0x1c>)
 8001d3a:	f002 fc16 	bl	800456a <HAL_UART_Transmit_IT>
	*Uart1isBusyPtr = 1;
 8001d3e:	4b03      	ldr	r3, [pc, #12]	; (8001d4c <UartSendWoRxCtrl+0x20>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	2201      	movs	r2, #1
 8001d44:	701a      	strb	r2, [r3, #0]
}
 8001d46:	bd10      	pop	{r4, pc}
 8001d48:	200016e4 	.word	0x200016e4
 8001d4c:	20000090 	.word	0x20000090

08001d50 <Temperature100ToString>:

void Temperature100ToString(int32_t temp, char *StringBuf)
{
 8001d50:	b508      	push	{r3, lr}
 8001d52:	4603      	mov	r3, r0
 8001d54:	4608      	mov	r0, r1
	int16_t Decimal;
	uint16_t Fractial;

	Decimal = temp/100;
 8001d56:	4a10      	ldr	r2, [pc, #64]	; (8001d98 <Temperature100ToString+0x48>)
 8001d58:	fb82 1203 	smull	r1, r2, r2, r3
 8001d5c:	ea4f 7ce3 	mov.w	ip, r3, asr #31
 8001d60:	ebcc 1c62 	rsb	ip, ip, r2, asr #5
 8001d64:	fa0f f28c 	sxth.w	r2, ip

	if(temp>=0)
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	db0c      	blt.n	8001d86 <Temperature100ToString+0x36>
	{
		Fractial = temp - Decimal * 100;
 8001d6c:	ebcc 214c 	rsb	r1, ip, ip, lsl #9
 8001d70:	eb0c 0181 	add.w	r1, ip, r1, lsl #2
 8001d74:	ebcc 0cc1 	rsb	ip, ip, r1, lsl #3
 8001d78:	eb03 038c 	add.w	r3, r3, ip, lsl #2
 8001d7c:	b29b      	uxth	r3, r3
	else
	{
		Fractial = (temp * -1) - ((Decimal * -1) * 100);
	}

	sprintf(StringBuf, "%.2i.%.2u", Decimal, Fractial);
 8001d7e:	4907      	ldr	r1, [pc, #28]	; (8001d9c <Temperature100ToString+0x4c>)
 8001d80:	f005 fa5c 	bl	800723c <siprintf>
}
 8001d84:	bd08      	pop	{r3, pc}
		Fractial = (temp * -1) - ((Decimal * -1) * 100);
 8001d86:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8001d8a:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8001d8e:	ebc3 038c 	rsb	r3, r3, ip, lsl #2
 8001d92:	b29b      	uxth	r3, r3
 8001d94:	e7f3      	b.n	8001d7e <Temperature100ToString+0x2e>
 8001d96:	bf00      	nop
 8001d98:	51eb851f 	.word	0x51eb851f
 8001d9c:	0800b10c 	.word	0x0800b10c

08001da0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001da0:	480c      	ldr	r0, [pc, #48]	; (8001dd4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001da2:	490d      	ldr	r1, [pc, #52]	; (8001dd8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001da4:	4a0d      	ldr	r2, [pc, #52]	; (8001ddc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001da6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001da8:	e002      	b.n	8001db0 <LoopCopyDataInit>

08001daa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001daa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dae:	3304      	adds	r3, #4

08001db0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001db0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001db2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001db4:	d3f9      	bcc.n	8001daa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001db6:	4a0a      	ldr	r2, [pc, #40]	; (8001de0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001db8:	4c0a      	ldr	r4, [pc, #40]	; (8001de4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001dba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dbc:	e001      	b.n	8001dc2 <LoopFillZerobss>

08001dbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dc0:	3204      	adds	r2, #4

08001dc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dc4:	d3fb      	bcc.n	8001dbe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001dc6:	f7ff fe63 	bl	8001a90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001dca:	f004 fd9d 	bl	8006908 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001dce:	f7ff fba7 	bl	8001520 <main>
  bx lr
 8001dd2:	4770      	bx	lr
  ldr r0, =_sdata
 8001dd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dd8:	200003f0 	.word	0x200003f0
  ldr r2, =_sidata
 8001ddc:	0800b660 	.word	0x0800b660
  ldr r2, =_sbss
 8001de0:	200003f0 	.word	0x200003f0
  ldr r4, =_ebss
 8001de4:	20002574 	.word	0x20002574

08001de8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001de8:	e7fe      	b.n	8001de8 <ADC1_2_IRQHandler>
	...

08001dec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dec:	b510      	push	{r4, lr}
 8001dee:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001df0:	4b0e      	ldr	r3, [pc, #56]	; (8001e2c <HAL_InitTick+0x40>)
 8001df2:	7818      	ldrb	r0, [r3, #0]
 8001df4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001df8:	fbb3 f3f0 	udiv	r3, r3, r0
 8001dfc:	4a0c      	ldr	r2, [pc, #48]	; (8001e30 <HAL_InitTick+0x44>)
 8001dfe:	6810      	ldr	r0, [r2, #0]
 8001e00:	fbb0 f0f3 	udiv	r0, r0, r3
 8001e04:	f000 f892 	bl	8001f2c <HAL_SYSTICK_Config>
 8001e08:	b968      	cbnz	r0, 8001e26 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e0a:	2c0f      	cmp	r4, #15
 8001e0c:	d901      	bls.n	8001e12 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8001e0e:	2001      	movs	r0, #1
 8001e10:	e00a      	b.n	8001e28 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e12:	2200      	movs	r2, #0
 8001e14:	4621      	mov	r1, r4
 8001e16:	f04f 30ff 	mov.w	r0, #4294967295
 8001e1a:	f000 f843 	bl	8001ea4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e1e:	4b05      	ldr	r3, [pc, #20]	; (8001e34 <HAL_InitTick+0x48>)
 8001e20:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e22:	2000      	movs	r0, #0
 8001e24:	e000      	b.n	8001e28 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8001e26:	2001      	movs	r0, #1
}
 8001e28:	bd10      	pop	{r4, pc}
 8001e2a:	bf00      	nop
 8001e2c:	2000009c 	.word	0x2000009c
 8001e30:	20000098 	.word	0x20000098
 8001e34:	200000a0 	.word	0x200000a0

08001e38 <HAL_Init>:
{
 8001e38:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e3a:	4a07      	ldr	r2, [pc, #28]	; (8001e58 <HAL_Init+0x20>)
 8001e3c:	6813      	ldr	r3, [r2, #0]
 8001e3e:	f043 0310 	orr.w	r3, r3, #16
 8001e42:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e44:	2003      	movs	r0, #3
 8001e46:	f000 f81b 	bl	8001e80 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e4a:	200f      	movs	r0, #15
 8001e4c:	f7ff ffce 	bl	8001dec <HAL_InitTick>
  HAL_MspInit();
 8001e50:	f7ff fd88 	bl	8001964 <HAL_MspInit>
}
 8001e54:	2000      	movs	r0, #0
 8001e56:	bd08      	pop	{r3, pc}
 8001e58:	40022000 	.word	0x40022000

08001e5c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001e5c:	4a03      	ldr	r2, [pc, #12]	; (8001e6c <HAL_IncTick+0x10>)
 8001e5e:	6811      	ldr	r1, [r2, #0]
 8001e60:	4b03      	ldr	r3, [pc, #12]	; (8001e70 <HAL_IncTick+0x14>)
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	440b      	add	r3, r1
 8001e66:	6013      	str	r3, [r2, #0]
}
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	2000176c 	.word	0x2000176c
 8001e70:	2000009c 	.word	0x2000009c

08001e74 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001e74:	4b01      	ldr	r3, [pc, #4]	; (8001e7c <HAL_GetTick+0x8>)
 8001e76:	6818      	ldr	r0, [r3, #0]
}
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	2000176c 	.word	0x2000176c

08001e80 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e80:	4907      	ldr	r1, [pc, #28]	; (8001ea0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001e82:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001e84:	0203      	lsls	r3, r0, #8
 8001e86:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e8a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001e8e:	0412      	lsls	r2, r2, #16
 8001e90:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001e9c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001e9e:	4770      	bx	lr
 8001ea0:	e000ed00 	.word	0xe000ed00

08001ea4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ea4:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ea6:	4b18      	ldr	r3, [pc, #96]	; (8001f08 <HAL_NVIC_SetPriority+0x64>)
 8001ea8:	68db      	ldr	r3, [r3, #12]
 8001eaa:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001eae:	f1c3 0c07 	rsb	ip, r3, #7
 8001eb2:	f1bc 0f04 	cmp.w	ip, #4
 8001eb6:	bf28      	it	cs
 8001eb8:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ebc:	f103 0e04 	add.w	lr, r3, #4
 8001ec0:	f1be 0f06 	cmp.w	lr, #6
 8001ec4:	bf8c      	ite	hi
 8001ec6:	3b03      	subhi	r3, #3
 8001ec8:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eca:	f04f 3eff 	mov.w	lr, #4294967295
 8001ece:	fa0e fc0c 	lsl.w	ip, lr, ip
 8001ed2:	ea21 010c 	bic.w	r1, r1, ip
 8001ed6:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ed8:	fa0e f303 	lsl.w	r3, lr, r3
 8001edc:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ee0:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 8001ee2:	2800      	cmp	r0, #0
 8001ee4:	db09      	blt.n	8001efa <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ee6:	0109      	lsls	r1, r1, #4
 8001ee8:	b2c9      	uxtb	r1, r1
 8001eea:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001eee:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001ef2:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001ef6:	f85d fb04 	ldr.w	pc, [sp], #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001efa:	f000 000f 	and.w	r0, r0, #15
 8001efe:	0109      	lsls	r1, r1, #4
 8001f00:	b2c9      	uxtb	r1, r1
 8001f02:	4b02      	ldr	r3, [pc, #8]	; (8001f0c <HAL_NVIC_SetPriority+0x68>)
 8001f04:	5419      	strb	r1, [r3, r0]
 8001f06:	e7f6      	b.n	8001ef6 <HAL_NVIC_SetPriority+0x52>
 8001f08:	e000ed00 	.word	0xe000ed00
 8001f0c:	e000ed14 	.word	0xe000ed14

08001f10 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001f10:	2800      	cmp	r0, #0
 8001f12:	db08      	blt.n	8001f26 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f14:	0942      	lsrs	r2, r0, #5
 8001f16:	f000 001f 	and.w	r0, r0, #31
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	fa03 f000 	lsl.w	r0, r3, r0
 8001f20:	4b01      	ldr	r3, [pc, #4]	; (8001f28 <HAL_NVIC_EnableIRQ+0x18>)
 8001f22:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001f26:	4770      	bx	lr
 8001f28:	e000e100 	.word	0xe000e100

08001f2c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f2c:	3801      	subs	r0, #1
 8001f2e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001f32:	d20b      	bcs.n	8001f4c <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f34:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001f38:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f3a:	4a05      	ldr	r2, [pc, #20]	; (8001f50 <HAL_SYSTICK_Config+0x24>)
 8001f3c:	21f0      	movs	r1, #240	; 0xf0
 8001f3e:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f42:	2000      	movs	r0, #0
 8001f44:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f46:	2207      	movs	r2, #7
 8001f48:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f4a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001f4c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001f4e:	4770      	bx	lr
 8001f50:	e000ed00 	.word	0xe000ed00

08001f54 <HAL_DMA_Abort>:
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f54:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8001f58:	2b02      	cmp	r3, #2
 8001f5a:	d006      	beq.n	8001f6a <HAL_DMA_Abort+0x16>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f5c:	2304      	movs	r3, #4
 8001f5e:	6383      	str	r3, [r0, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f60:	2300      	movs	r3, #0
 8001f62:	f880 3020 	strb.w	r3, [r0, #32]
    
    return HAL_ERROR;
 8001f66:	2001      	movs	r0, #1
 8001f68:	4770      	bx	lr
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f6a:	6802      	ldr	r2, [r0, #0]
 8001f6c:	6813      	ldr	r3, [r2, #0]
 8001f6e:	f023 030e 	bic.w	r3, r3, #14
 8001f72:	6013      	str	r3, [r2, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f74:	6802      	ldr	r2, [r0, #0]
 8001f76:	6813      	ldr	r3, [r2, #0]
 8001f78:	f023 0301 	bic.w	r3, r3, #1
 8001f7c:	6013      	str	r3, [r2, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001f7e:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8001f80:	2201      	movs	r2, #1
 8001f82:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001f84:	fa02 f303 	lsl.w	r3, r2, r3
 8001f88:	604b      	str	r3, [r1, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f8a:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001f8e:	2300      	movs	r3, #0
 8001f90:	f880 3020 	strb.w	r3, [r0, #32]
  
  return status; 
 8001f94:	4618      	mov	r0, r3
}
 8001f96:	4770      	bx	lr

08001f98 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001f98:	b508      	push	{r3, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001f9a:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d003      	beq.n	8001faa <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fa2:	2304      	movs	r3, #4
 8001fa4:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 8001fa6:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 8001fa8:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001faa:	6802      	ldr	r2, [r0, #0]
 8001fac:	6813      	ldr	r3, [r2, #0]
 8001fae:	f023 030e 	bic.w	r3, r3, #14
 8001fb2:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8001fb4:	6802      	ldr	r2, [r0, #0]
 8001fb6:	6813      	ldr	r3, [r2, #0]
 8001fb8:	f023 0301 	bic.w	r3, r3, #1
 8001fbc:	6013      	str	r3, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001fbe:	6803      	ldr	r3, [r0, #0]
 8001fc0:	4a18      	ldr	r2, [pc, #96]	; (8002024 <HAL_DMA_Abort_IT+0x8c>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d013      	beq.n	8001fee <HAL_DMA_Abort_IT+0x56>
 8001fc6:	3214      	adds	r2, #20
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d01e      	beq.n	800200a <HAL_DMA_Abort_IT+0x72>
 8001fcc:	3214      	adds	r2, #20
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d01d      	beq.n	800200e <HAL_DMA_Abort_IT+0x76>
 8001fd2:	3214      	adds	r2, #20
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d01d      	beq.n	8002014 <HAL_DMA_Abort_IT+0x7c>
 8001fd8:	3214      	adds	r2, #20
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d01d      	beq.n	800201a <HAL_DMA_Abort_IT+0x82>
 8001fde:	3214      	adds	r2, #20
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	bf0c      	ite	eq
 8001fe4:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8001fe8:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 8001fec:	e000      	b.n	8001ff0 <HAL_DMA_Abort_IT+0x58>
 8001fee:	2301      	movs	r3, #1
 8001ff0:	4a0d      	ldr	r2, [pc, #52]	; (8002028 <HAL_DMA_Abort_IT+0x90>)
 8001ff2:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8002000:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002002:	b16b      	cbz	r3, 8002020 <HAL_DMA_Abort_IT+0x88>
      hdma->XferAbortCallback(hdma);
 8002004:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8002006:	2000      	movs	r0, #0
 8002008:	e7ce      	b.n	8001fa8 <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800200a:	2310      	movs	r3, #16
 800200c:	e7f0      	b.n	8001ff0 <HAL_DMA_Abort_IT+0x58>
 800200e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002012:	e7ed      	b.n	8001ff0 <HAL_DMA_Abort_IT+0x58>
 8002014:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002018:	e7ea      	b.n	8001ff0 <HAL_DMA_Abort_IT+0x58>
 800201a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800201e:	e7e7      	b.n	8001ff0 <HAL_DMA_Abort_IT+0x58>
  HAL_StatusTypeDef status = HAL_OK;
 8002020:	2000      	movs	r0, #0
 8002022:	e7c1      	b.n	8001fa8 <HAL_DMA_Abort_IT+0x10>
 8002024:	40020008 	.word	0x40020008
 8002028:	40020000 	.word	0x40020000

0800202c <FLASH_SetErrorCode>:
  uint32_t flags = 0U;
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800202c:	4b14      	ldr	r3, [pc, #80]	; (8002080 <FLASH_SetErrorCode+0x54>)
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	f013 0310 	ands.w	r3, r3, #16
 8002034:	d005      	beq.n	8002042 <FLASH_SetErrorCode+0x16>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002036:	4a13      	ldr	r2, [pc, #76]	; (8002084 <FLASH_SetErrorCode+0x58>)
 8002038:	69d3      	ldr	r3, [r2, #28]
 800203a:	f043 0302 	orr.w	r3, r3, #2
 800203e:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8002040:	2310      	movs	r3, #16
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002042:	4a0f      	ldr	r2, [pc, #60]	; (8002080 <FLASH_SetErrorCode+0x54>)
 8002044:	68d2      	ldr	r2, [r2, #12]
 8002046:	f012 0f04 	tst.w	r2, #4
 800204a:	d006      	beq.n	800205a <FLASH_SetErrorCode+0x2e>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800204c:	490d      	ldr	r1, [pc, #52]	; (8002084 <FLASH_SetErrorCode+0x58>)
 800204e:	69ca      	ldr	r2, [r1, #28]
 8002050:	f042 0201 	orr.w	r2, r2, #1
 8002054:	61ca      	str	r2, [r1, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8002056:	f043 0304 	orr.w	r3, r3, #4
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800205a:	4a09      	ldr	r2, [pc, #36]	; (8002080 <FLASH_SetErrorCode+0x54>)
 800205c:	69d2      	ldr	r2, [r2, #28]
 800205e:	f012 0f01 	tst.w	r2, #1
 8002062:	d009      	beq.n	8002078 <FLASH_SetErrorCode+0x4c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8002064:	4907      	ldr	r1, [pc, #28]	; (8002084 <FLASH_SetErrorCode+0x58>)
 8002066:	69ca      	ldr	r2, [r1, #28]
 8002068:	f042 0204 	orr.w	r2, r2, #4
 800206c:	61ca      	str	r2, [r1, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800206e:	4904      	ldr	r1, [pc, #16]	; (8002080 <FLASH_SetErrorCode+0x54>)
 8002070:	69ca      	ldr	r2, [r1, #28]
 8002072:	f022 0201 	bic.w	r2, r2, #1
 8002076:	61ca      	str	r2, [r1, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002078:	4a01      	ldr	r2, [pc, #4]	; (8002080 <FLASH_SetErrorCode+0x54>)
 800207a:	60d3      	str	r3, [r2, #12]
}  
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	40022000 	.word	0x40022000
 8002084:	20001770 	.word	0x20001770

08002088 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002088:	4b08      	ldr	r3, [pc, #32]	; (80020ac <HAL_FLASH_Unlock+0x24>)
 800208a:	691b      	ldr	r3, [r3, #16]
 800208c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002090:	d009      	beq.n	80020a6 <HAL_FLASH_Unlock+0x1e>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002092:	4b06      	ldr	r3, [pc, #24]	; (80020ac <HAL_FLASH_Unlock+0x24>)
 8002094:	4a06      	ldr	r2, [pc, #24]	; (80020b0 <HAL_FLASH_Unlock+0x28>)
 8002096:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002098:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 800209c:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800209e:	6918      	ldr	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
 80020a0:	f3c0 10c0 	ubfx	r0, r0, #7, #1
 80020a4:	4770      	bx	lr
 80020a6:	2000      	movs	r0, #0
}
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	40022000 	.word	0x40022000
 80020b0:	45670123 	.word	0x45670123

080020b4 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80020b4:	4a03      	ldr	r2, [pc, #12]	; (80020c4 <HAL_FLASH_Lock+0x10>)
 80020b6:	6913      	ldr	r3, [r2, #16]
 80020b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020bc:	6113      	str	r3, [r2, #16]
}
 80020be:	2000      	movs	r0, #0
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	40022000 	.word	0x40022000

080020c8 <HAL_FLASH_GetError>:
   return pFlash.ErrorCode;
 80020c8:	4b01      	ldr	r3, [pc, #4]	; (80020d0 <HAL_FLASH_GetError+0x8>)
 80020ca:	69d8      	ldr	r0, [r3, #28]
}
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	20001770 	.word	0x20001770

080020d4 <FLASH_WaitForLastOperation>:
{
 80020d4:	b570      	push	{r4, r5, r6, lr}
 80020d6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80020d8:	f7ff fecc 	bl	8001e74 <HAL_GetTick>
 80020dc:	4606      	mov	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80020de:	4d17      	ldr	r5, [pc, #92]	; (800213c <FLASH_WaitForLastOperation+0x68>)
 80020e0:	68eb      	ldr	r3, [r5, #12]
 80020e2:	f013 0f01 	tst.w	r3, #1
 80020e6:	d00a      	beq.n	80020fe <FLASH_WaitForLastOperation+0x2a>
    if (Timeout != HAL_MAX_DELAY)
 80020e8:	f1b4 3fff 	cmp.w	r4, #4294967295
 80020ec:	d0f8      	beq.n	80020e0 <FLASH_WaitForLastOperation+0xc>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80020ee:	b31c      	cbz	r4, 8002138 <FLASH_WaitForLastOperation+0x64>
 80020f0:	f7ff fec0 	bl	8001e74 <HAL_GetTick>
 80020f4:	1b80      	subs	r0, r0, r6
 80020f6:	42a0      	cmp	r0, r4
 80020f8:	d9f2      	bls.n	80020e0 <FLASH_WaitForLastOperation+0xc>
        return HAL_TIMEOUT;
 80020fa:	2003      	movs	r0, #3
 80020fc:	e01b      	b.n	8002136 <FLASH_WaitForLastOperation+0x62>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80020fe:	4b0f      	ldr	r3, [pc, #60]	; (800213c <FLASH_WaitForLastOperation+0x68>)
 8002100:	68db      	ldr	r3, [r3, #12]
 8002102:	f013 0f20 	tst.w	r3, #32
 8002106:	d002      	beq.n	800210e <FLASH_WaitForLastOperation+0x3a>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002108:	4b0c      	ldr	r3, [pc, #48]	; (800213c <FLASH_WaitForLastOperation+0x68>)
 800210a:	2220      	movs	r2, #32
 800210c:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800210e:	4b0b      	ldr	r3, [pc, #44]	; (800213c <FLASH_WaitForLastOperation+0x68>)
 8002110:	68db      	ldr	r3, [r3, #12]
 8002112:	f013 0f10 	tst.w	r3, #16
 8002116:	d10b      	bne.n	8002130 <FLASH_WaitForLastOperation+0x5c>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002118:	4b08      	ldr	r3, [pc, #32]	; (800213c <FLASH_WaitForLastOperation+0x68>)
 800211a:	69db      	ldr	r3, [r3, #28]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800211c:	f013 0f01 	tst.w	r3, #1
 8002120:	d106      	bne.n	8002130 <FLASH_WaitForLastOperation+0x5c>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002122:	4b06      	ldr	r3, [pc, #24]	; (800213c <FLASH_WaitForLastOperation+0x68>)
 8002124:	68db      	ldr	r3, [r3, #12]
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002126:	f013 0f04 	tst.w	r3, #4
 800212a:	d101      	bne.n	8002130 <FLASH_WaitForLastOperation+0x5c>
  return HAL_OK;
 800212c:	2000      	movs	r0, #0
 800212e:	e002      	b.n	8002136 <FLASH_WaitForLastOperation+0x62>
    FLASH_SetErrorCode();
 8002130:	f7ff ff7c 	bl	800202c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002134:	2001      	movs	r0, #1
}
 8002136:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_TIMEOUT;
 8002138:	2003      	movs	r0, #3
 800213a:	e7fc      	b.n	8002136 <FLASH_WaitForLastOperation+0x62>
 800213c:	40022000 	.word	0x40022000

08002140 <HAL_FLASH_Program>:
{
 8002140:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002144:	461f      	mov	r7, r3
  __HAL_LOCK(&pFlash);
 8002146:	4b26      	ldr	r3, [pc, #152]	; (80021e0 <HAL_FLASH_Program+0xa0>)
 8002148:	7e1b      	ldrb	r3, [r3, #24]
 800214a:	2b01      	cmp	r3, #1
 800214c:	d045      	beq.n	80021da <HAL_FLASH_Program+0x9a>
 800214e:	4604      	mov	r4, r0
 8002150:	460d      	mov	r5, r1
 8002152:	4690      	mov	r8, r2
 8002154:	4b22      	ldr	r3, [pc, #136]	; (80021e0 <HAL_FLASH_Program+0xa0>)
 8002156:	2201      	movs	r2, #1
 8002158:	761a      	strb	r2, [r3, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800215a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800215e:	f7ff ffb9 	bl	80020d4 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8002162:	4603      	mov	r3, r0
 8002164:	bb80      	cbnz	r0, 80021c8 <HAL_FLASH_Program+0x88>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002166:	2c01      	cmp	r4, #1
 8002168:	d034      	beq.n	80021d4 <HAL_FLASH_Program+0x94>
      nbiterations = 4U;
 800216a:	2c02      	cmp	r4, #2
 800216c:	bf0c      	ite	eq
 800216e:	f04f 0902 	moveq.w	r9, #2
 8002172:	f04f 0904 	movne.w	r9, #4
    for (index = 0U; index < nbiterations; index++)
 8002176:	eb05 0949 	add.w	r9, r5, r9, lsl #1
      nbiterations = 4U;
 800217a:	2400      	movs	r4, #0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800217c:	f8df b060 	ldr.w	fp, [pc, #96]	; 80021e0 <HAL_FLASH_Program+0xa0>
 8002180:	46a2      	mov	sl, r4
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002182:	4e18      	ldr	r6, [pc, #96]	; (80021e4 <HAL_FLASH_Program+0xa4>)
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8002184:	f1c4 0120 	rsb	r1, r4, #32
 8002188:	f1a4 0220 	sub.w	r2, r4, #32
 800218c:	fa28 f304 	lsr.w	r3, r8, r4
 8002190:	fa07 f101 	lsl.w	r1, r7, r1
 8002194:	430b      	orrs	r3, r1
 8002196:	fa27 f202 	lsr.w	r2, r7, r2
 800219a:	4313      	orrs	r3, r2
 800219c:	b29b      	uxth	r3, r3
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800219e:	f8cb a01c 	str.w	sl, [fp, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80021a2:	6932      	ldr	r2, [r6, #16]
 80021a4:	f042 0201 	orr.w	r2, r2, #1
 80021a8:	6132      	str	r2, [r6, #16]
  *(__IO uint16_t*)Address = Data;
 80021aa:	802b      	strh	r3, [r5, #0]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80021ac:	f24c 3050 	movw	r0, #50000	; 0xc350
 80021b0:	f7ff ff90 	bl	80020d4 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80021b4:	6933      	ldr	r3, [r6, #16]
 80021b6:	f023 0301 	bic.w	r3, r3, #1
 80021ba:	6133      	str	r3, [r6, #16]
      if (status != HAL_OK)
 80021bc:	4603      	mov	r3, r0
 80021be:	b918      	cbnz	r0, 80021c8 <HAL_FLASH_Program+0x88>
    for (index = 0U; index < nbiterations; index++)
 80021c0:	3410      	adds	r4, #16
 80021c2:	3502      	adds	r5, #2
 80021c4:	454d      	cmp	r5, r9
 80021c6:	d1dd      	bne.n	8002184 <HAL_FLASH_Program+0x44>
  __HAL_UNLOCK(&pFlash);
 80021c8:	4a05      	ldr	r2, [pc, #20]	; (80021e0 <HAL_FLASH_Program+0xa0>)
 80021ca:	2100      	movs	r1, #0
 80021cc:	7611      	strb	r1, [r2, #24]
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      nbiterations = 1U;
 80021d4:	f04f 0901 	mov.w	r9, #1
 80021d8:	e7cd      	b.n	8002176 <HAL_FLASH_Program+0x36>
  __HAL_LOCK(&pFlash);
 80021da:	2302      	movs	r3, #2
 80021dc:	e7f7      	b.n	80021ce <HAL_FLASH_Program+0x8e>
 80021de:	bf00      	nop
 80021e0:	20001770 	.word	0x20001770
 80021e4:	40022000 	.word	0x40022000

080021e8 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80021e8:	4b06      	ldr	r3, [pc, #24]	; (8002204 <FLASH_PageErase+0x1c>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80021ee:	4b06      	ldr	r3, [pc, #24]	; (8002208 <FLASH_PageErase+0x20>)
 80021f0:	691a      	ldr	r2, [r3, #16]
 80021f2:	f042 0202 	orr.w	r2, r2, #2
 80021f6:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80021f8:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80021fa:	691a      	ldr	r2, [r3, #16]
 80021fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002200:	611a      	str	r2, [r3, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8002202:	4770      	bx	lr
 8002204:	20001770 	.word	0x20001770
 8002208:	40022000 	.word	0x40022000

0800220c <HAL_FLASHEx_Erase>:
  __HAL_LOCK(&pFlash);
 800220c:	4b2f      	ldr	r3, [pc, #188]	; (80022cc <HAL_FLASHEx_Erase+0xc0>)
 800220e:	7e1b      	ldrb	r3, [r3, #24]
 8002210:	2b01      	cmp	r3, #1
 8002212:	d058      	beq.n	80022c6 <HAL_FLASHEx_Erase+0xba>
{
 8002214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002218:	4605      	mov	r5, r0
 800221a:	460f      	mov	r7, r1
  __HAL_LOCK(&pFlash);
 800221c:	4b2b      	ldr	r3, [pc, #172]	; (80022cc <HAL_FLASHEx_Erase+0xc0>)
 800221e:	2201      	movs	r2, #1
 8002220:	761a      	strb	r2, [r3, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002222:	6803      	ldr	r3, [r0, #0]
 8002224:	2b02      	cmp	r3, #2
 8002226:	d026      	beq.n	8002276 <HAL_FLASHEx_Erase+0x6a>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002228:	f24c 3050 	movw	r0, #50000	; 0xc350
 800222c:	f7ff ff52 	bl	80020d4 <FLASH_WaitForLastOperation>
 8002230:	2800      	cmp	r0, #0
 8002232:	d13f      	bne.n	80022b4 <HAL_FLASHEx_Erase+0xa8>
        *PageError = 0xFFFFFFFFU;
 8002234:	f04f 33ff 	mov.w	r3, #4294967295
 8002238:	603b      	str	r3, [r7, #0]
        for(address = pEraseInit->PageAddress;
 800223a:	68ac      	ldr	r4, [r5, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 800223c:	68eb      	ldr	r3, [r5, #12]
 800223e:	eb04 2383 	add.w	r3, r4, r3, lsl #10
        for(address = pEraseInit->PageAddress;
 8002242:	429c      	cmp	r4, r3
 8002244:	d23d      	bcs.n	80022c2 <HAL_FLASHEx_Erase+0xb6>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002246:	f24c 3850 	movw	r8, #50000	; 0xc350
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800224a:	4e21      	ldr	r6, [pc, #132]	; (80022d0 <HAL_FLASHEx_Erase+0xc4>)
          FLASH_PageErase(address);
 800224c:	4620      	mov	r0, r4
 800224e:	f7ff ffcb 	bl	80021e8 <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002252:	4640      	mov	r0, r8
 8002254:	f7ff ff3e 	bl	80020d4 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8002258:	6933      	ldr	r3, [r6, #16]
 800225a:	f023 0302 	bic.w	r3, r3, #2
 800225e:	6133      	str	r3, [r6, #16]
          if (status != HAL_OK)
 8002260:	4601      	mov	r1, r0
 8002262:	bb28      	cbnz	r0, 80022b0 <HAL_FLASHEx_Erase+0xa4>
            address += FLASH_PAGE_SIZE)
 8002264:	f504 6480 	add.w	r4, r4, #1024	; 0x400
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8002268:	68ea      	ldr	r2, [r5, #12]
 800226a:	68ab      	ldr	r3, [r5, #8]
 800226c:	eb03 2382 	add.w	r3, r3, r2, lsl #10
        for(address = pEraseInit->PageAddress;
 8002270:	42a3      	cmp	r3, r4
 8002272:	d8eb      	bhi.n	800224c <HAL_FLASHEx_Erase+0x40>
 8002274:	e01f      	b.n	80022b6 <HAL_FLASHEx_Erase+0xaa>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002276:	f24c 3050 	movw	r0, #50000	; 0xc350
 800227a:	f7ff ff2b 	bl	80020d4 <FLASH_WaitForLastOperation>
 800227e:	b108      	cbz	r0, 8002284 <HAL_FLASHEx_Erase+0x78>
  HAL_StatusTypeDef status = HAL_ERROR;
 8002280:	2101      	movs	r1, #1
 8002282:	e018      	b.n	80022b6 <HAL_FLASHEx_Erase+0xaa>
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002284:	4b11      	ldr	r3, [pc, #68]	; (80022cc <HAL_FLASHEx_Erase+0xc0>)
 8002286:	2200      	movs	r2, #0
 8002288:	61da      	str	r2, [r3, #28]
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800228a:	4c11      	ldr	r4, [pc, #68]	; (80022d0 <HAL_FLASHEx_Erase+0xc4>)
 800228c:	6923      	ldr	r3, [r4, #16]
 800228e:	f043 0304 	orr.w	r3, r3, #4
 8002292:	6123      	str	r3, [r4, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002294:	6923      	ldr	r3, [r4, #16]
 8002296:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800229a:	6123      	str	r3, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800229c:	f24c 3050 	movw	r0, #50000	; 0xc350
 80022a0:	f7ff ff18 	bl	80020d4 <FLASH_WaitForLastOperation>
 80022a4:	4601      	mov	r1, r0
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80022a6:	6923      	ldr	r3, [r4, #16]
 80022a8:	f023 0304 	bic.w	r3, r3, #4
 80022ac:	6123      	str	r3, [r4, #16]
 80022ae:	e002      	b.n	80022b6 <HAL_FLASHEx_Erase+0xaa>
            *PageError = address;
 80022b0:	603c      	str	r4, [r7, #0]
            break;
 80022b2:	e000      	b.n	80022b6 <HAL_FLASHEx_Erase+0xaa>
  HAL_StatusTypeDef status = HAL_ERROR;
 80022b4:	2101      	movs	r1, #1
  __HAL_UNLOCK(&pFlash);
 80022b6:	4b05      	ldr	r3, [pc, #20]	; (80022cc <HAL_FLASHEx_Erase+0xc0>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	761a      	strb	r2, [r3, #24]
}
 80022bc:	4608      	mov	r0, r1
 80022be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  HAL_StatusTypeDef status = HAL_ERROR;
 80022c2:	2101      	movs	r1, #1
 80022c4:	e7f7      	b.n	80022b6 <HAL_FLASHEx_Erase+0xaa>
  __HAL_LOCK(&pFlash);
 80022c6:	2102      	movs	r1, #2
}
 80022c8:	4608      	mov	r0, r1
 80022ca:	4770      	bx	lr
 80022cc:	20001770 	.word	0x20001770
 80022d0:	40022000 	.word	0x40022000

080022d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022d8:	b083      	sub	sp, #12
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022da:	f8d1 9000 	ldr.w	r9, [r1]
 80022de:	f1b9 0f00 	cmp.w	r9, #0
 80022e2:	f000 811f 	beq.w	8002524 <HAL_GPIO_Init+0x250>
 80022e6:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 80022e8:	4613      	mov	r3, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80022ea:	4e90      	ldr	r6, [pc, #576]	; (800252c <HAL_GPIO_Init+0x258>)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80022ec:	4c90      	ldr	r4, [pc, #576]	; (8002530 <HAL_GPIO_Init+0x25c>)
      switch (GPIO_Init->Mode)
 80022ee:	4d91      	ldr	r5, [pc, #580]	; (8002534 <HAL_GPIO_Init+0x260>)
 80022f0:	f8df e244 	ldr.w	lr, [pc, #580]	; 8002538 <HAL_GPIO_Init+0x264>
 80022f4:	4694      	mov	ip, r2
 80022f6:	e0ba      	b.n	800246e <HAL_GPIO_Init+0x19a>
 80022f8:	f04f 0c00 	mov.w	ip, #0
 80022fc:	e025      	b.n	800234a <HAL_GPIO_Init+0x76>
 80022fe:	45a9      	cmp	r9, r5
 8002300:	d00f      	beq.n	8002322 <HAL_GPIO_Init+0x4e>
 8002302:	d906      	bls.n	8002312 <HAL_GPIO_Init+0x3e>
 8002304:	45f1      	cmp	r9, lr
 8002306:	d00c      	beq.n	8002322 <HAL_GPIO_Init+0x4e>
 8002308:	f8df a230 	ldr.w	sl, [pc, #560]	; 800253c <HAL_GPIO_Init+0x268>
 800230c:	45d1      	cmp	r9, sl
 800230e:	d008      	beq.n	8002322 <HAL_GPIO_Init+0x4e>
 8002310:	e01b      	b.n	800234a <HAL_GPIO_Init+0x76>
 8002312:	f8df a22c 	ldr.w	sl, [pc, #556]	; 8002540 <HAL_GPIO_Init+0x26c>
 8002316:	45d1      	cmp	r9, sl
 8002318:	d003      	beq.n	8002322 <HAL_GPIO_Init+0x4e>
 800231a:	f50a 2a70 	add.w	sl, sl, #983040	; 0xf0000
 800231e:	45d1      	cmp	r9, sl
 8002320:	d10f      	bne.n	8002342 <HAL_GPIO_Init+0x6e>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002322:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8002326:	f1bc 0f00 	cmp.w	ip, #0
 800232a:	f000 80ef 	beq.w	800250c <HAL_GPIO_Init+0x238>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800232e:	f1bc 0f01 	cmp.w	ip, #1
            GPIOx->BSRR = ioposition;
 8002332:	bf0c      	ite	eq
 8002334:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8002338:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800233c:	f04f 0c08 	mov.w	ip, #8
 8002340:	e003      	b.n	800234a <HAL_GPIO_Init+0x76>
      switch (GPIO_Init->Mode)
 8002342:	f5aa 1a80 	sub.w	sl, sl, #1048576	; 0x100000
 8002346:	45d1      	cmp	r9, sl
 8002348:	d0eb      	beq.n	8002322 <HAL_GPIO_Init+0x4e>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800234a:	2fff      	cmp	r7, #255	; 0xff
 800234c:	bf99      	ittee	ls
 800234e:	4681      	movls	r9, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002350:	4692      	movls	sl, r2
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002352:	f100 0904 	addhi.w	r9, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002356:	f1a2 0a20 	subhi.w	sl, r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800235a:	f8d9 8000 	ldr.w	r8, [r9]
 800235e:	f04f 0b0f 	mov.w	fp, #15
 8002362:	fa0b fb0a 	lsl.w	fp, fp, sl
 8002366:	ea28 080b 	bic.w	r8, r8, fp
 800236a:	fa0c fa0a 	lsl.w	sl, ip, sl
 800236e:	ea48 080a 	orr.w	r8, r8, sl
 8002372:	f8c9 8000 	str.w	r8, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002376:	f8d1 8004 	ldr.w	r8, [r1, #4]
 800237a:	f018 5f80 	tst.w	r8, #268435456	; 0x10000000
 800237e:	d06f      	beq.n	8002460 <HAL_GPIO_Init+0x18c>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002380:	f8d6 8018 	ldr.w	r8, [r6, #24]
 8002384:	f048 0801 	orr.w	r8, r8, #1
 8002388:	f8c6 8018 	str.w	r8, [r6, #24]
 800238c:	f8d6 8018 	ldr.w	r8, [r6, #24]
 8002390:	f008 0801 	and.w	r8, r8, #1
 8002394:	f8cd 8004 	str.w	r8, [sp, #4]
 8002398:	f8dd 8004 	ldr.w	r8, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 800239c:	f023 0803 	bic.w	r8, r3, #3
 80023a0:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 80023a4:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
 80023a8:	f8d8 a008 	ldr.w	sl, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80023ac:	f003 0903 	and.w	r9, r3, #3
 80023b0:	ea4f 0b89 	mov.w	fp, r9, lsl #2
 80023b4:	f04f 090f 	mov.w	r9, #15
 80023b8:	fa09 f90b 	lsl.w	r9, r9, fp
 80023bc:	ea2a 0a09 	bic.w	sl, sl, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80023c0:	f8df 9180 	ldr.w	r9, [pc, #384]	; 8002544 <HAL_GPIO_Init+0x270>
 80023c4:	4548      	cmp	r0, r9
 80023c6:	f000 80a4 	beq.w	8002512 <HAL_GPIO_Init+0x23e>
 80023ca:	f509 6980 	add.w	r9, r9, #1024	; 0x400
 80023ce:	4548      	cmp	r0, r9
 80023d0:	f000 80a2 	beq.w	8002518 <HAL_GPIO_Init+0x244>
 80023d4:	f509 6980 	add.w	r9, r9, #1024	; 0x400
 80023d8:	4548      	cmp	r0, r9
 80023da:	f000 80a0 	beq.w	800251e <HAL_GPIO_Init+0x24a>
 80023de:	f509 6980 	add.w	r9, r9, #1024	; 0x400
 80023e2:	4548      	cmp	r0, r9
 80023e4:	bf0c      	ite	eq
 80023e6:	f04f 0903 	moveq.w	r9, #3
 80023ea:	f04f 0904 	movne.w	r9, #4
 80023ee:	fa09 f90b 	lsl.w	r9, r9, fp
 80023f2:	ea49 090a 	orr.w	r9, r9, sl
        AFIO->EXTICR[position >> 2u] = temp;
 80023f6:	f8c8 9008 	str.w	r9, [r8, #8]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023fa:	f8d1 8004 	ldr.w	r8, [r1, #4]
 80023fe:	f418 3f80 	tst.w	r8, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8002402:	f8d4 8000 	ldr.w	r8, [r4]
 8002406:	bf14      	ite	ne
 8002408:	ea48 0807 	orrne.w	r8, r8, r7
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800240c:	ea28 0807 	biceq.w	r8, r8, r7
 8002410:	f8c4 8000 	str.w	r8, [r4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002414:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8002418:	f418 3f00 	tst.w	r8, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 800241c:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8002420:	bf14      	ite	ne
 8002422:	ea48 0807 	orrne.w	r8, r8, r7
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002426:	ea28 0807 	biceq.w	r8, r8, r7
 800242a:	f8c4 8004 	str.w	r8, [r4, #4]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800242e:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8002432:	f418 1f80 	tst.w	r8, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8002436:	f8d4 8008 	ldr.w	r8, [r4, #8]
 800243a:	bf14      	ite	ne
 800243c:	ea48 0807 	orrne.w	r8, r8, r7
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002440:	ea28 0807 	biceq.w	r8, r8, r7
 8002444:	f8c4 8008 	str.w	r8, [r4, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002448:	f8d1 8004 	ldr.w	r8, [r1, #4]
 800244c:	f418 1f00 	tst.w	r8, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8002450:	f8d4 800c 	ldr.w	r8, [r4, #12]
 8002454:	bf14      	ite	ne
 8002456:	ea48 0707 	orrne.w	r7, r8, r7
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800245a:	ea28 0707 	biceq.w	r7, r8, r7
 800245e:	60e7      	str	r7, [r4, #12]
        }
      }
    }

	position++;
 8002460:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002462:	f8d1 9000 	ldr.w	r9, [r1]
 8002466:	3204      	adds	r2, #4
 8002468:	fa39 f703 	lsrs.w	r7, r9, r3
 800246c:	d05a      	beq.n	8002524 <HAL_GPIO_Init+0x250>
    ioposition = (0x01uL << position);
 800246e:	f04f 0801 	mov.w	r8, #1
 8002472:	fa08 f803 	lsl.w	r8, r8, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002476:	ea08 0709 	and.w	r7, r8, r9
    if (iocurrent == ioposition)
 800247a:	ea38 0909 	bics.w	r9, r8, r9
 800247e:	d1ef      	bne.n	8002460 <HAL_GPIO_Init+0x18c>
      switch (GPIO_Init->Mode)
 8002480:	f8d1 9004 	ldr.w	r9, [r1, #4]
 8002484:	f1b9 0f12 	cmp.w	r9, #18
 8002488:	f63f af39 	bhi.w	80022fe <HAL_GPIO_Init+0x2a>
 800248c:	f1b9 0f12 	cmp.w	r9, #18
 8002490:	f63f af5b 	bhi.w	800234a <HAL_GPIO_Init+0x76>
 8002494:	f20f 0a04 	addw	sl, pc, #4
 8002498:	f85a f029 	ldr.w	pc, [sl, r9, lsl #2]
 800249c:	08002323 	.word	0x08002323
 80024a0:	080024e9 	.word	0x080024e9
 80024a4:	080024f9 	.word	0x080024f9
 80024a8:	080022f9 	.word	0x080022f9
 80024ac:	0800234b 	.word	0x0800234b
 80024b0:	0800234b 	.word	0x0800234b
 80024b4:	0800234b 	.word	0x0800234b
 80024b8:	0800234b 	.word	0x0800234b
 80024bc:	0800234b 	.word	0x0800234b
 80024c0:	0800234b 	.word	0x0800234b
 80024c4:	0800234b 	.word	0x0800234b
 80024c8:	0800234b 	.word	0x0800234b
 80024cc:	0800234b 	.word	0x0800234b
 80024d0:	0800234b 	.word	0x0800234b
 80024d4:	0800234b 	.word	0x0800234b
 80024d8:	0800234b 	.word	0x0800234b
 80024dc:	0800234b 	.word	0x0800234b
 80024e0:	080024ef 	.word	0x080024ef
 80024e4:	08002503 	.word	0x08002503
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80024e8:	f8d1 c00c 	ldr.w	ip, [r1, #12]
          break;
 80024ec:	e72d      	b.n	800234a <HAL_GPIO_Init+0x76>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80024ee:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 80024f2:	f10c 0c04 	add.w	ip, ip, #4
          break;
 80024f6:	e728      	b.n	800234a <HAL_GPIO_Init+0x76>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80024f8:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 80024fc:	f10c 0c08 	add.w	ip, ip, #8
          break;
 8002500:	e723      	b.n	800234a <HAL_GPIO_Init+0x76>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002502:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 8002506:	f10c 0c0c 	add.w	ip, ip, #12
          break;
 800250a:	e71e      	b.n	800234a <HAL_GPIO_Init+0x76>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800250c:	f04f 0c04 	mov.w	ip, #4
 8002510:	e71b      	b.n	800234a <HAL_GPIO_Init+0x76>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002512:	f04f 0900 	mov.w	r9, #0
 8002516:	e76a      	b.n	80023ee <HAL_GPIO_Init+0x11a>
 8002518:	f04f 0901 	mov.w	r9, #1
 800251c:	e767      	b.n	80023ee <HAL_GPIO_Init+0x11a>
 800251e:	f04f 0902 	mov.w	r9, #2
 8002522:	e764      	b.n	80023ee <HAL_GPIO_Init+0x11a>
  }
}
 8002524:	b003      	add	sp, #12
 8002526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800252a:	bf00      	nop
 800252c:	40021000 	.word	0x40021000
 8002530:	40010400 	.word	0x40010400
 8002534:	10220000 	.word	0x10220000
 8002538:	10310000 	.word	0x10310000
 800253c:	10320000 	.word	0x10320000
 8002540:	10120000 	.word	0x10120000
 8002544:	40010800 	.word	0x40010800

08002548 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002548:	b10a      	cbz	r2, 800254e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 800254a:	6101      	str	r1, [r0, #16]
 800254c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800254e:	0409      	lsls	r1, r1, #16
 8002550:	6101      	str	r1, [r0, #16]
  }
}
 8002552:	4770      	bx	lr

08002554 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002554:	b570      	push	{r4, r5, r6, lr}
 8002556:	b086      	sub	sp, #24
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002558:	2800      	cmp	r0, #0
 800255a:	d07f      	beq.n	800265c <HAL_PCD_Init+0x108>
 800255c:	4605      	mov	r5, r0

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800255e:	f890 32a9 	ldrb.w	r3, [r0, #681]	; 0x2a9
 8002562:	b1eb      	cbz	r3, 80025a0 <HAL_PCD_Init+0x4c>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002564:	2303      	movs	r3, #3
 8002566:	f885 32a9 	strb.w	r3, [r5, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800256a:	6828      	ldr	r0, [r5, #0]
 800256c:	f002 fa17 	bl	800499e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002570:	462c      	mov	r4, r5
 8002572:	f854 6b10 	ldr.w	r6, [r4], #16
 8002576:	46ec      	mov	ip, sp
 8002578:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800257a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800257e:	6823      	ldr	r3, [r4, #0]
 8002580:	f8cc 3000 	str.w	r3, [ip]
 8002584:	1d2b      	adds	r3, r5, #4
 8002586:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002588:	4630      	mov	r0, r6
 800258a:	f002 f9f8 	bl	800497e <USB_CoreInit>
 800258e:	4604      	mov	r4, r0
 8002590:	b158      	cbz	r0, 80025aa <HAL_PCD_Init+0x56>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002592:	2302      	movs	r3, #2
 8002594:	f885 32a9 	strb.w	r3, [r5, #681]	; 0x2a9
    return HAL_ERROR;
 8002598:	2401      	movs	r4, #1
  hpcd->USB_Address = 0U;
  hpcd->State = HAL_PCD_STATE_READY;
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 800259a:	4620      	mov	r0, r4
 800259c:	b006      	add	sp, #24
 800259e:	bd70      	pop	{r4, r5, r6, pc}
    hpcd->Lock = HAL_UNLOCKED;
 80025a0:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
    HAL_PCD_MspInit(hpcd);
 80025a4:	f004 f896 	bl	80066d4 <HAL_PCD_MspInit>
 80025a8:	e7dc      	b.n	8002564 <HAL_PCD_Init+0x10>
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80025aa:	2100      	movs	r1, #0
 80025ac:	6828      	ldr	r0, [r5, #0]
 80025ae:	f002 fa00 	bl	80049b2 <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025b2:	6868      	ldr	r0, [r5, #4]
 80025b4:	b390      	cbz	r0, 800261c <HAL_PCD_Init+0xc8>
 80025b6:	4623      	mov	r3, r4
    hpcd->IN_ep[i].is_in = 1U;
 80025b8:	f04f 0c01 	mov.w	ip, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80025bc:	2100      	movs	r1, #0
    hpcd->IN_ep[i].is_in = 1U;
 80025be:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80025c2:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 80025c6:	f882 c029 	strb.w	ip, [r2, #41]	; 0x29
    hpcd->IN_ep[i].num = i;
 80025ca:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    hpcd->IN_ep[i].tx_fifo_num = i;
 80025ce:	86d3      	strh	r3, [r2, #54]	; 0x36
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80025d0:	f882 102b 	strb.w	r1, [r2, #43]	; 0x2b
    hpcd->IN_ep[i].maxpacket = 0U;
 80025d4:	6391      	str	r1, [r2, #56]	; 0x38
    hpcd->IN_ep[i].xfer_buff = 0U;
 80025d6:	63d1      	str	r1, [r2, #60]	; 0x3c
    hpcd->IN_ep[i].xfer_len = 0U;
 80025d8:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80025dc:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 80025e0:	6411      	str	r1, [r2, #64]	; 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025e2:	3301      	adds	r3, #1
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	4283      	cmp	r3, r0
 80025e8:	d3e9      	bcc.n	80025be <HAL_PCD_Init+0x6a>
    hpcd->OUT_ep[i].is_in = 0U;
 80025ea:	2200      	movs	r2, #0
 80025ec:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80025f0:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 80025f4:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169
    hpcd->OUT_ep[i].num = i;
 80025f8:	f883 4168 	strb.w	r4, [r3, #360]	; 0x168
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80025fc:	f883 216b 	strb.w	r2, [r3, #363]	; 0x16b
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002600:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002604:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002608:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800260c:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8002610:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002614:	3401      	adds	r4, #1
 8002616:	b2e4      	uxtb	r4, r4
 8002618:	4284      	cmp	r4, r0
 800261a:	d3e7      	bcc.n	80025ec <HAL_PCD_Init+0x98>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800261c:	462c      	mov	r4, r5
 800261e:	f854 6b10 	ldr.w	r6, [r4], #16
 8002622:	46ec      	mov	ip, sp
 8002624:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002626:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800262a:	6823      	ldr	r3, [r4, #0]
 800262c:	f8cc 3000 	str.w	r3, [ip]
 8002630:	1d2b      	adds	r3, r5, #4
 8002632:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002634:	4630      	mov	r0, r6
 8002636:	f002 f9be 	bl	80049b6 <USB_DevInit>
 800263a:	4604      	mov	r4, r0
 800263c:	b120      	cbz	r0, 8002648 <HAL_PCD_Init+0xf4>
    hpcd->State = HAL_PCD_STATE_ERROR;
 800263e:	2302      	movs	r3, #2
 8002640:	f885 32a9 	strb.w	r3, [r5, #681]	; 0x2a9
    return HAL_ERROR;
 8002644:	2401      	movs	r4, #1
 8002646:	e7a8      	b.n	800259a <HAL_PCD_Init+0x46>
  hpcd->USB_Address = 0U;
 8002648:	2300      	movs	r3, #0
 800264a:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800264e:	2301      	movs	r3, #1
 8002650:	f885 32a9 	strb.w	r3, [r5, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8002654:	6828      	ldr	r0, [r5, #0]
 8002656:	f002 fccd 	bl	8004ff4 <USB_DevDisconnect>
  return HAL_OK;
 800265a:	e79e      	b.n	800259a <HAL_PCD_Init+0x46>
    return HAL_ERROR;
 800265c:	2401      	movs	r4, #1
 800265e:	e79c      	b.n	800259a <HAL_PCD_Init+0x46>

08002660 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002660:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hpcd);
 8002662:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 8002666:	2b01      	cmp	r3, #1
 8002668:	d011      	beq.n	800268e <HAL_PCD_Start+0x2e>
 800266a:	4604      	mov	r4, r0
 800266c:	2501      	movs	r5, #1
 800266e:	f880 52a8 	strb.w	r5, [r0, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002672:	6800      	ldr	r0, [r0, #0]
 8002674:	f002 f98a 	bl	800498c <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002678:	4629      	mov	r1, r5
 800267a:	4620      	mov	r0, r4
 800267c:	f004 f935 	bl	80068ea <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8002680:	6820      	ldr	r0, [r4, #0]
 8002682:	f002 fcb5 	bl	8004ff0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002686:	2000      	movs	r0, #0
 8002688:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8

  return HAL_OK;
}
 800268c:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 800268e:	2002      	movs	r0, #2
 8002690:	e7fc      	b.n	800268c <HAL_PCD_Start+0x2c>

08002692 <HAL_PCD_SetAddress>:
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 8002692:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 8002696:	2b01      	cmp	r3, #1
 8002698:	d00d      	beq.n	80026b6 <HAL_PCD_SetAddress+0x24>
{
 800269a:	b510      	push	{r4, lr}
 800269c:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 800269e:	2301      	movs	r3, #1
 80026a0:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80026a4:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80026a8:	6800      	ldr	r0, [r0, #0]
 80026aa:	f002 fc9b 	bl	8004fe4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80026ae:	2000      	movs	r0, #0
 80026b0:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8

  return HAL_OK;
}
 80026b4:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80026b6:	2002      	movs	r0, #2
}
 80026b8:	4770      	bx	lr

080026ba <HAL_PCD_IRQHandler>:
{
 80026ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80026c2:	6800      	ldr	r0, [r0, #0]
 80026c4:	f002 fc98 	bl	8004ff8 <USB_ReadInterrupts>
 80026c8:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 80026cc:	f040 809a 	bne.w	8002804 <HAL_PCD_IRQHandler+0x14a>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80026d0:	6820      	ldr	r0, [r4, #0]
 80026d2:	f002 fc91 	bl	8004ff8 <USB_ReadInterrupts>
 80026d6:	f410 6f80 	tst.w	r0, #1024	; 0x400
 80026da:	f040 84f5 	bne.w	80030c8 <HAL_PCD_IRQHandler+0xa0e>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80026de:	6820      	ldr	r0, [r4, #0]
 80026e0:	f002 fc8a 	bl	8004ff8 <USB_ReadInterrupts>
 80026e4:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 80026e8:	d008      	beq.n	80026fc <HAL_PCD_IRQHandler+0x42>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80026ea:	6822      	ldr	r2, [r4, #0]
 80026ec:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80026f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80026f4:	041b      	lsls	r3, r3, #16
 80026f6:	0c1b      	lsrs	r3, r3, #16
 80026f8:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80026fc:	6820      	ldr	r0, [r4, #0]
 80026fe:	f002 fc7b 	bl	8004ff8 <USB_ReadInterrupts>
 8002702:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 8002706:	d008      	beq.n	800271a <HAL_PCD_IRQHandler+0x60>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002708:	6822      	ldr	r2, [r4, #0]
 800270a:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800270e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002712:	041b      	lsls	r3, r3, #16
 8002714:	0c1b      	lsrs	r3, r3, #16
 8002716:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800271a:	6820      	ldr	r0, [r4, #0]
 800271c:	f002 fc6c 	bl	8004ff8 <USB_ReadInterrupts>
 8002720:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 8002724:	f040 84e2 	bne.w	80030ec <HAL_PCD_IRQHandler+0xa32>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002728:	6820      	ldr	r0, [r4, #0]
 800272a:	f002 fc65 	bl	8004ff8 <USB_ReadInterrupts>
 800272e:	f410 6f00 	tst.w	r0, #2048	; 0x800
 8002732:	d04e      	beq.n	80027d2 <HAL_PCD_IRQHandler+0x118>
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002734:	6826      	ldr	r6, [r4, #0]
 8002736:	4631      	mov	r1, r6
 8002738:	f1ad 0202 	sub.w	r2, sp, #2
 800273c:	f10d 050e 	add.w	r5, sp, #14
 8002740:	4613      	mov	r3, r2
 8002742:	f831 0b04 	ldrh.w	r0, [r1], #4
 8002746:	f823 0f02 	strh.w	r0, [r3, #2]!
    for (i = 0U; i < 8U; i++)
 800274a:	42ab      	cmp	r3, r5
 800274c:	d1f9      	bne.n	8002742 <HAL_PCD_IRQHandler+0x88>
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800274e:	f8b6 3040 	ldrh.w	r3, [r6, #64]	; 0x40
 8002752:	b29b      	uxth	r3, r3
 8002754:	f043 0301 	orr.w	r3, r3, #1
 8002758:	f8a6 3040 	strh.w	r3, [r6, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800275c:	6821      	ldr	r1, [r4, #0]
 800275e:	f8b1 3040 	ldrh.w	r3, [r1, #64]	; 0x40
 8002762:	f023 0301 	bic.w	r3, r3, #1
 8002766:	041b      	lsls	r3, r3, #16
 8002768:	0c1b      	lsrs	r3, r3, #16
 800276a:	f8a1 3040 	strh.w	r3, [r1, #64]	; 0x40
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800276e:	6821      	ldr	r1, [r4, #0]
 8002770:	f8b1 3044 	ldrh.w	r3, [r1, #68]	; 0x44
 8002774:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002778:	d0fa      	beq.n	8002770 <HAL_PCD_IRQHandler+0xb6>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800277a:	f8b1 3044 	ldrh.w	r3, [r1, #68]	; 0x44
 800277e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002782:	041b      	lsls	r3, r3, #16
 8002784:	0c1b      	lsrs	r3, r3, #16
 8002786:	f8a1 3044 	strh.w	r3, [r1, #68]	; 0x44
 800278a:	2300      	movs	r3, #0
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800278c:	6821      	ldr	r1, [r4, #0]
 800278e:	f832 0f02 	ldrh.w	r0, [r2, #2]!
 8002792:	52c8      	strh	r0, [r1, r3]
    for (i = 0U; i < 8U; i++)
 8002794:	3304      	adds	r3, #4
 8002796:	2b20      	cmp	r3, #32
 8002798:	d1f8      	bne.n	800278c <HAL_PCD_IRQHandler+0xd2>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800279a:	6822      	ldr	r2, [r4, #0]
 800279c:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	f043 0308 	orr.w	r3, r3, #8
 80027a6:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80027aa:	6822      	ldr	r2, [r4, #0]
 80027ac:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80027b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80027b4:	041b      	lsls	r3, r3, #16
 80027b6:	0c1b      	lsrs	r3, r3, #16
 80027b8:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80027bc:	6822      	ldr	r2, [r4, #0]
 80027be:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	f043 0304 	orr.w	r3, r3, #4
 80027c8:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 80027cc:	4620      	mov	r0, r4
 80027ce:	f003 ffcf 	bl	8006770 <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80027d2:	6820      	ldr	r0, [r4, #0]
 80027d4:	f002 fc10 	bl	8004ff8 <USB_ReadInterrupts>
 80027d8:	f410 7f00 	tst.w	r0, #512	; 0x200
 80027dc:	f040 84a6 	bne.w	800312c <HAL_PCD_IRQHandler+0xa72>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80027e0:	6820      	ldr	r0, [r4, #0]
 80027e2:	f002 fc09 	bl	8004ff8 <USB_ReadInterrupts>
 80027e6:	f410 7f80 	tst.w	r0, #256	; 0x100
 80027ea:	d008      	beq.n	80027fe <HAL_PCD_IRQHandler+0x144>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80027ec:	6822      	ldr	r2, [r4, #0]
 80027ee:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80027f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80027f6:	041b      	lsls	r3, r3, #16
 80027f8:	0c1b      	lsrs	r3, r3, #16
 80027fa:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 80027fe:	b004      	add	sp, #16
 8002800:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002804:	6820      	ldr	r0, [r4, #0]
 8002806:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 800280a:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800280e:	f43f af5f 	beq.w	80026d0 <HAL_PCD_IRQHandler+0x16>
 8002812:	2600      	movs	r6, #0
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002814:	f248 0780 	movw	r7, #32896	; 0x8080
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002818:	f24c 0880 	movw	r8, #49280	; 0xc080
 800281c:	e058      	b.n	80028d0 <HAL_PCD_IRQHandler+0x216>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800281e:	8803      	ldrh	r3, [r0, #0]
 8002820:	b29b      	uxth	r3, r3
 8002822:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002826:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800282a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800282e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002832:	b29b      	uxth	r3, r3
 8002834:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002836:	6822      	ldr	r2, [r4, #0]
 8002838:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 800283c:	b29b      	uxth	r3, r3
 800283e:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 8002842:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8002846:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800284a:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 800284e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002852:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8002854:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002856:	4413      	add	r3, r2
 8002858:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800285a:	4631      	mov	r1, r6
 800285c:	4620      	mov	r0, r4
 800285e:	f003 ff63 	bl	8006728 <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002862:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8002866:	b363      	cbz	r3, 80028c2 <HAL_PCD_IRQHandler+0x208>
 8002868:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800286a:	bb53      	cbnz	r3, 80028c2 <HAL_PCD_IRQHandler+0x208>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800286c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8002870:	6822      	ldr	r2, [r4, #0]
 8002872:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002876:	f8a2 304c 	strh.w	r3, [r2, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800287a:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
 800287e:	e020      	b.n	80028c2 <HAL_PCD_IRQHandler+0x208>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002880:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002884:	b29b      	uxth	r3, r3
 8002886:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 800288a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800288e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002892:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 8002896:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800289a:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800289e:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 80028a2:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 80028a6:	f002 ffea 	bl	800587e <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80028aa:	6822      	ldr	r2, [r4, #0]
 80028ac:	8813      	ldrh	r3, [r2, #0]
 80028ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028b2:	051b      	lsls	r3, r3, #20
 80028b4:	0d1b      	lsrs	r3, r3, #20
 80028b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028ba:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 80028bc:	4620      	mov	r0, r4
 80028be:	f003 ff1f 	bl	8006700 <HAL_PCD_SetupStageCallback>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80028c2:	6820      	ldr	r0, [r4, #0]
 80028c4:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 80028c8:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80028cc:	f43f af00 	beq.w	80026d0 <HAL_PCD_IRQHandler+0x16>
    wIstr = hpcd->Instance->ISTR;
 80028d0:	f8b0 5044 	ldrh.w	r5, [r0, #68]	; 0x44
 80028d4:	b2ab      	uxth	r3, r5
    if (epindex == 0U)
 80028d6:	f015 050f 	ands.w	r5, r5, #15
 80028da:	d173      	bne.n	80029c4 <HAL_PCD_IRQHandler+0x30a>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80028dc:	f013 0f10 	tst.w	r3, #16
 80028e0:	d09d      	beq.n	800281e <HAL_PCD_IRQHandler+0x164>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80028e2:	8803      	ldrh	r3, [r0, #0]
 80028e4:	b29a      	uxth	r2, r3
        if ((wEPVal & USB_EP_SETUP) != 0U)
 80028e6:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80028ea:	d1c9      	bne.n	8002880 <HAL_PCD_IRQHandler+0x1c6>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80028ec:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 80028f0:	d0e7      	beq.n	80028c2 <HAL_PCD_IRQHandler+0x208>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80028f2:	8803      	ldrh	r3, [r0, #0]
 80028f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028f8:	051b      	lsls	r3, r3, #20
 80028fa:	0d1b      	lsrs	r3, r3, #20
 80028fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002900:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002902:	6820      	ldr	r0, [r4, #0]
 8002904:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002908:	b29b      	uxth	r3, r3
 800290a:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 800290e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002912:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002916:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 800291a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800291e:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002922:	b18b      	cbz	r3, 8002948 <HAL_PCD_IRQHandler+0x28e>
 8002924:	f8d4 117c 	ldr.w	r1, [r4, #380]	; 0x17c
 8002928:	b171      	cbz	r1, 8002948 <HAL_PCD_IRQHandler+0x28e>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800292a:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 800292e:	f002 ffa6 	bl	800587e <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8002932:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8002936:	f8d4 2184 	ldr.w	r2, [r4, #388]	; 0x184
 800293a:	4413      	add	r3, r2
 800293c:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002940:	4631      	mov	r1, r6
 8002942:	4620      	mov	r0, r4
 8002944:	f003 fee4 	bl	8006710 <HAL_PCD_DataOutStageCallback>
          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8002948:	6823      	ldr	r3, [r4, #0]
 800294a:	881a      	ldrh	r2, [r3, #0]
 800294c:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8002950:	d1b7      	bne.n	80028c2 <HAL_PCD_IRQHandler+0x208>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002952:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8002956:	b292      	uxth	r2, r2
 8002958:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800295c:	f8d4 1178 	ldr.w	r1, [r4, #376]	; 0x178
 8002960:	b9c1      	cbnz	r1, 8002994 <HAL_PCD_IRQHandler+0x2da>
 8002962:	5a99      	ldrh	r1, [r3, r2]
 8002964:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8002968:	0409      	lsls	r1, r1, #16
 800296a:	0c09      	lsrs	r1, r1, #16
 800296c:	5299      	strh	r1, [r3, r2]
 800296e:	5a99      	ldrh	r1, [r3, r2]
 8002970:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8002974:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8002978:	b289      	uxth	r1, r1
 800297a:	5299      	strh	r1, [r3, r2]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800297c:	6822      	ldr	r2, [r4, #0]
 800297e:	8813      	ldrh	r3, [r2, #0]
 8002980:	b29b      	uxth	r3, r3
 8002982:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002986:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800298a:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800298e:	433b      	orrs	r3, r7
 8002990:	8013      	strh	r3, [r2, #0]
 8002992:	e796      	b.n	80028c2 <HAL_PCD_IRQHandler+0x208>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002994:	293e      	cmp	r1, #62	; 0x3e
 8002996:	d808      	bhi.n	80029aa <HAL_PCD_IRQHandler+0x2f0>
 8002998:	0848      	lsrs	r0, r1, #1
 800299a:	f011 0f01 	tst.w	r1, #1
 800299e:	bf18      	it	ne
 80029a0:	3001      	addne	r0, #1
 80029a2:	0281      	lsls	r1, r0, #10
 80029a4:	b289      	uxth	r1, r1
 80029a6:	5299      	strh	r1, [r3, r2]
 80029a8:	e7e8      	b.n	800297c <HAL_PCD_IRQHandler+0x2c2>
 80029aa:	0948      	lsrs	r0, r1, #5
 80029ac:	f011 0f1f 	tst.w	r1, #31
 80029b0:	bf08      	it	eq
 80029b2:	f100 30ff 	addeq.w	r0, r0, #4294967295
 80029b6:	ea6f 61c0 	mvn.w	r1, r0, lsl #27
 80029ba:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80029be:	b289      	uxth	r1, r1
 80029c0:	5299      	strh	r1, [r3, r2]
 80029c2:	e7db      	b.n	800297c <HAL_PCD_IRQHandler+0x2c2>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80029c4:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
 80029c8:	fa1f f983 	uxth.w	r9, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80029cc:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80029d0:	d155      	bne.n	8002a7e <HAL_PCD_IRQHandler+0x3c4>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80029d2:	f019 0f80 	tst.w	r9, #128	; 0x80
 80029d6:	f43f af74 	beq.w	80028c2 <HAL_PCD_IRQHandler+0x208>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80029da:	6822      	ldr	r2, [r4, #0]
 80029dc:	f832 3025 	ldrh.w	r3, [r2, r5, lsl #2]
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80029e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	f822 3025 	strh.w	r3, [r2, r5, lsl #2]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80029f8:	eb05 0a85 	add.w	sl, r5, r5, lsl #2
 80029fc:	eb04 0aca 	add.w	sl, r4, sl, lsl #3
 8002a00:	f89a 302b 	ldrb.w	r3, [sl, #43]	; 0x2b
 8002a04:	2b03      	cmp	r3, #3
 8002a06:	d007      	beq.n	8002a18 <HAL_PCD_IRQHandler+0x35e>
 8002a08:	b133      	cbz	r3, 8002a18 <HAL_PCD_IRQHandler+0x35e>
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	f040 818e 	bne.w	8002d2c <HAL_PCD_IRQHandler+0x672>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002a10:	f419 7f80 	tst.w	r9, #256	; 0x100
 8002a14:	f040 818a 	bne.w	8002d2c <HAL_PCD_IRQHandler+0x672>
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002a18:	6820      	ldr	r0, [r4, #0]
 8002a1a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002a1e:	b29b      	uxth	r3, r3
 8002a20:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
          if (ep->xfer_len > TxByteNbre)
 8002a24:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8002a28:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8002a2c:	6c12      	ldr	r2, [r2, #64]	; 0x40
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002a2e:	3302      	adds	r3, #2
 8002a30:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8002a34:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002a38:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
          if (ep->xfer_len > TxByteNbre)
 8002a3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a40:	429a      	cmp	r2, r3
 8002a42:	f240 8381 	bls.w	8003148 <HAL_PCD_IRQHandler+0xa8e>
            ep->xfer_len -= TxByteNbre;
 8002a46:	1ad2      	subs	r2, r2, r3
 8002a48:	eb05 0c85 	add.w	ip, r5, r5, lsl #2
 8002a4c:	eb04 0ccc 	add.w	ip, r4, ip, lsl #3
 8002a50:	f8cc 2040 	str.w	r2, [ip, #64]	; 0x40
          if (ep->xfer_len == 0U)
 8002a54:	2a00      	cmp	r2, #0
 8002a56:	f000 837c 	beq.w	8003152 <HAL_PCD_IRQHandler+0xa98>
            ep->xfer_buff += TxByteNbre;
 8002a5a:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8002a5e:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8002a62:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002a64:	4419      	add	r1, r3
 8002a66:	63d1      	str	r1, [r2, #60]	; 0x3c
            ep->xfer_count += TxByteNbre;
 8002a68:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002a6a:	440b      	add	r3, r1
 8002a6c:	6453      	str	r3, [r2, #68]	; 0x44
        ep = &hpcd->IN_ep[epindex];
 8002a6e:	3501      	adds	r5, #1
 8002a70:	eb05 0585 	add.w	r5, r5, r5, lsl #2
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002a74:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8002a78:	f002 fadb 	bl	8005032 <USB_EPStartXfer>
 8002a7c:	e721      	b.n	80028c2 <HAL_PCD_IRQHandler+0x208>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002a7e:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
 8002a82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a86:	051b      	lsls	r3, r3, #20
 8002a88:	0d1b      	lsrs	r3, r3, #20
 8002a8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a8e:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8002a92:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8002a96:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8002a9a:	f893 3174 	ldrb.w	r3, [r3, #372]	; 0x174
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d145      	bne.n	8002b2e <HAL_PCD_IRQHandler+0x474>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002aa2:	6820      	ldr	r0, [r4, #0]
 8002aa4:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002aa8:	b29b      	uxth	r3, r3
 8002aaa:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8002aae:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8002ab2:	f892 2168 	ldrb.w	r2, [r2, #360]	; 0x168
 8002ab6:	3306      	adds	r3, #6
 8002ab8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002abc:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002ac0:	f8b3 a400 	ldrh.w	sl, [r3, #1024]	; 0x400
 8002ac4:	f3ca 0a09 	ubfx	sl, sl, #0, #10
          if (count != 0U)
 8002ac8:	f1ba 0f00 	cmp.w	sl, #0
 8002acc:	d123      	bne.n	8002b16 <HAL_PCD_IRQHandler+0x45c>
        ep->xfer_count += count;
 8002ace:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8002ad2:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8002ad6:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 8002ada:	4452      	add	r2, sl
 8002adc:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
        ep->xfer_buff += count;
 8002ae0:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 8002ae4:	4452      	add	r2, sl
 8002ae6:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002aea:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8002aee:	b143      	cbz	r3, 8002b02 <HAL_PCD_IRQHandler+0x448>
 8002af0:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8002af4:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8002af8:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8002afc:	459a      	cmp	sl, r3
 8002afe:	f080 810b 	bcs.w	8002d18 <HAL_PCD_IRQHandler+0x65e>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002b02:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8002b06:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8002b0a:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 8002b0e:	4620      	mov	r0, r4
 8002b10:	f003 fdfe 	bl	8006710 <HAL_PCD_DataOutStageCallback>
 8002b14:	e75d      	b.n	80029d2 <HAL_PCD_IRQHandler+0x318>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002b16:	eb05 0185 	add.w	r1, r5, r5, lsl #2
 8002b1a:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8002b1e:	4653      	mov	r3, sl
 8002b20:	f8b1 216e 	ldrh.w	r2, [r1, #366]	; 0x16e
 8002b24:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8002b28:	f002 fea9 	bl	800587e <USB_ReadPMA>
 8002b2c:	e7cf      	b.n	8002ace <HAL_PCD_IRQHandler+0x414>
          if (ep->type == EP_TYPE_BULK)
 8002b2e:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8002b32:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8002b36:	f893 316b 	ldrb.w	r3, [r3, #363]	; 0x16b
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	d037      	beq.n	8002bae <HAL_PCD_IRQHandler+0x4f4>
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002b3e:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8002b42:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8002b46:	f892 0168 	ldrb.w	r0, [r2, #360]	; 0x168
 8002b4a:	6821      	ldr	r1, [r4, #0]
 8002b4c:	f831 3020 	ldrh.w	r3, [r1, r0, lsl #2]
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b5e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002b62:	f821 3020 	strh.w	r3, [r1, r0, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002b66:	6820      	ldr	r0, [r4, #0]
 8002b68:	f892 2168 	ldrb.w	r2, [r2, #360]	; 0x168
 8002b6c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002b70:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8002b74:	f000 80b4 	beq.w	8002ce0 <HAL_PCD_IRQHandler+0x626>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002b78:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002b7c:	b29b      	uxth	r3, r3
 8002b7e:	3302      	adds	r3, #2
 8002b80:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002b84:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002b88:	f8b3 a400 	ldrh.w	sl, [r3, #1024]	; 0x400
 8002b8c:	f3ca 0a09 	ubfx	sl, sl, #0, #10
              if (count != 0U)
 8002b90:	f1ba 0f00 	cmp.w	sl, #0
 8002b94:	d09b      	beq.n	8002ace <HAL_PCD_IRQHandler+0x414>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002b96:	eb05 0185 	add.w	r1, r5, r5, lsl #2
 8002b9a:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8002b9e:	4653      	mov	r3, sl
 8002ba0:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 8002ba4:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8002ba8:	f002 fe69 	bl	800587e <USB_ReadPMA>
 8002bac:	e78f      	b.n	8002ace <HAL_PCD_IRQHandler+0x414>
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002bae:	f419 4f80 	tst.w	r9, #16384	; 0x4000
 8002bb2:	d04a      	beq.n	8002c4a <HAL_PCD_IRQHandler+0x590>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002bb4:	6822      	ldr	r2, [r4, #0]
 8002bb6:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8002bba:	b29b      	uxth	r3, r3
 8002bbc:	eb05 0085 	add.w	r0, r5, r5, lsl #2
 8002bc0:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8002bc4:	f890 1168 	ldrb.w	r1, [r0, #360]	; 0x168
 8002bc8:	3302      	adds	r3, #2
 8002bca:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8002bce:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8002bd2:	f8b3 a400 	ldrh.w	sl, [r3, #1024]	; 0x400
 8002bd6:	f3ca 0a09 	ubfx	sl, sl, #0, #10
    if (ep->xfer_len >= count)
 8002bda:	f8d0 3180 	ldr.w	r3, [r0, #384]	; 0x180
 8002bde:	4553      	cmp	r3, sl
 8002be0:	f0c0 8365 	bcc.w	80032ae <HAL_PCD_IRQHandler+0xbf4>
      ep->xfer_len -= count;
 8002be4:	eba3 030a 	sub.w	r3, r3, sl
 8002be8:	eb05 0085 	add.w	r0, r5, r5, lsl #2
 8002bec:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8002bf0:	f8c0 3180 	str.w	r3, [r0, #384]	; 0x180
    if (ep->xfer_len == 0U)
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	f000 8360 	beq.w	80032ba <HAL_PCD_IRQHandler+0xc00>
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002bfa:	f019 0f40 	tst.w	r9, #64	; 0x40
 8002bfe:	d013      	beq.n	8002c28 <HAL_PCD_IRQHandler+0x56e>
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002c00:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8002c04:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8002c08:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 8002c0c:	6822      	ldr	r2, [r4, #0]
 8002c0e:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c20:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002c24:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
    if (count != 0U)
 8002c28:	f1ba 0f00 	cmp.w	sl, #0
 8002c2c:	f43f af4f 	beq.w	8002ace <HAL_PCD_IRQHandler+0x414>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002c30:	eb05 0185 	add.w	r1, r5, r5, lsl #2
 8002c34:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8002c38:	4653      	mov	r3, sl
 8002c3a:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 8002c3e:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8002c42:	6820      	ldr	r0, [r4, #0]
 8002c44:	f002 fe1b 	bl	800587e <USB_ReadPMA>
 8002c48:	e741      	b.n	8002ace <HAL_PCD_IRQHandler+0x414>
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002c4a:	6822      	ldr	r2, [r4, #0]
 8002c4c:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	eb05 0085 	add.w	r0, r5, r5, lsl #2
 8002c56:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8002c5a:	f890 1168 	ldrb.w	r1, [r0, #360]	; 0x168
 8002c5e:	3306      	adds	r3, #6
 8002c60:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8002c64:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8002c68:	f8b3 a400 	ldrh.w	sl, [r3, #1024]	; 0x400
 8002c6c:	f3ca 0a09 	ubfx	sl, sl, #0, #10
    if (ep->xfer_len >= count)
 8002c70:	f8d0 3180 	ldr.w	r3, [r0, #384]	; 0x180
 8002c74:	4553      	cmp	r3, sl
 8002c76:	f0c0 832d 	bcc.w	80032d4 <HAL_PCD_IRQHandler+0xc1a>
      ep->xfer_len -= count;
 8002c7a:	eba3 030a 	sub.w	r3, r3, sl
 8002c7e:	eb05 0085 	add.w	r0, r5, r5, lsl #2
 8002c82:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8002c86:	f8c0 3180 	str.w	r3, [r0, #384]	; 0x180
    if (ep->xfer_len == 0U)
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	f000 8328 	beq.w	80032e0 <HAL_PCD_IRQHandler+0xc26>
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002c90:	f019 0f40 	tst.w	r9, #64	; 0x40
 8002c94:	d113      	bne.n	8002cbe <HAL_PCD_IRQHandler+0x604>
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002c96:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8002c9a:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8002c9e:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 8002ca2:	6822      	ldr	r2, [r4, #0]
 8002ca4:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cb6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002cba:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
    if (count != 0U)
 8002cbe:	f1ba 0f00 	cmp.w	sl, #0
 8002cc2:	f43f af04 	beq.w	8002ace <HAL_PCD_IRQHandler+0x414>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002cc6:	eb05 0185 	add.w	r1, r5, r5, lsl #2
 8002cca:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8002cce:	4653      	mov	r3, sl
 8002cd0:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 8002cd4:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8002cd8:	6820      	ldr	r0, [r4, #0]
 8002cda:	f002 fdd0 	bl	800587e <USB_ReadPMA>
 8002cde:	e6f6      	b.n	8002ace <HAL_PCD_IRQHandler+0x414>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002ce0:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002ce4:	b29b      	uxth	r3, r3
 8002ce6:	3306      	adds	r3, #6
 8002ce8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002cec:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002cf0:	f8b3 a400 	ldrh.w	sl, [r3, #1024]	; 0x400
 8002cf4:	f3ca 0a09 	ubfx	sl, sl, #0, #10
              if (count != 0U)
 8002cf8:	f1ba 0f00 	cmp.w	sl, #0
 8002cfc:	f43f aee7 	beq.w	8002ace <HAL_PCD_IRQHandler+0x414>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002d00:	eb05 0185 	add.w	r1, r5, r5, lsl #2
 8002d04:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8002d08:	4653      	mov	r3, sl
 8002d0a:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 8002d0e:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8002d12:	f002 fdb4 	bl	800587e <USB_ReadPMA>
 8002d16:	e6da      	b.n	8002ace <HAL_PCD_IRQHandler+0x414>
        ep = &hpcd->OUT_ep[epindex];
 8002d18:	eb05 0185 	add.w	r1, r5, r5, lsl #2
 8002d1c:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002d20:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 8002d24:	6820      	ldr	r0, [r4, #0]
 8002d26:	f002 f984 	bl	8005032 <USB_EPStartXfer>
 8002d2a:	e652      	b.n	80029d2 <HAL_PCD_IRQHandler+0x318>
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002d2c:	f019 0f40 	tst.w	r9, #64	; 0x40
 8002d30:	f000 80ea 	beq.w	8002f08 <HAL_PCD_IRQHandler+0x84e>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002d34:	6822      	ldr	r2, [r4, #0]
 8002d36:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	f89a 0028 	ldrb.w	r0, [sl, #40]	; 0x28
    if (ep->xfer_len > TxByteNbre)
 8002d40:	eb05 0185 	add.w	r1, r5, r5, lsl #2
 8002d44:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8002d48:	6c09      	ldr	r1, [r1, #64]	; 0x40
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002d4a:	3302      	adds	r3, #2
 8002d4c:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8002d50:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8002d54:	f8b3 c400 	ldrh.w	ip, [r3, #1024]	; 0x400
    if (ep->xfer_len > TxByteNbre)
 8002d58:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8002d5c:	4561      	cmp	r1, ip
 8002d5e:	f240 81fd 	bls.w	800315c <HAL_PCD_IRQHandler+0xaa2>
      ep->xfer_len -= TxByteNbre;
 8002d62:	eba1 010c 	sub.w	r1, r1, ip
 8002d66:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8002d6a:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8002d6e:	6419      	str	r1, [r3, #64]	; 0x40
    if (ep->xfer_len == 0U)
 8002d70:	2900      	cmp	r1, #0
 8002d72:	f000 81f8 	beq.w	8003166 <HAL_PCD_IRQHandler+0xaac>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002d76:	f419 4f80 	tst.w	r9, #16384	; 0x4000
 8002d7a:	d00a      	beq.n	8002d92 <HAL_PCD_IRQHandler+0x6d8>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002d7c:	f832 3020 	ldrh.w	r3, [r2, r0, lsl #2]
 8002d80:	b29b      	uxth	r3, r3
 8002d82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d8a:	ea48 0303 	orr.w	r3, r8, r3
 8002d8e:	f822 3020 	strh.w	r3, [r2, r0, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8002d92:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8002d96:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8002d9a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d029      	beq.n	8002df6 <HAL_PCD_IRQHandler+0x73c>
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002da2:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 8002da6:	6822      	ldr	r2, [r4, #0]
 8002da8:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002db2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002db6:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8002dba:	433b      	orrs	r3, r7
 8002dbc:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 8002dc0:	e57f      	b.n	80028c2 <HAL_PCD_IRQHandler+0x208>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	f040 8204 	bne.w	80031d0 <HAL_PCD_IRQHandler+0xb16>
 8002dc8:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8002dcc:	b299      	uxth	r1, r3
 8002dce:	f202 4304 	addw	r3, r2, #1028	; 0x404
 8002dd2:	440b      	add	r3, r1
 8002dd4:	0100      	lsls	r0, r0, #4
 8002dd6:	521e      	strh	r6, [r3, r0]
 8002dd8:	e1de      	b.n	8003198 <HAL_PCD_IRQHandler+0xade>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002dda:	2a01      	cmp	r2, #1
 8002ddc:	f040 81f8 	bne.w	80031d0 <HAL_PCD_IRQHandler+0xb16>
 8002de0:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8002de4:	b292      	uxth	r2, r2
 8002de6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002dea:	4413      	add	r3, r2
 8002dec:	f89a 2028 	ldrb.w	r2, [sl, #40]	; 0x28
 8002df0:	0112      	lsls	r2, r2, #4
 8002df2:	529e      	strh	r6, [r3, r2]
 8002df4:	e1ec      	b.n	80031d0 <HAL_PCD_IRQHandler+0xb16>
        ep->xfer_buff += TxByteNbre;
 8002df6:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8002dfa:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8002dfe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e00:	4462      	add	r2, ip
 8002e02:	63da      	str	r2, [r3, #60]	; 0x3c
        ep->xfer_count += TxByteNbre;
 8002e04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e06:	4462      	add	r2, ip
 8002e08:	645a      	str	r2, [r3, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 8002e0a:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8002e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e0e:	4299      	cmp	r1, r3
 8002e10:	d317      	bcc.n	8002e42 <HAL_PCD_IRQHandler+0x788>
          ep->xfer_len_db -= len;
 8002e12:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8002e16:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8002e1a:	1ac9      	subs	r1, r1, r3
 8002e1c:	6491      	str	r1, [r2, #72]	; 0x48
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002e1e:	f89a 2029 	ldrb.w	r2, [sl, #41]	; 0x29
 8002e22:	2a00      	cmp	r2, #0
 8002e24:	d039      	beq.n	8002e9a <HAL_PCD_IRQHandler+0x7e0>
 8002e26:	2a01      	cmp	r2, #1
 8002e28:	d061      	beq.n	8002eee <HAL_PCD_IRQHandler+0x834>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002e2a:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8002e2e:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8002e32:	4611      	mov	r1, r2
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 8002e38:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8002e3a:	6820      	ldr	r0, [r4, #0]
 8002e3c:	f002 f8e2 	bl	8005004 <USB_WritePMA>
 8002e40:	e7af      	b.n	8002da2 <HAL_PCD_IRQHandler+0x6e8>
        else if (ep->xfer_len_db == 0U)
 8002e42:	b939      	cbnz	r1, 8002e54 <HAL_PCD_IRQHandler+0x79a>
          ep->xfer_fill_db = 0U;
 8002e44:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8002e48:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8002e4c:	f883 604c 	strb.w	r6, [r3, #76]	; 0x4c
          len = TxByteNbre;
 8002e50:	4663      	mov	r3, ip
 8002e52:	e7e4      	b.n	8002e1e <HAL_PCD_IRQHandler+0x764>
          ep->xfer_fill_db = 0U;
 8002e54:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8002e58:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8002e5c:	f883 604c 	strb.w	r6, [r3, #76]	; 0x4c
          ep->xfer_len_db = 0U;
 8002e60:	649e      	str	r6, [r3, #72]	; 0x48
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002e62:	f89a 2029 	ldrb.w	r2, [sl, #41]	; 0x29
 8002e66:	b9b2      	cbnz	r2, 8002e96 <HAL_PCD_IRQHandler+0x7dc>
 8002e68:	6823      	ldr	r3, [r4, #0]
 8002e6a:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8002e6e:	b290      	uxth	r0, r2
 8002e70:	f89a c028 	ldrb.w	ip, [sl, #40]	; 0x28
 8002e74:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8002e78:	4402      	add	r2, r0
 8002e7a:	eb02 120c 	add.w	r2, r2, ip, lsl #4
          len = ep->xfer_len_db;
 8002e7e:	460b      	mov	r3, r1
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002e80:	2b3e      	cmp	r3, #62	; 0x3e
 8002e82:	d827      	bhi.n	8002ed4 <HAL_PCD_IRQHandler+0x81a>
 8002e84:	0859      	lsrs	r1, r3, #1
 8002e86:	f013 0f01 	tst.w	r3, #1
 8002e8a:	bf18      	it	ne
 8002e8c:	3101      	addne	r1, #1
 8002e8e:	0289      	lsls	r1, r1, #10
 8002e90:	b289      	uxth	r1, r1
 8002e92:	8011      	strh	r1, [r2, #0]
 8002e94:	e7c9      	b.n	8002e2a <HAL_PCD_IRQHandler+0x770>
          len = ep->xfer_len_db;
 8002e96:	460b      	mov	r3, r1
 8002e98:	e7c5      	b.n	8002e26 <HAL_PCD_IRQHandler+0x76c>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002e9a:	6821      	ldr	r1, [r4, #0]
 8002e9c:	f8b1 c050 	ldrh.w	ip, [r1, #80]	; 0x50
 8002ea0:	fa1f fc8c 	uxth.w	ip, ip
 8002ea4:	f89a 2028 	ldrb.w	r2, [sl, #40]	; 0x28
 8002ea8:	0110      	lsls	r0, r2, #4
 8002eaa:	f201 4104 	addw	r1, r1, #1028	; 0x404
 8002eae:	4461      	add	r1, ip
 8002eb0:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d1e3      	bne.n	8002e80 <HAL_PCD_IRQHandler+0x7c6>
 8002eb8:	5a42      	ldrh	r2, [r0, r1]
 8002eba:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8002ebe:	0412      	lsls	r2, r2, #16
 8002ec0:	0c12      	lsrs	r2, r2, #16
 8002ec2:	5242      	strh	r2, [r0, r1]
 8002ec4:	5a42      	ldrh	r2, [r0, r1]
 8002ec6:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8002eca:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002ece:	b292      	uxth	r2, r2
 8002ed0:	5242      	strh	r2, [r0, r1]
 8002ed2:	e7aa      	b.n	8002e2a <HAL_PCD_IRQHandler+0x770>
 8002ed4:	0959      	lsrs	r1, r3, #5
 8002ed6:	f013 0f1f 	tst.w	r3, #31
 8002eda:	bf08      	it	eq
 8002edc:	f101 31ff 	addeq.w	r1, r1, #4294967295
 8002ee0:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 8002ee4:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8002ee8:	b289      	uxth	r1, r1
 8002eea:	8011      	strh	r1, [r2, #0]
 8002eec:	e79d      	b.n	8002e2a <HAL_PCD_IRQHandler+0x770>
 8002eee:	6822      	ldr	r2, [r4, #0]
 8002ef0:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 8002ef4:	b280      	uxth	r0, r0
 8002ef6:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 8002efa:	0109      	lsls	r1, r1, #4
 8002efc:	f202 4204 	addw	r2, r2, #1028	; 0x404
 8002f00:	4402      	add	r2, r0
 8002f02:	b298      	uxth	r0, r3
 8002f04:	5288      	strh	r0, [r1, r2]
 8002f06:	e790      	b.n	8002e2a <HAL_PCD_IRQHandler+0x770>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002f08:	6822      	ldr	r2, [r4, #0]
 8002f0a:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	f89a c028 	ldrb.w	ip, [sl, #40]	; 0x28
    if (ep->xfer_len >= TxByteNbre)
 8002f14:	eb05 0185 	add.w	r1, r5, r5, lsl #2
 8002f18:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8002f1c:	6c08      	ldr	r0, [r1, #64]	; 0x40
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002f1e:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 8002f22:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8002f26:	f8b3 140c 	ldrh.w	r1, [r3, #1036]	; 0x40c
    if (ep->xfer_len >= TxByteNbre)
 8002f2a:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8002f2e:	4288      	cmp	r0, r1
 8002f30:	f0c0 8166 	bcc.w	8003200 <HAL_PCD_IRQHandler+0xb46>
      ep->xfer_len -= TxByteNbre;
 8002f34:	1a40      	subs	r0, r0, r1
 8002f36:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8002f3a:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8002f3e:	6418      	str	r0, [r3, #64]	; 0x40
    if (ep->xfer_len == 0U)
 8002f40:	2800      	cmp	r0, #0
 8002f42:	f000 8162 	beq.w	800320a <HAL_PCD_IRQHandler+0xb50>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002f46:	f419 4f80 	tst.w	r9, #16384	; 0x4000
 8002f4a:	d10a      	bne.n	8002f62 <HAL_PCD_IRQHandler+0x8a8>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002f4c:	f832 302c 	ldrh.w	r3, [r2, ip, lsl #2]
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f5a:	ea48 0303 	orr.w	r3, r8, r3
 8002f5e:	f822 302c 	strh.w	r3, [r2, ip, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8002f62:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8002f66:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8002f6a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	f47f af17 	bne.w	8002da2 <HAL_PCD_IRQHandler+0x6e8>
        ep->xfer_buff += TxByteNbre;
 8002f74:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8002f78:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8002f7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f7e:	440a      	add	r2, r1
 8002f80:	63da      	str	r2, [r3, #60]	; 0x3c
        ep->xfer_count += TxByteNbre;
 8002f82:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f84:	440a      	add	r2, r1
 8002f86:	645a      	str	r2, [r3, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 8002f88:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8002f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f8c:	4298      	cmp	r0, r3
 8002f8e:	d337      	bcc.n	8003000 <HAL_PCD_IRQHandler+0x946>
          ep->xfer_len_db -= len;
 8002f90:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8002f94:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8002f98:	1ac0      	subs	r0, r0, r3
 8002f9a:	6490      	str	r0, [r2, #72]	; 0x48
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002f9c:	6822      	ldr	r2, [r4, #0]
 8002f9e:	4611      	mov	r1, r2
 8002fa0:	f89a c029 	ldrb.w	ip, [sl, #41]	; 0x29
 8002fa4:	f1bc 0f00 	cmp.w	ip, #0
 8002fa8:	d05a      	beq.n	8003060 <HAL_PCD_IRQHandler+0x9a6>
 8002faa:	f1bc 0f01 	cmp.w	ip, #1
 8002fae:	d07f      	beq.n	80030b0 <HAL_PCD_IRQHandler+0x9f6>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002fb0:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8002fb4:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8002fb8:	4611      	mov	r1, r2
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8002fbe:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8002fc0:	6820      	ldr	r0, [r4, #0]
 8002fc2:	f002 f81f 	bl	8005004 <USB_WritePMA>
 8002fc6:	e6ec      	b.n	8002da2 <HAL_PCD_IRQHandler+0x6e8>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	f040 8158 	bne.w	800327e <HAL_PCD_IRQHandler+0xbc4>
 8002fce:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8002fd2:	b299      	uxth	r1, r3
 8002fd4:	f202 4304 	addw	r3, r2, #1028	; 0x404
 8002fd8:	440b      	add	r3, r1
 8002fda:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8002fde:	f823 600c 	strh.w	r6, [r3, ip]
 8002fe2:	e130      	b.n	8003246 <HAL_PCD_IRQHandler+0xb8c>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002fe4:	2a01      	cmp	r2, #1
 8002fe6:	f040 814a 	bne.w	800327e <HAL_PCD_IRQHandler+0xbc4>
 8002fea:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 8002fee:	b289      	uxth	r1, r1
 8002ff0:	f89a 2028 	ldrb.w	r2, [sl, #40]	; 0x28
 8002ff4:	0112      	lsls	r2, r2, #4
 8002ff6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002ffa:	440b      	add	r3, r1
 8002ffc:	52d6      	strh	r6, [r2, r3]
 8002ffe:	e13e      	b.n	800327e <HAL_PCD_IRQHandler+0xbc4>
        else if (ep->xfer_len_db == 0U)
 8003000:	b938      	cbnz	r0, 8003012 <HAL_PCD_IRQHandler+0x958>
          ep->xfer_fill_db = 0U;
 8003002:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8003006:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 800300a:	f883 604c 	strb.w	r6, [r3, #76]	; 0x4c
          len = TxByteNbre;
 800300e:	460b      	mov	r3, r1
 8003010:	e7c4      	b.n	8002f9c <HAL_PCD_IRQHandler+0x8e2>
          ep->xfer_len_db = 0U;
 8003012:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8003016:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 800301a:	649e      	str	r6, [r3, #72]	; 0x48
          ep->xfer_fill_db = 0;
 800301c:	f883 604c 	strb.w	r6, [r3, #76]	; 0x4c
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003020:	6822      	ldr	r2, [r4, #0]
 8003022:	4611      	mov	r1, r2
 8003024:	f89a c029 	ldrb.w	ip, [sl, #41]	; 0x29
 8003028:	f1bc 0f00 	cmp.w	ip, #0
 800302c:	d116      	bne.n	800305c <HAL_PCD_IRQHandler+0x9a2>
 800302e:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8003032:	fa1f fc83 	uxth.w	ip, r3
 8003036:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 800303a:	f202 430c 	addw	r3, r2, #1036	; 0x40c
 800303e:	4463      	add	r3, ip
 8003040:	eb03 1101 	add.w	r1, r3, r1, lsl #4
          len = ep->xfer_len_db;
 8003044:	4603      	mov	r3, r0
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003046:	2b3e      	cmp	r3, #62	; 0x3e
 8003048:	d825      	bhi.n	8003096 <HAL_PCD_IRQHandler+0x9dc>
 800304a:	085a      	lsrs	r2, r3, #1
 800304c:	f013 0f01 	tst.w	r3, #1
 8003050:	bf18      	it	ne
 8003052:	3201      	addne	r2, #1
 8003054:	0292      	lsls	r2, r2, #10
 8003056:	b292      	uxth	r2, r2
 8003058:	800a      	strh	r2, [r1, #0]
 800305a:	e7a9      	b.n	8002fb0 <HAL_PCD_IRQHandler+0x8f6>
          len = ep->xfer_len_db;
 800305c:	4603      	mov	r3, r0
 800305e:	e7a4      	b.n	8002faa <HAL_PCD_IRQHandler+0x8f0>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003060:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 8003064:	b289      	uxth	r1, r1
 8003066:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 800306a:	440a      	add	r2, r1
 800306c:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 8003070:	0108      	lsls	r0, r1, #4
 8003072:	eb02 1101 	add.w	r1, r2, r1, lsl #4
 8003076:	2b00      	cmp	r3, #0
 8003078:	d1e5      	bne.n	8003046 <HAL_PCD_IRQHandler+0x98c>
 800307a:	5a11      	ldrh	r1, [r2, r0]
 800307c:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8003080:	0409      	lsls	r1, r1, #16
 8003082:	0c09      	lsrs	r1, r1, #16
 8003084:	5211      	strh	r1, [r2, r0]
 8003086:	5a11      	ldrh	r1, [r2, r0]
 8003088:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 800308c:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8003090:	b289      	uxth	r1, r1
 8003092:	5211      	strh	r1, [r2, r0]
 8003094:	e78c      	b.n	8002fb0 <HAL_PCD_IRQHandler+0x8f6>
 8003096:	095a      	lsrs	r2, r3, #5
 8003098:	f013 0f1f 	tst.w	r3, #31
 800309c:	bf08      	it	eq
 800309e:	f102 32ff 	addeq.w	r2, r2, #4294967295
 80030a2:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 80030a6:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80030aa:	b292      	uxth	r2, r2
 80030ac:	800a      	strh	r2, [r1, #0]
 80030ae:	e77f      	b.n	8002fb0 <HAL_PCD_IRQHandler+0x8f6>
 80030b0:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 80030b4:	b280      	uxth	r0, r0
 80030b6:	f89a 2028 	ldrb.w	r2, [sl, #40]	; 0x28
 80030ba:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 80030be:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 80030c2:	b299      	uxth	r1, r3
 80030c4:	5211      	strh	r1, [r2, r0]
 80030c6:	e773      	b.n	8002fb0 <HAL_PCD_IRQHandler+0x8f6>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80030c8:	6822      	ldr	r2, [r4, #0]
 80030ca:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80030ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80030d2:	041b      	lsls	r3, r3, #16
 80030d4:	0c1b      	lsrs	r3, r3, #16
 80030d6:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 80030da:	4620      	mov	r0, r4
 80030dc:	f003 fb35 	bl	800674a <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80030e0:	2100      	movs	r1, #0
 80030e2:	4620      	mov	r0, r4
 80030e4:	f7ff fad5 	bl	8002692 <HAL_PCD_SetAddress>
 80030e8:	f7ff baf9 	b.w	80026de <HAL_PCD_IRQHandler+0x24>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80030ec:	6822      	ldr	r2, [r4, #0]
 80030ee:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80030f2:	f023 0304 	bic.w	r3, r3, #4
 80030f6:	041b      	lsls	r3, r3, #16
 80030f8:	0c1b      	lsrs	r3, r3, #16
 80030fa:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80030fe:	6822      	ldr	r2, [r4, #0]
 8003100:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8003104:	f023 0308 	bic.w	r3, r3, #8
 8003108:	041b      	lsls	r3, r3, #16
 800310a:	0c1b      	lsrs	r3, r3, #16
 800310c:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8003110:	4620      	mov	r0, r4
 8003112:	f003 fb3d 	bl	8006790 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003116:	6822      	ldr	r2, [r4, #0]
 8003118:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800311c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003120:	041b      	lsls	r3, r3, #16
 8003122:	0c1b      	lsrs	r3, r3, #16
 8003124:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
 8003128:	f7ff bafe 	b.w	8002728 <HAL_PCD_IRQHandler+0x6e>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800312c:	6822      	ldr	r2, [r4, #0]
 800312e:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8003132:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003136:	041b      	lsls	r3, r3, #16
 8003138:	0c1b      	lsrs	r3, r3, #16
 800313a:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 800313e:	4620      	mov	r0, r4
 8003140:	f003 fafd 	bl	800673e <HAL_PCD_SOFCallback>
 8003144:	f7ff bb4c 	b.w	80027e0 <HAL_PCD_IRQHandler+0x126>
 8003148:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800314c:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8003150:	642e      	str	r6, [r5, #64]	; 0x40
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003152:	4620      	mov	r0, r4
 8003154:	f003 fae8 	bl	8006728 <HAL_PCD_DataInStageCallback>
 8003158:	f7ff bbb3 	b.w	80028c2 <HAL_PCD_IRQHandler+0x208>
 800315c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8003160:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 8003164:	641e      	str	r6, [r3, #64]	; 0x40
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003166:	f89a 3029 	ldrb.w	r3, [sl, #41]	; 0x29
 800316a:	2b00      	cmp	r3, #0
 800316c:	f47f ae29 	bne.w	8002dc2 <HAL_PCD_IRQHandler+0x708>
 8003170:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8003174:	b29b      	uxth	r3, r3
 8003176:	f202 4204 	addw	r2, r2, #1028	; 0x404
 800317a:	441a      	add	r2, r3
 800317c:	0100      	lsls	r0, r0, #4
 800317e:	5a13      	ldrh	r3, [r2, r0]
 8003180:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003184:	041b      	lsls	r3, r3, #16
 8003186:	0c1b      	lsrs	r3, r3, #16
 8003188:	5213      	strh	r3, [r2, r0]
 800318a:	5a13      	ldrh	r3, [r2, r0]
 800318c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003190:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003194:	b29b      	uxth	r3, r3
 8003196:	5213      	strh	r3, [r2, r0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003198:	6823      	ldr	r3, [r4, #0]
 800319a:	f89a 2029 	ldrb.w	r2, [sl, #41]	; 0x29
 800319e:	2a00      	cmp	r2, #0
 80031a0:	f47f ae1b 	bne.w	8002dda <HAL_PCD_IRQHandler+0x720>
 80031a4:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80031a8:	b292      	uxth	r2, r2
 80031aa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80031ae:	4413      	add	r3, r2
 80031b0:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 80031b4:	0109      	lsls	r1, r1, #4
 80031b6:	5a5a      	ldrh	r2, [r3, r1]
 80031b8:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80031bc:	0412      	lsls	r2, r2, #16
 80031be:	0c12      	lsrs	r2, r2, #16
 80031c0:	525a      	strh	r2, [r3, r1]
 80031c2:	5a5a      	ldrh	r2, [r3, r1]
 80031c4:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80031c8:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80031cc:	b292      	uxth	r2, r2
 80031ce:	525a      	strh	r2, [r3, r1]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80031d0:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 80031d4:	4620      	mov	r0, r4
 80031d6:	f003 faa7 	bl	8006728 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80031da:	f419 4f80 	tst.w	r9, #16384	; 0x4000
 80031de:	f43f ade0 	beq.w	8002da2 <HAL_PCD_IRQHandler+0x6e8>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80031e2:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 80031e6:	6822      	ldr	r2, [r4, #0]
 80031e8:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031f6:	ea48 0303 	orr.w	r3, r8, r3
 80031fa:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 80031fe:	e5d0      	b.n	8002da2 <HAL_PCD_IRQHandler+0x6e8>
 8003200:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8003204:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 8003208:	641e      	str	r6, [r3, #64]	; 0x40
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800320a:	f89a 3029 	ldrb.w	r3, [sl, #41]	; 0x29
 800320e:	2b00      	cmp	r3, #0
 8003210:	f47f aeda 	bne.w	8002fc8 <HAL_PCD_IRQHandler+0x90e>
 8003214:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8003218:	b29b      	uxth	r3, r3
 800321a:	f202 4204 	addw	r2, r2, #1028	; 0x404
 800321e:	441a      	add	r2, r3
 8003220:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8003224:	f832 300c 	ldrh.w	r3, [r2, ip]
 8003228:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800322c:	041b      	lsls	r3, r3, #16
 800322e:	0c1b      	lsrs	r3, r3, #16
 8003230:	f822 300c 	strh.w	r3, [r2, ip]
 8003234:	f832 300c 	ldrh.w	r3, [r2, ip]
 8003238:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800323c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003240:	b29b      	uxth	r3, r3
 8003242:	f822 300c 	strh.w	r3, [r2, ip]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003246:	6823      	ldr	r3, [r4, #0]
 8003248:	f89a 2029 	ldrb.w	r2, [sl, #41]	; 0x29
 800324c:	2a00      	cmp	r2, #0
 800324e:	f47f aec9 	bne.w	8002fe4 <HAL_PCD_IRQHandler+0x92a>
 8003252:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8003256:	b292      	uxth	r2, r2
 8003258:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 800325c:	0109      	lsls	r1, r1, #4
 800325e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003262:	441a      	add	r2, r3
 8003264:	5a8b      	ldrh	r3, [r1, r2]
 8003266:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800326a:	041b      	lsls	r3, r3, #16
 800326c:	0c1b      	lsrs	r3, r3, #16
 800326e:	528b      	strh	r3, [r1, r2]
 8003270:	5a8b      	ldrh	r3, [r1, r2]
 8003272:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003276:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800327a:	b29b      	uxth	r3, r3
 800327c:	528b      	strh	r3, [r1, r2]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800327e:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 8003282:	4620      	mov	r0, r4
 8003284:	f003 fa50 	bl	8006728 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003288:	f419 4f80 	tst.w	r9, #16384	; 0x4000
 800328c:	f47f ad89 	bne.w	8002da2 <HAL_PCD_IRQHandler+0x6e8>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003290:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 8003294:	6822      	ldr	r2, [r4, #0]
 8003296:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800329a:	b29b      	uxth	r3, r3
 800329c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032a4:	ea48 0303 	orr.w	r3, r8, r3
 80032a8:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 80032ac:	e579      	b.n	8002da2 <HAL_PCD_IRQHandler+0x6e8>
 80032ae:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 80032b2:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 80032b6:	f8c3 6180 	str.w	r6, [r3, #384]	; 0x180
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80032ba:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80032be:	b29b      	uxth	r3, r3
 80032c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80032c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032c8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80032cc:	433b      	orrs	r3, r7
 80032ce:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 80032d2:	e492      	b.n	8002bfa <HAL_PCD_IRQHandler+0x540>
 80032d4:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 80032d8:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 80032dc:	f8c3 6180 	str.w	r6, [r3, #384]	; 0x180
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80032e0:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80032e4:	b29b      	uxth	r3, r3
 80032e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80032ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032ee:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80032f2:	433b      	orrs	r3, r7
 80032f4:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 80032f8:	e4ca      	b.n	8002c90 <HAL_PCD_IRQHandler+0x5d6>

080032fa <HAL_PCD_EP_Open>:
{
 80032fa:	b510      	push	{r4, lr}
 80032fc:	4604      	mov	r4, r0
 80032fe:	468c      	mov	ip, r1
  if ((ep_addr & 0x80U) == 0x80U)
 8003300:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003304:	d12a      	bne.n	800335c <HAL_PCD_EP_Open+0x62>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003306:	f001 0e07 	and.w	lr, r1, #7
 800330a:	eb0e 018e 	add.w	r1, lr, lr, lsl #2
 800330e:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8003312:	f501 71b4 	add.w	r1, r1, #360	; 0x168
    ep->is_in = 0U;
 8003316:	eb0e 0e8e 	add.w	lr, lr, lr, lsl #2
 800331a:	eb00 0ece 	add.w	lr, r0, lr, lsl #3
 800331e:	2000      	movs	r0, #0
 8003320:	f88e 0169 	strb.w	r0, [lr, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 8003324:	f00c 0c07 	and.w	ip, ip, #7
 8003328:	f881 c000 	strb.w	ip, [r1]
  ep->maxpacket = ep_mps;
 800332c:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;
 800332e:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 8003330:	784a      	ldrb	r2, [r1, #1]
 8003332:	b10a      	cbz	r2, 8003338 <HAL_PCD_EP_Open+0x3e>
    ep->tx_fifo_num = ep->num;
 8003334:	f8a1 c00e 	strh.w	ip, [r1, #14]
  if (ep_type == EP_TYPE_BULK)
 8003338:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 800333a:	bf04      	itt	eq
 800333c:	2300      	moveq	r3, #0
 800333e:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 8003340:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8003344:	2b01      	cmp	r3, #1
 8003346:	d016      	beq.n	8003376 <HAL_PCD_EP_Open+0x7c>
 8003348:	2301      	movs	r3, #1
 800334a:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800334e:	6820      	ldr	r0, [r4, #0]
 8003350:	f001 fb42 	bl	80049d8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003354:	2000      	movs	r0, #0
 8003356:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 800335a:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800335c:	f001 0e07 	and.w	lr, r1, #7
 8003360:	f10e 0001 	add.w	r0, lr, #1
 8003364:	eb00 0e80 	add.w	lr, r0, r0, lsl #2
 8003368:	eb04 01ce 	add.w	r1, r4, lr, lsl #3
    ep->is_in = 1U;
 800336c:	f04f 0e01 	mov.w	lr, #1
 8003370:	f881 e001 	strb.w	lr, [r1, #1]
 8003374:	e7d6      	b.n	8003324 <HAL_PCD_EP_Open+0x2a>
  __HAL_LOCK(hpcd);
 8003376:	2002      	movs	r0, #2
 8003378:	e7ef      	b.n	800335a <HAL_PCD_EP_Open+0x60>

0800337a <HAL_PCD_EP_Close>:
{
 800337a:	b510      	push	{r4, lr}
 800337c:	4604      	mov	r4, r0
 800337e:	460a      	mov	r2, r1
  if ((ep_addr & 0x80U) == 0x80U)
 8003380:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003384:	d11c      	bne.n	80033c0 <HAL_PCD_EP_Close+0x46>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003386:	f001 0007 	and.w	r0, r1, #7
 800338a:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 800338e:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8003392:	f503 71b4 	add.w	r1, r3, #360	; 0x168
    ep->is_in = 0U;
 8003396:	4618      	mov	r0, r3
 8003398:	2300      	movs	r3, #0
 800339a:	f880 3169 	strb.w	r3, [r0, #361]	; 0x169
  ep->num   = ep_addr & EP_ADDR_MSK;
 800339e:	f002 0207 	and.w	r2, r2, #7
 80033a2:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 80033a4:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d013      	beq.n	80033d4 <HAL_PCD_EP_Close+0x5a>
 80033ac:	2301      	movs	r3, #1
 80033ae:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80033b2:	6820      	ldr	r0, [r4, #0]
 80033b4:	f001 fcb7 	bl	8004d26 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80033b8:	2000      	movs	r0, #0
 80033ba:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 80033be:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033c0:	f001 0307 	and.w	r3, r1, #7
 80033c4:	1c58      	adds	r0, r3, #1
 80033c6:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 80033ca:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
    ep->is_in = 1U;
 80033ce:	2301      	movs	r3, #1
 80033d0:	704b      	strb	r3, [r1, #1]
 80033d2:	e7e4      	b.n	800339e <HAL_PCD_EP_Close+0x24>
  __HAL_LOCK(hpcd);
 80033d4:	2002      	movs	r0, #2
 80033d6:	e7f2      	b.n	80033be <HAL_PCD_EP_Close+0x44>

080033d8 <HAL_PCD_EP_Receive>:
{
 80033d8:	b510      	push	{r4, lr}
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033da:	f001 0407 	and.w	r4, r1, #7
 80033de:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 80033e2:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 80033e6:	f501 71b4 	add.w	r1, r1, #360	; 0x168
  ep->xfer_buff = pBuf;
 80033ea:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
 80033ee:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
 80033f2:	f8cc 217c 	str.w	r2, [ip, #380]	; 0x17c
  ep->xfer_len = len;
 80033f6:	f8cc 3180 	str.w	r3, [ip, #384]	; 0x180
  ep->xfer_count = 0U;
 80033fa:	2300      	movs	r3, #0
 80033fc:	f8cc 3184 	str.w	r3, [ip, #388]	; 0x184
  ep->is_in = 0U;
 8003400:	f88c 3169 	strb.w	r3, [ip, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 8003404:	f88c 4168 	strb.w	r4, [ip, #360]	; 0x168
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003408:	6800      	ldr	r0, [r0, #0]
 800340a:	f001 fe12 	bl	8005032 <USB_EPStartXfer>
}
 800340e:	2000      	movs	r0, #0
 8003410:	bd10      	pop	{r4, pc}

08003412 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003412:	f001 0107 	and.w	r1, r1, #7
 8003416:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800341a:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
}
 800341e:	f8d1 0184 	ldr.w	r0, [r1, #388]	; 0x184
 8003422:	4770      	bx	lr

08003424 <HAL_PCD_EP_Transmit>:
{
 8003424:	b510      	push	{r4, lr}
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003426:	f001 0407 	and.w	r4, r1, #7
 800342a:	1c61      	adds	r1, r4, #1
 800342c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8003430:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
  ep->xfer_buff = pBuf;
 8003434:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
 8003438:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
 800343c:	f8cc 203c 	str.w	r2, [ip, #60]	; 0x3c
  ep->xfer_len = len;
 8003440:	f8cc 3040 	str.w	r3, [ip, #64]	; 0x40
  ep->xfer_fill_db = 1U;
 8003444:	2201      	movs	r2, #1
 8003446:	f88c 204c 	strb.w	r2, [ip, #76]	; 0x4c
  ep->xfer_len_db = len;
 800344a:	f8cc 3048 	str.w	r3, [ip, #72]	; 0x48
  ep->xfer_count = 0U;
 800344e:	2300      	movs	r3, #0
 8003450:	f8cc 3044 	str.w	r3, [ip, #68]	; 0x44
  ep->is_in = 1U;
 8003454:	f88c 2029 	strb.w	r2, [ip, #41]	; 0x29
  ep->num = ep_addr & EP_ADDR_MSK;
 8003458:	f88c 4028 	strb.w	r4, [ip, #40]	; 0x28
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800345c:	6800      	ldr	r0, [r0, #0]
 800345e:	f001 fde8 	bl	8005032 <USB_EPStartXfer>
}
 8003462:	2000      	movs	r0, #0
 8003464:	bd10      	pop	{r4, pc}

08003466 <HAL_PCD_EP_SetStall>:
{
 8003466:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003468:	f001 0507 	and.w	r5, r1, #7
 800346c:	6842      	ldr	r2, [r0, #4]
 800346e:	4295      	cmp	r5, r2
 8003470:	d831      	bhi.n	80034d6 <HAL_PCD_EP_SetStall+0x70>
 8003472:	4604      	mov	r4, r0
 8003474:	460b      	mov	r3, r1
  if ((0x80U & ep_addr) == 0x80U)
 8003476:	f011 0f80 	tst.w	r1, #128	; 0x80
 800347a:	d11e      	bne.n	80034ba <HAL_PCD_EP_SetStall+0x54>
    ep = &hpcd->OUT_ep[ep_addr];
 800347c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8003480:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8003484:	f501 71b4 	add.w	r1, r1, #360	; 0x168
    ep->is_in = 0U;
 8003488:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800348c:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8003490:	2200      	movs	r2, #0
 8003492:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169
  ep->is_stall = 1U;
 8003496:	2301      	movs	r3, #1
 8003498:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800349a:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 800349c:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d01a      	beq.n	80034da <HAL_PCD_EP_SetStall+0x74>
 80034a4:	2301      	movs	r3, #1
 80034a6:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80034aa:	6820      	ldr	r0, [r4, #0]
 80034ac:	f001 fd24 	bl	8004ef8 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80034b0:	b15d      	cbz	r5, 80034ca <HAL_PCD_EP_SetStall+0x64>
  __HAL_UNLOCK(hpcd);
 80034b2:	2000      	movs	r0, #0
 80034b4:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 80034b8:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034ba:	1c69      	adds	r1, r5, #1
 80034bc:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80034c0:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 80034c4:	2201      	movs	r2, #1
 80034c6:	704a      	strb	r2, [r1, #1]
 80034c8:	e7e5      	b.n	8003496 <HAL_PCD_EP_SetStall+0x30>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80034ca:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 80034ce:	6820      	ldr	r0, [r4, #0]
 80034d0:	f001 fd96 	bl	8005000 <USB_EP0_OutStart>
 80034d4:	e7ed      	b.n	80034b2 <HAL_PCD_EP_SetStall+0x4c>
    return HAL_ERROR;
 80034d6:	2001      	movs	r0, #1
 80034d8:	e7ee      	b.n	80034b8 <HAL_PCD_EP_SetStall+0x52>
  __HAL_LOCK(hpcd);
 80034da:	2002      	movs	r0, #2
 80034dc:	e7ec      	b.n	80034b8 <HAL_PCD_EP_SetStall+0x52>

080034de <HAL_PCD_EP_ClrStall>:
{
 80034de:	460b      	mov	r3, r1
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80034e0:	f001 010f 	and.w	r1, r1, #15
 80034e4:	6842      	ldr	r2, [r0, #4]
 80034e6:	4291      	cmp	r1, r2
 80034e8:	d830      	bhi.n	800354c <HAL_PCD_EP_ClrStall+0x6e>
{
 80034ea:	b510      	push	{r4, lr}
 80034ec:	4604      	mov	r4, r0
  if ((0x80U & ep_addr) == 0x80U)
 80034ee:	f013 0f80 	tst.w	r3, #128	; 0x80
 80034f2:	d121      	bne.n	8003538 <HAL_PCD_EP_ClrStall+0x5a>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034f4:	f003 0207 	and.w	r2, r3, #7
 80034f8:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 80034fc:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8003500:	f501 71b4 	add.w	r1, r1, #360	; 0x168
    ep->is_in = 0U;
 8003504:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003508:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 800350c:	2000      	movs	r0, #0
 800350e:	f882 0169 	strb.w	r0, [r2, #361]	; 0x169
  ep->is_stall = 0U;
 8003512:	2200      	movs	r2, #0
 8003514:	708a      	strb	r2, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003516:	f003 0307 	and.w	r3, r3, #7
 800351a:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 800351c:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8003520:	2b01      	cmp	r3, #1
 8003522:	d015      	beq.n	8003550 <HAL_PCD_EP_ClrStall+0x72>
 8003524:	2301      	movs	r3, #1
 8003526:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800352a:	6820      	ldr	r0, [r4, #0]
 800352c:	f001 fd09 	bl	8004f42 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003530:	2000      	movs	r0, #0
 8003532:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8003536:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003538:	f003 0107 	and.w	r1, r3, #7
 800353c:	1c4a      	adds	r2, r1, #1
 800353e:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8003542:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 8003546:	2001      	movs	r0, #1
 8003548:	7048      	strb	r0, [r1, #1]
 800354a:	e7e2      	b.n	8003512 <HAL_PCD_EP_ClrStall+0x34>
    return HAL_ERROR;
 800354c:	2001      	movs	r0, #1
}
 800354e:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 8003550:	2002      	movs	r0, #2
 8003552:	e7f0      	b.n	8003536 <HAL_PCD_EP_ClrStall+0x58>

08003554 <HAL_PCDEx_PMAConfig>:
                                       uint16_t ep_kind, uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003554:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003558:	d00b      	beq.n	8003572 <HAL_PCDEx_PMAConfig+0x1e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800355a:	f001 0107 	and.w	r1, r1, #7
 800355e:	3101      	adds	r1, #1
 8003560:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8003564:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003568:	b952      	cbnz	r2, 8003580 <HAL_PCDEx_PMAConfig+0x2c>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800356a:	730a      	strb	r2, [r1, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800356c:	80cb      	strh	r3, [r1, #6]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }

  return HAL_OK;
}
 800356e:	2000      	movs	r0, #0
 8003570:	4770      	bx	lr
    ep = &hpcd->OUT_ep[ep_addr];
 8003572:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8003576:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800357a:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 800357e:	e7f3      	b.n	8003568 <HAL_PCDEx_PMAConfig+0x14>
    ep->doublebuffer = 1U;
 8003580:	2201      	movs	r2, #1
 8003582:	730a      	strb	r2, [r1, #12]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003584:	810b      	strh	r3, [r1, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003586:	0c1b      	lsrs	r3, r3, #16
 8003588:	814b      	strh	r3, [r1, #10]
 800358a:	e7f0      	b.n	800356e <HAL_PCDEx_PMAConfig+0x1a>

0800358c <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800358c:	2800      	cmp	r0, #0
 800358e:	f000 8201 	beq.w	8003994 <HAL_RCC_OscConfig+0x408>
{
 8003592:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003596:	b082      	sub	sp, #8
 8003598:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800359a:	6803      	ldr	r3, [r0, #0]
 800359c:	f013 0f01 	tst.w	r3, #1
 80035a0:	d02c      	beq.n	80035fc <HAL_RCC_OscConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80035a2:	4b9f      	ldr	r3, [pc, #636]	; (8003820 <HAL_RCC_OscConfig+0x294>)
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	f003 030c 	and.w	r3, r3, #12
 80035aa:	2b04      	cmp	r3, #4
 80035ac:	d01d      	beq.n	80035ea <HAL_RCC_OscConfig+0x5e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80035ae:	4b9c      	ldr	r3, [pc, #624]	; (8003820 <HAL_RCC_OscConfig+0x294>)
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	f003 030c 	and.w	r3, r3, #12
 80035b6:	2b08      	cmp	r3, #8
 80035b8:	d012      	beq.n	80035e0 <HAL_RCC_OscConfig+0x54>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035ba:	6863      	ldr	r3, [r4, #4]
 80035bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035c0:	d041      	beq.n	8003646 <HAL_RCC_OscConfig+0xba>
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d155      	bne.n	8003672 <HAL_RCC_OscConfig+0xe6>
 80035c6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80035ca:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80035d4:	601a      	str	r2, [r3, #0]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80035dc:	601a      	str	r2, [r3, #0]
 80035de:	e037      	b.n	8003650 <HAL_RCC_OscConfig+0xc4>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80035e0:	4b8f      	ldr	r3, [pc, #572]	; (8003820 <HAL_RCC_OscConfig+0x294>)
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80035e8:	d0e7      	beq.n	80035ba <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035ea:	4b8d      	ldr	r3, [pc, #564]	; (8003820 <HAL_RCC_OscConfig+0x294>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80035f2:	d003      	beq.n	80035fc <HAL_RCC_OscConfig+0x70>
 80035f4:	6863      	ldr	r3, [r4, #4]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	f000 81ce 	beq.w	8003998 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035fc:	6823      	ldr	r3, [r4, #0]
 80035fe:	f013 0f02 	tst.w	r3, #2
 8003602:	d075      	beq.n	80036f0 <HAL_RCC_OscConfig+0x164>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003604:	4b86      	ldr	r3, [pc, #536]	; (8003820 <HAL_RCC_OscConfig+0x294>)
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	f013 0f0c 	tst.w	r3, #12
 800360c:	d05f      	beq.n	80036ce <HAL_RCC_OscConfig+0x142>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800360e:	4b84      	ldr	r3, [pc, #528]	; (8003820 <HAL_RCC_OscConfig+0x294>)
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	f003 030c 	and.w	r3, r3, #12
 8003616:	2b08      	cmp	r3, #8
 8003618:	d054      	beq.n	80036c4 <HAL_RCC_OscConfig+0x138>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800361a:	6923      	ldr	r3, [r4, #16]
 800361c:	2b00      	cmp	r3, #0
 800361e:	f000 808a 	beq.w	8003736 <HAL_RCC_OscConfig+0x1aa>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003622:	4b80      	ldr	r3, [pc, #512]	; (8003824 <HAL_RCC_OscConfig+0x298>)
 8003624:	2201      	movs	r2, #1
 8003626:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003628:	f7fe fc24 	bl	8001e74 <HAL_GetTick>
 800362c:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800362e:	4e7c      	ldr	r6, [pc, #496]	; (8003820 <HAL_RCC_OscConfig+0x294>)
 8003630:	6833      	ldr	r3, [r6, #0]
 8003632:	f013 0f02 	tst.w	r3, #2
 8003636:	d175      	bne.n	8003724 <HAL_RCC_OscConfig+0x198>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003638:	f7fe fc1c 	bl	8001e74 <HAL_GetTick>
 800363c:	1b40      	subs	r0, r0, r5
 800363e:	2802      	cmp	r0, #2
 8003640:	d9f6      	bls.n	8003630 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_TIMEOUT;
 8003642:	2003      	movs	r0, #3
 8003644:	e1ad      	b.n	80039a2 <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003646:	4a76      	ldr	r2, [pc, #472]	; (8003820 <HAL_RCC_OscConfig+0x294>)
 8003648:	6813      	ldr	r3, [r2, #0]
 800364a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800364e:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003650:	6863      	ldr	r3, [r4, #4]
 8003652:	b343      	cbz	r3, 80036a6 <HAL_RCC_OscConfig+0x11a>
        tickstart = HAL_GetTick();
 8003654:	f7fe fc0e 	bl	8001e74 <HAL_GetTick>
 8003658:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800365a:	4e71      	ldr	r6, [pc, #452]	; (8003820 <HAL_RCC_OscConfig+0x294>)
 800365c:	6833      	ldr	r3, [r6, #0]
 800365e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003662:	d1cb      	bne.n	80035fc <HAL_RCC_OscConfig+0x70>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003664:	f7fe fc06 	bl	8001e74 <HAL_GetTick>
 8003668:	1b40      	subs	r0, r0, r5
 800366a:	2864      	cmp	r0, #100	; 0x64
 800366c:	d9f6      	bls.n	800365c <HAL_RCC_OscConfig+0xd0>
            return HAL_TIMEOUT;
 800366e:	2003      	movs	r0, #3
 8003670:	e197      	b.n	80039a2 <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003672:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003676:	d009      	beq.n	800368c <HAL_RCC_OscConfig+0x100>
 8003678:	4b69      	ldr	r3, [pc, #420]	; (8003820 <HAL_RCC_OscConfig+0x294>)
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003680:	601a      	str	r2, [r3, #0]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003688:	601a      	str	r2, [r3, #0]
 800368a:	e7e1      	b.n	8003650 <HAL_RCC_OscConfig+0xc4>
 800368c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003690:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800369a:	601a      	str	r2, [r3, #0]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80036a2:	601a      	str	r2, [r3, #0]
 80036a4:	e7d4      	b.n	8003650 <HAL_RCC_OscConfig+0xc4>
        tickstart = HAL_GetTick();
 80036a6:	f7fe fbe5 	bl	8001e74 <HAL_GetTick>
 80036aa:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036ac:	4e5c      	ldr	r6, [pc, #368]	; (8003820 <HAL_RCC_OscConfig+0x294>)
 80036ae:	6833      	ldr	r3, [r6, #0]
 80036b0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80036b4:	d0a2      	beq.n	80035fc <HAL_RCC_OscConfig+0x70>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036b6:	f7fe fbdd 	bl	8001e74 <HAL_GetTick>
 80036ba:	1b40      	subs	r0, r0, r5
 80036bc:	2864      	cmp	r0, #100	; 0x64
 80036be:	d9f6      	bls.n	80036ae <HAL_RCC_OscConfig+0x122>
            return HAL_TIMEOUT;
 80036c0:	2003      	movs	r0, #3
 80036c2:	e16e      	b.n	80039a2 <HAL_RCC_OscConfig+0x416>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80036c4:	4b56      	ldr	r3, [pc, #344]	; (8003820 <HAL_RCC_OscConfig+0x294>)
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80036cc:	d1a5      	bne.n	800361a <HAL_RCC_OscConfig+0x8e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036ce:	4b54      	ldr	r3, [pc, #336]	; (8003820 <HAL_RCC_OscConfig+0x294>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f013 0f02 	tst.w	r3, #2
 80036d6:	d003      	beq.n	80036e0 <HAL_RCC_OscConfig+0x154>
 80036d8:	6923      	ldr	r3, [r4, #16]
 80036da:	2b01      	cmp	r3, #1
 80036dc:	f040 815e 	bne.w	800399c <HAL_RCC_OscConfig+0x410>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036e0:	4a4f      	ldr	r2, [pc, #316]	; (8003820 <HAL_RCC_OscConfig+0x294>)
 80036e2:	6813      	ldr	r3, [r2, #0]
 80036e4:	6961      	ldr	r1, [r4, #20]
 80036e6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80036ea:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80036ee:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036f0:	6823      	ldr	r3, [r4, #0]
 80036f2:	f013 0f08 	tst.w	r3, #8
 80036f6:	d03d      	beq.n	8003774 <HAL_RCC_OscConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036f8:	69a3      	ldr	r3, [r4, #24]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d066      	beq.n	80037cc <HAL_RCC_OscConfig+0x240>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036fe:	4b49      	ldr	r3, [pc, #292]	; (8003824 <HAL_RCC_OscConfig+0x298>)
 8003700:	2201      	movs	r2, #1
 8003702:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003706:	f7fe fbb5 	bl	8001e74 <HAL_GetTick>
 800370a:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800370c:	4e44      	ldr	r6, [pc, #272]	; (8003820 <HAL_RCC_OscConfig+0x294>)
 800370e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8003710:	f013 0f02 	tst.w	r3, #2
 8003714:	d121      	bne.n	800375a <HAL_RCC_OscConfig+0x1ce>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003716:	f7fe fbad 	bl	8001e74 <HAL_GetTick>
 800371a:	1b40      	subs	r0, r0, r5
 800371c:	2802      	cmp	r0, #2
 800371e:	d9f6      	bls.n	800370e <HAL_RCC_OscConfig+0x182>
        {
          return HAL_TIMEOUT;
 8003720:	2003      	movs	r0, #3
 8003722:	e13e      	b.n	80039a2 <HAL_RCC_OscConfig+0x416>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003724:	4a3e      	ldr	r2, [pc, #248]	; (8003820 <HAL_RCC_OscConfig+0x294>)
 8003726:	6813      	ldr	r3, [r2, #0]
 8003728:	6961      	ldr	r1, [r4, #20]
 800372a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800372e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003732:	6013      	str	r3, [r2, #0]
 8003734:	e7dc      	b.n	80036f0 <HAL_RCC_OscConfig+0x164>
        __HAL_RCC_HSI_DISABLE();
 8003736:	4b3b      	ldr	r3, [pc, #236]	; (8003824 <HAL_RCC_OscConfig+0x298>)
 8003738:	2200      	movs	r2, #0
 800373a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800373c:	f7fe fb9a 	bl	8001e74 <HAL_GetTick>
 8003740:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003742:	4e37      	ldr	r6, [pc, #220]	; (8003820 <HAL_RCC_OscConfig+0x294>)
 8003744:	6833      	ldr	r3, [r6, #0]
 8003746:	f013 0f02 	tst.w	r3, #2
 800374a:	d0d1      	beq.n	80036f0 <HAL_RCC_OscConfig+0x164>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800374c:	f7fe fb92 	bl	8001e74 <HAL_GetTick>
 8003750:	1b40      	subs	r0, r0, r5
 8003752:	2802      	cmp	r0, #2
 8003754:	d9f6      	bls.n	8003744 <HAL_RCC_OscConfig+0x1b8>
            return HAL_TIMEOUT;
 8003756:	2003      	movs	r0, #3
 8003758:	e123      	b.n	80039a2 <HAL_RCC_OscConfig+0x416>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800375a:	4b33      	ldr	r3, [pc, #204]	; (8003828 <HAL_RCC_OscConfig+0x29c>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a33      	ldr	r2, [pc, #204]	; (800382c <HAL_RCC_OscConfig+0x2a0>)
 8003760:	fba2 2303 	umull	r2, r3, r2, r3
 8003764:	0a5b      	lsrs	r3, r3, #9
 8003766:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8003768:	bf00      	nop
  }
  while (Delay --);
 800376a:	9b01      	ldr	r3, [sp, #4]
 800376c:	1e5a      	subs	r2, r3, #1
 800376e:	9201      	str	r2, [sp, #4]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d1f9      	bne.n	8003768 <HAL_RCC_OscConfig+0x1dc>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003774:	6823      	ldr	r3, [r4, #0]
 8003776:	f013 0f04 	tst.w	r3, #4
 800377a:	f000 809b 	beq.w	80038b4 <HAL_RCC_OscConfig+0x328>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800377e:	4b28      	ldr	r3, [pc, #160]	; (8003820 <HAL_RCC_OscConfig+0x294>)
 8003780:	69db      	ldr	r3, [r3, #28]
 8003782:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003786:	d134      	bne.n	80037f2 <HAL_RCC_OscConfig+0x266>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003788:	4b25      	ldr	r3, [pc, #148]	; (8003820 <HAL_RCC_OscConfig+0x294>)
 800378a:	69da      	ldr	r2, [r3, #28]
 800378c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003790:	61da      	str	r2, [r3, #28]
 8003792:	69db      	ldr	r3, [r3, #28]
 8003794:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003798:	9300      	str	r3, [sp, #0]
 800379a:	9b00      	ldr	r3, [sp, #0]
      pwrclkchanged = SET;
 800379c:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800379e:	4b24      	ldr	r3, [pc, #144]	; (8003830 <HAL_RCC_OscConfig+0x2a4>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f413 7f80 	tst.w	r3, #256	; 0x100
 80037a6:	d026      	beq.n	80037f6 <HAL_RCC_OscConfig+0x26a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037a8:	68e3      	ldr	r3, [r4, #12]
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d042      	beq.n	8003834 <HAL_RCC_OscConfig+0x2a8>
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d158      	bne.n	8003864 <HAL_RCC_OscConfig+0x2d8>
 80037b2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80037b6:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80037ba:	6a1a      	ldr	r2, [r3, #32]
 80037bc:	f022 0201 	bic.w	r2, r2, #1
 80037c0:	621a      	str	r2, [r3, #32]
 80037c2:	6a1a      	ldr	r2, [r3, #32]
 80037c4:	f022 0204 	bic.w	r2, r2, #4
 80037c8:	621a      	str	r2, [r3, #32]
 80037ca:	e038      	b.n	800383e <HAL_RCC_OscConfig+0x2b2>
      __HAL_RCC_LSI_DISABLE();
 80037cc:	4b15      	ldr	r3, [pc, #84]	; (8003824 <HAL_RCC_OscConfig+0x298>)
 80037ce:	2200      	movs	r2, #0
 80037d0:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 80037d4:	f7fe fb4e 	bl	8001e74 <HAL_GetTick>
 80037d8:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037da:	4e11      	ldr	r6, [pc, #68]	; (8003820 <HAL_RCC_OscConfig+0x294>)
 80037dc:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80037de:	f013 0f02 	tst.w	r3, #2
 80037e2:	d0c7      	beq.n	8003774 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037e4:	f7fe fb46 	bl	8001e74 <HAL_GetTick>
 80037e8:	1b40      	subs	r0, r0, r5
 80037ea:	2802      	cmp	r0, #2
 80037ec:	d9f6      	bls.n	80037dc <HAL_RCC_OscConfig+0x250>
          return HAL_TIMEOUT;
 80037ee:	2003      	movs	r0, #3
 80037f0:	e0d7      	b.n	80039a2 <HAL_RCC_OscConfig+0x416>
    FlagStatus       pwrclkchanged = RESET;
 80037f2:	2500      	movs	r5, #0
 80037f4:	e7d3      	b.n	800379e <HAL_RCC_OscConfig+0x212>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037f6:	4a0e      	ldr	r2, [pc, #56]	; (8003830 <HAL_RCC_OscConfig+0x2a4>)
 80037f8:	6813      	ldr	r3, [r2, #0]
 80037fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037fe:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8003800:	f7fe fb38 	bl	8001e74 <HAL_GetTick>
 8003804:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003806:	4f0a      	ldr	r7, [pc, #40]	; (8003830 <HAL_RCC_OscConfig+0x2a4>)
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800380e:	d1cb      	bne.n	80037a8 <HAL_RCC_OscConfig+0x21c>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003810:	f7fe fb30 	bl	8001e74 <HAL_GetTick>
 8003814:	1b80      	subs	r0, r0, r6
 8003816:	2864      	cmp	r0, #100	; 0x64
 8003818:	d9f6      	bls.n	8003808 <HAL_RCC_OscConfig+0x27c>
          return HAL_TIMEOUT;
 800381a:	2003      	movs	r0, #3
 800381c:	e0c1      	b.n	80039a2 <HAL_RCC_OscConfig+0x416>
 800381e:	bf00      	nop
 8003820:	40021000 	.word	0x40021000
 8003824:	42420000 	.word	0x42420000
 8003828:	20000098 	.word	0x20000098
 800382c:	10624dd3 	.word	0x10624dd3
 8003830:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003834:	4a5e      	ldr	r2, [pc, #376]	; (80039b0 <HAL_RCC_OscConfig+0x424>)
 8003836:	6a13      	ldr	r3, [r2, #32]
 8003838:	f043 0301 	orr.w	r3, r3, #1
 800383c:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800383e:	68e3      	ldr	r3, [r4, #12]
 8003840:	b333      	cbz	r3, 8003890 <HAL_RCC_OscConfig+0x304>
      tickstart = HAL_GetTick();
 8003842:	f7fe fb17 	bl	8001e74 <HAL_GetTick>
 8003846:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003848:	4f59      	ldr	r7, [pc, #356]	; (80039b0 <HAL_RCC_OscConfig+0x424>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800384a:	f241 3888 	movw	r8, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800384e:	6a3b      	ldr	r3, [r7, #32]
 8003850:	f013 0f02 	tst.w	r3, #2
 8003854:	d12d      	bne.n	80038b2 <HAL_RCC_OscConfig+0x326>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003856:	f7fe fb0d 	bl	8001e74 <HAL_GetTick>
 800385a:	1b80      	subs	r0, r0, r6
 800385c:	4540      	cmp	r0, r8
 800385e:	d9f6      	bls.n	800384e <HAL_RCC_OscConfig+0x2c2>
          return HAL_TIMEOUT;
 8003860:	2003      	movs	r0, #3
 8003862:	e09e      	b.n	80039a2 <HAL_RCC_OscConfig+0x416>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003864:	2b05      	cmp	r3, #5
 8003866:	d009      	beq.n	800387c <HAL_RCC_OscConfig+0x2f0>
 8003868:	4b51      	ldr	r3, [pc, #324]	; (80039b0 <HAL_RCC_OscConfig+0x424>)
 800386a:	6a1a      	ldr	r2, [r3, #32]
 800386c:	f022 0201 	bic.w	r2, r2, #1
 8003870:	621a      	str	r2, [r3, #32]
 8003872:	6a1a      	ldr	r2, [r3, #32]
 8003874:	f022 0204 	bic.w	r2, r2, #4
 8003878:	621a      	str	r2, [r3, #32]
 800387a:	e7e0      	b.n	800383e <HAL_RCC_OscConfig+0x2b2>
 800387c:	4b4c      	ldr	r3, [pc, #304]	; (80039b0 <HAL_RCC_OscConfig+0x424>)
 800387e:	6a1a      	ldr	r2, [r3, #32]
 8003880:	f042 0204 	orr.w	r2, r2, #4
 8003884:	621a      	str	r2, [r3, #32]
 8003886:	6a1a      	ldr	r2, [r3, #32]
 8003888:	f042 0201 	orr.w	r2, r2, #1
 800388c:	621a      	str	r2, [r3, #32]
 800388e:	e7d6      	b.n	800383e <HAL_RCC_OscConfig+0x2b2>
      tickstart = HAL_GetTick();
 8003890:	f7fe faf0 	bl	8001e74 <HAL_GetTick>
 8003894:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003896:	4f46      	ldr	r7, [pc, #280]	; (80039b0 <HAL_RCC_OscConfig+0x424>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003898:	f241 3888 	movw	r8, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800389c:	6a3b      	ldr	r3, [r7, #32]
 800389e:	f013 0f02 	tst.w	r3, #2
 80038a2:	d006      	beq.n	80038b2 <HAL_RCC_OscConfig+0x326>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038a4:	f7fe fae6 	bl	8001e74 <HAL_GetTick>
 80038a8:	1b80      	subs	r0, r0, r6
 80038aa:	4540      	cmp	r0, r8
 80038ac:	d9f6      	bls.n	800389c <HAL_RCC_OscConfig+0x310>
          return HAL_TIMEOUT;
 80038ae:	2003      	movs	r0, #3
 80038b0:	e077      	b.n	80039a2 <HAL_RCC_OscConfig+0x416>
    if (pwrclkchanged == SET)
 80038b2:	b9e5      	cbnz	r5, 80038ee <HAL_RCC_OscConfig+0x362>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038b4:	69e3      	ldr	r3, [r4, #28]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d072      	beq.n	80039a0 <HAL_RCC_OscConfig+0x414>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80038ba:	4a3d      	ldr	r2, [pc, #244]	; (80039b0 <HAL_RCC_OscConfig+0x424>)
 80038bc:	6852      	ldr	r2, [r2, #4]
 80038be:	f002 020c 	and.w	r2, r2, #12
 80038c2:	2a08      	cmp	r2, #8
 80038c4:	d056      	beq.n	8003974 <HAL_RCC_OscConfig+0x3e8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	d017      	beq.n	80038fa <HAL_RCC_OscConfig+0x36e>
        __HAL_RCC_PLL_DISABLE();
 80038ca:	4b3a      	ldr	r3, [pc, #232]	; (80039b4 <HAL_RCC_OscConfig+0x428>)
 80038cc:	2200      	movs	r2, #0
 80038ce:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80038d0:	f7fe fad0 	bl	8001e74 <HAL_GetTick>
 80038d4:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038d6:	4d36      	ldr	r5, [pc, #216]	; (80039b0 <HAL_RCC_OscConfig+0x424>)
 80038d8:	682b      	ldr	r3, [r5, #0]
 80038da:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80038de:	d047      	beq.n	8003970 <HAL_RCC_OscConfig+0x3e4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038e0:	f7fe fac8 	bl	8001e74 <HAL_GetTick>
 80038e4:	1b00      	subs	r0, r0, r4
 80038e6:	2802      	cmp	r0, #2
 80038e8:	d9f6      	bls.n	80038d8 <HAL_RCC_OscConfig+0x34c>
            return HAL_TIMEOUT;
 80038ea:	2003      	movs	r0, #3
 80038ec:	e059      	b.n	80039a2 <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_PWR_CLK_DISABLE();
 80038ee:	4a30      	ldr	r2, [pc, #192]	; (80039b0 <HAL_RCC_OscConfig+0x424>)
 80038f0:	69d3      	ldr	r3, [r2, #28]
 80038f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038f6:	61d3      	str	r3, [r2, #28]
 80038f8:	e7dc      	b.n	80038b4 <HAL_RCC_OscConfig+0x328>
        __HAL_RCC_PLL_DISABLE();
 80038fa:	4b2e      	ldr	r3, [pc, #184]	; (80039b4 <HAL_RCC_OscConfig+0x428>)
 80038fc:	2200      	movs	r2, #0
 80038fe:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8003900:	f7fe fab8 	bl	8001e74 <HAL_GetTick>
 8003904:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003906:	4e2a      	ldr	r6, [pc, #168]	; (80039b0 <HAL_RCC_OscConfig+0x424>)
 8003908:	6833      	ldr	r3, [r6, #0]
 800390a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800390e:	d006      	beq.n	800391e <HAL_RCC_OscConfig+0x392>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003910:	f7fe fab0 	bl	8001e74 <HAL_GetTick>
 8003914:	1b40      	subs	r0, r0, r5
 8003916:	2802      	cmp	r0, #2
 8003918:	d9f6      	bls.n	8003908 <HAL_RCC_OscConfig+0x37c>
            return HAL_TIMEOUT;
 800391a:	2003      	movs	r0, #3
 800391c:	e041      	b.n	80039a2 <HAL_RCC_OscConfig+0x416>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800391e:	6a23      	ldr	r3, [r4, #32]
 8003920:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003924:	d01a      	beq.n	800395c <HAL_RCC_OscConfig+0x3d0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003926:	4922      	ldr	r1, [pc, #136]	; (80039b0 <HAL_RCC_OscConfig+0x424>)
 8003928:	684a      	ldr	r2, [r1, #4]
 800392a:	6a23      	ldr	r3, [r4, #32]
 800392c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800392e:	4303      	orrs	r3, r0
 8003930:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8003934:	4313      	orrs	r3, r2
 8003936:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8003938:	4b1e      	ldr	r3, [pc, #120]	; (80039b4 <HAL_RCC_OscConfig+0x428>)
 800393a:	2201      	movs	r2, #1
 800393c:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 800393e:	f7fe fa99 	bl	8001e74 <HAL_GetTick>
 8003942:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003944:	4d1a      	ldr	r5, [pc, #104]	; (80039b0 <HAL_RCC_OscConfig+0x424>)
 8003946:	682b      	ldr	r3, [r5, #0]
 8003948:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800394c:	d10e      	bne.n	800396c <HAL_RCC_OscConfig+0x3e0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800394e:	f7fe fa91 	bl	8001e74 <HAL_GetTick>
 8003952:	1b00      	subs	r0, r0, r4
 8003954:	2802      	cmp	r0, #2
 8003956:	d9f6      	bls.n	8003946 <HAL_RCC_OscConfig+0x3ba>
            return HAL_TIMEOUT;
 8003958:	2003      	movs	r0, #3
 800395a:	e022      	b.n	80039a2 <HAL_RCC_OscConfig+0x416>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800395c:	4a14      	ldr	r2, [pc, #80]	; (80039b0 <HAL_RCC_OscConfig+0x424>)
 800395e:	6853      	ldr	r3, [r2, #4]
 8003960:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003964:	68a1      	ldr	r1, [r4, #8]
 8003966:	430b      	orrs	r3, r1
 8003968:	6053      	str	r3, [r2, #4]
 800396a:	e7dc      	b.n	8003926 <HAL_RCC_OscConfig+0x39a>
  return HAL_OK;
 800396c:	2000      	movs	r0, #0
 800396e:	e018      	b.n	80039a2 <HAL_RCC_OscConfig+0x416>
 8003970:	2000      	movs	r0, #0
 8003972:	e016      	b.n	80039a2 <HAL_RCC_OscConfig+0x416>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003974:	2b01      	cmp	r3, #1
 8003976:	d017      	beq.n	80039a8 <HAL_RCC_OscConfig+0x41c>
        pll_config = RCC->CFGR;
 8003978:	4b0d      	ldr	r3, [pc, #52]	; (80039b0 <HAL_RCC_OscConfig+0x424>)
 800397a:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800397c:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8003980:	6a22      	ldr	r2, [r4, #32]
 8003982:	4291      	cmp	r1, r2
 8003984:	d112      	bne.n	80039ac <HAL_RCC_OscConfig+0x420>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003986:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800398a:	6a60      	ldr	r0, [r4, #36]	; 0x24
        return HAL_ERROR;
 800398c:	1a18      	subs	r0, r3, r0
 800398e:	bf18      	it	ne
 8003990:	2001      	movne	r0, #1
 8003992:	e006      	b.n	80039a2 <HAL_RCC_OscConfig+0x416>
    return HAL_ERROR;
 8003994:	2001      	movs	r0, #1
}
 8003996:	4770      	bx	lr
        return HAL_ERROR;
 8003998:	2001      	movs	r0, #1
 800399a:	e002      	b.n	80039a2 <HAL_RCC_OscConfig+0x416>
        return HAL_ERROR;
 800399c:	2001      	movs	r0, #1
 800399e:	e000      	b.n	80039a2 <HAL_RCC_OscConfig+0x416>
  return HAL_OK;
 80039a0:	2000      	movs	r0, #0
}
 80039a2:	b002      	add	sp, #8
 80039a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_ERROR;
 80039a8:	2001      	movs	r0, #1
 80039aa:	e7fa      	b.n	80039a2 <HAL_RCC_OscConfig+0x416>
          return HAL_ERROR;
 80039ac:	2001      	movs	r0, #1
 80039ae:	e7f8      	b.n	80039a2 <HAL_RCC_OscConfig+0x416>
 80039b0:	40021000 	.word	0x40021000
 80039b4:	42420000 	.word	0x42420000

080039b8 <HAL_RCC_GetSysClockFreq>:
{
 80039b8:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80039ba:	4b17      	ldr	r3, [pc, #92]	; (8003a18 <HAL_RCC_GetSysClockFreq+0x60>)
 80039bc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80039be:	f10d 0c18 	add.w	ip, sp, #24
 80039c2:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80039c6:	f240 2301 	movw	r3, #513	; 0x201
 80039ca:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 80039ce:	4b13      	ldr	r3, [pc, #76]	; (8003a1c <HAL_RCC_GetSysClockFreq+0x64>)
 80039d0:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80039d2:	f003 020c 	and.w	r2, r3, #12
 80039d6:	2a08      	cmp	r2, #8
 80039d8:	d002      	beq.n	80039e0 <HAL_RCC_GetSysClockFreq+0x28>
      sysclockfreq = HSE_VALUE;
 80039da:	4811      	ldr	r0, [pc, #68]	; (8003a20 <HAL_RCC_GetSysClockFreq+0x68>)
}
 80039dc:	b006      	add	sp, #24
 80039de:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80039e0:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80039e4:	3218      	adds	r2, #24
 80039e6:	446a      	add	r2, sp
 80039e8:	f812 0c10 	ldrb.w	r0, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80039ec:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80039f0:	d00d      	beq.n	8003a0e <HAL_RCC_GetSysClockFreq+0x56>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80039f2:	4b0a      	ldr	r3, [pc, #40]	; (8003a1c <HAL_RCC_GetSysClockFreq+0x64>)
 80039f4:	685b      	ldr	r3, [r3, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80039f6:	4a0a      	ldr	r2, [pc, #40]	; (8003a20 <HAL_RCC_GetSysClockFreq+0x68>)
 80039f8:	fb02 f000 	mul.w	r0, r2, r0
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80039fc:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8003a00:	3318      	adds	r3, #24
 8003a02:	446b      	add	r3, sp
 8003a04:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003a08:	fbb0 f0f3 	udiv	r0, r0, r3
 8003a0c:	e7e6      	b.n	80039dc <HAL_RCC_GetSysClockFreq+0x24>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003a0e:	4b05      	ldr	r3, [pc, #20]	; (8003a24 <HAL_RCC_GetSysClockFreq+0x6c>)
 8003a10:	fb03 f000 	mul.w	r0, r3, r0
 8003a14:	e7e2      	b.n	80039dc <HAL_RCC_GetSysClockFreq+0x24>
 8003a16:	bf00      	nop
 8003a18:	0800b118 	.word	0x0800b118
 8003a1c:	40021000 	.word	0x40021000
 8003a20:	007a1200 	.word	0x007a1200
 8003a24:	003d0900 	.word	0x003d0900

08003a28 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8003a28:	2800      	cmp	r0, #0
 8003a2a:	f000 80a2 	beq.w	8003b72 <HAL_RCC_ClockConfig+0x14a>
{
 8003a2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a32:	460d      	mov	r5, r1
 8003a34:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a36:	4b53      	ldr	r3, [pc, #332]	; (8003b84 <HAL_RCC_ClockConfig+0x15c>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 0307 	and.w	r3, r3, #7
 8003a3e:	428b      	cmp	r3, r1
 8003a40:	d20b      	bcs.n	8003a5a <HAL_RCC_ClockConfig+0x32>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a42:	4a50      	ldr	r2, [pc, #320]	; (8003b84 <HAL_RCC_ClockConfig+0x15c>)
 8003a44:	6813      	ldr	r3, [r2, #0]
 8003a46:	f023 0307 	bic.w	r3, r3, #7
 8003a4a:	430b      	orrs	r3, r1
 8003a4c:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a4e:	6813      	ldr	r3, [r2, #0]
 8003a50:	f003 0307 	and.w	r3, r3, #7
 8003a54:	428b      	cmp	r3, r1
 8003a56:	f040 808e 	bne.w	8003b76 <HAL_RCC_ClockConfig+0x14e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a5a:	6823      	ldr	r3, [r4, #0]
 8003a5c:	f013 0f02 	tst.w	r3, #2
 8003a60:	d017      	beq.n	8003a92 <HAL_RCC_ClockConfig+0x6a>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a62:	f013 0f04 	tst.w	r3, #4
 8003a66:	d004      	beq.n	8003a72 <HAL_RCC_ClockConfig+0x4a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a68:	4a47      	ldr	r2, [pc, #284]	; (8003b88 <HAL_RCC_ClockConfig+0x160>)
 8003a6a:	6853      	ldr	r3, [r2, #4]
 8003a6c:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003a70:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a72:	6823      	ldr	r3, [r4, #0]
 8003a74:	f013 0f08 	tst.w	r3, #8
 8003a78:	d004      	beq.n	8003a84 <HAL_RCC_ClockConfig+0x5c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a7a:	4a43      	ldr	r2, [pc, #268]	; (8003b88 <HAL_RCC_ClockConfig+0x160>)
 8003a7c:	6853      	ldr	r3, [r2, #4]
 8003a7e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003a82:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a84:	4a40      	ldr	r2, [pc, #256]	; (8003b88 <HAL_RCC_ClockConfig+0x160>)
 8003a86:	6853      	ldr	r3, [r2, #4]
 8003a88:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a8c:	68a1      	ldr	r1, [r4, #8]
 8003a8e:	430b      	orrs	r3, r1
 8003a90:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a92:	6823      	ldr	r3, [r4, #0]
 8003a94:	f013 0f01 	tst.w	r3, #1
 8003a98:	d031      	beq.n	8003afe <HAL_RCC_ClockConfig+0xd6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a9a:	6862      	ldr	r2, [r4, #4]
 8003a9c:	2a01      	cmp	r2, #1
 8003a9e:	d020      	beq.n	8003ae2 <HAL_RCC_ClockConfig+0xba>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003aa0:	2a02      	cmp	r2, #2
 8003aa2:	d025      	beq.n	8003af0 <HAL_RCC_ClockConfig+0xc8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aa4:	4b38      	ldr	r3, [pc, #224]	; (8003b88 <HAL_RCC_ClockConfig+0x160>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f013 0f02 	tst.w	r3, #2
 8003aac:	d065      	beq.n	8003b7a <HAL_RCC_ClockConfig+0x152>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003aae:	4936      	ldr	r1, [pc, #216]	; (8003b88 <HAL_RCC_ClockConfig+0x160>)
 8003ab0:	684b      	ldr	r3, [r1, #4]
 8003ab2:	f023 0303 	bic.w	r3, r3, #3
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8003aba:	f7fe f9db 	bl	8001e74 <HAL_GetTick>
 8003abe:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ac0:	4f31      	ldr	r7, [pc, #196]	; (8003b88 <HAL_RCC_ClockConfig+0x160>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ac2:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f003 030c 	and.w	r3, r3, #12
 8003acc:	6862      	ldr	r2, [r4, #4]
 8003ace:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003ad2:	d014      	beq.n	8003afe <HAL_RCC_ClockConfig+0xd6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ad4:	f7fe f9ce 	bl	8001e74 <HAL_GetTick>
 8003ad8:	1b80      	subs	r0, r0, r6
 8003ada:	4540      	cmp	r0, r8
 8003adc:	d9f3      	bls.n	8003ac6 <HAL_RCC_ClockConfig+0x9e>
        return HAL_TIMEOUT;
 8003ade:	2003      	movs	r0, #3
 8003ae0:	e045      	b.n	8003b6e <HAL_RCC_ClockConfig+0x146>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ae2:	4b29      	ldr	r3, [pc, #164]	; (8003b88 <HAL_RCC_ClockConfig+0x160>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003aea:	d1e0      	bne.n	8003aae <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8003aec:	2001      	movs	r0, #1
 8003aee:	e03e      	b.n	8003b6e <HAL_RCC_ClockConfig+0x146>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003af0:	4b25      	ldr	r3, [pc, #148]	; (8003b88 <HAL_RCC_ClockConfig+0x160>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003af8:	d1d9      	bne.n	8003aae <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8003afa:	2001      	movs	r0, #1
 8003afc:	e037      	b.n	8003b6e <HAL_RCC_ClockConfig+0x146>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003afe:	4b21      	ldr	r3, [pc, #132]	; (8003b84 <HAL_RCC_ClockConfig+0x15c>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 0307 	and.w	r3, r3, #7
 8003b06:	42ab      	cmp	r3, r5
 8003b08:	d90a      	bls.n	8003b20 <HAL_RCC_ClockConfig+0xf8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b0a:	4a1e      	ldr	r2, [pc, #120]	; (8003b84 <HAL_RCC_ClockConfig+0x15c>)
 8003b0c:	6813      	ldr	r3, [r2, #0]
 8003b0e:	f023 0307 	bic.w	r3, r3, #7
 8003b12:	432b      	orrs	r3, r5
 8003b14:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b16:	6813      	ldr	r3, [r2, #0]
 8003b18:	f003 0307 	and.w	r3, r3, #7
 8003b1c:	42ab      	cmp	r3, r5
 8003b1e:	d12e      	bne.n	8003b7e <HAL_RCC_ClockConfig+0x156>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b20:	6823      	ldr	r3, [r4, #0]
 8003b22:	f013 0f04 	tst.w	r3, #4
 8003b26:	d006      	beq.n	8003b36 <HAL_RCC_ClockConfig+0x10e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b28:	4a17      	ldr	r2, [pc, #92]	; (8003b88 <HAL_RCC_ClockConfig+0x160>)
 8003b2a:	6853      	ldr	r3, [r2, #4]
 8003b2c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003b30:	68e1      	ldr	r1, [r4, #12]
 8003b32:	430b      	orrs	r3, r1
 8003b34:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b36:	6823      	ldr	r3, [r4, #0]
 8003b38:	f013 0f08 	tst.w	r3, #8
 8003b3c:	d007      	beq.n	8003b4e <HAL_RCC_ClockConfig+0x126>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003b3e:	4a12      	ldr	r2, [pc, #72]	; (8003b88 <HAL_RCC_ClockConfig+0x160>)
 8003b40:	6853      	ldr	r3, [r2, #4]
 8003b42:	6921      	ldr	r1, [r4, #16]
 8003b44:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8003b48:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003b4c:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b4e:	f7ff ff33 	bl	80039b8 <HAL_RCC_GetSysClockFreq>
 8003b52:	4b0d      	ldr	r3, [pc, #52]	; (8003b88 <HAL_RCC_ClockConfig+0x160>)
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003b5a:	4a0c      	ldr	r2, [pc, #48]	; (8003b8c <HAL_RCC_ClockConfig+0x164>)
 8003b5c:	5cd3      	ldrb	r3, [r2, r3]
 8003b5e:	40d8      	lsrs	r0, r3
 8003b60:	4b0b      	ldr	r3, [pc, #44]	; (8003b90 <HAL_RCC_ClockConfig+0x168>)
 8003b62:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8003b64:	4b0b      	ldr	r3, [pc, #44]	; (8003b94 <HAL_RCC_ClockConfig+0x16c>)
 8003b66:	6818      	ldr	r0, [r3, #0]
 8003b68:	f7fe f940 	bl	8001dec <HAL_InitTick>
  return HAL_OK;
 8003b6c:	2000      	movs	r0, #0
}
 8003b6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8003b72:	2001      	movs	r0, #1
}
 8003b74:	4770      	bx	lr
    return HAL_ERROR;
 8003b76:	2001      	movs	r0, #1
 8003b78:	e7f9      	b.n	8003b6e <HAL_RCC_ClockConfig+0x146>
        return HAL_ERROR;
 8003b7a:	2001      	movs	r0, #1
 8003b7c:	e7f7      	b.n	8003b6e <HAL_RCC_ClockConfig+0x146>
    return HAL_ERROR;
 8003b7e:	2001      	movs	r0, #1
 8003b80:	e7f5      	b.n	8003b6e <HAL_RCC_ClockConfig+0x146>
 8003b82:	bf00      	nop
 8003b84:	40022000 	.word	0x40022000
 8003b88:	40021000 	.word	0x40021000
 8003b8c:	0800b0f4 	.word	0x0800b0f4
 8003b90:	20000098 	.word	0x20000098
 8003b94:	200000a0 	.word	0x200000a0

08003b98 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b98:	4b04      	ldr	r3, [pc, #16]	; (8003bac <HAL_RCC_GetPCLK1Freq+0x14>)
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8003ba0:	4a03      	ldr	r2, [pc, #12]	; (8003bb0 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003ba2:	5cd3      	ldrb	r3, [r2, r3]
 8003ba4:	4a03      	ldr	r2, [pc, #12]	; (8003bb4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003ba6:	6810      	ldr	r0, [r2, #0]
}
 8003ba8:	40d8      	lsrs	r0, r3
 8003baa:	4770      	bx	lr
 8003bac:	40021000 	.word	0x40021000
 8003bb0:	0800b104 	.word	0x0800b104
 8003bb4:	20000098 	.word	0x20000098

08003bb8 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003bb8:	4b04      	ldr	r3, [pc, #16]	; (8003bcc <HAL_RCC_GetPCLK2Freq+0x14>)
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8003bc0:	4a03      	ldr	r2, [pc, #12]	; (8003bd0 <HAL_RCC_GetPCLK2Freq+0x18>)
 8003bc2:	5cd3      	ldrb	r3, [r2, r3]
 8003bc4:	4a03      	ldr	r2, [pc, #12]	; (8003bd4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003bc6:	6810      	ldr	r0, [r2, #0]
}
 8003bc8:	40d8      	lsrs	r0, r3
 8003bca:	4770      	bx	lr
 8003bcc:	40021000 	.word	0x40021000
 8003bd0:	0800b104 	.word	0x0800b104
 8003bd4:	20000098 	.word	0x20000098

08003bd8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003bd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003bdc:	b082      	sub	sp, #8
 8003bde:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003be0:	6803      	ldr	r3, [r0, #0]
 8003be2:	f013 0f01 	tst.w	r3, #1
 8003be6:	d036      	beq.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003be8:	4b3f      	ldr	r3, [pc, #252]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8003bea:	69db      	ldr	r3, [r3, #28]
 8003bec:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003bf0:	d149      	bne.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0xae>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bf2:	4b3d      	ldr	r3, [pc, #244]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8003bf4:	69da      	ldr	r2, [r3, #28]
 8003bf6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003bfa:	61da      	str	r2, [r3, #28]
 8003bfc:	69db      	ldr	r3, [r3, #28]
 8003bfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c02:	9301      	str	r3, [sp, #4]
 8003c04:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003c06:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c08:	4b38      	ldr	r3, [pc, #224]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003c10:	d03b      	beq.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c12:	4b35      	ldr	r3, [pc, #212]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8003c14:	6a1b      	ldr	r3, [r3, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c16:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8003c1a:	d013      	beq.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8003c1c:	6862      	ldr	r2, [r4, #4]
 8003c1e:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d00e      	beq.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x6c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c26:	4a30      	ldr	r2, [pc, #192]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8003c28:	6a13      	ldr	r3, [r2, #32]
 8003c2a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c2e:	4930      	ldr	r1, [pc, #192]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8003c30:	2601      	movs	r6, #1
 8003c32:	f8c1 6440 	str.w	r6, [r1, #1088]	; 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c36:	2600      	movs	r6, #0
 8003c38:	f8c1 6440 	str.w	r6, [r1, #1088]	; 0x440
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003c3c:	6210      	str	r0, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003c3e:	f013 0f01 	tst.w	r3, #1
 8003c42:	d136      	bne.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0xda>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c44:	4a28      	ldr	r2, [pc, #160]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8003c46:	6a13      	ldr	r3, [r2, #32]
 8003c48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c4c:	6861      	ldr	r1, [r4, #4]
 8003c4e:	430b      	orrs	r3, r1
 8003c50:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003c52:	2d00      	cmp	r5, #0
 8003c54:	d13e      	bne.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c56:	6823      	ldr	r3, [r4, #0]
 8003c58:	f013 0f02 	tst.w	r3, #2
 8003c5c:	d006      	beq.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x94>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c5e:	4a22      	ldr	r2, [pc, #136]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8003c60:	6853      	ldr	r3, [r2, #4]
 8003c62:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003c66:	68a1      	ldr	r1, [r4, #8]
 8003c68:	430b      	orrs	r3, r1
 8003c6a:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003c6c:	6823      	ldr	r3, [r4, #0]
 8003c6e:	f013 0f10 	tst.w	r3, #16
 8003c72:	d034      	beq.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x106>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c74:	4a1c      	ldr	r2, [pc, #112]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8003c76:	6853      	ldr	r3, [r2, #4]
 8003c78:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003c7c:	68e1      	ldr	r1, [r4, #12]
 8003c7e:	430b      	orrs	r3, r1
 8003c80:	6053      	str	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003c82:	2000      	movs	r0, #0
 8003c84:	e02c      	b.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x108>
    FlagStatus pwrclkchanged = RESET;
 8003c86:	2500      	movs	r5, #0
 8003c88:	e7be      	b.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x30>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c8a:	4a18      	ldr	r2, [pc, #96]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8003c8c:	6813      	ldr	r3, [r2, #0]
 8003c8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c92:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8003c94:	f7fe f8ee 	bl	8001e74 <HAL_GetTick>
 8003c98:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c9a:	4f14      	ldr	r7, [pc, #80]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003ca2:	d1b6      	bne.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ca4:	f7fe f8e6 	bl	8001e74 <HAL_GetTick>
 8003ca8:	1b80      	subs	r0, r0, r6
 8003caa:	2864      	cmp	r0, #100	; 0x64
 8003cac:	d9f6      	bls.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0xc4>
          return HAL_TIMEOUT;
 8003cae:	2003      	movs	r0, #3
 8003cb0:	e016      	b.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x108>
        tickstart = HAL_GetTick();
 8003cb2:	f7fe f8df 	bl	8001e74 <HAL_GetTick>
 8003cb6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cb8:	4f0b      	ldr	r7, [pc, #44]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x110>)
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cba:	f241 3888 	movw	r8, #5000	; 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cbe:	6a3b      	ldr	r3, [r7, #32]
 8003cc0:	f013 0f02 	tst.w	r3, #2
 8003cc4:	d1be      	bne.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x6c>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cc6:	f7fe f8d5 	bl	8001e74 <HAL_GetTick>
 8003cca:	1b80      	subs	r0, r0, r6
 8003ccc:	4540      	cmp	r0, r8
 8003cce:	d9f6      	bls.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0xe6>
            return HAL_TIMEOUT;
 8003cd0:	2003      	movs	r0, #3
 8003cd2:	e005      	b.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x108>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cd4:	69d3      	ldr	r3, [r2, #28]
 8003cd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cda:	61d3      	str	r3, [r2, #28]
 8003cdc:	e7bb      	b.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x7e>
  return HAL_OK;
 8003cde:	2000      	movs	r0, #0
}
 8003ce0:	b002      	add	sp, #8
 8003ce2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ce6:	bf00      	nop
 8003ce8:	40021000 	.word	0x40021000
 8003cec:	40007000 	.word	0x40007000
 8003cf0:	42420000 	.word	0x42420000

08003cf4 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003cf4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d127      	bne.n	8003d4e <HAL_TIM_Base_Start_IT+0x5a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cfe:	2302      	movs	r3, #2
 8003d00:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d04:	6802      	ldr	r2, [r0, #0]
 8003d06:	68d3      	ldr	r3, [r2, #12]
 8003d08:	f043 0301 	orr.w	r3, r3, #1
 8003d0c:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d0e:	6803      	ldr	r3, [r0, #0]
 8003d10:	4a11      	ldr	r2, [pc, #68]	; (8003d58 <HAL_TIM_Base_Start_IT+0x64>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d010      	beq.n	8003d38 <HAL_TIM_Base_Start_IT+0x44>
 8003d16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d1a:	d00d      	beq.n	8003d38 <HAL_TIM_Base_Start_IT+0x44>
 8003d1c:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d009      	beq.n	8003d38 <HAL_TIM_Base_Start_IT+0x44>
 8003d24:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d005      	beq.n	8003d38 <HAL_TIM_Base_Start_IT+0x44>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	f042 0201 	orr.w	r2, r2, #1
 8003d32:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d34:	2000      	movs	r0, #0
 8003d36:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d38:	689a      	ldr	r2, [r3, #8]
 8003d3a:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d3e:	2a06      	cmp	r2, #6
 8003d40:	d007      	beq.n	8003d52 <HAL_TIM_Base_Start_IT+0x5e>
      __HAL_TIM_ENABLE(htim);
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	f042 0201 	orr.w	r2, r2, #1
 8003d48:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003d4a:	2000      	movs	r0, #0
 8003d4c:	4770      	bx	lr
    return HAL_ERROR;
 8003d4e:	2001      	movs	r0, #1
 8003d50:	4770      	bx	lr
  return HAL_OK;
 8003d52:	2000      	movs	r0, #0
}
 8003d54:	4770      	bx	lr
 8003d56:	bf00      	nop
 8003d58:	40012c00 	.word	0x40012c00

08003d5c <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d5c:	4770      	bx	lr

08003d5e <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d5e:	4770      	bx	lr

08003d60 <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d60:	4770      	bx	lr

08003d62 <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d62:	4770      	bx	lr

08003d64 <HAL_TIM_IRQHandler>:
{
 8003d64:	b510      	push	{r4, lr}
 8003d66:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d68:	6803      	ldr	r3, [r0, #0]
 8003d6a:	691a      	ldr	r2, [r3, #16]
 8003d6c:	f012 0f02 	tst.w	r2, #2
 8003d70:	d011      	beq.n	8003d96 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003d72:	68da      	ldr	r2, [r3, #12]
 8003d74:	f012 0f02 	tst.w	r2, #2
 8003d78:	d00d      	beq.n	8003d96 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d7a:	f06f 0202 	mvn.w	r2, #2
 8003d7e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d80:	2301      	movs	r3, #1
 8003d82:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d84:	6803      	ldr	r3, [r0, #0]
 8003d86:	699b      	ldr	r3, [r3, #24]
 8003d88:	f013 0f03 	tst.w	r3, #3
 8003d8c:	d070      	beq.n	8003e70 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 8003d8e:	f7ff ffe6 	bl	8003d5e <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d92:	2300      	movs	r3, #0
 8003d94:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003d96:	6823      	ldr	r3, [r4, #0]
 8003d98:	691a      	ldr	r2, [r3, #16]
 8003d9a:	f012 0f04 	tst.w	r2, #4
 8003d9e:	d012      	beq.n	8003dc6 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003da0:	68da      	ldr	r2, [r3, #12]
 8003da2:	f012 0f04 	tst.w	r2, #4
 8003da6:	d00e      	beq.n	8003dc6 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003da8:	f06f 0204 	mvn.w	r2, #4
 8003dac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003dae:	2302      	movs	r3, #2
 8003db0:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003db2:	6823      	ldr	r3, [r4, #0]
 8003db4:	699b      	ldr	r3, [r3, #24]
 8003db6:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003dba:	d05f      	beq.n	8003e7c <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 8003dbc:	4620      	mov	r0, r4
 8003dbe:	f7ff ffce 	bl	8003d5e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003dc6:	6823      	ldr	r3, [r4, #0]
 8003dc8:	691a      	ldr	r2, [r3, #16]
 8003dca:	f012 0f08 	tst.w	r2, #8
 8003dce:	d012      	beq.n	8003df6 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003dd0:	68da      	ldr	r2, [r3, #12]
 8003dd2:	f012 0f08 	tst.w	r2, #8
 8003dd6:	d00e      	beq.n	8003df6 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003dd8:	f06f 0208 	mvn.w	r2, #8
 8003ddc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003dde:	2304      	movs	r3, #4
 8003de0:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003de2:	6823      	ldr	r3, [r4, #0]
 8003de4:	69db      	ldr	r3, [r3, #28]
 8003de6:	f013 0f03 	tst.w	r3, #3
 8003dea:	d04e      	beq.n	8003e8a <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 8003dec:	4620      	mov	r0, r4
 8003dee:	f7ff ffb6 	bl	8003d5e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003df2:	2300      	movs	r3, #0
 8003df4:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003df6:	6823      	ldr	r3, [r4, #0]
 8003df8:	691a      	ldr	r2, [r3, #16]
 8003dfa:	f012 0f10 	tst.w	r2, #16
 8003dfe:	d012      	beq.n	8003e26 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003e00:	68da      	ldr	r2, [r3, #12]
 8003e02:	f012 0f10 	tst.w	r2, #16
 8003e06:	d00e      	beq.n	8003e26 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e08:	f06f 0210 	mvn.w	r2, #16
 8003e0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e0e:	2308      	movs	r3, #8
 8003e10:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e12:	6823      	ldr	r3, [r4, #0]
 8003e14:	69db      	ldr	r3, [r3, #28]
 8003e16:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003e1a:	d03d      	beq.n	8003e98 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 8003e1c:	4620      	mov	r0, r4
 8003e1e:	f7ff ff9e 	bl	8003d5e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e22:	2300      	movs	r3, #0
 8003e24:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003e26:	6823      	ldr	r3, [r4, #0]
 8003e28:	691a      	ldr	r2, [r3, #16]
 8003e2a:	f012 0f01 	tst.w	r2, #1
 8003e2e:	d003      	beq.n	8003e38 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003e30:	68da      	ldr	r2, [r3, #12]
 8003e32:	f012 0f01 	tst.w	r2, #1
 8003e36:	d136      	bne.n	8003ea6 <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003e38:	6823      	ldr	r3, [r4, #0]
 8003e3a:	691a      	ldr	r2, [r3, #16]
 8003e3c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003e40:	d003      	beq.n	8003e4a <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e42:	68da      	ldr	r2, [r3, #12]
 8003e44:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003e48:	d134      	bne.n	8003eb4 <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003e4a:	6823      	ldr	r3, [r4, #0]
 8003e4c:	691a      	ldr	r2, [r3, #16]
 8003e4e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003e52:	d003      	beq.n	8003e5c <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003e54:	68da      	ldr	r2, [r3, #12]
 8003e56:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003e5a:	d132      	bne.n	8003ec2 <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003e5c:	6823      	ldr	r3, [r4, #0]
 8003e5e:	691a      	ldr	r2, [r3, #16]
 8003e60:	f012 0f20 	tst.w	r2, #32
 8003e64:	d003      	beq.n	8003e6e <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003e66:	68da      	ldr	r2, [r3, #12]
 8003e68:	f012 0f20 	tst.w	r2, #32
 8003e6c:	d130      	bne.n	8003ed0 <HAL_TIM_IRQHandler+0x16c>
}
 8003e6e:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e70:	f7ff ff74 	bl	8003d5c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e74:	4620      	mov	r0, r4
 8003e76:	f7ff ff73 	bl	8003d60 <HAL_TIM_PWM_PulseFinishedCallback>
 8003e7a:	e78a      	b.n	8003d92 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e7c:	4620      	mov	r0, r4
 8003e7e:	f7ff ff6d 	bl	8003d5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e82:	4620      	mov	r0, r4
 8003e84:	f7ff ff6c 	bl	8003d60 <HAL_TIM_PWM_PulseFinishedCallback>
 8003e88:	e79b      	b.n	8003dc2 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e8a:	4620      	mov	r0, r4
 8003e8c:	f7ff ff66 	bl	8003d5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e90:	4620      	mov	r0, r4
 8003e92:	f7ff ff65 	bl	8003d60 <HAL_TIM_PWM_PulseFinishedCallback>
 8003e96:	e7ac      	b.n	8003df2 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e98:	4620      	mov	r0, r4
 8003e9a:	f7ff ff5f 	bl	8003d5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e9e:	4620      	mov	r0, r4
 8003ea0:	f7ff ff5e 	bl	8003d60 <HAL_TIM_PWM_PulseFinishedCallback>
 8003ea4:	e7bd      	b.n	8003e22 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003ea6:	f06f 0201 	mvn.w	r2, #1
 8003eaa:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003eac:	4620      	mov	r0, r4
 8003eae:	f7fd f8ab 	bl	8001008 <HAL_TIM_PeriodElapsedCallback>
 8003eb2:	e7c1      	b.n	8003e38 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003eb4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003eb8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003eba:	4620      	mov	r0, r4
 8003ebc:	f000 f96f 	bl	800419e <HAL_TIMEx_BreakCallback>
 8003ec0:	e7c3      	b.n	8003e4a <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003ec2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003ec6:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003ec8:	4620      	mov	r0, r4
 8003eca:	f7ff ff4a 	bl	8003d62 <HAL_TIM_TriggerCallback>
 8003ece:	e7c5      	b.n	8003e5c <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003ed0:	f06f 0220 	mvn.w	r2, #32
 8003ed4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8003ed6:	4620      	mov	r0, r4
 8003ed8:	f000 f960 	bl	800419c <HAL_TIMEx_CommutCallback>
}
 8003edc:	e7c7      	b.n	8003e6e <HAL_TIM_IRQHandler+0x10a>
	...

08003ee0 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ee0:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ee2:	4a25      	ldr	r2, [pc, #148]	; (8003f78 <TIM_Base_SetConfig+0x98>)
 8003ee4:	4290      	cmp	r0, r2
 8003ee6:	d014      	beq.n	8003f12 <TIM_Base_SetConfig+0x32>
 8003ee8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003eec:	d02b      	beq.n	8003f46 <TIM_Base_SetConfig+0x66>
 8003eee:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003ef2:	4290      	cmp	r0, r2
 8003ef4:	d022      	beq.n	8003f3c <TIM_Base_SetConfig+0x5c>
 8003ef6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003efa:	4290      	cmp	r0, r2
 8003efc:	d037      	beq.n	8003f6e <TIM_Base_SetConfig+0x8e>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003efe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f02:	694a      	ldr	r2, [r1, #20]
 8003f04:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8003f06:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f08:	688b      	ldr	r3, [r1, #8]
 8003f0a:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f0c:	680b      	ldr	r3, [r1, #0]
 8003f0e:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f10:	e02a      	b.n	8003f68 <TIM_Base_SetConfig+0x88>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003f16:	684a      	ldr	r2, [r1, #4]
 8003f18:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f1e:	68ca      	ldr	r2, [r1, #12]
 8003f20:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f26:	694a      	ldr	r2, [r1, #20]
 8003f28:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8003f2a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f2c:	688b      	ldr	r3, [r1, #8]
 8003f2e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003f30:	680b      	ldr	r3, [r1, #0]
 8003f32:	6283      	str	r3, [r0, #40]	; 0x28
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f34:	690a      	ldr	r2, [r1, #16]
 8003f36:	4b10      	ldr	r3, [pc, #64]	; (8003f78 <TIM_Base_SetConfig+0x98>)
 8003f38:	631a      	str	r2, [r3, #48]	; 0x30
 8003f3a:	e015      	b.n	8003f68 <TIM_Base_SetConfig+0x88>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003f40:	684a      	ldr	r2, [r1, #4]
 8003f42:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f44:	e003      	b.n	8003f4e <TIM_Base_SetConfig+0x6e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003f4a:	684a      	ldr	r2, [r1, #4]
 8003f4c:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f52:	68ca      	ldr	r2, [r1, #12]
 8003f54:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f5a:	694a      	ldr	r2, [r1, #20]
 8003f5c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8003f5e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f60:	688b      	ldr	r3, [r1, #8]
 8003f62:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003f64:	680b      	ldr	r3, [r1, #0]
 8003f66:	6283      	str	r3, [r0, #40]	; 0x28
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	6143      	str	r3, [r0, #20]
}
 8003f6c:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003f72:	684a      	ldr	r2, [r1, #4]
 8003f74:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f76:	e7ea      	b.n	8003f4e <TIM_Base_SetConfig+0x6e>
 8003f78:	40012c00 	.word	0x40012c00

08003f7c <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8003f7c:	b340      	cbz	r0, 8003fd0 <HAL_TIM_Base_Init+0x54>
{
 8003f7e:	b510      	push	{r4, lr}
 8003f80:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8003f82:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003f86:	b1f3      	cbz	r3, 8003fc6 <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8003f88:	2302      	movs	r3, #2
 8003f8a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f8e:	4621      	mov	r1, r4
 8003f90:	f851 0b04 	ldr.w	r0, [r1], #4
 8003f94:	f7ff ffa4 	bl	8003ee0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f9e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8003fa2:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003fa6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003faa:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003fb2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003fb6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003fba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8003fbe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003fc2:	2000      	movs	r0, #0
}
 8003fc4:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003fc6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003fca:	f7fd fdd3 	bl	8001b74 <HAL_TIM_Base_MspInit>
 8003fce:	e7db      	b.n	8003f88 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8003fd0:	2001      	movs	r0, #1
}
 8003fd2:	4770      	bx	lr

08003fd4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003fd4:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003fd6:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fd8:	f424 4c7f 	bic.w	ip, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003fdc:	430a      	orrs	r2, r1
 8003fde:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8003fe2:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fe6:	6082      	str	r2, [r0, #8]
}
 8003fe8:	bc10      	pop	{r4}
 8003fea:	4770      	bx	lr

08003fec <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8003fec:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	f000 809c 	beq.w	800412e <HAL_TIM_ConfigClockSource+0x142>
{
 8003ff6:	b570      	push	{r4, r5, r6, lr}
 8003ff8:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8004000:	2302      	movs	r3, #2
 8004002:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8004006:	6802      	ldr	r2, [r0, #0]
 8004008:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800400a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800400e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8004012:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8004014:	680b      	ldr	r3, [r1, #0]
 8004016:	2b60      	cmp	r3, #96	; 0x60
 8004018:	d054      	beq.n	80040c4 <HAL_TIM_ConfigClockSource+0xd8>
 800401a:	d836      	bhi.n	800408a <HAL_TIM_ConfigClockSource+0x9e>
 800401c:	2b40      	cmp	r3, #64	; 0x40
 800401e:	d06c      	beq.n	80040fa <HAL_TIM_ConfigClockSource+0x10e>
 8004020:	d91b      	bls.n	800405a <HAL_TIM_ConfigClockSource+0x6e>
 8004022:	2b50      	cmp	r3, #80	; 0x50
 8004024:	d12a      	bne.n	800407c <HAL_TIM_ConfigClockSource+0x90>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004026:	6803      	ldr	r3, [r0, #0]
 8004028:	6848      	ldr	r0, [r1, #4]
 800402a:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 800402c:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800402e:	6a1a      	ldr	r2, [r3, #32]
 8004030:	f022 0201 	bic.w	r2, r2, #1
 8004034:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004036:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004038:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800403c:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004040:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8004044:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 8004046:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004048:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800404a:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 800404c:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800404e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004052:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8004056:	6093      	str	r3, [r2, #8]
}
 8004058:	e010      	b.n	800407c <HAL_TIM_ConfigClockSource+0x90>
  switch (sClockSourceConfig->ClockSource)
 800405a:	2b20      	cmp	r3, #32
 800405c:	d002      	beq.n	8004064 <HAL_TIM_ConfigClockSource+0x78>
 800405e:	d90a      	bls.n	8004076 <HAL_TIM_ConfigClockSource+0x8a>
 8004060:	2b30      	cmp	r3, #48	; 0x30
 8004062:	d10b      	bne.n	800407c <HAL_TIM_ConfigClockSource+0x90>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004064:	6821      	ldr	r1, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8004066:	688a      	ldr	r2, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004068:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800406c:	4313      	orrs	r3, r2
 800406e:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 8004072:	608b      	str	r3, [r1, #8]
}
 8004074:	e002      	b.n	800407c <HAL_TIM_ConfigClockSource+0x90>
  switch (sClockSourceConfig->ClockSource)
 8004076:	f033 0210 	bics.w	r2, r3, #16
 800407a:	d0f3      	beq.n	8004064 <HAL_TIM_ConfigClockSource+0x78>
  htim->State = HAL_TIM_STATE_READY;
 800407c:	2301      	movs	r3, #1
 800407e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004082:	2000      	movs	r0, #0
 8004084:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8004088:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 800408a:	2b70      	cmp	r3, #112	; 0x70
 800408c:	d00e      	beq.n	80040ac <HAL_TIM_ConfigClockSource+0xc0>
 800408e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004092:	d1f3      	bne.n	800407c <HAL_TIM_ConfigClockSource+0x90>
      TIM_ETR_SetConfig(htim->Instance,
 8004094:	68cb      	ldr	r3, [r1, #12]
 8004096:	684a      	ldr	r2, [r1, #4]
 8004098:	6889      	ldr	r1, [r1, #8]
 800409a:	6800      	ldr	r0, [r0, #0]
 800409c:	f7ff ff9a 	bl	8003fd4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80040a0:	6822      	ldr	r2, [r4, #0]
 80040a2:	6893      	ldr	r3, [r2, #8]
 80040a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80040a8:	6093      	str	r3, [r2, #8]
      break;
 80040aa:	e7e7      	b.n	800407c <HAL_TIM_ConfigClockSource+0x90>
      TIM_ETR_SetConfig(htim->Instance,
 80040ac:	68cb      	ldr	r3, [r1, #12]
 80040ae:	684a      	ldr	r2, [r1, #4]
 80040b0:	6889      	ldr	r1, [r1, #8]
 80040b2:	6800      	ldr	r0, [r0, #0]
 80040b4:	f7ff ff8e 	bl	8003fd4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80040b8:	6822      	ldr	r2, [r4, #0]
 80040ba:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80040bc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 80040c0:	6093      	str	r3, [r2, #8]
      break;
 80040c2:	e7db      	b.n	800407c <HAL_TIM_ConfigClockSource+0x90>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80040c4:	6803      	ldr	r3, [r0, #0]
 80040c6:	684d      	ldr	r5, [r1, #4]
 80040c8:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040ca:	6a18      	ldr	r0, [r3, #32]
 80040cc:	f020 0010 	bic.w	r0, r0, #16
 80040d0:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040d2:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 80040d4:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80040d6:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80040da:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80040de:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80040e2:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 80040e6:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 80040e8:	621a      	str	r2, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80040ea:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 80040ec:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80040ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80040f2:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 80040f6:	6093      	str	r3, [r2, #8]
}
 80040f8:	e7c0      	b.n	800407c <HAL_TIM_ConfigClockSource+0x90>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80040fa:	6803      	ldr	r3, [r0, #0]
 80040fc:	6848      	ldr	r0, [r1, #4]
 80040fe:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8004100:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004102:	6a1a      	ldr	r2, [r3, #32]
 8004104:	f022 0201 	bic.w	r2, r2, #1
 8004108:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800410a:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800410c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004110:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004114:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8004118:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 800411a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800411c:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800411e:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8004120:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004122:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004126:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 800412a:	6093      	str	r3, [r2, #8]
}
 800412c:	e7a6      	b.n	800407c <HAL_TIM_ConfigClockSource+0x90>
  __HAL_LOCK(htim);
 800412e:	2002      	movs	r0, #2
}
 8004130:	4770      	bx	lr
	...

08004134 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004134:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004138:	2b01      	cmp	r3, #1
 800413a:	d02b      	beq.n	8004194 <HAL_TIMEx_MasterConfigSynchronization+0x60>
{
 800413c:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 800413e:	2301      	movs	r3, #1
 8004140:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004144:	2302      	movs	r3, #2
 8004146:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800414a:	6804      	ldr	r4, [r0, #0]
 800414c:	6863      	ldr	r3, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800414e:	68a2      	ldr	r2, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004150:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004154:	680d      	ldr	r5, [r1, #0]
 8004156:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004158:	6063      	str	r3, [r4, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800415a:	6803      	ldr	r3, [r0, #0]
 800415c:	4c0e      	ldr	r4, [pc, #56]	; (8004198 <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 800415e:	42a3      	cmp	r3, r4
 8004160:	d00a      	beq.n	8004178 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8004162:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004166:	d007      	beq.n	8004178 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8004168:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 800416c:	42a3      	cmp	r3, r4
 800416e:	d003      	beq.n	8004178 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8004170:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004174:	42a3      	cmp	r3, r4
 8004176:	d104      	bne.n	8004182 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004178:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800417c:	6849      	ldr	r1, [r1, #4]
 800417e:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004180:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004182:	2301      	movs	r3, #1
 8004184:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004188:	2300      	movs	r3, #0
 800418a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 800418e:	4618      	mov	r0, r3
}
 8004190:	bc30      	pop	{r4, r5}
 8004192:	4770      	bx	lr
  __HAL_LOCK(htim);
 8004194:	2002      	movs	r0, #2
}
 8004196:	4770      	bx	lr
 8004198:	40012c00 	.word	0x40012c00

0800419c <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800419c:	4770      	bx	lr

0800419e <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800419e:	4770      	bx	lr

080041a0 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041a0:	6802      	ldr	r2, [r0, #0]
 80041a2:	68d3      	ldr	r3, [r2, #12]
 80041a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80041a8:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041aa:	6802      	ldr	r2, [r0, #0]
 80041ac:	6953      	ldr	r3, [r2, #20]
 80041ae:	f023 0301 	bic.w	r3, r3, #1
 80041b2:	6153      	str	r3, [r2, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041b4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80041b6:	2b01      	cmp	r3, #1
 80041b8:	d005      	beq.n	80041c6 <UART_EndRxTransfer+0x26>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80041ba:	2320      	movs	r3, #32
 80041bc:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041c0:	2300      	movs	r3, #0
 80041c2:	6303      	str	r3, [r0, #48]	; 0x30
}
 80041c4:	4770      	bx	lr
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041c6:	6802      	ldr	r2, [r0, #0]
 80041c8:	68d3      	ldr	r3, [r2, #12]
 80041ca:	f023 0310 	bic.w	r3, r3, #16
 80041ce:	60d3      	str	r3, [r2, #12]
 80041d0:	e7f3      	b.n	80041ba <UART_EndRxTransfer+0x1a>
	...

080041d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041d4:	b510      	push	{r4, lr}
 80041d6:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041d8:	6802      	ldr	r2, [r0, #0]
 80041da:	6913      	ldr	r3, [r2, #16]
 80041dc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80041e0:	68c1      	ldr	r1, [r0, #12]
 80041e2:	430b      	orrs	r3, r1
 80041e4:	6113      	str	r3, [r2, #16]
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
  MODIFY_REG(huart->Instance->CR1,
 80041e6:	6801      	ldr	r1, [r0, #0]
 80041e8:	68ca      	ldr	r2, [r1, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80041ea:	6883      	ldr	r3, [r0, #8]
 80041ec:	6900      	ldr	r0, [r0, #16]
 80041ee:	4303      	orrs	r3, r0
 80041f0:	6960      	ldr	r0, [r4, #20]
 80041f2:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 80041f4:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 80041f8:	f022 020c 	bic.w	r2, r2, #12
 80041fc:	4313      	orrs	r3, r2
 80041fe:	60cb      	str	r3, [r1, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004200:	6822      	ldr	r2, [r4, #0]
 8004202:	6953      	ldr	r3, [r2, #20]
 8004204:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004208:	69a1      	ldr	r1, [r4, #24]
 800420a:	430b      	orrs	r3, r1
 800420c:	6153      	str	r3, [r2, #20]


  if(huart->Instance == USART1)
 800420e:	6822      	ldr	r2, [r4, #0]
 8004210:	4b11      	ldr	r3, [pc, #68]	; (8004258 <UART_SetConfig+0x84>)
 8004212:	429a      	cmp	r2, r3
 8004214:	d01b      	beq.n	800424e <UART_SetConfig+0x7a>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004216:	f7ff fcbf 	bl	8003b98 <HAL_RCC_GetPCLK1Freq>
 800421a:	4603      	mov	r3, r0
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800421c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004220:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004224:	6862      	ldr	r2, [r4, #4]
 8004226:	0092      	lsls	r2, r2, #2
 8004228:	fbb3 f3f2 	udiv	r3, r3, r2
 800422c:	6820      	ldr	r0, [r4, #0]
 800422e:	490b      	ldr	r1, [pc, #44]	; (800425c <UART_SetConfig+0x88>)
 8004230:	fba1 4203 	umull	r4, r2, r1, r3
 8004234:	0952      	lsrs	r2, r2, #5
 8004236:	2464      	movs	r4, #100	; 0x64
 8004238:	fb04 3312 	mls	r3, r4, r2, r3
 800423c:	011b      	lsls	r3, r3, #4
 800423e:	3332      	adds	r3, #50	; 0x32
 8004240:	fba1 1303 	umull	r1, r3, r1, r3
 8004244:	0112      	lsls	r2, r2, #4
 8004246:	eb02 1353 	add.w	r3, r2, r3, lsr #5
 800424a:	6083      	str	r3, [r0, #8]
#endif /* USART_CR1_OVER8 */
}
 800424c:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 800424e:	f7ff fcb3 	bl	8003bb8 <HAL_RCC_GetPCLK2Freq>
 8004252:	4603      	mov	r3, r0
 8004254:	e7e2      	b.n	800421c <UART_SetConfig+0x48>
 8004256:	bf00      	nop
 8004258:	40013800 	.word	0x40013800
 800425c:	51eb851f 	.word	0x51eb851f

08004260 <UART_WaitOnFlagUntilTimeout>:
{
 8004260:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004264:	4680      	mov	r8, r0
 8004266:	460e      	mov	r6, r1
 8004268:	4615      	mov	r5, r2
 800426a:	4699      	mov	r9, r3
 800426c:	9f08      	ldr	r7, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800426e:	f8d8 2000 	ldr.w	r2, [r8]
 8004272:	6814      	ldr	r4, [r2, #0]
 8004274:	ea36 0304 	bics.w	r3, r6, r4
 8004278:	bf0c      	ite	eq
 800427a:	f04f 0c01 	moveq.w	ip, #1
 800427e:	f04f 0c00 	movne.w	ip, #0
 8004282:	45ac      	cmp	ip, r5
 8004284:	d11f      	bne.n	80042c6 <UART_WaitOnFlagUntilTimeout+0x66>
    if (Timeout != HAL_MAX_DELAY)
 8004286:	f1b7 3fff 	cmp.w	r7, #4294967295
 800428a:	d0f2      	beq.n	8004272 <UART_WaitOnFlagUntilTimeout+0x12>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800428c:	b12f      	cbz	r7, 800429a <UART_WaitOnFlagUntilTimeout+0x3a>
 800428e:	f7fd fdf1 	bl	8001e74 <HAL_GetTick>
 8004292:	eba0 0009 	sub.w	r0, r0, r9
 8004296:	42b8      	cmp	r0, r7
 8004298:	d9e9      	bls.n	800426e <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800429a:	f8d8 2000 	ldr.w	r2, [r8]
 800429e:	68d3      	ldr	r3, [r2, #12]
 80042a0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80042a4:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042a6:	f8d8 2000 	ldr.w	r2, [r8]
 80042aa:	6953      	ldr	r3, [r2, #20]
 80042ac:	f023 0301 	bic.w	r3, r3, #1
 80042b0:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 80042b2:	2320      	movs	r3, #32
 80042b4:	f888 303d 	strb.w	r3, [r8, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80042b8:	f888 303e 	strb.w	r3, [r8, #62]	; 0x3e
        __HAL_UNLOCK(huart);
 80042bc:	2300      	movs	r3, #0
 80042be:	f888 303c 	strb.w	r3, [r8, #60]	; 0x3c
        return HAL_TIMEOUT;
 80042c2:	2003      	movs	r0, #3
 80042c4:	e000      	b.n	80042c8 <UART_WaitOnFlagUntilTimeout+0x68>
  return HAL_OK;
 80042c6:	2000      	movs	r0, #0
}
 80042c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080042cc <HAL_UART_Init>:
  if (huart == NULL)
 80042cc:	b358      	cbz	r0, 8004326 <HAL_UART_Init+0x5a>
{
 80042ce:	b510      	push	{r4, lr}
 80042d0:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80042d2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80042d6:	b30b      	cbz	r3, 800431c <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 80042d8:	2324      	movs	r3, #36	; 0x24
 80042da:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 80042de:	6822      	ldr	r2, [r4, #0]
 80042e0:	68d3      	ldr	r3, [r2, #12]
 80042e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80042e6:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80042e8:	4620      	mov	r0, r4
 80042ea:	f7ff ff73 	bl	80041d4 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042ee:	6822      	ldr	r2, [r4, #0]
 80042f0:	6913      	ldr	r3, [r2, #16]
 80042f2:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80042f6:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042f8:	6822      	ldr	r2, [r4, #0]
 80042fa:	6953      	ldr	r3, [r2, #20]
 80042fc:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8004300:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8004302:	6822      	ldr	r2, [r4, #0]
 8004304:	68d3      	ldr	r3, [r2, #12]
 8004306:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800430a:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800430c:	2000      	movs	r0, #0
 800430e:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004310:	2320      	movs	r3, #32
 8004312:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004316:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 800431a:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800431c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8004320:	f7fd fc8c 	bl	8001c3c <HAL_UART_MspInit>
 8004324:	e7d8      	b.n	80042d8 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8004326:	2001      	movs	r0, #1
}
 8004328:	4770      	bx	lr

0800432a <HAL_HalfDuplex_Init>:
  if (huart == NULL)
 800432a:	2800      	cmp	r0, #0
 800432c:	d030      	beq.n	8004390 <HAL_HalfDuplex_Init+0x66>
{
 800432e:	b510      	push	{r4, lr}
 8004330:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8004332:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004336:	b333      	cbz	r3, 8004386 <HAL_HalfDuplex_Init+0x5c>
  huart->gState = HAL_UART_STATE_BUSY;
 8004338:	2324      	movs	r3, #36	; 0x24
 800433a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 800433e:	6822      	ldr	r2, [r4, #0]
 8004340:	68d3      	ldr	r3, [r2, #12]
 8004342:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004346:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8004348:	4620      	mov	r0, r4
 800434a:	f7ff ff43 	bl	80041d4 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800434e:	6822      	ldr	r2, [r4, #0]
 8004350:	6913      	ldr	r3, [r2, #16]
 8004352:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8004356:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8004358:	6822      	ldr	r2, [r4, #0]
 800435a:	6953      	ldr	r3, [r2, #20]
 800435c:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004360:	6153      	str	r3, [r2, #20]
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8004362:	6822      	ldr	r2, [r4, #0]
 8004364:	6953      	ldr	r3, [r2, #20]
 8004366:	f043 0308 	orr.w	r3, r3, #8
 800436a:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 800436c:	6822      	ldr	r2, [r4, #0]
 800436e:	68d3      	ldr	r3, [r2, #12]
 8004370:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004374:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004376:	2000      	movs	r0, #0
 8004378:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800437a:	2320      	movs	r3, #32
 800437c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004380:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8004384:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8004386:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 800438a:	f7fd fc57 	bl	8001c3c <HAL_UART_MspInit>
 800438e:	e7d3      	b.n	8004338 <HAL_HalfDuplex_Init+0xe>
    return HAL_ERROR;
 8004390:	2001      	movs	r0, #1
}
 8004392:	4770      	bx	lr

08004394 <HAL_UART_Transmit>:
{
 8004394:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004398:	b082      	sub	sp, #8
 800439a:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800439c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	2b20      	cmp	r3, #32
 80043a4:	d15a      	bne.n	800445c <HAL_UART_Transmit+0xc8>
 80043a6:	4604      	mov	r4, r0
 80043a8:	460d      	mov	r5, r1
 80043aa:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 80043ac:	2900      	cmp	r1, #0
 80043ae:	d059      	beq.n	8004464 <HAL_UART_Transmit+0xd0>
 80043b0:	2a00      	cmp	r2, #0
 80043b2:	d059      	beq.n	8004468 <HAL_UART_Transmit+0xd4>
    __HAL_LOCK(huart);
 80043b4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d057      	beq.n	800446c <HAL_UART_Transmit+0xd8>
 80043bc:	2301      	movs	r3, #1
 80043be:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043c2:	2300      	movs	r3, #0
 80043c4:	6403      	str	r3, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80043c6:	2321      	movs	r3, #33	; 0x21
 80043c8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    tickstart = HAL_GetTick();
 80043cc:	f7fd fd52 	bl	8001e74 <HAL_GetTick>
 80043d0:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 80043d2:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 80043d6:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043da:	68a3      	ldr	r3, [r4, #8]
 80043dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043e0:	d00c      	beq.n	80043fc <HAL_UART_Transmit+0x68>
      pdata16bits = NULL;
 80043e2:	f04f 0a00 	mov.w	sl, #0
    __HAL_UNLOCK(huart);
 80043e6:	2300      	movs	r3, #0
 80043e8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 80043ec:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80043ee:	b29b      	uxth	r3, r3
 80043f0:	b343      	cbz	r3, 8004444 <HAL_UART_Transmit+0xb0>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80043f2:	f04f 0900 	mov.w	r9, #0
 80043f6:	f04f 0880 	mov.w	r8, #128	; 0x80
 80043fa:	e014      	b.n	8004426 <HAL_UART_Transmit+0x92>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043fc:	6923      	ldr	r3, [r4, #16]
 80043fe:	b913      	cbnz	r3, 8004406 <HAL_UART_Transmit+0x72>
      pdata16bits = (uint16_t *) pData;
 8004400:	46aa      	mov	sl, r5
      pdata8bits  = NULL;
 8004402:	2500      	movs	r5, #0
 8004404:	e7ef      	b.n	80043e6 <HAL_UART_Transmit+0x52>
      pdata16bits = NULL;
 8004406:	f04f 0a00 	mov.w	sl, #0
 800440a:	e7ec      	b.n	80043e6 <HAL_UART_Transmit+0x52>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800440c:	6822      	ldr	r2, [r4, #0]
 800440e:	f83a 3b02 	ldrh.w	r3, [sl], #2
 8004412:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004416:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8004418:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 800441a:	3a01      	subs	r2, #1
 800441c:	b292      	uxth	r2, r2
 800441e:	84e2      	strh	r2, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004420:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8004422:	b29b      	uxth	r3, r3
 8004424:	b173      	cbz	r3, 8004444 <HAL_UART_Transmit+0xb0>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004426:	9600      	str	r6, [sp, #0]
 8004428:	463b      	mov	r3, r7
 800442a:	464a      	mov	r2, r9
 800442c:	4641      	mov	r1, r8
 800442e:	4620      	mov	r0, r4
 8004430:	f7ff ff16 	bl	8004260 <UART_WaitOnFlagUntilTimeout>
 8004434:	b9e0      	cbnz	r0, 8004470 <HAL_UART_Transmit+0xdc>
      if (pdata8bits == NULL)
 8004436:	2d00      	cmp	r5, #0
 8004438:	d0e8      	beq.n	800440c <HAL_UART_Transmit+0x78>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800443a:	6823      	ldr	r3, [r4, #0]
 800443c:	f815 2b01 	ldrb.w	r2, [r5], #1
 8004440:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004442:	e7e9      	b.n	8004418 <HAL_UART_Transmit+0x84>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004444:	9600      	str	r6, [sp, #0]
 8004446:	463b      	mov	r3, r7
 8004448:	2200      	movs	r2, #0
 800444a:	2140      	movs	r1, #64	; 0x40
 800444c:	4620      	mov	r0, r4
 800444e:	f7ff ff07 	bl	8004260 <UART_WaitOnFlagUntilTimeout>
 8004452:	b978      	cbnz	r0, 8004474 <HAL_UART_Transmit+0xe0>
    huart->gState = HAL_UART_STATE_READY;
 8004454:	2320      	movs	r3, #32
 8004456:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_OK;
 800445a:	e000      	b.n	800445e <HAL_UART_Transmit+0xca>
    return HAL_BUSY;
 800445c:	2002      	movs	r0, #2
}
 800445e:	b002      	add	sp, #8
 8004460:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      return  HAL_ERROR;
 8004464:	2001      	movs	r0, #1
 8004466:	e7fa      	b.n	800445e <HAL_UART_Transmit+0xca>
 8004468:	2001      	movs	r0, #1
 800446a:	e7f8      	b.n	800445e <HAL_UART_Transmit+0xca>
    __HAL_LOCK(huart);
 800446c:	2002      	movs	r0, #2
 800446e:	e7f6      	b.n	800445e <HAL_UART_Transmit+0xca>
        return HAL_TIMEOUT;
 8004470:	2003      	movs	r0, #3
 8004472:	e7f4      	b.n	800445e <HAL_UART_Transmit+0xca>
      return HAL_TIMEOUT;
 8004474:	2003      	movs	r0, #3
 8004476:	e7f2      	b.n	800445e <HAL_UART_Transmit+0xca>

08004478 <HAL_UART_Receive>:
{
 8004478:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800447c:	b082      	sub	sp, #8
 800447e:	461e      	mov	r6, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 8004480:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8004484:	b2db      	uxtb	r3, r3
 8004486:	2b20      	cmp	r3, #32
 8004488:	d163      	bne.n	8004552 <HAL_UART_Receive+0xda>
 800448a:	4604      	mov	r4, r0
 800448c:	460d      	mov	r5, r1
 800448e:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8004490:	2900      	cmp	r1, #0
 8004492:	d062      	beq.n	800455a <HAL_UART_Receive+0xe2>
 8004494:	2a00      	cmp	r2, #0
 8004496:	d062      	beq.n	800455e <HAL_UART_Receive+0xe6>
    __HAL_LOCK(huart);
 8004498:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800449c:	2b01      	cmp	r3, #1
 800449e:	d060      	beq.n	8004562 <HAL_UART_Receive+0xea>
 80044a0:	2301      	movs	r3, #1
 80044a2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044a6:	2300      	movs	r3, #0
 80044a8:	6403      	str	r3, [r0, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80044aa:	2222      	movs	r2, #34	; 0x22
 80044ac:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044b0:	6303      	str	r3, [r0, #48]	; 0x30
    tickstart = HAL_GetTick();
 80044b2:	f7fd fcdf 	bl	8001e74 <HAL_GetTick>
 80044b6:	4607      	mov	r7, r0
    huart->RxXferSize = Size;
 80044b8:	f8a4 802c 	strh.w	r8, [r4, #44]	; 0x2c
    huart->RxXferCount = Size;
 80044bc:	f8a4 802e 	strh.w	r8, [r4, #46]	; 0x2e
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044c0:	68a3      	ldr	r3, [r4, #8]
 80044c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044c6:	d00d      	beq.n	80044e4 <HAL_UART_Receive+0x6c>
      pdata16bits = NULL;
 80044c8:	f04f 0a00 	mov.w	sl, #0
    __HAL_UNLOCK(huart);
 80044cc:	2300      	movs	r3, #0
 80044ce:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    while (huart->RxXferCount > 0U)
 80044d2:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d036      	beq.n	8004548 <HAL_UART_Receive+0xd0>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80044da:	f04f 0900 	mov.w	r9, #0
 80044de:	f04f 0820 	mov.w	r8, #32
 80044e2:	e01a      	b.n	800451a <HAL_UART_Receive+0xa2>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044e4:	6923      	ldr	r3, [r4, #16]
 80044e6:	b913      	cbnz	r3, 80044ee <HAL_UART_Receive+0x76>
      pdata16bits = (uint16_t *) pData;
 80044e8:	46aa      	mov	sl, r5
      pdata8bits  = NULL;
 80044ea:	2500      	movs	r5, #0
 80044ec:	e7ee      	b.n	80044cc <HAL_UART_Receive+0x54>
      pdata16bits = NULL;
 80044ee:	f04f 0a00 	mov.w	sl, #0
 80044f2:	e7eb      	b.n	80044cc <HAL_UART_Receive+0x54>
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80044f4:	6823      	ldr	r3, [r4, #0]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044fc:	f82a 3b02 	strh.w	r3, [sl], #2
        pdata16bits++;
 8004500:	e004      	b.n	800450c <HAL_UART_Receive+0x94>
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004502:	6823      	ldr	r3, [r4, #0]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	b2db      	uxtb	r3, r3
 8004508:	f805 3b01 	strb.w	r3, [r5], #1
      huart->RxXferCount--;
 800450c:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 800450e:	3a01      	subs	r2, #1
 8004510:	b292      	uxth	r2, r2
 8004512:	85e2      	strh	r2, [r4, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8004514:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8004516:	b29b      	uxth	r3, r3
 8004518:	b1b3      	cbz	r3, 8004548 <HAL_UART_Receive+0xd0>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800451a:	9600      	str	r6, [sp, #0]
 800451c:	463b      	mov	r3, r7
 800451e:	464a      	mov	r2, r9
 8004520:	4641      	mov	r1, r8
 8004522:	4620      	mov	r0, r4
 8004524:	f7ff fe9c 	bl	8004260 <UART_WaitOnFlagUntilTimeout>
 8004528:	b9e8      	cbnz	r0, 8004566 <HAL_UART_Receive+0xee>
      if (pdata8bits == NULL)
 800452a:	2d00      	cmp	r5, #0
 800452c:	d0e2      	beq.n	80044f4 <HAL_UART_Receive+0x7c>
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800452e:	68a3      	ldr	r3, [r4, #8]
 8004530:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004534:	d0e5      	beq.n	8004502 <HAL_UART_Receive+0x8a>
 8004536:	b913      	cbnz	r3, 800453e <HAL_UART_Receive+0xc6>
 8004538:	6923      	ldr	r3, [r4, #16]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d0e1      	beq.n	8004502 <HAL_UART_Receive+0x8a>
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800453e:	6823      	ldr	r3, [r4, #0]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004546:	e7df      	b.n	8004508 <HAL_UART_Receive+0x90>
    huart->RxState = HAL_UART_STATE_READY;
 8004548:	2320      	movs	r3, #32
 800454a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 800454e:	2000      	movs	r0, #0
 8004550:	e000      	b.n	8004554 <HAL_UART_Receive+0xdc>
    return HAL_BUSY;
 8004552:	2002      	movs	r0, #2
}
 8004554:	b002      	add	sp, #8
 8004556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      return  HAL_ERROR;
 800455a:	2001      	movs	r0, #1
 800455c:	e7fa      	b.n	8004554 <HAL_UART_Receive+0xdc>
 800455e:	2001      	movs	r0, #1
 8004560:	e7f8      	b.n	8004554 <HAL_UART_Receive+0xdc>
    __HAL_LOCK(huart);
 8004562:	2002      	movs	r0, #2
 8004564:	e7f6      	b.n	8004554 <HAL_UART_Receive+0xdc>
        return HAL_TIMEOUT;
 8004566:	2003      	movs	r0, #3
 8004568:	e7f4      	b.n	8004554 <HAL_UART_Receive+0xdc>

0800456a <HAL_UART_Transmit_IT>:
  if (huart->gState == HAL_UART_STATE_READY)
 800456a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800456e:	b2db      	uxtb	r3, r3
 8004570:	2b20      	cmp	r3, #32
 8004572:	d116      	bne.n	80045a2 <HAL_UART_Transmit_IT+0x38>
    if ((pData == NULL) || (Size == 0U))
 8004574:	b1b9      	cbz	r1, 80045a6 <HAL_UART_Transmit_IT+0x3c>
 8004576:	b1c2      	cbz	r2, 80045aa <HAL_UART_Transmit_IT+0x40>
    __HAL_LOCK(huart);
 8004578:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800457c:	2b01      	cmp	r3, #1
 800457e:	d016      	beq.n	80045ae <HAL_UART_Transmit_IT+0x44>
    huart->pTxBuffPtr = pData;
 8004580:	6201      	str	r1, [r0, #32]
    huart->TxXferSize = Size;
 8004582:	8482      	strh	r2, [r0, #36]	; 0x24
    huart->TxXferCount = Size;
 8004584:	84c2      	strh	r2, [r0, #38]	; 0x26
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004586:	2300      	movs	r3, #0
 8004588:	6403      	str	r3, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800458a:	2221      	movs	r2, #33	; 0x21
 800458c:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    __HAL_UNLOCK(huart);
 8004590:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8004594:	6801      	ldr	r1, [r0, #0]
 8004596:	68ca      	ldr	r2, [r1, #12]
 8004598:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800459c:	60ca      	str	r2, [r1, #12]
    return HAL_OK;
 800459e:	4618      	mov	r0, r3
 80045a0:	4770      	bx	lr
    return HAL_BUSY;
 80045a2:	2002      	movs	r0, #2
 80045a4:	4770      	bx	lr
      return HAL_ERROR;
 80045a6:	2001      	movs	r0, #1
 80045a8:	4770      	bx	lr
 80045aa:	2001      	movs	r0, #1
 80045ac:	4770      	bx	lr
    __HAL_LOCK(huart);
 80045ae:	2002      	movs	r0, #2
}
 80045b0:	4770      	bx	lr

080045b2 <HAL_UART_ErrorCallback>:
}
 80045b2:	4770      	bx	lr

080045b4 <UART_DMAAbortOnError>:
{
 80045b4:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045b6:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 80045b8:	2300      	movs	r3, #0
 80045ba:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80045bc:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 80045be:	f7ff fff8 	bl	80045b2 <HAL_UART_ErrorCallback>
}
 80045c2:	bd08      	pop	{r3, pc}

080045c4 <HAL_UARTEx_RxEventCallback>:
}
 80045c4:	4770      	bx	lr

080045c6 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80045c6:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	2b22      	cmp	r3, #34	; 0x22
 80045ce:	d11e      	bne.n	800460e <UART_Receive_IT+0x48>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045d0:	6883      	ldr	r3, [r0, #8]
 80045d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045d6:	d006      	beq.n	80045e6 <UART_Receive_IT+0x20>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80045d8:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80045da:	b183      	cbz	r3, 80045fe <UART_Receive_IT+0x38>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80045dc:	6803      	ldr	r3, [r0, #0]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045e4:	e01b      	b.n	800461e <UART_Receive_IT+0x58>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045e6:	6903      	ldr	r3, [r0, #16]
 80045e8:	b9ab      	cbnz	r3, 8004616 <UART_Receive_IT+0x50>
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80045ea:	6a82      	ldr	r2, [r0, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80045ec:	6803      	ldr	r3, [r0, #0]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045f4:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 80045f6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80045f8:	3302      	adds	r3, #2
 80045fa:	6283      	str	r3, [r0, #40]	; 0x28
 80045fc:	e013      	b.n	8004626 <UART_Receive_IT+0x60>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80045fe:	6903      	ldr	r3, [r0, #16]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d1eb      	bne.n	80045dc <UART_Receive_IT+0x16>
 8004604:	e008      	b.n	8004618 <UART_Receive_IT+0x52>
       HAL_UART_RxCpltCallback(huart);
 8004606:	f7fc fccf 	bl	8000fa8 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 800460a:	2000      	movs	r0, #0
 800460c:	e03f      	b.n	800468e <UART_Receive_IT+0xc8>
    return HAL_BUSY;
 800460e:	2002      	movs	r0, #2
 8004610:	4770      	bx	lr
    return HAL_OK;
 8004612:	2000      	movs	r0, #0
}
 8004614:	4770      	bx	lr
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004616:	6a82      	ldr	r2, [r0, #40]	; 0x28
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004618:	6803      	ldr	r3, [r0, #0]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	b2db      	uxtb	r3, r3
 800461e:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 8004620:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004622:	3301      	adds	r3, #1
 8004624:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8004626:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8004628:	3b01      	subs	r3, #1
 800462a:	b29b      	uxth	r3, r3
 800462c:	85c3      	strh	r3, [r0, #46]	; 0x2e
 800462e:	2b00      	cmp	r3, #0
 8004630:	d1ef      	bne.n	8004612 <UART_Receive_IT+0x4c>
{
 8004632:	b500      	push	{lr}
 8004634:	b083      	sub	sp, #12
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004636:	6802      	ldr	r2, [r0, #0]
 8004638:	68d3      	ldr	r3, [r2, #12]
 800463a:	f023 0320 	bic.w	r3, r3, #32
 800463e:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004640:	6802      	ldr	r2, [r0, #0]
 8004642:	68d3      	ldr	r3, [r2, #12]
 8004644:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004648:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800464a:	6802      	ldr	r2, [r0, #0]
 800464c:	6953      	ldr	r3, [r2, #20]
 800464e:	f023 0301 	bic.w	r3, r3, #1
 8004652:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8004654:	2320      	movs	r3, #32
 8004656:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800465a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800465c:	2b01      	cmp	r3, #1
 800465e:	d1d2      	bne.n	8004606 <UART_Receive_IT+0x40>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004660:	2300      	movs	r3, #0
 8004662:	6303      	str	r3, [r0, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004664:	6802      	ldr	r2, [r0, #0]
 8004666:	68d3      	ldr	r3, [r2, #12]
 8004668:	f023 0310 	bic.w	r3, r3, #16
 800466c:	60d3      	str	r3, [r2, #12]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800466e:	6803      	ldr	r3, [r0, #0]
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	f012 0f10 	tst.w	r2, #16
 8004676:	d006      	beq.n	8004686 <UART_Receive_IT+0xc0>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004678:	2200      	movs	r2, #0
 800467a:	9201      	str	r2, [sp, #4]
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	9201      	str	r2, [sp, #4]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	9301      	str	r3, [sp, #4]
 8004684:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004686:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8004688:	f7ff ff9c 	bl	80045c4 <HAL_UARTEx_RxEventCallback>
      return HAL_OK;
 800468c:	2000      	movs	r0, #0
}
 800468e:	b003      	add	sp, #12
 8004690:	f85d fb04 	ldr.w	pc, [sp], #4

08004694 <HAL_UART_IRQHandler>:
{
 8004694:	b510      	push	{r4, lr}
 8004696:	b082      	sub	sp, #8
 8004698:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800469a:	6802      	ldr	r2, [r0, #0]
 800469c:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800469e:	68d1      	ldr	r1, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80046a0:	6950      	ldr	r0, [r2, #20]
  if (errorflags == RESET)
 80046a2:	f013 0f0f 	tst.w	r3, #15
 80046a6:	d109      	bne.n	80046bc <HAL_UART_IRQHandler+0x28>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80046a8:	f013 0f20 	tst.w	r3, #32
 80046ac:	d00d      	beq.n	80046ca <HAL_UART_IRQHandler+0x36>
 80046ae:	f011 0f20 	tst.w	r1, #32
 80046b2:	d00a      	beq.n	80046ca <HAL_UART_IRQHandler+0x36>
      UART_Receive_IT(huart);
 80046b4:	4620      	mov	r0, r4
 80046b6:	f7ff ff86 	bl	80045c6 <UART_Receive_IT>
      return;
 80046ba:	e017      	b.n	80046ec <HAL_UART_IRQHandler+0x58>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80046bc:	f000 0001 	and.w	r0, r0, #1
 80046c0:	f401 7c90 	and.w	ip, r1, #288	; 0x120
 80046c4:	ea5c 0c00 	orrs.w	ip, ip, r0
 80046c8:	d112      	bne.n	80046f0 <HAL_UART_IRQHandler+0x5c>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046ca:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80046cc:	2801      	cmp	r0, #1
 80046ce:	d077      	beq.n	80047c0 <HAL_UART_IRQHandler+0x12c>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80046d0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80046d4:	d003      	beq.n	80046de <HAL_UART_IRQHandler+0x4a>
 80046d6:	f011 0f80 	tst.w	r1, #128	; 0x80
 80046da:	f040 80d9 	bne.w	8004890 <HAL_UART_IRQHandler+0x1fc>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80046de:	f013 0f40 	tst.w	r3, #64	; 0x40
 80046e2:	d003      	beq.n	80046ec <HAL_UART_IRQHandler+0x58>
 80046e4:	f011 0f40 	tst.w	r1, #64	; 0x40
 80046e8:	f040 80ff 	bne.w	80048ea <HAL_UART_IRQHandler+0x256>
}
 80046ec:	b002      	add	sp, #8
 80046ee:	bd10      	pop	{r4, pc}
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80046f0:	f013 0f01 	tst.w	r3, #1
 80046f4:	d006      	beq.n	8004704 <HAL_UART_IRQHandler+0x70>
 80046f6:	f411 7f80 	tst.w	r1, #256	; 0x100
 80046fa:	d003      	beq.n	8004704 <HAL_UART_IRQHandler+0x70>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80046fc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80046fe:	f042 0201 	orr.w	r2, r2, #1
 8004702:	6422      	str	r2, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004704:	f013 0f04 	tst.w	r3, #4
 8004708:	d02f      	beq.n	800476a <HAL_UART_IRQHandler+0xd6>
 800470a:	b158      	cbz	r0, 8004724 <HAL_UART_IRQHandler+0x90>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800470c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800470e:	f042 0202 	orr.w	r2, r2, #2
 8004712:	6422      	str	r2, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004714:	f013 0f02 	tst.w	r3, #2
 8004718:	f000 80f2 	beq.w	8004900 <HAL_UART_IRQHandler+0x26c>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800471c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800471e:	f042 0204 	orr.w	r2, r2, #4
 8004722:	6422      	str	r2, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004724:	f013 0f08 	tst.w	r3, #8
 8004728:	d007      	beq.n	800473a <HAL_UART_IRQHandler+0xa6>
 800472a:	f001 0220 	and.w	r2, r1, #32
 800472e:	4302      	orrs	r2, r0
 8004730:	d003      	beq.n	800473a <HAL_UART_IRQHandler+0xa6>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004732:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004734:	f042 0208 	orr.w	r2, r2, #8
 8004738:	6422      	str	r2, [r4, #64]	; 0x40
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800473a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800473c:	2a00      	cmp	r2, #0
 800473e:	d0d5      	beq.n	80046ec <HAL_UART_IRQHandler+0x58>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004740:	f013 0f20 	tst.w	r3, #32
 8004744:	d002      	beq.n	800474c <HAL_UART_IRQHandler+0xb8>
 8004746:	f011 0f20 	tst.w	r1, #32
 800474a:	d114      	bne.n	8004776 <HAL_UART_IRQHandler+0xe2>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800474c:	6823      	ldr	r3, [r4, #0]
 800474e:	695a      	ldr	r2, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004750:	6c23      	ldr	r3, [r4, #64]	; 0x40
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004752:	f002 0240 	and.w	r2, r2, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004756:	f003 0308 	and.w	r3, r3, #8
 800475a:	4313      	orrs	r3, r2
 800475c:	d10f      	bne.n	800477e <HAL_UART_IRQHandler+0xea>
        HAL_UART_ErrorCallback(huart);
 800475e:	4620      	mov	r0, r4
 8004760:	f7ff ff27 	bl	80045b2 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004764:	2300      	movs	r3, #0
 8004766:	6423      	str	r3, [r4, #64]	; 0x40
 8004768:	e7c0      	b.n	80046ec <HAL_UART_IRQHandler+0x58>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800476a:	f013 0f02 	tst.w	r3, #2
 800476e:	d0d9      	beq.n	8004724 <HAL_UART_IRQHandler+0x90>
 8004770:	2800      	cmp	r0, #0
 8004772:	d0d7      	beq.n	8004724 <HAL_UART_IRQHandler+0x90>
 8004774:	e7d2      	b.n	800471c <HAL_UART_IRQHandler+0x88>
        UART_Receive_IT(huart);
 8004776:	4620      	mov	r0, r4
 8004778:	f7ff ff25 	bl	80045c6 <UART_Receive_IT>
 800477c:	e7e6      	b.n	800474c <HAL_UART_IRQHandler+0xb8>
        UART_EndRxTransfer(huart);
 800477e:	4620      	mov	r0, r4
 8004780:	f7ff fd0e 	bl	80041a0 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004784:	6823      	ldr	r3, [r4, #0]
 8004786:	695a      	ldr	r2, [r3, #20]
 8004788:	f012 0f40 	tst.w	r2, #64	; 0x40
 800478c:	d014      	beq.n	80047b8 <HAL_UART_IRQHandler+0x124>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800478e:	695a      	ldr	r2, [r3, #20]
 8004790:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004794:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8004796:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004798:	b153      	cbz	r3, 80047b0 <HAL_UART_IRQHandler+0x11c>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800479a:	4a5c      	ldr	r2, [pc, #368]	; (800490c <HAL_UART_IRQHandler+0x278>)
 800479c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800479e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80047a0:	f7fd fbfa 	bl	8001f98 <HAL_DMA_Abort_IT>
 80047a4:	2800      	cmp	r0, #0
 80047a6:	d0a1      	beq.n	80046ec <HAL_UART_IRQHandler+0x58>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80047a8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80047aa:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80047ac:	4798      	blx	r3
 80047ae:	e79d      	b.n	80046ec <HAL_UART_IRQHandler+0x58>
            HAL_UART_ErrorCallback(huart);
 80047b0:	4620      	mov	r0, r4
 80047b2:	f7ff fefe 	bl	80045b2 <HAL_UART_ErrorCallback>
 80047b6:	e799      	b.n	80046ec <HAL_UART_IRQHandler+0x58>
          HAL_UART_ErrorCallback(huart);
 80047b8:	4620      	mov	r0, r4
 80047ba:	f7ff fefa 	bl	80045b2 <HAL_UART_ErrorCallback>
 80047be:	e795      	b.n	80046ec <HAL_UART_IRQHandler+0x58>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80047c0:	f013 0f10 	tst.w	r3, #16
 80047c4:	d084      	beq.n	80046d0 <HAL_UART_IRQHandler+0x3c>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80047c6:	f011 0f10 	tst.w	r1, #16
 80047ca:	d081      	beq.n	80046d0 <HAL_UART_IRQHandler+0x3c>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80047cc:	2300      	movs	r3, #0
 80047ce:	9301      	str	r3, [sp, #4]
 80047d0:	6813      	ldr	r3, [r2, #0]
 80047d2:	9301      	str	r3, [sp, #4]
 80047d4:	6853      	ldr	r3, [r2, #4]
 80047d6:	9301      	str	r3, [sp, #4]
 80047d8:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047da:	6953      	ldr	r3, [r2, #20]
 80047dc:	f013 0f40 	tst.w	r3, #64	; 0x40
 80047e0:	d032      	beq.n	8004848 <HAL_UART_IRQHandler+0x1b4>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80047e2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80047e4:	680b      	ldr	r3, [r1, #0]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	b29b      	uxth	r3, r3
      if (  (nb_remaining_rx_data > 0U)
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	f43f af7e 	beq.w	80046ec <HAL_UART_IRQHandler+0x58>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80047f0:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
 80047f2:	4298      	cmp	r0, r3
 80047f4:	f67f af7a 	bls.w	80046ec <HAL_UART_IRQHandler+0x58>
        huart->RxXferCount = nb_remaining_rx_data;
 80047f8:	85e3      	strh	r3, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80047fa:	698b      	ldr	r3, [r1, #24]
 80047fc:	2b20      	cmp	r3, #32
 80047fe:	d107      	bne.n	8004810 <HAL_UART_IRQHandler+0x17c>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004800:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8004802:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8004804:	1ac9      	subs	r1, r1, r3
 8004806:	b289      	uxth	r1, r1
 8004808:	4620      	mov	r0, r4
 800480a:	f7ff fedb 	bl	80045c4 <HAL_UARTEx_RxEventCallback>
 800480e:	e76d      	b.n	80046ec <HAL_UART_IRQHandler+0x58>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004810:	68d3      	ldr	r3, [r2, #12]
 8004812:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004816:	60d3      	str	r3, [r2, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004818:	6822      	ldr	r2, [r4, #0]
 800481a:	6953      	ldr	r3, [r2, #20]
 800481c:	f023 0301 	bic.w	r3, r3, #1
 8004820:	6153      	str	r3, [r2, #20]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004822:	6822      	ldr	r2, [r4, #0]
 8004824:	6953      	ldr	r3, [r2, #20]
 8004826:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800482a:	6153      	str	r3, [r2, #20]
          huart->RxState = HAL_UART_STATE_READY;
 800482c:	2320      	movs	r3, #32
 800482e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004832:	2300      	movs	r3, #0
 8004834:	6323      	str	r3, [r4, #48]	; 0x30
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004836:	6822      	ldr	r2, [r4, #0]
 8004838:	68d3      	ldr	r3, [r2, #12]
 800483a:	f023 0310 	bic.w	r3, r3, #16
 800483e:	60d3      	str	r3, [r2, #12]
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004840:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004842:	f7fd fb87 	bl	8001f54 <HAL_DMA_Abort>
 8004846:	e7db      	b.n	8004800 <HAL_UART_IRQHandler+0x16c>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004848:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 800484a:	b299      	uxth	r1, r3
      if (  (huart->RxXferCount > 0U)
 800484c:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 800484e:	b29b      	uxth	r3, r3
 8004850:	2b00      	cmp	r3, #0
 8004852:	f43f af4b 	beq.w	80046ec <HAL_UART_IRQHandler+0x58>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004856:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 8004858:	1a59      	subs	r1, r3, r1
 800485a:	b289      	uxth	r1, r1
          &&(nb_rx_data > 0U) )
 800485c:	2900      	cmp	r1, #0
 800485e:	f43f af45 	beq.w	80046ec <HAL_UART_IRQHandler+0x58>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004862:	68d3      	ldr	r3, [r2, #12]
 8004864:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004868:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800486a:	6822      	ldr	r2, [r4, #0]
 800486c:	6953      	ldr	r3, [r2, #20]
 800486e:	f023 0301 	bic.w	r3, r3, #1
 8004872:	6153      	str	r3, [r2, #20]
        huart->RxState = HAL_UART_STATE_READY;
 8004874:	2320      	movs	r3, #32
 8004876:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800487a:	2300      	movs	r3, #0
 800487c:	6323      	str	r3, [r4, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800487e:	6822      	ldr	r2, [r4, #0]
 8004880:	68d3      	ldr	r3, [r2, #12]
 8004882:	f023 0310 	bic.w	r3, r3, #16
 8004886:	60d3      	str	r3, [r2, #12]
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004888:	4620      	mov	r0, r4
 800488a:	f7ff fe9b 	bl	80045c4 <HAL_UARTEx_RxEventCallback>
 800488e:	e72d      	b.n	80046ec <HAL_UART_IRQHandler+0x58>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004890:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8004894:	b2db      	uxtb	r3, r3
 8004896:	2b21      	cmp	r3, #33	; 0x21
 8004898:	f47f af28 	bne.w	80046ec <HAL_UART_IRQHandler+0x58>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800489c:	68a3      	ldr	r3, [r4, #8]
 800489e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048a2:	d016      	beq.n	80048d2 <HAL_UART_IRQHandler+0x23e>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80048a4:	6a23      	ldr	r3, [r4, #32]
 80048a6:	1c59      	adds	r1, r3, #1
 80048a8:	6221      	str	r1, [r4, #32]
 80048aa:	781b      	ldrb	r3, [r3, #0]
 80048ac:	6053      	str	r3, [r2, #4]
    if (--huart->TxXferCount == 0U)
 80048ae:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80048b0:	3b01      	subs	r3, #1
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	84e3      	strh	r3, [r4, #38]	; 0x26
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	f47f af18 	bne.w	80046ec <HAL_UART_IRQHandler+0x58>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80048bc:	6822      	ldr	r2, [r4, #0]
 80048be:	68d3      	ldr	r3, [r2, #12]
 80048c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048c4:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80048c6:	6822      	ldr	r2, [r4, #0]
 80048c8:	68d3      	ldr	r3, [r2, #12]
 80048ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048ce:	60d3      	str	r3, [r2, #12]
 80048d0:	e70c      	b.n	80046ec <HAL_UART_IRQHandler+0x58>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048d2:	6923      	ldr	r3, [r4, #16]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d1e5      	bne.n	80048a4 <HAL_UART_IRQHandler+0x210>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80048d8:	6a23      	ldr	r3, [r4, #32]
 80048da:	881b      	ldrh	r3, [r3, #0]
 80048dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048e0:	6053      	str	r3, [r2, #4]
      huart->pTxBuffPtr += 2U;
 80048e2:	6a23      	ldr	r3, [r4, #32]
 80048e4:	3302      	adds	r3, #2
 80048e6:	6223      	str	r3, [r4, #32]
 80048e8:	e7e1      	b.n	80048ae <HAL_UART_IRQHandler+0x21a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80048ea:	68d3      	ldr	r3, [r2, #12]
 80048ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048f0:	60d3      	str	r3, [r2, #12]
  huart->gState = HAL_UART_STATE_READY;
 80048f2:	2320      	movs	r3, #32
 80048f4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  HAL_UART_TxCpltCallback(huart);
 80048f8:	4620      	mov	r0, r4
 80048fa:	f7fc fb7d 	bl	8000ff8 <HAL_UART_TxCpltCallback>
  return HAL_OK;
 80048fe:	e6f5      	b.n	80046ec <HAL_UART_IRQHandler+0x58>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004900:	f013 0f08 	tst.w	r3, #8
 8004904:	f47f af15 	bne.w	8004732 <HAL_UART_IRQHandler+0x9e>
 8004908:	e717      	b.n	800473a <HAL_UART_IRQHandler+0xa6>
 800490a:	bf00      	nop
 800490c:	080045b5 	.word	0x080045b5

08004910 <UART_Start_Receive_IT>:
{
 8004910:	4603      	mov	r3, r0
  huart->pRxBuffPtr = pData;
 8004912:	6281      	str	r1, [r0, #40]	; 0x28
  huart->RxXferSize = Size;
 8004914:	8582      	strh	r2, [r0, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004916:	85c2      	strh	r2, [r0, #46]	; 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004918:	2000      	movs	r0, #0
 800491a:	6418      	str	r0, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800491c:	2222      	movs	r2, #34	; 0x22
 800491e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  __HAL_UNLOCK(huart);
 8004922:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004926:	6819      	ldr	r1, [r3, #0]
 8004928:	68ca      	ldr	r2, [r1, #12]
 800492a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800492e:	60ca      	str	r2, [r1, #12]
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004930:	6819      	ldr	r1, [r3, #0]
 8004932:	694a      	ldr	r2, [r1, #20]
 8004934:	f042 0201 	orr.w	r2, r2, #1
 8004938:	614a      	str	r2, [r1, #20]
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	68d3      	ldr	r3, [r2, #12]
 800493e:	f043 0320 	orr.w	r3, r3, #32
 8004942:	60d3      	str	r3, [r2, #12]
}
 8004944:	4770      	bx	lr

08004946 <HAL_UART_Receive_IT>:
{
 8004946:	b508      	push	{r3, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8004948:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800494c:	b2db      	uxtb	r3, r3
 800494e:	2b20      	cmp	r3, #32
 8004950:	d10d      	bne.n	800496e <HAL_UART_Receive_IT+0x28>
    if ((pData == NULL) || (Size == 0U))
 8004952:	b171      	cbz	r1, 8004972 <HAL_UART_Receive_IT+0x2c>
 8004954:	b17a      	cbz	r2, 8004976 <HAL_UART_Receive_IT+0x30>
    __HAL_LOCK(huart);
 8004956:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800495a:	2b01      	cmp	r3, #1
 800495c:	d00d      	beq.n	800497a <HAL_UART_Receive_IT+0x34>
 800495e:	2301      	movs	r3, #1
 8004960:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004964:	2300      	movs	r3, #0
 8004966:	6303      	str	r3, [r0, #48]	; 0x30
    return(UART_Start_Receive_IT(huart, pData, Size));
 8004968:	f7ff ffd2 	bl	8004910 <UART_Start_Receive_IT>
 800496c:	e000      	b.n	8004970 <HAL_UART_Receive_IT+0x2a>
    return HAL_BUSY;
 800496e:	2002      	movs	r0, #2
}
 8004970:	bd08      	pop	{r3, pc}
      return HAL_ERROR;
 8004972:	2001      	movs	r0, #1
 8004974:	e7fc      	b.n	8004970 <HAL_UART_Receive_IT+0x2a>
 8004976:	2001      	movs	r0, #1
 8004978:	e7fa      	b.n	8004970 <HAL_UART_Receive_IT+0x2a>
    __HAL_LOCK(huart);
 800497a:	2002      	movs	r0, #2
 800497c:	e7f8      	b.n	8004970 <HAL_UART_Receive_IT+0x2a>

0800497e <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800497e:	b084      	sub	sp, #16
 8004980:	a801      	add	r0, sp, #4
 8004982:	e880 000e 	stmia.w	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8004986:	2000      	movs	r0, #0
 8004988:	b004      	add	sp, #16
 800498a:	4770      	bx	lr

0800498c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800498c:	4603      	mov	r3, r0
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800498e:	2000      	movs	r0, #0
 8004990:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004994:	f44f 423f 	mov.w	r2, #48896	; 0xbf00
 8004998:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
}
 800499c:	4770      	bx	lr

0800499e <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800499e:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80049a2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80049a6:	045b      	lsls	r3, r3, #17
 80049a8:	0c5b      	lsrs	r3, r3, #17
 80049aa:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 80049ae:	2000      	movs	r0, #0
 80049b0:	4770      	bx	lr

080049b2 <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 80049b2:	2000      	movs	r0, #0
 80049b4:	4770      	bx	lr

080049b6 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80049b6:	b084      	sub	sp, #16
 80049b8:	4684      	mov	ip, r0
 80049ba:	a801      	add	r0, sp, #4
 80049bc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80049c0:	2301      	movs	r3, #1
 80049c2:	f8ac 3040 	strh.w	r3, [ip, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80049c6:	2000      	movs	r0, #0
 80049c8:	f8ac 0040 	strh.w	r0, [ip, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80049cc:	f8ac 0044 	strh.w	r0, [ip, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80049d0:	f8ac 0050 	strh.w	r0, [ip, #80]	; 0x50

  return HAL_OK;
}
 80049d4:	b004      	add	sp, #16
 80049d6:	4770      	bx	lr

080049d8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80049d8:	b510      	push	{r4, lr}
 80049da:	4603      	mov	r3, r0
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80049dc:	f891 e000 	ldrb.w	lr, [r1]
 80049e0:	f830 202e 	ldrh.w	r2, [r0, lr, lsl #2]
 80049e4:	b292      	uxth	r2, r2
 80049e6:	f422 42ec 	bic.w	r2, r2, #30208	; 0x7600
 80049ea:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80049ee:	b292      	uxth	r2, r2

  /* initialize Endpoint */
  switch (ep->type)
 80049f0:	78c8      	ldrb	r0, [r1, #3]
 80049f2:	2803      	cmp	r0, #3
 80049f4:	d863      	bhi.n	8004abe <USB_ActivateEndpoint+0xe6>
 80049f6:	e8df f000 	tbb	[pc, r0]
 80049fa:	5e57      	.short	0x5e57
 80049fc:	5a02      	.short	0x5a02
 80049fe:	2000      	movs	r0, #0
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004a00:	f248 0c80 	movw	ip, #32896	; 0x8080
 8004a04:	ea42 020c 	orr.w	r2, r2, ip
 8004a08:	f823 202e 	strh.w	r2, [r3, lr, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004a0c:	f891 e000 	ldrb.w	lr, [r1]
 8004a10:	f833 202e 	ldrh.w	r2, [r3, lr, lsl #2]
 8004a14:	b292      	uxth	r2, r2
 8004a16:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004a1a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004a1e:	ea42 020e 	orr.w	r2, r2, lr
 8004a22:	ea4c 0202 	orr.w	r2, ip, r2
 8004a26:	f823 202e 	strh.w	r2, [r3, lr, lsl #2]

  if (ep->doublebuffer == 0U)
 8004a2a:	7b0a      	ldrb	r2, [r1, #12]
 8004a2c:	2a00      	cmp	r2, #0
 8004a2e:	f040 80bb 	bne.w	8004ba8 <USB_ActivateEndpoint+0x1d0>
  {
    if (ep->is_in != 0U)
 8004a32:	784a      	ldrb	r2, [r1, #1]
 8004a34:	2a00      	cmp	r2, #0
 8004a36:	d044      	beq.n	8004ac2 <USB_ActivateEndpoint+0xea>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004a38:	f8b3 e050 	ldrh.w	lr, [r3, #80]	; 0x50
 8004a3c:	fa1f fe8e 	uxth.w	lr, lr
 8004a40:	780a      	ldrb	r2, [r1, #0]
 8004a42:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8004a46:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004a4a:	f8b1 c006 	ldrh.w	ip, [r1, #6]
 8004a4e:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8004a52:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8004a56:	f822 c00e 	strh.w	ip, [r2, lr]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004a5a:	780c      	ldrb	r4, [r1, #0]
 8004a5c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8004a60:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004a64:	d00c      	beq.n	8004a80 <USB_ActivateEndpoint+0xa8>
 8004a66:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8004a6a:	b292      	uxth	r2, r2
 8004a6c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004a70:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004a74:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a78:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8004a7c:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8004a80:	78ca      	ldrb	r2, [r1, #3]
 8004a82:	2a01      	cmp	r2, #1
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004a84:	7809      	ldrb	r1, [r1, #0]
 8004a86:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8004a8a:	b292      	uxth	r2, r2
 8004a8c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004a90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a94:	bf18      	it	ne
 8004a96:	f082 0220 	eorne.w	r2, r2, #32
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004a9a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a9e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004aa2:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return ret;
}
 8004aa6:	bd10      	pop	{r4, pc}
      wEpRegVal |= USB_EP_CONTROL;
 8004aa8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
      break;
 8004aac:	e7a8      	b.n	8004a00 <USB_ActivateEndpoint+0x28>
      wEpRegVal |= USB_EP_INTERRUPT;
 8004aae:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
  HAL_StatusTypeDef ret = HAL_OK;
 8004ab2:	2000      	movs	r0, #0
      break;
 8004ab4:	e7a4      	b.n	8004a00 <USB_ActivateEndpoint+0x28>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004ab6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
  HAL_StatusTypeDef ret = HAL_OK;
 8004aba:	2000      	movs	r0, #0
      break;
 8004abc:	e7a0      	b.n	8004a00 <USB_ActivateEndpoint+0x28>
      ret = HAL_ERROR;
 8004abe:	2001      	movs	r0, #1
 8004ac0:	e79e      	b.n	8004a00 <USB_ActivateEndpoint+0x28>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004ac2:	f8b3 e050 	ldrh.w	lr, [r3, #80]	; 0x50
 8004ac6:	fa1f fe8e 	uxth.w	lr, lr
 8004aca:	780a      	ldrb	r2, [r1, #0]
 8004acc:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8004ad0:	f502 6281 	add.w	r2, r2, #1032	; 0x408
 8004ad4:	f8b1 c006 	ldrh.w	ip, [r1, #6]
 8004ad8:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8004adc:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8004ae0:	f822 c00e 	strh.w	ip, [r2, lr]
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004ae4:	f8b3 e050 	ldrh.w	lr, [r3, #80]	; 0x50
 8004ae8:	fa1f fe8e 	uxth.w	lr, lr
 8004aec:	780a      	ldrb	r2, [r1, #0]
 8004aee:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8004af2:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 8004af6:	690c      	ldr	r4, [r1, #16]
 8004af8:	bbbc      	cbnz	r4, 8004b6a <USB_ActivateEndpoint+0x192>
 8004afa:	f832 c00e 	ldrh.w	ip, [r2, lr]
 8004afe:	f42c 4cf8 	bic.w	ip, ip, #31744	; 0x7c00
 8004b02:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 8004b06:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8004b0a:	f822 c00e 	strh.w	ip, [r2, lr]
 8004b0e:	f832 c00e 	ldrh.w	ip, [r2, lr]
 8004b12:	ea6f 4c4c 	mvn.w	ip, ip, lsl #17
 8004b16:	ea6f 4c5c 	mvn.w	ip, ip, lsr #17
 8004b1a:	fa1f fc8c 	uxth.w	ip, ip
 8004b1e:	f822 c00e 	strh.w	ip, [r2, lr]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b22:	780c      	ldrb	r4, [r1, #0]
 8004b24:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8004b28:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8004b2c:	d00c      	beq.n	8004b48 <USB_ActivateEndpoint+0x170>
 8004b2e:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8004b32:	b292      	uxth	r2, r2
 8004b34:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004b38:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004b3c:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8004b40:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004b44:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004b48:	7809      	ldrb	r1, [r1, #0]
 8004b4a:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8004b4e:	b292      	uxth	r2, r2
 8004b50:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004b54:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004b58:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8004b5c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b60:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004b64:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8004b68:	e79d      	b.n	8004aa6 <USB_ActivateEndpoint+0xce>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004b6a:	2c3e      	cmp	r4, #62	; 0x3e
 8004b6c:	d80d      	bhi.n	8004b8a <USB_ActivateEndpoint+0x1b2>
 8004b6e:	ea4f 0c54 	mov.w	ip, r4, lsr #1
 8004b72:	f014 0f01 	tst.w	r4, #1
 8004b76:	bf18      	it	ne
 8004b78:	f10c 0c01 	addne.w	ip, ip, #1
 8004b7c:	ea4f 2c8c 	mov.w	ip, ip, lsl #10
 8004b80:	fa1f fc8c 	uxth.w	ip, ip
 8004b84:	f822 c00e 	strh.w	ip, [r2, lr]
 8004b88:	e7cb      	b.n	8004b22 <USB_ActivateEndpoint+0x14a>
 8004b8a:	ea4f 1c54 	mov.w	ip, r4, lsr #5
 8004b8e:	f014 0f1f 	tst.w	r4, #31
 8004b92:	bf08      	it	eq
 8004b94:	f10c 3cff 	addeq.w	ip, ip, #4294967295
 8004b98:	ea6f 64cc 	mvn.w	r4, ip, lsl #27
 8004b9c:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8004ba0:	b2a4      	uxth	r4, r4
 8004ba2:	f822 400e 	strh.w	r4, [r2, lr]
 8004ba6:	e7bc      	b.n	8004b22 <USB_ActivateEndpoint+0x14a>
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004ba8:	f891 c000 	ldrb.w	ip, [r1]
 8004bac:	f833 202c 	ldrh.w	r2, [r3, ip, lsl #2]
 8004bb0:	b292      	uxth	r2, r2
 8004bb2:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004bb6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004bba:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 8004bbe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004bc2:	f823 202c 	strh.w	r2, [r3, ip, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004bc6:	f8b3 e050 	ldrh.w	lr, [r3, #80]	; 0x50
 8004bca:	fa1f fe8e 	uxth.w	lr, lr
 8004bce:	780a      	ldrb	r2, [r1, #0]
 8004bd0:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8004bd4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004bd8:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 8004bdc:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8004be0:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8004be4:	f822 c00e 	strh.w	ip, [r2, lr]
 8004be8:	f8b3 e050 	ldrh.w	lr, [r3, #80]	; 0x50
 8004bec:	fa1f fe8e 	uxth.w	lr, lr
 8004bf0:	780a      	ldrb	r2, [r1, #0]
 8004bf2:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8004bf6:	f502 6281 	add.w	r2, r2, #1032	; 0x408
 8004bfa:	f8b1 c00a 	ldrh.w	ip, [r1, #10]
 8004bfe:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8004c02:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8004c06:	f822 c00e 	strh.w	ip, [r2, lr]
    if (ep->is_in == 0U)
 8004c0a:	784a      	ldrb	r2, [r1, #1]
 8004c0c:	2a00      	cmp	r2, #0
 8004c0e:	d142      	bne.n	8004c96 <USB_ActivateEndpoint+0x2be>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004c10:	780c      	ldrb	r4, [r1, #0]
 8004c12:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8004c16:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8004c1a:	d00c      	beq.n	8004c36 <USB_ActivateEndpoint+0x25e>
 8004c1c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8004c20:	b292      	uxth	r2, r2
 8004c22:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004c26:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004c2a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8004c2e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004c32:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c36:	780c      	ldrb	r4, [r1, #0]
 8004c38:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8004c3c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004c40:	d00c      	beq.n	8004c5c <USB_ActivateEndpoint+0x284>
 8004c42:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8004c46:	b292      	uxth	r2, r2
 8004c48:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004c4c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004c50:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c54:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8004c58:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004c5c:	780c      	ldrb	r4, [r1, #0]
 8004c5e:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8004c62:	b292      	uxth	r2, r2
 8004c64:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004c68:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004c6c:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8004c70:	f248 0c80 	movw	ip, #32896	; 0x8080
 8004c74:	ea4c 0202 	orr.w	r2, ip, r2
 8004c78:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004c7c:	7809      	ldrb	r1, [r1, #0]
 8004c7e:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8004c82:	b292      	uxth	r2, r2
 8004c84:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004c88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c8c:	ea4c 0202 	orr.w	r2, ip, r2
 8004c90:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8004c94:	e707      	b.n	8004aa6 <USB_ActivateEndpoint+0xce>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004c96:	780c      	ldrb	r4, [r1, #0]
 8004c98:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8004c9c:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8004ca0:	d00c      	beq.n	8004cbc <USB_ActivateEndpoint+0x2e4>
 8004ca2:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8004ca6:	b292      	uxth	r2, r2
 8004ca8:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004cac:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004cb0:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8004cb4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004cb8:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004cbc:	780c      	ldrb	r4, [r1, #0]
 8004cbe:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8004cc2:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004cc6:	d00c      	beq.n	8004ce2 <USB_ActivateEndpoint+0x30a>
 8004cc8:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8004ccc:	b292      	uxth	r2, r2
 8004cce:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004cd2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004cd6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004cda:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8004cde:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 8004ce2:	78ca      	ldrb	r2, [r1, #3]
 8004ce4:	2a01      	cmp	r2, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004ce6:	780c      	ldrb	r4, [r1, #0]
 8004ce8:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8004cec:	b292      	uxth	r2, r2
 8004cee:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004cf2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cf6:	bf18      	it	ne
 8004cf8:	f082 0220 	eorne.w	r2, r2, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004cfc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d00:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004d04:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004d08:	7809      	ldrb	r1, [r1, #0]
 8004d0a:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8004d0e:	b292      	uxth	r2, r2
 8004d10:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004d14:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004d18:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d1c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004d20:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8004d24:	e6bf      	b.n	8004aa6 <USB_ActivateEndpoint+0xce>

08004d26 <USB_DeactivateEndpoint>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8004d26:	7b0b      	ldrb	r3, [r1, #12]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d146      	bne.n	8004dba <USB_DeactivateEndpoint+0x94>
  {
    if (ep->is_in != 0U)
 8004d2c:	784b      	ldrb	r3, [r1, #1]
 8004d2e:	b313      	cbz	r3, 8004d76 <USB_DeactivateEndpoint+0x50>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004d30:	780a      	ldrb	r2, [r1, #0]
 8004d32:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004d36:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004d3a:	d00c      	beq.n	8004d56 <USB_DeactivateEndpoint+0x30>
 8004d3c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004d40:	b29b      	uxth	r3, r3
 8004d42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d4e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004d52:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004d56:	780a      	ldrb	r2, [r1, #0]
 8004d58:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d6e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return HAL_OK;
}
 8004d72:	2000      	movs	r0, #0
 8004d74:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004d76:	780a      	ldrb	r2, [r1, #0]
 8004d78:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004d7c:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8004d80:	d00c      	beq.n	8004d9c <USB_DeactivateEndpoint+0x76>
 8004d82:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d90:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d98:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004d9c:	780a      	ldrb	r2, [r1, #0]
 8004d9e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004da8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004db0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004db4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8004db8:	e7db      	b.n	8004d72 <USB_DeactivateEndpoint+0x4c>
    if (ep->is_in == 0U)
 8004dba:	784b      	ldrb	r3, [r1, #1]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d14d      	bne.n	8004e5c <USB_DeactivateEndpoint+0x136>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004dc0:	780a      	ldrb	r2, [r1, #0]
 8004dc2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004dc6:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8004dca:	d00c      	beq.n	8004de6 <USB_DeactivateEndpoint+0xc0>
 8004dcc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dda:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004dde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004de2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004de6:	780a      	ldrb	r2, [r1, #0]
 8004de8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004dec:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004df0:	d00c      	beq.n	8004e0c <USB_DeactivateEndpoint+0xe6>
 8004df2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e04:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004e08:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8004e0c:	780a      	ldrb	r2, [r1, #0]
 8004e0e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e20:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004e24:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004e28:	f891 c000 	ldrb.w	ip, [r1]
 8004e2c:	f830 302c 	ldrh.w	r3, [r0, ip, lsl #2]
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e3a:	f248 0280 	movw	r2, #32896	; 0x8080
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	f820 302c 	strh.w	r3, [r0, ip, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004e44:	7809      	ldrb	r1, [r1, #0]
 8004e46:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8004e4a:	b29b      	uxth	r3, r3
 8004e4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e54:	4313      	orrs	r3, r2
 8004e56:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
 8004e5a:	e78a      	b.n	8004d72 <USB_DeactivateEndpoint+0x4c>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004e5c:	780a      	ldrb	r2, [r1, #0]
 8004e5e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004e62:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8004e66:	d00c      	beq.n	8004e82 <USB_DeactivateEndpoint+0x15c>
 8004e68:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e76:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e7e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004e82:	780a      	ldrb	r2, [r1, #0]
 8004e84:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004e88:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004e8c:	d00c      	beq.n	8004ea8 <USB_DeactivateEndpoint+0x182>
 8004e8e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ea0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004ea4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8004ea8:	780a      	ldrb	r2, [r1, #0]
 8004eaa:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004eae:	b29b      	uxth	r3, r3
 8004eb0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004eb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eb8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ebc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ec0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004ec4:	f891 c000 	ldrb.w	ip, [r1]
 8004ec8:	f830 302c 	ldrh.w	r3, [r0, ip, lsl #2]
 8004ecc:	b29b      	uxth	r3, r3
 8004ece:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ed2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ed6:	f248 0280 	movw	r2, #32896	; 0x8080
 8004eda:	4313      	orrs	r3, r2
 8004edc:	f820 302c 	strh.w	r3, [r0, ip, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004ee0:	7809      	ldrb	r1, [r1, #0]
 8004ee2:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004eec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
 8004ef6:	e73c      	b.n	8004d72 <USB_DeactivateEndpoint+0x4c>

08004ef8 <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 8004ef8:	784b      	ldrb	r3, [r1, #1]
 8004efa:	b18b      	cbz	r3, 8004f20 <USB_EPSetStall+0x28>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8004efc:	780a      	ldrb	r2, [r1, #0]
 8004efe:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004f02:	b29b      	uxth	r3, r3
 8004f04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f0c:	f083 0310 	eor.w	r3, r3, #16
 8004f10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f18:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
  }

  return HAL_OK;
}
 8004f1c:	2000      	movs	r0, #0
 8004f1e:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8004f20:	780a      	ldrb	r2, [r1, #0]
 8004f22:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f30:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004f34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f3c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8004f40:	e7ec      	b.n	8004f1c <USB_EPSetStall+0x24>

08004f42 <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8004f42:	7b0b      	ldrb	r3, [r1, #12]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d14b      	bne.n	8004fe0 <USB_EPClearStall+0x9e>
  {
    if (ep->is_in != 0U)
 8004f48:	784b      	ldrb	r3, [r1, #1]
 8004f4a:	b333      	cbz	r3, 8004f9a <USB_EPClearStall+0x58>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004f4c:	780a      	ldrb	r2, [r1, #0]
 8004f4e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004f52:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004f56:	d00c      	beq.n	8004f72 <USB_EPClearStall+0x30>
 8004f58:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004f5c:	b29b      	uxth	r3, r3
 8004f5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f6a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004f6e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8004f72:	78cb      	ldrb	r3, [r1, #3]
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d033      	beq.n	8004fe0 <USB_EPClearStall+0x9e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004f78:	780a      	ldrb	r2, [r1, #0]
 8004f7a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004f7e:	b29b      	uxth	r3, r3
 8004f80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f88:	f083 0320 	eor.w	r3, r3, #32
 8004f8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f94:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8004f98:	e022      	b.n	8004fe0 <USB_EPClearStall+0x9e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f9a:	780a      	ldrb	r2, [r1, #0]
 8004f9c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004fa0:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8004fa4:	d00c      	beq.n	8004fc0 <USB_EPClearStall+0x7e>
 8004fa6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fb4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004fb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fbc:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004fc0:	780a      	ldrb	r2, [r1, #0]
 8004fc2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004fcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fd0:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8004fd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fdc:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 8004fe0:	2000      	movs	r0, #0
 8004fe2:	4770      	bx	lr

08004fe4 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 8004fe4:	b911      	cbnz	r1, 8004fec <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8004fe6:	2380      	movs	r3, #128	; 0x80
 8004fe8:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 8004fec:	2000      	movs	r0, #0
 8004fee:	4770      	bx	lr

08004ff0 <USB_DevConnect>:
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8004ff0:	2000      	movs	r0, #0
 8004ff2:	4770      	bx	lr

08004ff4 <USB_DevDisconnect>:
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8004ff4:	2000      	movs	r0, #0
 8004ff6:	4770      	bx	lr

08004ff8 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8004ff8:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 8004ffc:	b280      	uxth	r0, r0
 8004ffe:	4770      	bx	lr

08005000 <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8005000:	2000      	movs	r0, #0
 8005002:	4770      	bx	lr

08005004 <USB_WritePMA>:
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005004:	3301      	adds	r3, #1
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005006:	eb00 0c42 	add.w	ip, r0, r2, lsl #1
 800500a:	f50c 6c80 	add.w	ip, ip, #1024	; 0x400
 800500e:	4662      	mov	r2, ip

  for (i = n; i != 0U; i--)
 8005010:	085b      	lsrs	r3, r3, #1
 8005012:	d00d      	beq.n	8005030 <USB_WritePMA+0x2c>
 8005014:	3102      	adds	r1, #2
 8005016:	eb0c 0c83 	add.w	ip, ip, r3, lsl #2
  {
    temp1 = *pBuf;
    pBuf++;
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800501a:	f811 0c01 	ldrb.w	r0, [r1, #-1]
    temp1 = *pBuf;
 800501e:	f811 3c02 	ldrb.w	r3, [r1, #-2]
    *pdwVal = (uint16_t)temp2;
 8005022:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8005026:	f822 3b04 	strh.w	r3, [r2], #4
  for (i = n; i != 0U; i--)
 800502a:	3102      	adds	r1, #2
 800502c:	4594      	cmp	ip, r2
 800502e:	d1f4      	bne.n	800501a <USB_WritePMA+0x16>
    pdwVal++;
#endif

    pBuf++;
  }
}
 8005030:	4770      	bx	lr

08005032 <USB_EPStartXfer>:
{
 8005032:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005034:	4605      	mov	r5, r0
 8005036:	460c      	mov	r4, r1
  if (ep->is_in == 1U)
 8005038:	784b      	ldrb	r3, [r1, #1]
 800503a:	2b01      	cmp	r3, #1
 800503c:	d035      	beq.n	80050aa <USB_EPStartXfer+0x78>
    if (ep->doublebuffer == 0U)
 800503e:	7b0a      	ldrb	r2, [r1, #12]
 8005040:	2a00      	cmp	r2, #0
 8005042:	f040 82fe 	bne.w	8005642 <USB_EPStartXfer+0x610>
      if (ep->xfer_len > ep->maxpacket)
 8005046:	6989      	ldr	r1, [r1, #24]
 8005048:	6923      	ldr	r3, [r4, #16]
 800504a:	4299      	cmp	r1, r3
        ep->xfer_len -= len;
 800504c:	bf86      	itte	hi
 800504e:	1aca      	subhi	r2, r1, r3
        len = ep->maxpacket;
 8005050:	4619      	movhi	r1, r3
        ep->xfer_len = 0U;
 8005052:	2200      	movls	r2, #0
 8005054:	61a2      	str	r2, [r4, #24]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005056:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800505a:	b29b      	uxth	r3, r3
 800505c:	7822      	ldrb	r2, [r4, #0]
 800505e:	0112      	lsls	r2, r2, #4
 8005060:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 8005064:	4403      	add	r3, r0
 8005066:	2900      	cmp	r1, #0
 8005068:	f040 82d3 	bne.w	8005612 <USB_EPStartXfer+0x5e0>
 800506c:	5ad1      	ldrh	r1, [r2, r3]
 800506e:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8005072:	0409      	lsls	r1, r1, #16
 8005074:	0c09      	lsrs	r1, r1, #16
 8005076:	52d1      	strh	r1, [r2, r3]
 8005078:	5ad1      	ldrh	r1, [r2, r3]
 800507a:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 800507e:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8005082:	b289      	uxth	r1, r1
 8005084:	52d1      	strh	r1, [r2, r3]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005086:	7822      	ldrb	r2, [r4, #0]
 8005088:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 800508c:	b29b      	uxth	r3, r3
 800508e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005092:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005096:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800509a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800509e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050a2:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
  return HAL_OK;
 80050a6:	2000      	movs	r0, #0
}
 80050a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (ep->xfer_len > ep->maxpacket)
 80050aa:	690a      	ldr	r2, [r1, #16]
 80050ac:	698e      	ldr	r6, [r1, #24]
 80050ae:	4296      	cmp	r6, r2
 80050b0:	bf28      	it	cs
 80050b2:	4616      	movcs	r6, r2
    if (ep->doublebuffer == 0U)
 80050b4:	7b0b      	ldrb	r3, [r1, #12]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d036      	beq.n	8005128 <USB_EPStartXfer+0xf6>
      if (ep->type == EP_TYPE_BULK)
 80050ba:	78cb      	ldrb	r3, [r1, #3]
 80050bc:	2b02      	cmp	r3, #2
 80050be:	d054      	beq.n	800516a <USB_EPStartXfer+0x138>
        PCD_SET_EP_DBUF(USBx, ep->num);
 80050c0:	780a      	ldrb	r2, [r1, #0]
 80050c2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80050c6:	b29b      	uxth	r3, r3
 80050c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050d0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80050d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050d8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
        ep->xfer_len_db -= len;
 80050dc:	6a0b      	ldr	r3, [r1, #32]
 80050de:	1b9b      	subs	r3, r3, r6
 80050e0:	620b      	str	r3, [r1, #32]
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80050e2:	780b      	ldrb	r3, [r1, #0]
 80050e4:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80050e8:	f012 0f40 	tst.w	r2, #64	; 0x40
 80050ec:	f000 820b 	beq.w	8005506 <USB_EPStartXfer+0x4d4>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80050f0:	784a      	ldrb	r2, [r1, #1]
 80050f2:	2a00      	cmp	r2, #0
 80050f4:	f040 81b1 	bne.w	800545a <USB_EPStartXfer+0x428>
 80050f8:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80050fc:	b292      	uxth	r2, r2
 80050fe:	f200 410c 	addw	r1, r0, #1036	; 0x40c
 8005102:	440a      	add	r2, r1
 8005104:	011b      	lsls	r3, r3, #4
 8005106:	2e00      	cmp	r6, #0
 8005108:	f040 818f 	bne.w	800542a <USB_EPStartXfer+0x3f8>
 800510c:	5ad1      	ldrh	r1, [r2, r3]
 800510e:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8005112:	0409      	lsls	r1, r1, #16
 8005114:	0c09      	lsrs	r1, r1, #16
 8005116:	52d1      	strh	r1, [r2, r3]
 8005118:	5ad1      	ldrh	r1, [r2, r3]
 800511a:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 800511e:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8005122:	b289      	uxth	r1, r1
 8005124:	52d1      	strh	r1, [r2, r3]
 8005126:	e19a      	b.n	800545e <USB_EPStartXfer+0x42c>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005128:	b2b6      	uxth	r6, r6
 800512a:	4633      	mov	r3, r6
 800512c:	88ca      	ldrh	r2, [r1, #6]
 800512e:	6949      	ldr	r1, [r1, #20]
 8005130:	f7ff ff68 	bl	8005004 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005134:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8005138:	b299      	uxth	r1, r3
 800513a:	7822      	ldrb	r2, [r4, #0]
 800513c:	0112      	lsls	r2, r2, #4
 800513e:	f205 4304 	addw	r3, r5, #1028	; 0x404
 8005142:	440b      	add	r3, r1
 8005144:	52d6      	strh	r6, [r2, r3]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005146:	7822      	ldrb	r2, [r4, #0]
 8005148:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 800514c:	b29b      	uxth	r3, r3
 800514e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005152:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005156:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 800515a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800515e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005162:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
  return HAL_OK;
 8005166:	2000      	movs	r0, #0
 8005168:	e79e      	b.n	80050a8 <USB_EPStartXfer+0x76>
        if (ep->xfer_len_db > ep->maxpacket)
 800516a:	6a0b      	ldr	r3, [r1, #32]
 800516c:	429a      	cmp	r2, r3
 800516e:	f080 813e 	bcs.w	80053ee <USB_EPStartXfer+0x3bc>
          PCD_SET_EP_DBUF(USBx, ep->num);
 8005172:	780a      	ldrb	r2, [r1, #0]
 8005174:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005178:	b29b      	uxth	r3, r3
 800517a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800517e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005182:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005186:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800518a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
          ep->xfer_len_db -= len;
 800518e:	6a0b      	ldr	r3, [r1, #32]
 8005190:	1b9b      	subs	r3, r3, r6
 8005192:	620b      	str	r3, [r1, #32]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005194:	780b      	ldrb	r3, [r1, #0]
 8005196:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800519a:	f012 0f40 	tst.w	r2, #64	; 0x40
 800519e:	f000 8093 	beq.w	80052c8 <USB_EPStartXfer+0x296>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80051a2:	784a      	ldrb	r2, [r1, #1]
 80051a4:	bb6a      	cbnz	r2, 8005202 <USB_EPStartXfer+0x1d0>
 80051a6:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80051aa:	b292      	uxth	r2, r2
 80051ac:	f200 410c 	addw	r1, r0, #1036	; 0x40c
 80051b0:	4411      	add	r1, r2
 80051b2:	011b      	lsls	r3, r3, #4
 80051b4:	b96e      	cbnz	r6, 80051d2 <USB_EPStartXfer+0x1a0>
 80051b6:	5aca      	ldrh	r2, [r1, r3]
 80051b8:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80051bc:	0412      	lsls	r2, r2, #16
 80051be:	0c12      	lsrs	r2, r2, #16
 80051c0:	52ca      	strh	r2, [r1, r3]
 80051c2:	5aca      	ldrh	r2, [r1, r3]
 80051c4:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80051c8:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80051cc:	b292      	uxth	r2, r2
 80051ce:	52ca      	strh	r2, [r1, r3]
 80051d0:	e019      	b.n	8005206 <USB_EPStartXfer+0x1d4>
 80051d2:	2e3e      	cmp	r6, #62	; 0x3e
 80051d4:	d808      	bhi.n	80051e8 <USB_EPStartXfer+0x1b6>
 80051d6:	0872      	lsrs	r2, r6, #1
 80051d8:	f016 0f01 	tst.w	r6, #1
 80051dc:	bf18      	it	ne
 80051de:	3201      	addne	r2, #1
 80051e0:	0292      	lsls	r2, r2, #10
 80051e2:	b292      	uxth	r2, r2
 80051e4:	52ca      	strh	r2, [r1, r3]
 80051e6:	e00e      	b.n	8005206 <USB_EPStartXfer+0x1d4>
 80051e8:	0972      	lsrs	r2, r6, #5
 80051ea:	f016 0f1f 	tst.w	r6, #31
 80051ee:	bf08      	it	eq
 80051f0:	f102 32ff 	addeq.w	r2, r2, #4294967295
 80051f4:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 80051f8:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80051fc:	b292      	uxth	r2, r2
 80051fe:	52ca      	strh	r2, [r1, r3]
 8005200:	e001      	b.n	8005206 <USB_EPStartXfer+0x1d4>
 8005202:	2a01      	cmp	r2, #1
 8005204:	d02a      	beq.n	800525c <USB_EPStartXfer+0x22a>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005206:	b2b3      	uxth	r3, r6
 8005208:	8962      	ldrh	r2, [r4, #10]
 800520a:	6961      	ldr	r1, [r4, #20]
 800520c:	4628      	mov	r0, r5
 800520e:	f7ff fef9 	bl	8005004 <USB_WritePMA>
            ep->xfer_buff += len;
 8005212:	6963      	ldr	r3, [r4, #20]
 8005214:	4433      	add	r3, r6
 8005216:	6163      	str	r3, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8005218:	6a23      	ldr	r3, [r4, #32]
 800521a:	6922      	ldr	r2, [r4, #16]
 800521c:	4293      	cmp	r3, r2
              ep->xfer_len_db -= len;
 800521e:	bf86      	itte	hi
 8005220:	1b9a      	subhi	r2, r3, r6
 8005222:	4633      	movhi	r3, r6
              ep->xfer_len_db = 0U;
 8005224:	2200      	movls	r2, #0
 8005226:	6222      	str	r2, [r4, #32]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005228:	7862      	ldrb	r2, [r4, #1]
 800522a:	2a00      	cmp	r2, #0
 800522c:	d138      	bne.n	80052a0 <USB_EPStartXfer+0x26e>
 800522e:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8005232:	b292      	uxth	r2, r2
 8005234:	7820      	ldrb	r0, [r4, #0]
 8005236:	0100      	lsls	r0, r0, #4
 8005238:	f205 4104 	addw	r1, r5, #1028	; 0x404
 800523c:	440a      	add	r2, r1
 800523e:	b9bb      	cbnz	r3, 8005270 <USB_EPStartXfer+0x23e>
 8005240:	5a81      	ldrh	r1, [r0, r2]
 8005242:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8005246:	0409      	lsls	r1, r1, #16
 8005248:	0c09      	lsrs	r1, r1, #16
 800524a:	5281      	strh	r1, [r0, r2]
 800524c:	5a81      	ldrh	r1, [r0, r2]
 800524e:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8005252:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8005256:	b289      	uxth	r1, r1
 8005258:	5281      	strh	r1, [r0, r2]
 800525a:	e023      	b.n	80052a4 <USB_EPStartXfer+0x272>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800525c:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8005260:	b291      	uxth	r1, r2
 8005262:	f200 420c 	addw	r2, r0, #1036	; 0x40c
 8005266:	440a      	add	r2, r1
 8005268:	011b      	lsls	r3, r3, #4
 800526a:	b2b1      	uxth	r1, r6
 800526c:	52d1      	strh	r1, [r2, r3]
 800526e:	e7ca      	b.n	8005206 <USB_EPStartXfer+0x1d4>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005270:	2b3e      	cmp	r3, #62	; 0x3e
 8005272:	d808      	bhi.n	8005286 <USB_EPStartXfer+0x254>
 8005274:	0859      	lsrs	r1, r3, #1
 8005276:	f013 0f01 	tst.w	r3, #1
 800527a:	bf18      	it	ne
 800527c:	3101      	addne	r1, #1
 800527e:	0289      	lsls	r1, r1, #10
 8005280:	b289      	uxth	r1, r1
 8005282:	5281      	strh	r1, [r0, r2]
 8005284:	e00e      	b.n	80052a4 <USB_EPStartXfer+0x272>
 8005286:	0959      	lsrs	r1, r3, #5
 8005288:	f013 0f1f 	tst.w	r3, #31
 800528c:	bf08      	it	eq
 800528e:	f101 31ff 	addeq.w	r1, r1, #4294967295
 8005292:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 8005296:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 800529a:	b289      	uxth	r1, r1
 800529c:	5281      	strh	r1, [r0, r2]
 800529e:	e001      	b.n	80052a4 <USB_EPStartXfer+0x272>
 80052a0:	2a01      	cmp	r2, #1
 80052a2:	d006      	beq.n	80052b2 <USB_EPStartXfer+0x280>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	8922      	ldrh	r2, [r4, #8]
 80052a8:	6961      	ldr	r1, [r4, #20]
 80052aa:	4628      	mov	r0, r5
 80052ac:	f7ff feaa 	bl	8005004 <USB_WritePMA>
 80052b0:	e749      	b.n	8005146 <USB_EPStartXfer+0x114>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80052b2:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 80052b6:	b290      	uxth	r0, r2
 80052b8:	7821      	ldrb	r1, [r4, #0]
 80052ba:	0109      	lsls	r1, r1, #4
 80052bc:	f205 4204 	addw	r2, r5, #1028	; 0x404
 80052c0:	4402      	add	r2, r0
 80052c2:	b298      	uxth	r0, r3
 80052c4:	5288      	strh	r0, [r1, r2]
 80052c6:	e7ed      	b.n	80052a4 <USB_EPStartXfer+0x272>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80052c8:	784a      	ldrb	r2, [r1, #1]
 80052ca:	bb6a      	cbnz	r2, 8005328 <USB_EPStartXfer+0x2f6>
 80052cc:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80052d0:	b292      	uxth	r2, r2
 80052d2:	f200 4104 	addw	r1, r0, #1028	; 0x404
 80052d6:	4411      	add	r1, r2
 80052d8:	011b      	lsls	r3, r3, #4
 80052da:	b96e      	cbnz	r6, 80052f8 <USB_EPStartXfer+0x2c6>
 80052dc:	5aca      	ldrh	r2, [r1, r3]
 80052de:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80052e2:	0412      	lsls	r2, r2, #16
 80052e4:	0c12      	lsrs	r2, r2, #16
 80052e6:	52ca      	strh	r2, [r1, r3]
 80052e8:	5aca      	ldrh	r2, [r1, r3]
 80052ea:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80052ee:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80052f2:	b292      	uxth	r2, r2
 80052f4:	52ca      	strh	r2, [r1, r3]
 80052f6:	e019      	b.n	800532c <USB_EPStartXfer+0x2fa>
 80052f8:	2e3e      	cmp	r6, #62	; 0x3e
 80052fa:	d808      	bhi.n	800530e <USB_EPStartXfer+0x2dc>
 80052fc:	0872      	lsrs	r2, r6, #1
 80052fe:	f016 0f01 	tst.w	r6, #1
 8005302:	bf18      	it	ne
 8005304:	3201      	addne	r2, #1
 8005306:	0292      	lsls	r2, r2, #10
 8005308:	b292      	uxth	r2, r2
 800530a:	52ca      	strh	r2, [r1, r3]
 800530c:	e00e      	b.n	800532c <USB_EPStartXfer+0x2fa>
 800530e:	0972      	lsrs	r2, r6, #5
 8005310:	f016 0f1f 	tst.w	r6, #31
 8005314:	bf08      	it	eq
 8005316:	f102 32ff 	addeq.w	r2, r2, #4294967295
 800531a:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 800531e:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8005322:	b292      	uxth	r2, r2
 8005324:	52ca      	strh	r2, [r1, r3]
 8005326:	e001      	b.n	800532c <USB_EPStartXfer+0x2fa>
 8005328:	2a01      	cmp	r2, #1
 800532a:	d02a      	beq.n	8005382 <USB_EPStartXfer+0x350>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800532c:	b2b3      	uxth	r3, r6
 800532e:	8922      	ldrh	r2, [r4, #8]
 8005330:	6961      	ldr	r1, [r4, #20]
 8005332:	4628      	mov	r0, r5
 8005334:	f7ff fe66 	bl	8005004 <USB_WritePMA>
            ep->xfer_buff += len;
 8005338:	6963      	ldr	r3, [r4, #20]
 800533a:	4433      	add	r3, r6
 800533c:	6163      	str	r3, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 800533e:	6a23      	ldr	r3, [r4, #32]
 8005340:	6922      	ldr	r2, [r4, #16]
 8005342:	4293      	cmp	r3, r2
              ep->xfer_len_db -= len;
 8005344:	bf86      	itte	hi
 8005346:	1b9a      	subhi	r2, r3, r6
 8005348:	4633      	movhi	r3, r6
              ep->xfer_len_db = 0U;
 800534a:	2200      	movls	r2, #0
 800534c:	6222      	str	r2, [r4, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800534e:	7862      	ldrb	r2, [r4, #1]
 8005350:	2a00      	cmp	r2, #0
 8005352:	d138      	bne.n	80053c6 <USB_EPStartXfer+0x394>
 8005354:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8005358:	b292      	uxth	r2, r2
 800535a:	7820      	ldrb	r0, [r4, #0]
 800535c:	0100      	lsls	r0, r0, #4
 800535e:	f205 410c 	addw	r1, r5, #1036	; 0x40c
 8005362:	440a      	add	r2, r1
 8005364:	b9bb      	cbnz	r3, 8005396 <USB_EPStartXfer+0x364>
 8005366:	5a81      	ldrh	r1, [r0, r2]
 8005368:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 800536c:	0409      	lsls	r1, r1, #16
 800536e:	0c09      	lsrs	r1, r1, #16
 8005370:	5281      	strh	r1, [r0, r2]
 8005372:	5a81      	ldrh	r1, [r0, r2]
 8005374:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8005378:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 800537c:	b289      	uxth	r1, r1
 800537e:	5281      	strh	r1, [r0, r2]
 8005380:	e023      	b.n	80053ca <USB_EPStartXfer+0x398>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005382:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8005386:	b291      	uxth	r1, r2
 8005388:	f200 4204 	addw	r2, r0, #1028	; 0x404
 800538c:	440a      	add	r2, r1
 800538e:	011b      	lsls	r3, r3, #4
 8005390:	b2b1      	uxth	r1, r6
 8005392:	52d1      	strh	r1, [r2, r3]
 8005394:	e7ca      	b.n	800532c <USB_EPStartXfer+0x2fa>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005396:	2b3e      	cmp	r3, #62	; 0x3e
 8005398:	d808      	bhi.n	80053ac <USB_EPStartXfer+0x37a>
 800539a:	0859      	lsrs	r1, r3, #1
 800539c:	f013 0f01 	tst.w	r3, #1
 80053a0:	bf18      	it	ne
 80053a2:	3101      	addne	r1, #1
 80053a4:	0289      	lsls	r1, r1, #10
 80053a6:	b289      	uxth	r1, r1
 80053a8:	5281      	strh	r1, [r0, r2]
 80053aa:	e00e      	b.n	80053ca <USB_EPStartXfer+0x398>
 80053ac:	0959      	lsrs	r1, r3, #5
 80053ae:	f013 0f1f 	tst.w	r3, #31
 80053b2:	bf08      	it	eq
 80053b4:	f101 31ff 	addeq.w	r1, r1, #4294967295
 80053b8:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 80053bc:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80053c0:	b289      	uxth	r1, r1
 80053c2:	5281      	strh	r1, [r0, r2]
 80053c4:	e001      	b.n	80053ca <USB_EPStartXfer+0x398>
 80053c6:	2a01      	cmp	r2, #1
 80053c8:	d006      	beq.n	80053d8 <USB_EPStartXfer+0x3a6>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80053ca:	b29b      	uxth	r3, r3
 80053cc:	8962      	ldrh	r2, [r4, #10]
 80053ce:	6961      	ldr	r1, [r4, #20]
 80053d0:	4628      	mov	r0, r5
 80053d2:	f7ff fe17 	bl	8005004 <USB_WritePMA>
 80053d6:	e6b6      	b.n	8005146 <USB_EPStartXfer+0x114>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80053d8:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 80053dc:	b290      	uxth	r0, r2
 80053de:	7821      	ldrb	r1, [r4, #0]
 80053e0:	0109      	lsls	r1, r1, #4
 80053e2:	f205 420c 	addw	r2, r5, #1036	; 0x40c
 80053e6:	4402      	add	r2, r0
 80053e8:	b298      	uxth	r0, r3
 80053ea:	5288      	strh	r0, [r1, r2]
 80053ec:	e7ed      	b.n	80053ca <USB_EPStartXfer+0x398>
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80053ee:	7809      	ldrb	r1, [r1, #0]
 80053f0:	f830 2021 	ldrh.w	r2, [r0, r1, lsl #2]
 80053f4:	b292      	uxth	r2, r2
 80053f6:	f422 42e2 	bic.w	r2, r2, #28928	; 0x7100
 80053fa:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80053fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005402:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005406:	f820 2021 	strh.w	r2, [r0, r1, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800540a:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800540e:	b290      	uxth	r0, r2
 8005410:	7821      	ldrb	r1, [r4, #0]
 8005412:	0109      	lsls	r1, r1, #4
 8005414:	f205 4204 	addw	r2, r5, #1028	; 0x404
 8005418:	4402      	add	r2, r0
 800541a:	b29b      	uxth	r3, r3
 800541c:	528b      	strh	r3, [r1, r2]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800541e:	8922      	ldrh	r2, [r4, #8]
 8005420:	6961      	ldr	r1, [r4, #20]
 8005422:	4628      	mov	r0, r5
 8005424:	f7ff fdee 	bl	8005004 <USB_WritePMA>
 8005428:	e68d      	b.n	8005146 <USB_EPStartXfer+0x114>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800542a:	2e3e      	cmp	r6, #62	; 0x3e
 800542c:	d808      	bhi.n	8005440 <USB_EPStartXfer+0x40e>
 800542e:	0871      	lsrs	r1, r6, #1
 8005430:	f016 0f01 	tst.w	r6, #1
 8005434:	bf18      	it	ne
 8005436:	3101      	addne	r1, #1
 8005438:	0289      	lsls	r1, r1, #10
 800543a:	b289      	uxth	r1, r1
 800543c:	52d1      	strh	r1, [r2, r3]
 800543e:	e00e      	b.n	800545e <USB_EPStartXfer+0x42c>
 8005440:	0971      	lsrs	r1, r6, #5
 8005442:	f016 0f1f 	tst.w	r6, #31
 8005446:	bf08      	it	eq
 8005448:	f101 31ff 	addeq.w	r1, r1, #4294967295
 800544c:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 8005450:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8005454:	b289      	uxth	r1, r1
 8005456:	52d1      	strh	r1, [r2, r3]
 8005458:	e001      	b.n	800545e <USB_EPStartXfer+0x42c>
 800545a:	2a01      	cmp	r2, #1
 800545c:	d028      	beq.n	80054b0 <USB_EPStartXfer+0x47e>
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800545e:	b2b3      	uxth	r3, r6
 8005460:	8962      	ldrh	r2, [r4, #10]
 8005462:	6961      	ldr	r1, [r4, #20]
 8005464:	4628      	mov	r0, r5
 8005466:	f7ff fdcd 	bl	8005004 <USB_WritePMA>
          ep->xfer_buff += len;
 800546a:	6963      	ldr	r3, [r4, #20]
 800546c:	4433      	add	r3, r6
 800546e:	6163      	str	r3, [r4, #20]
          if (ep->xfer_len_db > ep->maxpacket)
 8005470:	6a23      	ldr	r3, [r4, #32]
 8005472:	6922      	ldr	r2, [r4, #16]
 8005474:	4293      	cmp	r3, r2
            ep->xfer_len_db -= len;
 8005476:	bf86      	itte	hi
 8005478:	1b9a      	subhi	r2, r3, r6
 800547a:	4633      	movhi	r3, r6
            ep->xfer_len_db = 0U;
 800547c:	2200      	movls	r2, #0
 800547e:	6222      	str	r2, [r4, #32]
          if (len > 0U)
 8005480:	2b00      	cmp	r3, #0
 8005482:	f43f ae60 	beq.w	8005146 <USB_EPStartXfer+0x114>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005486:	7862      	ldrb	r2, [r4, #1]
 8005488:	bb4a      	cbnz	r2, 80054de <USB_EPStartXfer+0x4ac>
 800548a:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 800548e:	b28a      	uxth	r2, r1
 8005490:	7820      	ldrb	r0, [r4, #0]
 8005492:	0100      	lsls	r0, r0, #4
 8005494:	f205 4104 	addw	r1, r5, #1028	; 0x404
 8005498:	4411      	add	r1, r2
 800549a:	2b3e      	cmp	r3, #62	; 0x3e
 800549c:	d812      	bhi.n	80054c4 <USB_EPStartXfer+0x492>
 800549e:	085a      	lsrs	r2, r3, #1
 80054a0:	f013 0f01 	tst.w	r3, #1
 80054a4:	bf18      	it	ne
 80054a6:	3201      	addne	r2, #1
 80054a8:	0292      	lsls	r2, r2, #10
 80054aa:	b292      	uxth	r2, r2
 80054ac:	5242      	strh	r2, [r0, r1]
 80054ae:	e018      	b.n	80054e2 <USB_EPStartXfer+0x4b0>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80054b0:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80054b4:	b291      	uxth	r1, r2
 80054b6:	f200 420c 	addw	r2, r0, #1036	; 0x40c
 80054ba:	440a      	add	r2, r1
 80054bc:	011b      	lsls	r3, r3, #4
 80054be:	b2b1      	uxth	r1, r6
 80054c0:	52d1      	strh	r1, [r2, r3]
 80054c2:	e7cc      	b.n	800545e <USB_EPStartXfer+0x42c>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80054c4:	095a      	lsrs	r2, r3, #5
 80054c6:	f013 0f1f 	tst.w	r3, #31
 80054ca:	bf08      	it	eq
 80054cc:	f102 32ff 	addeq.w	r2, r2, #4294967295
 80054d0:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 80054d4:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80054d8:	b292      	uxth	r2, r2
 80054da:	5242      	strh	r2, [r0, r1]
 80054dc:	e001      	b.n	80054e2 <USB_EPStartXfer+0x4b0>
 80054de:	2a01      	cmp	r2, #1
 80054e0:	d006      	beq.n	80054f0 <USB_EPStartXfer+0x4be>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	8922      	ldrh	r2, [r4, #8]
 80054e6:	6961      	ldr	r1, [r4, #20]
 80054e8:	4628      	mov	r0, r5
 80054ea:	f7ff fd8b 	bl	8005004 <USB_WritePMA>
 80054ee:	e62a      	b.n	8005146 <USB_EPStartXfer+0x114>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80054f0:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 80054f4:	b290      	uxth	r0, r2
 80054f6:	7821      	ldrb	r1, [r4, #0]
 80054f8:	0109      	lsls	r1, r1, #4
 80054fa:	f205 4204 	addw	r2, r5, #1028	; 0x404
 80054fe:	4402      	add	r2, r0
 8005500:	b298      	uxth	r0, r3
 8005502:	5288      	strh	r0, [r1, r2]
 8005504:	e7ed      	b.n	80054e2 <USB_EPStartXfer+0x4b0>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005506:	784a      	ldrb	r2, [r1, #1]
 8005508:	bb6a      	cbnz	r2, 8005566 <USB_EPStartXfer+0x534>
 800550a:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800550e:	b292      	uxth	r2, r2
 8005510:	f200 4104 	addw	r1, r0, #1028	; 0x404
 8005514:	440a      	add	r2, r1
 8005516:	011b      	lsls	r3, r3, #4
 8005518:	b96e      	cbnz	r6, 8005536 <USB_EPStartXfer+0x504>
 800551a:	5ad1      	ldrh	r1, [r2, r3]
 800551c:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8005520:	0409      	lsls	r1, r1, #16
 8005522:	0c09      	lsrs	r1, r1, #16
 8005524:	52d1      	strh	r1, [r2, r3]
 8005526:	5ad1      	ldrh	r1, [r2, r3]
 8005528:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 800552c:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8005530:	b289      	uxth	r1, r1
 8005532:	52d1      	strh	r1, [r2, r3]
 8005534:	e019      	b.n	800556a <USB_EPStartXfer+0x538>
 8005536:	2e3e      	cmp	r6, #62	; 0x3e
 8005538:	d808      	bhi.n	800554c <USB_EPStartXfer+0x51a>
 800553a:	0871      	lsrs	r1, r6, #1
 800553c:	f016 0f01 	tst.w	r6, #1
 8005540:	bf18      	it	ne
 8005542:	3101      	addne	r1, #1
 8005544:	0289      	lsls	r1, r1, #10
 8005546:	b289      	uxth	r1, r1
 8005548:	52d1      	strh	r1, [r2, r3]
 800554a:	e00e      	b.n	800556a <USB_EPStartXfer+0x538>
 800554c:	0971      	lsrs	r1, r6, #5
 800554e:	f016 0f1f 	tst.w	r6, #31
 8005552:	bf08      	it	eq
 8005554:	f101 31ff 	addeq.w	r1, r1, #4294967295
 8005558:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 800555c:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8005560:	b289      	uxth	r1, r1
 8005562:	52d1      	strh	r1, [r2, r3]
 8005564:	e001      	b.n	800556a <USB_EPStartXfer+0x538>
 8005566:	2a01      	cmp	r2, #1
 8005568:	d028      	beq.n	80055bc <USB_EPStartXfer+0x58a>
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800556a:	b2b3      	uxth	r3, r6
 800556c:	8922      	ldrh	r2, [r4, #8]
 800556e:	6961      	ldr	r1, [r4, #20]
 8005570:	4628      	mov	r0, r5
 8005572:	f7ff fd47 	bl	8005004 <USB_WritePMA>
          ep->xfer_buff += len;
 8005576:	6963      	ldr	r3, [r4, #20]
 8005578:	4433      	add	r3, r6
 800557a:	6163      	str	r3, [r4, #20]
          if (ep->xfer_len_db > ep->maxpacket)
 800557c:	6a23      	ldr	r3, [r4, #32]
 800557e:	6922      	ldr	r2, [r4, #16]
 8005580:	4293      	cmp	r3, r2
            ep->xfer_len_db -= len;
 8005582:	bf86      	itte	hi
 8005584:	1b9a      	subhi	r2, r3, r6
 8005586:	4633      	movhi	r3, r6
            ep->xfer_len_db = 0U;
 8005588:	2200      	movls	r2, #0
 800558a:	6222      	str	r2, [r4, #32]
          if (len > 0U)
 800558c:	2b00      	cmp	r3, #0
 800558e:	f43f adda 	beq.w	8005146 <USB_EPStartXfer+0x114>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005592:	7862      	ldrb	r2, [r4, #1]
 8005594:	bb4a      	cbnz	r2, 80055ea <USB_EPStartXfer+0x5b8>
 8005596:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 800559a:	b28a      	uxth	r2, r1
 800559c:	7820      	ldrb	r0, [r4, #0]
 800559e:	0100      	lsls	r0, r0, #4
 80055a0:	f205 410c 	addw	r1, r5, #1036	; 0x40c
 80055a4:	4411      	add	r1, r2
 80055a6:	2b3e      	cmp	r3, #62	; 0x3e
 80055a8:	d812      	bhi.n	80055d0 <USB_EPStartXfer+0x59e>
 80055aa:	085a      	lsrs	r2, r3, #1
 80055ac:	f013 0f01 	tst.w	r3, #1
 80055b0:	bf18      	it	ne
 80055b2:	3201      	addne	r2, #1
 80055b4:	0292      	lsls	r2, r2, #10
 80055b6:	b292      	uxth	r2, r2
 80055b8:	5242      	strh	r2, [r0, r1]
 80055ba:	e018      	b.n	80055ee <USB_EPStartXfer+0x5bc>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80055bc:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80055c0:	b291      	uxth	r1, r2
 80055c2:	f200 4204 	addw	r2, r0, #1028	; 0x404
 80055c6:	440a      	add	r2, r1
 80055c8:	011b      	lsls	r3, r3, #4
 80055ca:	b2b1      	uxth	r1, r6
 80055cc:	52d1      	strh	r1, [r2, r3]
 80055ce:	e7cc      	b.n	800556a <USB_EPStartXfer+0x538>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80055d0:	095a      	lsrs	r2, r3, #5
 80055d2:	f013 0f1f 	tst.w	r3, #31
 80055d6:	bf08      	it	eq
 80055d8:	f102 32ff 	addeq.w	r2, r2, #4294967295
 80055dc:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 80055e0:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80055e4:	b292      	uxth	r2, r2
 80055e6:	5242      	strh	r2, [r0, r1]
 80055e8:	e001      	b.n	80055ee <USB_EPStartXfer+0x5bc>
 80055ea:	2a01      	cmp	r2, #1
 80055ec:	d006      	beq.n	80055fc <USB_EPStartXfer+0x5ca>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80055ee:	b29b      	uxth	r3, r3
 80055f0:	8962      	ldrh	r2, [r4, #10]
 80055f2:	6961      	ldr	r1, [r4, #20]
 80055f4:	4628      	mov	r0, r5
 80055f6:	f7ff fd05 	bl	8005004 <USB_WritePMA>
 80055fa:	e5a4      	b.n	8005146 <USB_EPStartXfer+0x114>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80055fc:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8005600:	b290      	uxth	r0, r2
 8005602:	7821      	ldrb	r1, [r4, #0]
 8005604:	0109      	lsls	r1, r1, #4
 8005606:	f205 420c 	addw	r2, r5, #1036	; 0x40c
 800560a:	4402      	add	r2, r0
 800560c:	b298      	uxth	r0, r3
 800560e:	5288      	strh	r0, [r1, r2]
 8005610:	e7ed      	b.n	80055ee <USB_EPStartXfer+0x5bc>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005612:	293e      	cmp	r1, #62	; 0x3e
 8005614:	d808      	bhi.n	8005628 <USB_EPStartXfer+0x5f6>
 8005616:	0848      	lsrs	r0, r1, #1
 8005618:	f011 0f01 	tst.w	r1, #1
 800561c:	bf18      	it	ne
 800561e:	3001      	addne	r0, #1
 8005620:	0280      	lsls	r0, r0, #10
 8005622:	b280      	uxth	r0, r0
 8005624:	52d0      	strh	r0, [r2, r3]
 8005626:	e52e      	b.n	8005086 <USB_EPStartXfer+0x54>
 8005628:	0948      	lsrs	r0, r1, #5
 800562a:	f011 0f1f 	tst.w	r1, #31
 800562e:	bf08      	it	eq
 8005630:	f100 30ff 	addeq.w	r0, r0, #4294967295
 8005634:	ea6f 60c0 	mvn.w	r0, r0, lsl #27
 8005638:	ea6f 4050 	mvn.w	r0, r0, lsr #17
 800563c:	b280      	uxth	r0, r0
 800563e:	52d0      	strh	r0, [r2, r3]
 8005640:	e521      	b.n	8005086 <USB_EPStartXfer+0x54>
      if (ep->type == EP_TYPE_BULK)
 8005642:	78ca      	ldrb	r2, [r1, #3]
 8005644:	2a02      	cmp	r2, #2
 8005646:	d03f      	beq.n	80056c8 <USB_EPStartXfer+0x696>
      else if (ep->type == EP_TYPE_ISOC)
 8005648:	2a01      	cmp	r2, #1
 800564a:	f040 8116 	bne.w	800587a <USB_EPStartXfer+0x848>
        if (ep->xfer_len > ep->maxpacket)
 800564e:	698a      	ldr	r2, [r1, #24]
 8005650:	6909      	ldr	r1, [r1, #16]
 8005652:	428a      	cmp	r2, r1
          ep->xfer_len -= len;
 8005654:	bf86      	itte	hi
 8005656:	1a50      	subhi	r0, r2, r1
          len = ep->maxpacket;
 8005658:	460a      	movhi	r2, r1
          ep->xfer_len = 0U;
 800565a:	2000      	movls	r0, #0
 800565c:	61a0      	str	r0, [r4, #24]
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800565e:	2b00      	cmp	r3, #0
 8005660:	f47f ad11 	bne.w	8005086 <USB_EPStartXfer+0x54>
 8005664:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8005668:	b29b      	uxth	r3, r3
 800566a:	7826      	ldrb	r6, [r4, #0]
 800566c:	0136      	lsls	r6, r6, #4
 800566e:	f205 4004 	addw	r0, r5, #1028	; 0x404
 8005672:	4418      	add	r0, r3
 8005674:	2a00      	cmp	r2, #0
 8005676:	f040 80b7 	bne.w	80057e8 <USB_EPStartXfer+0x7b6>
 800567a:	5a33      	ldrh	r3, [r6, r0]
 800567c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005680:	041b      	lsls	r3, r3, #16
 8005682:	0c1b      	lsrs	r3, r3, #16
 8005684:	5233      	strh	r3, [r6, r0]
 8005686:	5a33      	ldrh	r3, [r6, r0]
 8005688:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800568c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005690:	b29b      	uxth	r3, r3
 8005692:	5233      	strh	r3, [r6, r0]
 8005694:	7863      	ldrb	r3, [r4, #1]
 8005696:	2b00      	cmp	r3, #0
 8005698:	f040 80e1 	bne.w	800585e <USB_EPStartXfer+0x82c>
 800569c:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 80056a0:	b293      	uxth	r3, r2
 80056a2:	7821      	ldrb	r1, [r4, #0]
 80056a4:	0109      	lsls	r1, r1, #4
 80056a6:	f205 420c 	addw	r2, r5, #1036	; 0x40c
 80056aa:	441a      	add	r2, r3
 80056ac:	5a8b      	ldrh	r3, [r1, r2]
 80056ae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80056b2:	041b      	lsls	r3, r3, #16
 80056b4:	0c1b      	lsrs	r3, r3, #16
 80056b6:	528b      	strh	r3, [r1, r2]
 80056b8:	5a8b      	ldrh	r3, [r1, r2]
 80056ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	528b      	strh	r3, [r1, r2]
 80056c6:	e4de      	b.n	8005086 <USB_EPStartXfer+0x54>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d132      	bne.n	8005732 <USB_EPStartXfer+0x700>
 80056cc:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80056d0:	b29b      	uxth	r3, r3
 80056d2:	780a      	ldrb	r2, [r1, #0]
 80056d4:	0112      	lsls	r2, r2, #4
 80056d6:	f200 4104 	addw	r1, r0, #1028	; 0x404
 80056da:	440b      	add	r3, r1
 80056dc:	6921      	ldr	r1, [r4, #16]
 80056de:	2900      	cmp	r1, #0
 80056e0:	d145      	bne.n	800576e <USB_EPStartXfer+0x73c>
 80056e2:	5ad1      	ldrh	r1, [r2, r3]
 80056e4:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 80056e8:	0409      	lsls	r1, r1, #16
 80056ea:	0c09      	lsrs	r1, r1, #16
 80056ec:	52d1      	strh	r1, [r2, r3]
 80056ee:	5ad1      	ldrh	r1, [r2, r3]
 80056f0:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 80056f4:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80056f8:	b289      	uxth	r1, r1
 80056fa:	52d1      	strh	r1, [r2, r3]
 80056fc:	7863      	ldrb	r3, [r4, #1]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d165      	bne.n	80057ce <USB_EPStartXfer+0x79c>
 8005702:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8005706:	b29b      	uxth	r3, r3
 8005708:	7822      	ldrb	r2, [r4, #0]
 800570a:	0112      	lsls	r2, r2, #4
 800570c:	f205 410c 	addw	r1, r5, #1036	; 0x40c
 8005710:	440b      	add	r3, r1
 8005712:	6921      	ldr	r1, [r4, #16]
 8005714:	2900      	cmp	r1, #0
 8005716:	d142      	bne.n	800579e <USB_EPStartXfer+0x76c>
 8005718:	5ad1      	ldrh	r1, [r2, r3]
 800571a:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 800571e:	0409      	lsls	r1, r1, #16
 8005720:	0c09      	lsrs	r1, r1, #16
 8005722:	52d1      	strh	r1, [r2, r3]
 8005724:	5ad1      	ldrh	r1, [r2, r3]
 8005726:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 800572a:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 800572e:	b289      	uxth	r1, r1
 8005730:	52d1      	strh	r1, [r2, r3]
        if (ep->xfer_count != 0U)
 8005732:	69e3      	ldr	r3, [r4, #28]
 8005734:	2b00      	cmp	r3, #0
 8005736:	f43f aca6 	beq.w	8005086 <USB_EPStartXfer+0x54>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800573a:	7822      	ldrb	r2, [r4, #0]
 800573c:	f835 1022 	ldrh.w	r1, [r5, r2, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005740:	f244 0340 	movw	r3, #16448	; 0x4040
 8005744:	ea03 0001 	and.w	r0, r3, r1
 8005748:	438b      	bics	r3, r1
 800574a:	d002      	beq.n	8005752 <USB_EPStartXfer+0x720>
 800574c:	2800      	cmp	r0, #0
 800574e:	f47f ac9a 	bne.w	8005086 <USB_EPStartXfer+0x54>
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8005752:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8005756:	b29b      	uxth	r3, r3
 8005758:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800575c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005760:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005764:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005768:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 800576c:	e48b      	b.n	8005086 <USB_EPStartXfer+0x54>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800576e:	293e      	cmp	r1, #62	; 0x3e
 8005770:	d808      	bhi.n	8005784 <USB_EPStartXfer+0x752>
 8005772:	0848      	lsrs	r0, r1, #1
 8005774:	f011 0f01 	tst.w	r1, #1
 8005778:	bf18      	it	ne
 800577a:	3001      	addne	r0, #1
 800577c:	0281      	lsls	r1, r0, #10
 800577e:	b289      	uxth	r1, r1
 8005780:	52d1      	strh	r1, [r2, r3]
 8005782:	e7bb      	b.n	80056fc <USB_EPStartXfer+0x6ca>
 8005784:	0948      	lsrs	r0, r1, #5
 8005786:	f011 0f1f 	tst.w	r1, #31
 800578a:	bf08      	it	eq
 800578c:	f100 30ff 	addeq.w	r0, r0, #4294967295
 8005790:	ea6f 61c0 	mvn.w	r1, r0, lsl #27
 8005794:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8005798:	b289      	uxth	r1, r1
 800579a:	52d1      	strh	r1, [r2, r3]
 800579c:	e7ae      	b.n	80056fc <USB_EPStartXfer+0x6ca>
 800579e:	293e      	cmp	r1, #62	; 0x3e
 80057a0:	d808      	bhi.n	80057b4 <USB_EPStartXfer+0x782>
 80057a2:	0848      	lsrs	r0, r1, #1
 80057a4:	f011 0f01 	tst.w	r1, #1
 80057a8:	bf18      	it	ne
 80057aa:	3001      	addne	r0, #1
 80057ac:	0281      	lsls	r1, r0, #10
 80057ae:	b289      	uxth	r1, r1
 80057b0:	52d1      	strh	r1, [r2, r3]
 80057b2:	e7be      	b.n	8005732 <USB_EPStartXfer+0x700>
 80057b4:	0948      	lsrs	r0, r1, #5
 80057b6:	f011 0f1f 	tst.w	r1, #31
 80057ba:	bf08      	it	eq
 80057bc:	f100 30ff 	addeq.w	r0, r0, #4294967295
 80057c0:	ea6f 61c0 	mvn.w	r1, r0, lsl #27
 80057c4:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80057c8:	b289      	uxth	r1, r1
 80057ca:	52d1      	strh	r1, [r2, r3]
 80057cc:	e7b1      	b.n	8005732 <USB_EPStartXfer+0x700>
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d1af      	bne.n	8005732 <USB_EPStartXfer+0x700>
 80057d2:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 80057d6:	b299      	uxth	r1, r3
 80057d8:	7822      	ldrb	r2, [r4, #0]
 80057da:	0112      	lsls	r2, r2, #4
 80057dc:	f205 430c 	addw	r3, r5, #1036	; 0x40c
 80057e0:	440b      	add	r3, r1
 80057e2:	8a21      	ldrh	r1, [r4, #16]
 80057e4:	52d1      	strh	r1, [r2, r3]
 80057e6:	e7a4      	b.n	8005732 <USB_EPStartXfer+0x700>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80057e8:	2a3e      	cmp	r2, #62	; 0x3e
 80057ea:	d818      	bhi.n	800581e <USB_EPStartXfer+0x7ec>
 80057ec:	0851      	lsrs	r1, r2, #1
 80057ee:	f012 0701 	ands.w	r7, r2, #1
 80057f2:	bf14      	ite	ne
 80057f4:	1c4b      	addne	r3, r1, #1
 80057f6:	460b      	moveq	r3, r1
 80057f8:	029b      	lsls	r3, r3, #10
 80057fa:	b29b      	uxth	r3, r3
 80057fc:	5233      	strh	r3, [r6, r0]
 80057fe:	7863      	ldrb	r3, [r4, #1]
 8005800:	bb6b      	cbnz	r3, 800585e <USB_EPStartXfer+0x82c>
 8005802:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8005806:	b29a      	uxth	r2, r3
 8005808:	f205 430c 	addw	r3, r5, #1036	; 0x40c
 800580c:	4413      	add	r3, r2
 800580e:	7822      	ldrb	r2, [r4, #0]
 8005810:	0112      	lsls	r2, r2, #4
 8005812:	b107      	cbz	r7, 8005816 <USB_EPStartXfer+0x7e4>
 8005814:	3101      	adds	r1, #1
 8005816:	0289      	lsls	r1, r1, #10
 8005818:	b289      	uxth	r1, r1
 800581a:	5299      	strh	r1, [r3, r2]
 800581c:	e433      	b.n	8005086 <USB_EPStartXfer+0x54>
 800581e:	0951      	lsrs	r1, r2, #5
 8005820:	f012 071f 	ands.w	r7, r2, #31
 8005824:	bf0c      	ite	eq
 8005826:	f101 33ff 	addeq.w	r3, r1, #4294967295
 800582a:	460b      	movne	r3, r1
 800582c:	ea6f 63c3 	mvn.w	r3, r3, lsl #27
 8005830:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005834:	b29b      	uxth	r3, r3
 8005836:	5233      	strh	r3, [r6, r0]
 8005838:	7863      	ldrb	r3, [r4, #1]
 800583a:	b983      	cbnz	r3, 800585e <USB_EPStartXfer+0x82c>
 800583c:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8005840:	b29b      	uxth	r3, r3
 8005842:	7822      	ldrb	r2, [r4, #0]
 8005844:	0112      	lsls	r2, r2, #4
 8005846:	f205 400c 	addw	r0, r5, #1036	; 0x40c
 800584a:	4418      	add	r0, r3
 800584c:	b907      	cbnz	r7, 8005850 <USB_EPStartXfer+0x81e>
 800584e:	3901      	subs	r1, #1
 8005850:	ea6f 63c1 	mvn.w	r3, r1, lsl #27
 8005854:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005858:	b29b      	uxth	r3, r3
 800585a:	5213      	strh	r3, [r2, r0]
 800585c:	e413      	b.n	8005086 <USB_EPStartXfer+0x54>
 800585e:	2b01      	cmp	r3, #1
 8005860:	f47f ac11 	bne.w	8005086 <USB_EPStartXfer+0x54>
 8005864:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 8005868:	b289      	uxth	r1, r1
 800586a:	7823      	ldrb	r3, [r4, #0]
 800586c:	f201 410c 	addw	r1, r1, #1036	; 0x40c
 8005870:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 8005874:	b293      	uxth	r3, r2
 8005876:	526b      	strh	r3, [r5, r1]
 8005878:	e405      	b.n	8005086 <USB_EPStartXfer+0x54>
        return HAL_ERROR;
 800587a:	2001      	movs	r0, #1
 800587c:	e414      	b.n	80050a8 <USB_EPStartXfer+0x76>

0800587e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800587e:	b530      	push	{r4, r5, lr}
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005880:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8005884:	f500 6480 	add.w	r4, r0, #1024	; 0x400

  for (i = n; i != 0U; i--)
 8005888:	085d      	lsrs	r5, r3, #1
 800588a:	d012      	beq.n	80058b2 <USB_ReadPMA+0x34>
 800588c:	1c88      	adds	r0, r1, #2
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800588e:	46a6      	mov	lr, r4
  for (i = n; i != 0U; i--)
 8005890:	46ac      	mov	ip, r5
  {
    temp = *(__IO uint16_t *)pdwVal;
 8005892:	f83e 2b04 	ldrh.w	r2, [lr], #4
 8005896:	b292      	uxth	r2, r2
    pdwVal++;
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005898:	f800 2c02 	strb.w	r2, [r0, #-2]
    pBuf++;
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800589c:	0a12      	lsrs	r2, r2, #8
 800589e:	f800 2c01 	strb.w	r2, [r0, #-1]
  for (i = n; i != 0U; i--)
 80058a2:	3002      	adds	r0, #2
 80058a4:	f1bc 0c01 	subs.w	ip, ip, #1
 80058a8:	d1f3      	bne.n	8005892 <USB_ReadPMA+0x14>
    pBuf++;
 80058aa:	eb01 0145 	add.w	r1, r1, r5, lsl #1

#if PMA_ACCESS > 1U
    pdwVal++;
 80058ae:	eb04 0485 	add.w	r4, r4, r5, lsl #2
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80058b2:	f013 0f01 	tst.w	r3, #1
  {
    temp = *pdwVal;
 80058b6:	bf1c      	itt	ne
 80058b8:	8823      	ldrhne	r3, [r4, #0]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80058ba:	700b      	strbne	r3, [r1, #0]
  }
}
 80058bc:	bd30      	pop	{r4, r5, pc}

080058be <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80058be:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 80058c2:	b183      	cbz	r3, 80058e6 <USBD_CDC_EP0_RxReady+0x28>
{
 80058c4:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80058c6:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80058ca:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 80058ce:	28ff      	cmp	r0, #255	; 0xff
 80058d0:	d007      	beq.n	80058e2 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80058d2:	689b      	ldr	r3, [r3, #8]
 80058d4:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 80058d8:	4621      	mov	r1, r4
 80058da:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 80058dc:	23ff      	movs	r3, #255	; 0xff
 80058de:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 80058e2:	2000      	movs	r0, #0
 80058e4:	bd10      	pop	{r4, pc}
 80058e6:	2000      	movs	r0, #0
 80058e8:	4770      	bx	lr
	...

080058ec <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80058ec:	2343      	movs	r3, #67	; 0x43
 80058ee:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 80058f0:	4800      	ldr	r0, [pc, #0]	; (80058f4 <USBD_CDC_GetFSCfgDesc+0x8>)
 80058f2:	4770      	bx	lr
 80058f4:	200000dc 	.word	0x200000dc

080058f8 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80058f8:	2343      	movs	r3, #67	; 0x43
 80058fa:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 80058fc:	4800      	ldr	r0, [pc, #0]	; (8005900 <USBD_CDC_GetHSCfgDesc+0x8>)
 80058fe:	4770      	bx	lr
 8005900:	20000120 	.word	0x20000120

08005904 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005904:	2343      	movs	r3, #67	; 0x43
 8005906:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8005908:	4800      	ldr	r0, [pc, #0]	; (800590c <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 800590a:	4770      	bx	lr
 800590c:	20000170 	.word	0x20000170

08005910 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8005910:	230a      	movs	r3, #10
 8005912:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8005914:	4800      	ldr	r0, [pc, #0]	; (8005918 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8005916:	4770      	bx	lr
 8005918:	20000164 	.word	0x20000164

0800591c <USBD_CDC_DataOut>:
{
 800591c:	b538      	push	{r3, r4, r5, lr}
 800591e:	4604      	mov	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005920:	f8d0 52b8 	ldr.w	r5, [r0, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005924:	f000 ffd6 	bl	80068d4 <USBD_LL_GetRxDataSize>
 8005928:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  if (pdev->pClassData != NULL)
 800592c:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8005930:	b14b      	cbz	r3, 8005946 <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005932:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8005936:	68db      	ldr	r3, [r3, #12]
 8005938:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 800593c:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 8005940:	4798      	blx	r3
    return USBD_OK;
 8005942:	2000      	movs	r0, #0
}
 8005944:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8005946:	2002      	movs	r0, #2
 8005948:	e7fc      	b.n	8005944 <USBD_CDC_DataOut+0x28>

0800594a <USBD_CDC_DataIn>:
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800594a:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
  if (pdev->pClassData != NULL)
 800594e:	b312      	cbz	r2, 8005996 <USBD_CDC_DataIn+0x4c>
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005950:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8005954:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8005958:	69db      	ldr	r3, [r3, #28]
 800595a:	b1f3      	cbz	r3, 800599a <USBD_CDC_DataIn+0x50>
{
 800595c:	b510      	push	{r4, lr}
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800595e:	f8d0 42c0 	ldr.w	r4, [r0, #704]	; 0x2c0
 8005962:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
 8005966:	eb04 04cc 	add.w	r4, r4, ip, lsl #3
 800596a:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800596c:	fbb3 fcf4 	udiv	ip, r3, r4
 8005970:	fb04 331c 	mls	r3, r4, ip, r3
 8005974:	b11b      	cbz	r3, 800597e <USBD_CDC_DataIn+0x34>
      hcdc->TxState = 0U;
 8005976:	2000      	movs	r0, #0
 8005978:	f8c2 0214 	str.w	r0, [r2, #532]	; 0x214
}
 800597c:	bd10      	pop	{r4, pc}
      pdev->ep_in[epnum].total_length = 0U;
 800597e:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8005982:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8005986:	2400      	movs	r4, #0
 8005988:	61dc      	str	r4, [r3, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800598a:	4623      	mov	r3, r4
 800598c:	4622      	mov	r2, r4
 800598e:	f000 ff91 	bl	80068b4 <USBD_LL_Transmit>
    return USBD_OK;
 8005992:	4620      	mov	r0, r4
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005994:	e7f2      	b.n	800597c <USBD_CDC_DataIn+0x32>
    return USBD_FAIL;
 8005996:	2002      	movs	r0, #2
 8005998:	4770      	bx	lr
      hcdc->TxState = 0U;
 800599a:	2000      	movs	r0, #0
 800599c:	f8c2 0214 	str.w	r0, [r2, #532]	; 0x214
}
 80059a0:	4770      	bx	lr

080059a2 <USBD_CDC_Setup>:
{
 80059a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059a4:	b083      	sub	sp, #12
 80059a6:	4606      	mov	r6, r0
 80059a8:	460c      	mov	r4, r1
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80059aa:	f8d0 72b8 	ldr.w	r7, [r0, #696]	; 0x2b8
  uint8_t ifalt = 0U;
 80059ae:	2300      	movs	r3, #0
 80059b0:	f88d 3007 	strb.w	r3, [sp, #7]
  uint16_t status_info = 0U;
 80059b4:	f8ad 3004 	strh.w	r3, [sp, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80059b8:	780b      	ldrb	r3, [r1, #0]
 80059ba:	f013 0560 	ands.w	r5, r3, #96	; 0x60
 80059be:	d027      	beq.n	8005a10 <USBD_CDC_Setup+0x6e>
 80059c0:	2d20      	cmp	r5, #32
 80059c2:	d153      	bne.n	8005a6c <USBD_CDC_Setup+0xca>
      if (req->wLength)
 80059c4:	88ca      	ldrh	r2, [r1, #6]
 80059c6:	b1da      	cbz	r2, 8005a00 <USBD_CDC_Setup+0x5e>
        if (req->bmRequest & 0x80U)
 80059c8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80059cc:	d00c      	beq.n	80059e8 <USBD_CDC_Setup+0x46>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80059ce:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 80059d2:	689b      	ldr	r3, [r3, #8]
 80059d4:	4639      	mov	r1, r7
 80059d6:	7860      	ldrb	r0, [r4, #1]
 80059d8:	4798      	blx	r3
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80059da:	88e2      	ldrh	r2, [r4, #6]
 80059dc:	4639      	mov	r1, r7
 80059de:	4630      	mov	r0, r6
 80059e0:	f000 fd4a 	bl	8006478 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 80059e4:	2500      	movs	r5, #0
 80059e6:	e044      	b.n	8005a72 <USBD_CDC_Setup+0xd0>
          hcdc->CmdOpCode = req->bRequest;
 80059e8:	784b      	ldrb	r3, [r1, #1]
 80059ea:	f887 3200 	strb.w	r3, [r7, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80059ee:	88cb      	ldrh	r3, [r1, #6]
 80059f0:	f887 3201 	strb.w	r3, [r7, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80059f4:	88ca      	ldrh	r2, [r1, #6]
 80059f6:	4639      	mov	r1, r7
 80059f8:	f000 fd53 	bl	80064a2 <USBD_CtlPrepareRx>
  uint8_t ret = USBD_OK;
 80059fc:	2500      	movs	r5, #0
 80059fe:	e038      	b.n	8005a72 <USBD_CDC_Setup+0xd0>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005a00:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 8005a04:	689b      	ldr	r3, [r3, #8]
 8005a06:	2200      	movs	r2, #0
 8005a08:	7848      	ldrb	r0, [r1, #1]
 8005a0a:	4798      	blx	r3
  uint8_t ret = USBD_OK;
 8005a0c:	2500      	movs	r5, #0
 8005a0e:	e030      	b.n	8005a72 <USBD_CDC_Setup+0xd0>
      switch (req->bRequest)
 8005a10:	784f      	ldrb	r7, [r1, #1]
 8005a12:	2f0a      	cmp	r7, #10
 8005a14:	d014      	beq.n	8005a40 <USBD_CDC_Setup+0x9e>
 8005a16:	2f0b      	cmp	r7, #11
 8005a18:	d020      	beq.n	8005a5c <USBD_CDC_Setup+0xba>
 8005a1a:	b11f      	cbz	r7, 8005a24 <USBD_CDC_Setup+0x82>
          USBD_CtlError(pdev, req);
 8005a1c:	f000 fa3e 	bl	8005e9c <USBD_CtlError>
          ret = USBD_FAIL;
 8005a20:	2502      	movs	r5, #2
          break;
 8005a22:	e026      	b.n	8005a72 <USBD_CDC_Setup+0xd0>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a24:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005a28:	2b03      	cmp	r3, #3
 8005a2a:	d003      	beq.n	8005a34 <USBD_CDC_Setup+0x92>
            USBD_CtlError(pdev, req);
 8005a2c:	f000 fa36 	bl	8005e9c <USBD_CtlError>
            ret = USBD_FAIL;
 8005a30:	2502      	movs	r5, #2
 8005a32:	e01e      	b.n	8005a72 <USBD_CDC_Setup+0xd0>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8005a34:	2202      	movs	r2, #2
 8005a36:	a901      	add	r1, sp, #4
 8005a38:	f000 fd1e 	bl	8006478 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8005a3c:	463d      	mov	r5, r7
 8005a3e:	e018      	b.n	8005a72 <USBD_CDC_Setup+0xd0>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a40:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005a44:	2b03      	cmp	r3, #3
 8005a46:	d003      	beq.n	8005a50 <USBD_CDC_Setup+0xae>
            USBD_CtlError(pdev, req);
 8005a48:	f000 fa28 	bl	8005e9c <USBD_CtlError>
            ret = USBD_FAIL;
 8005a4c:	2502      	movs	r5, #2
 8005a4e:	e010      	b.n	8005a72 <USBD_CDC_Setup+0xd0>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8005a50:	2201      	movs	r2, #1
 8005a52:	f10d 0107 	add.w	r1, sp, #7
 8005a56:	f000 fd0f 	bl	8006478 <USBD_CtlSendData>
 8005a5a:	e00a      	b.n	8005a72 <USBD_CDC_Setup+0xd0>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005a5c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005a60:	2b03      	cmp	r3, #3
 8005a62:	d006      	beq.n	8005a72 <USBD_CDC_Setup+0xd0>
            USBD_CtlError(pdev, req);
 8005a64:	f000 fa1a 	bl	8005e9c <USBD_CtlError>
            ret = USBD_FAIL;
 8005a68:	2502      	movs	r5, #2
 8005a6a:	e002      	b.n	8005a72 <USBD_CDC_Setup+0xd0>
      USBD_CtlError(pdev, req);
 8005a6c:	f000 fa16 	bl	8005e9c <USBD_CtlError>
      ret = USBD_FAIL;
 8005a70:	2502      	movs	r5, #2
}
 8005a72:	4628      	mov	r0, r5
 8005a74:	b003      	add	sp, #12
 8005a76:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005a78 <USBD_CDC_DeInit>:
{
 8005a78:	b538      	push	{r3, r4, r5, lr}
 8005a7a:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005a7c:	2181      	movs	r1, #129	; 0x81
 8005a7e:	f000 fee2 	bl	8006846 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005a82:	2500      	movs	r5, #0
 8005a84:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005a86:	2101      	movs	r1, #1
 8005a88:	4620      	mov	r0, r4
 8005a8a:	f000 fedc 	bl	8006846 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005a8e:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005a92:	2182      	movs	r1, #130	; 0x82
 8005a94:	4620      	mov	r0, r4
 8005a96:	f000 fed6 	bl	8006846 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005a9a:	6425      	str	r5, [r4, #64]	; 0x40
  if (pdev->pClassData != NULL)
 8005a9c:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8005aa0:	b14b      	cbz	r3, 8005ab6 <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005aa2:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8005aaa:	f8d4 02b8 	ldr.w	r0, [r4, #696]	; 0x2b8
 8005aae:	f000 ff1b 	bl	80068e8 <USBD_static_free>
    pdev->pClassData = NULL;
 8005ab2:	f8c4 52b8 	str.w	r5, [r4, #696]	; 0x2b8
}
 8005ab6:	2000      	movs	r0, #0
 8005ab8:	bd38      	pop	{r3, r4, r5, pc}

08005aba <USBD_CDC_Init>:
{
 8005aba:	b570      	push	{r4, r5, r6, lr}
 8005abc:	4604      	mov	r4, r0
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005abe:	7c03      	ldrb	r3, [r0, #16]
 8005ac0:	bbab      	cbnz	r3, 8005b2e <USBD_CDC_Init+0x74>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005ac2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ac6:	2202      	movs	r2, #2
 8005ac8:	2181      	movs	r1, #129	; 0x81
 8005aca:	f000 feb1 	bl	8006830 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005ace:	2501      	movs	r5, #1
 8005ad0:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005ad2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ad6:	2202      	movs	r2, #2
 8005ad8:	4629      	mov	r1, r5
 8005ada:	4620      	mov	r0, r4
 8005adc:	f000 fea8 	bl	8006830 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005ae0:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005ae4:	2308      	movs	r3, #8
 8005ae6:	2203      	movs	r2, #3
 8005ae8:	2182      	movs	r1, #130	; 0x82
 8005aea:	4620      	mov	r0, r4
 8005aec:	f000 fea0 	bl	8006830 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005af0:	2301      	movs	r3, #1
 8005af2:	6423      	str	r3, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005af4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005af8:	f000 fef2 	bl	80068e0 <USBD_static_malloc>
 8005afc:	4605      	mov	r5, r0
 8005afe:	f8c4 02b8 	str.w	r0, [r4, #696]	; 0x2b8
  if (pdev->pClassData == NULL)
 8005b02:	b368      	cbz	r0, 8005b60 <USBD_CDC_Init+0xa6>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005b04:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4798      	blx	r3
    hcdc->TxState = 0U;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	f8c5 3214 	str.w	r3, [r5, #532]	; 0x214
    hcdc->RxState = 0U;
 8005b12:	f8c5 3218 	str.w	r3, [r5, #536]	; 0x218
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005b16:	7c26      	ldrb	r6, [r4, #16]
 8005b18:	b9ce      	cbnz	r6, 8005b4e <USBD_CDC_Init+0x94>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005b1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005b1e:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 8005b22:	2101      	movs	r1, #1
 8005b24:	4620      	mov	r0, r4
 8005b26:	f000 fecd 	bl	80068c4 <USBD_LL_PrepareReceive>
}
 8005b2a:	4630      	mov	r0, r6
 8005b2c:	bd70      	pop	{r4, r5, r6, pc}
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005b2e:	2340      	movs	r3, #64	; 0x40
 8005b30:	2202      	movs	r2, #2
 8005b32:	2181      	movs	r1, #129	; 0x81
 8005b34:	f000 fe7c 	bl	8006830 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005b38:	2501      	movs	r5, #1
 8005b3a:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005b3c:	2340      	movs	r3, #64	; 0x40
 8005b3e:	2202      	movs	r2, #2
 8005b40:	4629      	mov	r1, r5
 8005b42:	4620      	mov	r0, r4
 8005b44:	f000 fe74 	bl	8006830 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005b48:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
 8005b4c:	e7ca      	b.n	8005ae4 <USBD_CDC_Init+0x2a>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005b4e:	2340      	movs	r3, #64	; 0x40
 8005b50:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 8005b54:	2101      	movs	r1, #1
 8005b56:	4620      	mov	r0, r4
 8005b58:	f000 feb4 	bl	80068c4 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8005b5c:	2600      	movs	r6, #0
 8005b5e:	e7e4      	b.n	8005b2a <USBD_CDC_Init+0x70>
    ret = 1U;
 8005b60:	2601      	movs	r6, #1
 8005b62:	e7e2      	b.n	8005b2a <USBD_CDC_Init+0x70>

08005b64 <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if (fops != NULL)
 8005b64:	b119      	cbz	r1, 8005b6e <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData = fops;
 8005b66:	f8c0 12bc 	str.w	r1, [r0, #700]	; 0x2bc
    ret = USBD_OK;
 8005b6a:	2000      	movs	r0, #0
 8005b6c:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8005b6e:	2002      	movs	r0, #2
  }

  return ret;
}
 8005b70:	4770      	bx	lr

08005b72 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005b72:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  hcdc->TxBuffer = pbuff;
 8005b76:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005b7a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
}
 8005b7e:	2000      	movs	r0, #0
 8005b80:	4770      	bx	lr

08005b82 <USBD_CDC_SetRxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005b82:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  hcdc->RxBuffer = pbuff;
 8005b86:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204

  return USBD_OK;
}
 8005b8a:	2000      	movs	r0, #0
 8005b8c:	4770      	bx	lr

08005b8e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005b8e:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005b90:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8005b94:	b192      	cbz	r2, 8005bbc <USBD_CDC_ReceivePacket+0x2e>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005b96:	7c04      	ldrb	r4, [r0, #16]
 8005b98:	b944      	cbnz	r4, 8005bac <USBD_CDC_ReceivePacket+0x1e>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005b9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005b9e:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8005ba2:	2101      	movs	r1, #1
 8005ba4:	f000 fe8e 	bl	80068c4 <USBD_LL_PrepareReceive>
  }
  else
  {
    return USBD_FAIL;
  }
}
 8005ba8:	4620      	mov	r0, r4
 8005baa:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 8005bac:	2340      	movs	r3, #64	; 0x40
 8005bae:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8005bb2:	2101      	movs	r1, #1
 8005bb4:	f000 fe86 	bl	80068c4 <USBD_LL_PrepareReceive>
    return USBD_OK;
 8005bb8:	2400      	movs	r4, #0
 8005bba:	e7f5      	b.n	8005ba8 <USBD_CDC_ReceivePacket+0x1a>
    return USBD_FAIL;
 8005bbc:	2402      	movs	r4, #2
 8005bbe:	e7f3      	b.n	8005ba8 <USBD_CDC_ReceivePacket+0x1a>

08005bc0 <USBD_Init>:
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005bc0:	b198      	cbz	r0, 8005bea <USBD_Init+0x2a>
{
 8005bc2:	b508      	push	{r3, lr}
 8005bc4:	4603      	mov	r3, r0
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8005bc6:	f8d0 02b4 	ldr.w	r0, [r0, #692]	; 0x2b4
 8005bca:	b110      	cbz	r0, 8005bd2 <USBD_Init+0x12>
  {
    pdev->pClass = NULL;
 8005bcc:	2000      	movs	r0, #0
 8005bce:	f8c3 02b4 	str.w	r0, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005bd2:	b109      	cbz	r1, 8005bd8 <USBD_Init+0x18>
  {
    pdev->pDesc = pdesc;
 8005bd4:	f8c3 12b0 	str.w	r1, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005bd8:	2101      	movs	r1, #1
 8005bda:	f883 129c 	strb.w	r1, [r3, #668]	; 0x29c
  pdev->id = id;
 8005bde:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005be0:	4618      	mov	r0, r3
 8005be2:	f000 fddb 	bl	800679c <USBD_LL_Init>

  return USBD_OK;
 8005be6:	2000      	movs	r0, #0
}
 8005be8:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8005bea:	2002      	movs	r0, #2
}
 8005bec:	4770      	bx	lr

08005bee <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 8005bee:	b119      	cbz	r1, 8005bf8 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005bf0:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
    status = USBD_OK;
 8005bf4:	2000      	movs	r0, #0
 8005bf6:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8005bf8:	2002      	movs	r0, #2
  }

  return status;
}
 8005bfa:	4770      	bx	lr

08005bfc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005bfc:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8005bfe:	f000 fe0f 	bl	8006820 <USBD_LL_Start>

  return USBD_OK;
}
 8005c02:	2000      	movs	r0, #0
 8005c04:	bd08      	pop	{r3, pc}

08005c06 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005c06:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8005c08:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8005c0c:	b12b      	cbz	r3, 8005c1a <USBD_SetClassConfig+0x14>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4798      	blx	r3
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005c12:	2800      	cmp	r0, #0
 8005c14:	bf18      	it	ne
 8005c16:	2002      	movne	r0, #2
      ret = USBD_OK;
    }
  }

  return ret;
}
 8005c18:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005c1a:	2002      	movs	r0, #2
 8005c1c:	e7fc      	b.n	8005c18 <USBD_SetClassConfig+0x12>

08005c1e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005c1e:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8005c20:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	4798      	blx	r3

  return USBD_OK;
}
 8005c28:	2000      	movs	r0, #0
 8005c2a:	bd08      	pop	{r3, pc}

08005c2c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005c2c:	b538      	push	{r3, r4, r5, lr}
 8005c2e:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005c30:	f500 752a 	add.w	r5, r0, #680	; 0x2a8
 8005c34:	4628      	mov	r0, r5
 8005c36:	f000 f91d 	bl	8005e74 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005c40:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	; 0x2ae
 8005c44:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005c48:	f894 12a8 	ldrb.w	r1, [r4, #680]	; 0x2a8
 8005c4c:	f001 031f 	and.w	r3, r1, #31
 8005c50:	2b01      	cmp	r3, #1
 8005c52:	d00e      	beq.n	8005c72 <USBD_LL_SetupStage+0x46>
 8005c54:	2b02      	cmp	r3, #2
 8005c56:	d011      	beq.n	8005c7c <USBD_LL_SetupStage+0x50>
 8005c58:	b12b      	cbz	r3, 8005c66 <USBD_LL_SetupStage+0x3a>
    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005c5a:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8005c5e:	4620      	mov	r0, r4
 8005c60:	f000 fdf9 	bl	8006856 <USBD_LL_StallEP>
      break;
 8005c64:	e003      	b.n	8005c6e <USBD_LL_SetupStage+0x42>
      USBD_StdDevReq(pdev, &pdev->request);
 8005c66:	4629      	mov	r1, r5
 8005c68:	4620      	mov	r0, r4
 8005c6a:	f000 f921 	bl	8005eb0 <USBD_StdDevReq>
  }

  return USBD_OK;
}
 8005c6e:	2000      	movs	r0, #0
 8005c70:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 8005c72:	4629      	mov	r1, r5
 8005c74:	4620      	mov	r0, r4
 8005c76:	f000 fad5 	bl	8006224 <USBD_StdItfReq>
      break;
 8005c7a:	e7f8      	b.n	8005c6e <USBD_LL_SetupStage+0x42>
      USBD_StdEPReq(pdev, &pdev->request);
 8005c7c:	4629      	mov	r1, r5
 8005c7e:	4620      	mov	r0, r4
 8005c80:	f000 fb00 	bl	8006284 <USBD_StdEPReq>
      break;
 8005c84:	e7f3      	b.n	8005c6e <USBD_LL_SetupStage+0x42>

08005c86 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005c86:	b538      	push	{r3, r4, r5, lr}
 8005c88:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005c8a:	460d      	mov	r5, r1
 8005c8c:	bb81      	cbnz	r1, 8005cf0 <USBD_LL_DataOutStage+0x6a>
 8005c8e:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005c90:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8005c94:	2a03      	cmp	r2, #3
 8005c96:	d003      	beq.n	8005ca0 <USBD_LL_DataOutStage+0x1a>
        USBD_CtlSendStatus(pdev);
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8005c98:	2a05      	cmp	r2, #5
 8005c9a:	d022      	beq.n	8005ce2 <USBD_LL_DataOutStage+0x5c>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8005c9c:	4608      	mov	r0, r1
 8005c9e:	e031      	b.n	8005d04 <USBD_LL_DataOutStage+0x7e>
      if (pep->rem_length > pep->maxpacket)
 8005ca0:	f8d0 1160 	ldr.w	r1, [r0, #352]	; 0x160
 8005ca4:	f8d0 2164 	ldr.w	r2, [r0, #356]	; 0x164
 8005ca8:	4291      	cmp	r1, r2
 8005caa:	d90b      	bls.n	8005cc4 <USBD_LL_DataOutStage+0x3e>
        pep->rem_length -= pep->maxpacket;
 8005cac:	1a89      	subs	r1, r1, r2
 8005cae:	f8c0 1160 	str.w	r1, [r0, #352]	; 0x160
        USBD_CtlContinueRx(pdev, pdata,
 8005cb2:	428a      	cmp	r2, r1
 8005cb4:	bf8c      	ite	hi
 8005cb6:	b28a      	uxthhi	r2, r1
 8005cb8:	b292      	uxthls	r2, r2
 8005cba:	4619      	mov	r1, r3
 8005cbc:	f000 fc00 	bl	80064c0 <USBD_CtlContinueRx>
  return USBD_OK;
 8005cc0:	4628      	mov	r0, r5
 8005cc2:	e01f      	b.n	8005d04 <USBD_LL_DataOutStage+0x7e>
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005cc4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8005cc8:	691b      	ldr	r3, [r3, #16]
 8005cca:	b11b      	cbz	r3, 8005cd4 <USBD_LL_DataOutStage+0x4e>
 8005ccc:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8005cd0:	2a03      	cmp	r2, #3
 8005cd2:	d004      	beq.n	8005cde <USBD_LL_DataOutStage+0x58>
        USBD_CtlSendStatus(pdev);
 8005cd4:	4620      	mov	r0, r4
 8005cd6:	f000 fbfb 	bl	80064d0 <USBD_CtlSendStatus>
  return USBD_OK;
 8005cda:	4628      	mov	r0, r5
 8005cdc:	e012      	b.n	8005d04 <USBD_LL_DataOutStage+0x7e>
          pdev->pClass->EP0_RxReady(pdev);
 8005cde:	4798      	blx	r3
 8005ce0:	e7f8      	b.n	8005cd4 <USBD_LL_DataOutStage+0x4e>
        pdev->ep0_state = USBD_EP0_IDLE;
 8005ce2:	2100      	movs	r1, #0
 8005ce4:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8005ce8:	f000 fdb5 	bl	8006856 <USBD_LL_StallEP>
  return USBD_OK;
 8005cec:	4628      	mov	r0, r5
 8005cee:	e009      	b.n	8005d04 <USBD_LL_DataOutStage+0x7e>
  else if ((pdev->pClass->DataOut != NULL) &&
 8005cf0:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8005cf4:	699b      	ldr	r3, [r3, #24]
 8005cf6:	b133      	cbz	r3, 8005d06 <USBD_LL_DataOutStage+0x80>
 8005cf8:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8005cfc:	2a03      	cmp	r2, #3
 8005cfe:	d104      	bne.n	8005d0a <USBD_LL_DataOutStage+0x84>
    pdev->pClass->DataOut(pdev, epnum);
 8005d00:	4798      	blx	r3
  return USBD_OK;
 8005d02:	2000      	movs	r0, #0
}
 8005d04:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8005d06:	2002      	movs	r0, #2
 8005d08:	e7fc      	b.n	8005d04 <USBD_LL_DataOutStage+0x7e>
 8005d0a:	2002      	movs	r0, #2
 8005d0c:	e7fa      	b.n	8005d04 <USBD_LL_DataOutStage+0x7e>

08005d0e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005d0e:	b538      	push	{r3, r4, r5, lr}
 8005d10:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005d12:	460d      	mov	r5, r1
 8005d14:	2900      	cmp	r1, #0
 8005d16:	d152      	bne.n	8005dbe <USBD_LL_DataInStage+0xb0>
 8005d18:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005d1a:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8005d1e:	2a02      	cmp	r2, #2
 8005d20:	d00b      	beq.n	8005d3a <USBD_LL_DataInStage+0x2c>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005d22:	f032 0304 	bics.w	r3, r2, #4
 8005d26:	d102      	bne.n	8005d2e <USBD_LL_DataInStage+0x20>
          (pdev->ep0_state == USBD_EP0_IDLE))
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8005d28:	2180      	movs	r1, #128	; 0x80
 8005d2a:	f000 fd94 	bl	8006856 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8005d2e:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8005d32:	2b01      	cmp	r3, #1
 8005d34:	d03e      	beq.n	8005db4 <USBD_LL_DataInStage+0xa6>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8005d36:	4628      	mov	r0, r5
}
 8005d38:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 8005d3a:	6a01      	ldr	r1, [r0, #32]
 8005d3c:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8005d3e:	4291      	cmp	r1, r2
 8005d40:	d81b      	bhi.n	8005d7a <USBD_LL_DataInStage+0x6c>
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005d42:	69c1      	ldr	r1, [r0, #28]
 8005d44:	fbb1 f3f2 	udiv	r3, r1, r2
 8005d48:	fb02 1313 	mls	r3, r2, r3, r1
 8005d4c:	b92b      	cbnz	r3, 8005d5a <USBD_LL_DataInStage+0x4c>
 8005d4e:	428a      	cmp	r2, r1
 8005d50:	d803      	bhi.n	8005d5a <USBD_LL_DataInStage+0x4c>
            (pep->total_length >= pep->maxpacket) &&
 8005d52:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
 8005d56:	4299      	cmp	r1, r3
 8005d58:	d31c      	bcc.n	8005d94 <USBD_LL_DataInStage+0x86>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005d5a:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8005d5e:	68db      	ldr	r3, [r3, #12]
 8005d60:	b11b      	cbz	r3, 8005d6a <USBD_LL_DataInStage+0x5c>
 8005d62:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 8005d66:	2a03      	cmp	r2, #3
 8005d68:	d021      	beq.n	8005dae <USBD_LL_DataInStage+0xa0>
          USBD_LL_StallEP(pdev, 0x80U);
 8005d6a:	2180      	movs	r1, #128	; 0x80
 8005d6c:	4620      	mov	r0, r4
 8005d6e:	f000 fd72 	bl	8006856 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8005d72:	4620      	mov	r0, r4
 8005d74:	f000 fbb7 	bl	80064e6 <USBD_CtlReceiveStatus>
 8005d78:	e7d9      	b.n	8005d2e <USBD_LL_DataInStage+0x20>
        pep->rem_length -= pep->maxpacket;
 8005d7a:	1a8a      	subs	r2, r1, r2
 8005d7c:	6202      	str	r2, [r0, #32]
        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8005d7e:	b292      	uxth	r2, r2
 8005d80:	4619      	mov	r1, r3
 8005d82:	f000 fb86 	bl	8006492 <USBD_CtlContinueSendData>
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005d86:	2300      	movs	r3, #0
 8005d88:	461a      	mov	r2, r3
 8005d8a:	4619      	mov	r1, r3
 8005d8c:	4620      	mov	r0, r4
 8005d8e:	f000 fd99 	bl	80068c4 <USBD_LL_PrepareReceive>
 8005d92:	e7cc      	b.n	8005d2e <USBD_LL_DataInStage+0x20>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005d94:	2200      	movs	r2, #0
 8005d96:	4611      	mov	r1, r2
 8005d98:	f000 fb7b 	bl	8006492 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005d9c:	2100      	movs	r1, #0
 8005d9e:	f8c4 1298 	str.w	r1, [r4, #664]	; 0x298
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005da2:	460b      	mov	r3, r1
 8005da4:	460a      	mov	r2, r1
 8005da6:	4620      	mov	r0, r4
 8005da8:	f000 fd8c 	bl	80068c4 <USBD_LL_PrepareReceive>
 8005dac:	e7bf      	b.n	8005d2e <USBD_LL_DataInStage+0x20>
            pdev->pClass->EP0_TxSent(pdev);
 8005dae:	4620      	mov	r0, r4
 8005db0:	4798      	blx	r3
 8005db2:	e7da      	b.n	8005d6a <USBD_LL_DataInStage+0x5c>
      pdev->dev_test_mode = 0U;
 8005db4:	2300      	movs	r3, #0
 8005db6:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
  return USBD_OK;
 8005dba:	4628      	mov	r0, r5
 8005dbc:	e7bc      	b.n	8005d38 <USBD_LL_DataInStage+0x2a>
  else if ((pdev->pClass->DataIn != NULL) &&
 8005dbe:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8005dc2:	695b      	ldr	r3, [r3, #20]
 8005dc4:	b133      	cbz	r3, 8005dd4 <USBD_LL_DataInStage+0xc6>
 8005dc6:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8005dca:	2a03      	cmp	r2, #3
 8005dcc:	d104      	bne.n	8005dd8 <USBD_LL_DataInStage+0xca>
    pdev->pClass->DataIn(pdev, epnum);
 8005dce:	4798      	blx	r3
  return USBD_OK;
 8005dd0:	2000      	movs	r0, #0
    pdev->pClass->DataIn(pdev, epnum);
 8005dd2:	e7b1      	b.n	8005d38 <USBD_LL_DataInStage+0x2a>
    return USBD_FAIL;
 8005dd4:	2002      	movs	r0, #2
 8005dd6:	e7af      	b.n	8005d38 <USBD_LL_DataInStage+0x2a>
 8005dd8:	2002      	movs	r0, #2
 8005dda:	e7ad      	b.n	8005d38 <USBD_LL_DataInStage+0x2a>

08005ddc <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005ddc:	b570      	push	{r4, r5, r6, lr}
 8005dde:	4604      	mov	r4, r0
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005de0:	2340      	movs	r3, #64	; 0x40
 8005de2:	2200      	movs	r2, #0
 8005de4:	4611      	mov	r1, r2
 8005de6:	f000 fd23 	bl	8006830 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005dea:	2501      	movs	r5, #1
 8005dec:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005df0:	2640      	movs	r6, #64	; 0x40
 8005df2:	f8c4 6164 	str.w	r6, [r4, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005df6:	4633      	mov	r3, r6
 8005df8:	2200      	movs	r2, #0
 8005dfa:	2180      	movs	r1, #128	; 0x80
 8005dfc:	4620      	mov	r0, r4
 8005dfe:	f000 fd17 	bl	8006830 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005e02:	61a5      	str	r5, [r4, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005e04:	6266      	str	r6, [r4, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005e06:	f884 529c 	strb.w	r5, [r4, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  pdev->dev_config = 0U;
 8005e10:	6063      	str	r3, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 8005e12:	f8c4 32a4 	str.w	r3, [r4, #676]	; 0x2a4

  if (pdev->pClassData)
 8005e16:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8005e1a:	b12b      	cbz	r3, 8005e28 <USBD_LL_Reset+0x4c>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005e1c:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	2100      	movs	r1, #0
 8005e24:	4620      	mov	r0, r4
 8005e26:	4798      	blx	r3
  }

  return USBD_OK;
}
 8005e28:	2000      	movs	r0, #0
 8005e2a:	bd70      	pop	{r4, r5, r6, pc}

08005e2c <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8005e2c:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8005e2e:	2000      	movs	r0, #0
 8005e30:	4770      	bx	lr

08005e32 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8005e32:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005e36:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8005e3a:	2304      	movs	r3, #4
 8005e3c:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 8005e40:	2000      	movs	r0, #0
 8005e42:	4770      	bx	lr

08005e44 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005e44:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005e48:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 8005e4a:	bf04      	itt	eq
 8005e4c:	f890 329d 	ldrbeq.w	r3, [r0, #669]	; 0x29d
 8005e50:	f880 329c 	strbeq.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 8005e54:	2000      	movs	r0, #0
 8005e56:	4770      	bx	lr

08005e58 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005e58:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e5a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005e5e:	2b03      	cmp	r3, #3
 8005e60:	d001      	beq.n	8005e66 <USBD_LL_SOF+0xe>
      pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
}
 8005e62:	2000      	movs	r0, #0
 8005e64:	bd08      	pop	{r3, pc}
    if (pdev->pClass->SOF != NULL)
 8005e66:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8005e6a:	69db      	ldr	r3, [r3, #28]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d0f8      	beq.n	8005e62 <USBD_LL_SOF+0xa>
      pdev->pClass->SOF(pdev);
 8005e70:	4798      	blx	r3
 8005e72:	e7f6      	b.n	8005e62 <USBD_LL_SOF+0xa>

08005e74 <USBD_ParseSetupRequest>:
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
  req->bmRequest = *(uint8_t *)(pdata);
 8005e74:	780b      	ldrb	r3, [r1, #0]
 8005e76:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8005e78:	784b      	ldrb	r3, [r1, #1]
 8005e7a:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8005e7c:	78ca      	ldrb	r2, [r1, #3]
 8005e7e:	788b      	ldrb	r3, [r1, #2]
 8005e80:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8005e84:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8005e86:	794a      	ldrb	r2, [r1, #5]
 8005e88:	790b      	ldrb	r3, [r1, #4]
 8005e8a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8005e8e:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8005e90:	79ca      	ldrb	r2, [r1, #7]
 8005e92:	798b      	ldrb	r3, [r1, #6]
 8005e94:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8005e98:	80c3      	strh	r3, [r0, #6]

}
 8005e9a:	4770      	bx	lr

08005e9c <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8005e9c:	b510      	push	{r4, lr}
 8005e9e:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 8005ea0:	2180      	movs	r1, #128	; 0x80
 8005ea2:	f000 fcd8 	bl	8006856 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8005ea6:	2100      	movs	r1, #0
 8005ea8:	4620      	mov	r0, r4
 8005eaa:	f000 fcd4 	bl	8006856 <USBD_LL_StallEP>
}
 8005eae:	bd10      	pop	{r4, pc}

08005eb0 <USBD_StdDevReq>:
{
 8005eb0:	b530      	push	{r4, r5, lr}
 8005eb2:	b083      	sub	sp, #12
 8005eb4:	4605      	mov	r5, r0
 8005eb6:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005eb8:	780b      	ldrb	r3, [r1, #0]
 8005eba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005ebe:	2b20      	cmp	r3, #32
 8005ec0:	d005      	beq.n	8005ece <USBD_StdDevReq+0x1e>
 8005ec2:	2b40      	cmp	r3, #64	; 0x40
 8005ec4:	d003      	beq.n	8005ece <USBD_StdDevReq+0x1e>
 8005ec6:	b15b      	cbz	r3, 8005ee0 <USBD_StdDevReq+0x30>
      USBD_CtlError(pdev, req);
 8005ec8:	f7ff ffe8 	bl	8005e9c <USBD_CtlError>
      break;
 8005ecc:	e005      	b.n	8005eda <USBD_StdDevReq+0x2a>
      pdev->pClass->Setup(pdev, req);
 8005ece:	f8d5 32b4 	ldr.w	r3, [r5, #692]	; 0x2b4
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	4621      	mov	r1, r4
 8005ed6:	4628      	mov	r0, r5
 8005ed8:	4798      	blx	r3
}
 8005eda:	2000      	movs	r0, #0
 8005edc:	b003      	add	sp, #12
 8005ede:	bd30      	pop	{r4, r5, pc}
      switch (req->bRequest)
 8005ee0:	784b      	ldrb	r3, [r1, #1]
 8005ee2:	2b09      	cmp	r3, #9
 8005ee4:	f200 8198 	bhi.w	8006218 <USBD_StdDevReq+0x368>
 8005ee8:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005eec:	0184015f 	.word	0x0184015f
 8005ef0:	017b0196 	.word	0x017b0196
 8005ef4:	00c90196 	.word	0x00c90196
 8005ef8:	0196000a 	.word	0x0196000a
 8005efc:	00ee0140 	.word	0x00ee0140
  uint16_t len = 0U;
 8005f00:	2300      	movs	r3, #0
 8005f02:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8005f06:	884a      	ldrh	r2, [r1, #2]
 8005f08:	0a13      	lsrs	r3, r2, #8
 8005f0a:	3b01      	subs	r3, #1
 8005f0c:	2b06      	cmp	r3, #6
 8005f0e:	f200 80a4 	bhi.w	800605a <USBD_StdDevReq+0x1aa>
 8005f12:	e8df f003 	tbb	[pc, r3]
 8005f16:	1804      	.short	0x1804
 8005f18:	86a2a22c 	.word	0x86a2a22c
 8005f1c:	93          	.byte	0x93
 8005f1d:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005f1e:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f10d 0106 	add.w	r1, sp, #6
 8005f28:	7c00      	ldrb	r0, [r0, #16]
 8005f2a:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 8005f2c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8005f30:	2a00      	cmp	r2, #0
 8005f32:	f000 809f 	beq.w	8006074 <USBD_StdDevReq+0x1c4>
 8005f36:	88e3      	ldrh	r3, [r4, #6]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	f040 8092 	bne.w	8006062 <USBD_StdDevReq+0x1b2>
      (void)USBD_CtlSendStatus(pdev);
 8005f3e:	4628      	mov	r0, r5
 8005f40:	f000 fac6 	bl	80064d0 <USBD_CtlSendStatus>
 8005f44:	e7c9      	b.n	8005eda <USBD_StdDevReq+0x2a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005f46:	7c03      	ldrb	r3, [r0, #16]
 8005f48:	b943      	cbnz	r3, 8005f5c <USBD_StdDevReq+0xac>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005f4a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8005f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f50:	f10d 0006 	add.w	r0, sp, #6
 8005f54:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005f56:	2302      	movs	r3, #2
 8005f58:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8005f5a:	e7e7      	b.n	8005f2c <USBD_StdDevReq+0x7c>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005f5c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8005f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f62:	f10d 0006 	add.w	r0, sp, #6
 8005f66:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005f68:	2302      	movs	r3, #2
 8005f6a:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8005f6c:	e7de      	b.n	8005f2c <USBD_StdDevReq+0x7c>
      switch ((uint8_t)(req->wValue))
 8005f6e:	b2d2      	uxtb	r2, r2
 8005f70:	2a05      	cmp	r2, #5
 8005f72:	d852      	bhi.n	800601a <USBD_StdDevReq+0x16a>
 8005f74:	e8df f002 	tbb	[pc, r2]
 8005f78:	2a1d1003 	.word	0x2a1d1003
 8005f7c:	4437      	.short	0x4437
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005f7e:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	b123      	cbz	r3, 8005f90 <USBD_StdDevReq+0xe0>
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005f86:	f10d 0106 	add.w	r1, sp, #6
 8005f8a:	7c00      	ldrb	r0, [r0, #16]
 8005f8c:	4798      	blx	r3
  if (err != 0U)
 8005f8e:	e7cd      	b.n	8005f2c <USBD_StdDevReq+0x7c>
            USBD_CtlError(pdev, req);
 8005f90:	4621      	mov	r1, r4
 8005f92:	f7ff ff83 	bl	8005e9c <USBD_CtlError>
  if (err != 0U)
 8005f96:	e7a0      	b.n	8005eda <USBD_StdDevReq+0x2a>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005f98:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8005f9c:	689b      	ldr	r3, [r3, #8]
 8005f9e:	b123      	cbz	r3, 8005faa <USBD_StdDevReq+0xfa>
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005fa0:	f10d 0106 	add.w	r1, sp, #6
 8005fa4:	7c00      	ldrb	r0, [r0, #16]
 8005fa6:	4798      	blx	r3
  if (err != 0U)
 8005fa8:	e7c0      	b.n	8005f2c <USBD_StdDevReq+0x7c>
            USBD_CtlError(pdev, req);
 8005faa:	4621      	mov	r1, r4
 8005fac:	f7ff ff76 	bl	8005e9c <USBD_CtlError>
  if (err != 0U)
 8005fb0:	e793      	b.n	8005eda <USBD_StdDevReq+0x2a>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005fb2:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8005fb6:	68db      	ldr	r3, [r3, #12]
 8005fb8:	b123      	cbz	r3, 8005fc4 <USBD_StdDevReq+0x114>
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005fba:	f10d 0106 	add.w	r1, sp, #6
 8005fbe:	7c00      	ldrb	r0, [r0, #16]
 8005fc0:	4798      	blx	r3
  if (err != 0U)
 8005fc2:	e7b3      	b.n	8005f2c <USBD_StdDevReq+0x7c>
            USBD_CtlError(pdev, req);
 8005fc4:	4621      	mov	r1, r4
 8005fc6:	f7ff ff69 	bl	8005e9c <USBD_CtlError>
  if (err != 0U)
 8005fca:	e786      	b.n	8005eda <USBD_StdDevReq+0x2a>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005fcc:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8005fd0:	691b      	ldr	r3, [r3, #16]
 8005fd2:	b123      	cbz	r3, 8005fde <USBD_StdDevReq+0x12e>
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005fd4:	f10d 0106 	add.w	r1, sp, #6
 8005fd8:	7c00      	ldrb	r0, [r0, #16]
 8005fda:	4798      	blx	r3
  if (err != 0U)
 8005fdc:	e7a6      	b.n	8005f2c <USBD_StdDevReq+0x7c>
            USBD_CtlError(pdev, req);
 8005fde:	4621      	mov	r1, r4
 8005fe0:	f7ff ff5c 	bl	8005e9c <USBD_CtlError>
  if (err != 0U)
 8005fe4:	e779      	b.n	8005eda <USBD_StdDevReq+0x2a>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005fe6:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8005fea:	695b      	ldr	r3, [r3, #20]
 8005fec:	b123      	cbz	r3, 8005ff8 <USBD_StdDevReq+0x148>
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005fee:	f10d 0106 	add.w	r1, sp, #6
 8005ff2:	7c00      	ldrb	r0, [r0, #16]
 8005ff4:	4798      	blx	r3
  if (err != 0U)
 8005ff6:	e799      	b.n	8005f2c <USBD_StdDevReq+0x7c>
            USBD_CtlError(pdev, req);
 8005ff8:	4621      	mov	r1, r4
 8005ffa:	f7ff ff4f 	bl	8005e9c <USBD_CtlError>
  if (err != 0U)
 8005ffe:	e76c      	b.n	8005eda <USBD_StdDevReq+0x2a>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006000:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8006004:	699b      	ldr	r3, [r3, #24]
 8006006:	b123      	cbz	r3, 8006012 <USBD_StdDevReq+0x162>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006008:	f10d 0106 	add.w	r1, sp, #6
 800600c:	7c00      	ldrb	r0, [r0, #16]
 800600e:	4798      	blx	r3
  if (err != 0U)
 8006010:	e78c      	b.n	8005f2c <USBD_StdDevReq+0x7c>
            USBD_CtlError(pdev, req);
 8006012:	4621      	mov	r1, r4
 8006014:	f7ff ff42 	bl	8005e9c <USBD_CtlError>
  if (err != 0U)
 8006018:	e75f      	b.n	8005eda <USBD_StdDevReq+0x2a>
          USBD_CtlError(pdev, req);
 800601a:	4621      	mov	r1, r4
 800601c:	f7ff ff3e 	bl	8005e9c <USBD_CtlError>
  if (err != 0U)
 8006020:	e75b      	b.n	8005eda <USBD_StdDevReq+0x2a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006022:	7c03      	ldrb	r3, [r0, #16]
 8006024:	b933      	cbnz	r3, 8006034 <USBD_StdDevReq+0x184>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006026:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800602a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800602c:	f10d 0006 	add.w	r0, sp, #6
 8006030:	4798      	blx	r3
  if (err != 0U)
 8006032:	e77b      	b.n	8005f2c <USBD_StdDevReq+0x7c>
        USBD_CtlError(pdev, req);
 8006034:	4621      	mov	r1, r4
 8006036:	f7ff ff31 	bl	8005e9c <USBD_CtlError>
  if (err != 0U)
 800603a:	e74e      	b.n	8005eda <USBD_StdDevReq+0x2a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800603c:	7c03      	ldrb	r3, [r0, #16]
 800603e:	b943      	cbnz	r3, 8006052 <USBD_StdDevReq+0x1a2>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006040:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8006044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006046:	f10d 0006 	add.w	r0, sp, #6
 800604a:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800604c:	2307      	movs	r3, #7
 800604e:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8006050:	e76c      	b.n	8005f2c <USBD_StdDevReq+0x7c>
        USBD_CtlError(pdev, req);
 8006052:	4621      	mov	r1, r4
 8006054:	f7ff ff22 	bl	8005e9c <USBD_CtlError>
  if (err != 0U)
 8006058:	e73f      	b.n	8005eda <USBD_StdDevReq+0x2a>
      USBD_CtlError(pdev, req);
 800605a:	4621      	mov	r1, r4
 800605c:	f7ff ff1e 	bl	8005e9c <USBD_CtlError>
    return;
 8006060:	e73b      	b.n	8005eda <USBD_StdDevReq+0x2a>
      len = MIN(len, req->wLength);
 8006062:	429a      	cmp	r2, r3
 8006064:	bf28      	it	cs
 8006066:	461a      	movcs	r2, r3
 8006068:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800606c:	4601      	mov	r1, r0
 800606e:	4628      	mov	r0, r5
 8006070:	f000 fa02 	bl	8006478 <USBD_CtlSendData>
    if (req->wLength == 0U)
 8006074:	88e3      	ldrh	r3, [r4, #6]
 8006076:	2b00      	cmp	r3, #0
 8006078:	f47f af2f 	bne.w	8005eda <USBD_StdDevReq+0x2a>
 800607c:	e75f      	b.n	8005f3e <USBD_StdDevReq+0x8e>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800607e:	888b      	ldrh	r3, [r1, #4]
 8006080:	b9eb      	cbnz	r3, 80060be <USBD_StdDevReq+0x20e>
 8006082:	88cb      	ldrh	r3, [r1, #6]
 8006084:	b9db      	cbnz	r3, 80060be <USBD_StdDevReq+0x20e>
 8006086:	884b      	ldrh	r3, [r1, #2]
 8006088:	2b7f      	cmp	r3, #127	; 0x7f
 800608a:	d818      	bhi.n	80060be <USBD_StdDevReq+0x20e>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800608c:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8006090:	2a03      	cmp	r2, #3
 8006092:	d00d      	beq.n	80060b0 <USBD_StdDevReq+0x200>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006094:	b2dc      	uxtb	r4, r3
      pdev->dev_address = dev_addr;
 8006096:	f880 429e 	strb.w	r4, [r0, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800609a:	4621      	mov	r1, r4
 800609c:	f000 fc02 	bl	80068a4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80060a0:	4628      	mov	r0, r5
 80060a2:	f000 fa15 	bl	80064d0 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 80060a6:	b134      	cbz	r4, 80060b6 <USBD_StdDevReq+0x206>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80060a8:	2302      	movs	r3, #2
 80060aa:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 80060ae:	e714      	b.n	8005eda <USBD_StdDevReq+0x2a>
      USBD_CtlError(pdev, req);
 80060b0:	f7ff fef4 	bl	8005e9c <USBD_CtlError>
 80060b4:	e711      	b.n	8005eda <USBD_StdDevReq+0x2a>
        pdev->dev_state = USBD_STATE_DEFAULT;
 80060b6:	2301      	movs	r3, #1
 80060b8:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 80060bc:	e70d      	b.n	8005eda <USBD_StdDevReq+0x2a>
    USBD_CtlError(pdev, req);
 80060be:	4621      	mov	r1, r4
 80060c0:	4628      	mov	r0, r5
 80060c2:	f7ff feeb 	bl	8005e9c <USBD_CtlError>
 80060c6:	e708      	b.n	8005eda <USBD_StdDevReq+0x2a>
  cfgidx = (uint8_t)(req->wValue);
 80060c8:	788b      	ldrb	r3, [r1, #2]
 80060ca:	4a55      	ldr	r2, [pc, #340]	; (8006220 <USBD_StdDevReq+0x370>)
 80060cc:	7013      	strb	r3, [r2, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80060ce:	2b01      	cmp	r3, #1
 80060d0:	d80d      	bhi.n	80060ee <USBD_StdDevReq+0x23e>
    switch (pdev->dev_state)
 80060d2:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80060d6:	2a02      	cmp	r2, #2
 80060d8:	d00c      	beq.n	80060f4 <USBD_StdDevReq+0x244>
 80060da:	2a03      	cmp	r2, #3
 80060dc:	d020      	beq.n	8006120 <USBD_StdDevReq+0x270>
        USBD_CtlError(pdev, req);
 80060de:	f7ff fedd 	bl	8005e9c <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80060e2:	4b4f      	ldr	r3, [pc, #316]	; (8006220 <USBD_StdDevReq+0x370>)
 80060e4:	7819      	ldrb	r1, [r3, #0]
 80060e6:	4628      	mov	r0, r5
 80060e8:	f7ff fd99 	bl	8005c1e <USBD_ClrClassConfig>
        break;
 80060ec:	e6f5      	b.n	8005eda <USBD_StdDevReq+0x2a>
    USBD_CtlError(pdev, req);
 80060ee:	f7ff fed5 	bl	8005e9c <USBD_CtlError>
 80060f2:	e6f2      	b.n	8005eda <USBD_StdDevReq+0x2a>
        if (cfgidx)
 80060f4:	b18b      	cbz	r3, 800611a <USBD_StdDevReq+0x26a>
          pdev->dev_config = cfgidx;
 80060f6:	2101      	movs	r1, #1
 80060f8:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80060fa:	2303      	movs	r3, #3
 80060fc:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006100:	f7ff fd81 	bl	8005c06 <USBD_SetClassConfig>
 8006104:	2802      	cmp	r0, #2
 8006106:	d003      	beq.n	8006110 <USBD_StdDevReq+0x260>
          USBD_CtlSendStatus(pdev);
 8006108:	4628      	mov	r0, r5
 800610a:	f000 f9e1 	bl	80064d0 <USBD_CtlSendStatus>
 800610e:	e6e4      	b.n	8005eda <USBD_StdDevReq+0x2a>
            USBD_CtlError(pdev, req);
 8006110:	4621      	mov	r1, r4
 8006112:	4628      	mov	r0, r5
 8006114:	f7ff fec2 	bl	8005e9c <USBD_CtlError>
            return;
 8006118:	e6df      	b.n	8005eda <USBD_StdDevReq+0x2a>
          USBD_CtlSendStatus(pdev);
 800611a:	f000 f9d9 	bl	80064d0 <USBD_CtlSendStatus>
 800611e:	e6dc      	b.n	8005eda <USBD_StdDevReq+0x2a>
        if (cfgidx == 0U)
 8006120:	b18b      	cbz	r3, 8006146 <USBD_StdDevReq+0x296>
        else if (cfgidx != pdev->dev_config)
 8006122:	6841      	ldr	r1, [r0, #4]
 8006124:	2901      	cmp	r1, #1
 8006126:	d01e      	beq.n	8006166 <USBD_StdDevReq+0x2b6>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006128:	b2c9      	uxtb	r1, r1
 800612a:	f7ff fd78 	bl	8005c1e <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800612e:	4b3c      	ldr	r3, [pc, #240]	; (8006220 <USBD_StdDevReq+0x370>)
 8006130:	7819      	ldrb	r1, [r3, #0]
 8006132:	6069      	str	r1, [r5, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006134:	4628      	mov	r0, r5
 8006136:	f7ff fd66 	bl	8005c06 <USBD_SetClassConfig>
 800613a:	2802      	cmp	r0, #2
 800613c:	d00e      	beq.n	800615c <USBD_StdDevReq+0x2ac>
          USBD_CtlSendStatus(pdev);
 800613e:	4628      	mov	r0, r5
 8006140:	f000 f9c6 	bl	80064d0 <USBD_CtlSendStatus>
 8006144:	e6c9      	b.n	8005eda <USBD_StdDevReq+0x2a>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006146:	2302      	movs	r3, #2
 8006148:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800614c:	2100      	movs	r1, #0
 800614e:	6041      	str	r1, [r0, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8006150:	f7ff fd65 	bl	8005c1e <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8006154:	4628      	mov	r0, r5
 8006156:	f000 f9bb 	bl	80064d0 <USBD_CtlSendStatus>
 800615a:	e6be      	b.n	8005eda <USBD_StdDevReq+0x2a>
            USBD_CtlError(pdev, req);
 800615c:	4621      	mov	r1, r4
 800615e:	4628      	mov	r0, r5
 8006160:	f7ff fe9c 	bl	8005e9c <USBD_CtlError>
            return;
 8006164:	e6b9      	b.n	8005eda <USBD_StdDevReq+0x2a>
          USBD_CtlSendStatus(pdev);
 8006166:	f000 f9b3 	bl	80064d0 <USBD_CtlSendStatus>
 800616a:	e6b6      	b.n	8005eda <USBD_StdDevReq+0x2a>
  if (req->wLength != 1U)
 800616c:	88cb      	ldrh	r3, [r1, #6]
 800616e:	2b01      	cmp	r3, #1
 8006170:	d10a      	bne.n	8006188 <USBD_StdDevReq+0x2d8>
    switch (pdev->dev_state)
 8006172:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006176:	2b02      	cmp	r3, #2
 8006178:	d909      	bls.n	800618e <USBD_StdDevReq+0x2de>
 800617a:	2b03      	cmp	r3, #3
 800617c:	d108      	bne.n	8006190 <USBD_StdDevReq+0x2e0>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800617e:	2201      	movs	r2, #1
 8006180:	1d01      	adds	r1, r0, #4
 8006182:	f000 f979 	bl	8006478 <USBD_CtlSendData>
        break;
 8006186:	e6a8      	b.n	8005eda <USBD_StdDevReq+0x2a>
    USBD_CtlError(pdev, req);
 8006188:	f7ff fe88 	bl	8005e9c <USBD_CtlError>
 800618c:	e6a5      	b.n	8005eda <USBD_StdDevReq+0x2a>
    switch (pdev->dev_state)
 800618e:	b923      	cbnz	r3, 800619a <USBD_StdDevReq+0x2ea>
        USBD_CtlError(pdev, req);
 8006190:	4621      	mov	r1, r4
 8006192:	4628      	mov	r0, r5
 8006194:	f7ff fe82 	bl	8005e9c <USBD_CtlError>
        break;
 8006198:	e69f      	b.n	8005eda <USBD_StdDevReq+0x2a>
        pdev->dev_default_config = 0U;
 800619a:	4601      	mov	r1, r0
 800619c:	2300      	movs	r3, #0
 800619e:	f841 3f08 	str.w	r3, [r1, #8]!
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80061a2:	2201      	movs	r2, #1
 80061a4:	f000 f968 	bl	8006478 <USBD_CtlSendData>
        break;
 80061a8:	e697      	b.n	8005eda <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 80061aa:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80061ae:	3b01      	subs	r3, #1
 80061b0:	2b02      	cmp	r3, #2
 80061b2:	d813      	bhi.n	80061dc <USBD_StdDevReq+0x32c>
      if (req->wLength != 0x2U)
 80061b4:	88cb      	ldrh	r3, [r1, #6]
 80061b6:	2b02      	cmp	r3, #2
 80061b8:	d10d      	bne.n	80061d6 <USBD_StdDevReq+0x326>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80061ba:	2301      	movs	r3, #1
 80061bc:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup)
 80061be:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 80061c2:	b10b      	cbz	r3, 80061c8 <USBD_StdDevReq+0x318>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80061c4:	2303      	movs	r3, #3
 80061c6:	60c3      	str	r3, [r0, #12]
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80061c8:	2202      	movs	r2, #2
 80061ca:	f105 010c 	add.w	r1, r5, #12
 80061ce:	4628      	mov	r0, r5
 80061d0:	f000 f952 	bl	8006478 <USBD_CtlSendData>
      break;
 80061d4:	e681      	b.n	8005eda <USBD_StdDevReq+0x2a>
        USBD_CtlError(pdev, req);
 80061d6:	f7ff fe61 	bl	8005e9c <USBD_CtlError>
        break;
 80061da:	e67e      	b.n	8005eda <USBD_StdDevReq+0x2a>
      USBD_CtlError(pdev, req);
 80061dc:	f7ff fe5e 	bl	8005e9c <USBD_CtlError>
      break;
 80061e0:	e67b      	b.n	8005eda <USBD_StdDevReq+0x2a>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80061e2:	884b      	ldrh	r3, [r1, #2]
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	f47f ae78 	bne.w	8005eda <USBD_StdDevReq+0x2a>
    pdev->dev_remote_wakeup = 1U;
 80061ea:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80061ee:	f000 f96f 	bl	80064d0 <USBD_CtlSendStatus>
 80061f2:	e672      	b.n	8005eda <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 80061f4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80061f8:	3b01      	subs	r3, #1
 80061fa:	2b02      	cmp	r3, #2
 80061fc:	d809      	bhi.n	8006212 <USBD_StdDevReq+0x362>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80061fe:	884b      	ldrh	r3, [r1, #2]
 8006200:	2b01      	cmp	r3, #1
 8006202:	f47f ae6a 	bne.w	8005eda <USBD_StdDevReq+0x2a>
        pdev->dev_remote_wakeup = 0U;
 8006206:	2300      	movs	r3, #0
 8006208:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800620c:	f000 f960 	bl	80064d0 <USBD_CtlSendStatus>
 8006210:	e663      	b.n	8005eda <USBD_StdDevReq+0x2a>
      USBD_CtlError(pdev, req);
 8006212:	f7ff fe43 	bl	8005e9c <USBD_CtlError>
      break;
 8006216:	e660      	b.n	8005eda <USBD_StdDevReq+0x2a>
          USBD_CtlError(pdev, req);
 8006218:	f7ff fe40 	bl	8005e9c <USBD_CtlError>
          break;
 800621c:	e65d      	b.n	8005eda <USBD_StdDevReq+0x2a>
 800621e:	bf00      	nop
 8006220:	20001790 	.word	0x20001790

08006224 <USBD_StdItfReq>:
{
 8006224:	b538      	push	{r3, r4, r5, lr}
 8006226:	4605      	mov	r5, r0
 8006228:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800622a:	780b      	ldrb	r3, [r1, #0]
 800622c:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8006230:	2a40      	cmp	r2, #64	; 0x40
 8006232:	d006      	beq.n	8006242 <USBD_StdItfReq+0x1e>
 8006234:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006238:	d003      	beq.n	8006242 <USBD_StdItfReq+0x1e>
      USBD_CtlError(pdev, req);
 800623a:	f7ff fe2f 	bl	8005e9c <USBD_CtlError>
}
 800623e:	2000      	movs	r0, #0
 8006240:	bd38      	pop	{r3, r4, r5, pc}
      switch (pdev->dev_state)
 8006242:	f895 329c 	ldrb.w	r3, [r5, #668]	; 0x29c
 8006246:	3b01      	subs	r3, #1
 8006248:	2b02      	cmp	r3, #2
 800624a:	d816      	bhi.n	800627a <USBD_StdItfReq+0x56>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800624c:	7923      	ldrb	r3, [r4, #4]
 800624e:	2b01      	cmp	r3, #1
 8006250:	d80e      	bhi.n	8006270 <USBD_StdItfReq+0x4c>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006252:	f8d5 32b4 	ldr.w	r3, [r5, #692]	; 0x2b4
 8006256:	689b      	ldr	r3, [r3, #8]
 8006258:	4621      	mov	r1, r4
 800625a:	4628      	mov	r0, r5
 800625c:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 800625e:	88e3      	ldrh	r3, [r4, #6]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d1ec      	bne.n	800623e <USBD_StdItfReq+0x1a>
 8006264:	2800      	cmp	r0, #0
 8006266:	d1ea      	bne.n	800623e <USBD_StdItfReq+0x1a>
              USBD_CtlSendStatus(pdev);
 8006268:	4628      	mov	r0, r5
 800626a:	f000 f931 	bl	80064d0 <USBD_CtlSendStatus>
 800626e:	e7e6      	b.n	800623e <USBD_StdItfReq+0x1a>
            USBD_CtlError(pdev, req);
 8006270:	4621      	mov	r1, r4
 8006272:	4628      	mov	r0, r5
 8006274:	f7ff fe12 	bl	8005e9c <USBD_CtlError>
 8006278:	e7e1      	b.n	800623e <USBD_StdItfReq+0x1a>
          USBD_CtlError(pdev, req);
 800627a:	4621      	mov	r1, r4
 800627c:	4628      	mov	r0, r5
 800627e:	f7ff fe0d 	bl	8005e9c <USBD_CtlError>
          break;
 8006282:	e7dc      	b.n	800623e <USBD_StdItfReq+0x1a>

08006284 <USBD_StdEPReq>:
{
 8006284:	b538      	push	{r3, r4, r5, lr}
 8006286:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006288:	780b      	ldrb	r3, [r1, #0]
 800628a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800628e:	2b20      	cmp	r3, #32
 8006290:	d005      	beq.n	800629e <USBD_StdEPReq+0x1a>
 8006292:	2b40      	cmp	r3, #64	; 0x40
 8006294:	d003      	beq.n	800629e <USBD_StdEPReq+0x1a>
 8006296:	b14b      	cbz	r3, 80062ac <USBD_StdEPReq+0x28>
      USBD_CtlError(pdev, req);
 8006298:	f7ff fe00 	bl	8005e9c <USBD_CtlError>
      break;
 800629c:	e004      	b.n	80062a8 <USBD_StdEPReq+0x24>
      pdev->pClass->Setup(pdev, req);
 800629e:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 80062a2:	689b      	ldr	r3, [r3, #8]
 80062a4:	4620      	mov	r0, r4
 80062a6:	4798      	blx	r3
}
 80062a8:	2000      	movs	r0, #0
 80062aa:	bd38      	pop	{r3, r4, r5, pc}
  ep_addr  = LOBYTE(req->wIndex);
 80062ac:	888a      	ldrh	r2, [r1, #4]
 80062ae:	b2d0      	uxtb	r0, r2
      switch (req->bRequest)
 80062b0:	784b      	ldrb	r3, [r1, #1]
 80062b2:	2b01      	cmp	r3, #1
 80062b4:	d031      	beq.n	800631a <USBD_StdEPReq+0x96>
 80062b6:	2b03      	cmp	r3, #3
 80062b8:	d005      	beq.n	80062c6 <USBD_StdEPReq+0x42>
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d056      	beq.n	800636c <USBD_StdEPReq+0xe8>
          USBD_CtlError(pdev, req);
 80062be:	4620      	mov	r0, r4
 80062c0:	f7ff fdec 	bl	8005e9c <USBD_CtlError>
          break;
 80062c4:	e7f0      	b.n	80062a8 <USBD_StdEPReq+0x24>
          switch (pdev->dev_state)
 80062c6:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 80062ca:	2b02      	cmp	r3, #2
 80062cc:	d005      	beq.n	80062da <USBD_StdEPReq+0x56>
 80062ce:	2b03      	cmp	r3, #3
 80062d0:	d013      	beq.n	80062fa <USBD_StdEPReq+0x76>
              USBD_CtlError(pdev, req);
 80062d2:	4620      	mov	r0, r4
 80062d4:	f7ff fde2 	bl	8005e9c <USBD_CtlError>
              break;
 80062d8:	e7e6      	b.n	80062a8 <USBD_StdEPReq+0x24>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80062da:	f010 0f7f 	tst.w	r0, #127	; 0x7f
 80062de:	d008      	beq.n	80062f2 <USBD_StdEPReq+0x6e>
                USBD_LL_StallEP(pdev, ep_addr);
 80062e0:	4601      	mov	r1, r0
 80062e2:	4620      	mov	r0, r4
 80062e4:	f000 fab7 	bl	8006856 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80062e8:	2180      	movs	r1, #128	; 0x80
 80062ea:	4620      	mov	r0, r4
 80062ec:	f000 fab3 	bl	8006856 <USBD_LL_StallEP>
 80062f0:	e7da      	b.n	80062a8 <USBD_StdEPReq+0x24>
                USBD_CtlError(pdev, req);
 80062f2:	4620      	mov	r0, r4
 80062f4:	f7ff fdd2 	bl	8005e9c <USBD_CtlError>
 80062f8:	e7d6      	b.n	80062a8 <USBD_StdEPReq+0x24>
              if (req->wValue == USB_FEATURE_EP_HALT)
 80062fa:	884b      	ldrh	r3, [r1, #2]
 80062fc:	b923      	cbnz	r3, 8006308 <USBD_StdEPReq+0x84>
                if ((ep_addr != 0x00U) &&
 80062fe:	f010 0f7f 	tst.w	r0, #127	; 0x7f
 8006302:	d001      	beq.n	8006308 <USBD_StdEPReq+0x84>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006304:	88cb      	ldrh	r3, [r1, #6]
 8006306:	b11b      	cbz	r3, 8006310 <USBD_StdEPReq+0x8c>
              USBD_CtlSendStatus(pdev);
 8006308:	4620      	mov	r0, r4
 800630a:	f000 f8e1 	bl	80064d0 <USBD_CtlSendStatus>
              break;
 800630e:	e7cb      	b.n	80062a8 <USBD_StdEPReq+0x24>
                  USBD_LL_StallEP(pdev, ep_addr);
 8006310:	4601      	mov	r1, r0
 8006312:	4620      	mov	r0, r4
 8006314:	f000 fa9f 	bl	8006856 <USBD_LL_StallEP>
 8006318:	e7f6      	b.n	8006308 <USBD_StdEPReq+0x84>
          switch (pdev->dev_state)
 800631a:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 800631e:	2b02      	cmp	r3, #2
 8006320:	d005      	beq.n	800632e <USBD_StdEPReq+0xaa>
 8006322:	2b03      	cmp	r3, #3
 8006324:	d013      	beq.n	800634e <USBD_StdEPReq+0xca>
              USBD_CtlError(pdev, req);
 8006326:	4620      	mov	r0, r4
 8006328:	f7ff fdb8 	bl	8005e9c <USBD_CtlError>
              break;
 800632c:	e7bc      	b.n	80062a8 <USBD_StdEPReq+0x24>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800632e:	f010 0f7f 	tst.w	r0, #127	; 0x7f
 8006332:	d008      	beq.n	8006346 <USBD_StdEPReq+0xc2>
                USBD_LL_StallEP(pdev, ep_addr);
 8006334:	4601      	mov	r1, r0
 8006336:	4620      	mov	r0, r4
 8006338:	f000 fa8d 	bl	8006856 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800633c:	2180      	movs	r1, #128	; 0x80
 800633e:	4620      	mov	r0, r4
 8006340:	f000 fa89 	bl	8006856 <USBD_LL_StallEP>
 8006344:	e7b0      	b.n	80062a8 <USBD_StdEPReq+0x24>
                USBD_CtlError(pdev, req);
 8006346:	4620      	mov	r0, r4
 8006348:	f7ff fda8 	bl	8005e9c <USBD_CtlError>
 800634c:	e7ac      	b.n	80062a8 <USBD_StdEPReq+0x24>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800634e:	884b      	ldrh	r3, [r1, #2]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d1a9      	bne.n	80062a8 <USBD_StdEPReq+0x24>
                if ((ep_addr & 0x7FU) != 0x00U)
 8006354:	f010 0f7f 	tst.w	r0, #127	; 0x7f
 8006358:	d103      	bne.n	8006362 <USBD_StdEPReq+0xde>
                USBD_CtlSendStatus(pdev);
 800635a:	4620      	mov	r0, r4
 800635c:	f000 f8b8 	bl	80064d0 <USBD_CtlSendStatus>
 8006360:	e7a2      	b.n	80062a8 <USBD_StdEPReq+0x24>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8006362:	4601      	mov	r1, r0
 8006364:	4620      	mov	r0, r4
 8006366:	f000 fa7e 	bl	8006866 <USBD_LL_ClearStallEP>
 800636a:	e7f6      	b.n	800635a <USBD_StdEPReq+0xd6>
          switch (pdev->dev_state)
 800636c:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8006370:	2b02      	cmp	r3, #2
 8006372:	d005      	beq.n	8006380 <USBD_StdEPReq+0xfc>
 8006374:	2b03      	cmp	r3, #3
 8006376:	d018      	beq.n	80063aa <USBD_StdEPReq+0x126>
              USBD_CtlError(pdev, req);
 8006378:	4620      	mov	r0, r4
 800637a:	f7ff fd8f 	bl	8005e9c <USBD_CtlError>
              break;
 800637e:	e793      	b.n	80062a8 <USBD_StdEPReq+0x24>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006380:	f010 0f7f 	tst.w	r0, #127	; 0x7f
 8006384:	d003      	beq.n	800638e <USBD_StdEPReq+0x10a>
                USBD_CtlError(pdev, req);
 8006386:	4620      	mov	r0, r4
 8006388:	f7ff fd88 	bl	8005e9c <USBD_CtlError>
                break;
 800638c:	e78c      	b.n	80062a8 <USBD_StdEPReq+0x24>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800638e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8006392:	bf14      	ite	ne
 8006394:	f104 0114 	addne.w	r1, r4, #20
 8006398:	f504 71aa 	addeq.w	r1, r4, #340	; 0x154
              pep->status = 0x0000U;
 800639c:	2300      	movs	r3, #0
 800639e:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80063a0:	2202      	movs	r2, #2
 80063a2:	4620      	mov	r0, r4
 80063a4:	f000 f868 	bl	8006478 <USBD_CtlSendData>
              break;
 80063a8:	e77e      	b.n	80062a8 <USBD_StdEPReq+0x24>
              if ((ep_addr & 0x80U) == 0x80U)
 80063aa:	f012 0f80 	tst.w	r2, #128	; 0x80
 80063ae:	d11b      	bne.n	80063e8 <USBD_StdEPReq+0x164>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80063b0:	f000 030f 	and.w	r3, r0, #15
 80063b4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80063b8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80063bc:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 80063c0:	b333      	cbz	r3, 8006410 <USBD_StdEPReq+0x18c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80063c2:	f000 037f 	and.w	r3, r0, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80063c6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80063ca:	eb04 0583 	add.w	r5, r4, r3, lsl #2
 80063ce:	f505 75aa 	add.w	r5, r5, #340	; 0x154
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80063d2:	f010 0f7f 	tst.w	r0, #127	; 0x7f
 80063d6:	d11f      	bne.n	8006418 <USBD_StdEPReq+0x194>
                pep->status = 0x0000U;
 80063d8:	2300      	movs	r3, #0
 80063da:	602b      	str	r3, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80063dc:	2202      	movs	r2, #2
 80063de:	4629      	mov	r1, r5
 80063e0:	4620      	mov	r0, r4
 80063e2:	f000 f849 	bl	8006478 <USBD_CtlSendData>
              break;
 80063e6:	e75f      	b.n	80062a8 <USBD_StdEPReq+0x24>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80063e8:	f000 030f 	and.w	r3, r0, #15
 80063ec:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80063f0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80063f4:	699b      	ldr	r3, [r3, #24]
 80063f6:	b13b      	cbz	r3, 8006408 <USBD_StdEPReq+0x184>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80063f8:	f000 057f 	and.w	r5, r0, #127	; 0x7f
 80063fc:	3501      	adds	r5, #1
 80063fe:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8006402:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8006406:	e7e4      	b.n	80063d2 <USBD_StdEPReq+0x14e>
                  USBD_CtlError(pdev, req);
 8006408:	4620      	mov	r0, r4
 800640a:	f7ff fd47 	bl	8005e9c <USBD_CtlError>
                  break;
 800640e:	e74b      	b.n	80062a8 <USBD_StdEPReq+0x24>
                  USBD_CtlError(pdev, req);
 8006410:	4620      	mov	r0, r4
 8006412:	f7ff fd43 	bl	8005e9c <USBD_CtlError>
                  break;
 8006416:	e747      	b.n	80062a8 <USBD_StdEPReq+0x24>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8006418:	4601      	mov	r1, r0
 800641a:	4620      	mov	r0, r4
 800641c:	f000 fa2b 	bl	8006876 <USBD_LL_IsStallEP>
 8006420:	b110      	cbz	r0, 8006428 <USBD_StdEPReq+0x1a4>
                pep->status = 0x0001U;
 8006422:	2301      	movs	r3, #1
 8006424:	602b      	str	r3, [r5, #0]
 8006426:	e7d9      	b.n	80063dc <USBD_StdEPReq+0x158>
                pep->status = 0x0000U;
 8006428:	2300      	movs	r3, #0
 800642a:	602b      	str	r3, [r5, #0]
 800642c:	e7d6      	b.n	80063dc <USBD_StdEPReq+0x158>

0800642e <USBD_GetString>:
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;

  if (desc != NULL)
 800642e:	b310      	cbz	r0, 8006476 <USBD_GetString+0x48>
{
 8006430:	b510      	push	{r4, lr}
 8006432:	4684      	mov	ip, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 8006434:	7803      	ldrb	r3, [r0, #0]
 8006436:	b143      	cbz	r3, 800644a <USBD_GetString+0x1c>
 8006438:	f1c0 0e01 	rsb	lr, r0, #1
  {
    len++;
 800643c:	eb00 030e 	add.w	r3, r0, lr
 8006440:	b2db      	uxtb	r3, r3
  while (*buf != '\0')
 8006442:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 8006446:	2c00      	cmp	r4, #0
 8006448:	d1f8      	bne.n	800643c <USBD_GetString+0xe>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800644a:	005b      	lsls	r3, r3, #1
 800644c:	3302      	adds	r3, #2
 800644e:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8006450:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006452:	2303      	movs	r3, #3
 8006454:	704b      	strb	r3, [r1, #1]
    while (*desc != '\0')
 8006456:	f89c 0000 	ldrb.w	r0, [ip]
 800645a:	b158      	cbz	r0, 8006474 <USBD_GetString+0x46>
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800645c:	2302      	movs	r3, #2
      unicode[idx++] =  0U;
 800645e:	2400      	movs	r4, #0
      unicode[idx++] = *desc++;
 8006460:	1c5a      	adds	r2, r3, #1
 8006462:	b2d2      	uxtb	r2, r2
 8006464:	54c8      	strb	r0, [r1, r3]
      unicode[idx++] =  0U;
 8006466:	3302      	adds	r3, #2
 8006468:	b2db      	uxtb	r3, r3
 800646a:	548c      	strb	r4, [r1, r2]
    while (*desc != '\0')
 800646c:	f81c 0f01 	ldrb.w	r0, [ip, #1]!
 8006470:	2800      	cmp	r0, #0
 8006472:	d1f5      	bne.n	8006460 <USBD_GetString+0x32>
}
 8006474:	bd10      	pop	{r4, pc}
 8006476:	4770      	bx	lr

08006478 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8006478:	b508      	push	{r3, lr}
 800647a:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800647c:	2202      	movs	r2, #2
 800647e:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006482:	61c3      	str	r3, [r0, #28]
  pdev->ep_in[0].rem_length   = len;
 8006484:	6203      	str	r3, [r0, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006486:	460a      	mov	r2, r1
 8006488:	2100      	movs	r1, #0
 800648a:	f000 fa13 	bl	80068b4 <USBD_LL_Transmit>

  return USBD_OK;
}
 800648e:	2000      	movs	r0, #0
 8006490:	bd08      	pop	{r3, pc}

08006492 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8006492:	b508      	push	{r3, lr}
 8006494:	4613      	mov	r3, r2
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006496:	460a      	mov	r2, r1
 8006498:	2100      	movs	r1, #0
 800649a:	f000 fa0b 	bl	80068b4 <USBD_LL_Transmit>

  return USBD_OK;
}
 800649e:	2000      	movs	r0, #0
 80064a0:	bd08      	pop	{r3, pc}

080064a2 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80064a2:	b508      	push	{r3, lr}
 80064a4:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80064a6:	2203      	movs	r2, #3
 80064a8:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80064ac:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80064b0:	f8c0 3160 	str.w	r3, [r0, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80064b4:	460a      	mov	r2, r1
 80064b6:	2100      	movs	r1, #0
 80064b8:	f000 fa04 	bl	80068c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80064bc:	2000      	movs	r0, #0
 80064be:	bd08      	pop	{r3, pc}

080064c0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80064c0:	b508      	push	{r3, lr}
 80064c2:	4613      	mov	r3, r2
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80064c4:	460a      	mov	r2, r1
 80064c6:	2100      	movs	r1, #0
 80064c8:	f000 f9fc 	bl	80068c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80064cc:	2000      	movs	r0, #0
 80064ce:	bd08      	pop	{r3, pc}

080064d0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80064d0:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80064d2:	2304      	movs	r3, #4
 80064d4:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80064d8:	2300      	movs	r3, #0
 80064da:	461a      	mov	r2, r3
 80064dc:	4619      	mov	r1, r3
 80064de:	f000 f9e9 	bl	80068b4 <USBD_LL_Transmit>

  return USBD_OK;
}
 80064e2:	2000      	movs	r0, #0
 80064e4:	bd08      	pop	{r3, pc}

080064e6 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80064e6:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80064e8:	2305      	movs	r3, #5
 80064ea:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80064ee:	2300      	movs	r3, #0
 80064f0:	461a      	mov	r2, r3
 80064f2:	4619      	mov	r1, r3
 80064f4:	f000 f9e6 	bl	80068c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80064f8:	2000      	movs	r0, #0
 80064fa:	bd08      	pop	{r3, pc}

080064fc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80064fc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80064fe:	2200      	movs	r2, #0
 8006500:	490f      	ldr	r1, [pc, #60]	; (8006540 <MX_USB_DEVICE_Init+0x44>)
 8006502:	4810      	ldr	r0, [pc, #64]	; (8006544 <MX_USB_DEVICE_Init+0x48>)
 8006504:	f7ff fb5c 	bl	8005bc0 <USBD_Init>
 8006508:	b970      	cbnz	r0, 8006528 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800650a:	490f      	ldr	r1, [pc, #60]	; (8006548 <MX_USB_DEVICE_Init+0x4c>)
 800650c:	480d      	ldr	r0, [pc, #52]	; (8006544 <MX_USB_DEVICE_Init+0x48>)
 800650e:	f7ff fb6e 	bl	8005bee <USBD_RegisterClass>
 8006512:	b960      	cbnz	r0, 800652e <MX_USB_DEVICE_Init+0x32>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006514:	490d      	ldr	r1, [pc, #52]	; (800654c <MX_USB_DEVICE_Init+0x50>)
 8006516:	480b      	ldr	r0, [pc, #44]	; (8006544 <MX_USB_DEVICE_Init+0x48>)
 8006518:	f7ff fb24 	bl	8005b64 <USBD_CDC_RegisterInterface>
 800651c:	b950      	cbnz	r0, 8006534 <MX_USB_DEVICE_Init+0x38>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800651e:	4809      	ldr	r0, [pc, #36]	; (8006544 <MX_USB_DEVICE_Init+0x48>)
 8006520:	f7ff fb6c 	bl	8005bfc <USBD_Start>
 8006524:	b948      	cbnz	r0, 800653a <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006526:	bd08      	pop	{r3, pc}
    Error_Handler();
 8006528:	f7fb f8d2 	bl	80016d0 <Error_Handler>
 800652c:	e7ed      	b.n	800650a <MX_USB_DEVICE_Init+0xe>
    Error_Handler();
 800652e:	f7fb f8cf 	bl	80016d0 <Error_Handler>
 8006532:	e7ef      	b.n	8006514 <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 8006534:	f7fb f8cc 	bl	80016d0 <Error_Handler>
 8006538:	e7f1      	b.n	800651e <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 800653a:	f7fb f8c9 	bl	80016d0 <Error_Handler>
}
 800653e:	e7f2      	b.n	8006526 <MX_USB_DEVICE_Init+0x2a>
 8006540:	200001cc 	.word	0x200001cc
 8006544:	20001794 	.word	0x20001794
 8006548:	200000a4 	.word	0x200000a4
 800654c:	200001b4 	.word	0x200001b4

08006550 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8006550:	2000      	movs	r0, #0
 8006552:	4770      	bx	lr

08006554 <CDC_Control_FS>:
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006554:	2820      	cmp	r0, #32
 8006556:	d003      	beq.n	8006560 <CDC_Control_FS+0xc>
 8006558:	2821      	cmp	r0, #33	; 0x21
 800655a:	d009      	beq.n	8006570 <CDC_Control_FS+0x1c>
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 800655c:	2000      	movs	r0, #0
 800655e:	4770      	bx	lr
    	memcpy(lineCoding, pbuf, sizeof(lineCoding));
 8006560:	4b07      	ldr	r3, [pc, #28]	; (8006580 <CDC_Control_FS+0x2c>)
 8006562:	6808      	ldr	r0, [r1, #0]
 8006564:	6018      	str	r0, [r3, #0]
 8006566:	8888      	ldrh	r0, [r1, #4]
 8006568:	798a      	ldrb	r2, [r1, #6]
 800656a:	8098      	strh	r0, [r3, #4]
 800656c:	719a      	strb	r2, [r3, #6]
    break;
 800656e:	e7f5      	b.n	800655c <CDC_Control_FS+0x8>
    	memcpy(pbuf, lineCoding, sizeof(lineCoding));
 8006570:	4b03      	ldr	r3, [pc, #12]	; (8006580 <CDC_Control_FS+0x2c>)
 8006572:	6818      	ldr	r0, [r3, #0]
 8006574:	6008      	str	r0, [r1, #0]
 8006576:	889a      	ldrh	r2, [r3, #4]
 8006578:	799b      	ldrb	r3, [r3, #6]
 800657a:	808a      	strh	r2, [r1, #4]
 800657c:	718b      	strb	r3, [r1, #6]
    break;
 800657e:	e7ed      	b.n	800655c <CDC_Control_FS+0x8>
 8006580:	200001c4 	.word	0x200001c4

08006584 <CDC_Init_FS>:
{
 8006584:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006586:	4c06      	ldr	r4, [pc, #24]	; (80065a0 <CDC_Init_FS+0x1c>)
 8006588:	2200      	movs	r2, #0
 800658a:	4906      	ldr	r1, [pc, #24]	; (80065a4 <CDC_Init_FS+0x20>)
 800658c:	4620      	mov	r0, r4
 800658e:	f7ff faf0 	bl	8005b72 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006592:	4905      	ldr	r1, [pc, #20]	; (80065a8 <CDC_Init_FS+0x24>)
 8006594:	4620      	mov	r0, r4
 8006596:	f7ff faf4 	bl	8005b82 <USBD_CDC_SetRxBuffer>
}
 800659a:	2000      	movs	r0, #0
 800659c:	bd10      	pop	{r4, pc}
 800659e:	bf00      	nop
 80065a0:	20001794 	.word	0x20001794
 80065a4:	20001c58 	.word	0x20001c58
 80065a8:	20001a58 	.word	0x20001a58

080065ac <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80065ac:	b570      	push	{r4, r5, r6, lr}
 80065ae:	4604      	mov	r4, r0
 80065b0:	460d      	mov	r5, r1
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80065b2:	4e07      	ldr	r6, [pc, #28]	; (80065d0 <CDC_Receive_FS+0x24>)
 80065b4:	4601      	mov	r1, r0
 80065b6:	4630      	mov	r0, r6
 80065b8:	f7ff fae3 	bl	8005b82 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80065bc:	4630      	mov	r0, r6
 80065be:	f7ff fae6 	bl	8005b8e <USBD_CDC_ReceivePacket>
  CDC_ReveiveCallback(Buf, Len[0]); // My callback function
 80065c2:	7829      	ldrb	r1, [r5, #0]
 80065c4:	4620      	mov	r0, r4
 80065c6:	f7fb f853 	bl	8001670 <CDC_ReveiveCallback>
  return (USBD_OK);
  /* USER CODE END 6 */
}
 80065ca:	2000      	movs	r0, #0
 80065cc:	bd70      	pop	{r4, r5, r6, pc}
 80065ce:	bf00      	nop
 80065d0:	20001794 	.word	0x20001794

080065d4 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80065d4:	2312      	movs	r3, #18
 80065d6:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 80065d8:	4800      	ldr	r0, [pc, #0]	; (80065dc <USBD_FS_DeviceDescriptor+0x8>)
 80065da:	4770      	bx	lr
 80065dc:	200001e8 	.word	0x200001e8

080065e0 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80065e0:	2304      	movs	r3, #4
 80065e2:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 80065e4:	4800      	ldr	r0, [pc, #0]	; (80065e8 <USBD_FS_LangIDStrDescriptor+0x8>)
 80065e6:	4770      	bx	lr
 80065e8:	200001fc 	.word	0x200001fc

080065ec <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 80065ec:	b1b2      	cbz	r2, 800661c <IntToUnicode+0x30>
 80065ee:	1c4b      	adds	r3, r1, #1
 80065f0:	f102 3cff 	add.w	ip, r2, #4294967295
 80065f4:	fa5f fc8c 	uxtb.w	ip, ip
 80065f8:	3103      	adds	r1, #3
 80065fa:	eb01 014c 	add.w	r1, r1, ip, lsl #1
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 80065fe:	f04f 0c00 	mov.w	ip, #0
    if (((value >> 28)) < 0xA)
 8006602:	0f02      	lsrs	r2, r0, #28
 8006604:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
      pbuf[2 * idx] = (value >> 28) + '0';
 8006608:	bf34      	ite	cc
 800660a:	3230      	addcc	r2, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800660c:	3237      	addcs	r2, #55	; 0x37
 800660e:	f803 2c01 	strb.w	r2, [r3, #-1]
    value = value << 4;
 8006612:	0100      	lsls	r0, r0, #4
    pbuf[2 * idx + 1] = 0;
 8006614:	f803 cb02 	strb.w	ip, [r3], #2
  for (idx = 0; idx < len; idx++)
 8006618:	428b      	cmp	r3, r1
 800661a:	d1f2      	bne.n	8006602 <IntToUnicode+0x16>
  }
}
 800661c:	4770      	bx	lr
	...

08006620 <USBD_FS_SerialStrDescriptor>:
{
 8006620:	b538      	push	{r3, r4, r5, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8006622:	231a      	movs	r3, #26
 8006624:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006626:	4b0c      	ldr	r3, [pc, #48]	; (8006658 <USBD_FS_SerialStrDescriptor+0x38>)
 8006628:	f8d3 07e8 	ldr.w	r0, [r3, #2024]	; 0x7e8
  deviceserial0 += deviceserial2;
 800662c:	f8d3 37f0 	ldr.w	r3, [r3, #2032]	; 0x7f0
  if (deviceserial0 != 0)
 8006630:	18c0      	adds	r0, r0, r3
 8006632:	d101      	bne.n	8006638 <USBD_FS_SerialStrDescriptor+0x18>
}
 8006634:	4809      	ldr	r0, [pc, #36]	; (800665c <USBD_FS_SerialStrDescriptor+0x3c>)
 8006636:	bd38      	pop	{r3, r4, r5, pc}
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006638:	4b07      	ldr	r3, [pc, #28]	; (8006658 <USBD_FS_SerialStrDescriptor+0x38>)
 800663a:	f8d3 57ec 	ldr.w	r5, [r3, #2028]	; 0x7ec
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800663e:	4c07      	ldr	r4, [pc, #28]	; (800665c <USBD_FS_SerialStrDescriptor+0x3c>)
 8006640:	2208      	movs	r2, #8
 8006642:	1ca1      	adds	r1, r4, #2
 8006644:	f7ff ffd2 	bl	80065ec <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006648:	2204      	movs	r2, #4
 800664a:	f104 0112 	add.w	r1, r4, #18
 800664e:	4628      	mov	r0, r5
 8006650:	f7ff ffcc 	bl	80065ec <IntToUnicode>
 8006654:	e7ee      	b.n	8006634 <USBD_FS_SerialStrDescriptor+0x14>
 8006656:	bf00      	nop
 8006658:	1ffff000 	.word	0x1ffff000
 800665c:	20000200 	.word	0x20000200

08006660 <USBD_FS_ProductStrDescriptor>:
{
 8006660:	b508      	push	{r3, lr}
 8006662:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006664:	4902      	ldr	r1, [pc, #8]	; (8006670 <USBD_FS_ProductStrDescriptor+0x10>)
 8006666:	4803      	ldr	r0, [pc, #12]	; (8006674 <USBD_FS_ProductStrDescriptor+0x14>)
 8006668:	f7ff fee1 	bl	800642e <USBD_GetString>
}
 800666c:	4800      	ldr	r0, [pc, #0]	; (8006670 <USBD_FS_ProductStrDescriptor+0x10>)
 800666e:	bd08      	pop	{r3, pc}
 8006670:	20001e58 	.word	0x20001e58
 8006674:	0800b12c 	.word	0x0800b12c

08006678 <USBD_FS_ManufacturerStrDescriptor>:
{
 8006678:	b510      	push	{r4, lr}
 800667a:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800667c:	4c03      	ldr	r4, [pc, #12]	; (800668c <USBD_FS_ManufacturerStrDescriptor+0x14>)
 800667e:	4621      	mov	r1, r4
 8006680:	4803      	ldr	r0, [pc, #12]	; (8006690 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8006682:	f7ff fed4 	bl	800642e <USBD_GetString>
}
 8006686:	4620      	mov	r0, r4
 8006688:	bd10      	pop	{r4, pc}
 800668a:	bf00      	nop
 800668c:	20001e58 	.word	0x20001e58
 8006690:	0800b13c 	.word	0x0800b13c

08006694 <USBD_FS_ConfigStrDescriptor>:
{
 8006694:	b508      	push	{r3, lr}
 8006696:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006698:	4902      	ldr	r1, [pc, #8]	; (80066a4 <USBD_FS_ConfigStrDescriptor+0x10>)
 800669a:	4803      	ldr	r0, [pc, #12]	; (80066a8 <USBD_FS_ConfigStrDescriptor+0x14>)
 800669c:	f7ff fec7 	bl	800642e <USBD_GetString>
}
 80066a0:	4800      	ldr	r0, [pc, #0]	; (80066a4 <USBD_FS_ConfigStrDescriptor+0x10>)
 80066a2:	bd08      	pop	{r3, pc}
 80066a4:	20001e58 	.word	0x20001e58
 80066a8:	0800b144 	.word	0x0800b144

080066ac <USBD_FS_InterfaceStrDescriptor>:
{
 80066ac:	b508      	push	{r3, lr}
 80066ae:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80066b0:	4902      	ldr	r1, [pc, #8]	; (80066bc <USBD_FS_InterfaceStrDescriptor+0x10>)
 80066b2:	4803      	ldr	r0, [pc, #12]	; (80066c0 <USBD_FS_InterfaceStrDescriptor+0x14>)
 80066b4:	f7ff febb 	bl	800642e <USBD_GetString>
}
 80066b8:	4800      	ldr	r0, [pc, #0]	; (80066bc <USBD_FS_InterfaceStrDescriptor+0x10>)
 80066ba:	bd08      	pop	{r3, pc}
 80066bc:	20001e58 	.word	0x20001e58
 80066c0:	0800b150 	.word	0x0800b150

080066c4 <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 80066c4:	b120      	cbz	r0, 80066d0 <USBD_Get_USB_Status+0xc>
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
    break;
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80066c6:	2802      	cmp	r0, #2
 80066c8:	bf14      	ite	ne
 80066ca:	2002      	movne	r0, #2
 80066cc:	2001      	moveq	r0, #1
 80066ce:	4770      	bx	lr
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 80066d0:	4770      	bx	lr
	...

080066d4 <HAL_PCD_MspInit>:
  if(pcdHandle->Instance==USB)
 80066d4:	6802      	ldr	r2, [r0, #0]
 80066d6:	4b09      	ldr	r3, [pc, #36]	; (80066fc <HAL_PCD_MspInit+0x28>)
 80066d8:	429a      	cmp	r2, r3
 80066da:	d000      	beq.n	80066de <HAL_PCD_MspInit+0xa>
 80066dc:	4770      	bx	lr
{
 80066de:	b082      	sub	sp, #8
    __HAL_RCC_USB_CLK_ENABLE();
 80066e0:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 80066e4:	69da      	ldr	r2, [r3, #28]
 80066e6:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80066ea:	61da      	str	r2, [r3, #28]
 80066ec:	69db      	ldr	r3, [r3, #28]
 80066ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80066f2:	9301      	str	r3, [sp, #4]
 80066f4:	9b01      	ldr	r3, [sp, #4]
}
 80066f6:	b002      	add	sp, #8
 80066f8:	4770      	bx	lr
 80066fa:	bf00      	nop
 80066fc:	40005c00 	.word	0x40005c00

08006700 <HAL_PCD_SetupStageCallback>:
{
 8006700:	b508      	push	{r3, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006702:	f500 712c 	add.w	r1, r0, #688	; 0x2b0
 8006706:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800670a:	f7ff fa8f 	bl	8005c2c <USBD_LL_SetupStage>
}
 800670e:	bd08      	pop	{r3, pc}

08006710 <HAL_PCD_DataOutStageCallback>:
{
 8006710:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006712:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8006716:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800671a:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 800671e:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8006722:	f7ff fab0 	bl	8005c86 <USBD_LL_DataOutStage>
}
 8006726:	bd08      	pop	{r3, pc}

08006728 <HAL_PCD_DataInStageCallback>:
{
 8006728:	b508      	push	{r3, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800672a:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800672e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8006732:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006734:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8006738:	f7ff fae9 	bl	8005d0e <USBD_LL_DataInStage>
}
 800673c:	bd08      	pop	{r3, pc}

0800673e <HAL_PCD_SOFCallback>:
{
 800673e:	b508      	push	{r3, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006740:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8006744:	f7ff fb88 	bl	8005e58 <USBD_LL_SOF>
}
 8006748:	bd08      	pop	{r3, pc}

0800674a <HAL_PCD_ResetCallback>:
{
 800674a:	b510      	push	{r4, lr}
 800674c:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800674e:	6883      	ldr	r3, [r0, #8]
 8006750:	2b02      	cmp	r3, #2
 8006752:	d109      	bne.n	8006768 <HAL_PCD_ResetCallback+0x1e>
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006754:	2101      	movs	r1, #1
 8006756:	f8d4 02e8 	ldr.w	r0, [r4, #744]	; 0x2e8
 800675a:	f7ff fb67 	bl	8005e2c <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800675e:	f8d4 02e8 	ldr.w	r0, [r4, #744]	; 0x2e8
 8006762:	f7ff fb3b 	bl	8005ddc <USBD_LL_Reset>
}
 8006766:	bd10      	pop	{r4, pc}
    Error_Handler();
 8006768:	f7fa ffb2 	bl	80016d0 <Error_Handler>
 800676c:	e7f2      	b.n	8006754 <HAL_PCD_ResetCallback+0xa>
	...

08006770 <HAL_PCD_SuspendCallback>:
{
 8006770:	b510      	push	{r4, lr}
 8006772:	4604      	mov	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006774:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8006778:	f7ff fb5b 	bl	8005e32 <USBD_LL_Suspend>
  if (hpcd->Init.low_power_enable)
 800677c:	69a3      	ldr	r3, [r4, #24]
 800677e:	b123      	cbz	r3, 800678a <HAL_PCD_SuspendCallback+0x1a>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006780:	4a02      	ldr	r2, [pc, #8]	; (800678c <HAL_PCD_SuspendCallback+0x1c>)
 8006782:	6913      	ldr	r3, [r2, #16]
 8006784:	f043 0306 	orr.w	r3, r3, #6
 8006788:	6113      	str	r3, [r2, #16]
}
 800678a:	bd10      	pop	{r4, pc}
 800678c:	e000ed00 	.word	0xe000ed00

08006790 <HAL_PCD_ResumeCallback>:
{
 8006790:	b508      	push	{r3, lr}
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006792:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8006796:	f7ff fb55 	bl	8005e44 <USBD_LL_Resume>
}
 800679a:	bd08      	pop	{r3, pc}

0800679c <USBD_LL_Init>:
{
 800679c:	b510      	push	{r4, lr}
 800679e:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 80067a0:	481d      	ldr	r0, [pc, #116]	; (8006818 <USBD_LL_Init+0x7c>)
 80067a2:	f8c0 42e8 	str.w	r4, [r0, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 80067a6:	f8c4 02c0 	str.w	r0, [r4, #704]	; 0x2c0
  hpcd_USB_FS.Instance = USB;
 80067aa:	4b1c      	ldr	r3, [pc, #112]	; (800681c <USBD_LL_Init+0x80>)
 80067ac:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80067ae:	2308      	movs	r3, #8
 80067b0:	6043      	str	r3, [r0, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80067b2:	2302      	movs	r3, #2
 80067b4:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80067b6:	2300      	movs	r3, #0
 80067b8:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80067ba:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80067bc:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80067be:	f7fb fec9 	bl	8002554 <HAL_PCD_Init>
 80067c2:	bb30      	cbnz	r0, 8006812 <USBD_LL_Init+0x76>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80067c4:	2318      	movs	r3, #24
 80067c6:	2200      	movs	r2, #0
 80067c8:	4611      	mov	r1, r2
 80067ca:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 80067ce:	f7fc fec1 	bl	8003554 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80067d2:	2358      	movs	r3, #88	; 0x58
 80067d4:	2200      	movs	r2, #0
 80067d6:	2180      	movs	r1, #128	; 0x80
 80067d8:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 80067dc:	f7fc feba 	bl	8003554 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80067e0:	23c0      	movs	r3, #192	; 0xc0
 80067e2:	2200      	movs	r2, #0
 80067e4:	2181      	movs	r1, #129	; 0x81
 80067e6:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 80067ea:	f7fc feb3 	bl	8003554 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80067ee:	f44f 7388 	mov.w	r3, #272	; 0x110
 80067f2:	2200      	movs	r2, #0
 80067f4:	2101      	movs	r1, #1
 80067f6:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 80067fa:	f7fc feab 	bl	8003554 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80067fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006802:	2200      	movs	r2, #0
 8006804:	2182      	movs	r1, #130	; 0x82
 8006806:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 800680a:	f7fc fea3 	bl	8003554 <HAL_PCDEx_PMAConfig>
}
 800680e:	2000      	movs	r0, #0
 8006810:	bd10      	pop	{r4, pc}
    Error_Handler( );
 8006812:	f7fa ff5d 	bl	80016d0 <Error_Handler>
 8006816:	e7d5      	b.n	80067c4 <USBD_LL_Init+0x28>
 8006818:	20002058 	.word	0x20002058
 800681c:	40005c00 	.word	0x40005c00

08006820 <USBD_LL_Start>:
{
 8006820:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8006822:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8006826:	f7fb ff1b 	bl	8002660 <HAL_PCD_Start>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800682a:	f7ff ff4b 	bl	80066c4 <USBD_Get_USB_Status>
}
 800682e:	bd08      	pop	{r3, pc}

08006830 <USBD_LL_OpenEP>:
{
 8006830:	b508      	push	{r3, lr}
 8006832:	4694      	mov	ip, r2
 8006834:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006836:	4663      	mov	r3, ip
 8006838:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800683c:	f7fc fd5d 	bl	80032fa <HAL_PCD_EP_Open>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006840:	f7ff ff40 	bl	80066c4 <USBD_Get_USB_Status>
}
 8006844:	bd08      	pop	{r3, pc}

08006846 <USBD_LL_CloseEP>:
{
 8006846:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006848:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800684c:	f7fc fd95 	bl	800337a <HAL_PCD_EP_Close>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006850:	f7ff ff38 	bl	80066c4 <USBD_Get_USB_Status>
}
 8006854:	bd08      	pop	{r3, pc}

08006856 <USBD_LL_StallEP>:
{
 8006856:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006858:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800685c:	f7fc fe03 	bl	8003466 <HAL_PCD_EP_SetStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006860:	f7ff ff30 	bl	80066c4 <USBD_Get_USB_Status>
}
 8006864:	bd08      	pop	{r3, pc}

08006866 <USBD_LL_ClearStallEP>:
{
 8006866:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006868:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800686c:	f7fc fe37 	bl	80034de <HAL_PCD_EP_ClrStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006870:	f7ff ff28 	bl	80066c4 <USBD_Get_USB_Status>
}
 8006874:	bd08      	pop	{r3, pc}

08006876 <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006876:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
  if((ep_addr & 0x80) == 0x80)
 800687a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800687e:	d108      	bne.n	8006892 <USBD_LL_IsStallEP+0x1c>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006880:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8006884:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8006888:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800688c:	f891 016a 	ldrb.w	r0, [r1, #362]	; 0x16a
}
 8006890:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006892:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8006896:	3101      	adds	r1, #1
 8006898:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800689c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80068a0:	7888      	ldrb	r0, [r1, #2]
 80068a2:	4770      	bx	lr

080068a4 <USBD_LL_SetUSBAddress>:
{
 80068a4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80068a6:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80068aa:	f7fb fef2 	bl	8002692 <HAL_PCD_SetAddress>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80068ae:	f7ff ff09 	bl	80066c4 <USBD_Get_USB_Status>
}
 80068b2:	bd08      	pop	{r3, pc}

080068b4 <USBD_LL_Transmit>:
{
 80068b4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80068b6:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80068ba:	f7fc fdb3 	bl	8003424 <HAL_PCD_EP_Transmit>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80068be:	f7ff ff01 	bl	80066c4 <USBD_Get_USB_Status>
}
 80068c2:	bd08      	pop	{r3, pc}

080068c4 <USBD_LL_PrepareReceive>:
{
 80068c4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80068c6:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80068ca:	f7fc fd85 	bl	80033d8 <HAL_PCD_EP_Receive>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80068ce:	f7ff fef9 	bl	80066c4 <USBD_Get_USB_Status>
}
 80068d2:	bd08      	pop	{r3, pc}

080068d4 <USBD_LL_GetRxDataSize>:
{
 80068d4:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80068d6:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80068da:	f7fc fd9a 	bl	8003412 <HAL_PCD_EP_GetRxCount>
}
 80068de:	bd08      	pop	{r3, pc}

080068e0 <USBD_static_malloc>:
}
 80068e0:	4800      	ldr	r0, [pc, #0]	; (80068e4 <USBD_static_malloc+0x4>)
 80068e2:	4770      	bx	lr
 80068e4:	20002344 	.word	0x20002344

080068e8 <USBD_static_free>:
}
 80068e8:	4770      	bx	lr

080068ea <HAL_PCDEx_SetConnectionState>:
}
 80068ea:	4770      	bx	lr

080068ec <atof>:
 80068ec:	2100      	movs	r1, #0
 80068ee:	f001 bae7 	b.w	8007ec0 <strtod>

080068f2 <atoi>:
 80068f2:	220a      	movs	r2, #10
 80068f4:	2100      	movs	r1, #0
 80068f6:	f001 bbc7 	b.w	8008088 <strtol>
	...

080068fc <__errno>:
 80068fc:	4b01      	ldr	r3, [pc, #4]	; (8006904 <__errno+0x8>)
 80068fe:	6818      	ldr	r0, [r3, #0]
 8006900:	4770      	bx	lr
 8006902:	bf00      	nop
 8006904:	2000021c 	.word	0x2000021c

08006908 <__libc_init_array>:
 8006908:	b570      	push	{r4, r5, r6, lr}
 800690a:	2600      	movs	r6, #0
 800690c:	4d0c      	ldr	r5, [pc, #48]	; (8006940 <__libc_init_array+0x38>)
 800690e:	4c0d      	ldr	r4, [pc, #52]	; (8006944 <__libc_init_array+0x3c>)
 8006910:	1b64      	subs	r4, r4, r5
 8006912:	10a4      	asrs	r4, r4, #2
 8006914:	42a6      	cmp	r6, r4
 8006916:	d109      	bne.n	800692c <__libc_init_array+0x24>
 8006918:	f004 fac2 	bl	800aea0 <_init>
 800691c:	2600      	movs	r6, #0
 800691e:	4d0a      	ldr	r5, [pc, #40]	; (8006948 <__libc_init_array+0x40>)
 8006920:	4c0a      	ldr	r4, [pc, #40]	; (800694c <__libc_init_array+0x44>)
 8006922:	1b64      	subs	r4, r4, r5
 8006924:	10a4      	asrs	r4, r4, #2
 8006926:	42a6      	cmp	r6, r4
 8006928:	d105      	bne.n	8006936 <__libc_init_array+0x2e>
 800692a:	bd70      	pop	{r4, r5, r6, pc}
 800692c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006930:	4798      	blx	r3
 8006932:	3601      	adds	r6, #1
 8006934:	e7ee      	b.n	8006914 <__libc_init_array+0xc>
 8006936:	f855 3b04 	ldr.w	r3, [r5], #4
 800693a:	4798      	blx	r3
 800693c:	3601      	adds	r6, #1
 800693e:	e7f2      	b.n	8006926 <__libc_init_array+0x1e>
 8006940:	0800b658 	.word	0x0800b658
 8006944:	0800b658 	.word	0x0800b658
 8006948:	0800b658 	.word	0x0800b658
 800694c:	0800b65c 	.word	0x0800b65c

08006950 <memcpy>:
 8006950:	440a      	add	r2, r1
 8006952:	4291      	cmp	r1, r2
 8006954:	f100 33ff 	add.w	r3, r0, #4294967295
 8006958:	d100      	bne.n	800695c <memcpy+0xc>
 800695a:	4770      	bx	lr
 800695c:	b510      	push	{r4, lr}
 800695e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006962:	4291      	cmp	r1, r2
 8006964:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006968:	d1f9      	bne.n	800695e <memcpy+0xe>
 800696a:	bd10      	pop	{r4, pc}

0800696c <memset>:
 800696c:	4603      	mov	r3, r0
 800696e:	4402      	add	r2, r0
 8006970:	4293      	cmp	r3, r2
 8006972:	d100      	bne.n	8006976 <memset+0xa>
 8006974:	4770      	bx	lr
 8006976:	f803 1b01 	strb.w	r1, [r3], #1
 800697a:	e7f9      	b.n	8006970 <memset+0x4>

0800697c <__cvt>:
 800697c:	2b00      	cmp	r3, #0
 800697e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006982:	461f      	mov	r7, r3
 8006984:	bfbb      	ittet	lt
 8006986:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800698a:	461f      	movlt	r7, r3
 800698c:	2300      	movge	r3, #0
 800698e:	232d      	movlt	r3, #45	; 0x2d
 8006990:	b088      	sub	sp, #32
 8006992:	4614      	mov	r4, r2
 8006994:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006996:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006998:	7013      	strb	r3, [r2, #0]
 800699a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800699c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80069a0:	f023 0820 	bic.w	r8, r3, #32
 80069a4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80069a8:	d005      	beq.n	80069b6 <__cvt+0x3a>
 80069aa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80069ae:	d100      	bne.n	80069b2 <__cvt+0x36>
 80069b0:	3501      	adds	r5, #1
 80069b2:	2302      	movs	r3, #2
 80069b4:	e000      	b.n	80069b8 <__cvt+0x3c>
 80069b6:	2303      	movs	r3, #3
 80069b8:	aa07      	add	r2, sp, #28
 80069ba:	9204      	str	r2, [sp, #16]
 80069bc:	aa06      	add	r2, sp, #24
 80069be:	e9cd a202 	strd	sl, r2, [sp, #8]
 80069c2:	e9cd 3500 	strd	r3, r5, [sp]
 80069c6:	4622      	mov	r2, r4
 80069c8:	463b      	mov	r3, r7
 80069ca:	f001 fc11 	bl	80081f0 <_dtoa_r>
 80069ce:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80069d2:	4606      	mov	r6, r0
 80069d4:	d102      	bne.n	80069dc <__cvt+0x60>
 80069d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80069d8:	07db      	lsls	r3, r3, #31
 80069da:	d522      	bpl.n	8006a22 <__cvt+0xa6>
 80069dc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80069e0:	eb06 0905 	add.w	r9, r6, r5
 80069e4:	d110      	bne.n	8006a08 <__cvt+0x8c>
 80069e6:	7833      	ldrb	r3, [r6, #0]
 80069e8:	2b30      	cmp	r3, #48	; 0x30
 80069ea:	d10a      	bne.n	8006a02 <__cvt+0x86>
 80069ec:	2200      	movs	r2, #0
 80069ee:	2300      	movs	r3, #0
 80069f0:	4620      	mov	r0, r4
 80069f2:	4639      	mov	r1, r7
 80069f4:	f7f9 ffe2 	bl	80009bc <__aeabi_dcmpeq>
 80069f8:	b918      	cbnz	r0, 8006a02 <__cvt+0x86>
 80069fa:	f1c5 0501 	rsb	r5, r5, #1
 80069fe:	f8ca 5000 	str.w	r5, [sl]
 8006a02:	f8da 3000 	ldr.w	r3, [sl]
 8006a06:	4499      	add	r9, r3
 8006a08:	2200      	movs	r2, #0
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	4620      	mov	r0, r4
 8006a0e:	4639      	mov	r1, r7
 8006a10:	f7f9 ffd4 	bl	80009bc <__aeabi_dcmpeq>
 8006a14:	b108      	cbz	r0, 8006a1a <__cvt+0x9e>
 8006a16:	f8cd 901c 	str.w	r9, [sp, #28]
 8006a1a:	2230      	movs	r2, #48	; 0x30
 8006a1c:	9b07      	ldr	r3, [sp, #28]
 8006a1e:	454b      	cmp	r3, r9
 8006a20:	d307      	bcc.n	8006a32 <__cvt+0xb6>
 8006a22:	4630      	mov	r0, r6
 8006a24:	9b07      	ldr	r3, [sp, #28]
 8006a26:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006a28:	1b9b      	subs	r3, r3, r6
 8006a2a:	6013      	str	r3, [r2, #0]
 8006a2c:	b008      	add	sp, #32
 8006a2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a32:	1c59      	adds	r1, r3, #1
 8006a34:	9107      	str	r1, [sp, #28]
 8006a36:	701a      	strb	r2, [r3, #0]
 8006a38:	e7f0      	b.n	8006a1c <__cvt+0xa0>

08006a3a <__exponent>:
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a3e:	2900      	cmp	r1, #0
 8006a40:	f803 2b02 	strb.w	r2, [r3], #2
 8006a44:	bfb6      	itet	lt
 8006a46:	222d      	movlt	r2, #45	; 0x2d
 8006a48:	222b      	movge	r2, #43	; 0x2b
 8006a4a:	4249      	neglt	r1, r1
 8006a4c:	2909      	cmp	r1, #9
 8006a4e:	7042      	strb	r2, [r0, #1]
 8006a50:	dd2b      	ble.n	8006aaa <__exponent+0x70>
 8006a52:	f10d 0407 	add.w	r4, sp, #7
 8006a56:	46a4      	mov	ip, r4
 8006a58:	270a      	movs	r7, #10
 8006a5a:	fb91 f6f7 	sdiv	r6, r1, r7
 8006a5e:	460a      	mov	r2, r1
 8006a60:	46a6      	mov	lr, r4
 8006a62:	fb07 1516 	mls	r5, r7, r6, r1
 8006a66:	2a63      	cmp	r2, #99	; 0x63
 8006a68:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8006a6c:	4631      	mov	r1, r6
 8006a6e:	f104 34ff 	add.w	r4, r4, #4294967295
 8006a72:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006a76:	dcf0      	bgt.n	8006a5a <__exponent+0x20>
 8006a78:	3130      	adds	r1, #48	; 0x30
 8006a7a:	f1ae 0502 	sub.w	r5, lr, #2
 8006a7e:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006a82:	4629      	mov	r1, r5
 8006a84:	1c44      	adds	r4, r0, #1
 8006a86:	4561      	cmp	r1, ip
 8006a88:	d30a      	bcc.n	8006aa0 <__exponent+0x66>
 8006a8a:	f10d 0209 	add.w	r2, sp, #9
 8006a8e:	eba2 020e 	sub.w	r2, r2, lr
 8006a92:	4565      	cmp	r5, ip
 8006a94:	bf88      	it	hi
 8006a96:	2200      	movhi	r2, #0
 8006a98:	4413      	add	r3, r2
 8006a9a:	1a18      	subs	r0, r3, r0
 8006a9c:	b003      	add	sp, #12
 8006a9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006aa0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006aa4:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006aa8:	e7ed      	b.n	8006a86 <__exponent+0x4c>
 8006aaa:	2330      	movs	r3, #48	; 0x30
 8006aac:	3130      	adds	r1, #48	; 0x30
 8006aae:	7083      	strb	r3, [r0, #2]
 8006ab0:	70c1      	strb	r1, [r0, #3]
 8006ab2:	1d03      	adds	r3, r0, #4
 8006ab4:	e7f1      	b.n	8006a9a <__exponent+0x60>
	...

08006ab8 <_printf_float>:
 8006ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006abc:	b091      	sub	sp, #68	; 0x44
 8006abe:	460c      	mov	r4, r1
 8006ac0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8006ac4:	4616      	mov	r6, r2
 8006ac6:	461f      	mov	r7, r3
 8006ac8:	4605      	mov	r5, r0
 8006aca:	f002 fcf7 	bl	80094bc <_localeconv_r>
 8006ace:	6803      	ldr	r3, [r0, #0]
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	9309      	str	r3, [sp, #36]	; 0x24
 8006ad4:	f7f9 fb46 	bl	8000164 <strlen>
 8006ad8:	2300      	movs	r3, #0
 8006ada:	930e      	str	r3, [sp, #56]	; 0x38
 8006adc:	f8d8 3000 	ldr.w	r3, [r8]
 8006ae0:	900a      	str	r0, [sp, #40]	; 0x28
 8006ae2:	3307      	adds	r3, #7
 8006ae4:	f023 0307 	bic.w	r3, r3, #7
 8006ae8:	f103 0208 	add.w	r2, r3, #8
 8006aec:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006af0:	f8d4 b000 	ldr.w	fp, [r4]
 8006af4:	f8c8 2000 	str.w	r2, [r8]
 8006af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006afc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006b00:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8006b04:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8006b08:	930b      	str	r3, [sp, #44]	; 0x2c
 8006b0a:	f04f 32ff 	mov.w	r2, #4294967295
 8006b0e:	4640      	mov	r0, r8
 8006b10:	4b9c      	ldr	r3, [pc, #624]	; (8006d84 <_printf_float+0x2cc>)
 8006b12:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006b14:	f7f9 ff84 	bl	8000a20 <__aeabi_dcmpun>
 8006b18:	bb70      	cbnz	r0, 8006b78 <_printf_float+0xc0>
 8006b1a:	f04f 32ff 	mov.w	r2, #4294967295
 8006b1e:	4640      	mov	r0, r8
 8006b20:	4b98      	ldr	r3, [pc, #608]	; (8006d84 <_printf_float+0x2cc>)
 8006b22:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006b24:	f7f9 ff5e 	bl	80009e4 <__aeabi_dcmple>
 8006b28:	bb30      	cbnz	r0, 8006b78 <_printf_float+0xc0>
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	4640      	mov	r0, r8
 8006b30:	4651      	mov	r1, sl
 8006b32:	f7f9 ff4d 	bl	80009d0 <__aeabi_dcmplt>
 8006b36:	b110      	cbz	r0, 8006b3e <_printf_float+0x86>
 8006b38:	232d      	movs	r3, #45	; 0x2d
 8006b3a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b3e:	4b92      	ldr	r3, [pc, #584]	; (8006d88 <_printf_float+0x2d0>)
 8006b40:	4892      	ldr	r0, [pc, #584]	; (8006d8c <_printf_float+0x2d4>)
 8006b42:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006b46:	bf94      	ite	ls
 8006b48:	4698      	movls	r8, r3
 8006b4a:	4680      	movhi	r8, r0
 8006b4c:	2303      	movs	r3, #3
 8006b4e:	f04f 0a00 	mov.w	sl, #0
 8006b52:	6123      	str	r3, [r4, #16]
 8006b54:	f02b 0304 	bic.w	r3, fp, #4
 8006b58:	6023      	str	r3, [r4, #0]
 8006b5a:	4633      	mov	r3, r6
 8006b5c:	4621      	mov	r1, r4
 8006b5e:	4628      	mov	r0, r5
 8006b60:	9700      	str	r7, [sp, #0]
 8006b62:	aa0f      	add	r2, sp, #60	; 0x3c
 8006b64:	f000 f9d4 	bl	8006f10 <_printf_common>
 8006b68:	3001      	adds	r0, #1
 8006b6a:	f040 8090 	bne.w	8006c8e <_printf_float+0x1d6>
 8006b6e:	f04f 30ff 	mov.w	r0, #4294967295
 8006b72:	b011      	add	sp, #68	; 0x44
 8006b74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b78:	4642      	mov	r2, r8
 8006b7a:	4653      	mov	r3, sl
 8006b7c:	4640      	mov	r0, r8
 8006b7e:	4651      	mov	r1, sl
 8006b80:	f7f9 ff4e 	bl	8000a20 <__aeabi_dcmpun>
 8006b84:	b148      	cbz	r0, 8006b9a <_printf_float+0xe2>
 8006b86:	f1ba 0f00 	cmp.w	sl, #0
 8006b8a:	bfb8      	it	lt
 8006b8c:	232d      	movlt	r3, #45	; 0x2d
 8006b8e:	4880      	ldr	r0, [pc, #512]	; (8006d90 <_printf_float+0x2d8>)
 8006b90:	bfb8      	it	lt
 8006b92:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006b96:	4b7f      	ldr	r3, [pc, #508]	; (8006d94 <_printf_float+0x2dc>)
 8006b98:	e7d3      	b.n	8006b42 <_printf_float+0x8a>
 8006b9a:	6863      	ldr	r3, [r4, #4]
 8006b9c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006ba0:	1c5a      	adds	r2, r3, #1
 8006ba2:	d142      	bne.n	8006c2a <_printf_float+0x172>
 8006ba4:	2306      	movs	r3, #6
 8006ba6:	6063      	str	r3, [r4, #4]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	9206      	str	r2, [sp, #24]
 8006bac:	aa0e      	add	r2, sp, #56	; 0x38
 8006bae:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8006bb2:	aa0d      	add	r2, sp, #52	; 0x34
 8006bb4:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8006bb8:	9203      	str	r2, [sp, #12]
 8006bba:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8006bbe:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006bc2:	6023      	str	r3, [r4, #0]
 8006bc4:	6863      	ldr	r3, [r4, #4]
 8006bc6:	4642      	mov	r2, r8
 8006bc8:	9300      	str	r3, [sp, #0]
 8006bca:	4628      	mov	r0, r5
 8006bcc:	4653      	mov	r3, sl
 8006bce:	910b      	str	r1, [sp, #44]	; 0x2c
 8006bd0:	f7ff fed4 	bl	800697c <__cvt>
 8006bd4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006bd6:	4680      	mov	r8, r0
 8006bd8:	2947      	cmp	r1, #71	; 0x47
 8006bda:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006bdc:	d108      	bne.n	8006bf0 <_printf_float+0x138>
 8006bde:	1cc8      	adds	r0, r1, #3
 8006be0:	db02      	blt.n	8006be8 <_printf_float+0x130>
 8006be2:	6863      	ldr	r3, [r4, #4]
 8006be4:	4299      	cmp	r1, r3
 8006be6:	dd40      	ble.n	8006c6a <_printf_float+0x1b2>
 8006be8:	f1a9 0902 	sub.w	r9, r9, #2
 8006bec:	fa5f f989 	uxtb.w	r9, r9
 8006bf0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006bf4:	d81f      	bhi.n	8006c36 <_printf_float+0x17e>
 8006bf6:	464a      	mov	r2, r9
 8006bf8:	3901      	subs	r1, #1
 8006bfa:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006bfe:	910d      	str	r1, [sp, #52]	; 0x34
 8006c00:	f7ff ff1b 	bl	8006a3a <__exponent>
 8006c04:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006c06:	4682      	mov	sl, r0
 8006c08:	1813      	adds	r3, r2, r0
 8006c0a:	2a01      	cmp	r2, #1
 8006c0c:	6123      	str	r3, [r4, #16]
 8006c0e:	dc02      	bgt.n	8006c16 <_printf_float+0x15e>
 8006c10:	6822      	ldr	r2, [r4, #0]
 8006c12:	07d2      	lsls	r2, r2, #31
 8006c14:	d501      	bpl.n	8006c1a <_printf_float+0x162>
 8006c16:	3301      	adds	r3, #1
 8006c18:	6123      	str	r3, [r4, #16]
 8006c1a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d09b      	beq.n	8006b5a <_printf_float+0xa2>
 8006c22:	232d      	movs	r3, #45	; 0x2d
 8006c24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c28:	e797      	b.n	8006b5a <_printf_float+0xa2>
 8006c2a:	2947      	cmp	r1, #71	; 0x47
 8006c2c:	d1bc      	bne.n	8006ba8 <_printf_float+0xf0>
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d1ba      	bne.n	8006ba8 <_printf_float+0xf0>
 8006c32:	2301      	movs	r3, #1
 8006c34:	e7b7      	b.n	8006ba6 <_printf_float+0xee>
 8006c36:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8006c3a:	d118      	bne.n	8006c6e <_printf_float+0x1b6>
 8006c3c:	2900      	cmp	r1, #0
 8006c3e:	6863      	ldr	r3, [r4, #4]
 8006c40:	dd0b      	ble.n	8006c5a <_printf_float+0x1a2>
 8006c42:	6121      	str	r1, [r4, #16]
 8006c44:	b913      	cbnz	r3, 8006c4c <_printf_float+0x194>
 8006c46:	6822      	ldr	r2, [r4, #0]
 8006c48:	07d0      	lsls	r0, r2, #31
 8006c4a:	d502      	bpl.n	8006c52 <_printf_float+0x19a>
 8006c4c:	3301      	adds	r3, #1
 8006c4e:	440b      	add	r3, r1
 8006c50:	6123      	str	r3, [r4, #16]
 8006c52:	f04f 0a00 	mov.w	sl, #0
 8006c56:	65a1      	str	r1, [r4, #88]	; 0x58
 8006c58:	e7df      	b.n	8006c1a <_printf_float+0x162>
 8006c5a:	b913      	cbnz	r3, 8006c62 <_printf_float+0x1aa>
 8006c5c:	6822      	ldr	r2, [r4, #0]
 8006c5e:	07d2      	lsls	r2, r2, #31
 8006c60:	d501      	bpl.n	8006c66 <_printf_float+0x1ae>
 8006c62:	3302      	adds	r3, #2
 8006c64:	e7f4      	b.n	8006c50 <_printf_float+0x198>
 8006c66:	2301      	movs	r3, #1
 8006c68:	e7f2      	b.n	8006c50 <_printf_float+0x198>
 8006c6a:	f04f 0967 	mov.w	r9, #103	; 0x67
 8006c6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006c70:	4299      	cmp	r1, r3
 8006c72:	db05      	blt.n	8006c80 <_printf_float+0x1c8>
 8006c74:	6823      	ldr	r3, [r4, #0]
 8006c76:	6121      	str	r1, [r4, #16]
 8006c78:	07d8      	lsls	r0, r3, #31
 8006c7a:	d5ea      	bpl.n	8006c52 <_printf_float+0x19a>
 8006c7c:	1c4b      	adds	r3, r1, #1
 8006c7e:	e7e7      	b.n	8006c50 <_printf_float+0x198>
 8006c80:	2900      	cmp	r1, #0
 8006c82:	bfcc      	ite	gt
 8006c84:	2201      	movgt	r2, #1
 8006c86:	f1c1 0202 	rsble	r2, r1, #2
 8006c8a:	4413      	add	r3, r2
 8006c8c:	e7e0      	b.n	8006c50 <_printf_float+0x198>
 8006c8e:	6823      	ldr	r3, [r4, #0]
 8006c90:	055a      	lsls	r2, r3, #21
 8006c92:	d407      	bmi.n	8006ca4 <_printf_float+0x1ec>
 8006c94:	6923      	ldr	r3, [r4, #16]
 8006c96:	4642      	mov	r2, r8
 8006c98:	4631      	mov	r1, r6
 8006c9a:	4628      	mov	r0, r5
 8006c9c:	47b8      	blx	r7
 8006c9e:	3001      	adds	r0, #1
 8006ca0:	d12b      	bne.n	8006cfa <_printf_float+0x242>
 8006ca2:	e764      	b.n	8006b6e <_printf_float+0xb6>
 8006ca4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006ca8:	f240 80dd 	bls.w	8006e66 <_printf_float+0x3ae>
 8006cac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	f7f9 fe82 	bl	80009bc <__aeabi_dcmpeq>
 8006cb8:	2800      	cmp	r0, #0
 8006cba:	d033      	beq.n	8006d24 <_printf_float+0x26c>
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	4631      	mov	r1, r6
 8006cc0:	4628      	mov	r0, r5
 8006cc2:	4a35      	ldr	r2, [pc, #212]	; (8006d98 <_printf_float+0x2e0>)
 8006cc4:	47b8      	blx	r7
 8006cc6:	3001      	adds	r0, #1
 8006cc8:	f43f af51 	beq.w	8006b6e <_printf_float+0xb6>
 8006ccc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006cd0:	429a      	cmp	r2, r3
 8006cd2:	db02      	blt.n	8006cda <_printf_float+0x222>
 8006cd4:	6823      	ldr	r3, [r4, #0]
 8006cd6:	07d8      	lsls	r0, r3, #31
 8006cd8:	d50f      	bpl.n	8006cfa <_printf_float+0x242>
 8006cda:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006cde:	4631      	mov	r1, r6
 8006ce0:	4628      	mov	r0, r5
 8006ce2:	47b8      	blx	r7
 8006ce4:	3001      	adds	r0, #1
 8006ce6:	f43f af42 	beq.w	8006b6e <_printf_float+0xb6>
 8006cea:	f04f 0800 	mov.w	r8, #0
 8006cee:	f104 091a 	add.w	r9, r4, #26
 8006cf2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006cf4:	3b01      	subs	r3, #1
 8006cf6:	4543      	cmp	r3, r8
 8006cf8:	dc09      	bgt.n	8006d0e <_printf_float+0x256>
 8006cfa:	6823      	ldr	r3, [r4, #0]
 8006cfc:	079b      	lsls	r3, r3, #30
 8006cfe:	f100 8102 	bmi.w	8006f06 <_printf_float+0x44e>
 8006d02:	68e0      	ldr	r0, [r4, #12]
 8006d04:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006d06:	4298      	cmp	r0, r3
 8006d08:	bfb8      	it	lt
 8006d0a:	4618      	movlt	r0, r3
 8006d0c:	e731      	b.n	8006b72 <_printf_float+0xba>
 8006d0e:	2301      	movs	r3, #1
 8006d10:	464a      	mov	r2, r9
 8006d12:	4631      	mov	r1, r6
 8006d14:	4628      	mov	r0, r5
 8006d16:	47b8      	blx	r7
 8006d18:	3001      	adds	r0, #1
 8006d1a:	f43f af28 	beq.w	8006b6e <_printf_float+0xb6>
 8006d1e:	f108 0801 	add.w	r8, r8, #1
 8006d22:	e7e6      	b.n	8006cf2 <_printf_float+0x23a>
 8006d24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	dc38      	bgt.n	8006d9c <_printf_float+0x2e4>
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	4631      	mov	r1, r6
 8006d2e:	4628      	mov	r0, r5
 8006d30:	4a19      	ldr	r2, [pc, #100]	; (8006d98 <_printf_float+0x2e0>)
 8006d32:	47b8      	blx	r7
 8006d34:	3001      	adds	r0, #1
 8006d36:	f43f af1a 	beq.w	8006b6e <_printf_float+0xb6>
 8006d3a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	d102      	bne.n	8006d48 <_printf_float+0x290>
 8006d42:	6823      	ldr	r3, [r4, #0]
 8006d44:	07d9      	lsls	r1, r3, #31
 8006d46:	d5d8      	bpl.n	8006cfa <_printf_float+0x242>
 8006d48:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006d4c:	4631      	mov	r1, r6
 8006d4e:	4628      	mov	r0, r5
 8006d50:	47b8      	blx	r7
 8006d52:	3001      	adds	r0, #1
 8006d54:	f43f af0b 	beq.w	8006b6e <_printf_float+0xb6>
 8006d58:	f04f 0900 	mov.w	r9, #0
 8006d5c:	f104 0a1a 	add.w	sl, r4, #26
 8006d60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006d62:	425b      	negs	r3, r3
 8006d64:	454b      	cmp	r3, r9
 8006d66:	dc01      	bgt.n	8006d6c <_printf_float+0x2b4>
 8006d68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006d6a:	e794      	b.n	8006c96 <_printf_float+0x1de>
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	4652      	mov	r2, sl
 8006d70:	4631      	mov	r1, r6
 8006d72:	4628      	mov	r0, r5
 8006d74:	47b8      	blx	r7
 8006d76:	3001      	adds	r0, #1
 8006d78:	f43f aef9 	beq.w	8006b6e <_printf_float+0xb6>
 8006d7c:	f109 0901 	add.w	r9, r9, #1
 8006d80:	e7ee      	b.n	8006d60 <_printf_float+0x2a8>
 8006d82:	bf00      	nop
 8006d84:	7fefffff 	.word	0x7fefffff
 8006d88:	0800b164 	.word	0x0800b164
 8006d8c:	0800b168 	.word	0x0800b168
 8006d90:	0800b170 	.word	0x0800b170
 8006d94:	0800b16c 	.word	0x0800b16c
 8006d98:	0800b174 	.word	0x0800b174
 8006d9c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006d9e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006da0:	429a      	cmp	r2, r3
 8006da2:	bfa8      	it	ge
 8006da4:	461a      	movge	r2, r3
 8006da6:	2a00      	cmp	r2, #0
 8006da8:	4691      	mov	r9, r2
 8006daa:	dc37      	bgt.n	8006e1c <_printf_float+0x364>
 8006dac:	f04f 0b00 	mov.w	fp, #0
 8006db0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006db4:	f104 021a 	add.w	r2, r4, #26
 8006db8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006dbc:	ebaa 0309 	sub.w	r3, sl, r9
 8006dc0:	455b      	cmp	r3, fp
 8006dc2:	dc33      	bgt.n	8006e2c <_printf_float+0x374>
 8006dc4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006dc8:	429a      	cmp	r2, r3
 8006dca:	db3b      	blt.n	8006e44 <_printf_float+0x38c>
 8006dcc:	6823      	ldr	r3, [r4, #0]
 8006dce:	07da      	lsls	r2, r3, #31
 8006dd0:	d438      	bmi.n	8006e44 <_printf_float+0x38c>
 8006dd2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006dd4:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006dd6:	eba3 020a 	sub.w	r2, r3, sl
 8006dda:	eba3 0901 	sub.w	r9, r3, r1
 8006dde:	4591      	cmp	r9, r2
 8006de0:	bfa8      	it	ge
 8006de2:	4691      	movge	r9, r2
 8006de4:	f1b9 0f00 	cmp.w	r9, #0
 8006de8:	dc34      	bgt.n	8006e54 <_printf_float+0x39c>
 8006dea:	f04f 0800 	mov.w	r8, #0
 8006dee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006df2:	f104 0a1a 	add.w	sl, r4, #26
 8006df6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006dfa:	1a9b      	subs	r3, r3, r2
 8006dfc:	eba3 0309 	sub.w	r3, r3, r9
 8006e00:	4543      	cmp	r3, r8
 8006e02:	f77f af7a 	ble.w	8006cfa <_printf_float+0x242>
 8006e06:	2301      	movs	r3, #1
 8006e08:	4652      	mov	r2, sl
 8006e0a:	4631      	mov	r1, r6
 8006e0c:	4628      	mov	r0, r5
 8006e0e:	47b8      	blx	r7
 8006e10:	3001      	adds	r0, #1
 8006e12:	f43f aeac 	beq.w	8006b6e <_printf_float+0xb6>
 8006e16:	f108 0801 	add.w	r8, r8, #1
 8006e1a:	e7ec      	b.n	8006df6 <_printf_float+0x33e>
 8006e1c:	4613      	mov	r3, r2
 8006e1e:	4631      	mov	r1, r6
 8006e20:	4642      	mov	r2, r8
 8006e22:	4628      	mov	r0, r5
 8006e24:	47b8      	blx	r7
 8006e26:	3001      	adds	r0, #1
 8006e28:	d1c0      	bne.n	8006dac <_printf_float+0x2f4>
 8006e2a:	e6a0      	b.n	8006b6e <_printf_float+0xb6>
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	4631      	mov	r1, r6
 8006e30:	4628      	mov	r0, r5
 8006e32:	920b      	str	r2, [sp, #44]	; 0x2c
 8006e34:	47b8      	blx	r7
 8006e36:	3001      	adds	r0, #1
 8006e38:	f43f ae99 	beq.w	8006b6e <_printf_float+0xb6>
 8006e3c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006e3e:	f10b 0b01 	add.w	fp, fp, #1
 8006e42:	e7b9      	b.n	8006db8 <_printf_float+0x300>
 8006e44:	4631      	mov	r1, r6
 8006e46:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006e4a:	4628      	mov	r0, r5
 8006e4c:	47b8      	blx	r7
 8006e4e:	3001      	adds	r0, #1
 8006e50:	d1bf      	bne.n	8006dd2 <_printf_float+0x31a>
 8006e52:	e68c      	b.n	8006b6e <_printf_float+0xb6>
 8006e54:	464b      	mov	r3, r9
 8006e56:	4631      	mov	r1, r6
 8006e58:	4628      	mov	r0, r5
 8006e5a:	eb08 020a 	add.w	r2, r8, sl
 8006e5e:	47b8      	blx	r7
 8006e60:	3001      	adds	r0, #1
 8006e62:	d1c2      	bne.n	8006dea <_printf_float+0x332>
 8006e64:	e683      	b.n	8006b6e <_printf_float+0xb6>
 8006e66:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006e68:	2a01      	cmp	r2, #1
 8006e6a:	dc01      	bgt.n	8006e70 <_printf_float+0x3b8>
 8006e6c:	07db      	lsls	r3, r3, #31
 8006e6e:	d537      	bpl.n	8006ee0 <_printf_float+0x428>
 8006e70:	2301      	movs	r3, #1
 8006e72:	4642      	mov	r2, r8
 8006e74:	4631      	mov	r1, r6
 8006e76:	4628      	mov	r0, r5
 8006e78:	47b8      	blx	r7
 8006e7a:	3001      	adds	r0, #1
 8006e7c:	f43f ae77 	beq.w	8006b6e <_printf_float+0xb6>
 8006e80:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006e84:	4631      	mov	r1, r6
 8006e86:	4628      	mov	r0, r5
 8006e88:	47b8      	blx	r7
 8006e8a:	3001      	adds	r0, #1
 8006e8c:	f43f ae6f 	beq.w	8006b6e <_printf_float+0xb6>
 8006e90:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006e94:	2200      	movs	r2, #0
 8006e96:	2300      	movs	r3, #0
 8006e98:	f7f9 fd90 	bl	80009bc <__aeabi_dcmpeq>
 8006e9c:	b9d8      	cbnz	r0, 8006ed6 <_printf_float+0x41e>
 8006e9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006ea0:	f108 0201 	add.w	r2, r8, #1
 8006ea4:	3b01      	subs	r3, #1
 8006ea6:	4631      	mov	r1, r6
 8006ea8:	4628      	mov	r0, r5
 8006eaa:	47b8      	blx	r7
 8006eac:	3001      	adds	r0, #1
 8006eae:	d10e      	bne.n	8006ece <_printf_float+0x416>
 8006eb0:	e65d      	b.n	8006b6e <_printf_float+0xb6>
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	464a      	mov	r2, r9
 8006eb6:	4631      	mov	r1, r6
 8006eb8:	4628      	mov	r0, r5
 8006eba:	47b8      	blx	r7
 8006ebc:	3001      	adds	r0, #1
 8006ebe:	f43f ae56 	beq.w	8006b6e <_printf_float+0xb6>
 8006ec2:	f108 0801 	add.w	r8, r8, #1
 8006ec6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006ec8:	3b01      	subs	r3, #1
 8006eca:	4543      	cmp	r3, r8
 8006ecc:	dcf1      	bgt.n	8006eb2 <_printf_float+0x3fa>
 8006ece:	4653      	mov	r3, sl
 8006ed0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006ed4:	e6e0      	b.n	8006c98 <_printf_float+0x1e0>
 8006ed6:	f04f 0800 	mov.w	r8, #0
 8006eda:	f104 091a 	add.w	r9, r4, #26
 8006ede:	e7f2      	b.n	8006ec6 <_printf_float+0x40e>
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	4642      	mov	r2, r8
 8006ee4:	e7df      	b.n	8006ea6 <_printf_float+0x3ee>
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	464a      	mov	r2, r9
 8006eea:	4631      	mov	r1, r6
 8006eec:	4628      	mov	r0, r5
 8006eee:	47b8      	blx	r7
 8006ef0:	3001      	adds	r0, #1
 8006ef2:	f43f ae3c 	beq.w	8006b6e <_printf_float+0xb6>
 8006ef6:	f108 0801 	add.w	r8, r8, #1
 8006efa:	68e3      	ldr	r3, [r4, #12]
 8006efc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006efe:	1a5b      	subs	r3, r3, r1
 8006f00:	4543      	cmp	r3, r8
 8006f02:	dcf0      	bgt.n	8006ee6 <_printf_float+0x42e>
 8006f04:	e6fd      	b.n	8006d02 <_printf_float+0x24a>
 8006f06:	f04f 0800 	mov.w	r8, #0
 8006f0a:	f104 0919 	add.w	r9, r4, #25
 8006f0e:	e7f4      	b.n	8006efa <_printf_float+0x442>

08006f10 <_printf_common>:
 8006f10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f14:	4616      	mov	r6, r2
 8006f16:	4699      	mov	r9, r3
 8006f18:	688a      	ldr	r2, [r1, #8]
 8006f1a:	690b      	ldr	r3, [r1, #16]
 8006f1c:	4607      	mov	r7, r0
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	bfb8      	it	lt
 8006f22:	4613      	movlt	r3, r2
 8006f24:	6033      	str	r3, [r6, #0]
 8006f26:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006f2a:	460c      	mov	r4, r1
 8006f2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006f30:	b10a      	cbz	r2, 8006f36 <_printf_common+0x26>
 8006f32:	3301      	adds	r3, #1
 8006f34:	6033      	str	r3, [r6, #0]
 8006f36:	6823      	ldr	r3, [r4, #0]
 8006f38:	0699      	lsls	r1, r3, #26
 8006f3a:	bf42      	ittt	mi
 8006f3c:	6833      	ldrmi	r3, [r6, #0]
 8006f3e:	3302      	addmi	r3, #2
 8006f40:	6033      	strmi	r3, [r6, #0]
 8006f42:	6825      	ldr	r5, [r4, #0]
 8006f44:	f015 0506 	ands.w	r5, r5, #6
 8006f48:	d106      	bne.n	8006f58 <_printf_common+0x48>
 8006f4a:	f104 0a19 	add.w	sl, r4, #25
 8006f4e:	68e3      	ldr	r3, [r4, #12]
 8006f50:	6832      	ldr	r2, [r6, #0]
 8006f52:	1a9b      	subs	r3, r3, r2
 8006f54:	42ab      	cmp	r3, r5
 8006f56:	dc28      	bgt.n	8006faa <_printf_common+0x9a>
 8006f58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006f5c:	1e13      	subs	r3, r2, #0
 8006f5e:	6822      	ldr	r2, [r4, #0]
 8006f60:	bf18      	it	ne
 8006f62:	2301      	movne	r3, #1
 8006f64:	0692      	lsls	r2, r2, #26
 8006f66:	d42d      	bmi.n	8006fc4 <_printf_common+0xb4>
 8006f68:	4649      	mov	r1, r9
 8006f6a:	4638      	mov	r0, r7
 8006f6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006f70:	47c0      	blx	r8
 8006f72:	3001      	adds	r0, #1
 8006f74:	d020      	beq.n	8006fb8 <_printf_common+0xa8>
 8006f76:	6823      	ldr	r3, [r4, #0]
 8006f78:	68e5      	ldr	r5, [r4, #12]
 8006f7a:	f003 0306 	and.w	r3, r3, #6
 8006f7e:	2b04      	cmp	r3, #4
 8006f80:	bf18      	it	ne
 8006f82:	2500      	movne	r5, #0
 8006f84:	6832      	ldr	r2, [r6, #0]
 8006f86:	f04f 0600 	mov.w	r6, #0
 8006f8a:	68a3      	ldr	r3, [r4, #8]
 8006f8c:	bf08      	it	eq
 8006f8e:	1aad      	subeq	r5, r5, r2
 8006f90:	6922      	ldr	r2, [r4, #16]
 8006f92:	bf08      	it	eq
 8006f94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	bfc4      	itt	gt
 8006f9c:	1a9b      	subgt	r3, r3, r2
 8006f9e:	18ed      	addgt	r5, r5, r3
 8006fa0:	341a      	adds	r4, #26
 8006fa2:	42b5      	cmp	r5, r6
 8006fa4:	d11a      	bne.n	8006fdc <_printf_common+0xcc>
 8006fa6:	2000      	movs	r0, #0
 8006fa8:	e008      	b.n	8006fbc <_printf_common+0xac>
 8006faa:	2301      	movs	r3, #1
 8006fac:	4652      	mov	r2, sl
 8006fae:	4649      	mov	r1, r9
 8006fb0:	4638      	mov	r0, r7
 8006fb2:	47c0      	blx	r8
 8006fb4:	3001      	adds	r0, #1
 8006fb6:	d103      	bne.n	8006fc0 <_printf_common+0xb0>
 8006fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8006fbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fc0:	3501      	adds	r5, #1
 8006fc2:	e7c4      	b.n	8006f4e <_printf_common+0x3e>
 8006fc4:	2030      	movs	r0, #48	; 0x30
 8006fc6:	18e1      	adds	r1, r4, r3
 8006fc8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006fcc:	1c5a      	adds	r2, r3, #1
 8006fce:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006fd2:	4422      	add	r2, r4
 8006fd4:	3302      	adds	r3, #2
 8006fd6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006fda:	e7c5      	b.n	8006f68 <_printf_common+0x58>
 8006fdc:	2301      	movs	r3, #1
 8006fde:	4622      	mov	r2, r4
 8006fe0:	4649      	mov	r1, r9
 8006fe2:	4638      	mov	r0, r7
 8006fe4:	47c0      	blx	r8
 8006fe6:	3001      	adds	r0, #1
 8006fe8:	d0e6      	beq.n	8006fb8 <_printf_common+0xa8>
 8006fea:	3601      	adds	r6, #1
 8006fec:	e7d9      	b.n	8006fa2 <_printf_common+0x92>
	...

08006ff0 <_printf_i>:
 8006ff0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ff4:	7e0f      	ldrb	r7, [r1, #24]
 8006ff6:	4691      	mov	r9, r2
 8006ff8:	2f78      	cmp	r7, #120	; 0x78
 8006ffa:	4680      	mov	r8, r0
 8006ffc:	460c      	mov	r4, r1
 8006ffe:	469a      	mov	sl, r3
 8007000:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007002:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007006:	d807      	bhi.n	8007018 <_printf_i+0x28>
 8007008:	2f62      	cmp	r7, #98	; 0x62
 800700a:	d80a      	bhi.n	8007022 <_printf_i+0x32>
 800700c:	2f00      	cmp	r7, #0
 800700e:	f000 80d9 	beq.w	80071c4 <_printf_i+0x1d4>
 8007012:	2f58      	cmp	r7, #88	; 0x58
 8007014:	f000 80a4 	beq.w	8007160 <_printf_i+0x170>
 8007018:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800701c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007020:	e03a      	b.n	8007098 <_printf_i+0xa8>
 8007022:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007026:	2b15      	cmp	r3, #21
 8007028:	d8f6      	bhi.n	8007018 <_printf_i+0x28>
 800702a:	a101      	add	r1, pc, #4	; (adr r1, 8007030 <_printf_i+0x40>)
 800702c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007030:	08007089 	.word	0x08007089
 8007034:	0800709d 	.word	0x0800709d
 8007038:	08007019 	.word	0x08007019
 800703c:	08007019 	.word	0x08007019
 8007040:	08007019 	.word	0x08007019
 8007044:	08007019 	.word	0x08007019
 8007048:	0800709d 	.word	0x0800709d
 800704c:	08007019 	.word	0x08007019
 8007050:	08007019 	.word	0x08007019
 8007054:	08007019 	.word	0x08007019
 8007058:	08007019 	.word	0x08007019
 800705c:	080071ab 	.word	0x080071ab
 8007060:	080070cd 	.word	0x080070cd
 8007064:	0800718d 	.word	0x0800718d
 8007068:	08007019 	.word	0x08007019
 800706c:	08007019 	.word	0x08007019
 8007070:	080071cd 	.word	0x080071cd
 8007074:	08007019 	.word	0x08007019
 8007078:	080070cd 	.word	0x080070cd
 800707c:	08007019 	.word	0x08007019
 8007080:	08007019 	.word	0x08007019
 8007084:	08007195 	.word	0x08007195
 8007088:	682b      	ldr	r3, [r5, #0]
 800708a:	1d1a      	adds	r2, r3, #4
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	602a      	str	r2, [r5, #0]
 8007090:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007094:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007098:	2301      	movs	r3, #1
 800709a:	e0a4      	b.n	80071e6 <_printf_i+0x1f6>
 800709c:	6820      	ldr	r0, [r4, #0]
 800709e:	6829      	ldr	r1, [r5, #0]
 80070a0:	0606      	lsls	r6, r0, #24
 80070a2:	f101 0304 	add.w	r3, r1, #4
 80070a6:	d50a      	bpl.n	80070be <_printf_i+0xce>
 80070a8:	680e      	ldr	r6, [r1, #0]
 80070aa:	602b      	str	r3, [r5, #0]
 80070ac:	2e00      	cmp	r6, #0
 80070ae:	da03      	bge.n	80070b8 <_printf_i+0xc8>
 80070b0:	232d      	movs	r3, #45	; 0x2d
 80070b2:	4276      	negs	r6, r6
 80070b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80070b8:	230a      	movs	r3, #10
 80070ba:	485e      	ldr	r0, [pc, #376]	; (8007234 <_printf_i+0x244>)
 80070bc:	e019      	b.n	80070f2 <_printf_i+0x102>
 80070be:	680e      	ldr	r6, [r1, #0]
 80070c0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80070c4:	602b      	str	r3, [r5, #0]
 80070c6:	bf18      	it	ne
 80070c8:	b236      	sxthne	r6, r6
 80070ca:	e7ef      	b.n	80070ac <_printf_i+0xbc>
 80070cc:	682b      	ldr	r3, [r5, #0]
 80070ce:	6820      	ldr	r0, [r4, #0]
 80070d0:	1d19      	adds	r1, r3, #4
 80070d2:	6029      	str	r1, [r5, #0]
 80070d4:	0601      	lsls	r1, r0, #24
 80070d6:	d501      	bpl.n	80070dc <_printf_i+0xec>
 80070d8:	681e      	ldr	r6, [r3, #0]
 80070da:	e002      	b.n	80070e2 <_printf_i+0xf2>
 80070dc:	0646      	lsls	r6, r0, #25
 80070de:	d5fb      	bpl.n	80070d8 <_printf_i+0xe8>
 80070e0:	881e      	ldrh	r6, [r3, #0]
 80070e2:	2f6f      	cmp	r7, #111	; 0x6f
 80070e4:	bf0c      	ite	eq
 80070e6:	2308      	moveq	r3, #8
 80070e8:	230a      	movne	r3, #10
 80070ea:	4852      	ldr	r0, [pc, #328]	; (8007234 <_printf_i+0x244>)
 80070ec:	2100      	movs	r1, #0
 80070ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80070f2:	6865      	ldr	r5, [r4, #4]
 80070f4:	2d00      	cmp	r5, #0
 80070f6:	bfa8      	it	ge
 80070f8:	6821      	ldrge	r1, [r4, #0]
 80070fa:	60a5      	str	r5, [r4, #8]
 80070fc:	bfa4      	itt	ge
 80070fe:	f021 0104 	bicge.w	r1, r1, #4
 8007102:	6021      	strge	r1, [r4, #0]
 8007104:	b90e      	cbnz	r6, 800710a <_printf_i+0x11a>
 8007106:	2d00      	cmp	r5, #0
 8007108:	d04d      	beq.n	80071a6 <_printf_i+0x1b6>
 800710a:	4615      	mov	r5, r2
 800710c:	fbb6 f1f3 	udiv	r1, r6, r3
 8007110:	fb03 6711 	mls	r7, r3, r1, r6
 8007114:	5dc7      	ldrb	r7, [r0, r7]
 8007116:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800711a:	4637      	mov	r7, r6
 800711c:	42bb      	cmp	r3, r7
 800711e:	460e      	mov	r6, r1
 8007120:	d9f4      	bls.n	800710c <_printf_i+0x11c>
 8007122:	2b08      	cmp	r3, #8
 8007124:	d10b      	bne.n	800713e <_printf_i+0x14e>
 8007126:	6823      	ldr	r3, [r4, #0]
 8007128:	07de      	lsls	r6, r3, #31
 800712a:	d508      	bpl.n	800713e <_printf_i+0x14e>
 800712c:	6923      	ldr	r3, [r4, #16]
 800712e:	6861      	ldr	r1, [r4, #4]
 8007130:	4299      	cmp	r1, r3
 8007132:	bfde      	ittt	le
 8007134:	2330      	movle	r3, #48	; 0x30
 8007136:	f805 3c01 	strble.w	r3, [r5, #-1]
 800713a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800713e:	1b52      	subs	r2, r2, r5
 8007140:	6122      	str	r2, [r4, #16]
 8007142:	464b      	mov	r3, r9
 8007144:	4621      	mov	r1, r4
 8007146:	4640      	mov	r0, r8
 8007148:	f8cd a000 	str.w	sl, [sp]
 800714c:	aa03      	add	r2, sp, #12
 800714e:	f7ff fedf 	bl	8006f10 <_printf_common>
 8007152:	3001      	adds	r0, #1
 8007154:	d14c      	bne.n	80071f0 <_printf_i+0x200>
 8007156:	f04f 30ff 	mov.w	r0, #4294967295
 800715a:	b004      	add	sp, #16
 800715c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007160:	4834      	ldr	r0, [pc, #208]	; (8007234 <_printf_i+0x244>)
 8007162:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007166:	6829      	ldr	r1, [r5, #0]
 8007168:	6823      	ldr	r3, [r4, #0]
 800716a:	f851 6b04 	ldr.w	r6, [r1], #4
 800716e:	6029      	str	r1, [r5, #0]
 8007170:	061d      	lsls	r5, r3, #24
 8007172:	d514      	bpl.n	800719e <_printf_i+0x1ae>
 8007174:	07df      	lsls	r7, r3, #31
 8007176:	bf44      	itt	mi
 8007178:	f043 0320 	orrmi.w	r3, r3, #32
 800717c:	6023      	strmi	r3, [r4, #0]
 800717e:	b91e      	cbnz	r6, 8007188 <_printf_i+0x198>
 8007180:	6823      	ldr	r3, [r4, #0]
 8007182:	f023 0320 	bic.w	r3, r3, #32
 8007186:	6023      	str	r3, [r4, #0]
 8007188:	2310      	movs	r3, #16
 800718a:	e7af      	b.n	80070ec <_printf_i+0xfc>
 800718c:	6823      	ldr	r3, [r4, #0]
 800718e:	f043 0320 	orr.w	r3, r3, #32
 8007192:	6023      	str	r3, [r4, #0]
 8007194:	2378      	movs	r3, #120	; 0x78
 8007196:	4828      	ldr	r0, [pc, #160]	; (8007238 <_printf_i+0x248>)
 8007198:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800719c:	e7e3      	b.n	8007166 <_printf_i+0x176>
 800719e:	0659      	lsls	r1, r3, #25
 80071a0:	bf48      	it	mi
 80071a2:	b2b6      	uxthmi	r6, r6
 80071a4:	e7e6      	b.n	8007174 <_printf_i+0x184>
 80071a6:	4615      	mov	r5, r2
 80071a8:	e7bb      	b.n	8007122 <_printf_i+0x132>
 80071aa:	682b      	ldr	r3, [r5, #0]
 80071ac:	6826      	ldr	r6, [r4, #0]
 80071ae:	1d18      	adds	r0, r3, #4
 80071b0:	6961      	ldr	r1, [r4, #20]
 80071b2:	6028      	str	r0, [r5, #0]
 80071b4:	0635      	lsls	r5, r6, #24
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	d501      	bpl.n	80071be <_printf_i+0x1ce>
 80071ba:	6019      	str	r1, [r3, #0]
 80071bc:	e002      	b.n	80071c4 <_printf_i+0x1d4>
 80071be:	0670      	lsls	r0, r6, #25
 80071c0:	d5fb      	bpl.n	80071ba <_printf_i+0x1ca>
 80071c2:	8019      	strh	r1, [r3, #0]
 80071c4:	2300      	movs	r3, #0
 80071c6:	4615      	mov	r5, r2
 80071c8:	6123      	str	r3, [r4, #16]
 80071ca:	e7ba      	b.n	8007142 <_printf_i+0x152>
 80071cc:	682b      	ldr	r3, [r5, #0]
 80071ce:	2100      	movs	r1, #0
 80071d0:	1d1a      	adds	r2, r3, #4
 80071d2:	602a      	str	r2, [r5, #0]
 80071d4:	681d      	ldr	r5, [r3, #0]
 80071d6:	6862      	ldr	r2, [r4, #4]
 80071d8:	4628      	mov	r0, r5
 80071da:	f002 f98d 	bl	80094f8 <memchr>
 80071de:	b108      	cbz	r0, 80071e4 <_printf_i+0x1f4>
 80071e0:	1b40      	subs	r0, r0, r5
 80071e2:	6060      	str	r0, [r4, #4]
 80071e4:	6863      	ldr	r3, [r4, #4]
 80071e6:	6123      	str	r3, [r4, #16]
 80071e8:	2300      	movs	r3, #0
 80071ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80071ee:	e7a8      	b.n	8007142 <_printf_i+0x152>
 80071f0:	462a      	mov	r2, r5
 80071f2:	4649      	mov	r1, r9
 80071f4:	4640      	mov	r0, r8
 80071f6:	6923      	ldr	r3, [r4, #16]
 80071f8:	47d0      	blx	sl
 80071fa:	3001      	adds	r0, #1
 80071fc:	d0ab      	beq.n	8007156 <_printf_i+0x166>
 80071fe:	6823      	ldr	r3, [r4, #0]
 8007200:	079b      	lsls	r3, r3, #30
 8007202:	d413      	bmi.n	800722c <_printf_i+0x23c>
 8007204:	68e0      	ldr	r0, [r4, #12]
 8007206:	9b03      	ldr	r3, [sp, #12]
 8007208:	4298      	cmp	r0, r3
 800720a:	bfb8      	it	lt
 800720c:	4618      	movlt	r0, r3
 800720e:	e7a4      	b.n	800715a <_printf_i+0x16a>
 8007210:	2301      	movs	r3, #1
 8007212:	4632      	mov	r2, r6
 8007214:	4649      	mov	r1, r9
 8007216:	4640      	mov	r0, r8
 8007218:	47d0      	blx	sl
 800721a:	3001      	adds	r0, #1
 800721c:	d09b      	beq.n	8007156 <_printf_i+0x166>
 800721e:	3501      	adds	r5, #1
 8007220:	68e3      	ldr	r3, [r4, #12]
 8007222:	9903      	ldr	r1, [sp, #12]
 8007224:	1a5b      	subs	r3, r3, r1
 8007226:	42ab      	cmp	r3, r5
 8007228:	dcf2      	bgt.n	8007210 <_printf_i+0x220>
 800722a:	e7eb      	b.n	8007204 <_printf_i+0x214>
 800722c:	2500      	movs	r5, #0
 800722e:	f104 0619 	add.w	r6, r4, #25
 8007232:	e7f5      	b.n	8007220 <_printf_i+0x230>
 8007234:	0800b176 	.word	0x0800b176
 8007238:	0800b187 	.word	0x0800b187

0800723c <siprintf>:
 800723c:	b40e      	push	{r1, r2, r3}
 800723e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007242:	b500      	push	{lr}
 8007244:	b09c      	sub	sp, #112	; 0x70
 8007246:	ab1d      	add	r3, sp, #116	; 0x74
 8007248:	9002      	str	r0, [sp, #8]
 800724a:	9006      	str	r0, [sp, #24]
 800724c:	9107      	str	r1, [sp, #28]
 800724e:	9104      	str	r1, [sp, #16]
 8007250:	4808      	ldr	r0, [pc, #32]	; (8007274 <siprintf+0x38>)
 8007252:	4909      	ldr	r1, [pc, #36]	; (8007278 <siprintf+0x3c>)
 8007254:	f853 2b04 	ldr.w	r2, [r3], #4
 8007258:	9105      	str	r1, [sp, #20]
 800725a:	6800      	ldr	r0, [r0, #0]
 800725c:	a902      	add	r1, sp, #8
 800725e:	9301      	str	r3, [sp, #4]
 8007260:	f002 ff5c 	bl	800a11c <_svfiprintf_r>
 8007264:	2200      	movs	r2, #0
 8007266:	9b02      	ldr	r3, [sp, #8]
 8007268:	701a      	strb	r2, [r3, #0]
 800726a:	b01c      	add	sp, #112	; 0x70
 800726c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007270:	b003      	add	sp, #12
 8007272:	4770      	bx	lr
 8007274:	2000021c 	.word	0x2000021c
 8007278:	ffff0208 	.word	0xffff0208

0800727c <strcat>:
 800727c:	4602      	mov	r2, r0
 800727e:	b510      	push	{r4, lr}
 8007280:	7814      	ldrb	r4, [r2, #0]
 8007282:	4613      	mov	r3, r2
 8007284:	3201      	adds	r2, #1
 8007286:	2c00      	cmp	r4, #0
 8007288:	d1fa      	bne.n	8007280 <strcat+0x4>
 800728a:	3b01      	subs	r3, #1
 800728c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007290:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007294:	2a00      	cmp	r2, #0
 8007296:	d1f9      	bne.n	800728c <strcat+0x10>
 8007298:	bd10      	pop	{r4, pc}

0800729a <strcpy>:
 800729a:	4603      	mov	r3, r0
 800729c:	f811 2b01 	ldrb.w	r2, [r1], #1
 80072a0:	f803 2b01 	strb.w	r2, [r3], #1
 80072a4:	2a00      	cmp	r2, #0
 80072a6:	d1f9      	bne.n	800729c <strcpy+0x2>
 80072a8:	4770      	bx	lr

080072aa <sulp>:
 80072aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072ae:	460f      	mov	r7, r1
 80072b0:	4690      	mov	r8, r2
 80072b2:	f002 fc9f 	bl	8009bf4 <__ulp>
 80072b6:	4604      	mov	r4, r0
 80072b8:	460d      	mov	r5, r1
 80072ba:	f1b8 0f00 	cmp.w	r8, #0
 80072be:	d011      	beq.n	80072e4 <sulp+0x3a>
 80072c0:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80072c4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	dd0b      	ble.n	80072e4 <sulp+0x3a>
 80072cc:	2400      	movs	r4, #0
 80072ce:	051b      	lsls	r3, r3, #20
 80072d0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80072d4:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80072d8:	4622      	mov	r2, r4
 80072da:	462b      	mov	r3, r5
 80072dc:	f7f9 f906 	bl	80004ec <__aeabi_dmul>
 80072e0:	4604      	mov	r4, r0
 80072e2:	460d      	mov	r5, r1
 80072e4:	4620      	mov	r0, r4
 80072e6:	4629      	mov	r1, r5
 80072e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072ec:	0000      	movs	r0, r0
	...

080072f0 <_strtod_l>:
 80072f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072f4:	469b      	mov	fp, r3
 80072f6:	2300      	movs	r3, #0
 80072f8:	b09f      	sub	sp, #124	; 0x7c
 80072fa:	931a      	str	r3, [sp, #104]	; 0x68
 80072fc:	4b9e      	ldr	r3, [pc, #632]	; (8007578 <_strtod_l+0x288>)
 80072fe:	4682      	mov	sl, r0
 8007300:	681f      	ldr	r7, [r3, #0]
 8007302:	460e      	mov	r6, r1
 8007304:	4638      	mov	r0, r7
 8007306:	9215      	str	r2, [sp, #84]	; 0x54
 8007308:	f7f8 ff2c 	bl	8000164 <strlen>
 800730c:	f04f 0800 	mov.w	r8, #0
 8007310:	4604      	mov	r4, r0
 8007312:	f04f 0900 	mov.w	r9, #0
 8007316:	9619      	str	r6, [sp, #100]	; 0x64
 8007318:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800731a:	781a      	ldrb	r2, [r3, #0]
 800731c:	2a2b      	cmp	r2, #43	; 0x2b
 800731e:	d04c      	beq.n	80073ba <_strtod_l+0xca>
 8007320:	d83a      	bhi.n	8007398 <_strtod_l+0xa8>
 8007322:	2a0d      	cmp	r2, #13
 8007324:	d833      	bhi.n	800738e <_strtod_l+0x9e>
 8007326:	2a08      	cmp	r2, #8
 8007328:	d833      	bhi.n	8007392 <_strtod_l+0xa2>
 800732a:	2a00      	cmp	r2, #0
 800732c:	d03d      	beq.n	80073aa <_strtod_l+0xba>
 800732e:	2300      	movs	r3, #0
 8007330:	930a      	str	r3, [sp, #40]	; 0x28
 8007332:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8007334:	782b      	ldrb	r3, [r5, #0]
 8007336:	2b30      	cmp	r3, #48	; 0x30
 8007338:	f040 80aa 	bne.w	8007490 <_strtod_l+0x1a0>
 800733c:	786b      	ldrb	r3, [r5, #1]
 800733e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007342:	2b58      	cmp	r3, #88	; 0x58
 8007344:	d166      	bne.n	8007414 <_strtod_l+0x124>
 8007346:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007348:	4650      	mov	r0, sl
 800734a:	9301      	str	r3, [sp, #4]
 800734c:	ab1a      	add	r3, sp, #104	; 0x68
 800734e:	9300      	str	r3, [sp, #0]
 8007350:	4a8a      	ldr	r2, [pc, #552]	; (800757c <_strtod_l+0x28c>)
 8007352:	f8cd b008 	str.w	fp, [sp, #8]
 8007356:	ab1b      	add	r3, sp, #108	; 0x6c
 8007358:	a919      	add	r1, sp, #100	; 0x64
 800735a:	f001 fdb1 	bl	8008ec0 <__gethex>
 800735e:	f010 0607 	ands.w	r6, r0, #7
 8007362:	4604      	mov	r4, r0
 8007364:	d005      	beq.n	8007372 <_strtod_l+0x82>
 8007366:	2e06      	cmp	r6, #6
 8007368:	d129      	bne.n	80073be <_strtod_l+0xce>
 800736a:	2300      	movs	r3, #0
 800736c:	3501      	adds	r5, #1
 800736e:	9519      	str	r5, [sp, #100]	; 0x64
 8007370:	930a      	str	r3, [sp, #40]	; 0x28
 8007372:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007374:	2b00      	cmp	r3, #0
 8007376:	f040 858a 	bne.w	8007e8e <_strtod_l+0xb9e>
 800737a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800737c:	b1d3      	cbz	r3, 80073b4 <_strtod_l+0xc4>
 800737e:	4642      	mov	r2, r8
 8007380:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007384:	4610      	mov	r0, r2
 8007386:	4619      	mov	r1, r3
 8007388:	b01f      	add	sp, #124	; 0x7c
 800738a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800738e:	2a20      	cmp	r2, #32
 8007390:	d1cd      	bne.n	800732e <_strtod_l+0x3e>
 8007392:	3301      	adds	r3, #1
 8007394:	9319      	str	r3, [sp, #100]	; 0x64
 8007396:	e7bf      	b.n	8007318 <_strtod_l+0x28>
 8007398:	2a2d      	cmp	r2, #45	; 0x2d
 800739a:	d1c8      	bne.n	800732e <_strtod_l+0x3e>
 800739c:	2201      	movs	r2, #1
 800739e:	920a      	str	r2, [sp, #40]	; 0x28
 80073a0:	1c5a      	adds	r2, r3, #1
 80073a2:	9219      	str	r2, [sp, #100]	; 0x64
 80073a4:	785b      	ldrb	r3, [r3, #1]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d1c3      	bne.n	8007332 <_strtod_l+0x42>
 80073aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80073ac:	9619      	str	r6, [sp, #100]	; 0x64
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	f040 856b 	bne.w	8007e8a <_strtod_l+0xb9a>
 80073b4:	4642      	mov	r2, r8
 80073b6:	464b      	mov	r3, r9
 80073b8:	e7e4      	b.n	8007384 <_strtod_l+0x94>
 80073ba:	2200      	movs	r2, #0
 80073bc:	e7ef      	b.n	800739e <_strtod_l+0xae>
 80073be:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80073c0:	b13a      	cbz	r2, 80073d2 <_strtod_l+0xe2>
 80073c2:	2135      	movs	r1, #53	; 0x35
 80073c4:	a81c      	add	r0, sp, #112	; 0x70
 80073c6:	f002 fd19 	bl	8009dfc <__copybits>
 80073ca:	4650      	mov	r0, sl
 80073cc:	991a      	ldr	r1, [sp, #104]	; 0x68
 80073ce:	f002 f8e1 	bl	8009594 <_Bfree>
 80073d2:	3e01      	subs	r6, #1
 80073d4:	2e04      	cmp	r6, #4
 80073d6:	d806      	bhi.n	80073e6 <_strtod_l+0xf6>
 80073d8:	e8df f006 	tbb	[pc, r6]
 80073dc:	1714030a 	.word	0x1714030a
 80073e0:	0a          	.byte	0x0a
 80073e1:	00          	.byte	0x00
 80073e2:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 80073e6:	0721      	lsls	r1, r4, #28
 80073e8:	d5c3      	bpl.n	8007372 <_strtod_l+0x82>
 80073ea:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 80073ee:	e7c0      	b.n	8007372 <_strtod_l+0x82>
 80073f0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80073f2:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 80073f6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80073fa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80073fe:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8007402:	e7f0      	b.n	80073e6 <_strtod_l+0xf6>
 8007404:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8007580 <_strtod_l+0x290>
 8007408:	e7ed      	b.n	80073e6 <_strtod_l+0xf6>
 800740a:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800740e:	f04f 38ff 	mov.w	r8, #4294967295
 8007412:	e7e8      	b.n	80073e6 <_strtod_l+0xf6>
 8007414:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007416:	1c5a      	adds	r2, r3, #1
 8007418:	9219      	str	r2, [sp, #100]	; 0x64
 800741a:	785b      	ldrb	r3, [r3, #1]
 800741c:	2b30      	cmp	r3, #48	; 0x30
 800741e:	d0f9      	beq.n	8007414 <_strtod_l+0x124>
 8007420:	2b00      	cmp	r3, #0
 8007422:	d0a6      	beq.n	8007372 <_strtod_l+0x82>
 8007424:	2301      	movs	r3, #1
 8007426:	9307      	str	r3, [sp, #28]
 8007428:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800742a:	220a      	movs	r2, #10
 800742c:	9308      	str	r3, [sp, #32]
 800742e:	2300      	movs	r3, #0
 8007430:	469b      	mov	fp, r3
 8007432:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8007436:	9819      	ldr	r0, [sp, #100]	; 0x64
 8007438:	7805      	ldrb	r5, [r0, #0]
 800743a:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800743e:	b2d9      	uxtb	r1, r3
 8007440:	2909      	cmp	r1, #9
 8007442:	d927      	bls.n	8007494 <_strtod_l+0x1a4>
 8007444:	4622      	mov	r2, r4
 8007446:	4639      	mov	r1, r7
 8007448:	f003 f8d6 	bl	800a5f8 <strncmp>
 800744c:	2800      	cmp	r0, #0
 800744e:	d033      	beq.n	80074b8 <_strtod_l+0x1c8>
 8007450:	2000      	movs	r0, #0
 8007452:	462a      	mov	r2, r5
 8007454:	465c      	mov	r4, fp
 8007456:	4603      	mov	r3, r0
 8007458:	9004      	str	r0, [sp, #16]
 800745a:	2a65      	cmp	r2, #101	; 0x65
 800745c:	d001      	beq.n	8007462 <_strtod_l+0x172>
 800745e:	2a45      	cmp	r2, #69	; 0x45
 8007460:	d114      	bne.n	800748c <_strtod_l+0x19c>
 8007462:	b91c      	cbnz	r4, 800746c <_strtod_l+0x17c>
 8007464:	9a07      	ldr	r2, [sp, #28]
 8007466:	4302      	orrs	r2, r0
 8007468:	d09f      	beq.n	80073aa <_strtod_l+0xba>
 800746a:	2400      	movs	r4, #0
 800746c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800746e:	1c72      	adds	r2, r6, #1
 8007470:	9219      	str	r2, [sp, #100]	; 0x64
 8007472:	7872      	ldrb	r2, [r6, #1]
 8007474:	2a2b      	cmp	r2, #43	; 0x2b
 8007476:	d079      	beq.n	800756c <_strtod_l+0x27c>
 8007478:	2a2d      	cmp	r2, #45	; 0x2d
 800747a:	f000 8083 	beq.w	8007584 <_strtod_l+0x294>
 800747e:	2700      	movs	r7, #0
 8007480:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007484:	2909      	cmp	r1, #9
 8007486:	f240 8083 	bls.w	8007590 <_strtod_l+0x2a0>
 800748a:	9619      	str	r6, [sp, #100]	; 0x64
 800748c:	2500      	movs	r5, #0
 800748e:	e09f      	b.n	80075d0 <_strtod_l+0x2e0>
 8007490:	2300      	movs	r3, #0
 8007492:	e7c8      	b.n	8007426 <_strtod_l+0x136>
 8007494:	f1bb 0f08 	cmp.w	fp, #8
 8007498:	bfd5      	itete	le
 800749a:	9906      	ldrle	r1, [sp, #24]
 800749c:	9905      	ldrgt	r1, [sp, #20]
 800749e:	fb02 3301 	mlale	r3, r2, r1, r3
 80074a2:	fb02 3301 	mlagt	r3, r2, r1, r3
 80074a6:	f100 0001 	add.w	r0, r0, #1
 80074aa:	bfd4      	ite	le
 80074ac:	9306      	strle	r3, [sp, #24]
 80074ae:	9305      	strgt	r3, [sp, #20]
 80074b0:	f10b 0b01 	add.w	fp, fp, #1
 80074b4:	9019      	str	r0, [sp, #100]	; 0x64
 80074b6:	e7be      	b.n	8007436 <_strtod_l+0x146>
 80074b8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80074ba:	191a      	adds	r2, r3, r4
 80074bc:	9219      	str	r2, [sp, #100]	; 0x64
 80074be:	5d1a      	ldrb	r2, [r3, r4]
 80074c0:	f1bb 0f00 	cmp.w	fp, #0
 80074c4:	d036      	beq.n	8007534 <_strtod_l+0x244>
 80074c6:	465c      	mov	r4, fp
 80074c8:	9004      	str	r0, [sp, #16]
 80074ca:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80074ce:	2b09      	cmp	r3, #9
 80074d0:	d912      	bls.n	80074f8 <_strtod_l+0x208>
 80074d2:	2301      	movs	r3, #1
 80074d4:	e7c1      	b.n	800745a <_strtod_l+0x16a>
 80074d6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80074d8:	3001      	adds	r0, #1
 80074da:	1c5a      	adds	r2, r3, #1
 80074dc:	9219      	str	r2, [sp, #100]	; 0x64
 80074de:	785a      	ldrb	r2, [r3, #1]
 80074e0:	2a30      	cmp	r2, #48	; 0x30
 80074e2:	d0f8      	beq.n	80074d6 <_strtod_l+0x1e6>
 80074e4:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80074e8:	2b08      	cmp	r3, #8
 80074ea:	f200 84d5 	bhi.w	8007e98 <_strtod_l+0xba8>
 80074ee:	9004      	str	r0, [sp, #16]
 80074f0:	2000      	movs	r0, #0
 80074f2:	4604      	mov	r4, r0
 80074f4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80074f6:	9308      	str	r3, [sp, #32]
 80074f8:	3a30      	subs	r2, #48	; 0x30
 80074fa:	f100 0301 	add.w	r3, r0, #1
 80074fe:	d013      	beq.n	8007528 <_strtod_l+0x238>
 8007500:	9904      	ldr	r1, [sp, #16]
 8007502:	1905      	adds	r5, r0, r4
 8007504:	4419      	add	r1, r3
 8007506:	9104      	str	r1, [sp, #16]
 8007508:	4623      	mov	r3, r4
 800750a:	210a      	movs	r1, #10
 800750c:	42ab      	cmp	r3, r5
 800750e:	d113      	bne.n	8007538 <_strtod_l+0x248>
 8007510:	1823      	adds	r3, r4, r0
 8007512:	2b08      	cmp	r3, #8
 8007514:	f104 0401 	add.w	r4, r4, #1
 8007518:	4404      	add	r4, r0
 800751a:	dc1b      	bgt.n	8007554 <_strtod_l+0x264>
 800751c:	230a      	movs	r3, #10
 800751e:	9906      	ldr	r1, [sp, #24]
 8007520:	fb03 2301 	mla	r3, r3, r1, r2
 8007524:	9306      	str	r3, [sp, #24]
 8007526:	2300      	movs	r3, #0
 8007528:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800752a:	4618      	mov	r0, r3
 800752c:	1c51      	adds	r1, r2, #1
 800752e:	9119      	str	r1, [sp, #100]	; 0x64
 8007530:	7852      	ldrb	r2, [r2, #1]
 8007532:	e7ca      	b.n	80074ca <_strtod_l+0x1da>
 8007534:	4658      	mov	r0, fp
 8007536:	e7d3      	b.n	80074e0 <_strtod_l+0x1f0>
 8007538:	2b08      	cmp	r3, #8
 800753a:	dc04      	bgt.n	8007546 <_strtod_l+0x256>
 800753c:	9f06      	ldr	r7, [sp, #24]
 800753e:	434f      	muls	r7, r1
 8007540:	9706      	str	r7, [sp, #24]
 8007542:	3301      	adds	r3, #1
 8007544:	e7e2      	b.n	800750c <_strtod_l+0x21c>
 8007546:	1c5f      	adds	r7, r3, #1
 8007548:	2f10      	cmp	r7, #16
 800754a:	bfde      	ittt	le
 800754c:	9f05      	ldrle	r7, [sp, #20]
 800754e:	434f      	mulle	r7, r1
 8007550:	9705      	strle	r7, [sp, #20]
 8007552:	e7f6      	b.n	8007542 <_strtod_l+0x252>
 8007554:	2c10      	cmp	r4, #16
 8007556:	bfdf      	itttt	le
 8007558:	230a      	movle	r3, #10
 800755a:	9905      	ldrle	r1, [sp, #20]
 800755c:	fb03 2301 	mlale	r3, r3, r1, r2
 8007560:	9305      	strle	r3, [sp, #20]
 8007562:	e7e0      	b.n	8007526 <_strtod_l+0x236>
 8007564:	2300      	movs	r3, #0
 8007566:	9304      	str	r3, [sp, #16]
 8007568:	2301      	movs	r3, #1
 800756a:	e77b      	b.n	8007464 <_strtod_l+0x174>
 800756c:	2700      	movs	r7, #0
 800756e:	1cb2      	adds	r2, r6, #2
 8007570:	9219      	str	r2, [sp, #100]	; 0x64
 8007572:	78b2      	ldrb	r2, [r6, #2]
 8007574:	e784      	b.n	8007480 <_strtod_l+0x190>
 8007576:	bf00      	nop
 8007578:	0800b478 	.word	0x0800b478
 800757c:	0800b198 	.word	0x0800b198
 8007580:	7ff00000 	.word	0x7ff00000
 8007584:	2701      	movs	r7, #1
 8007586:	e7f2      	b.n	800756e <_strtod_l+0x27e>
 8007588:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800758a:	1c51      	adds	r1, r2, #1
 800758c:	9119      	str	r1, [sp, #100]	; 0x64
 800758e:	7852      	ldrb	r2, [r2, #1]
 8007590:	2a30      	cmp	r2, #48	; 0x30
 8007592:	d0f9      	beq.n	8007588 <_strtod_l+0x298>
 8007594:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007598:	2908      	cmp	r1, #8
 800759a:	f63f af77 	bhi.w	800748c <_strtod_l+0x19c>
 800759e:	f04f 0e0a 	mov.w	lr, #10
 80075a2:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 80075a6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80075a8:	9209      	str	r2, [sp, #36]	; 0x24
 80075aa:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80075ac:	1c51      	adds	r1, r2, #1
 80075ae:	9119      	str	r1, [sp, #100]	; 0x64
 80075b0:	7852      	ldrb	r2, [r2, #1]
 80075b2:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 80075b6:	2d09      	cmp	r5, #9
 80075b8:	d935      	bls.n	8007626 <_strtod_l+0x336>
 80075ba:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80075bc:	1b49      	subs	r1, r1, r5
 80075be:	2908      	cmp	r1, #8
 80075c0:	f644 651f 	movw	r5, #19999	; 0x4e1f
 80075c4:	dc02      	bgt.n	80075cc <_strtod_l+0x2dc>
 80075c6:	4565      	cmp	r5, ip
 80075c8:	bfa8      	it	ge
 80075ca:	4665      	movge	r5, ip
 80075cc:	b107      	cbz	r7, 80075d0 <_strtod_l+0x2e0>
 80075ce:	426d      	negs	r5, r5
 80075d0:	2c00      	cmp	r4, #0
 80075d2:	d14c      	bne.n	800766e <_strtod_l+0x37e>
 80075d4:	9907      	ldr	r1, [sp, #28]
 80075d6:	4301      	orrs	r1, r0
 80075d8:	f47f aecb 	bne.w	8007372 <_strtod_l+0x82>
 80075dc:	2b00      	cmp	r3, #0
 80075de:	f47f aee4 	bne.w	80073aa <_strtod_l+0xba>
 80075e2:	2a69      	cmp	r2, #105	; 0x69
 80075e4:	d026      	beq.n	8007634 <_strtod_l+0x344>
 80075e6:	dc23      	bgt.n	8007630 <_strtod_l+0x340>
 80075e8:	2a49      	cmp	r2, #73	; 0x49
 80075ea:	d023      	beq.n	8007634 <_strtod_l+0x344>
 80075ec:	2a4e      	cmp	r2, #78	; 0x4e
 80075ee:	f47f aedc 	bne.w	80073aa <_strtod_l+0xba>
 80075f2:	499d      	ldr	r1, [pc, #628]	; (8007868 <_strtod_l+0x578>)
 80075f4:	a819      	add	r0, sp, #100	; 0x64
 80075f6:	f001 feb1 	bl	800935c <__match>
 80075fa:	2800      	cmp	r0, #0
 80075fc:	f43f aed5 	beq.w	80073aa <_strtod_l+0xba>
 8007600:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007602:	781b      	ldrb	r3, [r3, #0]
 8007604:	2b28      	cmp	r3, #40	; 0x28
 8007606:	d12c      	bne.n	8007662 <_strtod_l+0x372>
 8007608:	4998      	ldr	r1, [pc, #608]	; (800786c <_strtod_l+0x57c>)
 800760a:	aa1c      	add	r2, sp, #112	; 0x70
 800760c:	a819      	add	r0, sp, #100	; 0x64
 800760e:	f001 feb9 	bl	8009384 <__hexnan>
 8007612:	2805      	cmp	r0, #5
 8007614:	d125      	bne.n	8007662 <_strtod_l+0x372>
 8007616:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007618:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800761c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007620:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8007624:	e6a5      	b.n	8007372 <_strtod_l+0x82>
 8007626:	fb0e 2c0c 	mla	ip, lr, ip, r2
 800762a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800762e:	e7bc      	b.n	80075aa <_strtod_l+0x2ba>
 8007630:	2a6e      	cmp	r2, #110	; 0x6e
 8007632:	e7dc      	b.n	80075ee <_strtod_l+0x2fe>
 8007634:	498e      	ldr	r1, [pc, #568]	; (8007870 <_strtod_l+0x580>)
 8007636:	a819      	add	r0, sp, #100	; 0x64
 8007638:	f001 fe90 	bl	800935c <__match>
 800763c:	2800      	cmp	r0, #0
 800763e:	f43f aeb4 	beq.w	80073aa <_strtod_l+0xba>
 8007642:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007644:	498b      	ldr	r1, [pc, #556]	; (8007874 <_strtod_l+0x584>)
 8007646:	3b01      	subs	r3, #1
 8007648:	a819      	add	r0, sp, #100	; 0x64
 800764a:	9319      	str	r3, [sp, #100]	; 0x64
 800764c:	f001 fe86 	bl	800935c <__match>
 8007650:	b910      	cbnz	r0, 8007658 <_strtod_l+0x368>
 8007652:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007654:	3301      	adds	r3, #1
 8007656:	9319      	str	r3, [sp, #100]	; 0x64
 8007658:	f04f 0800 	mov.w	r8, #0
 800765c:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8007878 <_strtod_l+0x588>
 8007660:	e687      	b.n	8007372 <_strtod_l+0x82>
 8007662:	4886      	ldr	r0, [pc, #536]	; (800787c <_strtod_l+0x58c>)
 8007664:	f002 ffb2 	bl	800a5cc <nan>
 8007668:	4680      	mov	r8, r0
 800766a:	4689      	mov	r9, r1
 800766c:	e681      	b.n	8007372 <_strtod_l+0x82>
 800766e:	9b04      	ldr	r3, [sp, #16]
 8007670:	f1bb 0f00 	cmp.w	fp, #0
 8007674:	bf08      	it	eq
 8007676:	46a3      	moveq	fp, r4
 8007678:	1aeb      	subs	r3, r5, r3
 800767a:	2c10      	cmp	r4, #16
 800767c:	9806      	ldr	r0, [sp, #24]
 800767e:	4626      	mov	r6, r4
 8007680:	9307      	str	r3, [sp, #28]
 8007682:	bfa8      	it	ge
 8007684:	2610      	movge	r6, #16
 8007686:	f7f8 feb7 	bl	80003f8 <__aeabi_ui2d>
 800768a:	2c09      	cmp	r4, #9
 800768c:	4680      	mov	r8, r0
 800768e:	4689      	mov	r9, r1
 8007690:	dd13      	ble.n	80076ba <_strtod_l+0x3ca>
 8007692:	4b7b      	ldr	r3, [pc, #492]	; (8007880 <_strtod_l+0x590>)
 8007694:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007698:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800769c:	f7f8 ff26 	bl	80004ec <__aeabi_dmul>
 80076a0:	4680      	mov	r8, r0
 80076a2:	9805      	ldr	r0, [sp, #20]
 80076a4:	4689      	mov	r9, r1
 80076a6:	f7f8 fea7 	bl	80003f8 <__aeabi_ui2d>
 80076aa:	4602      	mov	r2, r0
 80076ac:	460b      	mov	r3, r1
 80076ae:	4640      	mov	r0, r8
 80076b0:	4649      	mov	r1, r9
 80076b2:	f7f8 fd65 	bl	8000180 <__adddf3>
 80076b6:	4680      	mov	r8, r0
 80076b8:	4689      	mov	r9, r1
 80076ba:	2c0f      	cmp	r4, #15
 80076bc:	dc36      	bgt.n	800772c <_strtod_l+0x43c>
 80076be:	9b07      	ldr	r3, [sp, #28]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	f43f ae56 	beq.w	8007372 <_strtod_l+0x82>
 80076c6:	dd22      	ble.n	800770e <_strtod_l+0x41e>
 80076c8:	2b16      	cmp	r3, #22
 80076ca:	dc09      	bgt.n	80076e0 <_strtod_l+0x3f0>
 80076cc:	496c      	ldr	r1, [pc, #432]	; (8007880 <_strtod_l+0x590>)
 80076ce:	4642      	mov	r2, r8
 80076d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80076d4:	464b      	mov	r3, r9
 80076d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80076da:	f7f8 ff07 	bl	80004ec <__aeabi_dmul>
 80076de:	e7c3      	b.n	8007668 <_strtod_l+0x378>
 80076e0:	9a07      	ldr	r2, [sp, #28]
 80076e2:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80076e6:	4293      	cmp	r3, r2
 80076e8:	db20      	blt.n	800772c <_strtod_l+0x43c>
 80076ea:	4d65      	ldr	r5, [pc, #404]	; (8007880 <_strtod_l+0x590>)
 80076ec:	f1c4 040f 	rsb	r4, r4, #15
 80076f0:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80076f4:	4642      	mov	r2, r8
 80076f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80076fa:	464b      	mov	r3, r9
 80076fc:	f7f8 fef6 	bl	80004ec <__aeabi_dmul>
 8007700:	9b07      	ldr	r3, [sp, #28]
 8007702:	1b1c      	subs	r4, r3, r4
 8007704:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8007708:	e9d5 2300 	ldrd	r2, r3, [r5]
 800770c:	e7e5      	b.n	80076da <_strtod_l+0x3ea>
 800770e:	9b07      	ldr	r3, [sp, #28]
 8007710:	3316      	adds	r3, #22
 8007712:	db0b      	blt.n	800772c <_strtod_l+0x43c>
 8007714:	9b04      	ldr	r3, [sp, #16]
 8007716:	4640      	mov	r0, r8
 8007718:	1b5d      	subs	r5, r3, r5
 800771a:	4b59      	ldr	r3, [pc, #356]	; (8007880 <_strtod_l+0x590>)
 800771c:	4649      	mov	r1, r9
 800771e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8007722:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007726:	f7f9 f80b 	bl	8000740 <__aeabi_ddiv>
 800772a:	e79d      	b.n	8007668 <_strtod_l+0x378>
 800772c:	9b07      	ldr	r3, [sp, #28]
 800772e:	1ba6      	subs	r6, r4, r6
 8007730:	441e      	add	r6, r3
 8007732:	2e00      	cmp	r6, #0
 8007734:	dd74      	ble.n	8007820 <_strtod_l+0x530>
 8007736:	f016 030f 	ands.w	r3, r6, #15
 800773a:	d00a      	beq.n	8007752 <_strtod_l+0x462>
 800773c:	4950      	ldr	r1, [pc, #320]	; (8007880 <_strtod_l+0x590>)
 800773e:	4642      	mov	r2, r8
 8007740:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007744:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007748:	464b      	mov	r3, r9
 800774a:	f7f8 fecf 	bl	80004ec <__aeabi_dmul>
 800774e:	4680      	mov	r8, r0
 8007750:	4689      	mov	r9, r1
 8007752:	f036 060f 	bics.w	r6, r6, #15
 8007756:	d052      	beq.n	80077fe <_strtod_l+0x50e>
 8007758:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800775c:	dd27      	ble.n	80077ae <_strtod_l+0x4be>
 800775e:	f04f 0b00 	mov.w	fp, #0
 8007762:	f8cd b010 	str.w	fp, [sp, #16]
 8007766:	f8cd b020 	str.w	fp, [sp, #32]
 800776a:	f8cd b018 	str.w	fp, [sp, #24]
 800776e:	2322      	movs	r3, #34	; 0x22
 8007770:	f04f 0800 	mov.w	r8, #0
 8007774:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8007878 <_strtod_l+0x588>
 8007778:	f8ca 3000 	str.w	r3, [sl]
 800777c:	9b08      	ldr	r3, [sp, #32]
 800777e:	2b00      	cmp	r3, #0
 8007780:	f43f adf7 	beq.w	8007372 <_strtod_l+0x82>
 8007784:	4650      	mov	r0, sl
 8007786:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007788:	f001 ff04 	bl	8009594 <_Bfree>
 800778c:	4650      	mov	r0, sl
 800778e:	9906      	ldr	r1, [sp, #24]
 8007790:	f001 ff00 	bl	8009594 <_Bfree>
 8007794:	4650      	mov	r0, sl
 8007796:	9904      	ldr	r1, [sp, #16]
 8007798:	f001 fefc 	bl	8009594 <_Bfree>
 800779c:	4650      	mov	r0, sl
 800779e:	9908      	ldr	r1, [sp, #32]
 80077a0:	f001 fef8 	bl	8009594 <_Bfree>
 80077a4:	4659      	mov	r1, fp
 80077a6:	4650      	mov	r0, sl
 80077a8:	f001 fef4 	bl	8009594 <_Bfree>
 80077ac:	e5e1      	b.n	8007372 <_strtod_l+0x82>
 80077ae:	4b35      	ldr	r3, [pc, #212]	; (8007884 <_strtod_l+0x594>)
 80077b0:	4640      	mov	r0, r8
 80077b2:	9305      	str	r3, [sp, #20]
 80077b4:	2300      	movs	r3, #0
 80077b6:	4649      	mov	r1, r9
 80077b8:	461f      	mov	r7, r3
 80077ba:	1136      	asrs	r6, r6, #4
 80077bc:	2e01      	cmp	r6, #1
 80077be:	dc21      	bgt.n	8007804 <_strtod_l+0x514>
 80077c0:	b10b      	cbz	r3, 80077c6 <_strtod_l+0x4d6>
 80077c2:	4680      	mov	r8, r0
 80077c4:	4689      	mov	r9, r1
 80077c6:	4b2f      	ldr	r3, [pc, #188]	; (8007884 <_strtod_l+0x594>)
 80077c8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80077cc:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80077d0:	4642      	mov	r2, r8
 80077d2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80077d6:	464b      	mov	r3, r9
 80077d8:	f7f8 fe88 	bl	80004ec <__aeabi_dmul>
 80077dc:	4b26      	ldr	r3, [pc, #152]	; (8007878 <_strtod_l+0x588>)
 80077de:	460a      	mov	r2, r1
 80077e0:	400b      	ands	r3, r1
 80077e2:	4929      	ldr	r1, [pc, #164]	; (8007888 <_strtod_l+0x598>)
 80077e4:	4680      	mov	r8, r0
 80077e6:	428b      	cmp	r3, r1
 80077e8:	d8b9      	bhi.n	800775e <_strtod_l+0x46e>
 80077ea:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80077ee:	428b      	cmp	r3, r1
 80077f0:	bf86      	itte	hi
 80077f2:	f04f 38ff 	movhi.w	r8, #4294967295
 80077f6:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 800788c <_strtod_l+0x59c>
 80077fa:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80077fe:	2300      	movs	r3, #0
 8007800:	9305      	str	r3, [sp, #20]
 8007802:	e07f      	b.n	8007904 <_strtod_l+0x614>
 8007804:	07f2      	lsls	r2, r6, #31
 8007806:	d505      	bpl.n	8007814 <_strtod_l+0x524>
 8007808:	9b05      	ldr	r3, [sp, #20]
 800780a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800780e:	f7f8 fe6d 	bl	80004ec <__aeabi_dmul>
 8007812:	2301      	movs	r3, #1
 8007814:	9a05      	ldr	r2, [sp, #20]
 8007816:	3701      	adds	r7, #1
 8007818:	3208      	adds	r2, #8
 800781a:	1076      	asrs	r6, r6, #1
 800781c:	9205      	str	r2, [sp, #20]
 800781e:	e7cd      	b.n	80077bc <_strtod_l+0x4cc>
 8007820:	d0ed      	beq.n	80077fe <_strtod_l+0x50e>
 8007822:	4276      	negs	r6, r6
 8007824:	f016 020f 	ands.w	r2, r6, #15
 8007828:	d00a      	beq.n	8007840 <_strtod_l+0x550>
 800782a:	4b15      	ldr	r3, [pc, #84]	; (8007880 <_strtod_l+0x590>)
 800782c:	4640      	mov	r0, r8
 800782e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007832:	4649      	mov	r1, r9
 8007834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007838:	f7f8 ff82 	bl	8000740 <__aeabi_ddiv>
 800783c:	4680      	mov	r8, r0
 800783e:	4689      	mov	r9, r1
 8007840:	1136      	asrs	r6, r6, #4
 8007842:	d0dc      	beq.n	80077fe <_strtod_l+0x50e>
 8007844:	2e1f      	cmp	r6, #31
 8007846:	dd23      	ble.n	8007890 <_strtod_l+0x5a0>
 8007848:	f04f 0b00 	mov.w	fp, #0
 800784c:	f8cd b010 	str.w	fp, [sp, #16]
 8007850:	f8cd b020 	str.w	fp, [sp, #32]
 8007854:	f8cd b018 	str.w	fp, [sp, #24]
 8007858:	2322      	movs	r3, #34	; 0x22
 800785a:	f04f 0800 	mov.w	r8, #0
 800785e:	f04f 0900 	mov.w	r9, #0
 8007862:	f8ca 3000 	str.w	r3, [sl]
 8007866:	e789      	b.n	800777c <_strtod_l+0x48c>
 8007868:	0800b171 	.word	0x0800b171
 800786c:	0800b1ac 	.word	0x0800b1ac
 8007870:	0800b169 	.word	0x0800b169
 8007874:	0800b39c 	.word	0x0800b39c
 8007878:	7ff00000 	.word	0x7ff00000
 800787c:	0800b297 	.word	0x0800b297
 8007880:	0800b510 	.word	0x0800b510
 8007884:	0800b4e8 	.word	0x0800b4e8
 8007888:	7ca00000 	.word	0x7ca00000
 800788c:	7fefffff 	.word	0x7fefffff
 8007890:	f016 0310 	ands.w	r3, r6, #16
 8007894:	bf18      	it	ne
 8007896:	236a      	movne	r3, #106	; 0x6a
 8007898:	4640      	mov	r0, r8
 800789a:	9305      	str	r3, [sp, #20]
 800789c:	4649      	mov	r1, r9
 800789e:	2300      	movs	r3, #0
 80078a0:	4fb0      	ldr	r7, [pc, #704]	; (8007b64 <_strtod_l+0x874>)
 80078a2:	07f2      	lsls	r2, r6, #31
 80078a4:	d504      	bpl.n	80078b0 <_strtod_l+0x5c0>
 80078a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078aa:	f7f8 fe1f 	bl	80004ec <__aeabi_dmul>
 80078ae:	2301      	movs	r3, #1
 80078b0:	1076      	asrs	r6, r6, #1
 80078b2:	f107 0708 	add.w	r7, r7, #8
 80078b6:	d1f4      	bne.n	80078a2 <_strtod_l+0x5b2>
 80078b8:	b10b      	cbz	r3, 80078be <_strtod_l+0x5ce>
 80078ba:	4680      	mov	r8, r0
 80078bc:	4689      	mov	r9, r1
 80078be:	9b05      	ldr	r3, [sp, #20]
 80078c0:	b1c3      	cbz	r3, 80078f4 <_strtod_l+0x604>
 80078c2:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80078c6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	4649      	mov	r1, r9
 80078ce:	dd11      	ble.n	80078f4 <_strtod_l+0x604>
 80078d0:	2b1f      	cmp	r3, #31
 80078d2:	f340 8127 	ble.w	8007b24 <_strtod_l+0x834>
 80078d6:	2b34      	cmp	r3, #52	; 0x34
 80078d8:	bfd8      	it	le
 80078da:	f04f 33ff 	movle.w	r3, #4294967295
 80078de:	f04f 0800 	mov.w	r8, #0
 80078e2:	bfcf      	iteee	gt
 80078e4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80078e8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80078ec:	fa03 f202 	lslle.w	r2, r3, r2
 80078f0:	ea02 0901 	andle.w	r9, r2, r1
 80078f4:	2200      	movs	r2, #0
 80078f6:	2300      	movs	r3, #0
 80078f8:	4640      	mov	r0, r8
 80078fa:	4649      	mov	r1, r9
 80078fc:	f7f9 f85e 	bl	80009bc <__aeabi_dcmpeq>
 8007900:	2800      	cmp	r0, #0
 8007902:	d1a1      	bne.n	8007848 <_strtod_l+0x558>
 8007904:	9b06      	ldr	r3, [sp, #24]
 8007906:	465a      	mov	r2, fp
 8007908:	9300      	str	r3, [sp, #0]
 800790a:	4650      	mov	r0, sl
 800790c:	4623      	mov	r3, r4
 800790e:	9908      	ldr	r1, [sp, #32]
 8007910:	f001 fea8 	bl	8009664 <__s2b>
 8007914:	9008      	str	r0, [sp, #32]
 8007916:	2800      	cmp	r0, #0
 8007918:	f43f af21 	beq.w	800775e <_strtod_l+0x46e>
 800791c:	9b04      	ldr	r3, [sp, #16]
 800791e:	f04f 0b00 	mov.w	fp, #0
 8007922:	1b5d      	subs	r5, r3, r5
 8007924:	9b07      	ldr	r3, [sp, #28]
 8007926:	f8cd b010 	str.w	fp, [sp, #16]
 800792a:	2b00      	cmp	r3, #0
 800792c:	bfb4      	ite	lt
 800792e:	462b      	movlt	r3, r5
 8007930:	2300      	movge	r3, #0
 8007932:	930e      	str	r3, [sp, #56]	; 0x38
 8007934:	9b07      	ldr	r3, [sp, #28]
 8007936:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800793a:	9314      	str	r3, [sp, #80]	; 0x50
 800793c:	9b08      	ldr	r3, [sp, #32]
 800793e:	4650      	mov	r0, sl
 8007940:	6859      	ldr	r1, [r3, #4]
 8007942:	f001 fde7 	bl	8009514 <_Balloc>
 8007946:	9006      	str	r0, [sp, #24]
 8007948:	2800      	cmp	r0, #0
 800794a:	f43f af10 	beq.w	800776e <_strtod_l+0x47e>
 800794e:	9b08      	ldr	r3, [sp, #32]
 8007950:	300c      	adds	r0, #12
 8007952:	691a      	ldr	r2, [r3, #16]
 8007954:	f103 010c 	add.w	r1, r3, #12
 8007958:	3202      	adds	r2, #2
 800795a:	0092      	lsls	r2, r2, #2
 800795c:	f7fe fff8 	bl	8006950 <memcpy>
 8007960:	ab1c      	add	r3, sp, #112	; 0x70
 8007962:	9301      	str	r3, [sp, #4]
 8007964:	ab1b      	add	r3, sp, #108	; 0x6c
 8007966:	9300      	str	r3, [sp, #0]
 8007968:	4642      	mov	r2, r8
 800796a:	464b      	mov	r3, r9
 800796c:	4650      	mov	r0, sl
 800796e:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8007972:	f002 f9b9 	bl	8009ce8 <__d2b>
 8007976:	901a      	str	r0, [sp, #104]	; 0x68
 8007978:	2800      	cmp	r0, #0
 800797a:	f43f aef8 	beq.w	800776e <_strtod_l+0x47e>
 800797e:	2101      	movs	r1, #1
 8007980:	4650      	mov	r0, sl
 8007982:	f001 ff07 	bl	8009794 <__i2b>
 8007986:	4603      	mov	r3, r0
 8007988:	9004      	str	r0, [sp, #16]
 800798a:	2800      	cmp	r0, #0
 800798c:	f43f aeef 	beq.w	800776e <_strtod_l+0x47e>
 8007990:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8007992:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007994:	2d00      	cmp	r5, #0
 8007996:	bfab      	itete	ge
 8007998:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800799a:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 800799c:	18ee      	addge	r6, r5, r3
 800799e:	1b5c      	sublt	r4, r3, r5
 80079a0:	9b05      	ldr	r3, [sp, #20]
 80079a2:	bfa8      	it	ge
 80079a4:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 80079a6:	eba5 0503 	sub.w	r5, r5, r3
 80079aa:	4415      	add	r5, r2
 80079ac:	4b6e      	ldr	r3, [pc, #440]	; (8007b68 <_strtod_l+0x878>)
 80079ae:	f105 35ff 	add.w	r5, r5, #4294967295
 80079b2:	bfb8      	it	lt
 80079b4:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 80079b6:	429d      	cmp	r5, r3
 80079b8:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80079bc:	f280 80c4 	bge.w	8007b48 <_strtod_l+0x858>
 80079c0:	1b5b      	subs	r3, r3, r5
 80079c2:	2b1f      	cmp	r3, #31
 80079c4:	f04f 0701 	mov.w	r7, #1
 80079c8:	eba2 0203 	sub.w	r2, r2, r3
 80079cc:	f300 80b1 	bgt.w	8007b32 <_strtod_l+0x842>
 80079d0:	2500      	movs	r5, #0
 80079d2:	fa07 f303 	lsl.w	r3, r7, r3
 80079d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80079d8:	18b7      	adds	r7, r6, r2
 80079da:	9b05      	ldr	r3, [sp, #20]
 80079dc:	42be      	cmp	r6, r7
 80079de:	4414      	add	r4, r2
 80079e0:	441c      	add	r4, r3
 80079e2:	4633      	mov	r3, r6
 80079e4:	bfa8      	it	ge
 80079e6:	463b      	movge	r3, r7
 80079e8:	42a3      	cmp	r3, r4
 80079ea:	bfa8      	it	ge
 80079ec:	4623      	movge	r3, r4
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	bfc2      	ittt	gt
 80079f2:	1aff      	subgt	r7, r7, r3
 80079f4:	1ae4      	subgt	r4, r4, r3
 80079f6:	1af6      	subgt	r6, r6, r3
 80079f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	dd17      	ble.n	8007a2e <_strtod_l+0x73e>
 80079fe:	461a      	mov	r2, r3
 8007a00:	4650      	mov	r0, sl
 8007a02:	9904      	ldr	r1, [sp, #16]
 8007a04:	f001 ff84 	bl	8009910 <__pow5mult>
 8007a08:	9004      	str	r0, [sp, #16]
 8007a0a:	2800      	cmp	r0, #0
 8007a0c:	f43f aeaf 	beq.w	800776e <_strtod_l+0x47e>
 8007a10:	4601      	mov	r1, r0
 8007a12:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007a14:	4650      	mov	r0, sl
 8007a16:	f001 fed3 	bl	80097c0 <__multiply>
 8007a1a:	9009      	str	r0, [sp, #36]	; 0x24
 8007a1c:	2800      	cmp	r0, #0
 8007a1e:	f43f aea6 	beq.w	800776e <_strtod_l+0x47e>
 8007a22:	4650      	mov	r0, sl
 8007a24:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007a26:	f001 fdb5 	bl	8009594 <_Bfree>
 8007a2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a2c:	931a      	str	r3, [sp, #104]	; 0x68
 8007a2e:	2f00      	cmp	r7, #0
 8007a30:	f300 808e 	bgt.w	8007b50 <_strtod_l+0x860>
 8007a34:	9b07      	ldr	r3, [sp, #28]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	dd08      	ble.n	8007a4c <_strtod_l+0x75c>
 8007a3a:	4650      	mov	r0, sl
 8007a3c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007a3e:	9906      	ldr	r1, [sp, #24]
 8007a40:	f001 ff66 	bl	8009910 <__pow5mult>
 8007a44:	9006      	str	r0, [sp, #24]
 8007a46:	2800      	cmp	r0, #0
 8007a48:	f43f ae91 	beq.w	800776e <_strtod_l+0x47e>
 8007a4c:	2c00      	cmp	r4, #0
 8007a4e:	dd08      	ble.n	8007a62 <_strtod_l+0x772>
 8007a50:	4622      	mov	r2, r4
 8007a52:	4650      	mov	r0, sl
 8007a54:	9906      	ldr	r1, [sp, #24]
 8007a56:	f001 ffb5 	bl	80099c4 <__lshift>
 8007a5a:	9006      	str	r0, [sp, #24]
 8007a5c:	2800      	cmp	r0, #0
 8007a5e:	f43f ae86 	beq.w	800776e <_strtod_l+0x47e>
 8007a62:	2e00      	cmp	r6, #0
 8007a64:	dd08      	ble.n	8007a78 <_strtod_l+0x788>
 8007a66:	4632      	mov	r2, r6
 8007a68:	4650      	mov	r0, sl
 8007a6a:	9904      	ldr	r1, [sp, #16]
 8007a6c:	f001 ffaa 	bl	80099c4 <__lshift>
 8007a70:	9004      	str	r0, [sp, #16]
 8007a72:	2800      	cmp	r0, #0
 8007a74:	f43f ae7b 	beq.w	800776e <_strtod_l+0x47e>
 8007a78:	4650      	mov	r0, sl
 8007a7a:	9a06      	ldr	r2, [sp, #24]
 8007a7c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007a7e:	f002 f82d 	bl	8009adc <__mdiff>
 8007a82:	4683      	mov	fp, r0
 8007a84:	2800      	cmp	r0, #0
 8007a86:	f43f ae72 	beq.w	800776e <_strtod_l+0x47e>
 8007a8a:	2400      	movs	r4, #0
 8007a8c:	68c3      	ldr	r3, [r0, #12]
 8007a8e:	9904      	ldr	r1, [sp, #16]
 8007a90:	60c4      	str	r4, [r0, #12]
 8007a92:	930b      	str	r3, [sp, #44]	; 0x2c
 8007a94:	f002 f806 	bl	8009aa4 <__mcmp>
 8007a98:	42a0      	cmp	r0, r4
 8007a9a:	da6b      	bge.n	8007b74 <_strtod_l+0x884>
 8007a9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a9e:	ea53 0308 	orrs.w	r3, r3, r8
 8007aa2:	f040 8091 	bne.w	8007bc8 <_strtod_l+0x8d8>
 8007aa6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	f040 808c 	bne.w	8007bc8 <_strtod_l+0x8d8>
 8007ab0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007ab4:	0d1b      	lsrs	r3, r3, #20
 8007ab6:	051b      	lsls	r3, r3, #20
 8007ab8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007abc:	f240 8084 	bls.w	8007bc8 <_strtod_l+0x8d8>
 8007ac0:	f8db 3014 	ldr.w	r3, [fp, #20]
 8007ac4:	b91b      	cbnz	r3, 8007ace <_strtod_l+0x7de>
 8007ac6:	f8db 3010 	ldr.w	r3, [fp, #16]
 8007aca:	2b01      	cmp	r3, #1
 8007acc:	dd7c      	ble.n	8007bc8 <_strtod_l+0x8d8>
 8007ace:	4659      	mov	r1, fp
 8007ad0:	2201      	movs	r2, #1
 8007ad2:	4650      	mov	r0, sl
 8007ad4:	f001 ff76 	bl	80099c4 <__lshift>
 8007ad8:	9904      	ldr	r1, [sp, #16]
 8007ada:	4683      	mov	fp, r0
 8007adc:	f001 ffe2 	bl	8009aa4 <__mcmp>
 8007ae0:	2800      	cmp	r0, #0
 8007ae2:	dd71      	ble.n	8007bc8 <_strtod_l+0x8d8>
 8007ae4:	9905      	ldr	r1, [sp, #20]
 8007ae6:	464b      	mov	r3, r9
 8007ae8:	4a20      	ldr	r2, [pc, #128]	; (8007b6c <_strtod_l+0x87c>)
 8007aea:	2900      	cmp	r1, #0
 8007aec:	f000 808c 	beq.w	8007c08 <_strtod_l+0x918>
 8007af0:	ea02 0109 	and.w	r1, r2, r9
 8007af4:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007af8:	f300 8086 	bgt.w	8007c08 <_strtod_l+0x918>
 8007afc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007b00:	f77f aeaa 	ble.w	8007858 <_strtod_l+0x568>
 8007b04:	4640      	mov	r0, r8
 8007b06:	4649      	mov	r1, r9
 8007b08:	4b19      	ldr	r3, [pc, #100]	; (8007b70 <_strtod_l+0x880>)
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	f7f8 fcee 	bl	80004ec <__aeabi_dmul>
 8007b10:	460b      	mov	r3, r1
 8007b12:	4303      	orrs	r3, r0
 8007b14:	bf08      	it	eq
 8007b16:	2322      	moveq	r3, #34	; 0x22
 8007b18:	4680      	mov	r8, r0
 8007b1a:	4689      	mov	r9, r1
 8007b1c:	bf08      	it	eq
 8007b1e:	f8ca 3000 	streq.w	r3, [sl]
 8007b22:	e62f      	b.n	8007784 <_strtod_l+0x494>
 8007b24:	f04f 32ff 	mov.w	r2, #4294967295
 8007b28:	fa02 f303 	lsl.w	r3, r2, r3
 8007b2c:	ea03 0808 	and.w	r8, r3, r8
 8007b30:	e6e0      	b.n	80078f4 <_strtod_l+0x604>
 8007b32:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8007b36:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8007b3a:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8007b3e:	35e2      	adds	r5, #226	; 0xe2
 8007b40:	fa07 f505 	lsl.w	r5, r7, r5
 8007b44:	970f      	str	r7, [sp, #60]	; 0x3c
 8007b46:	e747      	b.n	80079d8 <_strtod_l+0x6e8>
 8007b48:	2301      	movs	r3, #1
 8007b4a:	2500      	movs	r5, #0
 8007b4c:	930f      	str	r3, [sp, #60]	; 0x3c
 8007b4e:	e743      	b.n	80079d8 <_strtod_l+0x6e8>
 8007b50:	463a      	mov	r2, r7
 8007b52:	4650      	mov	r0, sl
 8007b54:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007b56:	f001 ff35 	bl	80099c4 <__lshift>
 8007b5a:	901a      	str	r0, [sp, #104]	; 0x68
 8007b5c:	2800      	cmp	r0, #0
 8007b5e:	f47f af69 	bne.w	8007a34 <_strtod_l+0x744>
 8007b62:	e604      	b.n	800776e <_strtod_l+0x47e>
 8007b64:	0800b1c0 	.word	0x0800b1c0
 8007b68:	fffffc02 	.word	0xfffffc02
 8007b6c:	7ff00000 	.word	0x7ff00000
 8007b70:	39500000 	.word	0x39500000
 8007b74:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007b78:	d165      	bne.n	8007c46 <_strtod_l+0x956>
 8007b7a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007b7c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007b80:	b35a      	cbz	r2, 8007bda <_strtod_l+0x8ea>
 8007b82:	4a99      	ldr	r2, [pc, #612]	; (8007de8 <_strtod_l+0xaf8>)
 8007b84:	4293      	cmp	r3, r2
 8007b86:	d12b      	bne.n	8007be0 <_strtod_l+0x8f0>
 8007b88:	9b05      	ldr	r3, [sp, #20]
 8007b8a:	4641      	mov	r1, r8
 8007b8c:	b303      	cbz	r3, 8007bd0 <_strtod_l+0x8e0>
 8007b8e:	464a      	mov	r2, r9
 8007b90:	4b96      	ldr	r3, [pc, #600]	; (8007dec <_strtod_l+0xafc>)
 8007b92:	4013      	ands	r3, r2
 8007b94:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007b98:	f04f 32ff 	mov.w	r2, #4294967295
 8007b9c:	d81b      	bhi.n	8007bd6 <_strtod_l+0x8e6>
 8007b9e:	0d1b      	lsrs	r3, r3, #20
 8007ba0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ba8:	4299      	cmp	r1, r3
 8007baa:	d119      	bne.n	8007be0 <_strtod_l+0x8f0>
 8007bac:	4b90      	ldr	r3, [pc, #576]	; (8007df0 <_strtod_l+0xb00>)
 8007bae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007bb0:	429a      	cmp	r2, r3
 8007bb2:	d102      	bne.n	8007bba <_strtod_l+0x8ca>
 8007bb4:	3101      	adds	r1, #1
 8007bb6:	f43f adda 	beq.w	800776e <_strtod_l+0x47e>
 8007bba:	f04f 0800 	mov.w	r8, #0
 8007bbe:	4b8b      	ldr	r3, [pc, #556]	; (8007dec <_strtod_l+0xafc>)
 8007bc0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007bc2:	401a      	ands	r2, r3
 8007bc4:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8007bc8:	9b05      	ldr	r3, [sp, #20]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d19a      	bne.n	8007b04 <_strtod_l+0x814>
 8007bce:	e5d9      	b.n	8007784 <_strtod_l+0x494>
 8007bd0:	f04f 33ff 	mov.w	r3, #4294967295
 8007bd4:	e7e8      	b.n	8007ba8 <_strtod_l+0x8b8>
 8007bd6:	4613      	mov	r3, r2
 8007bd8:	e7e6      	b.n	8007ba8 <_strtod_l+0x8b8>
 8007bda:	ea53 0308 	orrs.w	r3, r3, r8
 8007bde:	d081      	beq.n	8007ae4 <_strtod_l+0x7f4>
 8007be0:	b1e5      	cbz	r5, 8007c1c <_strtod_l+0x92c>
 8007be2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007be4:	421d      	tst	r5, r3
 8007be6:	d0ef      	beq.n	8007bc8 <_strtod_l+0x8d8>
 8007be8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007bea:	4640      	mov	r0, r8
 8007bec:	4649      	mov	r1, r9
 8007bee:	9a05      	ldr	r2, [sp, #20]
 8007bf0:	b1c3      	cbz	r3, 8007c24 <_strtod_l+0x934>
 8007bf2:	f7ff fb5a 	bl	80072aa <sulp>
 8007bf6:	4602      	mov	r2, r0
 8007bf8:	460b      	mov	r3, r1
 8007bfa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007bfe:	f7f8 fabf 	bl	8000180 <__adddf3>
 8007c02:	4680      	mov	r8, r0
 8007c04:	4689      	mov	r9, r1
 8007c06:	e7df      	b.n	8007bc8 <_strtod_l+0x8d8>
 8007c08:	4013      	ands	r3, r2
 8007c0a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007c0e:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8007c12:	f04f 38ff 	mov.w	r8, #4294967295
 8007c16:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8007c1a:	e7d5      	b.n	8007bc8 <_strtod_l+0x8d8>
 8007c1c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007c1e:	ea13 0f08 	tst.w	r3, r8
 8007c22:	e7e0      	b.n	8007be6 <_strtod_l+0x8f6>
 8007c24:	f7ff fb41 	bl	80072aa <sulp>
 8007c28:	4602      	mov	r2, r0
 8007c2a:	460b      	mov	r3, r1
 8007c2c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007c30:	f7f8 faa4 	bl	800017c <__aeabi_dsub>
 8007c34:	2200      	movs	r2, #0
 8007c36:	2300      	movs	r3, #0
 8007c38:	4680      	mov	r8, r0
 8007c3a:	4689      	mov	r9, r1
 8007c3c:	f7f8 febe 	bl	80009bc <__aeabi_dcmpeq>
 8007c40:	2800      	cmp	r0, #0
 8007c42:	d0c1      	beq.n	8007bc8 <_strtod_l+0x8d8>
 8007c44:	e608      	b.n	8007858 <_strtod_l+0x568>
 8007c46:	4658      	mov	r0, fp
 8007c48:	9904      	ldr	r1, [sp, #16]
 8007c4a:	f002 f8a9 	bl	8009da0 <__ratio>
 8007c4e:	2200      	movs	r2, #0
 8007c50:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007c54:	4606      	mov	r6, r0
 8007c56:	460f      	mov	r7, r1
 8007c58:	f7f8 fec4 	bl	80009e4 <__aeabi_dcmple>
 8007c5c:	2800      	cmp	r0, #0
 8007c5e:	d070      	beq.n	8007d42 <_strtod_l+0xa52>
 8007c60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d042      	beq.n	8007cec <_strtod_l+0x9fc>
 8007c66:	2600      	movs	r6, #0
 8007c68:	4f62      	ldr	r7, [pc, #392]	; (8007df4 <_strtod_l+0xb04>)
 8007c6a:	4d62      	ldr	r5, [pc, #392]	; (8007df4 <_strtod_l+0xb04>)
 8007c6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c6e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007c72:	0d1b      	lsrs	r3, r3, #20
 8007c74:	051b      	lsls	r3, r3, #20
 8007c76:	930f      	str	r3, [sp, #60]	; 0x3c
 8007c78:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007c7a:	4b5f      	ldr	r3, [pc, #380]	; (8007df8 <_strtod_l+0xb08>)
 8007c7c:	429a      	cmp	r2, r3
 8007c7e:	f040 80c3 	bne.w	8007e08 <_strtod_l+0xb18>
 8007c82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c84:	4640      	mov	r0, r8
 8007c86:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8007c8a:	4649      	mov	r1, r9
 8007c8c:	f001 ffb2 	bl	8009bf4 <__ulp>
 8007c90:	4602      	mov	r2, r0
 8007c92:	460b      	mov	r3, r1
 8007c94:	4630      	mov	r0, r6
 8007c96:	4639      	mov	r1, r7
 8007c98:	f7f8 fc28 	bl	80004ec <__aeabi_dmul>
 8007c9c:	4642      	mov	r2, r8
 8007c9e:	464b      	mov	r3, r9
 8007ca0:	f7f8 fa6e 	bl	8000180 <__adddf3>
 8007ca4:	460b      	mov	r3, r1
 8007ca6:	4951      	ldr	r1, [pc, #324]	; (8007dec <_strtod_l+0xafc>)
 8007ca8:	4a54      	ldr	r2, [pc, #336]	; (8007dfc <_strtod_l+0xb0c>)
 8007caa:	4019      	ands	r1, r3
 8007cac:	4291      	cmp	r1, r2
 8007cae:	4680      	mov	r8, r0
 8007cb0:	d95d      	bls.n	8007d6e <_strtod_l+0xa7e>
 8007cb2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007cb4:	4b4e      	ldr	r3, [pc, #312]	; (8007df0 <_strtod_l+0xb00>)
 8007cb6:	429a      	cmp	r2, r3
 8007cb8:	d103      	bne.n	8007cc2 <_strtod_l+0x9d2>
 8007cba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007cbc:	3301      	adds	r3, #1
 8007cbe:	f43f ad56 	beq.w	800776e <_strtod_l+0x47e>
 8007cc2:	f04f 38ff 	mov.w	r8, #4294967295
 8007cc6:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8007df0 <_strtod_l+0xb00>
 8007cca:	4650      	mov	r0, sl
 8007ccc:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007cce:	f001 fc61 	bl	8009594 <_Bfree>
 8007cd2:	4650      	mov	r0, sl
 8007cd4:	9906      	ldr	r1, [sp, #24]
 8007cd6:	f001 fc5d 	bl	8009594 <_Bfree>
 8007cda:	4650      	mov	r0, sl
 8007cdc:	9904      	ldr	r1, [sp, #16]
 8007cde:	f001 fc59 	bl	8009594 <_Bfree>
 8007ce2:	4659      	mov	r1, fp
 8007ce4:	4650      	mov	r0, sl
 8007ce6:	f001 fc55 	bl	8009594 <_Bfree>
 8007cea:	e627      	b.n	800793c <_strtod_l+0x64c>
 8007cec:	f1b8 0f00 	cmp.w	r8, #0
 8007cf0:	d119      	bne.n	8007d26 <_strtod_l+0xa36>
 8007cf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cf4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007cf8:	b9e3      	cbnz	r3, 8007d34 <_strtod_l+0xa44>
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	4630      	mov	r0, r6
 8007cfe:	4639      	mov	r1, r7
 8007d00:	4b3c      	ldr	r3, [pc, #240]	; (8007df4 <_strtod_l+0xb04>)
 8007d02:	f7f8 fe65 	bl	80009d0 <__aeabi_dcmplt>
 8007d06:	b9c8      	cbnz	r0, 8007d3c <_strtod_l+0xa4c>
 8007d08:	2200      	movs	r2, #0
 8007d0a:	4630      	mov	r0, r6
 8007d0c:	4639      	mov	r1, r7
 8007d0e:	4b3c      	ldr	r3, [pc, #240]	; (8007e00 <_strtod_l+0xb10>)
 8007d10:	f7f8 fbec 	bl	80004ec <__aeabi_dmul>
 8007d14:	4604      	mov	r4, r0
 8007d16:	460d      	mov	r5, r1
 8007d18:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8007d1c:	9416      	str	r4, [sp, #88]	; 0x58
 8007d1e:	9317      	str	r3, [sp, #92]	; 0x5c
 8007d20:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 8007d24:	e7a2      	b.n	8007c6c <_strtod_l+0x97c>
 8007d26:	f1b8 0f01 	cmp.w	r8, #1
 8007d2a:	d103      	bne.n	8007d34 <_strtod_l+0xa44>
 8007d2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	f43f ad92 	beq.w	8007858 <_strtod_l+0x568>
 8007d34:	2600      	movs	r6, #0
 8007d36:	2400      	movs	r4, #0
 8007d38:	4f32      	ldr	r7, [pc, #200]	; (8007e04 <_strtod_l+0xb14>)
 8007d3a:	e796      	b.n	8007c6a <_strtod_l+0x97a>
 8007d3c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8007d3e:	4d30      	ldr	r5, [pc, #192]	; (8007e00 <_strtod_l+0xb10>)
 8007d40:	e7ea      	b.n	8007d18 <_strtod_l+0xa28>
 8007d42:	4b2f      	ldr	r3, [pc, #188]	; (8007e00 <_strtod_l+0xb10>)
 8007d44:	2200      	movs	r2, #0
 8007d46:	4630      	mov	r0, r6
 8007d48:	4639      	mov	r1, r7
 8007d4a:	f7f8 fbcf 	bl	80004ec <__aeabi_dmul>
 8007d4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d50:	4604      	mov	r4, r0
 8007d52:	460d      	mov	r5, r1
 8007d54:	b933      	cbnz	r3, 8007d64 <_strtod_l+0xa74>
 8007d56:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007d5a:	9010      	str	r0, [sp, #64]	; 0x40
 8007d5c:	9311      	str	r3, [sp, #68]	; 0x44
 8007d5e:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007d62:	e783      	b.n	8007c6c <_strtod_l+0x97c>
 8007d64:	4602      	mov	r2, r0
 8007d66:	460b      	mov	r3, r1
 8007d68:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8007d6c:	e7f7      	b.n	8007d5e <_strtod_l+0xa6e>
 8007d6e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8007d72:	9b05      	ldr	r3, [sp, #20]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d1a8      	bne.n	8007cca <_strtod_l+0x9da>
 8007d78:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007d7c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007d7e:	0d1b      	lsrs	r3, r3, #20
 8007d80:	051b      	lsls	r3, r3, #20
 8007d82:	429a      	cmp	r2, r3
 8007d84:	d1a1      	bne.n	8007cca <_strtod_l+0x9da>
 8007d86:	4620      	mov	r0, r4
 8007d88:	4629      	mov	r1, r5
 8007d8a:	f7f8 fea7 	bl	8000adc <__aeabi_d2lz>
 8007d8e:	f7f8 fb7f 	bl	8000490 <__aeabi_l2d>
 8007d92:	4602      	mov	r2, r0
 8007d94:	460b      	mov	r3, r1
 8007d96:	4620      	mov	r0, r4
 8007d98:	4629      	mov	r1, r5
 8007d9a:	f7f8 f9ef 	bl	800017c <__aeabi_dsub>
 8007d9e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007da0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007da4:	ea43 0308 	orr.w	r3, r3, r8
 8007da8:	4313      	orrs	r3, r2
 8007daa:	4604      	mov	r4, r0
 8007dac:	460d      	mov	r5, r1
 8007dae:	d066      	beq.n	8007e7e <_strtod_l+0xb8e>
 8007db0:	a309      	add	r3, pc, #36	; (adr r3, 8007dd8 <_strtod_l+0xae8>)
 8007db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007db6:	f7f8 fe0b 	bl	80009d0 <__aeabi_dcmplt>
 8007dba:	2800      	cmp	r0, #0
 8007dbc:	f47f ace2 	bne.w	8007784 <_strtod_l+0x494>
 8007dc0:	a307      	add	r3, pc, #28	; (adr r3, 8007de0 <_strtod_l+0xaf0>)
 8007dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dc6:	4620      	mov	r0, r4
 8007dc8:	4629      	mov	r1, r5
 8007dca:	f7f8 fe1f 	bl	8000a0c <__aeabi_dcmpgt>
 8007dce:	2800      	cmp	r0, #0
 8007dd0:	f43f af7b 	beq.w	8007cca <_strtod_l+0x9da>
 8007dd4:	e4d6      	b.n	8007784 <_strtod_l+0x494>
 8007dd6:	bf00      	nop
 8007dd8:	94a03595 	.word	0x94a03595
 8007ddc:	3fdfffff 	.word	0x3fdfffff
 8007de0:	35afe535 	.word	0x35afe535
 8007de4:	3fe00000 	.word	0x3fe00000
 8007de8:	000fffff 	.word	0x000fffff
 8007dec:	7ff00000 	.word	0x7ff00000
 8007df0:	7fefffff 	.word	0x7fefffff
 8007df4:	3ff00000 	.word	0x3ff00000
 8007df8:	7fe00000 	.word	0x7fe00000
 8007dfc:	7c9fffff 	.word	0x7c9fffff
 8007e00:	3fe00000 	.word	0x3fe00000
 8007e04:	bff00000 	.word	0xbff00000
 8007e08:	9b05      	ldr	r3, [sp, #20]
 8007e0a:	b313      	cbz	r3, 8007e52 <_strtod_l+0xb62>
 8007e0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007e0e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007e12:	d81e      	bhi.n	8007e52 <_strtod_l+0xb62>
 8007e14:	a326      	add	r3, pc, #152	; (adr r3, 8007eb0 <_strtod_l+0xbc0>)
 8007e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e1a:	4620      	mov	r0, r4
 8007e1c:	4629      	mov	r1, r5
 8007e1e:	f7f8 fde1 	bl	80009e4 <__aeabi_dcmple>
 8007e22:	b190      	cbz	r0, 8007e4a <_strtod_l+0xb5a>
 8007e24:	4629      	mov	r1, r5
 8007e26:	4620      	mov	r0, r4
 8007e28:	f7f8 fe38 	bl	8000a9c <__aeabi_d2uiz>
 8007e2c:	2801      	cmp	r0, #1
 8007e2e:	bf38      	it	cc
 8007e30:	2001      	movcc	r0, #1
 8007e32:	f7f8 fae1 	bl	80003f8 <__aeabi_ui2d>
 8007e36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e38:	4604      	mov	r4, r0
 8007e3a:	460d      	mov	r5, r1
 8007e3c:	b9d3      	cbnz	r3, 8007e74 <_strtod_l+0xb84>
 8007e3e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007e42:	9012      	str	r0, [sp, #72]	; 0x48
 8007e44:	9313      	str	r3, [sp, #76]	; 0x4c
 8007e46:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8007e4a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007e4c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8007e50:	1a9f      	subs	r7, r3, r2
 8007e52:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007e56:	f001 fecd 	bl	8009bf4 <__ulp>
 8007e5a:	4602      	mov	r2, r0
 8007e5c:	460b      	mov	r3, r1
 8007e5e:	4630      	mov	r0, r6
 8007e60:	4639      	mov	r1, r7
 8007e62:	f7f8 fb43 	bl	80004ec <__aeabi_dmul>
 8007e66:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007e6a:	f7f8 f989 	bl	8000180 <__adddf3>
 8007e6e:	4680      	mov	r8, r0
 8007e70:	4689      	mov	r9, r1
 8007e72:	e77e      	b.n	8007d72 <_strtod_l+0xa82>
 8007e74:	4602      	mov	r2, r0
 8007e76:	460b      	mov	r3, r1
 8007e78:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8007e7c:	e7e3      	b.n	8007e46 <_strtod_l+0xb56>
 8007e7e:	a30e      	add	r3, pc, #56	; (adr r3, 8007eb8 <_strtod_l+0xbc8>)
 8007e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e84:	f7f8 fda4 	bl	80009d0 <__aeabi_dcmplt>
 8007e88:	e7a1      	b.n	8007dce <_strtod_l+0xade>
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	930a      	str	r3, [sp, #40]	; 0x28
 8007e8e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007e90:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007e92:	6013      	str	r3, [r2, #0]
 8007e94:	f7ff ba71 	b.w	800737a <_strtod_l+0x8a>
 8007e98:	2a65      	cmp	r2, #101	; 0x65
 8007e9a:	f43f ab63 	beq.w	8007564 <_strtod_l+0x274>
 8007e9e:	2a45      	cmp	r2, #69	; 0x45
 8007ea0:	f43f ab60 	beq.w	8007564 <_strtod_l+0x274>
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	f7ff bb95 	b.w	80075d4 <_strtod_l+0x2e4>
 8007eaa:	bf00      	nop
 8007eac:	f3af 8000 	nop.w
 8007eb0:	ffc00000 	.word	0xffc00000
 8007eb4:	41dfffff 	.word	0x41dfffff
 8007eb8:	94a03595 	.word	0x94a03595
 8007ebc:	3fcfffff 	.word	0x3fcfffff

08007ec0 <strtod>:
 8007ec0:	460a      	mov	r2, r1
 8007ec2:	4601      	mov	r1, r0
 8007ec4:	4802      	ldr	r0, [pc, #8]	; (8007ed0 <strtod+0x10>)
 8007ec6:	4b03      	ldr	r3, [pc, #12]	; (8007ed4 <strtod+0x14>)
 8007ec8:	6800      	ldr	r0, [r0, #0]
 8007eca:	f7ff ba11 	b.w	80072f0 <_strtod_l>
 8007ece:	bf00      	nop
 8007ed0:	2000021c 	.word	0x2000021c
 8007ed4:	20000284 	.word	0x20000284

08007ed8 <strtok>:
 8007ed8:	4b16      	ldr	r3, [pc, #88]	; (8007f34 <strtok+0x5c>)
 8007eda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ede:	681f      	ldr	r7, [r3, #0]
 8007ee0:	4605      	mov	r5, r0
 8007ee2:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8007ee4:	460e      	mov	r6, r1
 8007ee6:	b9ec      	cbnz	r4, 8007f24 <strtok+0x4c>
 8007ee8:	2050      	movs	r0, #80	; 0x50
 8007eea:	f001 faeb 	bl	80094c4 <malloc>
 8007eee:	4602      	mov	r2, r0
 8007ef0:	65b8      	str	r0, [r7, #88]	; 0x58
 8007ef2:	b920      	cbnz	r0, 8007efe <strtok+0x26>
 8007ef4:	2157      	movs	r1, #87	; 0x57
 8007ef6:	4b10      	ldr	r3, [pc, #64]	; (8007f38 <strtok+0x60>)
 8007ef8:	4810      	ldr	r0, [pc, #64]	; (8007f3c <strtok+0x64>)
 8007efa:	f000 f8cf 	bl	800809c <__assert_func>
 8007efe:	e9c0 4400 	strd	r4, r4, [r0]
 8007f02:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8007f06:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8007f0a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8007f0e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8007f12:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8007f16:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8007f1a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8007f1e:	6184      	str	r4, [r0, #24]
 8007f20:	7704      	strb	r4, [r0, #28]
 8007f22:	6244      	str	r4, [r0, #36]	; 0x24
 8007f24:	4631      	mov	r1, r6
 8007f26:	4628      	mov	r0, r5
 8007f28:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f30:	f000 b806 	b.w	8007f40 <__strtok_r>
 8007f34:	2000021c 	.word	0x2000021c
 8007f38:	0800b1e8 	.word	0x0800b1e8
 8007f3c:	0800b1ff 	.word	0x0800b1ff

08007f40 <__strtok_r>:
 8007f40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f42:	b908      	cbnz	r0, 8007f48 <__strtok_r+0x8>
 8007f44:	6810      	ldr	r0, [r2, #0]
 8007f46:	b188      	cbz	r0, 8007f6c <__strtok_r+0x2c>
 8007f48:	4604      	mov	r4, r0
 8007f4a:	460f      	mov	r7, r1
 8007f4c:	4620      	mov	r0, r4
 8007f4e:	f814 5b01 	ldrb.w	r5, [r4], #1
 8007f52:	f817 6b01 	ldrb.w	r6, [r7], #1
 8007f56:	b91e      	cbnz	r6, 8007f60 <__strtok_r+0x20>
 8007f58:	b965      	cbnz	r5, 8007f74 <__strtok_r+0x34>
 8007f5a:	4628      	mov	r0, r5
 8007f5c:	6015      	str	r5, [r2, #0]
 8007f5e:	e005      	b.n	8007f6c <__strtok_r+0x2c>
 8007f60:	42b5      	cmp	r5, r6
 8007f62:	d1f6      	bne.n	8007f52 <__strtok_r+0x12>
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d1f0      	bne.n	8007f4a <__strtok_r+0xa>
 8007f68:	6014      	str	r4, [r2, #0]
 8007f6a:	7003      	strb	r3, [r0, #0]
 8007f6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f6e:	461c      	mov	r4, r3
 8007f70:	e00c      	b.n	8007f8c <__strtok_r+0x4c>
 8007f72:	b915      	cbnz	r5, 8007f7a <__strtok_r+0x3a>
 8007f74:	460e      	mov	r6, r1
 8007f76:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007f7a:	f816 5b01 	ldrb.w	r5, [r6], #1
 8007f7e:	42ab      	cmp	r3, r5
 8007f80:	d1f7      	bne.n	8007f72 <__strtok_r+0x32>
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d0f3      	beq.n	8007f6e <__strtok_r+0x2e>
 8007f86:	2300      	movs	r3, #0
 8007f88:	f804 3c01 	strb.w	r3, [r4, #-1]
 8007f8c:	6014      	str	r4, [r2, #0]
 8007f8e:	e7ed      	b.n	8007f6c <__strtok_r+0x2c>

08007f90 <_strtol_l.constprop.0>:
 8007f90:	2b01      	cmp	r3, #1
 8007f92:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f96:	4680      	mov	r8, r0
 8007f98:	d001      	beq.n	8007f9e <_strtol_l.constprop.0+0xe>
 8007f9a:	2b24      	cmp	r3, #36	; 0x24
 8007f9c:	d906      	bls.n	8007fac <_strtol_l.constprop.0+0x1c>
 8007f9e:	f7fe fcad 	bl	80068fc <__errno>
 8007fa2:	2316      	movs	r3, #22
 8007fa4:	6003      	str	r3, [r0, #0]
 8007fa6:	2000      	movs	r0, #0
 8007fa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fac:	460d      	mov	r5, r1
 8007fae:	4f35      	ldr	r7, [pc, #212]	; (8008084 <_strtol_l.constprop.0+0xf4>)
 8007fb0:	4628      	mov	r0, r5
 8007fb2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007fb6:	5de6      	ldrb	r6, [r4, r7]
 8007fb8:	f016 0608 	ands.w	r6, r6, #8
 8007fbc:	d1f8      	bne.n	8007fb0 <_strtol_l.constprop.0+0x20>
 8007fbe:	2c2d      	cmp	r4, #45	; 0x2d
 8007fc0:	d12f      	bne.n	8008022 <_strtol_l.constprop.0+0x92>
 8007fc2:	2601      	movs	r6, #1
 8007fc4:	782c      	ldrb	r4, [r5, #0]
 8007fc6:	1c85      	adds	r5, r0, #2
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d057      	beq.n	800807c <_strtol_l.constprop.0+0xec>
 8007fcc:	2b10      	cmp	r3, #16
 8007fce:	d109      	bne.n	8007fe4 <_strtol_l.constprop.0+0x54>
 8007fd0:	2c30      	cmp	r4, #48	; 0x30
 8007fd2:	d107      	bne.n	8007fe4 <_strtol_l.constprop.0+0x54>
 8007fd4:	7828      	ldrb	r0, [r5, #0]
 8007fd6:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8007fda:	2858      	cmp	r0, #88	; 0x58
 8007fdc:	d149      	bne.n	8008072 <_strtol_l.constprop.0+0xe2>
 8007fde:	2310      	movs	r3, #16
 8007fe0:	786c      	ldrb	r4, [r5, #1]
 8007fe2:	3502      	adds	r5, #2
 8007fe4:	2700      	movs	r7, #0
 8007fe6:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8007fea:	f10e 3eff 	add.w	lr, lr, #4294967295
 8007fee:	fbbe f9f3 	udiv	r9, lr, r3
 8007ff2:	4638      	mov	r0, r7
 8007ff4:	fb03 ea19 	mls	sl, r3, r9, lr
 8007ff8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8007ffc:	f1bc 0f09 	cmp.w	ip, #9
 8008000:	d814      	bhi.n	800802c <_strtol_l.constprop.0+0x9c>
 8008002:	4664      	mov	r4, ip
 8008004:	42a3      	cmp	r3, r4
 8008006:	dd22      	ble.n	800804e <_strtol_l.constprop.0+0xbe>
 8008008:	2f00      	cmp	r7, #0
 800800a:	db1d      	blt.n	8008048 <_strtol_l.constprop.0+0xb8>
 800800c:	4581      	cmp	r9, r0
 800800e:	d31b      	bcc.n	8008048 <_strtol_l.constprop.0+0xb8>
 8008010:	d101      	bne.n	8008016 <_strtol_l.constprop.0+0x86>
 8008012:	45a2      	cmp	sl, r4
 8008014:	db18      	blt.n	8008048 <_strtol_l.constprop.0+0xb8>
 8008016:	2701      	movs	r7, #1
 8008018:	fb00 4003 	mla	r0, r0, r3, r4
 800801c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008020:	e7ea      	b.n	8007ff8 <_strtol_l.constprop.0+0x68>
 8008022:	2c2b      	cmp	r4, #43	; 0x2b
 8008024:	bf04      	itt	eq
 8008026:	782c      	ldrbeq	r4, [r5, #0]
 8008028:	1c85      	addeq	r5, r0, #2
 800802a:	e7cd      	b.n	8007fc8 <_strtol_l.constprop.0+0x38>
 800802c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8008030:	f1bc 0f19 	cmp.w	ip, #25
 8008034:	d801      	bhi.n	800803a <_strtol_l.constprop.0+0xaa>
 8008036:	3c37      	subs	r4, #55	; 0x37
 8008038:	e7e4      	b.n	8008004 <_strtol_l.constprop.0+0x74>
 800803a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800803e:	f1bc 0f19 	cmp.w	ip, #25
 8008042:	d804      	bhi.n	800804e <_strtol_l.constprop.0+0xbe>
 8008044:	3c57      	subs	r4, #87	; 0x57
 8008046:	e7dd      	b.n	8008004 <_strtol_l.constprop.0+0x74>
 8008048:	f04f 37ff 	mov.w	r7, #4294967295
 800804c:	e7e6      	b.n	800801c <_strtol_l.constprop.0+0x8c>
 800804e:	2f00      	cmp	r7, #0
 8008050:	da07      	bge.n	8008062 <_strtol_l.constprop.0+0xd2>
 8008052:	2322      	movs	r3, #34	; 0x22
 8008054:	4670      	mov	r0, lr
 8008056:	f8c8 3000 	str.w	r3, [r8]
 800805a:	2a00      	cmp	r2, #0
 800805c:	d0a4      	beq.n	8007fa8 <_strtol_l.constprop.0+0x18>
 800805e:	1e69      	subs	r1, r5, #1
 8008060:	e005      	b.n	800806e <_strtol_l.constprop.0+0xde>
 8008062:	b106      	cbz	r6, 8008066 <_strtol_l.constprop.0+0xd6>
 8008064:	4240      	negs	r0, r0
 8008066:	2a00      	cmp	r2, #0
 8008068:	d09e      	beq.n	8007fa8 <_strtol_l.constprop.0+0x18>
 800806a:	2f00      	cmp	r7, #0
 800806c:	d1f7      	bne.n	800805e <_strtol_l.constprop.0+0xce>
 800806e:	6011      	str	r1, [r2, #0]
 8008070:	e79a      	b.n	8007fa8 <_strtol_l.constprop.0+0x18>
 8008072:	2430      	movs	r4, #48	; 0x30
 8008074:	2b00      	cmp	r3, #0
 8008076:	d1b5      	bne.n	8007fe4 <_strtol_l.constprop.0+0x54>
 8008078:	2308      	movs	r3, #8
 800807a:	e7b3      	b.n	8007fe4 <_strtol_l.constprop.0+0x54>
 800807c:	2c30      	cmp	r4, #48	; 0x30
 800807e:	d0a9      	beq.n	8007fd4 <_strtol_l.constprop.0+0x44>
 8008080:	230a      	movs	r3, #10
 8008082:	e7af      	b.n	8007fe4 <_strtol_l.constprop.0+0x54>
 8008084:	0800b299 	.word	0x0800b299

08008088 <strtol>:
 8008088:	4613      	mov	r3, r2
 800808a:	460a      	mov	r2, r1
 800808c:	4601      	mov	r1, r0
 800808e:	4802      	ldr	r0, [pc, #8]	; (8008098 <strtol+0x10>)
 8008090:	6800      	ldr	r0, [r0, #0]
 8008092:	f7ff bf7d 	b.w	8007f90 <_strtol_l.constprop.0>
 8008096:	bf00      	nop
 8008098:	2000021c 	.word	0x2000021c

0800809c <__assert_func>:
 800809c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800809e:	4614      	mov	r4, r2
 80080a0:	461a      	mov	r2, r3
 80080a2:	4b09      	ldr	r3, [pc, #36]	; (80080c8 <__assert_func+0x2c>)
 80080a4:	4605      	mov	r5, r0
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	68d8      	ldr	r0, [r3, #12]
 80080aa:	b14c      	cbz	r4, 80080c0 <__assert_func+0x24>
 80080ac:	4b07      	ldr	r3, [pc, #28]	; (80080cc <__assert_func+0x30>)
 80080ae:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80080b2:	9100      	str	r1, [sp, #0]
 80080b4:	462b      	mov	r3, r5
 80080b6:	4906      	ldr	r1, [pc, #24]	; (80080d0 <__assert_func+0x34>)
 80080b8:	f000 fe88 	bl	8008dcc <fiprintf>
 80080bc:	f002 fb7e 	bl	800a7bc <abort>
 80080c0:	4b04      	ldr	r3, [pc, #16]	; (80080d4 <__assert_func+0x38>)
 80080c2:	461c      	mov	r4, r3
 80080c4:	e7f3      	b.n	80080ae <__assert_func+0x12>
 80080c6:	bf00      	nop
 80080c8:	2000021c 	.word	0x2000021c
 80080cc:	0800b25c 	.word	0x0800b25c
 80080d0:	0800b269 	.word	0x0800b269
 80080d4:	0800b297 	.word	0x0800b297

080080d8 <quorem>:
 80080d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080dc:	6903      	ldr	r3, [r0, #16]
 80080de:	690c      	ldr	r4, [r1, #16]
 80080e0:	4607      	mov	r7, r0
 80080e2:	42a3      	cmp	r3, r4
 80080e4:	f2c0 8082 	blt.w	80081ec <quorem+0x114>
 80080e8:	3c01      	subs	r4, #1
 80080ea:	f100 0514 	add.w	r5, r0, #20
 80080ee:	f101 0814 	add.w	r8, r1, #20
 80080f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80080f6:	9301      	str	r3, [sp, #4]
 80080f8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80080fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008100:	3301      	adds	r3, #1
 8008102:	429a      	cmp	r2, r3
 8008104:	fbb2 f6f3 	udiv	r6, r2, r3
 8008108:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800810c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008110:	d331      	bcc.n	8008176 <quorem+0x9e>
 8008112:	f04f 0e00 	mov.w	lr, #0
 8008116:	4640      	mov	r0, r8
 8008118:	46ac      	mov	ip, r5
 800811a:	46f2      	mov	sl, lr
 800811c:	f850 2b04 	ldr.w	r2, [r0], #4
 8008120:	b293      	uxth	r3, r2
 8008122:	fb06 e303 	mla	r3, r6, r3, lr
 8008126:	0c12      	lsrs	r2, r2, #16
 8008128:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800812c:	b29b      	uxth	r3, r3
 800812e:	fb06 e202 	mla	r2, r6, r2, lr
 8008132:	ebaa 0303 	sub.w	r3, sl, r3
 8008136:	f8dc a000 	ldr.w	sl, [ip]
 800813a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800813e:	fa1f fa8a 	uxth.w	sl, sl
 8008142:	4453      	add	r3, sl
 8008144:	f8dc a000 	ldr.w	sl, [ip]
 8008148:	b292      	uxth	r2, r2
 800814a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800814e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008152:	b29b      	uxth	r3, r3
 8008154:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008158:	4581      	cmp	r9, r0
 800815a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800815e:	f84c 3b04 	str.w	r3, [ip], #4
 8008162:	d2db      	bcs.n	800811c <quorem+0x44>
 8008164:	f855 300b 	ldr.w	r3, [r5, fp]
 8008168:	b92b      	cbnz	r3, 8008176 <quorem+0x9e>
 800816a:	9b01      	ldr	r3, [sp, #4]
 800816c:	3b04      	subs	r3, #4
 800816e:	429d      	cmp	r5, r3
 8008170:	461a      	mov	r2, r3
 8008172:	d32f      	bcc.n	80081d4 <quorem+0xfc>
 8008174:	613c      	str	r4, [r7, #16]
 8008176:	4638      	mov	r0, r7
 8008178:	f001 fc94 	bl	8009aa4 <__mcmp>
 800817c:	2800      	cmp	r0, #0
 800817e:	db25      	blt.n	80081cc <quorem+0xf4>
 8008180:	4628      	mov	r0, r5
 8008182:	f04f 0c00 	mov.w	ip, #0
 8008186:	3601      	adds	r6, #1
 8008188:	f858 1b04 	ldr.w	r1, [r8], #4
 800818c:	f8d0 e000 	ldr.w	lr, [r0]
 8008190:	b28b      	uxth	r3, r1
 8008192:	ebac 0303 	sub.w	r3, ip, r3
 8008196:	fa1f f28e 	uxth.w	r2, lr
 800819a:	4413      	add	r3, r2
 800819c:	0c0a      	lsrs	r2, r1, #16
 800819e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80081a2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80081a6:	b29b      	uxth	r3, r3
 80081a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80081ac:	45c1      	cmp	r9, r8
 80081ae:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80081b2:	f840 3b04 	str.w	r3, [r0], #4
 80081b6:	d2e7      	bcs.n	8008188 <quorem+0xb0>
 80081b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80081bc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80081c0:	b922      	cbnz	r2, 80081cc <quorem+0xf4>
 80081c2:	3b04      	subs	r3, #4
 80081c4:	429d      	cmp	r5, r3
 80081c6:	461a      	mov	r2, r3
 80081c8:	d30a      	bcc.n	80081e0 <quorem+0x108>
 80081ca:	613c      	str	r4, [r7, #16]
 80081cc:	4630      	mov	r0, r6
 80081ce:	b003      	add	sp, #12
 80081d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081d4:	6812      	ldr	r2, [r2, #0]
 80081d6:	3b04      	subs	r3, #4
 80081d8:	2a00      	cmp	r2, #0
 80081da:	d1cb      	bne.n	8008174 <quorem+0x9c>
 80081dc:	3c01      	subs	r4, #1
 80081de:	e7c6      	b.n	800816e <quorem+0x96>
 80081e0:	6812      	ldr	r2, [r2, #0]
 80081e2:	3b04      	subs	r3, #4
 80081e4:	2a00      	cmp	r2, #0
 80081e6:	d1f0      	bne.n	80081ca <quorem+0xf2>
 80081e8:	3c01      	subs	r4, #1
 80081ea:	e7eb      	b.n	80081c4 <quorem+0xec>
 80081ec:	2000      	movs	r0, #0
 80081ee:	e7ee      	b.n	80081ce <quorem+0xf6>

080081f0 <_dtoa_r>:
 80081f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081f4:	4616      	mov	r6, r2
 80081f6:	461f      	mov	r7, r3
 80081f8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80081fa:	b099      	sub	sp, #100	; 0x64
 80081fc:	4605      	mov	r5, r0
 80081fe:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008202:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8008206:	b974      	cbnz	r4, 8008226 <_dtoa_r+0x36>
 8008208:	2010      	movs	r0, #16
 800820a:	f001 f95b 	bl	80094c4 <malloc>
 800820e:	4602      	mov	r2, r0
 8008210:	6268      	str	r0, [r5, #36]	; 0x24
 8008212:	b920      	cbnz	r0, 800821e <_dtoa_r+0x2e>
 8008214:	21ea      	movs	r1, #234	; 0xea
 8008216:	4ba8      	ldr	r3, [pc, #672]	; (80084b8 <_dtoa_r+0x2c8>)
 8008218:	48a8      	ldr	r0, [pc, #672]	; (80084bc <_dtoa_r+0x2cc>)
 800821a:	f7ff ff3f 	bl	800809c <__assert_func>
 800821e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008222:	6004      	str	r4, [r0, #0]
 8008224:	60c4      	str	r4, [r0, #12]
 8008226:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008228:	6819      	ldr	r1, [r3, #0]
 800822a:	b151      	cbz	r1, 8008242 <_dtoa_r+0x52>
 800822c:	685a      	ldr	r2, [r3, #4]
 800822e:	2301      	movs	r3, #1
 8008230:	4093      	lsls	r3, r2
 8008232:	604a      	str	r2, [r1, #4]
 8008234:	608b      	str	r3, [r1, #8]
 8008236:	4628      	mov	r0, r5
 8008238:	f001 f9ac 	bl	8009594 <_Bfree>
 800823c:	2200      	movs	r2, #0
 800823e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008240:	601a      	str	r2, [r3, #0]
 8008242:	1e3b      	subs	r3, r7, #0
 8008244:	bfaf      	iteee	ge
 8008246:	2300      	movge	r3, #0
 8008248:	2201      	movlt	r2, #1
 800824a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800824e:	9305      	strlt	r3, [sp, #20]
 8008250:	bfa8      	it	ge
 8008252:	f8c8 3000 	strge.w	r3, [r8]
 8008256:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800825a:	4b99      	ldr	r3, [pc, #612]	; (80084c0 <_dtoa_r+0x2d0>)
 800825c:	bfb8      	it	lt
 800825e:	f8c8 2000 	strlt.w	r2, [r8]
 8008262:	ea33 0309 	bics.w	r3, r3, r9
 8008266:	d119      	bne.n	800829c <_dtoa_r+0xac>
 8008268:	f242 730f 	movw	r3, #9999	; 0x270f
 800826c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800826e:	6013      	str	r3, [r2, #0]
 8008270:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008274:	4333      	orrs	r3, r6
 8008276:	f000 857f 	beq.w	8008d78 <_dtoa_r+0xb88>
 800827a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800827c:	b953      	cbnz	r3, 8008294 <_dtoa_r+0xa4>
 800827e:	4b91      	ldr	r3, [pc, #580]	; (80084c4 <_dtoa_r+0x2d4>)
 8008280:	e022      	b.n	80082c8 <_dtoa_r+0xd8>
 8008282:	4b91      	ldr	r3, [pc, #580]	; (80084c8 <_dtoa_r+0x2d8>)
 8008284:	9303      	str	r3, [sp, #12]
 8008286:	3308      	adds	r3, #8
 8008288:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800828a:	6013      	str	r3, [r2, #0]
 800828c:	9803      	ldr	r0, [sp, #12]
 800828e:	b019      	add	sp, #100	; 0x64
 8008290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008294:	4b8b      	ldr	r3, [pc, #556]	; (80084c4 <_dtoa_r+0x2d4>)
 8008296:	9303      	str	r3, [sp, #12]
 8008298:	3303      	adds	r3, #3
 800829a:	e7f5      	b.n	8008288 <_dtoa_r+0x98>
 800829c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80082a0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80082a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80082a8:	2200      	movs	r2, #0
 80082aa:	2300      	movs	r3, #0
 80082ac:	f7f8 fb86 	bl	80009bc <__aeabi_dcmpeq>
 80082b0:	4680      	mov	r8, r0
 80082b2:	b158      	cbz	r0, 80082cc <_dtoa_r+0xdc>
 80082b4:	2301      	movs	r3, #1
 80082b6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80082b8:	6013      	str	r3, [r2, #0]
 80082ba:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80082bc:	2b00      	cmp	r3, #0
 80082be:	f000 8558 	beq.w	8008d72 <_dtoa_r+0xb82>
 80082c2:	4882      	ldr	r0, [pc, #520]	; (80084cc <_dtoa_r+0x2dc>)
 80082c4:	6018      	str	r0, [r3, #0]
 80082c6:	1e43      	subs	r3, r0, #1
 80082c8:	9303      	str	r3, [sp, #12]
 80082ca:	e7df      	b.n	800828c <_dtoa_r+0x9c>
 80082cc:	ab16      	add	r3, sp, #88	; 0x58
 80082ce:	9301      	str	r3, [sp, #4]
 80082d0:	ab17      	add	r3, sp, #92	; 0x5c
 80082d2:	9300      	str	r3, [sp, #0]
 80082d4:	4628      	mov	r0, r5
 80082d6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80082da:	f001 fd05 	bl	8009ce8 <__d2b>
 80082de:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80082e2:	4683      	mov	fp, r0
 80082e4:	2c00      	cmp	r4, #0
 80082e6:	d07f      	beq.n	80083e8 <_dtoa_r+0x1f8>
 80082e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80082ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80082ee:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80082f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80082f6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80082fa:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80082fe:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8008302:	2200      	movs	r2, #0
 8008304:	4b72      	ldr	r3, [pc, #456]	; (80084d0 <_dtoa_r+0x2e0>)
 8008306:	f7f7 ff39 	bl	800017c <__aeabi_dsub>
 800830a:	a365      	add	r3, pc, #404	; (adr r3, 80084a0 <_dtoa_r+0x2b0>)
 800830c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008310:	f7f8 f8ec 	bl	80004ec <__aeabi_dmul>
 8008314:	a364      	add	r3, pc, #400	; (adr r3, 80084a8 <_dtoa_r+0x2b8>)
 8008316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800831a:	f7f7 ff31 	bl	8000180 <__adddf3>
 800831e:	4606      	mov	r6, r0
 8008320:	4620      	mov	r0, r4
 8008322:	460f      	mov	r7, r1
 8008324:	f7f8 f878 	bl	8000418 <__aeabi_i2d>
 8008328:	a361      	add	r3, pc, #388	; (adr r3, 80084b0 <_dtoa_r+0x2c0>)
 800832a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800832e:	f7f8 f8dd 	bl	80004ec <__aeabi_dmul>
 8008332:	4602      	mov	r2, r0
 8008334:	460b      	mov	r3, r1
 8008336:	4630      	mov	r0, r6
 8008338:	4639      	mov	r1, r7
 800833a:	f7f7 ff21 	bl	8000180 <__adddf3>
 800833e:	4606      	mov	r6, r0
 8008340:	460f      	mov	r7, r1
 8008342:	f7f8 fb83 	bl	8000a4c <__aeabi_d2iz>
 8008346:	2200      	movs	r2, #0
 8008348:	4682      	mov	sl, r0
 800834a:	2300      	movs	r3, #0
 800834c:	4630      	mov	r0, r6
 800834e:	4639      	mov	r1, r7
 8008350:	f7f8 fb3e 	bl	80009d0 <__aeabi_dcmplt>
 8008354:	b148      	cbz	r0, 800836a <_dtoa_r+0x17a>
 8008356:	4650      	mov	r0, sl
 8008358:	f7f8 f85e 	bl	8000418 <__aeabi_i2d>
 800835c:	4632      	mov	r2, r6
 800835e:	463b      	mov	r3, r7
 8008360:	f7f8 fb2c 	bl	80009bc <__aeabi_dcmpeq>
 8008364:	b908      	cbnz	r0, 800836a <_dtoa_r+0x17a>
 8008366:	f10a 3aff 	add.w	sl, sl, #4294967295
 800836a:	f1ba 0f16 	cmp.w	sl, #22
 800836e:	d858      	bhi.n	8008422 <_dtoa_r+0x232>
 8008370:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008374:	4b57      	ldr	r3, [pc, #348]	; (80084d4 <_dtoa_r+0x2e4>)
 8008376:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800837a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800837e:	f7f8 fb27 	bl	80009d0 <__aeabi_dcmplt>
 8008382:	2800      	cmp	r0, #0
 8008384:	d04f      	beq.n	8008426 <_dtoa_r+0x236>
 8008386:	2300      	movs	r3, #0
 8008388:	f10a 3aff 	add.w	sl, sl, #4294967295
 800838c:	930f      	str	r3, [sp, #60]	; 0x3c
 800838e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008390:	1b1c      	subs	r4, r3, r4
 8008392:	1e63      	subs	r3, r4, #1
 8008394:	9309      	str	r3, [sp, #36]	; 0x24
 8008396:	bf49      	itett	mi
 8008398:	f1c4 0301 	rsbmi	r3, r4, #1
 800839c:	2300      	movpl	r3, #0
 800839e:	9306      	strmi	r3, [sp, #24]
 80083a0:	2300      	movmi	r3, #0
 80083a2:	bf54      	ite	pl
 80083a4:	9306      	strpl	r3, [sp, #24]
 80083a6:	9309      	strmi	r3, [sp, #36]	; 0x24
 80083a8:	f1ba 0f00 	cmp.w	sl, #0
 80083ac:	db3d      	blt.n	800842a <_dtoa_r+0x23a>
 80083ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083b0:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80083b4:	4453      	add	r3, sl
 80083b6:	9309      	str	r3, [sp, #36]	; 0x24
 80083b8:	2300      	movs	r3, #0
 80083ba:	930a      	str	r3, [sp, #40]	; 0x28
 80083bc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80083be:	2b09      	cmp	r3, #9
 80083c0:	f200 808c 	bhi.w	80084dc <_dtoa_r+0x2ec>
 80083c4:	2b05      	cmp	r3, #5
 80083c6:	bfc4      	itt	gt
 80083c8:	3b04      	subgt	r3, #4
 80083ca:	9322      	strgt	r3, [sp, #136]	; 0x88
 80083cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80083ce:	bfc8      	it	gt
 80083d0:	2400      	movgt	r4, #0
 80083d2:	f1a3 0302 	sub.w	r3, r3, #2
 80083d6:	bfd8      	it	le
 80083d8:	2401      	movle	r4, #1
 80083da:	2b03      	cmp	r3, #3
 80083dc:	f200 808a 	bhi.w	80084f4 <_dtoa_r+0x304>
 80083e0:	e8df f003 	tbb	[pc, r3]
 80083e4:	5b4d4f2d 	.word	0x5b4d4f2d
 80083e8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80083ec:	441c      	add	r4, r3
 80083ee:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80083f2:	2b20      	cmp	r3, #32
 80083f4:	bfc3      	ittte	gt
 80083f6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80083fa:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80083fe:	fa09 f303 	lslgt.w	r3, r9, r3
 8008402:	f1c3 0320 	rsble	r3, r3, #32
 8008406:	bfc6      	itte	gt
 8008408:	fa26 f000 	lsrgt.w	r0, r6, r0
 800840c:	4318      	orrgt	r0, r3
 800840e:	fa06 f003 	lslle.w	r0, r6, r3
 8008412:	f7f7 fff1 	bl	80003f8 <__aeabi_ui2d>
 8008416:	2301      	movs	r3, #1
 8008418:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800841c:	3c01      	subs	r4, #1
 800841e:	9313      	str	r3, [sp, #76]	; 0x4c
 8008420:	e76f      	b.n	8008302 <_dtoa_r+0x112>
 8008422:	2301      	movs	r3, #1
 8008424:	e7b2      	b.n	800838c <_dtoa_r+0x19c>
 8008426:	900f      	str	r0, [sp, #60]	; 0x3c
 8008428:	e7b1      	b.n	800838e <_dtoa_r+0x19e>
 800842a:	9b06      	ldr	r3, [sp, #24]
 800842c:	eba3 030a 	sub.w	r3, r3, sl
 8008430:	9306      	str	r3, [sp, #24]
 8008432:	f1ca 0300 	rsb	r3, sl, #0
 8008436:	930a      	str	r3, [sp, #40]	; 0x28
 8008438:	2300      	movs	r3, #0
 800843a:	930e      	str	r3, [sp, #56]	; 0x38
 800843c:	e7be      	b.n	80083bc <_dtoa_r+0x1cc>
 800843e:	2300      	movs	r3, #0
 8008440:	930b      	str	r3, [sp, #44]	; 0x2c
 8008442:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008444:	2b00      	cmp	r3, #0
 8008446:	dc58      	bgt.n	80084fa <_dtoa_r+0x30a>
 8008448:	f04f 0901 	mov.w	r9, #1
 800844c:	464b      	mov	r3, r9
 800844e:	f8cd 9020 	str.w	r9, [sp, #32]
 8008452:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8008456:	2200      	movs	r2, #0
 8008458:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800845a:	6042      	str	r2, [r0, #4]
 800845c:	2204      	movs	r2, #4
 800845e:	f102 0614 	add.w	r6, r2, #20
 8008462:	429e      	cmp	r6, r3
 8008464:	6841      	ldr	r1, [r0, #4]
 8008466:	d94e      	bls.n	8008506 <_dtoa_r+0x316>
 8008468:	4628      	mov	r0, r5
 800846a:	f001 f853 	bl	8009514 <_Balloc>
 800846e:	9003      	str	r0, [sp, #12]
 8008470:	2800      	cmp	r0, #0
 8008472:	d14c      	bne.n	800850e <_dtoa_r+0x31e>
 8008474:	4602      	mov	r2, r0
 8008476:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800847a:	4b17      	ldr	r3, [pc, #92]	; (80084d8 <_dtoa_r+0x2e8>)
 800847c:	e6cc      	b.n	8008218 <_dtoa_r+0x28>
 800847e:	2301      	movs	r3, #1
 8008480:	e7de      	b.n	8008440 <_dtoa_r+0x250>
 8008482:	2300      	movs	r3, #0
 8008484:	930b      	str	r3, [sp, #44]	; 0x2c
 8008486:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008488:	eb0a 0903 	add.w	r9, sl, r3
 800848c:	f109 0301 	add.w	r3, r9, #1
 8008490:	2b01      	cmp	r3, #1
 8008492:	9308      	str	r3, [sp, #32]
 8008494:	bfb8      	it	lt
 8008496:	2301      	movlt	r3, #1
 8008498:	e7dd      	b.n	8008456 <_dtoa_r+0x266>
 800849a:	2301      	movs	r3, #1
 800849c:	e7f2      	b.n	8008484 <_dtoa_r+0x294>
 800849e:	bf00      	nop
 80084a0:	636f4361 	.word	0x636f4361
 80084a4:	3fd287a7 	.word	0x3fd287a7
 80084a8:	8b60c8b3 	.word	0x8b60c8b3
 80084ac:	3fc68a28 	.word	0x3fc68a28
 80084b0:	509f79fb 	.word	0x509f79fb
 80084b4:	3fd34413 	.word	0x3fd34413
 80084b8:	0800b1e8 	.word	0x0800b1e8
 80084bc:	0800b3a6 	.word	0x0800b3a6
 80084c0:	7ff00000 	.word	0x7ff00000
 80084c4:	0800b3a2 	.word	0x0800b3a2
 80084c8:	0800b399 	.word	0x0800b399
 80084cc:	0800b175 	.word	0x0800b175
 80084d0:	3ff80000 	.word	0x3ff80000
 80084d4:	0800b510 	.word	0x0800b510
 80084d8:	0800b401 	.word	0x0800b401
 80084dc:	2401      	movs	r4, #1
 80084de:	2300      	movs	r3, #0
 80084e0:	940b      	str	r4, [sp, #44]	; 0x2c
 80084e2:	9322      	str	r3, [sp, #136]	; 0x88
 80084e4:	f04f 39ff 	mov.w	r9, #4294967295
 80084e8:	2200      	movs	r2, #0
 80084ea:	2312      	movs	r3, #18
 80084ec:	f8cd 9020 	str.w	r9, [sp, #32]
 80084f0:	9223      	str	r2, [sp, #140]	; 0x8c
 80084f2:	e7b0      	b.n	8008456 <_dtoa_r+0x266>
 80084f4:	2301      	movs	r3, #1
 80084f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80084f8:	e7f4      	b.n	80084e4 <_dtoa_r+0x2f4>
 80084fa:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 80084fe:	464b      	mov	r3, r9
 8008500:	f8cd 9020 	str.w	r9, [sp, #32]
 8008504:	e7a7      	b.n	8008456 <_dtoa_r+0x266>
 8008506:	3101      	adds	r1, #1
 8008508:	6041      	str	r1, [r0, #4]
 800850a:	0052      	lsls	r2, r2, #1
 800850c:	e7a7      	b.n	800845e <_dtoa_r+0x26e>
 800850e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008510:	9a03      	ldr	r2, [sp, #12]
 8008512:	601a      	str	r2, [r3, #0]
 8008514:	9b08      	ldr	r3, [sp, #32]
 8008516:	2b0e      	cmp	r3, #14
 8008518:	f200 80a8 	bhi.w	800866c <_dtoa_r+0x47c>
 800851c:	2c00      	cmp	r4, #0
 800851e:	f000 80a5 	beq.w	800866c <_dtoa_r+0x47c>
 8008522:	f1ba 0f00 	cmp.w	sl, #0
 8008526:	dd34      	ble.n	8008592 <_dtoa_r+0x3a2>
 8008528:	4a9a      	ldr	r2, [pc, #616]	; (8008794 <_dtoa_r+0x5a4>)
 800852a:	f00a 030f 	and.w	r3, sl, #15
 800852e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008532:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008536:	e9d3 3400 	ldrd	r3, r4, [r3]
 800853a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800853e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8008542:	d016      	beq.n	8008572 <_dtoa_r+0x382>
 8008544:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008548:	4b93      	ldr	r3, [pc, #588]	; (8008798 <_dtoa_r+0x5a8>)
 800854a:	2703      	movs	r7, #3
 800854c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008550:	f7f8 f8f6 	bl	8000740 <__aeabi_ddiv>
 8008554:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008558:	f004 040f 	and.w	r4, r4, #15
 800855c:	4e8e      	ldr	r6, [pc, #568]	; (8008798 <_dtoa_r+0x5a8>)
 800855e:	b954      	cbnz	r4, 8008576 <_dtoa_r+0x386>
 8008560:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008564:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008568:	f7f8 f8ea 	bl	8000740 <__aeabi_ddiv>
 800856c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008570:	e029      	b.n	80085c6 <_dtoa_r+0x3d6>
 8008572:	2702      	movs	r7, #2
 8008574:	e7f2      	b.n	800855c <_dtoa_r+0x36c>
 8008576:	07e1      	lsls	r1, r4, #31
 8008578:	d508      	bpl.n	800858c <_dtoa_r+0x39c>
 800857a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800857e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008582:	f7f7 ffb3 	bl	80004ec <__aeabi_dmul>
 8008586:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800858a:	3701      	adds	r7, #1
 800858c:	1064      	asrs	r4, r4, #1
 800858e:	3608      	adds	r6, #8
 8008590:	e7e5      	b.n	800855e <_dtoa_r+0x36e>
 8008592:	f000 80a5 	beq.w	80086e0 <_dtoa_r+0x4f0>
 8008596:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800859a:	f1ca 0400 	rsb	r4, sl, #0
 800859e:	4b7d      	ldr	r3, [pc, #500]	; (8008794 <_dtoa_r+0x5a4>)
 80085a0:	f004 020f 	and.w	r2, r4, #15
 80085a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80085a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085ac:	f7f7 ff9e 	bl	80004ec <__aeabi_dmul>
 80085b0:	2702      	movs	r7, #2
 80085b2:	2300      	movs	r3, #0
 80085b4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80085b8:	4e77      	ldr	r6, [pc, #476]	; (8008798 <_dtoa_r+0x5a8>)
 80085ba:	1124      	asrs	r4, r4, #4
 80085bc:	2c00      	cmp	r4, #0
 80085be:	f040 8084 	bne.w	80086ca <_dtoa_r+0x4da>
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d1d2      	bne.n	800856c <_dtoa_r+0x37c>
 80085c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	f000 808b 	beq.w	80086e4 <_dtoa_r+0x4f4>
 80085ce:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80085d2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80085d6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80085da:	2200      	movs	r2, #0
 80085dc:	4b6f      	ldr	r3, [pc, #444]	; (800879c <_dtoa_r+0x5ac>)
 80085de:	f7f8 f9f7 	bl	80009d0 <__aeabi_dcmplt>
 80085e2:	2800      	cmp	r0, #0
 80085e4:	d07e      	beq.n	80086e4 <_dtoa_r+0x4f4>
 80085e6:	9b08      	ldr	r3, [sp, #32]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d07b      	beq.n	80086e4 <_dtoa_r+0x4f4>
 80085ec:	f1b9 0f00 	cmp.w	r9, #0
 80085f0:	dd38      	ble.n	8008664 <_dtoa_r+0x474>
 80085f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80085f6:	2200      	movs	r2, #0
 80085f8:	4b69      	ldr	r3, [pc, #420]	; (80087a0 <_dtoa_r+0x5b0>)
 80085fa:	f7f7 ff77 	bl	80004ec <__aeabi_dmul>
 80085fe:	464c      	mov	r4, r9
 8008600:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008604:	f10a 38ff 	add.w	r8, sl, #4294967295
 8008608:	3701      	adds	r7, #1
 800860a:	4638      	mov	r0, r7
 800860c:	f7f7 ff04 	bl	8000418 <__aeabi_i2d>
 8008610:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008614:	f7f7 ff6a 	bl	80004ec <__aeabi_dmul>
 8008618:	2200      	movs	r2, #0
 800861a:	4b62      	ldr	r3, [pc, #392]	; (80087a4 <_dtoa_r+0x5b4>)
 800861c:	f7f7 fdb0 	bl	8000180 <__adddf3>
 8008620:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8008624:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008628:	9611      	str	r6, [sp, #68]	; 0x44
 800862a:	2c00      	cmp	r4, #0
 800862c:	d15d      	bne.n	80086ea <_dtoa_r+0x4fa>
 800862e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008632:	2200      	movs	r2, #0
 8008634:	4b5c      	ldr	r3, [pc, #368]	; (80087a8 <_dtoa_r+0x5b8>)
 8008636:	f7f7 fda1 	bl	800017c <__aeabi_dsub>
 800863a:	4602      	mov	r2, r0
 800863c:	460b      	mov	r3, r1
 800863e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008642:	4633      	mov	r3, r6
 8008644:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008646:	f7f8 f9e1 	bl	8000a0c <__aeabi_dcmpgt>
 800864a:	2800      	cmp	r0, #0
 800864c:	f040 829c 	bne.w	8008b88 <_dtoa_r+0x998>
 8008650:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008654:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008656:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800865a:	f7f8 f9b9 	bl	80009d0 <__aeabi_dcmplt>
 800865e:	2800      	cmp	r0, #0
 8008660:	f040 8290 	bne.w	8008b84 <_dtoa_r+0x994>
 8008664:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8008668:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800866c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800866e:	2b00      	cmp	r3, #0
 8008670:	f2c0 8152 	blt.w	8008918 <_dtoa_r+0x728>
 8008674:	f1ba 0f0e 	cmp.w	sl, #14
 8008678:	f300 814e 	bgt.w	8008918 <_dtoa_r+0x728>
 800867c:	4b45      	ldr	r3, [pc, #276]	; (8008794 <_dtoa_r+0x5a4>)
 800867e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008682:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008686:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800868a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800868c:	2b00      	cmp	r3, #0
 800868e:	f280 80db 	bge.w	8008848 <_dtoa_r+0x658>
 8008692:	9b08      	ldr	r3, [sp, #32]
 8008694:	2b00      	cmp	r3, #0
 8008696:	f300 80d7 	bgt.w	8008848 <_dtoa_r+0x658>
 800869a:	f040 8272 	bne.w	8008b82 <_dtoa_r+0x992>
 800869e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80086a2:	2200      	movs	r2, #0
 80086a4:	4b40      	ldr	r3, [pc, #256]	; (80087a8 <_dtoa_r+0x5b8>)
 80086a6:	f7f7 ff21 	bl	80004ec <__aeabi_dmul>
 80086aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80086ae:	f7f8 f9a3 	bl	80009f8 <__aeabi_dcmpge>
 80086b2:	9c08      	ldr	r4, [sp, #32]
 80086b4:	4626      	mov	r6, r4
 80086b6:	2800      	cmp	r0, #0
 80086b8:	f040 8248 	bne.w	8008b4c <_dtoa_r+0x95c>
 80086bc:	2331      	movs	r3, #49	; 0x31
 80086be:	9f03      	ldr	r7, [sp, #12]
 80086c0:	f10a 0a01 	add.w	sl, sl, #1
 80086c4:	f807 3b01 	strb.w	r3, [r7], #1
 80086c8:	e244      	b.n	8008b54 <_dtoa_r+0x964>
 80086ca:	07e2      	lsls	r2, r4, #31
 80086cc:	d505      	bpl.n	80086da <_dtoa_r+0x4ea>
 80086ce:	e9d6 2300 	ldrd	r2, r3, [r6]
 80086d2:	f7f7 ff0b 	bl	80004ec <__aeabi_dmul>
 80086d6:	2301      	movs	r3, #1
 80086d8:	3701      	adds	r7, #1
 80086da:	1064      	asrs	r4, r4, #1
 80086dc:	3608      	adds	r6, #8
 80086de:	e76d      	b.n	80085bc <_dtoa_r+0x3cc>
 80086e0:	2702      	movs	r7, #2
 80086e2:	e770      	b.n	80085c6 <_dtoa_r+0x3d6>
 80086e4:	46d0      	mov	r8, sl
 80086e6:	9c08      	ldr	r4, [sp, #32]
 80086e8:	e78f      	b.n	800860a <_dtoa_r+0x41a>
 80086ea:	9903      	ldr	r1, [sp, #12]
 80086ec:	4b29      	ldr	r3, [pc, #164]	; (8008794 <_dtoa_r+0x5a4>)
 80086ee:	4421      	add	r1, r4
 80086f0:	9112      	str	r1, [sp, #72]	; 0x48
 80086f2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80086f4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80086f8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80086fc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008700:	2900      	cmp	r1, #0
 8008702:	d055      	beq.n	80087b0 <_dtoa_r+0x5c0>
 8008704:	2000      	movs	r0, #0
 8008706:	4929      	ldr	r1, [pc, #164]	; (80087ac <_dtoa_r+0x5bc>)
 8008708:	f7f8 f81a 	bl	8000740 <__aeabi_ddiv>
 800870c:	463b      	mov	r3, r7
 800870e:	4632      	mov	r2, r6
 8008710:	f7f7 fd34 	bl	800017c <__aeabi_dsub>
 8008714:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008718:	9f03      	ldr	r7, [sp, #12]
 800871a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800871e:	f7f8 f995 	bl	8000a4c <__aeabi_d2iz>
 8008722:	4604      	mov	r4, r0
 8008724:	f7f7 fe78 	bl	8000418 <__aeabi_i2d>
 8008728:	4602      	mov	r2, r0
 800872a:	460b      	mov	r3, r1
 800872c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008730:	f7f7 fd24 	bl	800017c <__aeabi_dsub>
 8008734:	4602      	mov	r2, r0
 8008736:	460b      	mov	r3, r1
 8008738:	3430      	adds	r4, #48	; 0x30
 800873a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800873e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008742:	f807 4b01 	strb.w	r4, [r7], #1
 8008746:	f7f8 f943 	bl	80009d0 <__aeabi_dcmplt>
 800874a:	2800      	cmp	r0, #0
 800874c:	d174      	bne.n	8008838 <_dtoa_r+0x648>
 800874e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008752:	2000      	movs	r0, #0
 8008754:	4911      	ldr	r1, [pc, #68]	; (800879c <_dtoa_r+0x5ac>)
 8008756:	f7f7 fd11 	bl	800017c <__aeabi_dsub>
 800875a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800875e:	f7f8 f937 	bl	80009d0 <__aeabi_dcmplt>
 8008762:	2800      	cmp	r0, #0
 8008764:	f040 80b7 	bne.w	80088d6 <_dtoa_r+0x6e6>
 8008768:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800876a:	429f      	cmp	r7, r3
 800876c:	f43f af7a 	beq.w	8008664 <_dtoa_r+0x474>
 8008770:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008774:	2200      	movs	r2, #0
 8008776:	4b0a      	ldr	r3, [pc, #40]	; (80087a0 <_dtoa_r+0x5b0>)
 8008778:	f7f7 feb8 	bl	80004ec <__aeabi_dmul>
 800877c:	2200      	movs	r2, #0
 800877e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008782:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008786:	4b06      	ldr	r3, [pc, #24]	; (80087a0 <_dtoa_r+0x5b0>)
 8008788:	f7f7 feb0 	bl	80004ec <__aeabi_dmul>
 800878c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008790:	e7c3      	b.n	800871a <_dtoa_r+0x52a>
 8008792:	bf00      	nop
 8008794:	0800b510 	.word	0x0800b510
 8008798:	0800b4e8 	.word	0x0800b4e8
 800879c:	3ff00000 	.word	0x3ff00000
 80087a0:	40240000 	.word	0x40240000
 80087a4:	401c0000 	.word	0x401c0000
 80087a8:	40140000 	.word	0x40140000
 80087ac:	3fe00000 	.word	0x3fe00000
 80087b0:	4630      	mov	r0, r6
 80087b2:	4639      	mov	r1, r7
 80087b4:	f7f7 fe9a 	bl	80004ec <__aeabi_dmul>
 80087b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80087ba:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80087be:	9c03      	ldr	r4, [sp, #12]
 80087c0:	9314      	str	r3, [sp, #80]	; 0x50
 80087c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80087c6:	f7f8 f941 	bl	8000a4c <__aeabi_d2iz>
 80087ca:	9015      	str	r0, [sp, #84]	; 0x54
 80087cc:	f7f7 fe24 	bl	8000418 <__aeabi_i2d>
 80087d0:	4602      	mov	r2, r0
 80087d2:	460b      	mov	r3, r1
 80087d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80087d8:	f7f7 fcd0 	bl	800017c <__aeabi_dsub>
 80087dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80087de:	4606      	mov	r6, r0
 80087e0:	3330      	adds	r3, #48	; 0x30
 80087e2:	f804 3b01 	strb.w	r3, [r4], #1
 80087e6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80087e8:	460f      	mov	r7, r1
 80087ea:	429c      	cmp	r4, r3
 80087ec:	f04f 0200 	mov.w	r2, #0
 80087f0:	d124      	bne.n	800883c <_dtoa_r+0x64c>
 80087f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80087f6:	4bb0      	ldr	r3, [pc, #704]	; (8008ab8 <_dtoa_r+0x8c8>)
 80087f8:	f7f7 fcc2 	bl	8000180 <__adddf3>
 80087fc:	4602      	mov	r2, r0
 80087fe:	460b      	mov	r3, r1
 8008800:	4630      	mov	r0, r6
 8008802:	4639      	mov	r1, r7
 8008804:	f7f8 f902 	bl	8000a0c <__aeabi_dcmpgt>
 8008808:	2800      	cmp	r0, #0
 800880a:	d163      	bne.n	80088d4 <_dtoa_r+0x6e4>
 800880c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008810:	2000      	movs	r0, #0
 8008812:	49a9      	ldr	r1, [pc, #676]	; (8008ab8 <_dtoa_r+0x8c8>)
 8008814:	f7f7 fcb2 	bl	800017c <__aeabi_dsub>
 8008818:	4602      	mov	r2, r0
 800881a:	460b      	mov	r3, r1
 800881c:	4630      	mov	r0, r6
 800881e:	4639      	mov	r1, r7
 8008820:	f7f8 f8d6 	bl	80009d0 <__aeabi_dcmplt>
 8008824:	2800      	cmp	r0, #0
 8008826:	f43f af1d 	beq.w	8008664 <_dtoa_r+0x474>
 800882a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800882c:	1e7b      	subs	r3, r7, #1
 800882e:	9314      	str	r3, [sp, #80]	; 0x50
 8008830:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8008834:	2b30      	cmp	r3, #48	; 0x30
 8008836:	d0f8      	beq.n	800882a <_dtoa_r+0x63a>
 8008838:	46c2      	mov	sl, r8
 800883a:	e03b      	b.n	80088b4 <_dtoa_r+0x6c4>
 800883c:	4b9f      	ldr	r3, [pc, #636]	; (8008abc <_dtoa_r+0x8cc>)
 800883e:	f7f7 fe55 	bl	80004ec <__aeabi_dmul>
 8008842:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008846:	e7bc      	b.n	80087c2 <_dtoa_r+0x5d2>
 8008848:	9f03      	ldr	r7, [sp, #12]
 800884a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800884e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008852:	4640      	mov	r0, r8
 8008854:	4649      	mov	r1, r9
 8008856:	f7f7 ff73 	bl	8000740 <__aeabi_ddiv>
 800885a:	f7f8 f8f7 	bl	8000a4c <__aeabi_d2iz>
 800885e:	4604      	mov	r4, r0
 8008860:	f7f7 fdda 	bl	8000418 <__aeabi_i2d>
 8008864:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008868:	f7f7 fe40 	bl	80004ec <__aeabi_dmul>
 800886c:	4602      	mov	r2, r0
 800886e:	460b      	mov	r3, r1
 8008870:	4640      	mov	r0, r8
 8008872:	4649      	mov	r1, r9
 8008874:	f7f7 fc82 	bl	800017c <__aeabi_dsub>
 8008878:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800887c:	f807 6b01 	strb.w	r6, [r7], #1
 8008880:	9e03      	ldr	r6, [sp, #12]
 8008882:	f8dd c020 	ldr.w	ip, [sp, #32]
 8008886:	1bbe      	subs	r6, r7, r6
 8008888:	45b4      	cmp	ip, r6
 800888a:	4602      	mov	r2, r0
 800888c:	460b      	mov	r3, r1
 800888e:	d136      	bne.n	80088fe <_dtoa_r+0x70e>
 8008890:	f7f7 fc76 	bl	8000180 <__adddf3>
 8008894:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008898:	4680      	mov	r8, r0
 800889a:	4689      	mov	r9, r1
 800889c:	f7f8 f8b6 	bl	8000a0c <__aeabi_dcmpgt>
 80088a0:	bb58      	cbnz	r0, 80088fa <_dtoa_r+0x70a>
 80088a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80088a6:	4640      	mov	r0, r8
 80088a8:	4649      	mov	r1, r9
 80088aa:	f7f8 f887 	bl	80009bc <__aeabi_dcmpeq>
 80088ae:	b108      	cbz	r0, 80088b4 <_dtoa_r+0x6c4>
 80088b0:	07e1      	lsls	r1, r4, #31
 80088b2:	d422      	bmi.n	80088fa <_dtoa_r+0x70a>
 80088b4:	4628      	mov	r0, r5
 80088b6:	4659      	mov	r1, fp
 80088b8:	f000 fe6c 	bl	8009594 <_Bfree>
 80088bc:	2300      	movs	r3, #0
 80088be:	703b      	strb	r3, [r7, #0]
 80088c0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80088c2:	f10a 0001 	add.w	r0, sl, #1
 80088c6:	6018      	str	r0, [r3, #0]
 80088c8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	f43f acde 	beq.w	800828c <_dtoa_r+0x9c>
 80088d0:	601f      	str	r7, [r3, #0]
 80088d2:	e4db      	b.n	800828c <_dtoa_r+0x9c>
 80088d4:	4627      	mov	r7, r4
 80088d6:	463b      	mov	r3, r7
 80088d8:	461f      	mov	r7, r3
 80088da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80088de:	2a39      	cmp	r2, #57	; 0x39
 80088e0:	d107      	bne.n	80088f2 <_dtoa_r+0x702>
 80088e2:	9a03      	ldr	r2, [sp, #12]
 80088e4:	429a      	cmp	r2, r3
 80088e6:	d1f7      	bne.n	80088d8 <_dtoa_r+0x6e8>
 80088e8:	2230      	movs	r2, #48	; 0x30
 80088ea:	9903      	ldr	r1, [sp, #12]
 80088ec:	f108 0801 	add.w	r8, r8, #1
 80088f0:	700a      	strb	r2, [r1, #0]
 80088f2:	781a      	ldrb	r2, [r3, #0]
 80088f4:	3201      	adds	r2, #1
 80088f6:	701a      	strb	r2, [r3, #0]
 80088f8:	e79e      	b.n	8008838 <_dtoa_r+0x648>
 80088fa:	46d0      	mov	r8, sl
 80088fc:	e7eb      	b.n	80088d6 <_dtoa_r+0x6e6>
 80088fe:	2200      	movs	r2, #0
 8008900:	4b6e      	ldr	r3, [pc, #440]	; (8008abc <_dtoa_r+0x8cc>)
 8008902:	f7f7 fdf3 	bl	80004ec <__aeabi_dmul>
 8008906:	2200      	movs	r2, #0
 8008908:	2300      	movs	r3, #0
 800890a:	4680      	mov	r8, r0
 800890c:	4689      	mov	r9, r1
 800890e:	f7f8 f855 	bl	80009bc <__aeabi_dcmpeq>
 8008912:	2800      	cmp	r0, #0
 8008914:	d09b      	beq.n	800884e <_dtoa_r+0x65e>
 8008916:	e7cd      	b.n	80088b4 <_dtoa_r+0x6c4>
 8008918:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800891a:	2a00      	cmp	r2, #0
 800891c:	f000 80d0 	beq.w	8008ac0 <_dtoa_r+0x8d0>
 8008920:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008922:	2a01      	cmp	r2, #1
 8008924:	f300 80ae 	bgt.w	8008a84 <_dtoa_r+0x894>
 8008928:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800892a:	2a00      	cmp	r2, #0
 800892c:	f000 80a6 	beq.w	8008a7c <_dtoa_r+0x88c>
 8008930:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008934:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008936:	9f06      	ldr	r7, [sp, #24]
 8008938:	9a06      	ldr	r2, [sp, #24]
 800893a:	2101      	movs	r1, #1
 800893c:	441a      	add	r2, r3
 800893e:	9206      	str	r2, [sp, #24]
 8008940:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008942:	4628      	mov	r0, r5
 8008944:	441a      	add	r2, r3
 8008946:	9209      	str	r2, [sp, #36]	; 0x24
 8008948:	f000 ff24 	bl	8009794 <__i2b>
 800894c:	4606      	mov	r6, r0
 800894e:	2f00      	cmp	r7, #0
 8008950:	dd0c      	ble.n	800896c <_dtoa_r+0x77c>
 8008952:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008954:	2b00      	cmp	r3, #0
 8008956:	dd09      	ble.n	800896c <_dtoa_r+0x77c>
 8008958:	42bb      	cmp	r3, r7
 800895a:	bfa8      	it	ge
 800895c:	463b      	movge	r3, r7
 800895e:	9a06      	ldr	r2, [sp, #24]
 8008960:	1aff      	subs	r7, r7, r3
 8008962:	1ad2      	subs	r2, r2, r3
 8008964:	9206      	str	r2, [sp, #24]
 8008966:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008968:	1ad3      	subs	r3, r2, r3
 800896a:	9309      	str	r3, [sp, #36]	; 0x24
 800896c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800896e:	b1f3      	cbz	r3, 80089ae <_dtoa_r+0x7be>
 8008970:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008972:	2b00      	cmp	r3, #0
 8008974:	f000 80a8 	beq.w	8008ac8 <_dtoa_r+0x8d8>
 8008978:	2c00      	cmp	r4, #0
 800897a:	dd10      	ble.n	800899e <_dtoa_r+0x7ae>
 800897c:	4631      	mov	r1, r6
 800897e:	4622      	mov	r2, r4
 8008980:	4628      	mov	r0, r5
 8008982:	f000 ffc5 	bl	8009910 <__pow5mult>
 8008986:	465a      	mov	r2, fp
 8008988:	4601      	mov	r1, r0
 800898a:	4606      	mov	r6, r0
 800898c:	4628      	mov	r0, r5
 800898e:	f000 ff17 	bl	80097c0 <__multiply>
 8008992:	4680      	mov	r8, r0
 8008994:	4659      	mov	r1, fp
 8008996:	4628      	mov	r0, r5
 8008998:	f000 fdfc 	bl	8009594 <_Bfree>
 800899c:	46c3      	mov	fp, r8
 800899e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089a0:	1b1a      	subs	r2, r3, r4
 80089a2:	d004      	beq.n	80089ae <_dtoa_r+0x7be>
 80089a4:	4659      	mov	r1, fp
 80089a6:	4628      	mov	r0, r5
 80089a8:	f000 ffb2 	bl	8009910 <__pow5mult>
 80089ac:	4683      	mov	fp, r0
 80089ae:	2101      	movs	r1, #1
 80089b0:	4628      	mov	r0, r5
 80089b2:	f000 feef 	bl	8009794 <__i2b>
 80089b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80089b8:	4604      	mov	r4, r0
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	f340 8086 	ble.w	8008acc <_dtoa_r+0x8dc>
 80089c0:	461a      	mov	r2, r3
 80089c2:	4601      	mov	r1, r0
 80089c4:	4628      	mov	r0, r5
 80089c6:	f000 ffa3 	bl	8009910 <__pow5mult>
 80089ca:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80089cc:	4604      	mov	r4, r0
 80089ce:	2b01      	cmp	r3, #1
 80089d0:	dd7f      	ble.n	8008ad2 <_dtoa_r+0x8e2>
 80089d2:	f04f 0800 	mov.w	r8, #0
 80089d6:	6923      	ldr	r3, [r4, #16]
 80089d8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80089dc:	6918      	ldr	r0, [r3, #16]
 80089de:	f000 fe8b 	bl	80096f8 <__hi0bits>
 80089e2:	f1c0 0020 	rsb	r0, r0, #32
 80089e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089e8:	4418      	add	r0, r3
 80089ea:	f010 001f 	ands.w	r0, r0, #31
 80089ee:	f000 8092 	beq.w	8008b16 <_dtoa_r+0x926>
 80089f2:	f1c0 0320 	rsb	r3, r0, #32
 80089f6:	2b04      	cmp	r3, #4
 80089f8:	f340 808a 	ble.w	8008b10 <_dtoa_r+0x920>
 80089fc:	f1c0 001c 	rsb	r0, r0, #28
 8008a00:	9b06      	ldr	r3, [sp, #24]
 8008a02:	4407      	add	r7, r0
 8008a04:	4403      	add	r3, r0
 8008a06:	9306      	str	r3, [sp, #24]
 8008a08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a0a:	4403      	add	r3, r0
 8008a0c:	9309      	str	r3, [sp, #36]	; 0x24
 8008a0e:	9b06      	ldr	r3, [sp, #24]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	dd05      	ble.n	8008a20 <_dtoa_r+0x830>
 8008a14:	4659      	mov	r1, fp
 8008a16:	461a      	mov	r2, r3
 8008a18:	4628      	mov	r0, r5
 8008a1a:	f000 ffd3 	bl	80099c4 <__lshift>
 8008a1e:	4683      	mov	fp, r0
 8008a20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	dd05      	ble.n	8008a32 <_dtoa_r+0x842>
 8008a26:	4621      	mov	r1, r4
 8008a28:	461a      	mov	r2, r3
 8008a2a:	4628      	mov	r0, r5
 8008a2c:	f000 ffca 	bl	80099c4 <__lshift>
 8008a30:	4604      	mov	r4, r0
 8008a32:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d070      	beq.n	8008b1a <_dtoa_r+0x92a>
 8008a38:	4621      	mov	r1, r4
 8008a3a:	4658      	mov	r0, fp
 8008a3c:	f001 f832 	bl	8009aa4 <__mcmp>
 8008a40:	2800      	cmp	r0, #0
 8008a42:	da6a      	bge.n	8008b1a <_dtoa_r+0x92a>
 8008a44:	2300      	movs	r3, #0
 8008a46:	4659      	mov	r1, fp
 8008a48:	220a      	movs	r2, #10
 8008a4a:	4628      	mov	r0, r5
 8008a4c:	f000 fdc4 	bl	80095d8 <__multadd>
 8008a50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a52:	4683      	mov	fp, r0
 8008a54:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	f000 8194 	beq.w	8008d86 <_dtoa_r+0xb96>
 8008a5e:	4631      	mov	r1, r6
 8008a60:	2300      	movs	r3, #0
 8008a62:	220a      	movs	r2, #10
 8008a64:	4628      	mov	r0, r5
 8008a66:	f000 fdb7 	bl	80095d8 <__multadd>
 8008a6a:	f1b9 0f00 	cmp.w	r9, #0
 8008a6e:	4606      	mov	r6, r0
 8008a70:	f300 8093 	bgt.w	8008b9a <_dtoa_r+0x9aa>
 8008a74:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008a76:	2b02      	cmp	r3, #2
 8008a78:	dc57      	bgt.n	8008b2a <_dtoa_r+0x93a>
 8008a7a:	e08e      	b.n	8008b9a <_dtoa_r+0x9aa>
 8008a7c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008a7e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008a82:	e757      	b.n	8008934 <_dtoa_r+0x744>
 8008a84:	9b08      	ldr	r3, [sp, #32]
 8008a86:	1e5c      	subs	r4, r3, #1
 8008a88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a8a:	42a3      	cmp	r3, r4
 8008a8c:	bfb7      	itett	lt
 8008a8e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008a90:	1b1c      	subge	r4, r3, r4
 8008a92:	1ae2      	sublt	r2, r4, r3
 8008a94:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8008a96:	bfbe      	ittt	lt
 8008a98:	940a      	strlt	r4, [sp, #40]	; 0x28
 8008a9a:	189b      	addlt	r3, r3, r2
 8008a9c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8008a9e:	9b08      	ldr	r3, [sp, #32]
 8008aa0:	bfb8      	it	lt
 8008aa2:	2400      	movlt	r4, #0
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	bfbb      	ittet	lt
 8008aa8:	9b06      	ldrlt	r3, [sp, #24]
 8008aaa:	9a08      	ldrlt	r2, [sp, #32]
 8008aac:	9f06      	ldrge	r7, [sp, #24]
 8008aae:	1a9f      	sublt	r7, r3, r2
 8008ab0:	bfac      	ite	ge
 8008ab2:	9b08      	ldrge	r3, [sp, #32]
 8008ab4:	2300      	movlt	r3, #0
 8008ab6:	e73f      	b.n	8008938 <_dtoa_r+0x748>
 8008ab8:	3fe00000 	.word	0x3fe00000
 8008abc:	40240000 	.word	0x40240000
 8008ac0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008ac2:	9f06      	ldr	r7, [sp, #24]
 8008ac4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8008ac6:	e742      	b.n	800894e <_dtoa_r+0x75e>
 8008ac8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008aca:	e76b      	b.n	80089a4 <_dtoa_r+0x7b4>
 8008acc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008ace:	2b01      	cmp	r3, #1
 8008ad0:	dc19      	bgt.n	8008b06 <_dtoa_r+0x916>
 8008ad2:	9b04      	ldr	r3, [sp, #16]
 8008ad4:	b9bb      	cbnz	r3, 8008b06 <_dtoa_r+0x916>
 8008ad6:	9b05      	ldr	r3, [sp, #20]
 8008ad8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008adc:	b99b      	cbnz	r3, 8008b06 <_dtoa_r+0x916>
 8008ade:	9b05      	ldr	r3, [sp, #20]
 8008ae0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008ae4:	0d1b      	lsrs	r3, r3, #20
 8008ae6:	051b      	lsls	r3, r3, #20
 8008ae8:	b183      	cbz	r3, 8008b0c <_dtoa_r+0x91c>
 8008aea:	f04f 0801 	mov.w	r8, #1
 8008aee:	9b06      	ldr	r3, [sp, #24]
 8008af0:	3301      	adds	r3, #1
 8008af2:	9306      	str	r3, [sp, #24]
 8008af4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008af6:	3301      	adds	r3, #1
 8008af8:	9309      	str	r3, [sp, #36]	; 0x24
 8008afa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	f47f af6a 	bne.w	80089d6 <_dtoa_r+0x7e6>
 8008b02:	2001      	movs	r0, #1
 8008b04:	e76f      	b.n	80089e6 <_dtoa_r+0x7f6>
 8008b06:	f04f 0800 	mov.w	r8, #0
 8008b0a:	e7f6      	b.n	8008afa <_dtoa_r+0x90a>
 8008b0c:	4698      	mov	r8, r3
 8008b0e:	e7f4      	b.n	8008afa <_dtoa_r+0x90a>
 8008b10:	f43f af7d 	beq.w	8008a0e <_dtoa_r+0x81e>
 8008b14:	4618      	mov	r0, r3
 8008b16:	301c      	adds	r0, #28
 8008b18:	e772      	b.n	8008a00 <_dtoa_r+0x810>
 8008b1a:	9b08      	ldr	r3, [sp, #32]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	dc36      	bgt.n	8008b8e <_dtoa_r+0x99e>
 8008b20:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008b22:	2b02      	cmp	r3, #2
 8008b24:	dd33      	ble.n	8008b8e <_dtoa_r+0x99e>
 8008b26:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008b2a:	f1b9 0f00 	cmp.w	r9, #0
 8008b2e:	d10d      	bne.n	8008b4c <_dtoa_r+0x95c>
 8008b30:	4621      	mov	r1, r4
 8008b32:	464b      	mov	r3, r9
 8008b34:	2205      	movs	r2, #5
 8008b36:	4628      	mov	r0, r5
 8008b38:	f000 fd4e 	bl	80095d8 <__multadd>
 8008b3c:	4601      	mov	r1, r0
 8008b3e:	4604      	mov	r4, r0
 8008b40:	4658      	mov	r0, fp
 8008b42:	f000 ffaf 	bl	8009aa4 <__mcmp>
 8008b46:	2800      	cmp	r0, #0
 8008b48:	f73f adb8 	bgt.w	80086bc <_dtoa_r+0x4cc>
 8008b4c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008b4e:	9f03      	ldr	r7, [sp, #12]
 8008b50:	ea6f 0a03 	mvn.w	sl, r3
 8008b54:	f04f 0800 	mov.w	r8, #0
 8008b58:	4621      	mov	r1, r4
 8008b5a:	4628      	mov	r0, r5
 8008b5c:	f000 fd1a 	bl	8009594 <_Bfree>
 8008b60:	2e00      	cmp	r6, #0
 8008b62:	f43f aea7 	beq.w	80088b4 <_dtoa_r+0x6c4>
 8008b66:	f1b8 0f00 	cmp.w	r8, #0
 8008b6a:	d005      	beq.n	8008b78 <_dtoa_r+0x988>
 8008b6c:	45b0      	cmp	r8, r6
 8008b6e:	d003      	beq.n	8008b78 <_dtoa_r+0x988>
 8008b70:	4641      	mov	r1, r8
 8008b72:	4628      	mov	r0, r5
 8008b74:	f000 fd0e 	bl	8009594 <_Bfree>
 8008b78:	4631      	mov	r1, r6
 8008b7a:	4628      	mov	r0, r5
 8008b7c:	f000 fd0a 	bl	8009594 <_Bfree>
 8008b80:	e698      	b.n	80088b4 <_dtoa_r+0x6c4>
 8008b82:	2400      	movs	r4, #0
 8008b84:	4626      	mov	r6, r4
 8008b86:	e7e1      	b.n	8008b4c <_dtoa_r+0x95c>
 8008b88:	46c2      	mov	sl, r8
 8008b8a:	4626      	mov	r6, r4
 8008b8c:	e596      	b.n	80086bc <_dtoa_r+0x4cc>
 8008b8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b90:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	f000 80fd 	beq.w	8008d94 <_dtoa_r+0xba4>
 8008b9a:	2f00      	cmp	r7, #0
 8008b9c:	dd05      	ble.n	8008baa <_dtoa_r+0x9ba>
 8008b9e:	4631      	mov	r1, r6
 8008ba0:	463a      	mov	r2, r7
 8008ba2:	4628      	mov	r0, r5
 8008ba4:	f000 ff0e 	bl	80099c4 <__lshift>
 8008ba8:	4606      	mov	r6, r0
 8008baa:	f1b8 0f00 	cmp.w	r8, #0
 8008bae:	d05c      	beq.n	8008c6a <_dtoa_r+0xa7a>
 8008bb0:	4628      	mov	r0, r5
 8008bb2:	6871      	ldr	r1, [r6, #4]
 8008bb4:	f000 fcae 	bl	8009514 <_Balloc>
 8008bb8:	4607      	mov	r7, r0
 8008bba:	b928      	cbnz	r0, 8008bc8 <_dtoa_r+0x9d8>
 8008bbc:	4602      	mov	r2, r0
 8008bbe:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008bc2:	4b7f      	ldr	r3, [pc, #508]	; (8008dc0 <_dtoa_r+0xbd0>)
 8008bc4:	f7ff bb28 	b.w	8008218 <_dtoa_r+0x28>
 8008bc8:	6932      	ldr	r2, [r6, #16]
 8008bca:	f106 010c 	add.w	r1, r6, #12
 8008bce:	3202      	adds	r2, #2
 8008bd0:	0092      	lsls	r2, r2, #2
 8008bd2:	300c      	adds	r0, #12
 8008bd4:	f7fd febc 	bl	8006950 <memcpy>
 8008bd8:	2201      	movs	r2, #1
 8008bda:	4639      	mov	r1, r7
 8008bdc:	4628      	mov	r0, r5
 8008bde:	f000 fef1 	bl	80099c4 <__lshift>
 8008be2:	46b0      	mov	r8, r6
 8008be4:	4606      	mov	r6, r0
 8008be6:	9b03      	ldr	r3, [sp, #12]
 8008be8:	3301      	adds	r3, #1
 8008bea:	9308      	str	r3, [sp, #32]
 8008bec:	9b03      	ldr	r3, [sp, #12]
 8008bee:	444b      	add	r3, r9
 8008bf0:	930a      	str	r3, [sp, #40]	; 0x28
 8008bf2:	9b04      	ldr	r3, [sp, #16]
 8008bf4:	f003 0301 	and.w	r3, r3, #1
 8008bf8:	9309      	str	r3, [sp, #36]	; 0x24
 8008bfa:	9b08      	ldr	r3, [sp, #32]
 8008bfc:	4621      	mov	r1, r4
 8008bfe:	3b01      	subs	r3, #1
 8008c00:	4658      	mov	r0, fp
 8008c02:	9304      	str	r3, [sp, #16]
 8008c04:	f7ff fa68 	bl	80080d8 <quorem>
 8008c08:	4603      	mov	r3, r0
 8008c0a:	4641      	mov	r1, r8
 8008c0c:	3330      	adds	r3, #48	; 0x30
 8008c0e:	9006      	str	r0, [sp, #24]
 8008c10:	4658      	mov	r0, fp
 8008c12:	930b      	str	r3, [sp, #44]	; 0x2c
 8008c14:	f000 ff46 	bl	8009aa4 <__mcmp>
 8008c18:	4632      	mov	r2, r6
 8008c1a:	4681      	mov	r9, r0
 8008c1c:	4621      	mov	r1, r4
 8008c1e:	4628      	mov	r0, r5
 8008c20:	f000 ff5c 	bl	8009adc <__mdiff>
 8008c24:	68c2      	ldr	r2, [r0, #12]
 8008c26:	4607      	mov	r7, r0
 8008c28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c2a:	bb02      	cbnz	r2, 8008c6e <_dtoa_r+0xa7e>
 8008c2c:	4601      	mov	r1, r0
 8008c2e:	4658      	mov	r0, fp
 8008c30:	f000 ff38 	bl	8009aa4 <__mcmp>
 8008c34:	4602      	mov	r2, r0
 8008c36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c38:	4639      	mov	r1, r7
 8008c3a:	4628      	mov	r0, r5
 8008c3c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8008c40:	f000 fca8 	bl	8009594 <_Bfree>
 8008c44:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008c46:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008c48:	9f08      	ldr	r7, [sp, #32]
 8008c4a:	ea43 0102 	orr.w	r1, r3, r2
 8008c4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c50:	430b      	orrs	r3, r1
 8008c52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c54:	d10d      	bne.n	8008c72 <_dtoa_r+0xa82>
 8008c56:	2b39      	cmp	r3, #57	; 0x39
 8008c58:	d029      	beq.n	8008cae <_dtoa_r+0xabe>
 8008c5a:	f1b9 0f00 	cmp.w	r9, #0
 8008c5e:	dd01      	ble.n	8008c64 <_dtoa_r+0xa74>
 8008c60:	9b06      	ldr	r3, [sp, #24]
 8008c62:	3331      	adds	r3, #49	; 0x31
 8008c64:	9a04      	ldr	r2, [sp, #16]
 8008c66:	7013      	strb	r3, [r2, #0]
 8008c68:	e776      	b.n	8008b58 <_dtoa_r+0x968>
 8008c6a:	4630      	mov	r0, r6
 8008c6c:	e7b9      	b.n	8008be2 <_dtoa_r+0x9f2>
 8008c6e:	2201      	movs	r2, #1
 8008c70:	e7e2      	b.n	8008c38 <_dtoa_r+0xa48>
 8008c72:	f1b9 0f00 	cmp.w	r9, #0
 8008c76:	db06      	blt.n	8008c86 <_dtoa_r+0xa96>
 8008c78:	9922      	ldr	r1, [sp, #136]	; 0x88
 8008c7a:	ea41 0909 	orr.w	r9, r1, r9
 8008c7e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008c80:	ea59 0101 	orrs.w	r1, r9, r1
 8008c84:	d120      	bne.n	8008cc8 <_dtoa_r+0xad8>
 8008c86:	2a00      	cmp	r2, #0
 8008c88:	ddec      	ble.n	8008c64 <_dtoa_r+0xa74>
 8008c8a:	4659      	mov	r1, fp
 8008c8c:	2201      	movs	r2, #1
 8008c8e:	4628      	mov	r0, r5
 8008c90:	9308      	str	r3, [sp, #32]
 8008c92:	f000 fe97 	bl	80099c4 <__lshift>
 8008c96:	4621      	mov	r1, r4
 8008c98:	4683      	mov	fp, r0
 8008c9a:	f000 ff03 	bl	8009aa4 <__mcmp>
 8008c9e:	2800      	cmp	r0, #0
 8008ca0:	9b08      	ldr	r3, [sp, #32]
 8008ca2:	dc02      	bgt.n	8008caa <_dtoa_r+0xaba>
 8008ca4:	d1de      	bne.n	8008c64 <_dtoa_r+0xa74>
 8008ca6:	07da      	lsls	r2, r3, #31
 8008ca8:	d5dc      	bpl.n	8008c64 <_dtoa_r+0xa74>
 8008caa:	2b39      	cmp	r3, #57	; 0x39
 8008cac:	d1d8      	bne.n	8008c60 <_dtoa_r+0xa70>
 8008cae:	2339      	movs	r3, #57	; 0x39
 8008cb0:	9a04      	ldr	r2, [sp, #16]
 8008cb2:	7013      	strb	r3, [r2, #0]
 8008cb4:	463b      	mov	r3, r7
 8008cb6:	461f      	mov	r7, r3
 8008cb8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8008cbc:	3b01      	subs	r3, #1
 8008cbe:	2a39      	cmp	r2, #57	; 0x39
 8008cc0:	d050      	beq.n	8008d64 <_dtoa_r+0xb74>
 8008cc2:	3201      	adds	r2, #1
 8008cc4:	701a      	strb	r2, [r3, #0]
 8008cc6:	e747      	b.n	8008b58 <_dtoa_r+0x968>
 8008cc8:	2a00      	cmp	r2, #0
 8008cca:	dd03      	ble.n	8008cd4 <_dtoa_r+0xae4>
 8008ccc:	2b39      	cmp	r3, #57	; 0x39
 8008cce:	d0ee      	beq.n	8008cae <_dtoa_r+0xabe>
 8008cd0:	3301      	adds	r3, #1
 8008cd2:	e7c7      	b.n	8008c64 <_dtoa_r+0xa74>
 8008cd4:	9a08      	ldr	r2, [sp, #32]
 8008cd6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008cd8:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008cdc:	428a      	cmp	r2, r1
 8008cde:	d02a      	beq.n	8008d36 <_dtoa_r+0xb46>
 8008ce0:	4659      	mov	r1, fp
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	220a      	movs	r2, #10
 8008ce6:	4628      	mov	r0, r5
 8008ce8:	f000 fc76 	bl	80095d8 <__multadd>
 8008cec:	45b0      	cmp	r8, r6
 8008cee:	4683      	mov	fp, r0
 8008cf0:	f04f 0300 	mov.w	r3, #0
 8008cf4:	f04f 020a 	mov.w	r2, #10
 8008cf8:	4641      	mov	r1, r8
 8008cfa:	4628      	mov	r0, r5
 8008cfc:	d107      	bne.n	8008d0e <_dtoa_r+0xb1e>
 8008cfe:	f000 fc6b 	bl	80095d8 <__multadd>
 8008d02:	4680      	mov	r8, r0
 8008d04:	4606      	mov	r6, r0
 8008d06:	9b08      	ldr	r3, [sp, #32]
 8008d08:	3301      	adds	r3, #1
 8008d0a:	9308      	str	r3, [sp, #32]
 8008d0c:	e775      	b.n	8008bfa <_dtoa_r+0xa0a>
 8008d0e:	f000 fc63 	bl	80095d8 <__multadd>
 8008d12:	4631      	mov	r1, r6
 8008d14:	4680      	mov	r8, r0
 8008d16:	2300      	movs	r3, #0
 8008d18:	220a      	movs	r2, #10
 8008d1a:	4628      	mov	r0, r5
 8008d1c:	f000 fc5c 	bl	80095d8 <__multadd>
 8008d20:	4606      	mov	r6, r0
 8008d22:	e7f0      	b.n	8008d06 <_dtoa_r+0xb16>
 8008d24:	f1b9 0f00 	cmp.w	r9, #0
 8008d28:	bfcc      	ite	gt
 8008d2a:	464f      	movgt	r7, r9
 8008d2c:	2701      	movle	r7, #1
 8008d2e:	f04f 0800 	mov.w	r8, #0
 8008d32:	9a03      	ldr	r2, [sp, #12]
 8008d34:	4417      	add	r7, r2
 8008d36:	4659      	mov	r1, fp
 8008d38:	2201      	movs	r2, #1
 8008d3a:	4628      	mov	r0, r5
 8008d3c:	9308      	str	r3, [sp, #32]
 8008d3e:	f000 fe41 	bl	80099c4 <__lshift>
 8008d42:	4621      	mov	r1, r4
 8008d44:	4683      	mov	fp, r0
 8008d46:	f000 fead 	bl	8009aa4 <__mcmp>
 8008d4a:	2800      	cmp	r0, #0
 8008d4c:	dcb2      	bgt.n	8008cb4 <_dtoa_r+0xac4>
 8008d4e:	d102      	bne.n	8008d56 <_dtoa_r+0xb66>
 8008d50:	9b08      	ldr	r3, [sp, #32]
 8008d52:	07db      	lsls	r3, r3, #31
 8008d54:	d4ae      	bmi.n	8008cb4 <_dtoa_r+0xac4>
 8008d56:	463b      	mov	r3, r7
 8008d58:	461f      	mov	r7, r3
 8008d5a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008d5e:	2a30      	cmp	r2, #48	; 0x30
 8008d60:	d0fa      	beq.n	8008d58 <_dtoa_r+0xb68>
 8008d62:	e6f9      	b.n	8008b58 <_dtoa_r+0x968>
 8008d64:	9a03      	ldr	r2, [sp, #12]
 8008d66:	429a      	cmp	r2, r3
 8008d68:	d1a5      	bne.n	8008cb6 <_dtoa_r+0xac6>
 8008d6a:	2331      	movs	r3, #49	; 0x31
 8008d6c:	f10a 0a01 	add.w	sl, sl, #1
 8008d70:	e779      	b.n	8008c66 <_dtoa_r+0xa76>
 8008d72:	4b14      	ldr	r3, [pc, #80]	; (8008dc4 <_dtoa_r+0xbd4>)
 8008d74:	f7ff baa8 	b.w	80082c8 <_dtoa_r+0xd8>
 8008d78:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	f47f aa81 	bne.w	8008282 <_dtoa_r+0x92>
 8008d80:	4b11      	ldr	r3, [pc, #68]	; (8008dc8 <_dtoa_r+0xbd8>)
 8008d82:	f7ff baa1 	b.w	80082c8 <_dtoa_r+0xd8>
 8008d86:	f1b9 0f00 	cmp.w	r9, #0
 8008d8a:	dc03      	bgt.n	8008d94 <_dtoa_r+0xba4>
 8008d8c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008d8e:	2b02      	cmp	r3, #2
 8008d90:	f73f aecb 	bgt.w	8008b2a <_dtoa_r+0x93a>
 8008d94:	9f03      	ldr	r7, [sp, #12]
 8008d96:	4621      	mov	r1, r4
 8008d98:	4658      	mov	r0, fp
 8008d9a:	f7ff f99d 	bl	80080d8 <quorem>
 8008d9e:	9a03      	ldr	r2, [sp, #12]
 8008da0:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008da4:	f807 3b01 	strb.w	r3, [r7], #1
 8008da8:	1aba      	subs	r2, r7, r2
 8008daa:	4591      	cmp	r9, r2
 8008dac:	ddba      	ble.n	8008d24 <_dtoa_r+0xb34>
 8008dae:	4659      	mov	r1, fp
 8008db0:	2300      	movs	r3, #0
 8008db2:	220a      	movs	r2, #10
 8008db4:	4628      	mov	r0, r5
 8008db6:	f000 fc0f 	bl	80095d8 <__multadd>
 8008dba:	4683      	mov	fp, r0
 8008dbc:	e7eb      	b.n	8008d96 <_dtoa_r+0xba6>
 8008dbe:	bf00      	nop
 8008dc0:	0800b401 	.word	0x0800b401
 8008dc4:	0800b174 	.word	0x0800b174
 8008dc8:	0800b399 	.word	0x0800b399

08008dcc <fiprintf>:
 8008dcc:	b40e      	push	{r1, r2, r3}
 8008dce:	b503      	push	{r0, r1, lr}
 8008dd0:	4601      	mov	r1, r0
 8008dd2:	ab03      	add	r3, sp, #12
 8008dd4:	4805      	ldr	r0, [pc, #20]	; (8008dec <fiprintf+0x20>)
 8008dd6:	f853 2b04 	ldr.w	r2, [r3], #4
 8008dda:	6800      	ldr	r0, [r0, #0]
 8008ddc:	9301      	str	r3, [sp, #4]
 8008dde:	f001 fac5 	bl	800a36c <_vfiprintf_r>
 8008de2:	b002      	add	sp, #8
 8008de4:	f85d eb04 	ldr.w	lr, [sp], #4
 8008de8:	b003      	add	sp, #12
 8008dea:	4770      	bx	lr
 8008dec:	2000021c 	.word	0x2000021c

08008df0 <rshift>:
 8008df0:	6903      	ldr	r3, [r0, #16]
 8008df2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008df6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008dfa:	f100 0414 	add.w	r4, r0, #20
 8008dfe:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008e02:	dd46      	ble.n	8008e92 <rshift+0xa2>
 8008e04:	f011 011f 	ands.w	r1, r1, #31
 8008e08:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008e0c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008e10:	d10c      	bne.n	8008e2c <rshift+0x3c>
 8008e12:	4629      	mov	r1, r5
 8008e14:	f100 0710 	add.w	r7, r0, #16
 8008e18:	42b1      	cmp	r1, r6
 8008e1a:	d335      	bcc.n	8008e88 <rshift+0x98>
 8008e1c:	1a9b      	subs	r3, r3, r2
 8008e1e:	009b      	lsls	r3, r3, #2
 8008e20:	1eea      	subs	r2, r5, #3
 8008e22:	4296      	cmp	r6, r2
 8008e24:	bf38      	it	cc
 8008e26:	2300      	movcc	r3, #0
 8008e28:	4423      	add	r3, r4
 8008e2a:	e015      	b.n	8008e58 <rshift+0x68>
 8008e2c:	46a1      	mov	r9, r4
 8008e2e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008e32:	f1c1 0820 	rsb	r8, r1, #32
 8008e36:	40cf      	lsrs	r7, r1
 8008e38:	f105 0e04 	add.w	lr, r5, #4
 8008e3c:	4576      	cmp	r6, lr
 8008e3e:	46f4      	mov	ip, lr
 8008e40:	d816      	bhi.n	8008e70 <rshift+0x80>
 8008e42:	1a9a      	subs	r2, r3, r2
 8008e44:	0092      	lsls	r2, r2, #2
 8008e46:	3a04      	subs	r2, #4
 8008e48:	3501      	adds	r5, #1
 8008e4a:	42ae      	cmp	r6, r5
 8008e4c:	bf38      	it	cc
 8008e4e:	2200      	movcc	r2, #0
 8008e50:	18a3      	adds	r3, r4, r2
 8008e52:	50a7      	str	r7, [r4, r2]
 8008e54:	b107      	cbz	r7, 8008e58 <rshift+0x68>
 8008e56:	3304      	adds	r3, #4
 8008e58:	42a3      	cmp	r3, r4
 8008e5a:	eba3 0204 	sub.w	r2, r3, r4
 8008e5e:	bf08      	it	eq
 8008e60:	2300      	moveq	r3, #0
 8008e62:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008e66:	6102      	str	r2, [r0, #16]
 8008e68:	bf08      	it	eq
 8008e6a:	6143      	streq	r3, [r0, #20]
 8008e6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008e70:	f8dc c000 	ldr.w	ip, [ip]
 8008e74:	fa0c fc08 	lsl.w	ip, ip, r8
 8008e78:	ea4c 0707 	orr.w	r7, ip, r7
 8008e7c:	f849 7b04 	str.w	r7, [r9], #4
 8008e80:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008e84:	40cf      	lsrs	r7, r1
 8008e86:	e7d9      	b.n	8008e3c <rshift+0x4c>
 8008e88:	f851 cb04 	ldr.w	ip, [r1], #4
 8008e8c:	f847 cf04 	str.w	ip, [r7, #4]!
 8008e90:	e7c2      	b.n	8008e18 <rshift+0x28>
 8008e92:	4623      	mov	r3, r4
 8008e94:	e7e0      	b.n	8008e58 <rshift+0x68>

08008e96 <__hexdig_fun>:
 8008e96:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008e9a:	2b09      	cmp	r3, #9
 8008e9c:	d802      	bhi.n	8008ea4 <__hexdig_fun+0xe>
 8008e9e:	3820      	subs	r0, #32
 8008ea0:	b2c0      	uxtb	r0, r0
 8008ea2:	4770      	bx	lr
 8008ea4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008ea8:	2b05      	cmp	r3, #5
 8008eaa:	d801      	bhi.n	8008eb0 <__hexdig_fun+0x1a>
 8008eac:	3847      	subs	r0, #71	; 0x47
 8008eae:	e7f7      	b.n	8008ea0 <__hexdig_fun+0xa>
 8008eb0:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008eb4:	2b05      	cmp	r3, #5
 8008eb6:	d801      	bhi.n	8008ebc <__hexdig_fun+0x26>
 8008eb8:	3827      	subs	r0, #39	; 0x27
 8008eba:	e7f1      	b.n	8008ea0 <__hexdig_fun+0xa>
 8008ebc:	2000      	movs	r0, #0
 8008ebe:	4770      	bx	lr

08008ec0 <__gethex>:
 8008ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ec4:	b08b      	sub	sp, #44	; 0x2c
 8008ec6:	9305      	str	r3, [sp, #20]
 8008ec8:	4bb2      	ldr	r3, [pc, #712]	; (8009194 <__gethex+0x2d4>)
 8008eca:	9002      	str	r0, [sp, #8]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	468b      	mov	fp, r1
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	4690      	mov	r8, r2
 8008ed4:	9303      	str	r3, [sp, #12]
 8008ed6:	f7f7 f945 	bl	8000164 <strlen>
 8008eda:	4682      	mov	sl, r0
 8008edc:	9b03      	ldr	r3, [sp, #12]
 8008ede:	f8db 2000 	ldr.w	r2, [fp]
 8008ee2:	4403      	add	r3, r0
 8008ee4:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008ee8:	9306      	str	r3, [sp, #24]
 8008eea:	1c93      	adds	r3, r2, #2
 8008eec:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008ef0:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008ef4:	32fe      	adds	r2, #254	; 0xfe
 8008ef6:	18d1      	adds	r1, r2, r3
 8008ef8:	461f      	mov	r7, r3
 8008efa:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008efe:	9101      	str	r1, [sp, #4]
 8008f00:	2830      	cmp	r0, #48	; 0x30
 8008f02:	d0f8      	beq.n	8008ef6 <__gethex+0x36>
 8008f04:	f7ff ffc7 	bl	8008e96 <__hexdig_fun>
 8008f08:	4604      	mov	r4, r0
 8008f0a:	2800      	cmp	r0, #0
 8008f0c:	d13a      	bne.n	8008f84 <__gethex+0xc4>
 8008f0e:	4652      	mov	r2, sl
 8008f10:	4638      	mov	r0, r7
 8008f12:	9903      	ldr	r1, [sp, #12]
 8008f14:	f001 fb70 	bl	800a5f8 <strncmp>
 8008f18:	4605      	mov	r5, r0
 8008f1a:	2800      	cmp	r0, #0
 8008f1c:	d166      	bne.n	8008fec <__gethex+0x12c>
 8008f1e:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008f22:	eb07 060a 	add.w	r6, r7, sl
 8008f26:	f7ff ffb6 	bl	8008e96 <__hexdig_fun>
 8008f2a:	2800      	cmp	r0, #0
 8008f2c:	d060      	beq.n	8008ff0 <__gethex+0x130>
 8008f2e:	4633      	mov	r3, r6
 8008f30:	7818      	ldrb	r0, [r3, #0]
 8008f32:	461f      	mov	r7, r3
 8008f34:	2830      	cmp	r0, #48	; 0x30
 8008f36:	f103 0301 	add.w	r3, r3, #1
 8008f3a:	d0f9      	beq.n	8008f30 <__gethex+0x70>
 8008f3c:	f7ff ffab 	bl	8008e96 <__hexdig_fun>
 8008f40:	2301      	movs	r3, #1
 8008f42:	fab0 f480 	clz	r4, r0
 8008f46:	4635      	mov	r5, r6
 8008f48:	0964      	lsrs	r4, r4, #5
 8008f4a:	9301      	str	r3, [sp, #4]
 8008f4c:	463a      	mov	r2, r7
 8008f4e:	4616      	mov	r6, r2
 8008f50:	7830      	ldrb	r0, [r6, #0]
 8008f52:	3201      	adds	r2, #1
 8008f54:	f7ff ff9f 	bl	8008e96 <__hexdig_fun>
 8008f58:	2800      	cmp	r0, #0
 8008f5a:	d1f8      	bne.n	8008f4e <__gethex+0x8e>
 8008f5c:	4652      	mov	r2, sl
 8008f5e:	4630      	mov	r0, r6
 8008f60:	9903      	ldr	r1, [sp, #12]
 8008f62:	f001 fb49 	bl	800a5f8 <strncmp>
 8008f66:	b980      	cbnz	r0, 8008f8a <__gethex+0xca>
 8008f68:	b94d      	cbnz	r5, 8008f7e <__gethex+0xbe>
 8008f6a:	eb06 050a 	add.w	r5, r6, sl
 8008f6e:	462a      	mov	r2, r5
 8008f70:	4616      	mov	r6, r2
 8008f72:	7830      	ldrb	r0, [r6, #0]
 8008f74:	3201      	adds	r2, #1
 8008f76:	f7ff ff8e 	bl	8008e96 <__hexdig_fun>
 8008f7a:	2800      	cmp	r0, #0
 8008f7c:	d1f8      	bne.n	8008f70 <__gethex+0xb0>
 8008f7e:	1bad      	subs	r5, r5, r6
 8008f80:	00ad      	lsls	r5, r5, #2
 8008f82:	e004      	b.n	8008f8e <__gethex+0xce>
 8008f84:	2400      	movs	r4, #0
 8008f86:	4625      	mov	r5, r4
 8008f88:	e7e0      	b.n	8008f4c <__gethex+0x8c>
 8008f8a:	2d00      	cmp	r5, #0
 8008f8c:	d1f7      	bne.n	8008f7e <__gethex+0xbe>
 8008f8e:	7833      	ldrb	r3, [r6, #0]
 8008f90:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008f94:	2b50      	cmp	r3, #80	; 0x50
 8008f96:	d139      	bne.n	800900c <__gethex+0x14c>
 8008f98:	7873      	ldrb	r3, [r6, #1]
 8008f9a:	2b2b      	cmp	r3, #43	; 0x2b
 8008f9c:	d02a      	beq.n	8008ff4 <__gethex+0x134>
 8008f9e:	2b2d      	cmp	r3, #45	; 0x2d
 8008fa0:	d02c      	beq.n	8008ffc <__gethex+0x13c>
 8008fa2:	f04f 0900 	mov.w	r9, #0
 8008fa6:	1c71      	adds	r1, r6, #1
 8008fa8:	7808      	ldrb	r0, [r1, #0]
 8008faa:	f7ff ff74 	bl	8008e96 <__hexdig_fun>
 8008fae:	1e43      	subs	r3, r0, #1
 8008fb0:	b2db      	uxtb	r3, r3
 8008fb2:	2b18      	cmp	r3, #24
 8008fb4:	d82a      	bhi.n	800900c <__gethex+0x14c>
 8008fb6:	f1a0 0210 	sub.w	r2, r0, #16
 8008fba:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008fbe:	f7ff ff6a 	bl	8008e96 <__hexdig_fun>
 8008fc2:	1e43      	subs	r3, r0, #1
 8008fc4:	b2db      	uxtb	r3, r3
 8008fc6:	2b18      	cmp	r3, #24
 8008fc8:	d91b      	bls.n	8009002 <__gethex+0x142>
 8008fca:	f1b9 0f00 	cmp.w	r9, #0
 8008fce:	d000      	beq.n	8008fd2 <__gethex+0x112>
 8008fd0:	4252      	negs	r2, r2
 8008fd2:	4415      	add	r5, r2
 8008fd4:	f8cb 1000 	str.w	r1, [fp]
 8008fd8:	b1d4      	cbz	r4, 8009010 <__gethex+0x150>
 8008fda:	9b01      	ldr	r3, [sp, #4]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	bf14      	ite	ne
 8008fe0:	2700      	movne	r7, #0
 8008fe2:	2706      	moveq	r7, #6
 8008fe4:	4638      	mov	r0, r7
 8008fe6:	b00b      	add	sp, #44	; 0x2c
 8008fe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fec:	463e      	mov	r6, r7
 8008fee:	4625      	mov	r5, r4
 8008ff0:	2401      	movs	r4, #1
 8008ff2:	e7cc      	b.n	8008f8e <__gethex+0xce>
 8008ff4:	f04f 0900 	mov.w	r9, #0
 8008ff8:	1cb1      	adds	r1, r6, #2
 8008ffa:	e7d5      	b.n	8008fa8 <__gethex+0xe8>
 8008ffc:	f04f 0901 	mov.w	r9, #1
 8009000:	e7fa      	b.n	8008ff8 <__gethex+0x138>
 8009002:	230a      	movs	r3, #10
 8009004:	fb03 0202 	mla	r2, r3, r2, r0
 8009008:	3a10      	subs	r2, #16
 800900a:	e7d6      	b.n	8008fba <__gethex+0xfa>
 800900c:	4631      	mov	r1, r6
 800900e:	e7e1      	b.n	8008fd4 <__gethex+0x114>
 8009010:	4621      	mov	r1, r4
 8009012:	1bf3      	subs	r3, r6, r7
 8009014:	3b01      	subs	r3, #1
 8009016:	2b07      	cmp	r3, #7
 8009018:	dc0a      	bgt.n	8009030 <__gethex+0x170>
 800901a:	9802      	ldr	r0, [sp, #8]
 800901c:	f000 fa7a 	bl	8009514 <_Balloc>
 8009020:	4604      	mov	r4, r0
 8009022:	b940      	cbnz	r0, 8009036 <__gethex+0x176>
 8009024:	4602      	mov	r2, r0
 8009026:	21de      	movs	r1, #222	; 0xde
 8009028:	4b5b      	ldr	r3, [pc, #364]	; (8009198 <__gethex+0x2d8>)
 800902a:	485c      	ldr	r0, [pc, #368]	; (800919c <__gethex+0x2dc>)
 800902c:	f7ff f836 	bl	800809c <__assert_func>
 8009030:	3101      	adds	r1, #1
 8009032:	105b      	asrs	r3, r3, #1
 8009034:	e7ef      	b.n	8009016 <__gethex+0x156>
 8009036:	f04f 0b00 	mov.w	fp, #0
 800903a:	f100 0914 	add.w	r9, r0, #20
 800903e:	f1ca 0301 	rsb	r3, sl, #1
 8009042:	f8cd 9010 	str.w	r9, [sp, #16]
 8009046:	f8cd b004 	str.w	fp, [sp, #4]
 800904a:	9308      	str	r3, [sp, #32]
 800904c:	42b7      	cmp	r7, r6
 800904e:	d33f      	bcc.n	80090d0 <__gethex+0x210>
 8009050:	9f04      	ldr	r7, [sp, #16]
 8009052:	9b01      	ldr	r3, [sp, #4]
 8009054:	f847 3b04 	str.w	r3, [r7], #4
 8009058:	eba7 0709 	sub.w	r7, r7, r9
 800905c:	10bf      	asrs	r7, r7, #2
 800905e:	6127      	str	r7, [r4, #16]
 8009060:	4618      	mov	r0, r3
 8009062:	f000 fb49 	bl	80096f8 <__hi0bits>
 8009066:	017f      	lsls	r7, r7, #5
 8009068:	f8d8 6000 	ldr.w	r6, [r8]
 800906c:	1a3f      	subs	r7, r7, r0
 800906e:	42b7      	cmp	r7, r6
 8009070:	dd62      	ble.n	8009138 <__gethex+0x278>
 8009072:	1bbf      	subs	r7, r7, r6
 8009074:	4639      	mov	r1, r7
 8009076:	4620      	mov	r0, r4
 8009078:	f000 fee3 	bl	8009e42 <__any_on>
 800907c:	4682      	mov	sl, r0
 800907e:	b1a8      	cbz	r0, 80090ac <__gethex+0x1ec>
 8009080:	f04f 0a01 	mov.w	sl, #1
 8009084:	1e7b      	subs	r3, r7, #1
 8009086:	1159      	asrs	r1, r3, #5
 8009088:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800908c:	f003 021f 	and.w	r2, r3, #31
 8009090:	fa0a f202 	lsl.w	r2, sl, r2
 8009094:	420a      	tst	r2, r1
 8009096:	d009      	beq.n	80090ac <__gethex+0x1ec>
 8009098:	4553      	cmp	r3, sl
 800909a:	dd05      	ble.n	80090a8 <__gethex+0x1e8>
 800909c:	4620      	mov	r0, r4
 800909e:	1eb9      	subs	r1, r7, #2
 80090a0:	f000 fecf 	bl	8009e42 <__any_on>
 80090a4:	2800      	cmp	r0, #0
 80090a6:	d144      	bne.n	8009132 <__gethex+0x272>
 80090a8:	f04f 0a02 	mov.w	sl, #2
 80090ac:	4639      	mov	r1, r7
 80090ae:	4620      	mov	r0, r4
 80090b0:	f7ff fe9e 	bl	8008df0 <rshift>
 80090b4:	443d      	add	r5, r7
 80090b6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80090ba:	42ab      	cmp	r3, r5
 80090bc:	da4a      	bge.n	8009154 <__gethex+0x294>
 80090be:	4621      	mov	r1, r4
 80090c0:	9802      	ldr	r0, [sp, #8]
 80090c2:	f000 fa67 	bl	8009594 <_Bfree>
 80090c6:	2300      	movs	r3, #0
 80090c8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80090ca:	27a3      	movs	r7, #163	; 0xa3
 80090cc:	6013      	str	r3, [r2, #0]
 80090ce:	e789      	b.n	8008fe4 <__gethex+0x124>
 80090d0:	1e73      	subs	r3, r6, #1
 80090d2:	9a06      	ldr	r2, [sp, #24]
 80090d4:	9307      	str	r3, [sp, #28]
 80090d6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80090da:	4293      	cmp	r3, r2
 80090dc:	d019      	beq.n	8009112 <__gethex+0x252>
 80090de:	f1bb 0f20 	cmp.w	fp, #32
 80090e2:	d107      	bne.n	80090f4 <__gethex+0x234>
 80090e4:	9b04      	ldr	r3, [sp, #16]
 80090e6:	9a01      	ldr	r2, [sp, #4]
 80090e8:	f843 2b04 	str.w	r2, [r3], #4
 80090ec:	9304      	str	r3, [sp, #16]
 80090ee:	2300      	movs	r3, #0
 80090f0:	469b      	mov	fp, r3
 80090f2:	9301      	str	r3, [sp, #4]
 80090f4:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80090f8:	f7ff fecd 	bl	8008e96 <__hexdig_fun>
 80090fc:	9b01      	ldr	r3, [sp, #4]
 80090fe:	f000 000f 	and.w	r0, r0, #15
 8009102:	fa00 f00b 	lsl.w	r0, r0, fp
 8009106:	4303      	orrs	r3, r0
 8009108:	9301      	str	r3, [sp, #4]
 800910a:	f10b 0b04 	add.w	fp, fp, #4
 800910e:	9b07      	ldr	r3, [sp, #28]
 8009110:	e00d      	b.n	800912e <__gethex+0x26e>
 8009112:	9a08      	ldr	r2, [sp, #32]
 8009114:	1e73      	subs	r3, r6, #1
 8009116:	4413      	add	r3, r2
 8009118:	42bb      	cmp	r3, r7
 800911a:	d3e0      	bcc.n	80090de <__gethex+0x21e>
 800911c:	4618      	mov	r0, r3
 800911e:	4652      	mov	r2, sl
 8009120:	9903      	ldr	r1, [sp, #12]
 8009122:	9309      	str	r3, [sp, #36]	; 0x24
 8009124:	f001 fa68 	bl	800a5f8 <strncmp>
 8009128:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800912a:	2800      	cmp	r0, #0
 800912c:	d1d7      	bne.n	80090de <__gethex+0x21e>
 800912e:	461e      	mov	r6, r3
 8009130:	e78c      	b.n	800904c <__gethex+0x18c>
 8009132:	f04f 0a03 	mov.w	sl, #3
 8009136:	e7b9      	b.n	80090ac <__gethex+0x1ec>
 8009138:	da09      	bge.n	800914e <__gethex+0x28e>
 800913a:	1bf7      	subs	r7, r6, r7
 800913c:	4621      	mov	r1, r4
 800913e:	463a      	mov	r2, r7
 8009140:	9802      	ldr	r0, [sp, #8]
 8009142:	f000 fc3f 	bl	80099c4 <__lshift>
 8009146:	4604      	mov	r4, r0
 8009148:	1bed      	subs	r5, r5, r7
 800914a:	f100 0914 	add.w	r9, r0, #20
 800914e:	f04f 0a00 	mov.w	sl, #0
 8009152:	e7b0      	b.n	80090b6 <__gethex+0x1f6>
 8009154:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009158:	42a8      	cmp	r0, r5
 800915a:	dd72      	ble.n	8009242 <__gethex+0x382>
 800915c:	1b45      	subs	r5, r0, r5
 800915e:	42ae      	cmp	r6, r5
 8009160:	dc35      	bgt.n	80091ce <__gethex+0x30e>
 8009162:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009166:	2b02      	cmp	r3, #2
 8009168:	d029      	beq.n	80091be <__gethex+0x2fe>
 800916a:	2b03      	cmp	r3, #3
 800916c:	d02b      	beq.n	80091c6 <__gethex+0x306>
 800916e:	2b01      	cmp	r3, #1
 8009170:	d11c      	bne.n	80091ac <__gethex+0x2ec>
 8009172:	42ae      	cmp	r6, r5
 8009174:	d11a      	bne.n	80091ac <__gethex+0x2ec>
 8009176:	2e01      	cmp	r6, #1
 8009178:	d112      	bne.n	80091a0 <__gethex+0x2e0>
 800917a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800917e:	9a05      	ldr	r2, [sp, #20]
 8009180:	2762      	movs	r7, #98	; 0x62
 8009182:	6013      	str	r3, [r2, #0]
 8009184:	2301      	movs	r3, #1
 8009186:	6123      	str	r3, [r4, #16]
 8009188:	f8c9 3000 	str.w	r3, [r9]
 800918c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800918e:	601c      	str	r4, [r3, #0]
 8009190:	e728      	b.n	8008fe4 <__gethex+0x124>
 8009192:	bf00      	nop
 8009194:	0800b478 	.word	0x0800b478
 8009198:	0800b401 	.word	0x0800b401
 800919c:	0800b412 	.word	0x0800b412
 80091a0:	4620      	mov	r0, r4
 80091a2:	1e71      	subs	r1, r6, #1
 80091a4:	f000 fe4d 	bl	8009e42 <__any_on>
 80091a8:	2800      	cmp	r0, #0
 80091aa:	d1e6      	bne.n	800917a <__gethex+0x2ba>
 80091ac:	4621      	mov	r1, r4
 80091ae:	9802      	ldr	r0, [sp, #8]
 80091b0:	f000 f9f0 	bl	8009594 <_Bfree>
 80091b4:	2300      	movs	r3, #0
 80091b6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80091b8:	2750      	movs	r7, #80	; 0x50
 80091ba:	6013      	str	r3, [r2, #0]
 80091bc:	e712      	b.n	8008fe4 <__gethex+0x124>
 80091be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d1f3      	bne.n	80091ac <__gethex+0x2ec>
 80091c4:	e7d9      	b.n	800917a <__gethex+0x2ba>
 80091c6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d1d6      	bne.n	800917a <__gethex+0x2ba>
 80091cc:	e7ee      	b.n	80091ac <__gethex+0x2ec>
 80091ce:	1e6f      	subs	r7, r5, #1
 80091d0:	f1ba 0f00 	cmp.w	sl, #0
 80091d4:	d132      	bne.n	800923c <__gethex+0x37c>
 80091d6:	b127      	cbz	r7, 80091e2 <__gethex+0x322>
 80091d8:	4639      	mov	r1, r7
 80091da:	4620      	mov	r0, r4
 80091dc:	f000 fe31 	bl	8009e42 <__any_on>
 80091e0:	4682      	mov	sl, r0
 80091e2:	2101      	movs	r1, #1
 80091e4:	117b      	asrs	r3, r7, #5
 80091e6:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80091ea:	f007 071f 	and.w	r7, r7, #31
 80091ee:	fa01 f707 	lsl.w	r7, r1, r7
 80091f2:	421f      	tst	r7, r3
 80091f4:	f04f 0702 	mov.w	r7, #2
 80091f8:	4629      	mov	r1, r5
 80091fa:	4620      	mov	r0, r4
 80091fc:	bf18      	it	ne
 80091fe:	f04a 0a02 	orrne.w	sl, sl, #2
 8009202:	1b76      	subs	r6, r6, r5
 8009204:	f7ff fdf4 	bl	8008df0 <rshift>
 8009208:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800920c:	f1ba 0f00 	cmp.w	sl, #0
 8009210:	d048      	beq.n	80092a4 <__gethex+0x3e4>
 8009212:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009216:	2b02      	cmp	r3, #2
 8009218:	d015      	beq.n	8009246 <__gethex+0x386>
 800921a:	2b03      	cmp	r3, #3
 800921c:	d017      	beq.n	800924e <__gethex+0x38e>
 800921e:	2b01      	cmp	r3, #1
 8009220:	d109      	bne.n	8009236 <__gethex+0x376>
 8009222:	f01a 0f02 	tst.w	sl, #2
 8009226:	d006      	beq.n	8009236 <__gethex+0x376>
 8009228:	f8d9 0000 	ldr.w	r0, [r9]
 800922c:	ea4a 0a00 	orr.w	sl, sl, r0
 8009230:	f01a 0f01 	tst.w	sl, #1
 8009234:	d10e      	bne.n	8009254 <__gethex+0x394>
 8009236:	f047 0710 	orr.w	r7, r7, #16
 800923a:	e033      	b.n	80092a4 <__gethex+0x3e4>
 800923c:	f04f 0a01 	mov.w	sl, #1
 8009240:	e7cf      	b.n	80091e2 <__gethex+0x322>
 8009242:	2701      	movs	r7, #1
 8009244:	e7e2      	b.n	800920c <__gethex+0x34c>
 8009246:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009248:	f1c3 0301 	rsb	r3, r3, #1
 800924c:	9315      	str	r3, [sp, #84]	; 0x54
 800924e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009250:	2b00      	cmp	r3, #0
 8009252:	d0f0      	beq.n	8009236 <__gethex+0x376>
 8009254:	f04f 0c00 	mov.w	ip, #0
 8009258:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800925c:	f104 0314 	add.w	r3, r4, #20
 8009260:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009264:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009268:	4618      	mov	r0, r3
 800926a:	f853 2b04 	ldr.w	r2, [r3], #4
 800926e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009272:	d01c      	beq.n	80092ae <__gethex+0x3ee>
 8009274:	3201      	adds	r2, #1
 8009276:	6002      	str	r2, [r0, #0]
 8009278:	2f02      	cmp	r7, #2
 800927a:	f104 0314 	add.w	r3, r4, #20
 800927e:	d13d      	bne.n	80092fc <__gethex+0x43c>
 8009280:	f8d8 2000 	ldr.w	r2, [r8]
 8009284:	3a01      	subs	r2, #1
 8009286:	42b2      	cmp	r2, r6
 8009288:	d10a      	bne.n	80092a0 <__gethex+0x3e0>
 800928a:	2201      	movs	r2, #1
 800928c:	1171      	asrs	r1, r6, #5
 800928e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009292:	f006 061f 	and.w	r6, r6, #31
 8009296:	fa02 f606 	lsl.w	r6, r2, r6
 800929a:	421e      	tst	r6, r3
 800929c:	bf18      	it	ne
 800929e:	4617      	movne	r7, r2
 80092a0:	f047 0720 	orr.w	r7, r7, #32
 80092a4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80092a6:	601c      	str	r4, [r3, #0]
 80092a8:	9b05      	ldr	r3, [sp, #20]
 80092aa:	601d      	str	r5, [r3, #0]
 80092ac:	e69a      	b.n	8008fe4 <__gethex+0x124>
 80092ae:	4299      	cmp	r1, r3
 80092b0:	f843 cc04 	str.w	ip, [r3, #-4]
 80092b4:	d8d8      	bhi.n	8009268 <__gethex+0x3a8>
 80092b6:	68a3      	ldr	r3, [r4, #8]
 80092b8:	459b      	cmp	fp, r3
 80092ba:	db17      	blt.n	80092ec <__gethex+0x42c>
 80092bc:	6861      	ldr	r1, [r4, #4]
 80092be:	9802      	ldr	r0, [sp, #8]
 80092c0:	3101      	adds	r1, #1
 80092c2:	f000 f927 	bl	8009514 <_Balloc>
 80092c6:	4681      	mov	r9, r0
 80092c8:	b918      	cbnz	r0, 80092d2 <__gethex+0x412>
 80092ca:	4602      	mov	r2, r0
 80092cc:	2184      	movs	r1, #132	; 0x84
 80092ce:	4b19      	ldr	r3, [pc, #100]	; (8009334 <__gethex+0x474>)
 80092d0:	e6ab      	b.n	800902a <__gethex+0x16a>
 80092d2:	6922      	ldr	r2, [r4, #16]
 80092d4:	f104 010c 	add.w	r1, r4, #12
 80092d8:	3202      	adds	r2, #2
 80092da:	0092      	lsls	r2, r2, #2
 80092dc:	300c      	adds	r0, #12
 80092de:	f7fd fb37 	bl	8006950 <memcpy>
 80092e2:	4621      	mov	r1, r4
 80092e4:	9802      	ldr	r0, [sp, #8]
 80092e6:	f000 f955 	bl	8009594 <_Bfree>
 80092ea:	464c      	mov	r4, r9
 80092ec:	6923      	ldr	r3, [r4, #16]
 80092ee:	1c5a      	adds	r2, r3, #1
 80092f0:	6122      	str	r2, [r4, #16]
 80092f2:	2201      	movs	r2, #1
 80092f4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80092f8:	615a      	str	r2, [r3, #20]
 80092fa:	e7bd      	b.n	8009278 <__gethex+0x3b8>
 80092fc:	6922      	ldr	r2, [r4, #16]
 80092fe:	455a      	cmp	r2, fp
 8009300:	dd0b      	ble.n	800931a <__gethex+0x45a>
 8009302:	2101      	movs	r1, #1
 8009304:	4620      	mov	r0, r4
 8009306:	f7ff fd73 	bl	8008df0 <rshift>
 800930a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800930e:	3501      	adds	r5, #1
 8009310:	42ab      	cmp	r3, r5
 8009312:	f6ff aed4 	blt.w	80090be <__gethex+0x1fe>
 8009316:	2701      	movs	r7, #1
 8009318:	e7c2      	b.n	80092a0 <__gethex+0x3e0>
 800931a:	f016 061f 	ands.w	r6, r6, #31
 800931e:	d0fa      	beq.n	8009316 <__gethex+0x456>
 8009320:	4453      	add	r3, sl
 8009322:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009326:	f000 f9e7 	bl	80096f8 <__hi0bits>
 800932a:	f1c6 0620 	rsb	r6, r6, #32
 800932e:	42b0      	cmp	r0, r6
 8009330:	dbe7      	blt.n	8009302 <__gethex+0x442>
 8009332:	e7f0      	b.n	8009316 <__gethex+0x456>
 8009334:	0800b401 	.word	0x0800b401

08009338 <L_shift>:
 8009338:	f1c2 0208 	rsb	r2, r2, #8
 800933c:	0092      	lsls	r2, r2, #2
 800933e:	b570      	push	{r4, r5, r6, lr}
 8009340:	f1c2 0620 	rsb	r6, r2, #32
 8009344:	6843      	ldr	r3, [r0, #4]
 8009346:	6804      	ldr	r4, [r0, #0]
 8009348:	fa03 f506 	lsl.w	r5, r3, r6
 800934c:	432c      	orrs	r4, r5
 800934e:	40d3      	lsrs	r3, r2
 8009350:	6004      	str	r4, [r0, #0]
 8009352:	f840 3f04 	str.w	r3, [r0, #4]!
 8009356:	4288      	cmp	r0, r1
 8009358:	d3f4      	bcc.n	8009344 <L_shift+0xc>
 800935a:	bd70      	pop	{r4, r5, r6, pc}

0800935c <__match>:
 800935c:	b530      	push	{r4, r5, lr}
 800935e:	6803      	ldr	r3, [r0, #0]
 8009360:	3301      	adds	r3, #1
 8009362:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009366:	b914      	cbnz	r4, 800936e <__match+0x12>
 8009368:	6003      	str	r3, [r0, #0]
 800936a:	2001      	movs	r0, #1
 800936c:	bd30      	pop	{r4, r5, pc}
 800936e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009372:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009376:	2d19      	cmp	r5, #25
 8009378:	bf98      	it	ls
 800937a:	3220      	addls	r2, #32
 800937c:	42a2      	cmp	r2, r4
 800937e:	d0f0      	beq.n	8009362 <__match+0x6>
 8009380:	2000      	movs	r0, #0
 8009382:	e7f3      	b.n	800936c <__match+0x10>

08009384 <__hexnan>:
 8009384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009388:	2500      	movs	r5, #0
 800938a:	680b      	ldr	r3, [r1, #0]
 800938c:	4682      	mov	sl, r0
 800938e:	115e      	asrs	r6, r3, #5
 8009390:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009394:	f013 031f 	ands.w	r3, r3, #31
 8009398:	bf18      	it	ne
 800939a:	3604      	addne	r6, #4
 800939c:	1f37      	subs	r7, r6, #4
 800939e:	46b9      	mov	r9, r7
 80093a0:	463c      	mov	r4, r7
 80093a2:	46ab      	mov	fp, r5
 80093a4:	b087      	sub	sp, #28
 80093a6:	4690      	mov	r8, r2
 80093a8:	6802      	ldr	r2, [r0, #0]
 80093aa:	9301      	str	r3, [sp, #4]
 80093ac:	f846 5c04 	str.w	r5, [r6, #-4]
 80093b0:	9502      	str	r5, [sp, #8]
 80093b2:	7851      	ldrb	r1, [r2, #1]
 80093b4:	1c53      	adds	r3, r2, #1
 80093b6:	9303      	str	r3, [sp, #12]
 80093b8:	b341      	cbz	r1, 800940c <__hexnan+0x88>
 80093ba:	4608      	mov	r0, r1
 80093bc:	9205      	str	r2, [sp, #20]
 80093be:	9104      	str	r1, [sp, #16]
 80093c0:	f7ff fd69 	bl	8008e96 <__hexdig_fun>
 80093c4:	2800      	cmp	r0, #0
 80093c6:	d14f      	bne.n	8009468 <__hexnan+0xe4>
 80093c8:	9904      	ldr	r1, [sp, #16]
 80093ca:	9a05      	ldr	r2, [sp, #20]
 80093cc:	2920      	cmp	r1, #32
 80093ce:	d818      	bhi.n	8009402 <__hexnan+0x7e>
 80093d0:	9b02      	ldr	r3, [sp, #8]
 80093d2:	459b      	cmp	fp, r3
 80093d4:	dd13      	ble.n	80093fe <__hexnan+0x7a>
 80093d6:	454c      	cmp	r4, r9
 80093d8:	d206      	bcs.n	80093e8 <__hexnan+0x64>
 80093da:	2d07      	cmp	r5, #7
 80093dc:	dc04      	bgt.n	80093e8 <__hexnan+0x64>
 80093de:	462a      	mov	r2, r5
 80093e0:	4649      	mov	r1, r9
 80093e2:	4620      	mov	r0, r4
 80093e4:	f7ff ffa8 	bl	8009338 <L_shift>
 80093e8:	4544      	cmp	r4, r8
 80093ea:	d950      	bls.n	800948e <__hexnan+0x10a>
 80093ec:	2300      	movs	r3, #0
 80093ee:	f1a4 0904 	sub.w	r9, r4, #4
 80093f2:	f844 3c04 	str.w	r3, [r4, #-4]
 80093f6:	461d      	mov	r5, r3
 80093f8:	464c      	mov	r4, r9
 80093fa:	f8cd b008 	str.w	fp, [sp, #8]
 80093fe:	9a03      	ldr	r2, [sp, #12]
 8009400:	e7d7      	b.n	80093b2 <__hexnan+0x2e>
 8009402:	2929      	cmp	r1, #41	; 0x29
 8009404:	d156      	bne.n	80094b4 <__hexnan+0x130>
 8009406:	3202      	adds	r2, #2
 8009408:	f8ca 2000 	str.w	r2, [sl]
 800940c:	f1bb 0f00 	cmp.w	fp, #0
 8009410:	d050      	beq.n	80094b4 <__hexnan+0x130>
 8009412:	454c      	cmp	r4, r9
 8009414:	d206      	bcs.n	8009424 <__hexnan+0xa0>
 8009416:	2d07      	cmp	r5, #7
 8009418:	dc04      	bgt.n	8009424 <__hexnan+0xa0>
 800941a:	462a      	mov	r2, r5
 800941c:	4649      	mov	r1, r9
 800941e:	4620      	mov	r0, r4
 8009420:	f7ff ff8a 	bl	8009338 <L_shift>
 8009424:	4544      	cmp	r4, r8
 8009426:	d934      	bls.n	8009492 <__hexnan+0x10e>
 8009428:	4623      	mov	r3, r4
 800942a:	f1a8 0204 	sub.w	r2, r8, #4
 800942e:	f853 1b04 	ldr.w	r1, [r3], #4
 8009432:	429f      	cmp	r7, r3
 8009434:	f842 1f04 	str.w	r1, [r2, #4]!
 8009438:	d2f9      	bcs.n	800942e <__hexnan+0xaa>
 800943a:	1b3b      	subs	r3, r7, r4
 800943c:	f023 0303 	bic.w	r3, r3, #3
 8009440:	3304      	adds	r3, #4
 8009442:	3401      	adds	r4, #1
 8009444:	3e03      	subs	r6, #3
 8009446:	42b4      	cmp	r4, r6
 8009448:	bf88      	it	hi
 800944a:	2304      	movhi	r3, #4
 800944c:	2200      	movs	r2, #0
 800944e:	4443      	add	r3, r8
 8009450:	f843 2b04 	str.w	r2, [r3], #4
 8009454:	429f      	cmp	r7, r3
 8009456:	d2fb      	bcs.n	8009450 <__hexnan+0xcc>
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	b91b      	cbnz	r3, 8009464 <__hexnan+0xe0>
 800945c:	4547      	cmp	r7, r8
 800945e:	d127      	bne.n	80094b0 <__hexnan+0x12c>
 8009460:	2301      	movs	r3, #1
 8009462:	603b      	str	r3, [r7, #0]
 8009464:	2005      	movs	r0, #5
 8009466:	e026      	b.n	80094b6 <__hexnan+0x132>
 8009468:	3501      	adds	r5, #1
 800946a:	2d08      	cmp	r5, #8
 800946c:	f10b 0b01 	add.w	fp, fp, #1
 8009470:	dd06      	ble.n	8009480 <__hexnan+0xfc>
 8009472:	4544      	cmp	r4, r8
 8009474:	d9c3      	bls.n	80093fe <__hexnan+0x7a>
 8009476:	2300      	movs	r3, #0
 8009478:	2501      	movs	r5, #1
 800947a:	f844 3c04 	str.w	r3, [r4, #-4]
 800947e:	3c04      	subs	r4, #4
 8009480:	6822      	ldr	r2, [r4, #0]
 8009482:	f000 000f 	and.w	r0, r0, #15
 8009486:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800948a:	6022      	str	r2, [r4, #0]
 800948c:	e7b7      	b.n	80093fe <__hexnan+0x7a>
 800948e:	2508      	movs	r5, #8
 8009490:	e7b5      	b.n	80093fe <__hexnan+0x7a>
 8009492:	9b01      	ldr	r3, [sp, #4]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d0df      	beq.n	8009458 <__hexnan+0xd4>
 8009498:	f04f 32ff 	mov.w	r2, #4294967295
 800949c:	f1c3 0320 	rsb	r3, r3, #32
 80094a0:	fa22 f303 	lsr.w	r3, r2, r3
 80094a4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80094a8:	401a      	ands	r2, r3
 80094aa:	f846 2c04 	str.w	r2, [r6, #-4]
 80094ae:	e7d3      	b.n	8009458 <__hexnan+0xd4>
 80094b0:	3f04      	subs	r7, #4
 80094b2:	e7d1      	b.n	8009458 <__hexnan+0xd4>
 80094b4:	2004      	movs	r0, #4
 80094b6:	b007      	add	sp, #28
 80094b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080094bc <_localeconv_r>:
 80094bc:	4800      	ldr	r0, [pc, #0]	; (80094c0 <_localeconv_r+0x4>)
 80094be:	4770      	bx	lr
 80094c0:	20000374 	.word	0x20000374

080094c4 <malloc>:
 80094c4:	4b02      	ldr	r3, [pc, #8]	; (80094d0 <malloc+0xc>)
 80094c6:	4601      	mov	r1, r0
 80094c8:	6818      	ldr	r0, [r3, #0]
 80094ca:	f000 bd57 	b.w	8009f7c <_malloc_r>
 80094ce:	bf00      	nop
 80094d0:	2000021c 	.word	0x2000021c

080094d4 <__ascii_mbtowc>:
 80094d4:	b082      	sub	sp, #8
 80094d6:	b901      	cbnz	r1, 80094da <__ascii_mbtowc+0x6>
 80094d8:	a901      	add	r1, sp, #4
 80094da:	b142      	cbz	r2, 80094ee <__ascii_mbtowc+0x1a>
 80094dc:	b14b      	cbz	r3, 80094f2 <__ascii_mbtowc+0x1e>
 80094de:	7813      	ldrb	r3, [r2, #0]
 80094e0:	600b      	str	r3, [r1, #0]
 80094e2:	7812      	ldrb	r2, [r2, #0]
 80094e4:	1e10      	subs	r0, r2, #0
 80094e6:	bf18      	it	ne
 80094e8:	2001      	movne	r0, #1
 80094ea:	b002      	add	sp, #8
 80094ec:	4770      	bx	lr
 80094ee:	4610      	mov	r0, r2
 80094f0:	e7fb      	b.n	80094ea <__ascii_mbtowc+0x16>
 80094f2:	f06f 0001 	mvn.w	r0, #1
 80094f6:	e7f8      	b.n	80094ea <__ascii_mbtowc+0x16>

080094f8 <memchr>:
 80094f8:	4603      	mov	r3, r0
 80094fa:	b510      	push	{r4, lr}
 80094fc:	b2c9      	uxtb	r1, r1
 80094fe:	4402      	add	r2, r0
 8009500:	4293      	cmp	r3, r2
 8009502:	4618      	mov	r0, r3
 8009504:	d101      	bne.n	800950a <memchr+0x12>
 8009506:	2000      	movs	r0, #0
 8009508:	e003      	b.n	8009512 <memchr+0x1a>
 800950a:	7804      	ldrb	r4, [r0, #0]
 800950c:	3301      	adds	r3, #1
 800950e:	428c      	cmp	r4, r1
 8009510:	d1f6      	bne.n	8009500 <memchr+0x8>
 8009512:	bd10      	pop	{r4, pc}

08009514 <_Balloc>:
 8009514:	b570      	push	{r4, r5, r6, lr}
 8009516:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009518:	4604      	mov	r4, r0
 800951a:	460d      	mov	r5, r1
 800951c:	b976      	cbnz	r6, 800953c <_Balloc+0x28>
 800951e:	2010      	movs	r0, #16
 8009520:	f7ff ffd0 	bl	80094c4 <malloc>
 8009524:	4602      	mov	r2, r0
 8009526:	6260      	str	r0, [r4, #36]	; 0x24
 8009528:	b920      	cbnz	r0, 8009534 <_Balloc+0x20>
 800952a:	2166      	movs	r1, #102	; 0x66
 800952c:	4b17      	ldr	r3, [pc, #92]	; (800958c <_Balloc+0x78>)
 800952e:	4818      	ldr	r0, [pc, #96]	; (8009590 <_Balloc+0x7c>)
 8009530:	f7fe fdb4 	bl	800809c <__assert_func>
 8009534:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009538:	6006      	str	r6, [r0, #0]
 800953a:	60c6      	str	r6, [r0, #12]
 800953c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800953e:	68f3      	ldr	r3, [r6, #12]
 8009540:	b183      	cbz	r3, 8009564 <_Balloc+0x50>
 8009542:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009544:	68db      	ldr	r3, [r3, #12]
 8009546:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800954a:	b9b8      	cbnz	r0, 800957c <_Balloc+0x68>
 800954c:	2101      	movs	r1, #1
 800954e:	fa01 f605 	lsl.w	r6, r1, r5
 8009552:	1d72      	adds	r2, r6, #5
 8009554:	4620      	mov	r0, r4
 8009556:	0092      	lsls	r2, r2, #2
 8009558:	f000 fc94 	bl	8009e84 <_calloc_r>
 800955c:	b160      	cbz	r0, 8009578 <_Balloc+0x64>
 800955e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009562:	e00e      	b.n	8009582 <_Balloc+0x6e>
 8009564:	2221      	movs	r2, #33	; 0x21
 8009566:	2104      	movs	r1, #4
 8009568:	4620      	mov	r0, r4
 800956a:	f000 fc8b 	bl	8009e84 <_calloc_r>
 800956e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009570:	60f0      	str	r0, [r6, #12]
 8009572:	68db      	ldr	r3, [r3, #12]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d1e4      	bne.n	8009542 <_Balloc+0x2e>
 8009578:	2000      	movs	r0, #0
 800957a:	bd70      	pop	{r4, r5, r6, pc}
 800957c:	6802      	ldr	r2, [r0, #0]
 800957e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009582:	2300      	movs	r3, #0
 8009584:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009588:	e7f7      	b.n	800957a <_Balloc+0x66>
 800958a:	bf00      	nop
 800958c:	0800b1e8 	.word	0x0800b1e8
 8009590:	0800b48c 	.word	0x0800b48c

08009594 <_Bfree>:
 8009594:	b570      	push	{r4, r5, r6, lr}
 8009596:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009598:	4605      	mov	r5, r0
 800959a:	460c      	mov	r4, r1
 800959c:	b976      	cbnz	r6, 80095bc <_Bfree+0x28>
 800959e:	2010      	movs	r0, #16
 80095a0:	f7ff ff90 	bl	80094c4 <malloc>
 80095a4:	4602      	mov	r2, r0
 80095a6:	6268      	str	r0, [r5, #36]	; 0x24
 80095a8:	b920      	cbnz	r0, 80095b4 <_Bfree+0x20>
 80095aa:	218a      	movs	r1, #138	; 0x8a
 80095ac:	4b08      	ldr	r3, [pc, #32]	; (80095d0 <_Bfree+0x3c>)
 80095ae:	4809      	ldr	r0, [pc, #36]	; (80095d4 <_Bfree+0x40>)
 80095b0:	f7fe fd74 	bl	800809c <__assert_func>
 80095b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80095b8:	6006      	str	r6, [r0, #0]
 80095ba:	60c6      	str	r6, [r0, #12]
 80095bc:	b13c      	cbz	r4, 80095ce <_Bfree+0x3a>
 80095be:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80095c0:	6862      	ldr	r2, [r4, #4]
 80095c2:	68db      	ldr	r3, [r3, #12]
 80095c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80095c8:	6021      	str	r1, [r4, #0]
 80095ca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80095ce:	bd70      	pop	{r4, r5, r6, pc}
 80095d0:	0800b1e8 	.word	0x0800b1e8
 80095d4:	0800b48c 	.word	0x0800b48c

080095d8 <__multadd>:
 80095d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095dc:	4607      	mov	r7, r0
 80095de:	460c      	mov	r4, r1
 80095e0:	461e      	mov	r6, r3
 80095e2:	2000      	movs	r0, #0
 80095e4:	690d      	ldr	r5, [r1, #16]
 80095e6:	f101 0c14 	add.w	ip, r1, #20
 80095ea:	f8dc 3000 	ldr.w	r3, [ip]
 80095ee:	3001      	adds	r0, #1
 80095f0:	b299      	uxth	r1, r3
 80095f2:	fb02 6101 	mla	r1, r2, r1, r6
 80095f6:	0c1e      	lsrs	r6, r3, #16
 80095f8:	0c0b      	lsrs	r3, r1, #16
 80095fa:	fb02 3306 	mla	r3, r2, r6, r3
 80095fe:	b289      	uxth	r1, r1
 8009600:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009604:	4285      	cmp	r5, r0
 8009606:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800960a:	f84c 1b04 	str.w	r1, [ip], #4
 800960e:	dcec      	bgt.n	80095ea <__multadd+0x12>
 8009610:	b30e      	cbz	r6, 8009656 <__multadd+0x7e>
 8009612:	68a3      	ldr	r3, [r4, #8]
 8009614:	42ab      	cmp	r3, r5
 8009616:	dc19      	bgt.n	800964c <__multadd+0x74>
 8009618:	6861      	ldr	r1, [r4, #4]
 800961a:	4638      	mov	r0, r7
 800961c:	3101      	adds	r1, #1
 800961e:	f7ff ff79 	bl	8009514 <_Balloc>
 8009622:	4680      	mov	r8, r0
 8009624:	b928      	cbnz	r0, 8009632 <__multadd+0x5a>
 8009626:	4602      	mov	r2, r0
 8009628:	21b5      	movs	r1, #181	; 0xb5
 800962a:	4b0c      	ldr	r3, [pc, #48]	; (800965c <__multadd+0x84>)
 800962c:	480c      	ldr	r0, [pc, #48]	; (8009660 <__multadd+0x88>)
 800962e:	f7fe fd35 	bl	800809c <__assert_func>
 8009632:	6922      	ldr	r2, [r4, #16]
 8009634:	f104 010c 	add.w	r1, r4, #12
 8009638:	3202      	adds	r2, #2
 800963a:	0092      	lsls	r2, r2, #2
 800963c:	300c      	adds	r0, #12
 800963e:	f7fd f987 	bl	8006950 <memcpy>
 8009642:	4621      	mov	r1, r4
 8009644:	4638      	mov	r0, r7
 8009646:	f7ff ffa5 	bl	8009594 <_Bfree>
 800964a:	4644      	mov	r4, r8
 800964c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009650:	3501      	adds	r5, #1
 8009652:	615e      	str	r6, [r3, #20]
 8009654:	6125      	str	r5, [r4, #16]
 8009656:	4620      	mov	r0, r4
 8009658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800965c:	0800b401 	.word	0x0800b401
 8009660:	0800b48c 	.word	0x0800b48c

08009664 <__s2b>:
 8009664:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009668:	4615      	mov	r5, r2
 800966a:	2209      	movs	r2, #9
 800966c:	461f      	mov	r7, r3
 800966e:	3308      	adds	r3, #8
 8009670:	460c      	mov	r4, r1
 8009672:	fb93 f3f2 	sdiv	r3, r3, r2
 8009676:	4606      	mov	r6, r0
 8009678:	2201      	movs	r2, #1
 800967a:	2100      	movs	r1, #0
 800967c:	429a      	cmp	r2, r3
 800967e:	db09      	blt.n	8009694 <__s2b+0x30>
 8009680:	4630      	mov	r0, r6
 8009682:	f7ff ff47 	bl	8009514 <_Balloc>
 8009686:	b940      	cbnz	r0, 800969a <__s2b+0x36>
 8009688:	4602      	mov	r2, r0
 800968a:	21ce      	movs	r1, #206	; 0xce
 800968c:	4b18      	ldr	r3, [pc, #96]	; (80096f0 <__s2b+0x8c>)
 800968e:	4819      	ldr	r0, [pc, #100]	; (80096f4 <__s2b+0x90>)
 8009690:	f7fe fd04 	bl	800809c <__assert_func>
 8009694:	0052      	lsls	r2, r2, #1
 8009696:	3101      	adds	r1, #1
 8009698:	e7f0      	b.n	800967c <__s2b+0x18>
 800969a:	9b08      	ldr	r3, [sp, #32]
 800969c:	2d09      	cmp	r5, #9
 800969e:	6143      	str	r3, [r0, #20]
 80096a0:	f04f 0301 	mov.w	r3, #1
 80096a4:	6103      	str	r3, [r0, #16]
 80096a6:	dd16      	ble.n	80096d6 <__s2b+0x72>
 80096a8:	f104 0909 	add.w	r9, r4, #9
 80096ac:	46c8      	mov	r8, r9
 80096ae:	442c      	add	r4, r5
 80096b0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80096b4:	4601      	mov	r1, r0
 80096b6:	220a      	movs	r2, #10
 80096b8:	4630      	mov	r0, r6
 80096ba:	3b30      	subs	r3, #48	; 0x30
 80096bc:	f7ff ff8c 	bl	80095d8 <__multadd>
 80096c0:	45a0      	cmp	r8, r4
 80096c2:	d1f5      	bne.n	80096b0 <__s2b+0x4c>
 80096c4:	f1a5 0408 	sub.w	r4, r5, #8
 80096c8:	444c      	add	r4, r9
 80096ca:	1b2d      	subs	r5, r5, r4
 80096cc:	1963      	adds	r3, r4, r5
 80096ce:	42bb      	cmp	r3, r7
 80096d0:	db04      	blt.n	80096dc <__s2b+0x78>
 80096d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096d6:	2509      	movs	r5, #9
 80096d8:	340a      	adds	r4, #10
 80096da:	e7f6      	b.n	80096ca <__s2b+0x66>
 80096dc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80096e0:	4601      	mov	r1, r0
 80096e2:	220a      	movs	r2, #10
 80096e4:	4630      	mov	r0, r6
 80096e6:	3b30      	subs	r3, #48	; 0x30
 80096e8:	f7ff ff76 	bl	80095d8 <__multadd>
 80096ec:	e7ee      	b.n	80096cc <__s2b+0x68>
 80096ee:	bf00      	nop
 80096f0:	0800b401 	.word	0x0800b401
 80096f4:	0800b48c 	.word	0x0800b48c

080096f8 <__hi0bits>:
 80096f8:	0c02      	lsrs	r2, r0, #16
 80096fa:	0412      	lsls	r2, r2, #16
 80096fc:	4603      	mov	r3, r0
 80096fe:	b9ca      	cbnz	r2, 8009734 <__hi0bits+0x3c>
 8009700:	0403      	lsls	r3, r0, #16
 8009702:	2010      	movs	r0, #16
 8009704:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009708:	bf04      	itt	eq
 800970a:	021b      	lsleq	r3, r3, #8
 800970c:	3008      	addeq	r0, #8
 800970e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009712:	bf04      	itt	eq
 8009714:	011b      	lsleq	r3, r3, #4
 8009716:	3004      	addeq	r0, #4
 8009718:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800971c:	bf04      	itt	eq
 800971e:	009b      	lsleq	r3, r3, #2
 8009720:	3002      	addeq	r0, #2
 8009722:	2b00      	cmp	r3, #0
 8009724:	db05      	blt.n	8009732 <__hi0bits+0x3a>
 8009726:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800972a:	f100 0001 	add.w	r0, r0, #1
 800972e:	bf08      	it	eq
 8009730:	2020      	moveq	r0, #32
 8009732:	4770      	bx	lr
 8009734:	2000      	movs	r0, #0
 8009736:	e7e5      	b.n	8009704 <__hi0bits+0xc>

08009738 <__lo0bits>:
 8009738:	6803      	ldr	r3, [r0, #0]
 800973a:	4602      	mov	r2, r0
 800973c:	f013 0007 	ands.w	r0, r3, #7
 8009740:	d00b      	beq.n	800975a <__lo0bits+0x22>
 8009742:	07d9      	lsls	r1, r3, #31
 8009744:	d421      	bmi.n	800978a <__lo0bits+0x52>
 8009746:	0798      	lsls	r0, r3, #30
 8009748:	bf49      	itett	mi
 800974a:	085b      	lsrmi	r3, r3, #1
 800974c:	089b      	lsrpl	r3, r3, #2
 800974e:	2001      	movmi	r0, #1
 8009750:	6013      	strmi	r3, [r2, #0]
 8009752:	bf5c      	itt	pl
 8009754:	2002      	movpl	r0, #2
 8009756:	6013      	strpl	r3, [r2, #0]
 8009758:	4770      	bx	lr
 800975a:	b299      	uxth	r1, r3
 800975c:	b909      	cbnz	r1, 8009762 <__lo0bits+0x2a>
 800975e:	2010      	movs	r0, #16
 8009760:	0c1b      	lsrs	r3, r3, #16
 8009762:	b2d9      	uxtb	r1, r3
 8009764:	b909      	cbnz	r1, 800976a <__lo0bits+0x32>
 8009766:	3008      	adds	r0, #8
 8009768:	0a1b      	lsrs	r3, r3, #8
 800976a:	0719      	lsls	r1, r3, #28
 800976c:	bf04      	itt	eq
 800976e:	091b      	lsreq	r3, r3, #4
 8009770:	3004      	addeq	r0, #4
 8009772:	0799      	lsls	r1, r3, #30
 8009774:	bf04      	itt	eq
 8009776:	089b      	lsreq	r3, r3, #2
 8009778:	3002      	addeq	r0, #2
 800977a:	07d9      	lsls	r1, r3, #31
 800977c:	d403      	bmi.n	8009786 <__lo0bits+0x4e>
 800977e:	085b      	lsrs	r3, r3, #1
 8009780:	f100 0001 	add.w	r0, r0, #1
 8009784:	d003      	beq.n	800978e <__lo0bits+0x56>
 8009786:	6013      	str	r3, [r2, #0]
 8009788:	4770      	bx	lr
 800978a:	2000      	movs	r0, #0
 800978c:	4770      	bx	lr
 800978e:	2020      	movs	r0, #32
 8009790:	4770      	bx	lr
	...

08009794 <__i2b>:
 8009794:	b510      	push	{r4, lr}
 8009796:	460c      	mov	r4, r1
 8009798:	2101      	movs	r1, #1
 800979a:	f7ff febb 	bl	8009514 <_Balloc>
 800979e:	4602      	mov	r2, r0
 80097a0:	b928      	cbnz	r0, 80097ae <__i2b+0x1a>
 80097a2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80097a6:	4b04      	ldr	r3, [pc, #16]	; (80097b8 <__i2b+0x24>)
 80097a8:	4804      	ldr	r0, [pc, #16]	; (80097bc <__i2b+0x28>)
 80097aa:	f7fe fc77 	bl	800809c <__assert_func>
 80097ae:	2301      	movs	r3, #1
 80097b0:	6144      	str	r4, [r0, #20]
 80097b2:	6103      	str	r3, [r0, #16]
 80097b4:	bd10      	pop	{r4, pc}
 80097b6:	bf00      	nop
 80097b8:	0800b401 	.word	0x0800b401
 80097bc:	0800b48c 	.word	0x0800b48c

080097c0 <__multiply>:
 80097c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097c4:	4691      	mov	r9, r2
 80097c6:	690a      	ldr	r2, [r1, #16]
 80097c8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80097cc:	460c      	mov	r4, r1
 80097ce:	429a      	cmp	r2, r3
 80097d0:	bfbe      	ittt	lt
 80097d2:	460b      	movlt	r3, r1
 80097d4:	464c      	movlt	r4, r9
 80097d6:	4699      	movlt	r9, r3
 80097d8:	6927      	ldr	r7, [r4, #16]
 80097da:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80097de:	68a3      	ldr	r3, [r4, #8]
 80097e0:	6861      	ldr	r1, [r4, #4]
 80097e2:	eb07 060a 	add.w	r6, r7, sl
 80097e6:	42b3      	cmp	r3, r6
 80097e8:	b085      	sub	sp, #20
 80097ea:	bfb8      	it	lt
 80097ec:	3101      	addlt	r1, #1
 80097ee:	f7ff fe91 	bl	8009514 <_Balloc>
 80097f2:	b930      	cbnz	r0, 8009802 <__multiply+0x42>
 80097f4:	4602      	mov	r2, r0
 80097f6:	f240 115d 	movw	r1, #349	; 0x15d
 80097fa:	4b43      	ldr	r3, [pc, #268]	; (8009908 <__multiply+0x148>)
 80097fc:	4843      	ldr	r0, [pc, #268]	; (800990c <__multiply+0x14c>)
 80097fe:	f7fe fc4d 	bl	800809c <__assert_func>
 8009802:	f100 0514 	add.w	r5, r0, #20
 8009806:	462b      	mov	r3, r5
 8009808:	2200      	movs	r2, #0
 800980a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800980e:	4543      	cmp	r3, r8
 8009810:	d321      	bcc.n	8009856 <__multiply+0x96>
 8009812:	f104 0314 	add.w	r3, r4, #20
 8009816:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800981a:	f109 0314 	add.w	r3, r9, #20
 800981e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009822:	9202      	str	r2, [sp, #8]
 8009824:	1b3a      	subs	r2, r7, r4
 8009826:	3a15      	subs	r2, #21
 8009828:	f022 0203 	bic.w	r2, r2, #3
 800982c:	3204      	adds	r2, #4
 800982e:	f104 0115 	add.w	r1, r4, #21
 8009832:	428f      	cmp	r7, r1
 8009834:	bf38      	it	cc
 8009836:	2204      	movcc	r2, #4
 8009838:	9201      	str	r2, [sp, #4]
 800983a:	9a02      	ldr	r2, [sp, #8]
 800983c:	9303      	str	r3, [sp, #12]
 800983e:	429a      	cmp	r2, r3
 8009840:	d80c      	bhi.n	800985c <__multiply+0x9c>
 8009842:	2e00      	cmp	r6, #0
 8009844:	dd03      	ble.n	800984e <__multiply+0x8e>
 8009846:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800984a:	2b00      	cmp	r3, #0
 800984c:	d059      	beq.n	8009902 <__multiply+0x142>
 800984e:	6106      	str	r6, [r0, #16]
 8009850:	b005      	add	sp, #20
 8009852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009856:	f843 2b04 	str.w	r2, [r3], #4
 800985a:	e7d8      	b.n	800980e <__multiply+0x4e>
 800985c:	f8b3 a000 	ldrh.w	sl, [r3]
 8009860:	f1ba 0f00 	cmp.w	sl, #0
 8009864:	d023      	beq.n	80098ae <__multiply+0xee>
 8009866:	46a9      	mov	r9, r5
 8009868:	f04f 0c00 	mov.w	ip, #0
 800986c:	f104 0e14 	add.w	lr, r4, #20
 8009870:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009874:	f8d9 1000 	ldr.w	r1, [r9]
 8009878:	fa1f fb82 	uxth.w	fp, r2
 800987c:	b289      	uxth	r1, r1
 800987e:	fb0a 110b 	mla	r1, sl, fp, r1
 8009882:	4461      	add	r1, ip
 8009884:	f8d9 c000 	ldr.w	ip, [r9]
 8009888:	0c12      	lsrs	r2, r2, #16
 800988a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800988e:	fb0a c202 	mla	r2, sl, r2, ip
 8009892:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009896:	b289      	uxth	r1, r1
 8009898:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800989c:	4577      	cmp	r7, lr
 800989e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80098a2:	f849 1b04 	str.w	r1, [r9], #4
 80098a6:	d8e3      	bhi.n	8009870 <__multiply+0xb0>
 80098a8:	9a01      	ldr	r2, [sp, #4]
 80098aa:	f845 c002 	str.w	ip, [r5, r2]
 80098ae:	9a03      	ldr	r2, [sp, #12]
 80098b0:	3304      	adds	r3, #4
 80098b2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80098b6:	f1b9 0f00 	cmp.w	r9, #0
 80098ba:	d020      	beq.n	80098fe <__multiply+0x13e>
 80098bc:	46ae      	mov	lr, r5
 80098be:	f04f 0a00 	mov.w	sl, #0
 80098c2:	6829      	ldr	r1, [r5, #0]
 80098c4:	f104 0c14 	add.w	ip, r4, #20
 80098c8:	f8bc b000 	ldrh.w	fp, [ip]
 80098cc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80098d0:	b289      	uxth	r1, r1
 80098d2:	fb09 220b 	mla	r2, r9, fp, r2
 80098d6:	4492      	add	sl, r2
 80098d8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80098dc:	f84e 1b04 	str.w	r1, [lr], #4
 80098e0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80098e4:	f8be 1000 	ldrh.w	r1, [lr]
 80098e8:	0c12      	lsrs	r2, r2, #16
 80098ea:	fb09 1102 	mla	r1, r9, r2, r1
 80098ee:	4567      	cmp	r7, ip
 80098f0:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80098f4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80098f8:	d8e6      	bhi.n	80098c8 <__multiply+0x108>
 80098fa:	9a01      	ldr	r2, [sp, #4]
 80098fc:	50a9      	str	r1, [r5, r2]
 80098fe:	3504      	adds	r5, #4
 8009900:	e79b      	b.n	800983a <__multiply+0x7a>
 8009902:	3e01      	subs	r6, #1
 8009904:	e79d      	b.n	8009842 <__multiply+0x82>
 8009906:	bf00      	nop
 8009908:	0800b401 	.word	0x0800b401
 800990c:	0800b48c 	.word	0x0800b48c

08009910 <__pow5mult>:
 8009910:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009914:	4615      	mov	r5, r2
 8009916:	f012 0203 	ands.w	r2, r2, #3
 800991a:	4606      	mov	r6, r0
 800991c:	460f      	mov	r7, r1
 800991e:	d007      	beq.n	8009930 <__pow5mult+0x20>
 8009920:	4c25      	ldr	r4, [pc, #148]	; (80099b8 <__pow5mult+0xa8>)
 8009922:	3a01      	subs	r2, #1
 8009924:	2300      	movs	r3, #0
 8009926:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800992a:	f7ff fe55 	bl	80095d8 <__multadd>
 800992e:	4607      	mov	r7, r0
 8009930:	10ad      	asrs	r5, r5, #2
 8009932:	d03d      	beq.n	80099b0 <__pow5mult+0xa0>
 8009934:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009936:	b97c      	cbnz	r4, 8009958 <__pow5mult+0x48>
 8009938:	2010      	movs	r0, #16
 800993a:	f7ff fdc3 	bl	80094c4 <malloc>
 800993e:	4602      	mov	r2, r0
 8009940:	6270      	str	r0, [r6, #36]	; 0x24
 8009942:	b928      	cbnz	r0, 8009950 <__pow5mult+0x40>
 8009944:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009948:	4b1c      	ldr	r3, [pc, #112]	; (80099bc <__pow5mult+0xac>)
 800994a:	481d      	ldr	r0, [pc, #116]	; (80099c0 <__pow5mult+0xb0>)
 800994c:	f7fe fba6 	bl	800809c <__assert_func>
 8009950:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009954:	6004      	str	r4, [r0, #0]
 8009956:	60c4      	str	r4, [r0, #12]
 8009958:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800995c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009960:	b94c      	cbnz	r4, 8009976 <__pow5mult+0x66>
 8009962:	f240 2171 	movw	r1, #625	; 0x271
 8009966:	4630      	mov	r0, r6
 8009968:	f7ff ff14 	bl	8009794 <__i2b>
 800996c:	2300      	movs	r3, #0
 800996e:	4604      	mov	r4, r0
 8009970:	f8c8 0008 	str.w	r0, [r8, #8]
 8009974:	6003      	str	r3, [r0, #0]
 8009976:	f04f 0900 	mov.w	r9, #0
 800997a:	07eb      	lsls	r3, r5, #31
 800997c:	d50a      	bpl.n	8009994 <__pow5mult+0x84>
 800997e:	4639      	mov	r1, r7
 8009980:	4622      	mov	r2, r4
 8009982:	4630      	mov	r0, r6
 8009984:	f7ff ff1c 	bl	80097c0 <__multiply>
 8009988:	4680      	mov	r8, r0
 800998a:	4639      	mov	r1, r7
 800998c:	4630      	mov	r0, r6
 800998e:	f7ff fe01 	bl	8009594 <_Bfree>
 8009992:	4647      	mov	r7, r8
 8009994:	106d      	asrs	r5, r5, #1
 8009996:	d00b      	beq.n	80099b0 <__pow5mult+0xa0>
 8009998:	6820      	ldr	r0, [r4, #0]
 800999a:	b938      	cbnz	r0, 80099ac <__pow5mult+0x9c>
 800999c:	4622      	mov	r2, r4
 800999e:	4621      	mov	r1, r4
 80099a0:	4630      	mov	r0, r6
 80099a2:	f7ff ff0d 	bl	80097c0 <__multiply>
 80099a6:	6020      	str	r0, [r4, #0]
 80099a8:	f8c0 9000 	str.w	r9, [r0]
 80099ac:	4604      	mov	r4, r0
 80099ae:	e7e4      	b.n	800997a <__pow5mult+0x6a>
 80099b0:	4638      	mov	r0, r7
 80099b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099b6:	bf00      	nop
 80099b8:	0800b5d8 	.word	0x0800b5d8
 80099bc:	0800b1e8 	.word	0x0800b1e8
 80099c0:	0800b48c 	.word	0x0800b48c

080099c4 <__lshift>:
 80099c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099c8:	460c      	mov	r4, r1
 80099ca:	4607      	mov	r7, r0
 80099cc:	4691      	mov	r9, r2
 80099ce:	6923      	ldr	r3, [r4, #16]
 80099d0:	6849      	ldr	r1, [r1, #4]
 80099d2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80099d6:	68a3      	ldr	r3, [r4, #8]
 80099d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80099dc:	f108 0601 	add.w	r6, r8, #1
 80099e0:	42b3      	cmp	r3, r6
 80099e2:	db0b      	blt.n	80099fc <__lshift+0x38>
 80099e4:	4638      	mov	r0, r7
 80099e6:	f7ff fd95 	bl	8009514 <_Balloc>
 80099ea:	4605      	mov	r5, r0
 80099ec:	b948      	cbnz	r0, 8009a02 <__lshift+0x3e>
 80099ee:	4602      	mov	r2, r0
 80099f0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80099f4:	4b29      	ldr	r3, [pc, #164]	; (8009a9c <__lshift+0xd8>)
 80099f6:	482a      	ldr	r0, [pc, #168]	; (8009aa0 <__lshift+0xdc>)
 80099f8:	f7fe fb50 	bl	800809c <__assert_func>
 80099fc:	3101      	adds	r1, #1
 80099fe:	005b      	lsls	r3, r3, #1
 8009a00:	e7ee      	b.n	80099e0 <__lshift+0x1c>
 8009a02:	2300      	movs	r3, #0
 8009a04:	f100 0114 	add.w	r1, r0, #20
 8009a08:	f100 0210 	add.w	r2, r0, #16
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	4553      	cmp	r3, sl
 8009a10:	db37      	blt.n	8009a82 <__lshift+0xbe>
 8009a12:	6920      	ldr	r0, [r4, #16]
 8009a14:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009a18:	f104 0314 	add.w	r3, r4, #20
 8009a1c:	f019 091f 	ands.w	r9, r9, #31
 8009a20:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009a24:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009a28:	d02f      	beq.n	8009a8a <__lshift+0xc6>
 8009a2a:	468a      	mov	sl, r1
 8009a2c:	f04f 0c00 	mov.w	ip, #0
 8009a30:	f1c9 0e20 	rsb	lr, r9, #32
 8009a34:	681a      	ldr	r2, [r3, #0]
 8009a36:	fa02 f209 	lsl.w	r2, r2, r9
 8009a3a:	ea42 020c 	orr.w	r2, r2, ip
 8009a3e:	f84a 2b04 	str.w	r2, [sl], #4
 8009a42:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a46:	4298      	cmp	r0, r3
 8009a48:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009a4c:	d8f2      	bhi.n	8009a34 <__lshift+0x70>
 8009a4e:	1b03      	subs	r3, r0, r4
 8009a50:	3b15      	subs	r3, #21
 8009a52:	f023 0303 	bic.w	r3, r3, #3
 8009a56:	3304      	adds	r3, #4
 8009a58:	f104 0215 	add.w	r2, r4, #21
 8009a5c:	4290      	cmp	r0, r2
 8009a5e:	bf38      	it	cc
 8009a60:	2304      	movcc	r3, #4
 8009a62:	f841 c003 	str.w	ip, [r1, r3]
 8009a66:	f1bc 0f00 	cmp.w	ip, #0
 8009a6a:	d001      	beq.n	8009a70 <__lshift+0xac>
 8009a6c:	f108 0602 	add.w	r6, r8, #2
 8009a70:	3e01      	subs	r6, #1
 8009a72:	4638      	mov	r0, r7
 8009a74:	4621      	mov	r1, r4
 8009a76:	612e      	str	r6, [r5, #16]
 8009a78:	f7ff fd8c 	bl	8009594 <_Bfree>
 8009a7c:	4628      	mov	r0, r5
 8009a7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a82:	f842 0f04 	str.w	r0, [r2, #4]!
 8009a86:	3301      	adds	r3, #1
 8009a88:	e7c1      	b.n	8009a0e <__lshift+0x4a>
 8009a8a:	3904      	subs	r1, #4
 8009a8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a90:	4298      	cmp	r0, r3
 8009a92:	f841 2f04 	str.w	r2, [r1, #4]!
 8009a96:	d8f9      	bhi.n	8009a8c <__lshift+0xc8>
 8009a98:	e7ea      	b.n	8009a70 <__lshift+0xac>
 8009a9a:	bf00      	nop
 8009a9c:	0800b401 	.word	0x0800b401
 8009aa0:	0800b48c 	.word	0x0800b48c

08009aa4 <__mcmp>:
 8009aa4:	4603      	mov	r3, r0
 8009aa6:	690a      	ldr	r2, [r1, #16]
 8009aa8:	6900      	ldr	r0, [r0, #16]
 8009aaa:	b530      	push	{r4, r5, lr}
 8009aac:	1a80      	subs	r0, r0, r2
 8009aae:	d10d      	bne.n	8009acc <__mcmp+0x28>
 8009ab0:	3314      	adds	r3, #20
 8009ab2:	3114      	adds	r1, #20
 8009ab4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009ab8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009abc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009ac0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009ac4:	4295      	cmp	r5, r2
 8009ac6:	d002      	beq.n	8009ace <__mcmp+0x2a>
 8009ac8:	d304      	bcc.n	8009ad4 <__mcmp+0x30>
 8009aca:	2001      	movs	r0, #1
 8009acc:	bd30      	pop	{r4, r5, pc}
 8009ace:	42a3      	cmp	r3, r4
 8009ad0:	d3f4      	bcc.n	8009abc <__mcmp+0x18>
 8009ad2:	e7fb      	b.n	8009acc <__mcmp+0x28>
 8009ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ad8:	e7f8      	b.n	8009acc <__mcmp+0x28>
	...

08009adc <__mdiff>:
 8009adc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ae0:	460d      	mov	r5, r1
 8009ae2:	4607      	mov	r7, r0
 8009ae4:	4611      	mov	r1, r2
 8009ae6:	4628      	mov	r0, r5
 8009ae8:	4614      	mov	r4, r2
 8009aea:	f7ff ffdb 	bl	8009aa4 <__mcmp>
 8009aee:	1e06      	subs	r6, r0, #0
 8009af0:	d111      	bne.n	8009b16 <__mdiff+0x3a>
 8009af2:	4631      	mov	r1, r6
 8009af4:	4638      	mov	r0, r7
 8009af6:	f7ff fd0d 	bl	8009514 <_Balloc>
 8009afa:	4602      	mov	r2, r0
 8009afc:	b928      	cbnz	r0, 8009b0a <__mdiff+0x2e>
 8009afe:	f240 2132 	movw	r1, #562	; 0x232
 8009b02:	4b3a      	ldr	r3, [pc, #232]	; (8009bec <__mdiff+0x110>)
 8009b04:	483a      	ldr	r0, [pc, #232]	; (8009bf0 <__mdiff+0x114>)
 8009b06:	f7fe fac9 	bl	800809c <__assert_func>
 8009b0a:	2301      	movs	r3, #1
 8009b0c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009b10:	4610      	mov	r0, r2
 8009b12:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b16:	bfa4      	itt	ge
 8009b18:	4623      	movge	r3, r4
 8009b1a:	462c      	movge	r4, r5
 8009b1c:	4638      	mov	r0, r7
 8009b1e:	6861      	ldr	r1, [r4, #4]
 8009b20:	bfa6      	itte	ge
 8009b22:	461d      	movge	r5, r3
 8009b24:	2600      	movge	r6, #0
 8009b26:	2601      	movlt	r6, #1
 8009b28:	f7ff fcf4 	bl	8009514 <_Balloc>
 8009b2c:	4602      	mov	r2, r0
 8009b2e:	b918      	cbnz	r0, 8009b38 <__mdiff+0x5c>
 8009b30:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009b34:	4b2d      	ldr	r3, [pc, #180]	; (8009bec <__mdiff+0x110>)
 8009b36:	e7e5      	b.n	8009b04 <__mdiff+0x28>
 8009b38:	f102 0814 	add.w	r8, r2, #20
 8009b3c:	46c2      	mov	sl, r8
 8009b3e:	f04f 0c00 	mov.w	ip, #0
 8009b42:	6927      	ldr	r7, [r4, #16]
 8009b44:	60c6      	str	r6, [r0, #12]
 8009b46:	692e      	ldr	r6, [r5, #16]
 8009b48:	f104 0014 	add.w	r0, r4, #20
 8009b4c:	f105 0914 	add.w	r9, r5, #20
 8009b50:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8009b54:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009b58:	3410      	adds	r4, #16
 8009b5a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8009b5e:	f859 3b04 	ldr.w	r3, [r9], #4
 8009b62:	fa1f f18b 	uxth.w	r1, fp
 8009b66:	448c      	add	ip, r1
 8009b68:	b299      	uxth	r1, r3
 8009b6a:	0c1b      	lsrs	r3, r3, #16
 8009b6c:	ebac 0101 	sub.w	r1, ip, r1
 8009b70:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009b74:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009b78:	b289      	uxth	r1, r1
 8009b7a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8009b7e:	454e      	cmp	r6, r9
 8009b80:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009b84:	f84a 3b04 	str.w	r3, [sl], #4
 8009b88:	d8e7      	bhi.n	8009b5a <__mdiff+0x7e>
 8009b8a:	1b73      	subs	r3, r6, r5
 8009b8c:	3b15      	subs	r3, #21
 8009b8e:	f023 0303 	bic.w	r3, r3, #3
 8009b92:	3515      	adds	r5, #21
 8009b94:	3304      	adds	r3, #4
 8009b96:	42ae      	cmp	r6, r5
 8009b98:	bf38      	it	cc
 8009b9a:	2304      	movcc	r3, #4
 8009b9c:	4418      	add	r0, r3
 8009b9e:	4443      	add	r3, r8
 8009ba0:	461e      	mov	r6, r3
 8009ba2:	4605      	mov	r5, r0
 8009ba4:	4575      	cmp	r5, lr
 8009ba6:	d30e      	bcc.n	8009bc6 <__mdiff+0xea>
 8009ba8:	f10e 0103 	add.w	r1, lr, #3
 8009bac:	1a09      	subs	r1, r1, r0
 8009bae:	f021 0103 	bic.w	r1, r1, #3
 8009bb2:	3803      	subs	r0, #3
 8009bb4:	4586      	cmp	lr, r0
 8009bb6:	bf38      	it	cc
 8009bb8:	2100      	movcc	r1, #0
 8009bba:	4419      	add	r1, r3
 8009bbc:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8009bc0:	b18b      	cbz	r3, 8009be6 <__mdiff+0x10a>
 8009bc2:	6117      	str	r7, [r2, #16]
 8009bc4:	e7a4      	b.n	8009b10 <__mdiff+0x34>
 8009bc6:	f855 8b04 	ldr.w	r8, [r5], #4
 8009bca:	fa1f f188 	uxth.w	r1, r8
 8009bce:	4461      	add	r1, ip
 8009bd0:	140c      	asrs	r4, r1, #16
 8009bd2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009bd6:	b289      	uxth	r1, r1
 8009bd8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009bdc:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8009be0:	f846 1b04 	str.w	r1, [r6], #4
 8009be4:	e7de      	b.n	8009ba4 <__mdiff+0xc8>
 8009be6:	3f01      	subs	r7, #1
 8009be8:	e7e8      	b.n	8009bbc <__mdiff+0xe0>
 8009bea:	bf00      	nop
 8009bec:	0800b401 	.word	0x0800b401
 8009bf0:	0800b48c 	.word	0x0800b48c

08009bf4 <__ulp>:
 8009bf4:	4b11      	ldr	r3, [pc, #68]	; (8009c3c <__ulp+0x48>)
 8009bf6:	400b      	ands	r3, r1
 8009bf8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	dd02      	ble.n	8009c06 <__ulp+0x12>
 8009c00:	2000      	movs	r0, #0
 8009c02:	4619      	mov	r1, r3
 8009c04:	4770      	bx	lr
 8009c06:	425b      	negs	r3, r3
 8009c08:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8009c0c:	f04f 0000 	mov.w	r0, #0
 8009c10:	f04f 0100 	mov.w	r1, #0
 8009c14:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009c18:	da04      	bge.n	8009c24 <__ulp+0x30>
 8009c1a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009c1e:	fa43 f102 	asr.w	r1, r3, r2
 8009c22:	4770      	bx	lr
 8009c24:	f1a2 0314 	sub.w	r3, r2, #20
 8009c28:	2b1e      	cmp	r3, #30
 8009c2a:	bfd6      	itet	le
 8009c2c:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8009c30:	2301      	movgt	r3, #1
 8009c32:	fa22 f303 	lsrle.w	r3, r2, r3
 8009c36:	4618      	mov	r0, r3
 8009c38:	4770      	bx	lr
 8009c3a:	bf00      	nop
 8009c3c:	7ff00000 	.word	0x7ff00000

08009c40 <__b2d>:
 8009c40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c44:	6907      	ldr	r7, [r0, #16]
 8009c46:	f100 0914 	add.w	r9, r0, #20
 8009c4a:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8009c4e:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8009c52:	f1a7 0804 	sub.w	r8, r7, #4
 8009c56:	4630      	mov	r0, r6
 8009c58:	f7ff fd4e 	bl	80096f8 <__hi0bits>
 8009c5c:	f1c0 0320 	rsb	r3, r0, #32
 8009c60:	280a      	cmp	r0, #10
 8009c62:	600b      	str	r3, [r1, #0]
 8009c64:	491f      	ldr	r1, [pc, #124]	; (8009ce4 <__b2d+0xa4>)
 8009c66:	dc17      	bgt.n	8009c98 <__b2d+0x58>
 8009c68:	45c1      	cmp	r9, r8
 8009c6a:	bf28      	it	cs
 8009c6c:	2200      	movcs	r2, #0
 8009c6e:	f1c0 0c0b 	rsb	ip, r0, #11
 8009c72:	fa26 f30c 	lsr.w	r3, r6, ip
 8009c76:	bf38      	it	cc
 8009c78:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8009c7c:	ea43 0501 	orr.w	r5, r3, r1
 8009c80:	f100 0315 	add.w	r3, r0, #21
 8009c84:	fa06 f303 	lsl.w	r3, r6, r3
 8009c88:	fa22 f20c 	lsr.w	r2, r2, ip
 8009c8c:	ea43 0402 	orr.w	r4, r3, r2
 8009c90:	4620      	mov	r0, r4
 8009c92:	4629      	mov	r1, r5
 8009c94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c98:	45c1      	cmp	r9, r8
 8009c9a:	bf2e      	itee	cs
 8009c9c:	2200      	movcs	r2, #0
 8009c9e:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8009ca2:	f1a7 0808 	subcc.w	r8, r7, #8
 8009ca6:	f1b0 030b 	subs.w	r3, r0, #11
 8009caa:	d016      	beq.n	8009cda <__b2d+0x9a>
 8009cac:	f1c3 0720 	rsb	r7, r3, #32
 8009cb0:	fa22 f107 	lsr.w	r1, r2, r7
 8009cb4:	45c8      	cmp	r8, r9
 8009cb6:	fa06 f603 	lsl.w	r6, r6, r3
 8009cba:	ea46 0601 	orr.w	r6, r6, r1
 8009cbe:	bf94      	ite	ls
 8009cc0:	2100      	movls	r1, #0
 8009cc2:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8009cc6:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8009cca:	fa02 f003 	lsl.w	r0, r2, r3
 8009cce:	40f9      	lsrs	r1, r7
 8009cd0:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009cd4:	ea40 0401 	orr.w	r4, r0, r1
 8009cd8:	e7da      	b.n	8009c90 <__b2d+0x50>
 8009cda:	4614      	mov	r4, r2
 8009cdc:	ea46 0501 	orr.w	r5, r6, r1
 8009ce0:	e7d6      	b.n	8009c90 <__b2d+0x50>
 8009ce2:	bf00      	nop
 8009ce4:	3ff00000 	.word	0x3ff00000

08009ce8 <__d2b>:
 8009ce8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009cec:	2101      	movs	r1, #1
 8009cee:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8009cf2:	4690      	mov	r8, r2
 8009cf4:	461d      	mov	r5, r3
 8009cf6:	f7ff fc0d 	bl	8009514 <_Balloc>
 8009cfa:	4604      	mov	r4, r0
 8009cfc:	b930      	cbnz	r0, 8009d0c <__d2b+0x24>
 8009cfe:	4602      	mov	r2, r0
 8009d00:	f240 310a 	movw	r1, #778	; 0x30a
 8009d04:	4b24      	ldr	r3, [pc, #144]	; (8009d98 <__d2b+0xb0>)
 8009d06:	4825      	ldr	r0, [pc, #148]	; (8009d9c <__d2b+0xb4>)
 8009d08:	f7fe f9c8 	bl	800809c <__assert_func>
 8009d0c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8009d10:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8009d14:	bb2d      	cbnz	r5, 8009d62 <__d2b+0x7a>
 8009d16:	9301      	str	r3, [sp, #4]
 8009d18:	f1b8 0300 	subs.w	r3, r8, #0
 8009d1c:	d026      	beq.n	8009d6c <__d2b+0x84>
 8009d1e:	4668      	mov	r0, sp
 8009d20:	9300      	str	r3, [sp, #0]
 8009d22:	f7ff fd09 	bl	8009738 <__lo0bits>
 8009d26:	9900      	ldr	r1, [sp, #0]
 8009d28:	b1f0      	cbz	r0, 8009d68 <__d2b+0x80>
 8009d2a:	9a01      	ldr	r2, [sp, #4]
 8009d2c:	f1c0 0320 	rsb	r3, r0, #32
 8009d30:	fa02 f303 	lsl.w	r3, r2, r3
 8009d34:	430b      	orrs	r3, r1
 8009d36:	40c2      	lsrs	r2, r0
 8009d38:	6163      	str	r3, [r4, #20]
 8009d3a:	9201      	str	r2, [sp, #4]
 8009d3c:	9b01      	ldr	r3, [sp, #4]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	bf14      	ite	ne
 8009d42:	2102      	movne	r1, #2
 8009d44:	2101      	moveq	r1, #1
 8009d46:	61a3      	str	r3, [r4, #24]
 8009d48:	6121      	str	r1, [r4, #16]
 8009d4a:	b1c5      	cbz	r5, 8009d7e <__d2b+0x96>
 8009d4c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009d50:	4405      	add	r5, r0
 8009d52:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009d56:	603d      	str	r5, [r7, #0]
 8009d58:	6030      	str	r0, [r6, #0]
 8009d5a:	4620      	mov	r0, r4
 8009d5c:	b002      	add	sp, #8
 8009d5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009d66:	e7d6      	b.n	8009d16 <__d2b+0x2e>
 8009d68:	6161      	str	r1, [r4, #20]
 8009d6a:	e7e7      	b.n	8009d3c <__d2b+0x54>
 8009d6c:	a801      	add	r0, sp, #4
 8009d6e:	f7ff fce3 	bl	8009738 <__lo0bits>
 8009d72:	2101      	movs	r1, #1
 8009d74:	9b01      	ldr	r3, [sp, #4]
 8009d76:	6121      	str	r1, [r4, #16]
 8009d78:	6163      	str	r3, [r4, #20]
 8009d7a:	3020      	adds	r0, #32
 8009d7c:	e7e5      	b.n	8009d4a <__d2b+0x62>
 8009d7e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8009d82:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009d86:	6038      	str	r0, [r7, #0]
 8009d88:	6918      	ldr	r0, [r3, #16]
 8009d8a:	f7ff fcb5 	bl	80096f8 <__hi0bits>
 8009d8e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8009d92:	6031      	str	r1, [r6, #0]
 8009d94:	e7e1      	b.n	8009d5a <__d2b+0x72>
 8009d96:	bf00      	nop
 8009d98:	0800b401 	.word	0x0800b401
 8009d9c:	0800b48c 	.word	0x0800b48c

08009da0 <__ratio>:
 8009da0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009da4:	4688      	mov	r8, r1
 8009da6:	4669      	mov	r1, sp
 8009da8:	4681      	mov	r9, r0
 8009daa:	f7ff ff49 	bl	8009c40 <__b2d>
 8009dae:	460f      	mov	r7, r1
 8009db0:	4604      	mov	r4, r0
 8009db2:	460d      	mov	r5, r1
 8009db4:	4640      	mov	r0, r8
 8009db6:	a901      	add	r1, sp, #4
 8009db8:	f7ff ff42 	bl	8009c40 <__b2d>
 8009dbc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009dc0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009dc4:	468b      	mov	fp, r1
 8009dc6:	eba3 0c02 	sub.w	ip, r3, r2
 8009dca:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009dce:	1a9b      	subs	r3, r3, r2
 8009dd0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	bfd5      	itete	le
 8009dd8:	460a      	movle	r2, r1
 8009dda:	462a      	movgt	r2, r5
 8009ddc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009de0:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009de4:	bfd8      	it	le
 8009de6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009dea:	465b      	mov	r3, fp
 8009dec:	4602      	mov	r2, r0
 8009dee:	4639      	mov	r1, r7
 8009df0:	4620      	mov	r0, r4
 8009df2:	f7f6 fca5 	bl	8000740 <__aeabi_ddiv>
 8009df6:	b003      	add	sp, #12
 8009df8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009dfc <__copybits>:
 8009dfc:	3901      	subs	r1, #1
 8009dfe:	b570      	push	{r4, r5, r6, lr}
 8009e00:	1149      	asrs	r1, r1, #5
 8009e02:	6914      	ldr	r4, [r2, #16]
 8009e04:	3101      	adds	r1, #1
 8009e06:	f102 0314 	add.w	r3, r2, #20
 8009e0a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009e0e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009e12:	1f05      	subs	r5, r0, #4
 8009e14:	42a3      	cmp	r3, r4
 8009e16:	d30c      	bcc.n	8009e32 <__copybits+0x36>
 8009e18:	1aa3      	subs	r3, r4, r2
 8009e1a:	3b11      	subs	r3, #17
 8009e1c:	f023 0303 	bic.w	r3, r3, #3
 8009e20:	3211      	adds	r2, #17
 8009e22:	42a2      	cmp	r2, r4
 8009e24:	bf88      	it	hi
 8009e26:	2300      	movhi	r3, #0
 8009e28:	4418      	add	r0, r3
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	4288      	cmp	r0, r1
 8009e2e:	d305      	bcc.n	8009e3c <__copybits+0x40>
 8009e30:	bd70      	pop	{r4, r5, r6, pc}
 8009e32:	f853 6b04 	ldr.w	r6, [r3], #4
 8009e36:	f845 6f04 	str.w	r6, [r5, #4]!
 8009e3a:	e7eb      	b.n	8009e14 <__copybits+0x18>
 8009e3c:	f840 3b04 	str.w	r3, [r0], #4
 8009e40:	e7f4      	b.n	8009e2c <__copybits+0x30>

08009e42 <__any_on>:
 8009e42:	f100 0214 	add.w	r2, r0, #20
 8009e46:	6900      	ldr	r0, [r0, #16]
 8009e48:	114b      	asrs	r3, r1, #5
 8009e4a:	4298      	cmp	r0, r3
 8009e4c:	b510      	push	{r4, lr}
 8009e4e:	db11      	blt.n	8009e74 <__any_on+0x32>
 8009e50:	dd0a      	ble.n	8009e68 <__any_on+0x26>
 8009e52:	f011 011f 	ands.w	r1, r1, #31
 8009e56:	d007      	beq.n	8009e68 <__any_on+0x26>
 8009e58:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009e5c:	fa24 f001 	lsr.w	r0, r4, r1
 8009e60:	fa00 f101 	lsl.w	r1, r0, r1
 8009e64:	428c      	cmp	r4, r1
 8009e66:	d10b      	bne.n	8009e80 <__any_on+0x3e>
 8009e68:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009e6c:	4293      	cmp	r3, r2
 8009e6e:	d803      	bhi.n	8009e78 <__any_on+0x36>
 8009e70:	2000      	movs	r0, #0
 8009e72:	bd10      	pop	{r4, pc}
 8009e74:	4603      	mov	r3, r0
 8009e76:	e7f7      	b.n	8009e68 <__any_on+0x26>
 8009e78:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009e7c:	2900      	cmp	r1, #0
 8009e7e:	d0f5      	beq.n	8009e6c <__any_on+0x2a>
 8009e80:	2001      	movs	r0, #1
 8009e82:	e7f6      	b.n	8009e72 <__any_on+0x30>

08009e84 <_calloc_r>:
 8009e84:	b570      	push	{r4, r5, r6, lr}
 8009e86:	fba1 5402 	umull	r5, r4, r1, r2
 8009e8a:	b934      	cbnz	r4, 8009e9a <_calloc_r+0x16>
 8009e8c:	4629      	mov	r1, r5
 8009e8e:	f000 f875 	bl	8009f7c <_malloc_r>
 8009e92:	4606      	mov	r6, r0
 8009e94:	b928      	cbnz	r0, 8009ea2 <_calloc_r+0x1e>
 8009e96:	4630      	mov	r0, r6
 8009e98:	bd70      	pop	{r4, r5, r6, pc}
 8009e9a:	220c      	movs	r2, #12
 8009e9c:	2600      	movs	r6, #0
 8009e9e:	6002      	str	r2, [r0, #0]
 8009ea0:	e7f9      	b.n	8009e96 <_calloc_r+0x12>
 8009ea2:	462a      	mov	r2, r5
 8009ea4:	4621      	mov	r1, r4
 8009ea6:	f7fc fd61 	bl	800696c <memset>
 8009eaa:	e7f4      	b.n	8009e96 <_calloc_r+0x12>

08009eac <_free_r>:
 8009eac:	b538      	push	{r3, r4, r5, lr}
 8009eae:	4605      	mov	r5, r0
 8009eb0:	2900      	cmp	r1, #0
 8009eb2:	d040      	beq.n	8009f36 <_free_r+0x8a>
 8009eb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009eb8:	1f0c      	subs	r4, r1, #4
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	bfb8      	it	lt
 8009ebe:	18e4      	addlt	r4, r4, r3
 8009ec0:	f000 feba 	bl	800ac38 <__malloc_lock>
 8009ec4:	4a1c      	ldr	r2, [pc, #112]	; (8009f38 <_free_r+0x8c>)
 8009ec6:	6813      	ldr	r3, [r2, #0]
 8009ec8:	b933      	cbnz	r3, 8009ed8 <_free_r+0x2c>
 8009eca:	6063      	str	r3, [r4, #4]
 8009ecc:	6014      	str	r4, [r2, #0]
 8009ece:	4628      	mov	r0, r5
 8009ed0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ed4:	f000 beb6 	b.w	800ac44 <__malloc_unlock>
 8009ed8:	42a3      	cmp	r3, r4
 8009eda:	d908      	bls.n	8009eee <_free_r+0x42>
 8009edc:	6820      	ldr	r0, [r4, #0]
 8009ede:	1821      	adds	r1, r4, r0
 8009ee0:	428b      	cmp	r3, r1
 8009ee2:	bf01      	itttt	eq
 8009ee4:	6819      	ldreq	r1, [r3, #0]
 8009ee6:	685b      	ldreq	r3, [r3, #4]
 8009ee8:	1809      	addeq	r1, r1, r0
 8009eea:	6021      	streq	r1, [r4, #0]
 8009eec:	e7ed      	b.n	8009eca <_free_r+0x1e>
 8009eee:	461a      	mov	r2, r3
 8009ef0:	685b      	ldr	r3, [r3, #4]
 8009ef2:	b10b      	cbz	r3, 8009ef8 <_free_r+0x4c>
 8009ef4:	42a3      	cmp	r3, r4
 8009ef6:	d9fa      	bls.n	8009eee <_free_r+0x42>
 8009ef8:	6811      	ldr	r1, [r2, #0]
 8009efa:	1850      	adds	r0, r2, r1
 8009efc:	42a0      	cmp	r0, r4
 8009efe:	d10b      	bne.n	8009f18 <_free_r+0x6c>
 8009f00:	6820      	ldr	r0, [r4, #0]
 8009f02:	4401      	add	r1, r0
 8009f04:	1850      	adds	r0, r2, r1
 8009f06:	4283      	cmp	r3, r0
 8009f08:	6011      	str	r1, [r2, #0]
 8009f0a:	d1e0      	bne.n	8009ece <_free_r+0x22>
 8009f0c:	6818      	ldr	r0, [r3, #0]
 8009f0e:	685b      	ldr	r3, [r3, #4]
 8009f10:	4401      	add	r1, r0
 8009f12:	6011      	str	r1, [r2, #0]
 8009f14:	6053      	str	r3, [r2, #4]
 8009f16:	e7da      	b.n	8009ece <_free_r+0x22>
 8009f18:	d902      	bls.n	8009f20 <_free_r+0x74>
 8009f1a:	230c      	movs	r3, #12
 8009f1c:	602b      	str	r3, [r5, #0]
 8009f1e:	e7d6      	b.n	8009ece <_free_r+0x22>
 8009f20:	6820      	ldr	r0, [r4, #0]
 8009f22:	1821      	adds	r1, r4, r0
 8009f24:	428b      	cmp	r3, r1
 8009f26:	bf01      	itttt	eq
 8009f28:	6819      	ldreq	r1, [r3, #0]
 8009f2a:	685b      	ldreq	r3, [r3, #4]
 8009f2c:	1809      	addeq	r1, r1, r0
 8009f2e:	6021      	streq	r1, [r4, #0]
 8009f30:	6063      	str	r3, [r4, #4]
 8009f32:	6054      	str	r4, [r2, #4]
 8009f34:	e7cb      	b.n	8009ece <_free_r+0x22>
 8009f36:	bd38      	pop	{r3, r4, r5, pc}
 8009f38:	20002564 	.word	0x20002564

08009f3c <sbrk_aligned>:
 8009f3c:	b570      	push	{r4, r5, r6, lr}
 8009f3e:	4e0e      	ldr	r6, [pc, #56]	; (8009f78 <sbrk_aligned+0x3c>)
 8009f40:	460c      	mov	r4, r1
 8009f42:	6831      	ldr	r1, [r6, #0]
 8009f44:	4605      	mov	r5, r0
 8009f46:	b911      	cbnz	r1, 8009f4e <sbrk_aligned+0x12>
 8009f48:	f000 fb46 	bl	800a5d8 <_sbrk_r>
 8009f4c:	6030      	str	r0, [r6, #0]
 8009f4e:	4621      	mov	r1, r4
 8009f50:	4628      	mov	r0, r5
 8009f52:	f000 fb41 	bl	800a5d8 <_sbrk_r>
 8009f56:	1c43      	adds	r3, r0, #1
 8009f58:	d00a      	beq.n	8009f70 <sbrk_aligned+0x34>
 8009f5a:	1cc4      	adds	r4, r0, #3
 8009f5c:	f024 0403 	bic.w	r4, r4, #3
 8009f60:	42a0      	cmp	r0, r4
 8009f62:	d007      	beq.n	8009f74 <sbrk_aligned+0x38>
 8009f64:	1a21      	subs	r1, r4, r0
 8009f66:	4628      	mov	r0, r5
 8009f68:	f000 fb36 	bl	800a5d8 <_sbrk_r>
 8009f6c:	3001      	adds	r0, #1
 8009f6e:	d101      	bne.n	8009f74 <sbrk_aligned+0x38>
 8009f70:	f04f 34ff 	mov.w	r4, #4294967295
 8009f74:	4620      	mov	r0, r4
 8009f76:	bd70      	pop	{r4, r5, r6, pc}
 8009f78:	20002568 	.word	0x20002568

08009f7c <_malloc_r>:
 8009f7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f80:	1ccd      	adds	r5, r1, #3
 8009f82:	f025 0503 	bic.w	r5, r5, #3
 8009f86:	3508      	adds	r5, #8
 8009f88:	2d0c      	cmp	r5, #12
 8009f8a:	bf38      	it	cc
 8009f8c:	250c      	movcc	r5, #12
 8009f8e:	2d00      	cmp	r5, #0
 8009f90:	4607      	mov	r7, r0
 8009f92:	db01      	blt.n	8009f98 <_malloc_r+0x1c>
 8009f94:	42a9      	cmp	r1, r5
 8009f96:	d905      	bls.n	8009fa4 <_malloc_r+0x28>
 8009f98:	230c      	movs	r3, #12
 8009f9a:	2600      	movs	r6, #0
 8009f9c:	603b      	str	r3, [r7, #0]
 8009f9e:	4630      	mov	r0, r6
 8009fa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fa4:	4e2e      	ldr	r6, [pc, #184]	; (800a060 <_malloc_r+0xe4>)
 8009fa6:	f000 fe47 	bl	800ac38 <__malloc_lock>
 8009faa:	6833      	ldr	r3, [r6, #0]
 8009fac:	461c      	mov	r4, r3
 8009fae:	bb34      	cbnz	r4, 8009ffe <_malloc_r+0x82>
 8009fb0:	4629      	mov	r1, r5
 8009fb2:	4638      	mov	r0, r7
 8009fb4:	f7ff ffc2 	bl	8009f3c <sbrk_aligned>
 8009fb8:	1c43      	adds	r3, r0, #1
 8009fba:	4604      	mov	r4, r0
 8009fbc:	d14d      	bne.n	800a05a <_malloc_r+0xde>
 8009fbe:	6834      	ldr	r4, [r6, #0]
 8009fc0:	4626      	mov	r6, r4
 8009fc2:	2e00      	cmp	r6, #0
 8009fc4:	d140      	bne.n	800a048 <_malloc_r+0xcc>
 8009fc6:	6823      	ldr	r3, [r4, #0]
 8009fc8:	4631      	mov	r1, r6
 8009fca:	4638      	mov	r0, r7
 8009fcc:	eb04 0803 	add.w	r8, r4, r3
 8009fd0:	f000 fb02 	bl	800a5d8 <_sbrk_r>
 8009fd4:	4580      	cmp	r8, r0
 8009fd6:	d13a      	bne.n	800a04e <_malloc_r+0xd2>
 8009fd8:	6821      	ldr	r1, [r4, #0]
 8009fda:	3503      	adds	r5, #3
 8009fdc:	1a6d      	subs	r5, r5, r1
 8009fde:	f025 0503 	bic.w	r5, r5, #3
 8009fe2:	3508      	adds	r5, #8
 8009fe4:	2d0c      	cmp	r5, #12
 8009fe6:	bf38      	it	cc
 8009fe8:	250c      	movcc	r5, #12
 8009fea:	4638      	mov	r0, r7
 8009fec:	4629      	mov	r1, r5
 8009fee:	f7ff ffa5 	bl	8009f3c <sbrk_aligned>
 8009ff2:	3001      	adds	r0, #1
 8009ff4:	d02b      	beq.n	800a04e <_malloc_r+0xd2>
 8009ff6:	6823      	ldr	r3, [r4, #0]
 8009ff8:	442b      	add	r3, r5
 8009ffa:	6023      	str	r3, [r4, #0]
 8009ffc:	e00e      	b.n	800a01c <_malloc_r+0xa0>
 8009ffe:	6822      	ldr	r2, [r4, #0]
 800a000:	1b52      	subs	r2, r2, r5
 800a002:	d41e      	bmi.n	800a042 <_malloc_r+0xc6>
 800a004:	2a0b      	cmp	r2, #11
 800a006:	d916      	bls.n	800a036 <_malloc_r+0xba>
 800a008:	1961      	adds	r1, r4, r5
 800a00a:	42a3      	cmp	r3, r4
 800a00c:	6025      	str	r5, [r4, #0]
 800a00e:	bf18      	it	ne
 800a010:	6059      	strne	r1, [r3, #4]
 800a012:	6863      	ldr	r3, [r4, #4]
 800a014:	bf08      	it	eq
 800a016:	6031      	streq	r1, [r6, #0]
 800a018:	5162      	str	r2, [r4, r5]
 800a01a:	604b      	str	r3, [r1, #4]
 800a01c:	4638      	mov	r0, r7
 800a01e:	f104 060b 	add.w	r6, r4, #11
 800a022:	f000 fe0f 	bl	800ac44 <__malloc_unlock>
 800a026:	f026 0607 	bic.w	r6, r6, #7
 800a02a:	1d23      	adds	r3, r4, #4
 800a02c:	1af2      	subs	r2, r6, r3
 800a02e:	d0b6      	beq.n	8009f9e <_malloc_r+0x22>
 800a030:	1b9b      	subs	r3, r3, r6
 800a032:	50a3      	str	r3, [r4, r2]
 800a034:	e7b3      	b.n	8009f9e <_malloc_r+0x22>
 800a036:	6862      	ldr	r2, [r4, #4]
 800a038:	42a3      	cmp	r3, r4
 800a03a:	bf0c      	ite	eq
 800a03c:	6032      	streq	r2, [r6, #0]
 800a03e:	605a      	strne	r2, [r3, #4]
 800a040:	e7ec      	b.n	800a01c <_malloc_r+0xa0>
 800a042:	4623      	mov	r3, r4
 800a044:	6864      	ldr	r4, [r4, #4]
 800a046:	e7b2      	b.n	8009fae <_malloc_r+0x32>
 800a048:	4634      	mov	r4, r6
 800a04a:	6876      	ldr	r6, [r6, #4]
 800a04c:	e7b9      	b.n	8009fc2 <_malloc_r+0x46>
 800a04e:	230c      	movs	r3, #12
 800a050:	4638      	mov	r0, r7
 800a052:	603b      	str	r3, [r7, #0]
 800a054:	f000 fdf6 	bl	800ac44 <__malloc_unlock>
 800a058:	e7a1      	b.n	8009f9e <_malloc_r+0x22>
 800a05a:	6025      	str	r5, [r4, #0]
 800a05c:	e7de      	b.n	800a01c <_malloc_r+0xa0>
 800a05e:	bf00      	nop
 800a060:	20002564 	.word	0x20002564

0800a064 <__ssputs_r>:
 800a064:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a068:	688e      	ldr	r6, [r1, #8]
 800a06a:	4682      	mov	sl, r0
 800a06c:	429e      	cmp	r6, r3
 800a06e:	460c      	mov	r4, r1
 800a070:	4690      	mov	r8, r2
 800a072:	461f      	mov	r7, r3
 800a074:	d838      	bhi.n	800a0e8 <__ssputs_r+0x84>
 800a076:	898a      	ldrh	r2, [r1, #12]
 800a078:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a07c:	d032      	beq.n	800a0e4 <__ssputs_r+0x80>
 800a07e:	6825      	ldr	r5, [r4, #0]
 800a080:	6909      	ldr	r1, [r1, #16]
 800a082:	3301      	adds	r3, #1
 800a084:	eba5 0901 	sub.w	r9, r5, r1
 800a088:	6965      	ldr	r5, [r4, #20]
 800a08a:	444b      	add	r3, r9
 800a08c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a090:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a094:	106d      	asrs	r5, r5, #1
 800a096:	429d      	cmp	r5, r3
 800a098:	bf38      	it	cc
 800a09a:	461d      	movcc	r5, r3
 800a09c:	0553      	lsls	r3, r2, #21
 800a09e:	d531      	bpl.n	800a104 <__ssputs_r+0xa0>
 800a0a0:	4629      	mov	r1, r5
 800a0a2:	f7ff ff6b 	bl	8009f7c <_malloc_r>
 800a0a6:	4606      	mov	r6, r0
 800a0a8:	b950      	cbnz	r0, 800a0c0 <__ssputs_r+0x5c>
 800a0aa:	230c      	movs	r3, #12
 800a0ac:	f04f 30ff 	mov.w	r0, #4294967295
 800a0b0:	f8ca 3000 	str.w	r3, [sl]
 800a0b4:	89a3      	ldrh	r3, [r4, #12]
 800a0b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a0ba:	81a3      	strh	r3, [r4, #12]
 800a0bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0c0:	464a      	mov	r2, r9
 800a0c2:	6921      	ldr	r1, [r4, #16]
 800a0c4:	f7fc fc44 	bl	8006950 <memcpy>
 800a0c8:	89a3      	ldrh	r3, [r4, #12]
 800a0ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a0ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0d2:	81a3      	strh	r3, [r4, #12]
 800a0d4:	6126      	str	r6, [r4, #16]
 800a0d6:	444e      	add	r6, r9
 800a0d8:	6026      	str	r6, [r4, #0]
 800a0da:	463e      	mov	r6, r7
 800a0dc:	6165      	str	r5, [r4, #20]
 800a0de:	eba5 0509 	sub.w	r5, r5, r9
 800a0e2:	60a5      	str	r5, [r4, #8]
 800a0e4:	42be      	cmp	r6, r7
 800a0e6:	d900      	bls.n	800a0ea <__ssputs_r+0x86>
 800a0e8:	463e      	mov	r6, r7
 800a0ea:	4632      	mov	r2, r6
 800a0ec:	4641      	mov	r1, r8
 800a0ee:	6820      	ldr	r0, [r4, #0]
 800a0f0:	f000 fd88 	bl	800ac04 <memmove>
 800a0f4:	68a3      	ldr	r3, [r4, #8]
 800a0f6:	2000      	movs	r0, #0
 800a0f8:	1b9b      	subs	r3, r3, r6
 800a0fa:	60a3      	str	r3, [r4, #8]
 800a0fc:	6823      	ldr	r3, [r4, #0]
 800a0fe:	4433      	add	r3, r6
 800a100:	6023      	str	r3, [r4, #0]
 800a102:	e7db      	b.n	800a0bc <__ssputs_r+0x58>
 800a104:	462a      	mov	r2, r5
 800a106:	f000 fda3 	bl	800ac50 <_realloc_r>
 800a10a:	4606      	mov	r6, r0
 800a10c:	2800      	cmp	r0, #0
 800a10e:	d1e1      	bne.n	800a0d4 <__ssputs_r+0x70>
 800a110:	4650      	mov	r0, sl
 800a112:	6921      	ldr	r1, [r4, #16]
 800a114:	f7ff feca 	bl	8009eac <_free_r>
 800a118:	e7c7      	b.n	800a0aa <__ssputs_r+0x46>
	...

0800a11c <_svfiprintf_r>:
 800a11c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a120:	4698      	mov	r8, r3
 800a122:	898b      	ldrh	r3, [r1, #12]
 800a124:	4607      	mov	r7, r0
 800a126:	061b      	lsls	r3, r3, #24
 800a128:	460d      	mov	r5, r1
 800a12a:	4614      	mov	r4, r2
 800a12c:	b09d      	sub	sp, #116	; 0x74
 800a12e:	d50e      	bpl.n	800a14e <_svfiprintf_r+0x32>
 800a130:	690b      	ldr	r3, [r1, #16]
 800a132:	b963      	cbnz	r3, 800a14e <_svfiprintf_r+0x32>
 800a134:	2140      	movs	r1, #64	; 0x40
 800a136:	f7ff ff21 	bl	8009f7c <_malloc_r>
 800a13a:	6028      	str	r0, [r5, #0]
 800a13c:	6128      	str	r0, [r5, #16]
 800a13e:	b920      	cbnz	r0, 800a14a <_svfiprintf_r+0x2e>
 800a140:	230c      	movs	r3, #12
 800a142:	603b      	str	r3, [r7, #0]
 800a144:	f04f 30ff 	mov.w	r0, #4294967295
 800a148:	e0d1      	b.n	800a2ee <_svfiprintf_r+0x1d2>
 800a14a:	2340      	movs	r3, #64	; 0x40
 800a14c:	616b      	str	r3, [r5, #20]
 800a14e:	2300      	movs	r3, #0
 800a150:	9309      	str	r3, [sp, #36]	; 0x24
 800a152:	2320      	movs	r3, #32
 800a154:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a158:	2330      	movs	r3, #48	; 0x30
 800a15a:	f04f 0901 	mov.w	r9, #1
 800a15e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a162:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a308 <_svfiprintf_r+0x1ec>
 800a166:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a16a:	4623      	mov	r3, r4
 800a16c:	469a      	mov	sl, r3
 800a16e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a172:	b10a      	cbz	r2, 800a178 <_svfiprintf_r+0x5c>
 800a174:	2a25      	cmp	r2, #37	; 0x25
 800a176:	d1f9      	bne.n	800a16c <_svfiprintf_r+0x50>
 800a178:	ebba 0b04 	subs.w	fp, sl, r4
 800a17c:	d00b      	beq.n	800a196 <_svfiprintf_r+0x7a>
 800a17e:	465b      	mov	r3, fp
 800a180:	4622      	mov	r2, r4
 800a182:	4629      	mov	r1, r5
 800a184:	4638      	mov	r0, r7
 800a186:	f7ff ff6d 	bl	800a064 <__ssputs_r>
 800a18a:	3001      	adds	r0, #1
 800a18c:	f000 80aa 	beq.w	800a2e4 <_svfiprintf_r+0x1c8>
 800a190:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a192:	445a      	add	r2, fp
 800a194:	9209      	str	r2, [sp, #36]	; 0x24
 800a196:	f89a 3000 	ldrb.w	r3, [sl]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	f000 80a2 	beq.w	800a2e4 <_svfiprintf_r+0x1c8>
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	f04f 32ff 	mov.w	r2, #4294967295
 800a1a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a1aa:	f10a 0a01 	add.w	sl, sl, #1
 800a1ae:	9304      	str	r3, [sp, #16]
 800a1b0:	9307      	str	r3, [sp, #28]
 800a1b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a1b6:	931a      	str	r3, [sp, #104]	; 0x68
 800a1b8:	4654      	mov	r4, sl
 800a1ba:	2205      	movs	r2, #5
 800a1bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1c0:	4851      	ldr	r0, [pc, #324]	; (800a308 <_svfiprintf_r+0x1ec>)
 800a1c2:	f7ff f999 	bl	80094f8 <memchr>
 800a1c6:	9a04      	ldr	r2, [sp, #16]
 800a1c8:	b9d8      	cbnz	r0, 800a202 <_svfiprintf_r+0xe6>
 800a1ca:	06d0      	lsls	r0, r2, #27
 800a1cc:	bf44      	itt	mi
 800a1ce:	2320      	movmi	r3, #32
 800a1d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a1d4:	0711      	lsls	r1, r2, #28
 800a1d6:	bf44      	itt	mi
 800a1d8:	232b      	movmi	r3, #43	; 0x2b
 800a1da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a1de:	f89a 3000 	ldrb.w	r3, [sl]
 800a1e2:	2b2a      	cmp	r3, #42	; 0x2a
 800a1e4:	d015      	beq.n	800a212 <_svfiprintf_r+0xf6>
 800a1e6:	4654      	mov	r4, sl
 800a1e8:	2000      	movs	r0, #0
 800a1ea:	f04f 0c0a 	mov.w	ip, #10
 800a1ee:	9a07      	ldr	r2, [sp, #28]
 800a1f0:	4621      	mov	r1, r4
 800a1f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a1f6:	3b30      	subs	r3, #48	; 0x30
 800a1f8:	2b09      	cmp	r3, #9
 800a1fa:	d94e      	bls.n	800a29a <_svfiprintf_r+0x17e>
 800a1fc:	b1b0      	cbz	r0, 800a22c <_svfiprintf_r+0x110>
 800a1fe:	9207      	str	r2, [sp, #28]
 800a200:	e014      	b.n	800a22c <_svfiprintf_r+0x110>
 800a202:	eba0 0308 	sub.w	r3, r0, r8
 800a206:	fa09 f303 	lsl.w	r3, r9, r3
 800a20a:	4313      	orrs	r3, r2
 800a20c:	46a2      	mov	sl, r4
 800a20e:	9304      	str	r3, [sp, #16]
 800a210:	e7d2      	b.n	800a1b8 <_svfiprintf_r+0x9c>
 800a212:	9b03      	ldr	r3, [sp, #12]
 800a214:	1d19      	adds	r1, r3, #4
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	9103      	str	r1, [sp, #12]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	bfbb      	ittet	lt
 800a21e:	425b      	neglt	r3, r3
 800a220:	f042 0202 	orrlt.w	r2, r2, #2
 800a224:	9307      	strge	r3, [sp, #28]
 800a226:	9307      	strlt	r3, [sp, #28]
 800a228:	bfb8      	it	lt
 800a22a:	9204      	strlt	r2, [sp, #16]
 800a22c:	7823      	ldrb	r3, [r4, #0]
 800a22e:	2b2e      	cmp	r3, #46	; 0x2e
 800a230:	d10c      	bne.n	800a24c <_svfiprintf_r+0x130>
 800a232:	7863      	ldrb	r3, [r4, #1]
 800a234:	2b2a      	cmp	r3, #42	; 0x2a
 800a236:	d135      	bne.n	800a2a4 <_svfiprintf_r+0x188>
 800a238:	9b03      	ldr	r3, [sp, #12]
 800a23a:	3402      	adds	r4, #2
 800a23c:	1d1a      	adds	r2, r3, #4
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	9203      	str	r2, [sp, #12]
 800a242:	2b00      	cmp	r3, #0
 800a244:	bfb8      	it	lt
 800a246:	f04f 33ff 	movlt.w	r3, #4294967295
 800a24a:	9305      	str	r3, [sp, #20]
 800a24c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800a30c <_svfiprintf_r+0x1f0>
 800a250:	2203      	movs	r2, #3
 800a252:	4650      	mov	r0, sl
 800a254:	7821      	ldrb	r1, [r4, #0]
 800a256:	f7ff f94f 	bl	80094f8 <memchr>
 800a25a:	b140      	cbz	r0, 800a26e <_svfiprintf_r+0x152>
 800a25c:	2340      	movs	r3, #64	; 0x40
 800a25e:	eba0 000a 	sub.w	r0, r0, sl
 800a262:	fa03 f000 	lsl.w	r0, r3, r0
 800a266:	9b04      	ldr	r3, [sp, #16]
 800a268:	3401      	adds	r4, #1
 800a26a:	4303      	orrs	r3, r0
 800a26c:	9304      	str	r3, [sp, #16]
 800a26e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a272:	2206      	movs	r2, #6
 800a274:	4826      	ldr	r0, [pc, #152]	; (800a310 <_svfiprintf_r+0x1f4>)
 800a276:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a27a:	f7ff f93d 	bl	80094f8 <memchr>
 800a27e:	2800      	cmp	r0, #0
 800a280:	d038      	beq.n	800a2f4 <_svfiprintf_r+0x1d8>
 800a282:	4b24      	ldr	r3, [pc, #144]	; (800a314 <_svfiprintf_r+0x1f8>)
 800a284:	bb1b      	cbnz	r3, 800a2ce <_svfiprintf_r+0x1b2>
 800a286:	9b03      	ldr	r3, [sp, #12]
 800a288:	3307      	adds	r3, #7
 800a28a:	f023 0307 	bic.w	r3, r3, #7
 800a28e:	3308      	adds	r3, #8
 800a290:	9303      	str	r3, [sp, #12]
 800a292:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a294:	4433      	add	r3, r6
 800a296:	9309      	str	r3, [sp, #36]	; 0x24
 800a298:	e767      	b.n	800a16a <_svfiprintf_r+0x4e>
 800a29a:	460c      	mov	r4, r1
 800a29c:	2001      	movs	r0, #1
 800a29e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a2a2:	e7a5      	b.n	800a1f0 <_svfiprintf_r+0xd4>
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	f04f 0c0a 	mov.w	ip, #10
 800a2aa:	4619      	mov	r1, r3
 800a2ac:	3401      	adds	r4, #1
 800a2ae:	9305      	str	r3, [sp, #20]
 800a2b0:	4620      	mov	r0, r4
 800a2b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a2b6:	3a30      	subs	r2, #48	; 0x30
 800a2b8:	2a09      	cmp	r2, #9
 800a2ba:	d903      	bls.n	800a2c4 <_svfiprintf_r+0x1a8>
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d0c5      	beq.n	800a24c <_svfiprintf_r+0x130>
 800a2c0:	9105      	str	r1, [sp, #20]
 800a2c2:	e7c3      	b.n	800a24c <_svfiprintf_r+0x130>
 800a2c4:	4604      	mov	r4, r0
 800a2c6:	2301      	movs	r3, #1
 800a2c8:	fb0c 2101 	mla	r1, ip, r1, r2
 800a2cc:	e7f0      	b.n	800a2b0 <_svfiprintf_r+0x194>
 800a2ce:	ab03      	add	r3, sp, #12
 800a2d0:	9300      	str	r3, [sp, #0]
 800a2d2:	462a      	mov	r2, r5
 800a2d4:	4638      	mov	r0, r7
 800a2d6:	4b10      	ldr	r3, [pc, #64]	; (800a318 <_svfiprintf_r+0x1fc>)
 800a2d8:	a904      	add	r1, sp, #16
 800a2da:	f7fc fbed 	bl	8006ab8 <_printf_float>
 800a2de:	1c42      	adds	r2, r0, #1
 800a2e0:	4606      	mov	r6, r0
 800a2e2:	d1d6      	bne.n	800a292 <_svfiprintf_r+0x176>
 800a2e4:	89ab      	ldrh	r3, [r5, #12]
 800a2e6:	065b      	lsls	r3, r3, #25
 800a2e8:	f53f af2c 	bmi.w	800a144 <_svfiprintf_r+0x28>
 800a2ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a2ee:	b01d      	add	sp, #116	; 0x74
 800a2f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2f4:	ab03      	add	r3, sp, #12
 800a2f6:	9300      	str	r3, [sp, #0]
 800a2f8:	462a      	mov	r2, r5
 800a2fa:	4638      	mov	r0, r7
 800a2fc:	4b06      	ldr	r3, [pc, #24]	; (800a318 <_svfiprintf_r+0x1fc>)
 800a2fe:	a904      	add	r1, sp, #16
 800a300:	f7fc fe76 	bl	8006ff0 <_printf_i>
 800a304:	e7eb      	b.n	800a2de <_svfiprintf_r+0x1c2>
 800a306:	bf00      	nop
 800a308:	0800b5e4 	.word	0x0800b5e4
 800a30c:	0800b5ea 	.word	0x0800b5ea
 800a310:	0800b5ee 	.word	0x0800b5ee
 800a314:	08006ab9 	.word	0x08006ab9
 800a318:	0800a065 	.word	0x0800a065

0800a31c <__sfputc_r>:
 800a31c:	6893      	ldr	r3, [r2, #8]
 800a31e:	b410      	push	{r4}
 800a320:	3b01      	subs	r3, #1
 800a322:	2b00      	cmp	r3, #0
 800a324:	6093      	str	r3, [r2, #8]
 800a326:	da07      	bge.n	800a338 <__sfputc_r+0x1c>
 800a328:	6994      	ldr	r4, [r2, #24]
 800a32a:	42a3      	cmp	r3, r4
 800a32c:	db01      	blt.n	800a332 <__sfputc_r+0x16>
 800a32e:	290a      	cmp	r1, #10
 800a330:	d102      	bne.n	800a338 <__sfputc_r+0x1c>
 800a332:	bc10      	pop	{r4}
 800a334:	f000 b974 	b.w	800a620 <__swbuf_r>
 800a338:	6813      	ldr	r3, [r2, #0]
 800a33a:	1c58      	adds	r0, r3, #1
 800a33c:	6010      	str	r0, [r2, #0]
 800a33e:	7019      	strb	r1, [r3, #0]
 800a340:	4608      	mov	r0, r1
 800a342:	bc10      	pop	{r4}
 800a344:	4770      	bx	lr

0800a346 <__sfputs_r>:
 800a346:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a348:	4606      	mov	r6, r0
 800a34a:	460f      	mov	r7, r1
 800a34c:	4614      	mov	r4, r2
 800a34e:	18d5      	adds	r5, r2, r3
 800a350:	42ac      	cmp	r4, r5
 800a352:	d101      	bne.n	800a358 <__sfputs_r+0x12>
 800a354:	2000      	movs	r0, #0
 800a356:	e007      	b.n	800a368 <__sfputs_r+0x22>
 800a358:	463a      	mov	r2, r7
 800a35a:	4630      	mov	r0, r6
 800a35c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a360:	f7ff ffdc 	bl	800a31c <__sfputc_r>
 800a364:	1c43      	adds	r3, r0, #1
 800a366:	d1f3      	bne.n	800a350 <__sfputs_r+0xa>
 800a368:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a36c <_vfiprintf_r>:
 800a36c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a370:	460d      	mov	r5, r1
 800a372:	4614      	mov	r4, r2
 800a374:	4698      	mov	r8, r3
 800a376:	4606      	mov	r6, r0
 800a378:	b09d      	sub	sp, #116	; 0x74
 800a37a:	b118      	cbz	r0, 800a384 <_vfiprintf_r+0x18>
 800a37c:	6983      	ldr	r3, [r0, #24]
 800a37e:	b90b      	cbnz	r3, 800a384 <_vfiprintf_r+0x18>
 800a380:	f000 fb3a 	bl	800a9f8 <__sinit>
 800a384:	4b89      	ldr	r3, [pc, #548]	; (800a5ac <_vfiprintf_r+0x240>)
 800a386:	429d      	cmp	r5, r3
 800a388:	d11b      	bne.n	800a3c2 <_vfiprintf_r+0x56>
 800a38a:	6875      	ldr	r5, [r6, #4]
 800a38c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a38e:	07d9      	lsls	r1, r3, #31
 800a390:	d405      	bmi.n	800a39e <_vfiprintf_r+0x32>
 800a392:	89ab      	ldrh	r3, [r5, #12]
 800a394:	059a      	lsls	r2, r3, #22
 800a396:	d402      	bmi.n	800a39e <_vfiprintf_r+0x32>
 800a398:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a39a:	f000 fbcb 	bl	800ab34 <__retarget_lock_acquire_recursive>
 800a39e:	89ab      	ldrh	r3, [r5, #12]
 800a3a0:	071b      	lsls	r3, r3, #28
 800a3a2:	d501      	bpl.n	800a3a8 <_vfiprintf_r+0x3c>
 800a3a4:	692b      	ldr	r3, [r5, #16]
 800a3a6:	b9eb      	cbnz	r3, 800a3e4 <_vfiprintf_r+0x78>
 800a3a8:	4629      	mov	r1, r5
 800a3aa:	4630      	mov	r0, r6
 800a3ac:	f000 f998 	bl	800a6e0 <__swsetup_r>
 800a3b0:	b1c0      	cbz	r0, 800a3e4 <_vfiprintf_r+0x78>
 800a3b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a3b4:	07dc      	lsls	r4, r3, #31
 800a3b6:	d50e      	bpl.n	800a3d6 <_vfiprintf_r+0x6a>
 800a3b8:	f04f 30ff 	mov.w	r0, #4294967295
 800a3bc:	b01d      	add	sp, #116	; 0x74
 800a3be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3c2:	4b7b      	ldr	r3, [pc, #492]	; (800a5b0 <_vfiprintf_r+0x244>)
 800a3c4:	429d      	cmp	r5, r3
 800a3c6:	d101      	bne.n	800a3cc <_vfiprintf_r+0x60>
 800a3c8:	68b5      	ldr	r5, [r6, #8]
 800a3ca:	e7df      	b.n	800a38c <_vfiprintf_r+0x20>
 800a3cc:	4b79      	ldr	r3, [pc, #484]	; (800a5b4 <_vfiprintf_r+0x248>)
 800a3ce:	429d      	cmp	r5, r3
 800a3d0:	bf08      	it	eq
 800a3d2:	68f5      	ldreq	r5, [r6, #12]
 800a3d4:	e7da      	b.n	800a38c <_vfiprintf_r+0x20>
 800a3d6:	89ab      	ldrh	r3, [r5, #12]
 800a3d8:	0598      	lsls	r0, r3, #22
 800a3da:	d4ed      	bmi.n	800a3b8 <_vfiprintf_r+0x4c>
 800a3dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a3de:	f000 fbaa 	bl	800ab36 <__retarget_lock_release_recursive>
 800a3e2:	e7e9      	b.n	800a3b8 <_vfiprintf_r+0x4c>
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	9309      	str	r3, [sp, #36]	; 0x24
 800a3e8:	2320      	movs	r3, #32
 800a3ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a3ee:	2330      	movs	r3, #48	; 0x30
 800a3f0:	f04f 0901 	mov.w	r9, #1
 800a3f4:	f8cd 800c 	str.w	r8, [sp, #12]
 800a3f8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800a5b8 <_vfiprintf_r+0x24c>
 800a3fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a400:	4623      	mov	r3, r4
 800a402:	469a      	mov	sl, r3
 800a404:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a408:	b10a      	cbz	r2, 800a40e <_vfiprintf_r+0xa2>
 800a40a:	2a25      	cmp	r2, #37	; 0x25
 800a40c:	d1f9      	bne.n	800a402 <_vfiprintf_r+0x96>
 800a40e:	ebba 0b04 	subs.w	fp, sl, r4
 800a412:	d00b      	beq.n	800a42c <_vfiprintf_r+0xc0>
 800a414:	465b      	mov	r3, fp
 800a416:	4622      	mov	r2, r4
 800a418:	4629      	mov	r1, r5
 800a41a:	4630      	mov	r0, r6
 800a41c:	f7ff ff93 	bl	800a346 <__sfputs_r>
 800a420:	3001      	adds	r0, #1
 800a422:	f000 80aa 	beq.w	800a57a <_vfiprintf_r+0x20e>
 800a426:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a428:	445a      	add	r2, fp
 800a42a:	9209      	str	r2, [sp, #36]	; 0x24
 800a42c:	f89a 3000 	ldrb.w	r3, [sl]
 800a430:	2b00      	cmp	r3, #0
 800a432:	f000 80a2 	beq.w	800a57a <_vfiprintf_r+0x20e>
 800a436:	2300      	movs	r3, #0
 800a438:	f04f 32ff 	mov.w	r2, #4294967295
 800a43c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a440:	f10a 0a01 	add.w	sl, sl, #1
 800a444:	9304      	str	r3, [sp, #16]
 800a446:	9307      	str	r3, [sp, #28]
 800a448:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a44c:	931a      	str	r3, [sp, #104]	; 0x68
 800a44e:	4654      	mov	r4, sl
 800a450:	2205      	movs	r2, #5
 800a452:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a456:	4858      	ldr	r0, [pc, #352]	; (800a5b8 <_vfiprintf_r+0x24c>)
 800a458:	f7ff f84e 	bl	80094f8 <memchr>
 800a45c:	9a04      	ldr	r2, [sp, #16]
 800a45e:	b9d8      	cbnz	r0, 800a498 <_vfiprintf_r+0x12c>
 800a460:	06d1      	lsls	r1, r2, #27
 800a462:	bf44      	itt	mi
 800a464:	2320      	movmi	r3, #32
 800a466:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a46a:	0713      	lsls	r3, r2, #28
 800a46c:	bf44      	itt	mi
 800a46e:	232b      	movmi	r3, #43	; 0x2b
 800a470:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a474:	f89a 3000 	ldrb.w	r3, [sl]
 800a478:	2b2a      	cmp	r3, #42	; 0x2a
 800a47a:	d015      	beq.n	800a4a8 <_vfiprintf_r+0x13c>
 800a47c:	4654      	mov	r4, sl
 800a47e:	2000      	movs	r0, #0
 800a480:	f04f 0c0a 	mov.w	ip, #10
 800a484:	9a07      	ldr	r2, [sp, #28]
 800a486:	4621      	mov	r1, r4
 800a488:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a48c:	3b30      	subs	r3, #48	; 0x30
 800a48e:	2b09      	cmp	r3, #9
 800a490:	d94e      	bls.n	800a530 <_vfiprintf_r+0x1c4>
 800a492:	b1b0      	cbz	r0, 800a4c2 <_vfiprintf_r+0x156>
 800a494:	9207      	str	r2, [sp, #28]
 800a496:	e014      	b.n	800a4c2 <_vfiprintf_r+0x156>
 800a498:	eba0 0308 	sub.w	r3, r0, r8
 800a49c:	fa09 f303 	lsl.w	r3, r9, r3
 800a4a0:	4313      	orrs	r3, r2
 800a4a2:	46a2      	mov	sl, r4
 800a4a4:	9304      	str	r3, [sp, #16]
 800a4a6:	e7d2      	b.n	800a44e <_vfiprintf_r+0xe2>
 800a4a8:	9b03      	ldr	r3, [sp, #12]
 800a4aa:	1d19      	adds	r1, r3, #4
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	9103      	str	r1, [sp, #12]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	bfbb      	ittet	lt
 800a4b4:	425b      	neglt	r3, r3
 800a4b6:	f042 0202 	orrlt.w	r2, r2, #2
 800a4ba:	9307      	strge	r3, [sp, #28]
 800a4bc:	9307      	strlt	r3, [sp, #28]
 800a4be:	bfb8      	it	lt
 800a4c0:	9204      	strlt	r2, [sp, #16]
 800a4c2:	7823      	ldrb	r3, [r4, #0]
 800a4c4:	2b2e      	cmp	r3, #46	; 0x2e
 800a4c6:	d10c      	bne.n	800a4e2 <_vfiprintf_r+0x176>
 800a4c8:	7863      	ldrb	r3, [r4, #1]
 800a4ca:	2b2a      	cmp	r3, #42	; 0x2a
 800a4cc:	d135      	bne.n	800a53a <_vfiprintf_r+0x1ce>
 800a4ce:	9b03      	ldr	r3, [sp, #12]
 800a4d0:	3402      	adds	r4, #2
 800a4d2:	1d1a      	adds	r2, r3, #4
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	9203      	str	r2, [sp, #12]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	bfb8      	it	lt
 800a4dc:	f04f 33ff 	movlt.w	r3, #4294967295
 800a4e0:	9305      	str	r3, [sp, #20]
 800a4e2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800a5bc <_vfiprintf_r+0x250>
 800a4e6:	2203      	movs	r2, #3
 800a4e8:	4650      	mov	r0, sl
 800a4ea:	7821      	ldrb	r1, [r4, #0]
 800a4ec:	f7ff f804 	bl	80094f8 <memchr>
 800a4f0:	b140      	cbz	r0, 800a504 <_vfiprintf_r+0x198>
 800a4f2:	2340      	movs	r3, #64	; 0x40
 800a4f4:	eba0 000a 	sub.w	r0, r0, sl
 800a4f8:	fa03 f000 	lsl.w	r0, r3, r0
 800a4fc:	9b04      	ldr	r3, [sp, #16]
 800a4fe:	3401      	adds	r4, #1
 800a500:	4303      	orrs	r3, r0
 800a502:	9304      	str	r3, [sp, #16]
 800a504:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a508:	2206      	movs	r2, #6
 800a50a:	482d      	ldr	r0, [pc, #180]	; (800a5c0 <_vfiprintf_r+0x254>)
 800a50c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a510:	f7fe fff2 	bl	80094f8 <memchr>
 800a514:	2800      	cmp	r0, #0
 800a516:	d03f      	beq.n	800a598 <_vfiprintf_r+0x22c>
 800a518:	4b2a      	ldr	r3, [pc, #168]	; (800a5c4 <_vfiprintf_r+0x258>)
 800a51a:	bb1b      	cbnz	r3, 800a564 <_vfiprintf_r+0x1f8>
 800a51c:	9b03      	ldr	r3, [sp, #12]
 800a51e:	3307      	adds	r3, #7
 800a520:	f023 0307 	bic.w	r3, r3, #7
 800a524:	3308      	adds	r3, #8
 800a526:	9303      	str	r3, [sp, #12]
 800a528:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a52a:	443b      	add	r3, r7
 800a52c:	9309      	str	r3, [sp, #36]	; 0x24
 800a52e:	e767      	b.n	800a400 <_vfiprintf_r+0x94>
 800a530:	460c      	mov	r4, r1
 800a532:	2001      	movs	r0, #1
 800a534:	fb0c 3202 	mla	r2, ip, r2, r3
 800a538:	e7a5      	b.n	800a486 <_vfiprintf_r+0x11a>
 800a53a:	2300      	movs	r3, #0
 800a53c:	f04f 0c0a 	mov.w	ip, #10
 800a540:	4619      	mov	r1, r3
 800a542:	3401      	adds	r4, #1
 800a544:	9305      	str	r3, [sp, #20]
 800a546:	4620      	mov	r0, r4
 800a548:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a54c:	3a30      	subs	r2, #48	; 0x30
 800a54e:	2a09      	cmp	r2, #9
 800a550:	d903      	bls.n	800a55a <_vfiprintf_r+0x1ee>
 800a552:	2b00      	cmp	r3, #0
 800a554:	d0c5      	beq.n	800a4e2 <_vfiprintf_r+0x176>
 800a556:	9105      	str	r1, [sp, #20]
 800a558:	e7c3      	b.n	800a4e2 <_vfiprintf_r+0x176>
 800a55a:	4604      	mov	r4, r0
 800a55c:	2301      	movs	r3, #1
 800a55e:	fb0c 2101 	mla	r1, ip, r1, r2
 800a562:	e7f0      	b.n	800a546 <_vfiprintf_r+0x1da>
 800a564:	ab03      	add	r3, sp, #12
 800a566:	9300      	str	r3, [sp, #0]
 800a568:	462a      	mov	r2, r5
 800a56a:	4630      	mov	r0, r6
 800a56c:	4b16      	ldr	r3, [pc, #88]	; (800a5c8 <_vfiprintf_r+0x25c>)
 800a56e:	a904      	add	r1, sp, #16
 800a570:	f7fc faa2 	bl	8006ab8 <_printf_float>
 800a574:	4607      	mov	r7, r0
 800a576:	1c78      	adds	r0, r7, #1
 800a578:	d1d6      	bne.n	800a528 <_vfiprintf_r+0x1bc>
 800a57a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a57c:	07d9      	lsls	r1, r3, #31
 800a57e:	d405      	bmi.n	800a58c <_vfiprintf_r+0x220>
 800a580:	89ab      	ldrh	r3, [r5, #12]
 800a582:	059a      	lsls	r2, r3, #22
 800a584:	d402      	bmi.n	800a58c <_vfiprintf_r+0x220>
 800a586:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a588:	f000 fad5 	bl	800ab36 <__retarget_lock_release_recursive>
 800a58c:	89ab      	ldrh	r3, [r5, #12]
 800a58e:	065b      	lsls	r3, r3, #25
 800a590:	f53f af12 	bmi.w	800a3b8 <_vfiprintf_r+0x4c>
 800a594:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a596:	e711      	b.n	800a3bc <_vfiprintf_r+0x50>
 800a598:	ab03      	add	r3, sp, #12
 800a59a:	9300      	str	r3, [sp, #0]
 800a59c:	462a      	mov	r2, r5
 800a59e:	4630      	mov	r0, r6
 800a5a0:	4b09      	ldr	r3, [pc, #36]	; (800a5c8 <_vfiprintf_r+0x25c>)
 800a5a2:	a904      	add	r1, sp, #16
 800a5a4:	f7fc fd24 	bl	8006ff0 <_printf_i>
 800a5a8:	e7e4      	b.n	800a574 <_vfiprintf_r+0x208>
 800a5aa:	bf00      	nop
 800a5ac:	0800b618 	.word	0x0800b618
 800a5b0:	0800b638 	.word	0x0800b638
 800a5b4:	0800b5f8 	.word	0x0800b5f8
 800a5b8:	0800b5e4 	.word	0x0800b5e4
 800a5bc:	0800b5ea 	.word	0x0800b5ea
 800a5c0:	0800b5ee 	.word	0x0800b5ee
 800a5c4:	08006ab9 	.word	0x08006ab9
 800a5c8:	0800a347 	.word	0x0800a347

0800a5cc <nan>:
 800a5cc:	2000      	movs	r0, #0
 800a5ce:	4901      	ldr	r1, [pc, #4]	; (800a5d4 <nan+0x8>)
 800a5d0:	4770      	bx	lr
 800a5d2:	bf00      	nop
 800a5d4:	7ff80000 	.word	0x7ff80000

0800a5d8 <_sbrk_r>:
 800a5d8:	b538      	push	{r3, r4, r5, lr}
 800a5da:	2300      	movs	r3, #0
 800a5dc:	4d05      	ldr	r5, [pc, #20]	; (800a5f4 <_sbrk_r+0x1c>)
 800a5de:	4604      	mov	r4, r0
 800a5e0:	4608      	mov	r0, r1
 800a5e2:	602b      	str	r3, [r5, #0]
 800a5e4:	f7f7 fa30 	bl	8001a48 <_sbrk>
 800a5e8:	1c43      	adds	r3, r0, #1
 800a5ea:	d102      	bne.n	800a5f2 <_sbrk_r+0x1a>
 800a5ec:	682b      	ldr	r3, [r5, #0]
 800a5ee:	b103      	cbz	r3, 800a5f2 <_sbrk_r+0x1a>
 800a5f0:	6023      	str	r3, [r4, #0]
 800a5f2:	bd38      	pop	{r3, r4, r5, pc}
 800a5f4:	20002570 	.word	0x20002570

0800a5f8 <strncmp>:
 800a5f8:	4603      	mov	r3, r0
 800a5fa:	b510      	push	{r4, lr}
 800a5fc:	b172      	cbz	r2, 800a61c <strncmp+0x24>
 800a5fe:	3901      	subs	r1, #1
 800a600:	1884      	adds	r4, r0, r2
 800a602:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a606:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a60a:	4290      	cmp	r0, r2
 800a60c:	d101      	bne.n	800a612 <strncmp+0x1a>
 800a60e:	42a3      	cmp	r3, r4
 800a610:	d101      	bne.n	800a616 <strncmp+0x1e>
 800a612:	1a80      	subs	r0, r0, r2
 800a614:	bd10      	pop	{r4, pc}
 800a616:	2800      	cmp	r0, #0
 800a618:	d1f3      	bne.n	800a602 <strncmp+0xa>
 800a61a:	e7fa      	b.n	800a612 <strncmp+0x1a>
 800a61c:	4610      	mov	r0, r2
 800a61e:	e7f9      	b.n	800a614 <strncmp+0x1c>

0800a620 <__swbuf_r>:
 800a620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a622:	460e      	mov	r6, r1
 800a624:	4614      	mov	r4, r2
 800a626:	4605      	mov	r5, r0
 800a628:	b118      	cbz	r0, 800a632 <__swbuf_r+0x12>
 800a62a:	6983      	ldr	r3, [r0, #24]
 800a62c:	b90b      	cbnz	r3, 800a632 <__swbuf_r+0x12>
 800a62e:	f000 f9e3 	bl	800a9f8 <__sinit>
 800a632:	4b21      	ldr	r3, [pc, #132]	; (800a6b8 <__swbuf_r+0x98>)
 800a634:	429c      	cmp	r4, r3
 800a636:	d12b      	bne.n	800a690 <__swbuf_r+0x70>
 800a638:	686c      	ldr	r4, [r5, #4]
 800a63a:	69a3      	ldr	r3, [r4, #24]
 800a63c:	60a3      	str	r3, [r4, #8]
 800a63e:	89a3      	ldrh	r3, [r4, #12]
 800a640:	071a      	lsls	r2, r3, #28
 800a642:	d52f      	bpl.n	800a6a4 <__swbuf_r+0x84>
 800a644:	6923      	ldr	r3, [r4, #16]
 800a646:	b36b      	cbz	r3, 800a6a4 <__swbuf_r+0x84>
 800a648:	6923      	ldr	r3, [r4, #16]
 800a64a:	6820      	ldr	r0, [r4, #0]
 800a64c:	b2f6      	uxtb	r6, r6
 800a64e:	1ac0      	subs	r0, r0, r3
 800a650:	6963      	ldr	r3, [r4, #20]
 800a652:	4637      	mov	r7, r6
 800a654:	4283      	cmp	r3, r0
 800a656:	dc04      	bgt.n	800a662 <__swbuf_r+0x42>
 800a658:	4621      	mov	r1, r4
 800a65a:	4628      	mov	r0, r5
 800a65c:	f000 f938 	bl	800a8d0 <_fflush_r>
 800a660:	bb30      	cbnz	r0, 800a6b0 <__swbuf_r+0x90>
 800a662:	68a3      	ldr	r3, [r4, #8]
 800a664:	3001      	adds	r0, #1
 800a666:	3b01      	subs	r3, #1
 800a668:	60a3      	str	r3, [r4, #8]
 800a66a:	6823      	ldr	r3, [r4, #0]
 800a66c:	1c5a      	adds	r2, r3, #1
 800a66e:	6022      	str	r2, [r4, #0]
 800a670:	701e      	strb	r6, [r3, #0]
 800a672:	6963      	ldr	r3, [r4, #20]
 800a674:	4283      	cmp	r3, r0
 800a676:	d004      	beq.n	800a682 <__swbuf_r+0x62>
 800a678:	89a3      	ldrh	r3, [r4, #12]
 800a67a:	07db      	lsls	r3, r3, #31
 800a67c:	d506      	bpl.n	800a68c <__swbuf_r+0x6c>
 800a67e:	2e0a      	cmp	r6, #10
 800a680:	d104      	bne.n	800a68c <__swbuf_r+0x6c>
 800a682:	4621      	mov	r1, r4
 800a684:	4628      	mov	r0, r5
 800a686:	f000 f923 	bl	800a8d0 <_fflush_r>
 800a68a:	b988      	cbnz	r0, 800a6b0 <__swbuf_r+0x90>
 800a68c:	4638      	mov	r0, r7
 800a68e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a690:	4b0a      	ldr	r3, [pc, #40]	; (800a6bc <__swbuf_r+0x9c>)
 800a692:	429c      	cmp	r4, r3
 800a694:	d101      	bne.n	800a69a <__swbuf_r+0x7a>
 800a696:	68ac      	ldr	r4, [r5, #8]
 800a698:	e7cf      	b.n	800a63a <__swbuf_r+0x1a>
 800a69a:	4b09      	ldr	r3, [pc, #36]	; (800a6c0 <__swbuf_r+0xa0>)
 800a69c:	429c      	cmp	r4, r3
 800a69e:	bf08      	it	eq
 800a6a0:	68ec      	ldreq	r4, [r5, #12]
 800a6a2:	e7ca      	b.n	800a63a <__swbuf_r+0x1a>
 800a6a4:	4621      	mov	r1, r4
 800a6a6:	4628      	mov	r0, r5
 800a6a8:	f000 f81a 	bl	800a6e0 <__swsetup_r>
 800a6ac:	2800      	cmp	r0, #0
 800a6ae:	d0cb      	beq.n	800a648 <__swbuf_r+0x28>
 800a6b0:	f04f 37ff 	mov.w	r7, #4294967295
 800a6b4:	e7ea      	b.n	800a68c <__swbuf_r+0x6c>
 800a6b6:	bf00      	nop
 800a6b8:	0800b618 	.word	0x0800b618
 800a6bc:	0800b638 	.word	0x0800b638
 800a6c0:	0800b5f8 	.word	0x0800b5f8

0800a6c4 <__ascii_wctomb>:
 800a6c4:	4603      	mov	r3, r0
 800a6c6:	4608      	mov	r0, r1
 800a6c8:	b141      	cbz	r1, 800a6dc <__ascii_wctomb+0x18>
 800a6ca:	2aff      	cmp	r2, #255	; 0xff
 800a6cc:	d904      	bls.n	800a6d8 <__ascii_wctomb+0x14>
 800a6ce:	228a      	movs	r2, #138	; 0x8a
 800a6d0:	f04f 30ff 	mov.w	r0, #4294967295
 800a6d4:	601a      	str	r2, [r3, #0]
 800a6d6:	4770      	bx	lr
 800a6d8:	2001      	movs	r0, #1
 800a6da:	700a      	strb	r2, [r1, #0]
 800a6dc:	4770      	bx	lr
	...

0800a6e0 <__swsetup_r>:
 800a6e0:	4b32      	ldr	r3, [pc, #200]	; (800a7ac <__swsetup_r+0xcc>)
 800a6e2:	b570      	push	{r4, r5, r6, lr}
 800a6e4:	681d      	ldr	r5, [r3, #0]
 800a6e6:	4606      	mov	r6, r0
 800a6e8:	460c      	mov	r4, r1
 800a6ea:	b125      	cbz	r5, 800a6f6 <__swsetup_r+0x16>
 800a6ec:	69ab      	ldr	r3, [r5, #24]
 800a6ee:	b913      	cbnz	r3, 800a6f6 <__swsetup_r+0x16>
 800a6f0:	4628      	mov	r0, r5
 800a6f2:	f000 f981 	bl	800a9f8 <__sinit>
 800a6f6:	4b2e      	ldr	r3, [pc, #184]	; (800a7b0 <__swsetup_r+0xd0>)
 800a6f8:	429c      	cmp	r4, r3
 800a6fa:	d10f      	bne.n	800a71c <__swsetup_r+0x3c>
 800a6fc:	686c      	ldr	r4, [r5, #4]
 800a6fe:	89a3      	ldrh	r3, [r4, #12]
 800a700:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a704:	0719      	lsls	r1, r3, #28
 800a706:	d42c      	bmi.n	800a762 <__swsetup_r+0x82>
 800a708:	06dd      	lsls	r5, r3, #27
 800a70a:	d411      	bmi.n	800a730 <__swsetup_r+0x50>
 800a70c:	2309      	movs	r3, #9
 800a70e:	6033      	str	r3, [r6, #0]
 800a710:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a714:	f04f 30ff 	mov.w	r0, #4294967295
 800a718:	81a3      	strh	r3, [r4, #12]
 800a71a:	e03e      	b.n	800a79a <__swsetup_r+0xba>
 800a71c:	4b25      	ldr	r3, [pc, #148]	; (800a7b4 <__swsetup_r+0xd4>)
 800a71e:	429c      	cmp	r4, r3
 800a720:	d101      	bne.n	800a726 <__swsetup_r+0x46>
 800a722:	68ac      	ldr	r4, [r5, #8]
 800a724:	e7eb      	b.n	800a6fe <__swsetup_r+0x1e>
 800a726:	4b24      	ldr	r3, [pc, #144]	; (800a7b8 <__swsetup_r+0xd8>)
 800a728:	429c      	cmp	r4, r3
 800a72a:	bf08      	it	eq
 800a72c:	68ec      	ldreq	r4, [r5, #12]
 800a72e:	e7e6      	b.n	800a6fe <__swsetup_r+0x1e>
 800a730:	0758      	lsls	r0, r3, #29
 800a732:	d512      	bpl.n	800a75a <__swsetup_r+0x7a>
 800a734:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a736:	b141      	cbz	r1, 800a74a <__swsetup_r+0x6a>
 800a738:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a73c:	4299      	cmp	r1, r3
 800a73e:	d002      	beq.n	800a746 <__swsetup_r+0x66>
 800a740:	4630      	mov	r0, r6
 800a742:	f7ff fbb3 	bl	8009eac <_free_r>
 800a746:	2300      	movs	r3, #0
 800a748:	6363      	str	r3, [r4, #52]	; 0x34
 800a74a:	89a3      	ldrh	r3, [r4, #12]
 800a74c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a750:	81a3      	strh	r3, [r4, #12]
 800a752:	2300      	movs	r3, #0
 800a754:	6063      	str	r3, [r4, #4]
 800a756:	6923      	ldr	r3, [r4, #16]
 800a758:	6023      	str	r3, [r4, #0]
 800a75a:	89a3      	ldrh	r3, [r4, #12]
 800a75c:	f043 0308 	orr.w	r3, r3, #8
 800a760:	81a3      	strh	r3, [r4, #12]
 800a762:	6923      	ldr	r3, [r4, #16]
 800a764:	b94b      	cbnz	r3, 800a77a <__swsetup_r+0x9a>
 800a766:	89a3      	ldrh	r3, [r4, #12]
 800a768:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a76c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a770:	d003      	beq.n	800a77a <__swsetup_r+0x9a>
 800a772:	4621      	mov	r1, r4
 800a774:	4630      	mov	r0, r6
 800a776:	f000 fa05 	bl	800ab84 <__smakebuf_r>
 800a77a:	89a0      	ldrh	r0, [r4, #12]
 800a77c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a780:	f010 0301 	ands.w	r3, r0, #1
 800a784:	d00a      	beq.n	800a79c <__swsetup_r+0xbc>
 800a786:	2300      	movs	r3, #0
 800a788:	60a3      	str	r3, [r4, #8]
 800a78a:	6963      	ldr	r3, [r4, #20]
 800a78c:	425b      	negs	r3, r3
 800a78e:	61a3      	str	r3, [r4, #24]
 800a790:	6923      	ldr	r3, [r4, #16]
 800a792:	b943      	cbnz	r3, 800a7a6 <__swsetup_r+0xc6>
 800a794:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a798:	d1ba      	bne.n	800a710 <__swsetup_r+0x30>
 800a79a:	bd70      	pop	{r4, r5, r6, pc}
 800a79c:	0781      	lsls	r1, r0, #30
 800a79e:	bf58      	it	pl
 800a7a0:	6963      	ldrpl	r3, [r4, #20]
 800a7a2:	60a3      	str	r3, [r4, #8]
 800a7a4:	e7f4      	b.n	800a790 <__swsetup_r+0xb0>
 800a7a6:	2000      	movs	r0, #0
 800a7a8:	e7f7      	b.n	800a79a <__swsetup_r+0xba>
 800a7aa:	bf00      	nop
 800a7ac:	2000021c 	.word	0x2000021c
 800a7b0:	0800b618 	.word	0x0800b618
 800a7b4:	0800b638 	.word	0x0800b638
 800a7b8:	0800b5f8 	.word	0x0800b5f8

0800a7bc <abort>:
 800a7bc:	2006      	movs	r0, #6
 800a7be:	b508      	push	{r3, lr}
 800a7c0:	f000 fa9e 	bl	800ad00 <raise>
 800a7c4:	2001      	movs	r0, #1
 800a7c6:	f7f7 f913 	bl	80019f0 <_exit>
	...

0800a7cc <__sflush_r>:
 800a7cc:	898a      	ldrh	r2, [r1, #12]
 800a7ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7d0:	4605      	mov	r5, r0
 800a7d2:	0710      	lsls	r0, r2, #28
 800a7d4:	460c      	mov	r4, r1
 800a7d6:	d457      	bmi.n	800a888 <__sflush_r+0xbc>
 800a7d8:	684b      	ldr	r3, [r1, #4]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	dc04      	bgt.n	800a7e8 <__sflush_r+0x1c>
 800a7de:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	dc01      	bgt.n	800a7e8 <__sflush_r+0x1c>
 800a7e4:	2000      	movs	r0, #0
 800a7e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a7e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a7ea:	2e00      	cmp	r6, #0
 800a7ec:	d0fa      	beq.n	800a7e4 <__sflush_r+0x18>
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a7f4:	682f      	ldr	r7, [r5, #0]
 800a7f6:	602b      	str	r3, [r5, #0]
 800a7f8:	d032      	beq.n	800a860 <__sflush_r+0x94>
 800a7fa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a7fc:	89a3      	ldrh	r3, [r4, #12]
 800a7fe:	075a      	lsls	r2, r3, #29
 800a800:	d505      	bpl.n	800a80e <__sflush_r+0x42>
 800a802:	6863      	ldr	r3, [r4, #4]
 800a804:	1ac0      	subs	r0, r0, r3
 800a806:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a808:	b10b      	cbz	r3, 800a80e <__sflush_r+0x42>
 800a80a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a80c:	1ac0      	subs	r0, r0, r3
 800a80e:	2300      	movs	r3, #0
 800a810:	4602      	mov	r2, r0
 800a812:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a814:	4628      	mov	r0, r5
 800a816:	6a21      	ldr	r1, [r4, #32]
 800a818:	47b0      	blx	r6
 800a81a:	1c43      	adds	r3, r0, #1
 800a81c:	89a3      	ldrh	r3, [r4, #12]
 800a81e:	d106      	bne.n	800a82e <__sflush_r+0x62>
 800a820:	6829      	ldr	r1, [r5, #0]
 800a822:	291d      	cmp	r1, #29
 800a824:	d82c      	bhi.n	800a880 <__sflush_r+0xb4>
 800a826:	4a29      	ldr	r2, [pc, #164]	; (800a8cc <__sflush_r+0x100>)
 800a828:	40ca      	lsrs	r2, r1
 800a82a:	07d6      	lsls	r6, r2, #31
 800a82c:	d528      	bpl.n	800a880 <__sflush_r+0xb4>
 800a82e:	2200      	movs	r2, #0
 800a830:	6062      	str	r2, [r4, #4]
 800a832:	6922      	ldr	r2, [r4, #16]
 800a834:	04d9      	lsls	r1, r3, #19
 800a836:	6022      	str	r2, [r4, #0]
 800a838:	d504      	bpl.n	800a844 <__sflush_r+0x78>
 800a83a:	1c42      	adds	r2, r0, #1
 800a83c:	d101      	bne.n	800a842 <__sflush_r+0x76>
 800a83e:	682b      	ldr	r3, [r5, #0]
 800a840:	b903      	cbnz	r3, 800a844 <__sflush_r+0x78>
 800a842:	6560      	str	r0, [r4, #84]	; 0x54
 800a844:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a846:	602f      	str	r7, [r5, #0]
 800a848:	2900      	cmp	r1, #0
 800a84a:	d0cb      	beq.n	800a7e4 <__sflush_r+0x18>
 800a84c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a850:	4299      	cmp	r1, r3
 800a852:	d002      	beq.n	800a85a <__sflush_r+0x8e>
 800a854:	4628      	mov	r0, r5
 800a856:	f7ff fb29 	bl	8009eac <_free_r>
 800a85a:	2000      	movs	r0, #0
 800a85c:	6360      	str	r0, [r4, #52]	; 0x34
 800a85e:	e7c2      	b.n	800a7e6 <__sflush_r+0x1a>
 800a860:	6a21      	ldr	r1, [r4, #32]
 800a862:	2301      	movs	r3, #1
 800a864:	4628      	mov	r0, r5
 800a866:	47b0      	blx	r6
 800a868:	1c41      	adds	r1, r0, #1
 800a86a:	d1c7      	bne.n	800a7fc <__sflush_r+0x30>
 800a86c:	682b      	ldr	r3, [r5, #0]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d0c4      	beq.n	800a7fc <__sflush_r+0x30>
 800a872:	2b1d      	cmp	r3, #29
 800a874:	d001      	beq.n	800a87a <__sflush_r+0xae>
 800a876:	2b16      	cmp	r3, #22
 800a878:	d101      	bne.n	800a87e <__sflush_r+0xb2>
 800a87a:	602f      	str	r7, [r5, #0]
 800a87c:	e7b2      	b.n	800a7e4 <__sflush_r+0x18>
 800a87e:	89a3      	ldrh	r3, [r4, #12]
 800a880:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a884:	81a3      	strh	r3, [r4, #12]
 800a886:	e7ae      	b.n	800a7e6 <__sflush_r+0x1a>
 800a888:	690f      	ldr	r7, [r1, #16]
 800a88a:	2f00      	cmp	r7, #0
 800a88c:	d0aa      	beq.n	800a7e4 <__sflush_r+0x18>
 800a88e:	0793      	lsls	r3, r2, #30
 800a890:	bf18      	it	ne
 800a892:	2300      	movne	r3, #0
 800a894:	680e      	ldr	r6, [r1, #0]
 800a896:	bf08      	it	eq
 800a898:	694b      	ldreq	r3, [r1, #20]
 800a89a:	1bf6      	subs	r6, r6, r7
 800a89c:	600f      	str	r7, [r1, #0]
 800a89e:	608b      	str	r3, [r1, #8]
 800a8a0:	2e00      	cmp	r6, #0
 800a8a2:	dd9f      	ble.n	800a7e4 <__sflush_r+0x18>
 800a8a4:	4633      	mov	r3, r6
 800a8a6:	463a      	mov	r2, r7
 800a8a8:	4628      	mov	r0, r5
 800a8aa:	6a21      	ldr	r1, [r4, #32]
 800a8ac:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800a8b0:	47e0      	blx	ip
 800a8b2:	2800      	cmp	r0, #0
 800a8b4:	dc06      	bgt.n	800a8c4 <__sflush_r+0xf8>
 800a8b6:	89a3      	ldrh	r3, [r4, #12]
 800a8b8:	f04f 30ff 	mov.w	r0, #4294967295
 800a8bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a8c0:	81a3      	strh	r3, [r4, #12]
 800a8c2:	e790      	b.n	800a7e6 <__sflush_r+0x1a>
 800a8c4:	4407      	add	r7, r0
 800a8c6:	1a36      	subs	r6, r6, r0
 800a8c8:	e7ea      	b.n	800a8a0 <__sflush_r+0xd4>
 800a8ca:	bf00      	nop
 800a8cc:	20400001 	.word	0x20400001

0800a8d0 <_fflush_r>:
 800a8d0:	b538      	push	{r3, r4, r5, lr}
 800a8d2:	690b      	ldr	r3, [r1, #16]
 800a8d4:	4605      	mov	r5, r0
 800a8d6:	460c      	mov	r4, r1
 800a8d8:	b913      	cbnz	r3, 800a8e0 <_fflush_r+0x10>
 800a8da:	2500      	movs	r5, #0
 800a8dc:	4628      	mov	r0, r5
 800a8de:	bd38      	pop	{r3, r4, r5, pc}
 800a8e0:	b118      	cbz	r0, 800a8ea <_fflush_r+0x1a>
 800a8e2:	6983      	ldr	r3, [r0, #24]
 800a8e4:	b90b      	cbnz	r3, 800a8ea <_fflush_r+0x1a>
 800a8e6:	f000 f887 	bl	800a9f8 <__sinit>
 800a8ea:	4b14      	ldr	r3, [pc, #80]	; (800a93c <_fflush_r+0x6c>)
 800a8ec:	429c      	cmp	r4, r3
 800a8ee:	d11b      	bne.n	800a928 <_fflush_r+0x58>
 800a8f0:	686c      	ldr	r4, [r5, #4]
 800a8f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d0ef      	beq.n	800a8da <_fflush_r+0xa>
 800a8fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a8fc:	07d0      	lsls	r0, r2, #31
 800a8fe:	d404      	bmi.n	800a90a <_fflush_r+0x3a>
 800a900:	0599      	lsls	r1, r3, #22
 800a902:	d402      	bmi.n	800a90a <_fflush_r+0x3a>
 800a904:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a906:	f000 f915 	bl	800ab34 <__retarget_lock_acquire_recursive>
 800a90a:	4628      	mov	r0, r5
 800a90c:	4621      	mov	r1, r4
 800a90e:	f7ff ff5d 	bl	800a7cc <__sflush_r>
 800a912:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a914:	4605      	mov	r5, r0
 800a916:	07da      	lsls	r2, r3, #31
 800a918:	d4e0      	bmi.n	800a8dc <_fflush_r+0xc>
 800a91a:	89a3      	ldrh	r3, [r4, #12]
 800a91c:	059b      	lsls	r3, r3, #22
 800a91e:	d4dd      	bmi.n	800a8dc <_fflush_r+0xc>
 800a920:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a922:	f000 f908 	bl	800ab36 <__retarget_lock_release_recursive>
 800a926:	e7d9      	b.n	800a8dc <_fflush_r+0xc>
 800a928:	4b05      	ldr	r3, [pc, #20]	; (800a940 <_fflush_r+0x70>)
 800a92a:	429c      	cmp	r4, r3
 800a92c:	d101      	bne.n	800a932 <_fflush_r+0x62>
 800a92e:	68ac      	ldr	r4, [r5, #8]
 800a930:	e7df      	b.n	800a8f2 <_fflush_r+0x22>
 800a932:	4b04      	ldr	r3, [pc, #16]	; (800a944 <_fflush_r+0x74>)
 800a934:	429c      	cmp	r4, r3
 800a936:	bf08      	it	eq
 800a938:	68ec      	ldreq	r4, [r5, #12]
 800a93a:	e7da      	b.n	800a8f2 <_fflush_r+0x22>
 800a93c:	0800b618 	.word	0x0800b618
 800a940:	0800b638 	.word	0x0800b638
 800a944:	0800b5f8 	.word	0x0800b5f8

0800a948 <std>:
 800a948:	2300      	movs	r3, #0
 800a94a:	b510      	push	{r4, lr}
 800a94c:	4604      	mov	r4, r0
 800a94e:	e9c0 3300 	strd	r3, r3, [r0]
 800a952:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a956:	6083      	str	r3, [r0, #8]
 800a958:	8181      	strh	r1, [r0, #12]
 800a95a:	6643      	str	r3, [r0, #100]	; 0x64
 800a95c:	81c2      	strh	r2, [r0, #14]
 800a95e:	6183      	str	r3, [r0, #24]
 800a960:	4619      	mov	r1, r3
 800a962:	2208      	movs	r2, #8
 800a964:	305c      	adds	r0, #92	; 0x5c
 800a966:	f7fc f801 	bl	800696c <memset>
 800a96a:	4b05      	ldr	r3, [pc, #20]	; (800a980 <std+0x38>)
 800a96c:	6224      	str	r4, [r4, #32]
 800a96e:	6263      	str	r3, [r4, #36]	; 0x24
 800a970:	4b04      	ldr	r3, [pc, #16]	; (800a984 <std+0x3c>)
 800a972:	62a3      	str	r3, [r4, #40]	; 0x28
 800a974:	4b04      	ldr	r3, [pc, #16]	; (800a988 <std+0x40>)
 800a976:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a978:	4b04      	ldr	r3, [pc, #16]	; (800a98c <std+0x44>)
 800a97a:	6323      	str	r3, [r4, #48]	; 0x30
 800a97c:	bd10      	pop	{r4, pc}
 800a97e:	bf00      	nop
 800a980:	0800ad39 	.word	0x0800ad39
 800a984:	0800ad5b 	.word	0x0800ad5b
 800a988:	0800ad93 	.word	0x0800ad93
 800a98c:	0800adb7 	.word	0x0800adb7

0800a990 <_cleanup_r>:
 800a990:	4901      	ldr	r1, [pc, #4]	; (800a998 <_cleanup_r+0x8>)
 800a992:	f000 b8af 	b.w	800aaf4 <_fwalk_reent>
 800a996:	bf00      	nop
 800a998:	0800a8d1 	.word	0x0800a8d1

0800a99c <__sfmoreglue>:
 800a99c:	2268      	movs	r2, #104	; 0x68
 800a99e:	b570      	push	{r4, r5, r6, lr}
 800a9a0:	1e4d      	subs	r5, r1, #1
 800a9a2:	4355      	muls	r5, r2
 800a9a4:	460e      	mov	r6, r1
 800a9a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a9aa:	f7ff fae7 	bl	8009f7c <_malloc_r>
 800a9ae:	4604      	mov	r4, r0
 800a9b0:	b140      	cbz	r0, 800a9c4 <__sfmoreglue+0x28>
 800a9b2:	2100      	movs	r1, #0
 800a9b4:	e9c0 1600 	strd	r1, r6, [r0]
 800a9b8:	300c      	adds	r0, #12
 800a9ba:	60a0      	str	r0, [r4, #8]
 800a9bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a9c0:	f7fb ffd4 	bl	800696c <memset>
 800a9c4:	4620      	mov	r0, r4
 800a9c6:	bd70      	pop	{r4, r5, r6, pc}

0800a9c8 <__sfp_lock_acquire>:
 800a9c8:	4801      	ldr	r0, [pc, #4]	; (800a9d0 <__sfp_lock_acquire+0x8>)
 800a9ca:	f000 b8b3 	b.w	800ab34 <__retarget_lock_acquire_recursive>
 800a9ce:	bf00      	nop
 800a9d0:	2000256d 	.word	0x2000256d

0800a9d4 <__sfp_lock_release>:
 800a9d4:	4801      	ldr	r0, [pc, #4]	; (800a9dc <__sfp_lock_release+0x8>)
 800a9d6:	f000 b8ae 	b.w	800ab36 <__retarget_lock_release_recursive>
 800a9da:	bf00      	nop
 800a9dc:	2000256d 	.word	0x2000256d

0800a9e0 <__sinit_lock_acquire>:
 800a9e0:	4801      	ldr	r0, [pc, #4]	; (800a9e8 <__sinit_lock_acquire+0x8>)
 800a9e2:	f000 b8a7 	b.w	800ab34 <__retarget_lock_acquire_recursive>
 800a9e6:	bf00      	nop
 800a9e8:	2000256e 	.word	0x2000256e

0800a9ec <__sinit_lock_release>:
 800a9ec:	4801      	ldr	r0, [pc, #4]	; (800a9f4 <__sinit_lock_release+0x8>)
 800a9ee:	f000 b8a2 	b.w	800ab36 <__retarget_lock_release_recursive>
 800a9f2:	bf00      	nop
 800a9f4:	2000256e 	.word	0x2000256e

0800a9f8 <__sinit>:
 800a9f8:	b510      	push	{r4, lr}
 800a9fa:	4604      	mov	r4, r0
 800a9fc:	f7ff fff0 	bl	800a9e0 <__sinit_lock_acquire>
 800aa00:	69a3      	ldr	r3, [r4, #24]
 800aa02:	b11b      	cbz	r3, 800aa0c <__sinit+0x14>
 800aa04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa08:	f7ff bff0 	b.w	800a9ec <__sinit_lock_release>
 800aa0c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800aa10:	6523      	str	r3, [r4, #80]	; 0x50
 800aa12:	4b13      	ldr	r3, [pc, #76]	; (800aa60 <__sinit+0x68>)
 800aa14:	4a13      	ldr	r2, [pc, #76]	; (800aa64 <__sinit+0x6c>)
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	62a2      	str	r2, [r4, #40]	; 0x28
 800aa1a:	42a3      	cmp	r3, r4
 800aa1c:	bf08      	it	eq
 800aa1e:	2301      	moveq	r3, #1
 800aa20:	4620      	mov	r0, r4
 800aa22:	bf08      	it	eq
 800aa24:	61a3      	streq	r3, [r4, #24]
 800aa26:	f000 f81f 	bl	800aa68 <__sfp>
 800aa2a:	6060      	str	r0, [r4, #4]
 800aa2c:	4620      	mov	r0, r4
 800aa2e:	f000 f81b 	bl	800aa68 <__sfp>
 800aa32:	60a0      	str	r0, [r4, #8]
 800aa34:	4620      	mov	r0, r4
 800aa36:	f000 f817 	bl	800aa68 <__sfp>
 800aa3a:	2200      	movs	r2, #0
 800aa3c:	2104      	movs	r1, #4
 800aa3e:	60e0      	str	r0, [r4, #12]
 800aa40:	6860      	ldr	r0, [r4, #4]
 800aa42:	f7ff ff81 	bl	800a948 <std>
 800aa46:	2201      	movs	r2, #1
 800aa48:	2109      	movs	r1, #9
 800aa4a:	68a0      	ldr	r0, [r4, #8]
 800aa4c:	f7ff ff7c 	bl	800a948 <std>
 800aa50:	2202      	movs	r2, #2
 800aa52:	2112      	movs	r1, #18
 800aa54:	68e0      	ldr	r0, [r4, #12]
 800aa56:	f7ff ff77 	bl	800a948 <std>
 800aa5a:	2301      	movs	r3, #1
 800aa5c:	61a3      	str	r3, [r4, #24]
 800aa5e:	e7d1      	b.n	800aa04 <__sinit+0xc>
 800aa60:	0800b160 	.word	0x0800b160
 800aa64:	0800a991 	.word	0x0800a991

0800aa68 <__sfp>:
 800aa68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa6a:	4607      	mov	r7, r0
 800aa6c:	f7ff ffac 	bl	800a9c8 <__sfp_lock_acquire>
 800aa70:	4b1e      	ldr	r3, [pc, #120]	; (800aaec <__sfp+0x84>)
 800aa72:	681e      	ldr	r6, [r3, #0]
 800aa74:	69b3      	ldr	r3, [r6, #24]
 800aa76:	b913      	cbnz	r3, 800aa7e <__sfp+0x16>
 800aa78:	4630      	mov	r0, r6
 800aa7a:	f7ff ffbd 	bl	800a9f8 <__sinit>
 800aa7e:	3648      	adds	r6, #72	; 0x48
 800aa80:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800aa84:	3b01      	subs	r3, #1
 800aa86:	d503      	bpl.n	800aa90 <__sfp+0x28>
 800aa88:	6833      	ldr	r3, [r6, #0]
 800aa8a:	b30b      	cbz	r3, 800aad0 <__sfp+0x68>
 800aa8c:	6836      	ldr	r6, [r6, #0]
 800aa8e:	e7f7      	b.n	800aa80 <__sfp+0x18>
 800aa90:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800aa94:	b9d5      	cbnz	r5, 800aacc <__sfp+0x64>
 800aa96:	4b16      	ldr	r3, [pc, #88]	; (800aaf0 <__sfp+0x88>)
 800aa98:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800aa9c:	60e3      	str	r3, [r4, #12]
 800aa9e:	6665      	str	r5, [r4, #100]	; 0x64
 800aaa0:	f000 f847 	bl	800ab32 <__retarget_lock_init_recursive>
 800aaa4:	f7ff ff96 	bl	800a9d4 <__sfp_lock_release>
 800aaa8:	2208      	movs	r2, #8
 800aaaa:	4629      	mov	r1, r5
 800aaac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800aab0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800aab4:	6025      	str	r5, [r4, #0]
 800aab6:	61a5      	str	r5, [r4, #24]
 800aab8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800aabc:	f7fb ff56 	bl	800696c <memset>
 800aac0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800aac4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800aac8:	4620      	mov	r0, r4
 800aaca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aacc:	3468      	adds	r4, #104	; 0x68
 800aace:	e7d9      	b.n	800aa84 <__sfp+0x1c>
 800aad0:	2104      	movs	r1, #4
 800aad2:	4638      	mov	r0, r7
 800aad4:	f7ff ff62 	bl	800a99c <__sfmoreglue>
 800aad8:	4604      	mov	r4, r0
 800aada:	6030      	str	r0, [r6, #0]
 800aadc:	2800      	cmp	r0, #0
 800aade:	d1d5      	bne.n	800aa8c <__sfp+0x24>
 800aae0:	f7ff ff78 	bl	800a9d4 <__sfp_lock_release>
 800aae4:	230c      	movs	r3, #12
 800aae6:	603b      	str	r3, [r7, #0]
 800aae8:	e7ee      	b.n	800aac8 <__sfp+0x60>
 800aaea:	bf00      	nop
 800aaec:	0800b160 	.word	0x0800b160
 800aaf0:	ffff0001 	.word	0xffff0001

0800aaf4 <_fwalk_reent>:
 800aaf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aaf8:	4606      	mov	r6, r0
 800aafa:	4688      	mov	r8, r1
 800aafc:	2700      	movs	r7, #0
 800aafe:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ab02:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ab06:	f1b9 0901 	subs.w	r9, r9, #1
 800ab0a:	d505      	bpl.n	800ab18 <_fwalk_reent+0x24>
 800ab0c:	6824      	ldr	r4, [r4, #0]
 800ab0e:	2c00      	cmp	r4, #0
 800ab10:	d1f7      	bne.n	800ab02 <_fwalk_reent+0xe>
 800ab12:	4638      	mov	r0, r7
 800ab14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab18:	89ab      	ldrh	r3, [r5, #12]
 800ab1a:	2b01      	cmp	r3, #1
 800ab1c:	d907      	bls.n	800ab2e <_fwalk_reent+0x3a>
 800ab1e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ab22:	3301      	adds	r3, #1
 800ab24:	d003      	beq.n	800ab2e <_fwalk_reent+0x3a>
 800ab26:	4629      	mov	r1, r5
 800ab28:	4630      	mov	r0, r6
 800ab2a:	47c0      	blx	r8
 800ab2c:	4307      	orrs	r7, r0
 800ab2e:	3568      	adds	r5, #104	; 0x68
 800ab30:	e7e9      	b.n	800ab06 <_fwalk_reent+0x12>

0800ab32 <__retarget_lock_init_recursive>:
 800ab32:	4770      	bx	lr

0800ab34 <__retarget_lock_acquire_recursive>:
 800ab34:	4770      	bx	lr

0800ab36 <__retarget_lock_release_recursive>:
 800ab36:	4770      	bx	lr

0800ab38 <__swhatbuf_r>:
 800ab38:	b570      	push	{r4, r5, r6, lr}
 800ab3a:	460e      	mov	r6, r1
 800ab3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab40:	4614      	mov	r4, r2
 800ab42:	2900      	cmp	r1, #0
 800ab44:	461d      	mov	r5, r3
 800ab46:	b096      	sub	sp, #88	; 0x58
 800ab48:	da08      	bge.n	800ab5c <__swhatbuf_r+0x24>
 800ab4a:	2200      	movs	r2, #0
 800ab4c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ab50:	602a      	str	r2, [r5, #0]
 800ab52:	061a      	lsls	r2, r3, #24
 800ab54:	d410      	bmi.n	800ab78 <__swhatbuf_r+0x40>
 800ab56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab5a:	e00e      	b.n	800ab7a <__swhatbuf_r+0x42>
 800ab5c:	466a      	mov	r2, sp
 800ab5e:	f000 f951 	bl	800ae04 <_fstat_r>
 800ab62:	2800      	cmp	r0, #0
 800ab64:	dbf1      	blt.n	800ab4a <__swhatbuf_r+0x12>
 800ab66:	9a01      	ldr	r2, [sp, #4]
 800ab68:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ab6c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ab70:	425a      	negs	r2, r3
 800ab72:	415a      	adcs	r2, r3
 800ab74:	602a      	str	r2, [r5, #0]
 800ab76:	e7ee      	b.n	800ab56 <__swhatbuf_r+0x1e>
 800ab78:	2340      	movs	r3, #64	; 0x40
 800ab7a:	2000      	movs	r0, #0
 800ab7c:	6023      	str	r3, [r4, #0]
 800ab7e:	b016      	add	sp, #88	; 0x58
 800ab80:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ab84 <__smakebuf_r>:
 800ab84:	898b      	ldrh	r3, [r1, #12]
 800ab86:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ab88:	079d      	lsls	r5, r3, #30
 800ab8a:	4606      	mov	r6, r0
 800ab8c:	460c      	mov	r4, r1
 800ab8e:	d507      	bpl.n	800aba0 <__smakebuf_r+0x1c>
 800ab90:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ab94:	6023      	str	r3, [r4, #0]
 800ab96:	6123      	str	r3, [r4, #16]
 800ab98:	2301      	movs	r3, #1
 800ab9a:	6163      	str	r3, [r4, #20]
 800ab9c:	b002      	add	sp, #8
 800ab9e:	bd70      	pop	{r4, r5, r6, pc}
 800aba0:	466a      	mov	r2, sp
 800aba2:	ab01      	add	r3, sp, #4
 800aba4:	f7ff ffc8 	bl	800ab38 <__swhatbuf_r>
 800aba8:	9900      	ldr	r1, [sp, #0]
 800abaa:	4605      	mov	r5, r0
 800abac:	4630      	mov	r0, r6
 800abae:	f7ff f9e5 	bl	8009f7c <_malloc_r>
 800abb2:	b948      	cbnz	r0, 800abc8 <__smakebuf_r+0x44>
 800abb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800abb8:	059a      	lsls	r2, r3, #22
 800abba:	d4ef      	bmi.n	800ab9c <__smakebuf_r+0x18>
 800abbc:	f023 0303 	bic.w	r3, r3, #3
 800abc0:	f043 0302 	orr.w	r3, r3, #2
 800abc4:	81a3      	strh	r3, [r4, #12]
 800abc6:	e7e3      	b.n	800ab90 <__smakebuf_r+0xc>
 800abc8:	4b0d      	ldr	r3, [pc, #52]	; (800ac00 <__smakebuf_r+0x7c>)
 800abca:	62b3      	str	r3, [r6, #40]	; 0x28
 800abcc:	89a3      	ldrh	r3, [r4, #12]
 800abce:	6020      	str	r0, [r4, #0]
 800abd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800abd4:	81a3      	strh	r3, [r4, #12]
 800abd6:	9b00      	ldr	r3, [sp, #0]
 800abd8:	6120      	str	r0, [r4, #16]
 800abda:	6163      	str	r3, [r4, #20]
 800abdc:	9b01      	ldr	r3, [sp, #4]
 800abde:	b15b      	cbz	r3, 800abf8 <__smakebuf_r+0x74>
 800abe0:	4630      	mov	r0, r6
 800abe2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800abe6:	f000 f91f 	bl	800ae28 <_isatty_r>
 800abea:	b128      	cbz	r0, 800abf8 <__smakebuf_r+0x74>
 800abec:	89a3      	ldrh	r3, [r4, #12]
 800abee:	f023 0303 	bic.w	r3, r3, #3
 800abf2:	f043 0301 	orr.w	r3, r3, #1
 800abf6:	81a3      	strh	r3, [r4, #12]
 800abf8:	89a0      	ldrh	r0, [r4, #12]
 800abfa:	4305      	orrs	r5, r0
 800abfc:	81a5      	strh	r5, [r4, #12]
 800abfe:	e7cd      	b.n	800ab9c <__smakebuf_r+0x18>
 800ac00:	0800a991 	.word	0x0800a991

0800ac04 <memmove>:
 800ac04:	4288      	cmp	r0, r1
 800ac06:	b510      	push	{r4, lr}
 800ac08:	eb01 0402 	add.w	r4, r1, r2
 800ac0c:	d902      	bls.n	800ac14 <memmove+0x10>
 800ac0e:	4284      	cmp	r4, r0
 800ac10:	4623      	mov	r3, r4
 800ac12:	d807      	bhi.n	800ac24 <memmove+0x20>
 800ac14:	1e43      	subs	r3, r0, #1
 800ac16:	42a1      	cmp	r1, r4
 800ac18:	d008      	beq.n	800ac2c <memmove+0x28>
 800ac1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ac1e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ac22:	e7f8      	b.n	800ac16 <memmove+0x12>
 800ac24:	4601      	mov	r1, r0
 800ac26:	4402      	add	r2, r0
 800ac28:	428a      	cmp	r2, r1
 800ac2a:	d100      	bne.n	800ac2e <memmove+0x2a>
 800ac2c:	bd10      	pop	{r4, pc}
 800ac2e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ac32:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ac36:	e7f7      	b.n	800ac28 <memmove+0x24>

0800ac38 <__malloc_lock>:
 800ac38:	4801      	ldr	r0, [pc, #4]	; (800ac40 <__malloc_lock+0x8>)
 800ac3a:	f7ff bf7b 	b.w	800ab34 <__retarget_lock_acquire_recursive>
 800ac3e:	bf00      	nop
 800ac40:	2000256c 	.word	0x2000256c

0800ac44 <__malloc_unlock>:
 800ac44:	4801      	ldr	r0, [pc, #4]	; (800ac4c <__malloc_unlock+0x8>)
 800ac46:	f7ff bf76 	b.w	800ab36 <__retarget_lock_release_recursive>
 800ac4a:	bf00      	nop
 800ac4c:	2000256c 	.word	0x2000256c

0800ac50 <_realloc_r>:
 800ac50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac54:	4680      	mov	r8, r0
 800ac56:	4614      	mov	r4, r2
 800ac58:	460e      	mov	r6, r1
 800ac5a:	b921      	cbnz	r1, 800ac66 <_realloc_r+0x16>
 800ac5c:	4611      	mov	r1, r2
 800ac5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ac62:	f7ff b98b 	b.w	8009f7c <_malloc_r>
 800ac66:	b92a      	cbnz	r2, 800ac74 <_realloc_r+0x24>
 800ac68:	f7ff f920 	bl	8009eac <_free_r>
 800ac6c:	4625      	mov	r5, r4
 800ac6e:	4628      	mov	r0, r5
 800ac70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac74:	f000 f8fa 	bl	800ae6c <_malloc_usable_size_r>
 800ac78:	4284      	cmp	r4, r0
 800ac7a:	4607      	mov	r7, r0
 800ac7c:	d802      	bhi.n	800ac84 <_realloc_r+0x34>
 800ac7e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ac82:	d812      	bhi.n	800acaa <_realloc_r+0x5a>
 800ac84:	4621      	mov	r1, r4
 800ac86:	4640      	mov	r0, r8
 800ac88:	f7ff f978 	bl	8009f7c <_malloc_r>
 800ac8c:	4605      	mov	r5, r0
 800ac8e:	2800      	cmp	r0, #0
 800ac90:	d0ed      	beq.n	800ac6e <_realloc_r+0x1e>
 800ac92:	42bc      	cmp	r4, r7
 800ac94:	4622      	mov	r2, r4
 800ac96:	4631      	mov	r1, r6
 800ac98:	bf28      	it	cs
 800ac9a:	463a      	movcs	r2, r7
 800ac9c:	f7fb fe58 	bl	8006950 <memcpy>
 800aca0:	4631      	mov	r1, r6
 800aca2:	4640      	mov	r0, r8
 800aca4:	f7ff f902 	bl	8009eac <_free_r>
 800aca8:	e7e1      	b.n	800ac6e <_realloc_r+0x1e>
 800acaa:	4635      	mov	r5, r6
 800acac:	e7df      	b.n	800ac6e <_realloc_r+0x1e>

0800acae <_raise_r>:
 800acae:	291f      	cmp	r1, #31
 800acb0:	b538      	push	{r3, r4, r5, lr}
 800acb2:	4604      	mov	r4, r0
 800acb4:	460d      	mov	r5, r1
 800acb6:	d904      	bls.n	800acc2 <_raise_r+0x14>
 800acb8:	2316      	movs	r3, #22
 800acba:	6003      	str	r3, [r0, #0]
 800acbc:	f04f 30ff 	mov.w	r0, #4294967295
 800acc0:	bd38      	pop	{r3, r4, r5, pc}
 800acc2:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800acc4:	b112      	cbz	r2, 800accc <_raise_r+0x1e>
 800acc6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800acca:	b94b      	cbnz	r3, 800ace0 <_raise_r+0x32>
 800accc:	4620      	mov	r0, r4
 800acce:	f000 f831 	bl	800ad34 <_getpid_r>
 800acd2:	462a      	mov	r2, r5
 800acd4:	4601      	mov	r1, r0
 800acd6:	4620      	mov	r0, r4
 800acd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800acdc:	f000 b818 	b.w	800ad10 <_kill_r>
 800ace0:	2b01      	cmp	r3, #1
 800ace2:	d00a      	beq.n	800acfa <_raise_r+0x4c>
 800ace4:	1c59      	adds	r1, r3, #1
 800ace6:	d103      	bne.n	800acf0 <_raise_r+0x42>
 800ace8:	2316      	movs	r3, #22
 800acea:	6003      	str	r3, [r0, #0]
 800acec:	2001      	movs	r0, #1
 800acee:	e7e7      	b.n	800acc0 <_raise_r+0x12>
 800acf0:	2400      	movs	r4, #0
 800acf2:	4628      	mov	r0, r5
 800acf4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800acf8:	4798      	blx	r3
 800acfa:	2000      	movs	r0, #0
 800acfc:	e7e0      	b.n	800acc0 <_raise_r+0x12>
	...

0800ad00 <raise>:
 800ad00:	4b02      	ldr	r3, [pc, #8]	; (800ad0c <raise+0xc>)
 800ad02:	4601      	mov	r1, r0
 800ad04:	6818      	ldr	r0, [r3, #0]
 800ad06:	f7ff bfd2 	b.w	800acae <_raise_r>
 800ad0a:	bf00      	nop
 800ad0c:	2000021c 	.word	0x2000021c

0800ad10 <_kill_r>:
 800ad10:	b538      	push	{r3, r4, r5, lr}
 800ad12:	2300      	movs	r3, #0
 800ad14:	4d06      	ldr	r5, [pc, #24]	; (800ad30 <_kill_r+0x20>)
 800ad16:	4604      	mov	r4, r0
 800ad18:	4608      	mov	r0, r1
 800ad1a:	4611      	mov	r1, r2
 800ad1c:	602b      	str	r3, [r5, #0]
 800ad1e:	f7f6 fe5f 	bl	80019e0 <_kill>
 800ad22:	1c43      	adds	r3, r0, #1
 800ad24:	d102      	bne.n	800ad2c <_kill_r+0x1c>
 800ad26:	682b      	ldr	r3, [r5, #0]
 800ad28:	b103      	cbz	r3, 800ad2c <_kill_r+0x1c>
 800ad2a:	6023      	str	r3, [r4, #0]
 800ad2c:	bd38      	pop	{r3, r4, r5, pc}
 800ad2e:	bf00      	nop
 800ad30:	20002570 	.word	0x20002570

0800ad34 <_getpid_r>:
 800ad34:	f7f6 be52 	b.w	80019dc <_getpid>

0800ad38 <__sread>:
 800ad38:	b510      	push	{r4, lr}
 800ad3a:	460c      	mov	r4, r1
 800ad3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad40:	f000 f89c 	bl	800ae7c <_read_r>
 800ad44:	2800      	cmp	r0, #0
 800ad46:	bfab      	itete	ge
 800ad48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ad4a:	89a3      	ldrhlt	r3, [r4, #12]
 800ad4c:	181b      	addge	r3, r3, r0
 800ad4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ad52:	bfac      	ite	ge
 800ad54:	6563      	strge	r3, [r4, #84]	; 0x54
 800ad56:	81a3      	strhlt	r3, [r4, #12]
 800ad58:	bd10      	pop	{r4, pc}

0800ad5a <__swrite>:
 800ad5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad5e:	461f      	mov	r7, r3
 800ad60:	898b      	ldrh	r3, [r1, #12]
 800ad62:	4605      	mov	r5, r0
 800ad64:	05db      	lsls	r3, r3, #23
 800ad66:	460c      	mov	r4, r1
 800ad68:	4616      	mov	r6, r2
 800ad6a:	d505      	bpl.n	800ad78 <__swrite+0x1e>
 800ad6c:	2302      	movs	r3, #2
 800ad6e:	2200      	movs	r2, #0
 800ad70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad74:	f000 f868 	bl	800ae48 <_lseek_r>
 800ad78:	89a3      	ldrh	r3, [r4, #12]
 800ad7a:	4632      	mov	r2, r6
 800ad7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ad80:	81a3      	strh	r3, [r4, #12]
 800ad82:	4628      	mov	r0, r5
 800ad84:	463b      	mov	r3, r7
 800ad86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ad8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad8e:	f000 b817 	b.w	800adc0 <_write_r>

0800ad92 <__sseek>:
 800ad92:	b510      	push	{r4, lr}
 800ad94:	460c      	mov	r4, r1
 800ad96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad9a:	f000 f855 	bl	800ae48 <_lseek_r>
 800ad9e:	1c43      	adds	r3, r0, #1
 800ada0:	89a3      	ldrh	r3, [r4, #12]
 800ada2:	bf15      	itete	ne
 800ada4:	6560      	strne	r0, [r4, #84]	; 0x54
 800ada6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800adaa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800adae:	81a3      	strheq	r3, [r4, #12]
 800adb0:	bf18      	it	ne
 800adb2:	81a3      	strhne	r3, [r4, #12]
 800adb4:	bd10      	pop	{r4, pc}

0800adb6 <__sclose>:
 800adb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800adba:	f000 b813 	b.w	800ade4 <_close_r>
	...

0800adc0 <_write_r>:
 800adc0:	b538      	push	{r3, r4, r5, lr}
 800adc2:	4604      	mov	r4, r0
 800adc4:	4608      	mov	r0, r1
 800adc6:	4611      	mov	r1, r2
 800adc8:	2200      	movs	r2, #0
 800adca:	4d05      	ldr	r5, [pc, #20]	; (800ade0 <_write_r+0x20>)
 800adcc:	602a      	str	r2, [r5, #0]
 800adce:	461a      	mov	r2, r3
 800add0:	f7f6 fe21 	bl	8001a16 <_write>
 800add4:	1c43      	adds	r3, r0, #1
 800add6:	d102      	bne.n	800adde <_write_r+0x1e>
 800add8:	682b      	ldr	r3, [r5, #0]
 800adda:	b103      	cbz	r3, 800adde <_write_r+0x1e>
 800addc:	6023      	str	r3, [r4, #0]
 800adde:	bd38      	pop	{r3, r4, r5, pc}
 800ade0:	20002570 	.word	0x20002570

0800ade4 <_close_r>:
 800ade4:	b538      	push	{r3, r4, r5, lr}
 800ade6:	2300      	movs	r3, #0
 800ade8:	4d05      	ldr	r5, [pc, #20]	; (800ae00 <_close_r+0x1c>)
 800adea:	4604      	mov	r4, r0
 800adec:	4608      	mov	r0, r1
 800adee:	602b      	str	r3, [r5, #0]
 800adf0:	f7f6 fe1e 	bl	8001a30 <_close>
 800adf4:	1c43      	adds	r3, r0, #1
 800adf6:	d102      	bne.n	800adfe <_close_r+0x1a>
 800adf8:	682b      	ldr	r3, [r5, #0]
 800adfa:	b103      	cbz	r3, 800adfe <_close_r+0x1a>
 800adfc:	6023      	str	r3, [r4, #0]
 800adfe:	bd38      	pop	{r3, r4, r5, pc}
 800ae00:	20002570 	.word	0x20002570

0800ae04 <_fstat_r>:
 800ae04:	b538      	push	{r3, r4, r5, lr}
 800ae06:	2300      	movs	r3, #0
 800ae08:	4d06      	ldr	r5, [pc, #24]	; (800ae24 <_fstat_r+0x20>)
 800ae0a:	4604      	mov	r4, r0
 800ae0c:	4608      	mov	r0, r1
 800ae0e:	4611      	mov	r1, r2
 800ae10:	602b      	str	r3, [r5, #0]
 800ae12:	f7f6 fe10 	bl	8001a36 <_fstat>
 800ae16:	1c43      	adds	r3, r0, #1
 800ae18:	d102      	bne.n	800ae20 <_fstat_r+0x1c>
 800ae1a:	682b      	ldr	r3, [r5, #0]
 800ae1c:	b103      	cbz	r3, 800ae20 <_fstat_r+0x1c>
 800ae1e:	6023      	str	r3, [r4, #0]
 800ae20:	bd38      	pop	{r3, r4, r5, pc}
 800ae22:	bf00      	nop
 800ae24:	20002570 	.word	0x20002570

0800ae28 <_isatty_r>:
 800ae28:	b538      	push	{r3, r4, r5, lr}
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	4d05      	ldr	r5, [pc, #20]	; (800ae44 <_isatty_r+0x1c>)
 800ae2e:	4604      	mov	r4, r0
 800ae30:	4608      	mov	r0, r1
 800ae32:	602b      	str	r3, [r5, #0]
 800ae34:	f7f6 fe04 	bl	8001a40 <_isatty>
 800ae38:	1c43      	adds	r3, r0, #1
 800ae3a:	d102      	bne.n	800ae42 <_isatty_r+0x1a>
 800ae3c:	682b      	ldr	r3, [r5, #0]
 800ae3e:	b103      	cbz	r3, 800ae42 <_isatty_r+0x1a>
 800ae40:	6023      	str	r3, [r4, #0]
 800ae42:	bd38      	pop	{r3, r4, r5, pc}
 800ae44:	20002570 	.word	0x20002570

0800ae48 <_lseek_r>:
 800ae48:	b538      	push	{r3, r4, r5, lr}
 800ae4a:	4604      	mov	r4, r0
 800ae4c:	4608      	mov	r0, r1
 800ae4e:	4611      	mov	r1, r2
 800ae50:	2200      	movs	r2, #0
 800ae52:	4d05      	ldr	r5, [pc, #20]	; (800ae68 <_lseek_r+0x20>)
 800ae54:	602a      	str	r2, [r5, #0]
 800ae56:	461a      	mov	r2, r3
 800ae58:	f7f6 fdf4 	bl	8001a44 <_lseek>
 800ae5c:	1c43      	adds	r3, r0, #1
 800ae5e:	d102      	bne.n	800ae66 <_lseek_r+0x1e>
 800ae60:	682b      	ldr	r3, [r5, #0]
 800ae62:	b103      	cbz	r3, 800ae66 <_lseek_r+0x1e>
 800ae64:	6023      	str	r3, [r4, #0]
 800ae66:	bd38      	pop	{r3, r4, r5, pc}
 800ae68:	20002570 	.word	0x20002570

0800ae6c <_malloc_usable_size_r>:
 800ae6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae70:	1f18      	subs	r0, r3, #4
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	bfbc      	itt	lt
 800ae76:	580b      	ldrlt	r3, [r1, r0]
 800ae78:	18c0      	addlt	r0, r0, r3
 800ae7a:	4770      	bx	lr

0800ae7c <_read_r>:
 800ae7c:	b538      	push	{r3, r4, r5, lr}
 800ae7e:	4604      	mov	r4, r0
 800ae80:	4608      	mov	r0, r1
 800ae82:	4611      	mov	r1, r2
 800ae84:	2200      	movs	r2, #0
 800ae86:	4d05      	ldr	r5, [pc, #20]	; (800ae9c <_read_r+0x20>)
 800ae88:	602a      	str	r2, [r5, #0]
 800ae8a:	461a      	mov	r2, r3
 800ae8c:	f7f6 fdb6 	bl	80019fc <_read>
 800ae90:	1c43      	adds	r3, r0, #1
 800ae92:	d102      	bne.n	800ae9a <_read_r+0x1e>
 800ae94:	682b      	ldr	r3, [r5, #0]
 800ae96:	b103      	cbz	r3, 800ae9a <_read_r+0x1e>
 800ae98:	6023      	str	r3, [r4, #0]
 800ae9a:	bd38      	pop	{r3, r4, r5, pc}
 800ae9c:	20002570 	.word	0x20002570

0800aea0 <_init>:
 800aea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aea2:	bf00      	nop
 800aea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aea6:	bc08      	pop	{r3}
 800aea8:	469e      	mov	lr, r3
 800aeaa:	4770      	bx	lr

0800aeac <_fini>:
 800aeac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aeae:	bf00      	nop
 800aeb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aeb2:	bc08      	pop	{r3}
 800aeb4:	469e      	mov	lr, r3
 800aeb6:	4770      	bx	lr
