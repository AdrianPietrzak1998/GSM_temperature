
Temperature_GMS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b330  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000880  0800b440  0800b440  0001b440  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bcc0  0800bcc0  00020364  2**0
                  CONTENTS
  4 .ARM          00000000  0800bcc0  0800bcc0  00020364  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bcc0  0800bcc0  00020364  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bcc0  0800bcc0  0001bcc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bcc4  0800bcc4  0001bcc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000364  20000000  0800bcc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002324  20000368  0800c02c  00020368  2**3
                  ALLOC
 10 ._user_heap_stack 00001804  2000268c  0800c02c  0002268c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020364  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ee73  00000000  00000000  0002038d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005300  00000000  00000000  0003f200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00012ec8  00000000  00000000  00044500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001658  00000000  00000000  000573c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000018b0  00000000  00000000  00058a20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001db0b  00000000  00000000  0005a2d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002404d  00000000  00000000  00077ddb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009263c  00000000  00000000  0009be28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012e464  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004e34  00000000  00000000  0012e4b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000368 	.word	0x20000368
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b428 	.word	0x0800b428

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000036c 	.word	0x2000036c
 800014c:	0800b428 	.word	0x0800b428

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2uiz>:
 8000a9c:	004a      	lsls	r2, r1, #1
 8000a9e:	d211      	bcs.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d211      	bcs.n	8000aca <__aeabi_d2uiz+0x2e>
 8000aa6:	d50d      	bpl.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d40e      	bmi.n	8000ad0 <__aeabi_d2uiz+0x34>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d102      	bne.n	8000ad6 <__aeabi_d2uiz+0x3a>
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	4770      	bx	lr
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	4770      	bx	lr

08000adc <__aeabi_d2lz>:
 8000adc:	b538      	push	{r3, r4, r5, lr}
 8000ade:	4605      	mov	r5, r0
 8000ae0:	460c      	mov	r4, r1
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	4628      	mov	r0, r5
 8000ae8:	4621      	mov	r1, r4
 8000aea:	f7ff ff71 	bl	80009d0 <__aeabi_dcmplt>
 8000aee:	b928      	cbnz	r0, 8000afc <__aeabi_d2lz+0x20>
 8000af0:	4628      	mov	r0, r5
 8000af2:	4621      	mov	r1, r4
 8000af4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000af8:	f000 b80a 	b.w	8000b10 <__aeabi_d2ulz>
 8000afc:	4628      	mov	r0, r5
 8000afe:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000b02:	f000 f805 	bl	8000b10 <__aeabi_d2ulz>
 8000b06:	4240      	negs	r0, r0
 8000b08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b0c:	bd38      	pop	{r3, r4, r5, pc}
 8000b0e:	bf00      	nop

08000b10 <__aeabi_d2ulz>:
 8000b10:	b5d0      	push	{r4, r6, r7, lr}
 8000b12:	2200      	movs	r2, #0
 8000b14:	4b0b      	ldr	r3, [pc, #44]	; (8000b44 <__aeabi_d2ulz+0x34>)
 8000b16:	4606      	mov	r6, r0
 8000b18:	460f      	mov	r7, r1
 8000b1a:	f7ff fce7 	bl	80004ec <__aeabi_dmul>
 8000b1e:	f7ff ffbd 	bl	8000a9c <__aeabi_d2uiz>
 8000b22:	4604      	mov	r4, r0
 8000b24:	f7ff fc68 	bl	80003f8 <__aeabi_ui2d>
 8000b28:	2200      	movs	r2, #0
 8000b2a:	4b07      	ldr	r3, [pc, #28]	; (8000b48 <__aeabi_d2ulz+0x38>)
 8000b2c:	f7ff fcde 	bl	80004ec <__aeabi_dmul>
 8000b30:	4602      	mov	r2, r0
 8000b32:	460b      	mov	r3, r1
 8000b34:	4630      	mov	r0, r6
 8000b36:	4639      	mov	r1, r7
 8000b38:	f7ff fb20 	bl	800017c <__aeabi_dsub>
 8000b3c:	f7ff ffae 	bl	8000a9c <__aeabi_d2uiz>
 8000b40:	4621      	mov	r1, r4
 8000b42:	bdd0      	pop	{r4, r6, r7, pc}
 8000b44:	3df00000 	.word	0x3df00000
 8000b48:	41f00000 	.word	0x41f00000

08000b4c <byte_crc>:
}

static uint8_t byte_crc(uint8_t crc, uint8_t byte)
{
  int i;
  for (i = 0; i < 8; i++) {
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	e001      	b.n	8000b54 <byte_crc+0x8>
    uint8_t b = crc ^ byte;
    crc >>= 1;
    if (b & 0x01)
      crc ^= 0x8c;
    byte >>= 1;
 8000b50:	0849      	lsrs	r1, r1, #1
  for (i = 0; i < 8; i++) {
 8000b52:	3201      	adds	r2, #1
 8000b54:	2a07      	cmp	r2, #7
 8000b56:	dc0a      	bgt.n	8000b6e <byte_crc+0x22>
    uint8_t b = crc ^ byte;
 8000b58:	ea80 0301 	eor.w	r3, r0, r1
    if (b & 0x01)
 8000b5c:	f013 0f01 	tst.w	r3, #1
 8000b60:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8000b64:	d0f4      	beq.n	8000b50 <byte_crc+0x4>
      crc ^= 0x8c;
 8000b66:	f080 008c 	eor.w	r0, r0, #140	; 0x8c
 8000b6a:	b2c0      	uxtb	r0, r0
 8000b6c:	e7f0      	b.n	8000b50 <byte_crc+0x4>
  }
  return crc;
}
 8000b6e:	4770      	bx	lr

08000b70 <write_bit>:
{
 8000b70:	b500      	push	{lr}
 8000b72:	b083      	sub	sp, #12
  if (value)
 8000b74:	b168      	cbz	r0, 8000b92 <write_bit+0x22>
    uint8_t data_out = 0xff;
 8000b76:	23ff      	movs	r3, #255	; 0xff
 8000b78:	f88d 3007 	strb.w	r3, [sp, #7]
    HAL_UART_Transmit(&UART, &data_out, 1, HAL_MAX_DELAY);
 8000b7c:	f04f 33ff 	mov.w	r3, #4294967295
 8000b80:	2201      	movs	r2, #1
 8000b82:	f10d 0107 	add.w	r1, sp, #7
 8000b86:	4809      	ldr	r0, [pc, #36]	; (8000bac <write_bit+0x3c>)
 8000b88:	f003 fe70 	bl	800486c <HAL_UART_Transmit>
}
 8000b8c:	b003      	add	sp, #12
 8000b8e:	f85d fb04 	ldr.w	pc, [sp], #4
    uint8_t data_out = 0x0;
 8000b92:	2300      	movs	r3, #0
 8000b94:	f88d 3007 	strb.w	r3, [sp, #7]
    HAL_UART_Transmit(&UART, &data_out, 1, HAL_MAX_DELAY);
 8000b98:	f04f 33ff 	mov.w	r3, #4294967295
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	f10d 0107 	add.w	r1, sp, #7
 8000ba2:	4802      	ldr	r0, [pc, #8]	; (8000bac <write_bit+0x3c>)
 8000ba4:	f003 fe62 	bl	800486c <HAL_UART_Transmit>
}
 8000ba8:	e7f0      	b.n	8000b8c <write_bit+0x1c>
 8000baa:	bf00      	nop
 8000bac:	2000183c 	.word	0x2000183c

08000bb0 <read_bit>:
{
 8000bb0:	b510      	push	{r4, lr}
 8000bb2:	b082      	sub	sp, #8
	uint8_t data_out = 0xff;
 8000bb4:	23ff      	movs	r3, #255	; 0xff
 8000bb6:	f88d 3007 	strb.w	r3, [sp, #7]
	uint8_t data_in = 0x0;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	f88d 3006 	strb.w	r3, [sp, #6]
	if(USARTn -> SR & (1<<5))
 8000bc0:	4b0e      	ldr	r3, [pc, #56]	; (8000bfc <read_bit+0x4c>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	f013 0f20 	tst.w	r3, #32
 8000bc8:	d001      	beq.n	8000bce <read_bit+0x1e>
		USARTn -> DR;
 8000bca:	4b0c      	ldr	r3, [pc, #48]	; (8000bfc <read_bit+0x4c>)
 8000bcc:	685b      	ldr	r3, [r3, #4]
	HAL_UART_Transmit(&UART, &data_out, 1, HAL_MAX_DELAY);
 8000bce:	4c0c      	ldr	r4, [pc, #48]	; (8000c00 <read_bit+0x50>)
 8000bd0:	f04f 33ff 	mov.w	r3, #4294967295
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	f10d 0107 	add.w	r1, sp, #7
 8000bda:	4620      	mov	r0, r4
 8000bdc:	f003 fe46 	bl	800486c <HAL_UART_Transmit>
	HAL_UART_Receive(&UART, &data_in, 1, HAL_MAX_DELAY);
 8000be0:	f04f 33ff 	mov.w	r3, #4294967295
 8000be4:	2201      	movs	r2, #1
 8000be6:	f10d 0106 	add.w	r1, sp, #6
 8000bea:	4620      	mov	r0, r4
 8000bec:	f003 feaa 	bl	8004944 <HAL_UART_Receive>
	return data_in & 0x01;
 8000bf0:	f89d 0006 	ldrb.w	r0, [sp, #6]
}
 8000bf4:	f000 0001 	and.w	r0, r0, #1
 8000bf8:	b002      	add	sp, #8
 8000bfa:	bd10      	pop	{r4, pc}
 8000bfc:	40004400 	.word	0x40004400
 8000c00:	2000183c 	.word	0x2000183c

08000c04 <set_baudrate>:
{
 8000c04:	b508      	push	{r3, lr}
	  huart2.Instance = USART2;
 8000c06:	4b0a      	ldr	r3, [pc, #40]	; (8000c30 <set_baudrate+0x2c>)
 8000c08:	4a0a      	ldr	r2, [pc, #40]	; (8000c34 <set_baudrate+0x30>)
 8000c0a:	601a      	str	r2, [r3, #0]
	  huart2.Init.BaudRate = baudrate;
 8000c0c:	6058      	str	r0, [r3, #4]
	  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c0e:	2200      	movs	r2, #0
 8000c10:	609a      	str	r2, [r3, #8]
	  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c12:	60da      	str	r2, [r3, #12]
	  huart2.Init.Parity = UART_PARITY_NONE;
 8000c14:	611a      	str	r2, [r3, #16]
	  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c16:	210c      	movs	r1, #12
 8000c18:	6159      	str	r1, [r3, #20]
	  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c1a:	619a      	str	r2, [r3, #24]
	  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c1c:	61da      	str	r2, [r3, #28]
	  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f003 fdef 	bl	8004802 <HAL_HalfDuplex_Init>
 8000c24:	b900      	cbnz	r0, 8000c28 <set_baudrate+0x24>
}
 8000c26:	bd08      	pop	{r3, pc}
	    Error_Handler();
 8000c28:	f000 fd60 	bl	80016ec <Error_Handler>
}
 8000c2c:	e7fb      	b.n	8000c26 <set_baudrate+0x22>
 8000c2e:	bf00      	nop
 8000c30:	2000183c 	.word	0x2000183c
 8000c34:	40004400 	.word	0x40004400

08000c38 <wire_reset>:
{
 8000c38:	b510      	push	{r4, lr}
 8000c3a:	b082      	sub	sp, #8
	uint8_t data_out = 0xF0;
 8000c3c:	23f0      	movs	r3, #240	; 0xf0
 8000c3e:	f88d 3007 	strb.w	r3, [sp, #7]
	uint8_t data_in = 0;
 8000c42:	2300      	movs	r3, #0
 8000c44:	f88d 3006 	strb.w	r3, [sp, #6]
	set_baudrate(9600);
 8000c48:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8000c4c:	f7ff ffda 	bl	8000c04 <set_baudrate>
	HAL_UART_Transmit(&UART, &data_out, 1, HAL_MAX_DELAY);
 8000c50:	4c0e      	ldr	r4, [pc, #56]	; (8000c8c <wire_reset+0x54>)
 8000c52:	f04f 33ff 	mov.w	r3, #4294967295
 8000c56:	2201      	movs	r2, #1
 8000c58:	f10d 0107 	add.w	r1, sp, #7
 8000c5c:	4620      	mov	r0, r4
 8000c5e:	f003 fe05 	bl	800486c <HAL_UART_Transmit>
	HAL_UART_Receive(&UART, &data_in, 1, HAL_MAX_DELAY);
 8000c62:	f04f 33ff 	mov.w	r3, #4294967295
 8000c66:	2201      	movs	r2, #1
 8000c68:	f10d 0106 	add.w	r1, sp, #6
 8000c6c:	4620      	mov	r0, r4
 8000c6e:	f003 fe69 	bl	8004944 <HAL_UART_Receive>
	set_baudrate(115200);
 8000c72:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 8000c76:	f7ff ffc5 	bl	8000c04 <set_baudrate>
	if (data_in != 0xF0)
 8000c7a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8000c7e:	2bf0      	cmp	r3, #240	; 0xf0
 8000c80:	d002      	beq.n	8000c88 <wire_reset+0x50>
		return HAL_OK;
 8000c82:	2000      	movs	r0, #0
}
 8000c84:	b002      	add	sp, #8
 8000c86:	bd10      	pop	{r4, pc}
		return HAL_ERROR;
 8000c88:	2001      	movs	r0, #1
 8000c8a:	e7fb      	b.n	8000c84 <wire_reset+0x4c>
 8000c8c:	2000183c 	.word	0x2000183c

08000c90 <wire_read>:
{
 8000c90:	b538      	push	{r3, r4, r5, lr}
  for (i = 0; i < 8; i++)
 8000c92:	2500      	movs	r5, #0
  uint8_t value = 0;
 8000c94:	462c      	mov	r4, r5
  for (i = 0; i < 8; i++)
 8000c96:	e000      	b.n	8000c9a <wire_read+0xa>
 8000c98:	3501      	adds	r5, #1
 8000c9a:	2d07      	cmp	r5, #7
 8000c9c:	dc08      	bgt.n	8000cb0 <wire_read+0x20>
    value >>= 1;
 8000c9e:	0864      	lsrs	r4, r4, #1
    if (read_bit())
 8000ca0:	f7ff ff86 	bl	8000bb0 <read_bit>
 8000ca4:	2800      	cmp	r0, #0
 8000ca6:	d0f7      	beq.n	8000c98 <wire_read+0x8>
      value |= 0x80;
 8000ca8:	f064 047f 	orn	r4, r4, #127	; 0x7f
 8000cac:	b2e4      	uxtb	r4, r4
 8000cae:	e7f3      	b.n	8000c98 <wire_read+0x8>
}
 8000cb0:	4620      	mov	r0, r4
 8000cb2:	bd38      	pop	{r3, r4, r5, pc}

08000cb4 <wire_write>:
{
 8000cb4:	b538      	push	{r3, r4, r5, lr}
 8000cb6:	4604      	mov	r4, r0
  for (i = 0; i < 8; i++) {
 8000cb8:	2500      	movs	r5, #0
 8000cba:	e005      	b.n	8000cc8 <wire_write+0x14>
    write_bit(byte & 0x01);
 8000cbc:	f004 0001 	and.w	r0, r4, #1
 8000cc0:	f7ff ff56 	bl	8000b70 <write_bit>
    byte >>= 1;
 8000cc4:	0864      	lsrs	r4, r4, #1
  for (i = 0; i < 8; i++) {
 8000cc6:	3501      	adds	r5, #1
 8000cc8:	2d07      	cmp	r5, #7
 8000cca:	ddf7      	ble.n	8000cbc <wire_write+0x8>
}
 8000ccc:	bd38      	pop	{r3, r4, r5, pc}

08000cce <wire_crc>:

uint8_t wire_crc(const uint8_t* data, int len)
{
 8000cce:	b570      	push	{r4, r5, r6, lr}
 8000cd0:	4606      	mov	r6, r0
 8000cd2:	460d      	mov	r5, r1
  int i;
    uint8_t crc = 0;
 8000cd4:	2000      	movs	r0, #0

    for (i = 0; i < len; i++)
 8000cd6:	4604      	mov	r4, r0
 8000cd8:	e003      	b.n	8000ce2 <wire_crc+0x14>
      crc = byte_crc(crc, data[i]);
 8000cda:	5d31      	ldrb	r1, [r6, r4]
 8000cdc:	f7ff ff36 	bl	8000b4c <byte_crc>
    for (i = 0; i < len; i++)
 8000ce0:	3401      	adds	r4, #1
 8000ce2:	42ac      	cmp	r4, r5
 8000ce4:	dbf9      	blt.n	8000cda <wire_crc+0xc>

    return crc;
}
 8000ce6:	bd70      	pop	{r4, r5, r6, pc}

08000ce8 <GetPage>:
 * Some STM32F103C8 have 64 KB FLASH Memory, so I guess they have Page 0 to Page 63 only.
 */

/* FLASH_PAGE_SIZE should be able to get the size of the Page according to the controller */
static uint32_t GetPage(uint32_t Address)
{
 8000ce8:	4601      	mov	r1, r0
  for (int indx=0; indx<128; indx++)
 8000cea:	2300      	movs	r3, #0
 8000cec:	e000      	b.n	8000cf0 <GetPage+0x8>
 8000cee:	3301      	adds	r3, #1
 8000cf0:	2b7f      	cmp	r3, #127	; 0x7f
 8000cf2:	dc0c      	bgt.n	8000d0e <GetPage+0x26>
  {
	  if((Address < (0x08000000 + (FLASH_PAGE_SIZE *(indx+1))) ) && (Address >= (0x08000000 + FLASH_PAGE_SIZE*indx)))
 8000cf4:	f503 3200 	add.w	r2, r3, #131072	; 0x20000
 8000cf8:	3201      	adds	r2, #1
 8000cfa:	ebb1 2f82 	cmp.w	r1, r2, lsl #10
 8000cfe:	d2f6      	bcs.n	8000cee <GetPage+0x6>
 8000d00:	f503 3200 	add.w	r2, r3, #131072	; 0x20000
 8000d04:	0290      	lsls	r0, r2, #10
 8000d06:	ebb1 2f82 	cmp.w	r1, r2, lsl #10
 8000d0a:	d3f0      	bcc.n	8000cee <GetPage+0x6>
		  return (0x08000000 + FLASH_PAGE_SIZE*indx);
	  }
  }

  return 0;
}
 8000d0c:	4770      	bx	lr
  return 0;
 8000d0e:	2000      	movs	r0, #0
 8000d10:	e7fc      	b.n	8000d0c <GetPage+0x24>
	...

08000d14 <Flash_Write_Data>:
   float float_variable =  thing.a;
   return float_variable;
}

uint32_t Flash_Write_Data (uint32_t StartPageAddress, uint32_t *Data, uint16_t numberofwords)
{
 8000d14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d16:	b083      	sub	sp, #12
 8000d18:	4605      	mov	r5, r0
 8000d1a:	460f      	mov	r7, r1
 8000d1c:	4616      	mov	r6, r2
	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t PAGEError;
	int sofar=0;

	  /* Unlock the Flash to enable the flash control register access *************/
	   HAL_FLASH_Unlock();
 8000d1e:	f001 fc51 	bl	80025c4 <HAL_FLASH_Unlock>

	   /* Erase the user Flash area*/

	  uint32_t StartPage = GetPage(StartPageAddress);
 8000d22:	4628      	mov	r0, r5
 8000d24:	f7ff ffe0 	bl	8000ce8 <GetPage>
 8000d28:	4604      	mov	r4, r0
	  uint32_t EndPageAdress = StartPageAddress + numberofwords*4;
	  uint32_t EndPage = GetPage(EndPageAdress);
 8000d2a:	eb05 0086 	add.w	r0, r5, r6, lsl #2
 8000d2e:	f7ff ffdb 	bl	8000ce8 <GetPage>
 8000d32:	4603      	mov	r3, r0

	   /* Fill EraseInit structure*/
	   EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 8000d34:	4812      	ldr	r0, [pc, #72]	; (8000d80 <Flash_Write_Data+0x6c>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	6002      	str	r2, [r0, #0]
	   EraseInitStruct.PageAddress = StartPage;
 8000d3a:	6084      	str	r4, [r0, #8]
	   EraseInitStruct.NbPages     = ((EndPage - StartPage)/FLASH_PAGE_SIZE) +1;
 8000d3c:	1b1b      	subs	r3, r3, r4
 8000d3e:	0a9b      	lsrs	r3, r3, #10
 8000d40:	3301      	adds	r3, #1
 8000d42:	60c3      	str	r3, [r0, #12]

	   if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)
 8000d44:	a901      	add	r1, sp, #4
 8000d46:	f001 fd0f 	bl	8002768 <HAL_FLASHEx_Erase>
 8000d4a:	b968      	cbnz	r0, 8000d68 <Flash_Write_Data+0x54>
	int sofar=0;
 8000d4c:	2400      	movs	r4, #0
		  return HAL_FLASH_GetError ();
	   }

	   /* Program the user Flash area word by word*/

	   while (sofar<numberofwords)
 8000d4e:	42a6      	cmp	r6, r4
 8000d50:	dd10      	ble.n	8000d74 <Flash_Write_Data+0x60>
	   {
	     if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartPageAddress, Data[sofar]) == HAL_OK)
 8000d52:	f857 2024 	ldr.w	r2, [r7, r4, lsl #2]
 8000d56:	2300      	movs	r3, #0
 8000d58:	4629      	mov	r1, r5
 8000d5a:	2002      	movs	r0, #2
 8000d5c:	f001 fc90 	bl	8002680 <HAL_FLASH_Program>
 8000d60:	b928      	cbnz	r0, 8000d6e <Flash_Write_Data+0x5a>
	     {
	    	 StartPageAddress += 4;  // use StartPageAddress += 2 for half word and 8 for double word
 8000d62:	3504      	adds	r5, #4
	    	 sofar++;
 8000d64:	3401      	adds	r4, #1
 8000d66:	e7f2      	b.n	8000d4e <Flash_Write_Data+0x3a>
		  return HAL_FLASH_GetError ();
 8000d68:	f001 fc50 	bl	800260c <HAL_FLASH_GetError>
 8000d6c:	e005      	b.n	8000d7a <Flash_Write_Data+0x66>
	     }
	     else
	     {
	       /* Error occurred while writing data in Flash memory*/
	    	 return HAL_FLASH_GetError ();
 8000d6e:	f001 fc4d 	bl	800260c <HAL_FLASH_GetError>
 8000d72:	e002      	b.n	8000d7a <Flash_Write_Data+0x66>
	     }
	   }

	   /* Lock the Flash to disable the flash control register access (recommended
	      to protect the FLASH memory against possible unwanted operation) *********/
	   HAL_FLASH_Lock();
 8000d74:	f001 fc40 	bl	80025f8 <HAL_FLASH_Lock>

	   return 0;
 8000d78:	2000      	movs	r0, #0
}
 8000d7a:	b003      	add	sp, #12
 8000d7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	20000384 	.word	0x20000384

08000d84 <send_cmd>:
  else
    return HAL_ERROR;
}

static HAL_StatusTypeDef send_cmd(const uint8_t* rom_code, uint8_t cmd)
{
 8000d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d86:	4605      	mov	r5, r0
 8000d88:	460e      	mov	r6, r1
  int i;

  if (wire_reset() != HAL_OK)
 8000d8a:	f7ff ff55 	bl	8000c38 <wire_reset>
 8000d8e:	b9a8      	cbnz	r0, 8000dbc <send_cmd+0x38>
 8000d90:	4607      	mov	r7, r0
    return HAL_ERROR;

  if (!rom_code) {
 8000d92:	b125      	cbz	r5, 8000d9e <send_cmd+0x1a>
    wire_write(DS18B20_SKIP_ROM);
  } else {
    wire_write(DS18B20_MATCH_ROM);
 8000d94:	2055      	movs	r0, #85	; 0x55
 8000d96:	f7ff ff8d 	bl	8000cb4 <wire_write>
    for (i = 0; i < DS18B20_ROM_CODE_SIZE; i++)
 8000d9a:	2400      	movs	r4, #0
 8000d9c:	e007      	b.n	8000dae <send_cmd+0x2a>
    wire_write(DS18B20_SKIP_ROM);
 8000d9e:	20cc      	movs	r0, #204	; 0xcc
 8000da0:	f7ff ff88 	bl	8000cb4 <wire_write>
 8000da4:	e005      	b.n	8000db2 <send_cmd+0x2e>
      wire_write(rom_code[i]);
 8000da6:	5d28      	ldrb	r0, [r5, r4]
 8000da8:	f7ff ff84 	bl	8000cb4 <wire_write>
    for (i = 0; i < DS18B20_ROM_CODE_SIZE; i++)
 8000dac:	3401      	adds	r4, #1
 8000dae:	2c07      	cmp	r4, #7
 8000db0:	ddf9      	ble.n	8000da6 <send_cmd+0x22>
  }
  wire_write(cmd);
 8000db2:	4630      	mov	r0, r6
 8000db4:	f7ff ff7e 	bl	8000cb4 <wire_write>
  return HAL_OK;
}
 8000db8:	4638      	mov	r0, r7
 8000dba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8000dbc:	2701      	movs	r7, #1
 8000dbe:	e7fb      	b.n	8000db8 <send_cmd+0x34>

08000dc0 <ds18b20_read_scratchpad>:
{
  return send_cmd(rom_code, DS18B20_CONVERT_T);
}

static HAL_StatusTypeDef ds18b20_read_scratchpad(const uint8_t* rom_code, uint8_t* scratchpad)
{
 8000dc0:	b570      	push	{r4, r5, r6, lr}
 8000dc2:	460d      	mov	r5, r1
  int i;
  uint8_t crc;

  if (send_cmd(rom_code, DS18B20_READ_SCRATCHPAD) != HAL_OK)
 8000dc4:	21be      	movs	r1, #190	; 0xbe
 8000dc6:	f7ff ffdd 	bl	8000d84 <send_cmd>
 8000dca:	b990      	cbnz	r0, 8000df2 <ds18b20_read_scratchpad+0x32>
 8000dcc:	4606      	mov	r6, r0
    return HAL_ERROR;

  for (i = 0; i < DS18B20_SCRATCHPAD_SIZE; i++)
 8000dce:	2400      	movs	r4, #0
 8000dd0:	e003      	b.n	8000dda <ds18b20_read_scratchpad+0x1a>
    scratchpad[i] = wire_read();
 8000dd2:	f7ff ff5d 	bl	8000c90 <wire_read>
 8000dd6:	5528      	strb	r0, [r5, r4]
  for (i = 0; i < DS18B20_SCRATCHPAD_SIZE; i++)
 8000dd8:	3401      	adds	r4, #1
 8000dda:	2c08      	cmp	r4, #8
 8000ddc:	ddf9      	ble.n	8000dd2 <ds18b20_read_scratchpad+0x12>

  crc = wire_crc(scratchpad, DS18B20_SCRATCHPAD_SIZE - 1);
 8000dde:	2108      	movs	r1, #8
 8000de0:	4628      	mov	r0, r5
 8000de2:	f7ff ff74 	bl	8000cce <wire_crc>
  if (scratchpad[DS18B20_SCRATCHPAD_SIZE - 1] == crc)
 8000de6:	7a2b      	ldrb	r3, [r5, #8]
 8000de8:	4283      	cmp	r3, r0
 8000dea:	d000      	beq.n	8000dee <ds18b20_read_scratchpad+0x2e>
    return HAL_OK;
  else
    return HAL_ERROR;
 8000dec:	2601      	movs	r6, #1
}
 8000dee:	4630      	mov	r0, r6
 8000df0:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8000df2:	2601      	movs	r6, #1
 8000df4:	e7fb      	b.n	8000dee <ds18b20_read_scratchpad+0x2e>

08000df6 <ds18b20_read_address>:
{
 8000df6:	b570      	push	{r4, r5, r6, lr}
 8000df8:	4605      	mov	r5, r0
  if (wire_reset() != HAL_OK)
 8000dfa:	f7ff ff1d 	bl	8000c38 <wire_reset>
 8000dfe:	b110      	cbz	r0, 8000e06 <ds18b20_read_address+0x10>
    return HAL_ERROR;
 8000e00:	2601      	movs	r6, #1
}
 8000e02:	4630      	mov	r0, r6
 8000e04:	bd70      	pop	{r4, r5, r6, pc}
 8000e06:	4606      	mov	r6, r0
  wire_write(DS18B20_READ_ROM);
 8000e08:	2033      	movs	r0, #51	; 0x33
 8000e0a:	f7ff ff53 	bl	8000cb4 <wire_write>
  for (i = 0; i < DS18B20_ROM_CODE_SIZE; i++)
 8000e0e:	2400      	movs	r4, #0
 8000e10:	e003      	b.n	8000e1a <ds18b20_read_address+0x24>
    rom_code[i] = wire_read();
 8000e12:	f7ff ff3d 	bl	8000c90 <wire_read>
 8000e16:	5528      	strb	r0, [r5, r4]
  for (i = 0; i < DS18B20_ROM_CODE_SIZE; i++)
 8000e18:	3401      	adds	r4, #1
 8000e1a:	2c07      	cmp	r4, #7
 8000e1c:	ddf9      	ble.n	8000e12 <ds18b20_read_address+0x1c>
  crc = wire_crc(rom_code, DS18B20_ROM_CODE_SIZE - 1);
 8000e1e:	2107      	movs	r1, #7
 8000e20:	4628      	mov	r0, r5
 8000e22:	f7ff ff54 	bl	8000cce <wire_crc>
  if (rom_code[DS18B20_ROM_CODE_SIZE - 1] == crc)
 8000e26:	79eb      	ldrb	r3, [r5, #7]
 8000e28:	4283      	cmp	r3, r0
 8000e2a:	d0ea      	beq.n	8000e02 <ds18b20_read_address+0xc>
    return HAL_ERROR;
 8000e2c:	2601      	movs	r6, #1
 8000e2e:	e7e8      	b.n	8000e02 <ds18b20_read_address+0xc>

08000e30 <ds18b20_start_measure>:
{
 8000e30:	b508      	push	{r3, lr}
  return send_cmd(rom_code, DS18B20_CONVERT_T);
 8000e32:	2144      	movs	r1, #68	; 0x44
 8000e34:	f7ff ffa6 	bl	8000d84 <send_cmd>
}
 8000e38:	bd08      	pop	{r3, pc}

08000e3a <ds18b20_get_temp_wo_fp>:

  return temp / 16.0f;
}

int32_t ds18b20_get_temp_wo_fp(const uint8_t* rom_code)
{
 8000e3a:	b500      	push	{lr}
 8000e3c:	b085      	sub	sp, #20
  uint8_t scratchpad[DS18B20_SCRATCHPAD_SIZE];
  int16_t temp;

  if (ds18b20_read_scratchpad(rom_code, scratchpad) != HAL_OK)
 8000e3e:	a901      	add	r1, sp, #4
 8000e40:	f7ff ffbe 	bl	8000dc0 <ds18b20_read_scratchpad>
 8000e44:	b960      	cbnz	r0, 8000e60 <ds18b20_get_temp_wo_fp+0x26>
    return 8500;

  memcpy(&temp, &scratchpad[0], sizeof(temp));
 8000e46:	f9bd 0004 	ldrsh.w	r0, [sp, #4]

  return (temp * 100) / 16;
 8000e4a:	2364      	movs	r3, #100	; 0x64
 8000e4c:	fb03 f000 	mul.w	r0, r3, r0
 8000e50:	2800      	cmp	r0, #0
 8000e52:	db03      	blt.n	8000e5c <ds18b20_get_temp_wo_fp+0x22>
 8000e54:	1100      	asrs	r0, r0, #4
}
 8000e56:	b005      	add	sp, #20
 8000e58:	f85d fb04 	ldr.w	pc, [sp], #4
  return (temp * 100) / 16;
 8000e5c:	300f      	adds	r0, #15
 8000e5e:	e7f9      	b.n	8000e54 <ds18b20_get_temp_wo_fp+0x1a>
    return 8500;
 8000e60:	f242 1034 	movw	r0, #8500	; 0x2134
 8000e64:	e7f7      	b.n	8000e56 <ds18b20_get_temp_wo_fp+0x1c>
	...

08000e68 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e6c:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6e:	2400      	movs	r4, #0
 8000e70:	9404      	str	r4, [sp, #16]
 8000e72:	9405      	str	r4, [sp, #20]
 8000e74:	9406      	str	r4, [sp, #24]
 8000e76:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e78:	4b2c      	ldr	r3, [pc, #176]	; (8000f2c <MX_GPIO_Init+0xc4>)
 8000e7a:	699a      	ldr	r2, [r3, #24]
 8000e7c:	f042 0210 	orr.w	r2, r2, #16
 8000e80:	619a      	str	r2, [r3, #24]
 8000e82:	699a      	ldr	r2, [r3, #24]
 8000e84:	f002 0210 	and.w	r2, r2, #16
 8000e88:	9200      	str	r2, [sp, #0]
 8000e8a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e8c:	699a      	ldr	r2, [r3, #24]
 8000e8e:	f042 0220 	orr.w	r2, r2, #32
 8000e92:	619a      	str	r2, [r3, #24]
 8000e94:	699a      	ldr	r2, [r3, #24]
 8000e96:	f002 0220 	and.w	r2, r2, #32
 8000e9a:	9201      	str	r2, [sp, #4]
 8000e9c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e9e:	699a      	ldr	r2, [r3, #24]
 8000ea0:	f042 0204 	orr.w	r2, r2, #4
 8000ea4:	619a      	str	r2, [r3, #24]
 8000ea6:	699a      	ldr	r2, [r3, #24]
 8000ea8:	f002 0204 	and.w	r2, r2, #4
 8000eac:	9202      	str	r2, [sp, #8]
 8000eae:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eb0:	699a      	ldr	r2, [r3, #24]
 8000eb2:	f042 0208 	orr.w	r2, r2, #8
 8000eb6:	619a      	str	r2, [r3, #24]
 8000eb8:	699b      	ldr	r3, [r3, #24]
 8000eba:	f003 0308 	and.w	r3, r3, #8
 8000ebe:	9303      	str	r3, [sp, #12]
 8000ec0:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000ec2:	4d1b      	ldr	r5, [pc, #108]	; (8000f30 <MX_GPIO_Init+0xc8>)
 8000ec4:	4622      	mov	r2, r4
 8000ec6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000eca:	4628      	mov	r0, r5
 8000ecc:	f001 fdb7 	bl	8002a3e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GSM_RESET_GPIO_Port, GSM_RESET_Pin, GPIO_PIN_SET);
 8000ed0:	4e18      	ldr	r6, [pc, #96]	; (8000f34 <MX_GPIO_Init+0xcc>)
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ed8:	4630      	mov	r0, r6
 8000eda:	f001 fdb0 	bl	8002a3e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000ede:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ee2:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee4:	f04f 0801 	mov.w	r8, #1
 8000ee8:	f8cd 8014 	str.w	r8, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eec:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eee:	2702      	movs	r7, #2
 8000ef0:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000ef2:	a904      	add	r1, sp, #16
 8000ef4:	4628      	mov	r0, r5
 8000ef6:	f001 fc89 	bl	800280c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8000efa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000efe:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f00:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f02:	f8cd 8018 	str.w	r8, [sp, #24]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000f06:	a904      	add	r1, sp, #16
 8000f08:	4628      	mov	r0, r5
 8000f0a:	f001 fc7f 	bl	800280c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GSM_RESET_Pin;
 8000f0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f12:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000f14:	2311      	movs	r3, #17
 8000f16:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f18:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1a:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(GSM_RESET_GPIO_Port, &GPIO_InitStruct);
 8000f1c:	a904      	add	r1, sp, #16
 8000f1e:	4630      	mov	r0, r6
 8000f20:	f001 fc74 	bl	800280c <HAL_GPIO_Init>

}
 8000f24:	b008      	add	sp, #32
 8000f26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000f2a:	bf00      	nop
 8000f2c:	40021000 	.word	0x40021000
 8000f30:	40011000 	.word	0x40011000
 8000f34:	40010c00 	.word	0x40010c00

08000f38 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8000f38:	b508      	push	{r3, lr}
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8000f3a:	4807      	ldr	r0, [pc, #28]	; (8000f58 <MX_IWDG_Init+0x20>)
 8000f3c:	4b07      	ldr	r3, [pc, #28]	; (8000f5c <MX_IWDG_Init+0x24>)
 8000f3e:	6003      	str	r3, [r0, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 8000f40:	2300      	movs	r3, #0
 8000f42:	6043      	str	r3, [r0, #4]
  hiwdg.Init.Reload = 4095;
 8000f44:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000f48:	6083      	str	r3, [r0, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000f4a:	f001 fd7e 	bl	8002a4a <HAL_IWDG_Init>
 8000f4e:	b900      	cbnz	r0, 8000f52 <MX_IWDG_Init+0x1a>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8000f50:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000f52:	f000 fbcb 	bl	80016ec <Error_Handler>
}
 8000f56:	e7fb      	b.n	8000f50 <MX_IWDG_Init+0x18>
 8000f58:	20000394 	.word	0x20000394
 8000f5c:	40003000 	.word	0x40003000

08000f60 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000f60:	b508      	push	{r3, lr}
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000f62:	2200      	movs	r2, #0
 8000f64:	4611      	mov	r1, r2
 8000f66:	2025      	movs	r0, #37	; 0x25
 8000f68:	f001 fa0c 	bl	8002384 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000f6c:	2025      	movs	r0, #37	; 0x25
 8000f6e:	f001 fa41 	bl	80023f4 <HAL_NVIC_EnableIRQ>
  /* USB_LP_CAN1_RX0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8000f72:	2200      	movs	r2, #0
 8000f74:	4611      	mov	r1, r2
 8000f76:	2014      	movs	r0, #20
 8000f78:	f001 fa04 	bl	8002384 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000f7c:	2014      	movs	r0, #20
 8000f7e:	f001 fa39 	bl	80023f4 <HAL_NVIC_EnableIRQ>
}
 8000f82:	bd08      	pop	{r3, pc}

08000f84 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000f84:	b508      	push	{r3, lr}
	if(huart->Instance == USART1)
 8000f86:	6802      	ldr	r2, [r0, #0]
 8000f88:	4b10      	ldr	r3, [pc, #64]	; (8000fcc <HAL_UART_RxCpltCallback+0x48>)
 8000f8a:	429a      	cmp	r2, r3
 8000f8c:	d000      	beq.n	8000f90 <HAL_UART_RxCpltCallback+0xc>
			}
		}
		HAL_UART_Receive_IT(&huart1, &ReceiveTmp, 1);
	}

}
 8000f8e:	bd08      	pop	{r3, pc}
		GSM.LastTickReceive = HAL_GetTick();
 8000f90:	f001 f9e0 	bl	8002354 <HAL_GetTick>
 8000f94:	4b0e      	ldr	r3, [pc, #56]	; (8000fd0 <HAL_UART_RxCpltCallback+0x4c>)
 8000f96:	f8c3 0228 	str.w	r0, [r3, #552]	; 0x228
		if(ReceiveTmp != 0xd)
 8000f9a:	4b0e      	ldr	r3, [pc, #56]	; (8000fd4 <HAL_UART_RxCpltCallback+0x50>)
 8000f9c:	7819      	ldrb	r1, [r3, #0]
 8000f9e:	290d      	cmp	r1, #13
 8000fa0:	d105      	bne.n	8000fae <HAL_UART_RxCpltCallback+0x2a>
		HAL_UART_Receive_IT(&huart1, &ReceiveTmp, 1);
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	490b      	ldr	r1, [pc, #44]	; (8000fd4 <HAL_UART_RxCpltCallback+0x50>)
 8000fa6:	480c      	ldr	r0, [pc, #48]	; (8000fd8 <HAL_UART_RxCpltCallback+0x54>)
 8000fa8:	f003 ff03 	bl	8004db2 <HAL_UART_Receive_IT>
}
 8000fac:	e7ef      	b.n	8000f8e <HAL_UART_RxCpltCallback+0xa>
			if (RB_OK == Ring_Buffer_Write(&ReceiveBuffer, ReceiveTmp))
 8000fae:	480b      	ldr	r0, [pc, #44]	; (8000fdc <HAL_UART_RxCpltCallback+0x58>)
 8000fb0:	f000 ff27 	bl	8001e02 <Ring_Buffer_Write>
 8000fb4:	2800      	cmp	r0, #0
 8000fb6:	d1f4      	bne.n	8000fa2 <HAL_UART_RxCpltCallback+0x1e>
				if(ReceiveTmp == ENDLINE)
 8000fb8:	4b06      	ldr	r3, [pc, #24]	; (8000fd4 <HAL_UART_RxCpltCallback+0x50>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	2b0a      	cmp	r3, #10
 8000fbe:	d1f0      	bne.n	8000fa2 <HAL_UART_RxCpltCallback+0x1e>
					LineCounter++;
 8000fc0:	4a07      	ldr	r2, [pc, #28]	; (8000fe0 <HAL_UART_RxCpltCallback+0x5c>)
 8000fc2:	7813      	ldrb	r3, [r2, #0]
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	7013      	strb	r3, [r2, #0]
 8000fc8:	e7eb      	b.n	8000fa2 <HAL_UART_RxCpltCallback+0x1e>
 8000fca:	bf00      	nop
 8000fcc:	40013800 	.word	0x40013800
 8000fd0:	20000f08 	.word	0x20000f08
 8000fd4:	20001348 	.word	0x20001348
 8000fd8:	200017f8 	.word	0x200017f8
 8000fdc:	20001144 	.word	0x20001144
 8000fe0:	20001140 	.word	0x20001140

08000fe4 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
	*Uart1isBusyPtr = 0;
 8000fe4:	4b02      	ldr	r3, [pc, #8]	; (8000ff0 <HAL_UART_TxCpltCallback+0xc>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	2200      	movs	r2, #0
 8000fea:	701a      	strb	r2, [r3, #0]
}
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	20000004 	.word	0x20000004

08000ff4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
	if(htim->Instance == TIM3)
 8000ff4:	6802      	ldr	r2, [r0, #0]
 8000ff6:	4b2c      	ldr	r3, [pc, #176]	; (80010a8 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	d000      	beq.n	8000ffe <HAL_TIM_PeriodElapsedCallback+0xa>
 8000ffc:	4770      	bx	lr
{
 8000ffe:	b510      	push	{r4, lr}
 8001000:	b090      	sub	sp, #64	; 0x40
	{   //Period elapsed 128,57s
		timPeriodCounter++;
 8001002:	4a2a      	ldr	r2, [pc, #168]	; (80010ac <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001004:	7813      	ldrb	r3, [r2, #0]
 8001006:	3301      	adds	r3, #1
 8001008:	7013      	strb	r3, [r2, #0]
		char OneSample[32];
		char TemperatureString[7];
		Temperature100ToString(temperature, TemperatureString);
 800100a:	ac06      	add	r4, sp, #24
 800100c:	4621      	mov	r1, r4
 800100e:	4b28      	ldr	r3, [pc, #160]	; (80010b0 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001010:	6818      	ldr	r0, [r3, #0]
 8001012:	f001 f907 	bl	8002224 <Temperature100ToString>
		sprintf(OneSample, "%.2u/%.2u/%.2u,%.2u:%.2u:%.2u,%s\n", year, month, day, hour, minute, second, TemperatureString);
 8001016:	9404      	str	r4, [sp, #16]
 8001018:	4b26      	ldr	r3, [pc, #152]	; (80010b4 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	9303      	str	r3, [sp, #12]
 800101e:	4b26      	ldr	r3, [pc, #152]	; (80010b8 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	9302      	str	r3, [sp, #8]
 8001024:	4b25      	ldr	r3, [pc, #148]	; (80010bc <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	9301      	str	r3, [sp, #4]
 800102a:	4b25      	ldr	r3, [pc, #148]	; (80010c0 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	9300      	str	r3, [sp, #0]
 8001030:	4b24      	ldr	r3, [pc, #144]	; (80010c4 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	4a24      	ldr	r2, [pc, #144]	; (80010c8 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001036:	7812      	ldrb	r2, [r2, #0]
 8001038:	4924      	ldr	r1, [pc, #144]	; (80010cc <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800103a:	a808      	add	r0, sp, #32
 800103c:	f006 fbc4 	bl	80077c8 <siprintf>
		if(FTPMessageBoxRecordSwitch == 1)
 8001040:	4b23      	ldr	r3, [pc, #140]	; (80010d0 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001042:	781c      	ldrb	r4, [r3, #0]
 8001044:	2c01      	cmp	r4, #1
 8001046:	d007      	beq.n	8001058 <HAL_TIM_PeriodElapsedCallback+0x64>
		{
			strcat(FTPMessageBox1, OneSample);
		}
		else if(FTPMessageBoxRecordSwitch == 2)
 8001048:	2c02      	cmp	r4, #2
 800104a:	d00a      	beq.n	8001062 <HAL_TIM_PeriodElapsedCallback+0x6e>
		{
			strcat(FTPMessageBox2, OneSample);
		}


		if(timPeriodCounter == 40)
 800104c:	4b17      	ldr	r3, [pc, #92]	; (80010ac <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	2b28      	cmp	r3, #40	; 0x28
 8001052:	d00b      	beq.n	800106c <HAL_TIM_PeriodElapsedCallback+0x78>
			}

			timPeriodCounter = 0;
		}
	}
}
 8001054:	b010      	add	sp, #64	; 0x40
 8001056:	bd10      	pop	{r4, pc}
			strcat(FTPMessageBox1, OneSample);
 8001058:	a908      	add	r1, sp, #32
 800105a:	481e      	ldr	r0, [pc, #120]	; (80010d4 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800105c:	f006 fbd4 	bl	8007808 <strcat>
 8001060:	e7f4      	b.n	800104c <HAL_TIM_PeriodElapsedCallback+0x58>
			strcat(FTPMessageBox2, OneSample);
 8001062:	a908      	add	r1, sp, #32
 8001064:	481c      	ldr	r0, [pc, #112]	; (80010d8 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001066:	f006 fbcf 	bl	8007808 <strcat>
 800106a:	e7ef      	b.n	800104c <HAL_TIM_PeriodElapsedCallback+0x58>
			GSM.TaskToDo.FtpMsgToSend = 1;
 800106c:	4a1b      	ldr	r2, [pc, #108]	; (80010dc <HAL_TIM_PeriodElapsedCallback+0xe8>)
 800106e:	f892 322c 	ldrb.w	r3, [r2, #556]	; 0x22c
 8001072:	f043 0301 	orr.w	r3, r3, #1
 8001076:	f882 322c 	strb.w	r3, [r2, #556]	; 0x22c
			if(FTPMessageBoxRecordSwitch == 1)
 800107a:	2c01      	cmp	r4, #1
 800107c:	d005      	beq.n	800108a <HAL_TIM_PeriodElapsedCallback+0x96>
			else if(FTPMessageBoxRecordSwitch == 2)
 800107e:	2c02      	cmp	r4, #2
 8001080:	d00a      	beq.n	8001098 <HAL_TIM_PeriodElapsedCallback+0xa4>
			timPeriodCounter = 0;
 8001082:	4b0a      	ldr	r3, [pc, #40]	; (80010ac <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001084:	2200      	movs	r2, #0
 8001086:	701a      	strb	r2, [r3, #0]
}
 8001088:	e7e4      	b.n	8001054 <HAL_TIM_PeriodElapsedCallback+0x60>
				FTPMessageBox2[0] = '\0';
 800108a:	4b13      	ldr	r3, [pc, #76]	; (80010d8 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 800108c:	2200      	movs	r2, #0
 800108e:	701a      	strb	r2, [r3, #0]
				FTPMessageBoxRecordSwitch = 2;
 8001090:	4b0f      	ldr	r3, [pc, #60]	; (80010d0 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001092:	2202      	movs	r2, #2
 8001094:	701a      	strb	r2, [r3, #0]
 8001096:	e7f4      	b.n	8001082 <HAL_TIM_PeriodElapsedCallback+0x8e>
				FTPMessageBox1[0] = '\0';
 8001098:	4b0e      	ldr	r3, [pc, #56]	; (80010d4 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800109a:	2200      	movs	r2, #0
 800109c:	701a      	strb	r2, [r3, #0]
				FTPMessageBoxRecordSwitch = 1;
 800109e:	4b0c      	ldr	r3, [pc, #48]	; (80010d0 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80010a0:	2201      	movs	r2, #1
 80010a2:	701a      	strb	r2, [r3, #0]
 80010a4:	e7ed      	b.n	8001082 <HAL_TIM_PeriodElapsedCallback+0x8e>
 80010a6:	bf00      	nop
 80010a8:	40000400 	.word	0x40000400
 80010ac:	20001760 	.word	0x20001760
 80010b0:	2000175c 	.word	0x2000175c
 80010b4:	20001757 	.word	0x20001757
 80010b8:	20001755 	.word	0x20001755
 80010bc:	20001754 	.word	0x20001754
 80010c0:	2000174a 	.word	0x2000174a
 80010c4:	20001756 	.word	0x20001756
 80010c8:	20001761 	.word	0x20001761
 80010cc:	0800b440 	.word	0x0800b440
 80010d0:	20000000 	.word	0x20000000
 80010d4:	200004a0 	.word	0x200004a0
 80010d8:	200009d4 	.word	0x200009d4
 80010dc:	20000f08 	.word	0x20000f08

080010e0 <CommStateMachineTask>:

void CommStateMachineTask(void)
{
	  if(Uart1isBusy == 0 && HAL_GetTick() - LastTickForSim800 >= inquiryTimeVar)
 80010e0:	4b99      	ldr	r3, [pc, #612]	; (8001348 <CommStateMachineTask+0x268>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	b103      	cbz	r3, 80010e8 <CommStateMachineTask+0x8>
 80010e6:	4770      	bx	lr
{
 80010e8:	b530      	push	{r4, r5, lr}
 80010ea:	b087      	sub	sp, #28
 80010ec:	2400      	movs	r4, #0
	  if(Uart1isBusy == 0 && HAL_GetTick() - LastTickForSim800 >= inquiryTimeVar)
 80010ee:	f001 f931 	bl	8002354 <HAL_GetTick>
 80010f2:	4b96      	ldr	r3, [pc, #600]	; (800134c <CommStateMachineTask+0x26c>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	1ac0      	subs	r0, r0, r3
 80010f8:	4b95      	ldr	r3, [pc, #596]	; (8001350 <CommStateMachineTask+0x270>)
 80010fa:	881b      	ldrh	r3, [r3, #0]
 80010fc:	4298      	cmp	r0, r3
 80010fe:	d201      	bcs.n	8001104 <CommStateMachineTask+0x24>

	  			}

	  		}
	  	}
}
 8001100:	b007      	add	sp, #28
 8001102:	bd30      	pop	{r4, r5, pc}
	  	{LastTickForSim800 = HAL_GetTick();
 8001104:	f001 f926 	bl	8002354 <HAL_GetTick>
 8001108:	4b90      	ldr	r3, [pc, #576]	; (800134c <CommStateMachineTask+0x26c>)
 800110a:	6018      	str	r0, [r3, #0]
	  		if(SMSUartTxState == Control)
 800110c:	4b91      	ldr	r3, [pc, #580]	; (8001354 <CommStateMachineTask+0x274>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	2b03      	cmp	r3, #3
 8001112:	d017      	beq.n	8001144 <CommStateMachineTask+0x64>
	  		else if(SMSUartTxState == Reset)
 8001114:	2b00      	cmp	r3, #0
 8001116:	d16f      	bne.n	80011f8 <CommStateMachineTask+0x118>
	  			switch(TaskState)
 8001118:	4b8f      	ldr	r3, [pc, #572]	; (8001358 <CommStateMachineTask+0x278>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	2b01      	cmp	r3, #1
 800111e:	d053      	beq.n	80011c8 <CommStateMachineTask+0xe8>
 8001120:	2b02      	cmp	r3, #2
 8001122:	d05f      	beq.n	80011e4 <CommStateMachineTask+0x104>
 8001124:	2b00      	cmp	r3, #0
 8001126:	d1eb      	bne.n	8001100 <CommStateMachineTask+0x20>
	  				inquiryTimeVar = 500;
 8001128:	4b89      	ldr	r3, [pc, #548]	; (8001350 <CommStateMachineTask+0x270>)
 800112a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800112e:	801a      	strh	r2, [r3, #0]
	  				HAL_GPIO_WritePin(GSM_RESET_GPIO_Port, GSM_RESET_Pin, RESET);
 8001130:	2200      	movs	r2, #0
 8001132:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001136:	4889      	ldr	r0, [pc, #548]	; (800135c <CommStateMachineTask+0x27c>)
 8001138:	f001 fc81 	bl	8002a3e <HAL_GPIO_WritePin>
	  				TaskState = 1;
 800113c:	4b86      	ldr	r3, [pc, #536]	; (8001358 <CommStateMachineTask+0x278>)
 800113e:	2201      	movs	r2, #1
 8001140:	701a      	strb	r2, [r3, #0]
	  				break;
 8001142:	e7dd      	b.n	8001100 <CommStateMachineTask+0x20>
	  			switch(TaskState)
 8001144:	4b86      	ldr	r3, [pc, #536]	; (8001360 <CommStateMachineTask+0x280>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	2b04      	cmp	r3, #4
 800114a:	d8d9      	bhi.n	8001100 <CommStateMachineTask+0x20>
 800114c:	e8df f003 	tbb	[pc, r3]
 8001150:	18110a03 	.word	0x18110a03
 8001154:	1f          	.byte	0x1f
 8001155:	00          	.byte	0x00
	  				UartSend("AT+CSQ\r\n");
 8001156:	4883      	ldr	r0, [pc, #524]	; (8001364 <CommStateMachineTask+0x284>)
 8001158:	f001 f83a 	bl	80021d0 <UartSend>
	  				TaskState = 1;
 800115c:	4b80      	ldr	r3, [pc, #512]	; (8001360 <CommStateMachineTask+0x280>)
 800115e:	2201      	movs	r2, #1
 8001160:	701a      	strb	r2, [r3, #0]
	  				break;
 8001162:	e7cd      	b.n	8001100 <CommStateMachineTask+0x20>
	  				UartSend("AT+CREG?\r\n");
 8001164:	4880      	ldr	r0, [pc, #512]	; (8001368 <CommStateMachineTask+0x288>)
 8001166:	f001 f833 	bl	80021d0 <UartSend>
	  				TaskState = 2;
 800116a:	4b7d      	ldr	r3, [pc, #500]	; (8001360 <CommStateMachineTask+0x280>)
 800116c:	2202      	movs	r2, #2
 800116e:	701a      	strb	r2, [r3, #0]
	  				break;
 8001170:	e7c6      	b.n	8001100 <CommStateMachineTask+0x20>
	  				UartSend("AT+CMGDA=\"DEL READ\"\r\n");
 8001172:	487e      	ldr	r0, [pc, #504]	; (800136c <CommStateMachineTask+0x28c>)
 8001174:	f001 f82c 	bl	80021d0 <UartSend>
	  				TaskState = 3;
 8001178:	4b79      	ldr	r3, [pc, #484]	; (8001360 <CommStateMachineTask+0x280>)
 800117a:	2203      	movs	r2, #3
 800117c:	701a      	strb	r2, [r3, #0]
	  				break;
 800117e:	e7bf      	b.n	8001100 <CommStateMachineTask+0x20>
	  				 UartSend("AT+CMGL=\"REC UNREAD\",0\r\n");
 8001180:	487b      	ldr	r0, [pc, #492]	; (8001370 <CommStateMachineTask+0x290>)
 8001182:	f001 f825 	bl	80021d0 <UartSend>
	  				 TaskState = 4;
 8001186:	4b76      	ldr	r3, [pc, #472]	; (8001360 <CommStateMachineTask+0x280>)
 8001188:	2204      	movs	r2, #4
 800118a:	701a      	strb	r2, [r3, #0]
	  				 break;
 800118c:	e7b8      	b.n	8001100 <CommStateMachineTask+0x20>
	  				UartSend("AT+CCLK?\r\n");
 800118e:	4879      	ldr	r0, [pc, #484]	; (8001374 <CommStateMachineTask+0x294>)
 8001190:	f001 f81e 	bl	80021d0 <UartSend>
	  				TaskState = 0;
 8001194:	4b72      	ldr	r3, [pc, #456]	; (8001360 <CommStateMachineTask+0x280>)
 8001196:	2200      	movs	r2, #0
 8001198:	701a      	strb	r2, [r3, #0]
	  				if(!GSM.TaskToDo.FtpMsgToSend && !GSM.TaskToDo.SmsMsgToSend)
 800119a:	4b77      	ldr	r3, [pc, #476]	; (8001378 <CommStateMachineTask+0x298>)
 800119c:	f893 322c 	ldrb.w	r3, [r3, #556]	; 0x22c
 80011a0:	f013 0203 	ands.w	r2, r3, #3
 80011a4:	d103      	bne.n	80011ae <CommStateMachineTask+0xce>
	  					SMSUartTxState = Control;
 80011a6:	4b6b      	ldr	r3, [pc, #428]	; (8001354 <CommStateMachineTask+0x274>)
 80011a8:	2203      	movs	r2, #3
 80011aa:	701a      	strb	r2, [r3, #0]
 80011ac:	e7a8      	b.n	8001100 <CommStateMachineTask+0x20>
	  				else if(GSM.TaskToDo.FtpMsgToSend)
 80011ae:	f013 0f01 	tst.w	r3, #1
 80011b2:	d003      	beq.n	80011bc <CommStateMachineTask+0xdc>
	  					SMSUartTxState = FTPMsgWrite;
 80011b4:	4b67      	ldr	r3, [pc, #412]	; (8001354 <CommStateMachineTask+0x274>)
 80011b6:	2205      	movs	r2, #5
 80011b8:	701a      	strb	r2, [r3, #0]
 80011ba:	e7a1      	b.n	8001100 <CommStateMachineTask+0x20>
	  				else if(GSM.TaskToDo.SmsMsgToSend && !GSM.TaskToDo.FtpMsgToSend)
 80011bc:	2a02      	cmp	r2, #2
 80011be:	d19f      	bne.n	8001100 <CommStateMachineTask+0x20>
	  					SMSUartTxState = SMSMsgWrite;
 80011c0:	4b64      	ldr	r3, [pc, #400]	; (8001354 <CommStateMachineTask+0x274>)
 80011c2:	2204      	movs	r2, #4
 80011c4:	701a      	strb	r2, [r3, #0]
 80011c6:	e79b      	b.n	8001100 <CommStateMachineTask+0x20>
	  				inquiryTimeVar = 5000;
 80011c8:	4b61      	ldr	r3, [pc, #388]	; (8001350 <CommStateMachineTask+0x270>)
 80011ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80011ce:	801a      	strh	r2, [r3, #0]
	  				HAL_GPIO_WritePin(GSM_RESET_GPIO_Port, GSM_RESET_Pin, SET);
 80011d0:	2201      	movs	r2, #1
 80011d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011d6:	4861      	ldr	r0, [pc, #388]	; (800135c <CommStateMachineTask+0x27c>)
 80011d8:	f001 fc31 	bl	8002a3e <HAL_GPIO_WritePin>
	  				TaskState = 2;
 80011dc:	4b5e      	ldr	r3, [pc, #376]	; (8001358 <CommStateMachineTask+0x278>)
 80011de:	2202      	movs	r2, #2
 80011e0:	701a      	strb	r2, [r3, #0]
	  				break;
 80011e2:	e78d      	b.n	8001100 <CommStateMachineTask+0x20>
	  				inquiryTimeVar = INQUIRY_TIME;
 80011e4:	4b5a      	ldr	r3, [pc, #360]	; (8001350 <CommStateMachineTask+0x270>)
 80011e6:	22c8      	movs	r2, #200	; 0xc8
 80011e8:	801a      	strh	r2, [r3, #0]
	  				TaskState = 0;
 80011ea:	4b5b      	ldr	r3, [pc, #364]	; (8001358 <CommStateMachineTask+0x278>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	701a      	strb	r2, [r3, #0]
	  				SMSUartTxState = Config;
 80011f0:	4b58      	ldr	r3, [pc, #352]	; (8001354 <CommStateMachineTask+0x274>)
 80011f2:	2202      	movs	r2, #2
 80011f4:	701a      	strb	r2, [r3, #0]
	  				break;
 80011f6:	e783      	b.n	8001100 <CommStateMachineTask+0x20>
	  		else if(SMSUartTxState == Start)
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d021      	beq.n	8001240 <CommStateMachineTask+0x160>
	  		else if(SMSUartTxState == SMSMsgWrite)
 80011fc:	2b04      	cmp	r3, #4
 80011fe:	d048      	beq.n	8001292 <CommStateMachineTask+0x1b2>
	  		else if(SMSUartTxState == Config)
 8001200:	2b02      	cmp	r3, #2
 8001202:	f000 808f 	beq.w	8001324 <CommStateMachineTask+0x244>
	  		else if(SMSUartTxState == FTPMsgWrite)
 8001206:	2b05      	cmp	r3, #5
 8001208:	f47f af7a 	bne.w	8001100 <CommStateMachineTask+0x20>
	  			inquiryTimeVar = INQUIRY_TIME;
 800120c:	4b50      	ldr	r3, [pc, #320]	; (8001350 <CommStateMachineTask+0x270>)
 800120e:	22c8      	movs	r2, #200	; 0xc8
 8001210:	801a      	strh	r2, [r3, #0]
	  			switch(TaskState)
 8001212:	4b5a      	ldr	r3, [pc, #360]	; (800137c <CommStateMachineTask+0x29c>)
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	2b0f      	cmp	r3, #15
 8001218:	f63f af72 	bhi.w	8001100 <CommStateMachineTask+0x20>
 800121c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8001220:	00f300ec 	.word	0x00f300ec
 8001224:	010b0100 	.word	0x010b0100
 8001228:	0124011a 	.word	0x0124011a
 800122c:	0138012b 	.word	0x0138012b
 8001230:	01520145 	.word	0x01520145
 8001234:	017d0170 	.word	0x017d0170
 8001238:	01ad0188 	.word	0x01ad0188
 800123c:	01c601bf 	.word	0x01c601bf
	  			inquiryTimeVar = 2000;
 8001240:	4b43      	ldr	r3, [pc, #268]	; (8001350 <CommStateMachineTask+0x270>)
 8001242:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001246:	801a      	strh	r2, [r3, #0]
	  			switch(TaskState)
 8001248:	4b4d      	ldr	r3, [pc, #308]	; (8001380 <CommStateMachineTask+0x2a0>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	b153      	cbz	r3, 8001264 <CommStateMachineTask+0x184>
 800124e:	2b01      	cmp	r3, #1
 8001250:	f47f af56 	bne.w	8001100 <CommStateMachineTask+0x20>
	  				if(GSM.CRegStat == 1)
 8001254:	4b48      	ldr	r3, [pc, #288]	; (8001378 <CommStateMachineTask+0x298>)
 8001256:	7a9b      	ldrb	r3, [r3, #10]
 8001258:	2b01      	cmp	r3, #1
 800125a:	d00a      	beq.n	8001272 <CommStateMachineTask+0x192>
	  					TaskState = 0;
 800125c:	4b48      	ldr	r3, [pc, #288]	; (8001380 <CommStateMachineTask+0x2a0>)
 800125e:	2200      	movs	r2, #0
 8001260:	701a      	strb	r2, [r3, #0]
 8001262:	e74d      	b.n	8001100 <CommStateMachineTask+0x20>
	  				UartSend("AT+CREG?\r\n");
 8001264:	4840      	ldr	r0, [pc, #256]	; (8001368 <CommStateMachineTask+0x288>)
 8001266:	f000 ffb3 	bl	80021d0 <UartSend>
	  				TaskState = 1;
 800126a:	4b45      	ldr	r3, [pc, #276]	; (8001380 <CommStateMachineTask+0x2a0>)
 800126c:	2201      	movs	r2, #1
 800126e:	701a      	strb	r2, [r3, #0]
	  				break;
 8001270:	e746      	b.n	8001100 <CommStateMachineTask+0x20>
	  					inquiryTimeVar = INQUIRY_TIME;
 8001272:	4b37      	ldr	r3, [pc, #220]	; (8001350 <CommStateMachineTask+0x270>)
 8001274:	22c8      	movs	r2, #200	; 0xc8
 8001276:	801a      	strh	r2, [r3, #0]
	  					TaskState = 0;
 8001278:	4b41      	ldr	r3, [pc, #260]	; (8001380 <CommStateMachineTask+0x2a0>)
 800127a:	2200      	movs	r2, #0
 800127c:	701a      	strb	r2, [r3, #0]
	  					SMSUartTxState = Control;
 800127e:	4b35      	ldr	r3, [pc, #212]	; (8001354 <CommStateMachineTask+0x274>)
 8001280:	2203      	movs	r2, #3
 8001282:	701a      	strb	r2, [r3, #0]
	  					GSM.ResetCounter++;
 8001284:	4a3c      	ldr	r2, [pc, #240]	; (8001378 <CommStateMachineTask+0x298>)
 8001286:	f8b2 322e 	ldrh.w	r3, [r2, #558]	; 0x22e
 800128a:	3301      	adds	r3, #1
 800128c:	f8a2 322e 	strh.w	r3, [r2, #558]	; 0x22e
 8001290:	e736      	b.n	8001100 <CommStateMachineTask+0x20>
	  			switch(TaskState)
 8001292:	4b3c      	ldr	r3, [pc, #240]	; (8001384 <CommStateMachineTask+0x2a4>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	2b03      	cmp	r3, #3
 8001298:	f63f af32 	bhi.w	8001100 <CommStateMachineTask+0x20>
 800129c:	e8df f003 	tbb	[pc, r3]
 80012a0:	31241302 	.word	0x31241302
	  				sprintf(ATcmdSMS, "AT+CMGS=\"%s\"\r\n", GSM.SMSNumber);
 80012a4:	4c38      	ldr	r4, [pc, #224]	; (8001388 <CommStateMachineTask+0x2a8>)
 80012a6:	4a39      	ldr	r2, [pc, #228]	; (800138c <CommStateMachineTask+0x2ac>)
 80012a8:	4939      	ldr	r1, [pc, #228]	; (8001390 <CommStateMachineTask+0x2b0>)
 80012aa:	4620      	mov	r0, r4
 80012ac:	f006 fa8c 	bl	80077c8 <siprintf>
	  				UartSendWoRxCtrl(ATcmdSMS);
 80012b0:	4620      	mov	r0, r4
 80012b2:	f000 ffa5 	bl	8002200 <UartSendWoRxCtrl>
	  				inquiryTimeVar = 2000;
 80012b6:	4b26      	ldr	r3, [pc, #152]	; (8001350 <CommStateMachineTask+0x270>)
 80012b8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80012bc:	801a      	strh	r2, [r3, #0]
	  				TaskState = 1;
 80012be:	4b31      	ldr	r3, [pc, #196]	; (8001384 <CommStateMachineTask+0x2a4>)
 80012c0:	2201      	movs	r2, #1
 80012c2:	701a      	strb	r2, [r3, #0]
	  				break;
 80012c4:	e71c      	b.n	8001100 <CommStateMachineTask+0x20>
	  				HAL_UART_Transmit_IT(&huart1, (uint8_t*) SMSMessage, strlen(SMSMessage));
 80012c6:	4c33      	ldr	r4, [pc, #204]	; (8001394 <CommStateMachineTask+0x2b4>)
 80012c8:	4620      	mov	r0, r4
 80012ca:	f7fe ff4b 	bl	8000164 <strlen>
 80012ce:	b282      	uxth	r2, r0
 80012d0:	4621      	mov	r1, r4
 80012d2:	4831      	ldr	r0, [pc, #196]	; (8001398 <CommStateMachineTask+0x2b8>)
 80012d4:	f003 fba8 	bl	8004a28 <HAL_UART_Transmit_IT>
	  				*Uart1isBusyPtr = 1;
 80012d8:	4b30      	ldr	r3, [pc, #192]	; (800139c <CommStateMachineTask+0x2bc>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	2201      	movs	r2, #1
 80012de:	701a      	strb	r2, [r3, #0]
	  				TaskState = 2;
 80012e0:	4b28      	ldr	r3, [pc, #160]	; (8001384 <CommStateMachineTask+0x2a4>)
 80012e2:	2202      	movs	r2, #2
 80012e4:	701a      	strb	r2, [r3, #0]
	  				break;
 80012e6:	e70b      	b.n	8001100 <CommStateMachineTask+0x20>
	  				HAL_UART_Transmit_IT(&huart1, (uint8_t*) &ctrlZ, 1);
 80012e8:	2201      	movs	r2, #1
 80012ea:	492d      	ldr	r1, [pc, #180]	; (80013a0 <CommStateMachineTask+0x2c0>)
 80012ec:	482a      	ldr	r0, [pc, #168]	; (8001398 <CommStateMachineTask+0x2b8>)
 80012ee:	f003 fb9b 	bl	8004a28 <HAL_UART_Transmit_IT>
	  				*Uart1isBusyPtr = 1;
 80012f2:	4b2a      	ldr	r3, [pc, #168]	; (800139c <CommStateMachineTask+0x2bc>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	2201      	movs	r2, #1
 80012f8:	701a      	strb	r2, [r3, #0]
	  				TaskState = 3;
 80012fa:	4b22      	ldr	r3, [pc, #136]	; (8001384 <CommStateMachineTask+0x2a4>)
 80012fc:	2203      	movs	r2, #3
 80012fe:	701a      	strb	r2, [r3, #0]
	  				break;
 8001300:	e6fe      	b.n	8001100 <CommStateMachineTask+0x20>
	  				inquiryTimeVar = INQUIRY_TIME;
 8001302:	4b13      	ldr	r3, [pc, #76]	; (8001350 <CommStateMachineTask+0x270>)
 8001304:	22c8      	movs	r2, #200	; 0xc8
 8001306:	801a      	strh	r2, [r3, #0]
	  				TaskState = 0;
 8001308:	2100      	movs	r1, #0
 800130a:	4b1e      	ldr	r3, [pc, #120]	; (8001384 <CommStateMachineTask+0x2a4>)
 800130c:	7019      	strb	r1, [r3, #0]
	  				GSM.TaskToDo.SmsMsgToSend = 0;
 800130e:	4b1a      	ldr	r3, [pc, #104]	; (8001378 <CommStateMachineTask+0x298>)
 8001310:	f893 222c 	ldrb.w	r2, [r3, #556]	; 0x22c
 8001314:	f361 0241 	bfi	r2, r1, #1, #1
 8001318:	f883 222c 	strb.w	r2, [r3, #556]	; 0x22c
	  				SMSUartTxState = Control;
 800131c:	4b0d      	ldr	r3, [pc, #52]	; (8001354 <CommStateMachineTask+0x274>)
 800131e:	2203      	movs	r2, #3
 8001320:	701a      	strb	r2, [r3, #0]
	  				break;
 8001322:	e6ed      	b.n	8001100 <CommStateMachineTask+0x20>
	  			switch(TaskState)
 8001324:	4b1f      	ldr	r3, [pc, #124]	; (80013a4 <CommStateMachineTask+0x2c4>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	2b05      	cmp	r3, #5
 800132a:	f63f aee9 	bhi.w	8001100 <CommStateMachineTask+0x20>
 800132e:	e8df f003 	tbb	[pc, r3]
 8001332:	3d03      	.short	0x3d03
 8001334:	59524b44 	.word	0x59524b44
	  				UartSend("ATE0\r\n");
 8001338:	481b      	ldr	r0, [pc, #108]	; (80013a8 <CommStateMachineTask+0x2c8>)
 800133a:	f000 ff49 	bl	80021d0 <UartSend>
	  				TaskState = 1;
 800133e:	4b19      	ldr	r3, [pc, #100]	; (80013a4 <CommStateMachineTask+0x2c4>)
 8001340:	2201      	movs	r2, #1
 8001342:	701a      	strb	r2, [r3, #0]
	  				break;
 8001344:	e6dc      	b.n	8001100 <CommStateMachineTask+0x20>
 8001346:	bf00      	nop
 8001348:	20001749 	.word	0x20001749
 800134c:	20001138 	.word	0x20001138
 8001350:	20000008 	.word	0x20000008
 8001354:	2000153c 	.word	0x2000153c
 8001358:	20001541 	.word	0x20001541
 800135c:	40010c00 	.word	0x40010c00
 8001360:	20001542 	.word	0x20001542
 8001364:	0800b464 	.word	0x0800b464
 8001368:	0800b470 	.word	0x0800b470
 800136c:	0800b47c 	.word	0x0800b47c
 8001370:	0800b494 	.word	0x0800b494
 8001374:	0800b4b0 	.word	0x0800b4b0
 8001378:	20000f08 	.word	0x20000f08
 800137c:	2000153d 	.word	0x2000153d
 8001380:	20001540 	.word	0x20001540
 8001384:	2000153f 	.word	0x2000153f
 8001388:	20000420 	.word	0x20000420
 800138c:	20000f1a 	.word	0x20000f1a
 8001390:	0800b4bc 	.word	0x0800b4bc
 8001394:	2000144c 	.word	0x2000144c
 8001398:	200017f8 	.word	0x200017f8
 800139c:	20000004 	.word	0x20000004
 80013a0:	0800b65d 	.word	0x0800b65d
 80013a4:	2000153e 	.word	0x2000153e
 80013a8:	0800b4cc 	.word	0x0800b4cc
	  				UartSend("AT+CMGF=1\r\n");
 80013ac:	4889      	ldr	r0, [pc, #548]	; (80015d4 <CommStateMachineTask+0x4f4>)
 80013ae:	f000 ff0f 	bl	80021d0 <UartSend>
	  				TaskState = 2;
 80013b2:	4b89      	ldr	r3, [pc, #548]	; (80015d8 <CommStateMachineTask+0x4f8>)
 80013b4:	2202      	movs	r2, #2
 80013b6:	701a      	strb	r2, [r3, #0]
	  				break;
 80013b8:	e6a2      	b.n	8001100 <CommStateMachineTask+0x20>
	  				UartSend("AT+CLTS=1\r\n");
 80013ba:	4888      	ldr	r0, [pc, #544]	; (80015dc <CommStateMachineTask+0x4fc>)
 80013bc:	f000 ff08 	bl	80021d0 <UartSend>
	  				TaskState = 3;
 80013c0:	4b85      	ldr	r3, [pc, #532]	; (80015d8 <CommStateMachineTask+0x4f8>)
 80013c2:	2203      	movs	r2, #3
 80013c4:	701a      	strb	r2, [r3, #0]
	  				break;
 80013c6:	e69b      	b.n	8001100 <CommStateMachineTask+0x20>
	  				UartSend("AT+CNMI=0,0,0,0,0\r\n");
 80013c8:	4885      	ldr	r0, [pc, #532]	; (80015e0 <CommStateMachineTask+0x500>)
 80013ca:	f000 ff01 	bl	80021d0 <UartSend>
	  				TaskState = 4;
 80013ce:	4b82      	ldr	r3, [pc, #520]	; (80015d8 <CommStateMachineTask+0x4f8>)
 80013d0:	2204      	movs	r2, #4
 80013d2:	701a      	strb	r2, [r3, #0]
	  				break;
 80013d4:	e694      	b.n	8001100 <CommStateMachineTask+0x20>
	  				UartSend("AT+CIURC=0\r\n");
 80013d6:	4883      	ldr	r0, [pc, #524]	; (80015e4 <CommStateMachineTask+0x504>)
 80013d8:	f000 fefa 	bl	80021d0 <UartSend>
	  				TaskState = 5;
 80013dc:	4b7e      	ldr	r3, [pc, #504]	; (80015d8 <CommStateMachineTask+0x4f8>)
 80013de:	2205      	movs	r2, #5
 80013e0:	701a      	strb	r2, [r3, #0]
	  				break;
 80013e2:	e68d      	b.n	8001100 <CommStateMachineTask+0x20>
	  				UartSend("AT&W\r\n");
 80013e4:	4880      	ldr	r0, [pc, #512]	; (80015e8 <CommStateMachineTask+0x508>)
 80013e6:	f000 fef3 	bl	80021d0 <UartSend>
	  				TaskState = 0;
 80013ea:	4b7b      	ldr	r3, [pc, #492]	; (80015d8 <CommStateMachineTask+0x4f8>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	701a      	strb	r2, [r3, #0]
	  				SMSUartTxState = Start;
 80013f0:	4b7e      	ldr	r3, [pc, #504]	; (80015ec <CommStateMachineTask+0x50c>)
 80013f2:	2201      	movs	r2, #1
 80013f4:	701a      	strb	r2, [r3, #0]
	  				break;
 80013f6:	e683      	b.n	8001100 <CommStateMachineTask+0x20>
	  				UartSend("AT+SAPBR=3,1,\"Contype\",\"GPRS\"\r\n");
 80013f8:	487d      	ldr	r0, [pc, #500]	; (80015f0 <CommStateMachineTask+0x510>)
 80013fa:	f000 fee9 	bl	80021d0 <UartSend>
	  				TaskState = 1;
 80013fe:	4b7d      	ldr	r3, [pc, #500]	; (80015f4 <CommStateMachineTask+0x514>)
 8001400:	2201      	movs	r2, #1
 8001402:	701a      	strb	r2, [r3, #0]
	  				break;
 8001404:	e67c      	b.n	8001100 <CommStateMachineTask+0x20>
	  				sprintf(ATcmdFtp, "AT+SAPBR=3,1,\"APN\",\"%s\"\r\n", GSM.ConfigFlash.apn);
 8001406:	4c7c      	ldr	r4, [pc, #496]	; (80015f8 <CommStateMachineTask+0x518>)
 8001408:	4a7c      	ldr	r2, [pc, #496]	; (80015fc <CommStateMachineTask+0x51c>)
 800140a:	497d      	ldr	r1, [pc, #500]	; (8001600 <CommStateMachineTask+0x520>)
 800140c:	4620      	mov	r0, r4
 800140e:	f006 f9db 	bl	80077c8 <siprintf>
					UartSend(ATcmdFtp);
 8001412:	4620      	mov	r0, r4
 8001414:	f000 fedc 	bl	80021d0 <UartSend>
	  				TaskState = 2;
 8001418:	4b76      	ldr	r3, [pc, #472]	; (80015f4 <CommStateMachineTask+0x514>)
 800141a:	2202      	movs	r2, #2
 800141c:	701a      	strb	r2, [r3, #0]
	  				break;
 800141e:	e66f      	b.n	8001100 <CommStateMachineTask+0x20>
	  				UartSend("AT+SAPBR=1,1\r\n");
 8001420:	4878      	ldr	r0, [pc, #480]	; (8001604 <CommStateMachineTask+0x524>)
 8001422:	f000 fed5 	bl	80021d0 <UartSend>
	  				inquiryTimeVar = 5000;
 8001426:	4b78      	ldr	r3, [pc, #480]	; (8001608 <CommStateMachineTask+0x528>)
 8001428:	f241 3288 	movw	r2, #5000	; 0x1388
 800142c:	801a      	strh	r2, [r3, #0]
	  				TaskState = 3;
 800142e:	4b71      	ldr	r3, [pc, #452]	; (80015f4 <CommStateMachineTask+0x514>)
 8001430:	2203      	movs	r2, #3
 8001432:	701a      	strb	r2, [r3, #0]
	  				break;
 8001434:	e664      	b.n	8001100 <CommStateMachineTask+0x20>
	  				if(GSM.ReceivedState == 1)
 8001436:	4b75      	ldr	r3, [pc, #468]	; (800160c <CommStateMachineTask+0x52c>)
 8001438:	7a1b      	ldrb	r3, [r3, #8]
 800143a:	2b01      	cmp	r3, #1
 800143c:	d103      	bne.n	8001446 <CommStateMachineTask+0x366>
	  					TaskState = 4;
 800143e:	4b6d      	ldr	r3, [pc, #436]	; (80015f4 <CommStateMachineTask+0x514>)
 8001440:	2204      	movs	r2, #4
 8001442:	701a      	strb	r2, [r3, #0]
 8001444:	e65c      	b.n	8001100 <CommStateMachineTask+0x20>
	  					TaskState = 0;
 8001446:	4b6b      	ldr	r3, [pc, #428]	; (80015f4 <CommStateMachineTask+0x514>)
 8001448:	2200      	movs	r2, #0
 800144a:	701a      	strb	r2, [r3, #0]
	  					UartSend("AT+SAPBR=0,1\r\n");
 800144c:	4870      	ldr	r0, [pc, #448]	; (8001610 <CommStateMachineTask+0x530>)
 800144e:	f000 febf 	bl	80021d0 <UartSend>
 8001452:	e655      	b.n	8001100 <CommStateMachineTask+0x20>
	  				UartSend("AT+SAPBR=2,1\r\n");
 8001454:	486f      	ldr	r0, [pc, #444]	; (8001614 <CommStateMachineTask+0x534>)
 8001456:	f000 febb 	bl	80021d0 <UartSend>
	  				inquiryTimeVar = INQUIRY_TIME;
 800145a:	4b6b      	ldr	r3, [pc, #428]	; (8001608 <CommStateMachineTask+0x528>)
 800145c:	22c8      	movs	r2, #200	; 0xc8
 800145e:	801a      	strh	r2, [r3, #0]
	  				TaskState = 5;
 8001460:	4b64      	ldr	r3, [pc, #400]	; (80015f4 <CommStateMachineTask+0x514>)
 8001462:	2205      	movs	r2, #5
 8001464:	701a      	strb	r2, [r3, #0]
	  				break;
 8001466:	e64b      	b.n	8001100 <CommStateMachineTask+0x20>
	  				UartSend("AT+FTPCID=1\r\n");
 8001468:	486b      	ldr	r0, [pc, #428]	; (8001618 <CommStateMachineTask+0x538>)
 800146a:	f000 feb1 	bl	80021d0 <UartSend>
	  				TaskState = 6;
 800146e:	4b61      	ldr	r3, [pc, #388]	; (80015f4 <CommStateMachineTask+0x514>)
 8001470:	2206      	movs	r2, #6
 8001472:	701a      	strb	r2, [r3, #0]
	  				break;
 8001474:	e644      	b.n	8001100 <CommStateMachineTask+0x20>
	  				sprintf(ATcmdFtp, "AT+FTPSERV=\"%s\"\r\n", GSM.ConfigFlash.server);
 8001476:	4c60      	ldr	r4, [pc, #384]	; (80015f8 <CommStateMachineTask+0x518>)
 8001478:	4a68      	ldr	r2, [pc, #416]	; (800161c <CommStateMachineTask+0x53c>)
 800147a:	4969      	ldr	r1, [pc, #420]	; (8001620 <CommStateMachineTask+0x540>)
 800147c:	4620      	mov	r0, r4
 800147e:	f006 f9a3 	bl	80077c8 <siprintf>
	  				UartSend(ATcmdFtp);
 8001482:	4620      	mov	r0, r4
 8001484:	f000 fea4 	bl	80021d0 <UartSend>
	  				TaskState = 7;
 8001488:	4b5a      	ldr	r3, [pc, #360]	; (80015f4 <CommStateMachineTask+0x514>)
 800148a:	2207      	movs	r2, #7
 800148c:	701a      	strb	r2, [r3, #0]
	  				break;
 800148e:	e637      	b.n	8001100 <CommStateMachineTask+0x20>
	  				sprintf(ATcmdFtp, "AT+FTPUN=\"%s\"\r\n", GSM.ConfigFlash.login);
 8001490:	4c59      	ldr	r4, [pc, #356]	; (80015f8 <CommStateMachineTask+0x518>)
 8001492:	4a64      	ldr	r2, [pc, #400]	; (8001624 <CommStateMachineTask+0x544>)
 8001494:	4964      	ldr	r1, [pc, #400]	; (8001628 <CommStateMachineTask+0x548>)
 8001496:	4620      	mov	r0, r4
 8001498:	f006 f996 	bl	80077c8 <siprintf>
	  				UartSend(ATcmdFtp);
 800149c:	4620      	mov	r0, r4
 800149e:	f000 fe97 	bl	80021d0 <UartSend>
	  				TaskState = 8;
 80014a2:	4b54      	ldr	r3, [pc, #336]	; (80015f4 <CommStateMachineTask+0x514>)
 80014a4:	2208      	movs	r2, #8
 80014a6:	701a      	strb	r2, [r3, #0]
	  				break;
 80014a8:	e62a      	b.n	8001100 <CommStateMachineTask+0x20>
	  				sprintf(ATcmdFtp, "AT+FTPPW=\"%s\"\r\n", GSM.ConfigFlash.password);
 80014aa:	4c53      	ldr	r4, [pc, #332]	; (80015f8 <CommStateMachineTask+0x518>)
 80014ac:	4a5f      	ldr	r2, [pc, #380]	; (800162c <CommStateMachineTask+0x54c>)
 80014ae:	4960      	ldr	r1, [pc, #384]	; (8001630 <CommStateMachineTask+0x550>)
 80014b0:	4620      	mov	r0, r4
 80014b2:	f006 f989 	bl	80077c8 <siprintf>
	  				UartSend(ATcmdFtp);
 80014b6:	4620      	mov	r0, r4
 80014b8:	f000 fe8a 	bl	80021d0 <UartSend>
	  				TaskState = 9;
 80014bc:	4b4d      	ldr	r3, [pc, #308]	; (80015f4 <CommStateMachineTask+0x514>)
 80014be:	2209      	movs	r2, #9
 80014c0:	701a      	strb	r2, [r3, #0]
	  				break;
 80014c2:	e61d      	b.n	8001100 <CommStateMachineTask+0x20>
	  				sprintf(ATcmdFtp, "AT+FTPPUTNAME=\"Termo%s%.2u%.2u%.2u%.2u%.2u%.2u.txt\"\r\n",GSM.ConfigFlash.deviceNumber, year, month, day, hour, minute, second);
 80014c4:	4c4c      	ldr	r4, [pc, #304]	; (80015f8 <CommStateMachineTask+0x518>)
 80014c6:	4b5b      	ldr	r3, [pc, #364]	; (8001634 <CommStateMachineTask+0x554>)
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	9304      	str	r3, [sp, #16]
 80014cc:	4b5a      	ldr	r3, [pc, #360]	; (8001638 <CommStateMachineTask+0x558>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	9303      	str	r3, [sp, #12]
 80014d2:	4b5a      	ldr	r3, [pc, #360]	; (800163c <CommStateMachineTask+0x55c>)
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	9302      	str	r3, [sp, #8]
 80014d8:	4b59      	ldr	r3, [pc, #356]	; (8001640 <CommStateMachineTask+0x560>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	9301      	str	r3, [sp, #4]
 80014de:	4b59      	ldr	r3, [pc, #356]	; (8001644 <CommStateMachineTask+0x564>)
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	9300      	str	r3, [sp, #0]
 80014e4:	4b58      	ldr	r3, [pc, #352]	; (8001648 <CommStateMachineTask+0x568>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	4a58      	ldr	r2, [pc, #352]	; (800164c <CommStateMachineTask+0x56c>)
 80014ea:	4959      	ldr	r1, [pc, #356]	; (8001650 <CommStateMachineTask+0x570>)
 80014ec:	4620      	mov	r0, r4
 80014ee:	f006 f96b 	bl	80077c8 <siprintf>
	  				UartSend(ATcmdFtp);
 80014f2:	4620      	mov	r0, r4
 80014f4:	f000 fe6c 	bl	80021d0 <UartSend>
	  				TaskState = 10;
 80014f8:	4b3e      	ldr	r3, [pc, #248]	; (80015f4 <CommStateMachineTask+0x514>)
 80014fa:	220a      	movs	r2, #10
 80014fc:	701a      	strb	r2, [r3, #0]
	  				break;
 80014fe:	e5ff      	b.n	8001100 <CommStateMachineTask+0x20>
	  				sprintf(ATcmdFtp, "AT+FTPPUTPATH=\"%s\"\r\n", GSM.ConfigFlash.path);
 8001500:	4c3d      	ldr	r4, [pc, #244]	; (80015f8 <CommStateMachineTask+0x518>)
 8001502:	4a54      	ldr	r2, [pc, #336]	; (8001654 <CommStateMachineTask+0x574>)
 8001504:	4954      	ldr	r1, [pc, #336]	; (8001658 <CommStateMachineTask+0x578>)
 8001506:	4620      	mov	r0, r4
 8001508:	f006 f95e 	bl	80077c8 <siprintf>
	  				UartSend(ATcmdFtp);
 800150c:	4620      	mov	r0, r4
 800150e:	f000 fe5f 	bl	80021d0 <UartSend>
	  				TaskState = 11;
 8001512:	4b38      	ldr	r3, [pc, #224]	; (80015f4 <CommStateMachineTask+0x514>)
 8001514:	220b      	movs	r2, #11
 8001516:	701a      	strb	r2, [r3, #0]
	  				break;
 8001518:	e5f2      	b.n	8001100 <CommStateMachineTask+0x20>
	  				UartSend("AT+FTPPUT=1\r\n");
 800151a:	4850      	ldr	r0, [pc, #320]	; (800165c <CommStateMachineTask+0x57c>)
 800151c:	f000 fe58 	bl	80021d0 <UartSend>
	  				inquiryTimeVar = 5000;
 8001520:	4b39      	ldr	r3, [pc, #228]	; (8001608 <CommStateMachineTask+0x528>)
 8001522:	f241 3288 	movw	r2, #5000	; 0x1388
 8001526:	801a      	strh	r2, [r3, #0]
	  				TaskState = 12;
 8001528:	4b32      	ldr	r3, [pc, #200]	; (80015f4 <CommStateMachineTask+0x514>)
 800152a:	220c      	movs	r2, #12
 800152c:	701a      	strb	r2, [r3, #0]
	  				break;
 800152e:	e5e7      	b.n	8001100 <CommStateMachineTask+0x20>
	  				if(GSM.FtpPut.status != 1)
 8001530:	4b36      	ldr	r3, [pc, #216]	; (800160c <CommStateMachineTask+0x52c>)
 8001532:	7b5b      	ldrb	r3, [r3, #13]
 8001534:	2b01      	cmp	r3, #1
 8001536:	d003      	beq.n	8001540 <CommStateMachineTask+0x460>
	  					TaskState = 0;
 8001538:	4b2e      	ldr	r3, [pc, #184]	; (80015f4 <CommStateMachineTask+0x514>)
 800153a:	2200      	movs	r2, #0
 800153c:	701a      	strb	r2, [r3, #0]
	  					break;
 800153e:	e5df      	b.n	8001100 <CommStateMachineTask+0x20>
	  				if(FTPMessageBoxRecordSwitch == 2)
 8001540:	4b47      	ldr	r3, [pc, #284]	; (8001660 <CommStateMachineTask+0x580>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	2b02      	cmp	r3, #2
 8001546:	d00e      	beq.n	8001566 <CommStateMachineTask+0x486>
	  				else if(FTPMessageBoxRecordSwitch == 1)
 8001548:	2b01      	cmp	r3, #1
 800154a:	d011      	beq.n	8001570 <CommStateMachineTask+0x490>
	  				sprintf(ATcmdFtp,"AT+FTPPUT=2,%u\r\n", MsgLen);
 800154c:	4d2a      	ldr	r5, [pc, #168]	; (80015f8 <CommStateMachineTask+0x518>)
 800154e:	4622      	mov	r2, r4
 8001550:	4944      	ldr	r1, [pc, #272]	; (8001664 <CommStateMachineTask+0x584>)
 8001552:	4628      	mov	r0, r5
 8001554:	f006 f938 	bl	80077c8 <siprintf>
	  				UartSendWoRxCtrl(ATcmdFtp);
 8001558:	4628      	mov	r0, r5
 800155a:	f000 fe51 	bl	8002200 <UartSendWoRxCtrl>
					TaskState = 13;
 800155e:	4b25      	ldr	r3, [pc, #148]	; (80015f4 <CommStateMachineTask+0x514>)
 8001560:	220d      	movs	r2, #13
 8001562:	701a      	strb	r2, [r3, #0]
					break;
 8001564:	e5cc      	b.n	8001100 <CommStateMachineTask+0x20>
	  					MsgLen = strlen(FTPMessageBox1);
 8001566:	4840      	ldr	r0, [pc, #256]	; (8001668 <CommStateMachineTask+0x588>)
 8001568:	f7fe fdfc 	bl	8000164 <strlen>
 800156c:	b284      	uxth	r4, r0
 800156e:	e7ed      	b.n	800154c <CommStateMachineTask+0x46c>
	  					MsgLen = strlen(FTPMessageBox2);
 8001570:	483e      	ldr	r0, [pc, #248]	; (800166c <CommStateMachineTask+0x58c>)
 8001572:	f7fe fdf7 	bl	8000164 <strlen>
 8001576:	b284      	uxth	r4, r0
 8001578:	e7e8      	b.n	800154c <CommStateMachineTask+0x46c>
	  				if(FTPMessageBoxRecordSwitch == 2)
 800157a:	4b39      	ldr	r3, [pc, #228]	; (8001660 <CommStateMachineTask+0x580>)
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	2b02      	cmp	r3, #2
 8001580:	d005      	beq.n	800158e <CommStateMachineTask+0x4ae>
	  				else if(FTPMessageBoxRecordSwitch == 1)
 8001582:	2b01      	cmp	r3, #1
 8001584:	d007      	beq.n	8001596 <CommStateMachineTask+0x4b6>
	  				TaskState = 14;
 8001586:	4b1b      	ldr	r3, [pc, #108]	; (80015f4 <CommStateMachineTask+0x514>)
 8001588:	220e      	movs	r2, #14
 800158a:	701a      	strb	r2, [r3, #0]
	  				break;
 800158c:	e5b8      	b.n	8001100 <CommStateMachineTask+0x20>
	  					UartSendWoRxCtrl(FTPMessageBox1);
 800158e:	4836      	ldr	r0, [pc, #216]	; (8001668 <CommStateMachineTask+0x588>)
 8001590:	f000 fe36 	bl	8002200 <UartSendWoRxCtrl>
 8001594:	e7f7      	b.n	8001586 <CommStateMachineTask+0x4a6>
	  					UartSendWoRxCtrl(FTPMessageBox2);
 8001596:	4835      	ldr	r0, [pc, #212]	; (800166c <CommStateMachineTask+0x58c>)
 8001598:	f000 fe32 	bl	8002200 <UartSendWoRxCtrl>
 800159c:	e7f3      	b.n	8001586 <CommStateMachineTask+0x4a6>
	  				UartSend("AT+FTPPUT=2,0\r\n");
 800159e:	4834      	ldr	r0, [pc, #208]	; (8001670 <CommStateMachineTask+0x590>)
 80015a0:	f000 fe16 	bl	80021d0 <UartSend>
	  				TaskState = 15;
 80015a4:	4b13      	ldr	r3, [pc, #76]	; (80015f4 <CommStateMachineTask+0x514>)
 80015a6:	220f      	movs	r2, #15
 80015a8:	701a      	strb	r2, [r3, #0]
	  				break;
 80015aa:	e5a9      	b.n	8001100 <CommStateMachineTask+0x20>
	  				UartSend("AT+SAPBR=0,1\r\n");
 80015ac:	4818      	ldr	r0, [pc, #96]	; (8001610 <CommStateMachineTask+0x530>)
 80015ae:	f000 fe0f 	bl	80021d0 <UartSend>
	  				TaskState = 0;
 80015b2:	2100      	movs	r1, #0
 80015b4:	4b0f      	ldr	r3, [pc, #60]	; (80015f4 <CommStateMachineTask+0x514>)
 80015b6:	7019      	strb	r1, [r3, #0]
	  				GSM.TaskToDo.FtpMsgToSend = 0;
 80015b8:	4b14      	ldr	r3, [pc, #80]	; (800160c <CommStateMachineTask+0x52c>)
 80015ba:	f893 222c 	ldrb.w	r2, [r3, #556]	; 0x22c
 80015be:	f361 0200 	bfi	r2, r1, #0, #1
 80015c2:	f883 222c 	strb.w	r2, [r3, #556]	; 0x22c
	  				SMSUartTxState = Control;
 80015c6:	4b09      	ldr	r3, [pc, #36]	; (80015ec <CommStateMachineTask+0x50c>)
 80015c8:	2203      	movs	r2, #3
 80015ca:	701a      	strb	r2, [r3, #0]
	  				inquiryTimeVar = INQUIRY_TIME;
 80015cc:	4b0e      	ldr	r3, [pc, #56]	; (8001608 <CommStateMachineTask+0x528>)
 80015ce:	22c8      	movs	r2, #200	; 0xc8
 80015d0:	801a      	strh	r2, [r3, #0]
}
 80015d2:	e595      	b.n	8001100 <CommStateMachineTask+0x20>
 80015d4:	0800b4d4 	.word	0x0800b4d4
 80015d8:	2000153e 	.word	0x2000153e
 80015dc:	0800b4e0 	.word	0x0800b4e0
 80015e0:	0800b4ec 	.word	0x0800b4ec
 80015e4:	0800b500 	.word	0x0800b500
 80015e8:	0800b510 	.word	0x0800b510
 80015ec:	2000153c 	.word	0x2000153c
 80015f0:	0800b518 	.word	0x0800b518
 80015f4:	2000153d 	.word	0x2000153d
 80015f8:	200003a0 	.word	0x200003a0
 80015fc:	20000ff1 	.word	0x20000ff1
 8001600:	0800b538 	.word	0x0800b538
 8001604:	0800b554 	.word	0x0800b554
 8001608:	20000008 	.word	0x20000008
 800160c:	20000f08 	.word	0x20000f08
 8001610:	0800b564 	.word	0x0800b564
 8001614:	0800b574 	.word	0x0800b574
 8001618:	0800b584 	.word	0x0800b584
 800161c:	20000f68 	.word	0x20000f68
 8001620:	0800b594 	.word	0x0800b594
 8001624:	20000f2c 	.word	0x20000f2c
 8001628:	0800b5a8 	.word	0x0800b5a8
 800162c:	20000f4a 	.word	0x20000f4a
 8001630:	0800b5b8 	.word	0x0800b5b8
 8001634:	20001757 	.word	0x20001757
 8001638:	20001755 	.word	0x20001755
 800163c:	20001754 	.word	0x20001754
 8001640:	2000174a 	.word	0x2000174a
 8001644:	20001756 	.word	0x20001756
 8001648:	20001761 	.word	0x20001761
 800164c:	20000fec 	.word	0x20000fec
 8001650:	0800b5c8 	.word	0x0800b5c8
 8001654:	20000f9a 	.word	0x20000f9a
 8001658:	0800b600 	.word	0x0800b600
 800165c:	0800b618 	.word	0x0800b618
 8001660:	20000000 	.word	0x20000000
 8001664:	0800b628 	.word	0x0800b628
 8001668:	200004a0 	.word	0x200004a0
 800166c:	200009d4 	.word	0x200009d4
 8001670:	0800b63c 	.word	0x0800b63c

08001674 <CDC_ReveiveCallback>:

void CDC_ReveiveCallback(uint8_t *Buffer, uint8_t Length)
{
	if(Length > 0)
 8001674:	2900      	cmp	r1, #0
 8001676:	d034      	beq.n	80016e2 <CDC_ReveiveCallback+0x6e>
{
 8001678:	b530      	push	{r4, r5, lr}
 800167a:	b083      	sub	sp, #12
 800167c:	4604      	mov	r4, r0
 800167e:	460d      	mov	r5, r1
		{
			volatile uint8_t i = 0;
 8001680:	2300      	movs	r3, #0
 8001682:	f88d 3007 	strb.w	r3, [sp, #7]
			while(i < Length)
 8001686:	e013      	b.n	80016b0 <CDC_ReveiveCallback+0x3c>
			{
				if(Buffer[i] != '\r')
				{
					if (RB_OK == Ring_Buffer_Write(&USBConfBuffer, Buffer[i]))
 8001688:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800168c:	b2db      	uxtb	r3, r3
 800168e:	5ce1      	ldrb	r1, [r4, r3]
 8001690:	4814      	ldr	r0, [pc, #80]	; (80016e4 <CDC_ReveiveCallback+0x70>)
 8001692:	f000 fbb6 	bl	8001e02 <Ring_Buffer_Write>
 8001696:	b958      	cbnz	r0, 80016b0 <CDC_ReveiveCallback+0x3c>
					{
						if(Buffer[i] == ENDLINE)
 8001698:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800169c:	b2db      	uxtb	r3, r3
 800169e:	5ce3      	ldrb	r3, [r4, r3]
 80016a0:	2b0a      	cmp	r3, #10
 80016a2:	d017      	beq.n	80016d4 <CDC_ReveiveCallback+0x60>
						{
							USBLineCounter++;
						}
						i++;
 80016a4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80016a8:	3301      	adds	r3, #1
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	f88d 3007 	strb.w	r3, [sp, #7]
			while(i < Length)
 80016b0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	42ab      	cmp	r3, r5
 80016b8:	d211      	bcs.n	80016de <CDC_ReveiveCallback+0x6a>
				if(Buffer[i] != '\r')
 80016ba:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	5ce3      	ldrb	r3, [r4, r3]
 80016c2:	2b0d      	cmp	r3, #13
 80016c4:	d1e0      	bne.n	8001688 <CDC_ReveiveCallback+0x14>
					}
				}
				else i++;
 80016c6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80016ca:	3301      	adds	r3, #1
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	f88d 3007 	strb.w	r3, [sp, #7]
 80016d2:	e7ed      	b.n	80016b0 <CDC_ReveiveCallback+0x3c>
							USBLineCounter++;
 80016d4:	4a04      	ldr	r2, [pc, #16]	; (80016e8 <CDC_ReveiveCallback+0x74>)
 80016d6:	7813      	ldrb	r3, [r2, #0]
 80016d8:	3301      	adds	r3, #1
 80016da:	7013      	strb	r3, [r2, #0]
 80016dc:	e7e2      	b.n	80016a4 <CDC_ReveiveCallback+0x30>
			}
		}


}
 80016de:	b003      	add	sp, #12
 80016e0:	bd30      	pop	{r4, r5, pc}
 80016e2:	4770      	bx	lr
 80016e4:	20001544 	.word	0x20001544
 80016e8:	20001748 	.word	0x20001748

080016ec <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016ec:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016ee:	e7fe      	b.n	80016ee <Error_Handler+0x2>

080016f0 <SystemClock_Config>:
{
 80016f0:	b500      	push	{lr}
 80016f2:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016f4:	2228      	movs	r2, #40	; 0x28
 80016f6:	2100      	movs	r1, #0
 80016f8:	eb0d 0002 	add.w	r0, sp, r2
 80016fc:	f005 fbfc 	bl	8006ef8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001700:	2300      	movs	r3, #0
 8001702:	9305      	str	r3, [sp, #20]
 8001704:	9306      	str	r3, [sp, #24]
 8001706:	9307      	str	r3, [sp, #28]
 8001708:	9308      	str	r3, [sp, #32]
 800170a:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800170c:	9301      	str	r3, [sp, #4]
 800170e:	9302      	str	r3, [sp, #8]
 8001710:	9303      	str	r3, [sp, #12]
 8001712:	9304      	str	r3, [sp, #16]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001714:	2309      	movs	r3, #9
 8001716:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001718:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800171c:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800171e:	2201      	movs	r2, #1
 8001720:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001722:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001724:	2202      	movs	r2, #2
 8001726:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001728:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800172a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800172e:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001730:	a80a      	add	r0, sp, #40	; 0x28
 8001732:	f002 f989 	bl	8003a48 <HAL_RCC_OscConfig>
 8001736:	b9c0      	cbnz	r0, 800176a <SystemClock_Config+0x7a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001738:	230f      	movs	r3, #15
 800173a:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800173c:	2102      	movs	r1, #2
 800173e:	9106      	str	r1, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001740:	2300      	movs	r3, #0
 8001742:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001744:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001748:	9208      	str	r2, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800174a:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800174c:	a805      	add	r0, sp, #20
 800174e:	f002 fbbb 	bl	8003ec8 <HAL_RCC_ClockConfig>
 8001752:	b960      	cbnz	r0, 800176e <SystemClock_Config+0x7e>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001754:	2310      	movs	r3, #16
 8001756:	9301      	str	r3, [sp, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8001758:	2300      	movs	r3, #0
 800175a:	9304      	str	r3, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800175c:	a801      	add	r0, sp, #4
 800175e:	f002 fc8f 	bl	8004080 <HAL_RCCEx_PeriphCLKConfig>
 8001762:	b930      	cbnz	r0, 8001772 <SystemClock_Config+0x82>
}
 8001764:	b015      	add	sp, #84	; 0x54
 8001766:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800176a:	f7ff ffbf 	bl	80016ec <Error_Handler>
    Error_Handler();
 800176e:	f7ff ffbd 	bl	80016ec <Error_Handler>
    Error_Handler();
 8001772:	f7ff ffbb 	bl	80016ec <Error_Handler>
	...

08001778 <main>:
{
 8001778:	b500      	push	{lr}
 800177a:	b085      	sub	sp, #20
  HAL_Init();
 800177c:	f000 fdcc 	bl	8002318 <HAL_Init>
  SystemClock_Config();
 8001780:	f7ff ffb6 	bl	80016f0 <SystemClock_Config>
  MX_GPIO_Init();
 8001784:	f7ff fb70 	bl	8000e68 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001788:	f000 fc8e 	bl	80020a8 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 800178c:	f000 fc24 	bl	8001fd8 <MX_TIM4_Init>
  MX_TIM3_Init();
 8001790:	f000 fbea 	bl	8001f68 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8001794:	f000 fca2 	bl	80020dc <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 8001798:	f005 f952 	bl	8006a40 <MX_USB_DEVICE_Init>
  MX_IWDG_Init();
 800179c:	f7ff fbcc 	bl	8000f38 <MX_IWDG_Init>
  MX_NVIC_Init();
 80017a0:	f7ff fbde 	bl	8000f60 <MX_NVIC_Init>
  HAL_UART_Receive_IT(&huart1, &ReceiveTmp, 1);
 80017a4:	2201      	movs	r2, #1
 80017a6:	495c      	ldr	r1, [pc, #368]	; (8001918 <main+0x1a0>)
 80017a8:	485c      	ldr	r0, [pc, #368]	; (800191c <main+0x1a4>)
 80017aa:	f003 fb02 	bl	8004db2 <HAL_UART_Receive_IT>
  if (ds18b20_read_address(ds_address) != HAL_OK)
 80017ae:	485c      	ldr	r0, [pc, #368]	; (8001920 <main+0x1a8>)
 80017b0:	f7ff fb21 	bl	8000df6 <ds18b20_read_address>
 80017b4:	b108      	cbz	r0, 80017ba <main+0x42>
      Error_Handler();
 80017b6:	f7ff ff99 	bl	80016ec <Error_Handler>
  SMSUartTxState = Reset;
 80017ba:	4b5a      	ldr	r3, [pc, #360]	; (8001924 <main+0x1ac>)
 80017bc:	2200      	movs	r2, #0
 80017be:	701a      	strb	r2, [r3, #0]
  LastTickForSim800 = HAL_GetTick();
 80017c0:	f000 fdc8 	bl	8002354 <HAL_GetTick>
 80017c4:	4b58      	ldr	r3, [pc, #352]	; (8001928 <main+0x1b0>)
 80017c6:	6018      	str	r0, [r3, #0]
  LastTickTempMeasure = HAL_GetTick();
 80017c8:	f000 fdc4 	bl	8002354 <HAL_GetTick>
 80017cc:	4b57      	ldr	r3, [pc, #348]	; (800192c <main+0x1b4>)
 80017ce:	6018      	str	r0, [r3, #0]
  memcpy(GSM.FlashBuff, 0x0801FC00, 128*4);
 80017d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017d4:	4956      	ldr	r1, [pc, #344]	; (8001930 <main+0x1b8>)
 80017d6:	4857      	ldr	r0, [pc, #348]	; (8001934 <main+0x1bc>)
 80017d8:	f005 fb80 	bl	8006edc <memcpy>
  HAL_TIM_Base_Start_IT(&htim3);
 80017dc:	4856      	ldr	r0, [pc, #344]	; (8001938 <main+0x1c0>)
 80017de:	f002 fd09 	bl	80041f4 <HAL_TIM_Base_Start_IT>
 80017e2:	e030      	b.n	8001846 <main+0xce>
			  temperature = ds18b20_get_temp_wo_fp(NULL);
 80017e4:	2000      	movs	r0, #0
 80017e6:	f7ff fb28 	bl	8000e3a <ds18b20_get_temp_wo_fp>
 80017ea:	4b54      	ldr	r3, [pc, #336]	; (800193c <main+0x1c4>)
 80017ec:	6018      	str	r0, [r3, #0]
			  tempMeasureFlag = 0;
 80017ee:	4b54      	ldr	r3, [pc, #336]	; (8001940 <main+0x1c8>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	701a      	strb	r2, [r3, #0]
	  if(LineCounter)
 80017f4:	4b53      	ldr	r3, [pc, #332]	; (8001944 <main+0x1cc>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d13a      	bne.n	8001872 <main+0xfa>
	  if(USBLineCounter)
 80017fc:	4b52      	ldr	r3, [pc, #328]	; (8001948 <main+0x1d0>)
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d143      	bne.n	800188c <main+0x114>
	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GSM.ReceivedState);
 8001804:	4c51      	ldr	r4, [pc, #324]	; (800194c <main+0x1d4>)
 8001806:	7a22      	ldrb	r2, [r4, #8]
 8001808:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800180c:	4850      	ldr	r0, [pc, #320]	; (8001950 <main+0x1d8>)
 800180e:	f001 f916 	bl	8002a3e <HAL_GPIO_WritePin>
	  CommStateMachineTask();
 8001812:	f7ff fc65 	bl	80010e0 <CommStateMachineTask>
	  if(GSM.ErrorCounter > 10)
 8001816:	f894 3224 	ldrb.w	r3, [r4, #548]	; 0x224
 800181a:	2b0a      	cmp	r3, #10
 800181c:	d904      	bls.n	8001828 <main+0xb0>
		  SMSUartTxState = Reset;
 800181e:	2300      	movs	r3, #0
 8001820:	4a40      	ldr	r2, [pc, #256]	; (8001924 <main+0x1ac>)
 8001822:	7013      	strb	r3, [r2, #0]
		  GSM.ErrorCounter = 0;
 8001824:	f884 3224 	strb.w	r3, [r4, #548]	; 0x224
	  if(SMSUartTxState != Idle && HAL_GetTick() - GSM.LastTickReceive >= 30000)
 8001828:	4b3e      	ldr	r3, [pc, #248]	; (8001924 <main+0x1ac>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	2b06      	cmp	r3, #6
 800182e:	d13a      	bne.n	80018a6 <main+0x12e>
	  if(!HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin))
 8001830:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001834:	4846      	ldr	r0, [pc, #280]	; (8001950 <main+0x1d8>)
 8001836:	f001 f8fb 	bl	8002a30 <HAL_GPIO_ReadPin>
 800183a:	2800      	cmp	r0, #0
 800183c:	d046      	beq.n	80018cc <main+0x154>
	  if(GSM.CRegStat == 2)
 800183e:	4b43      	ldr	r3, [pc, #268]	; (800194c <main+0x1d4>)
 8001840:	7a9b      	ldrb	r3, [r3, #10]
 8001842:	2b02      	cmp	r3, #2
 8001844:	d063      	beq.n	800190e <main+0x196>
	  HAL_IWDG_Refresh(&hiwdg);
 8001846:	4843      	ldr	r0, [pc, #268]	; (8001954 <main+0x1dc>)
 8001848:	f001 f92b 	bl	8002aa2 <HAL_IWDG_Refresh>
	  if(HAL_GetTick() - LastTickTempMeasure >= 800)
 800184c:	f000 fd82 	bl	8002354 <HAL_GetTick>
 8001850:	4b36      	ldr	r3, [pc, #216]	; (800192c <main+0x1b4>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	1ac0      	subs	r0, r0, r3
 8001856:	f5b0 7f48 	cmp.w	r0, #800	; 0x320
 800185a:	d3cb      	bcc.n	80017f4 <main+0x7c>
		  if(!tempMeasureFlag)
 800185c:	4b38      	ldr	r3, [pc, #224]	; (8001940 <main+0x1c8>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d1bf      	bne.n	80017e4 <main+0x6c>
			  ds18b20_start_measure(NULL);
 8001864:	2000      	movs	r0, #0
 8001866:	f7ff fae3 	bl	8000e30 <ds18b20_start_measure>
			  tempMeasureFlag = 1;
 800186a:	4b35      	ldr	r3, [pc, #212]	; (8001940 <main+0x1c8>)
 800186c:	2201      	movs	r2, #1
 800186e:	701a      	strb	r2, [r3, #0]
 8001870:	e7c0      	b.n	80017f4 <main+0x7c>
		  Parser_TakeLine(&ReceiveBuffer, ReceivedData);
 8001872:	4c39      	ldr	r4, [pc, #228]	; (8001958 <main+0x1e0>)
 8001874:	4621      	mov	r1, r4
 8001876:	4839      	ldr	r0, [pc, #228]	; (800195c <main+0x1e4>)
 8001878:	f000 f932 	bl	8001ae0 <Parser_TakeLine>
		  LineCounter--;
 800187c:	4a31      	ldr	r2, [pc, #196]	; (8001944 <main+0x1cc>)
 800187e:	7813      	ldrb	r3, [r2, #0]
 8001880:	3b01      	subs	r3, #1
 8001882:	7013      	strb	r3, [r2, #0]
		  Parser_parse(ReceivedData);
 8001884:	4620      	mov	r0, r4
 8001886:	f000 f949 	bl	8001b1c <Parser_parse>
 800188a:	e7b7      	b.n	80017fc <main+0x84>
		  Parser_TakeLine(&USBConfBuffer, ReceivedData);
 800188c:	4c32      	ldr	r4, [pc, #200]	; (8001958 <main+0x1e0>)
 800188e:	4621      	mov	r1, r4
 8001890:	4833      	ldr	r0, [pc, #204]	; (8001960 <main+0x1e8>)
 8001892:	f000 f925 	bl	8001ae0 <Parser_TakeLine>
		  USBLineCounter--;
 8001896:	4a2c      	ldr	r2, [pc, #176]	; (8001948 <main+0x1d0>)
 8001898:	7813      	ldrb	r3, [r2, #0]
 800189a:	3b01      	subs	r3, #1
 800189c:	7013      	strb	r3, [r2, #0]
		  Parser_parse(ReceivedData);
 800189e:	4620      	mov	r0, r4
 80018a0:	f000 f93c 	bl	8001b1c <Parser_parse>
 80018a4:	e7ae      	b.n	8001804 <main+0x8c>
	  if(SMSUartTxState != Idle && HAL_GetTick() - GSM.LastTickReceive >= 30000)
 80018a6:	f000 fd55 	bl	8002354 <HAL_GetTick>
 80018aa:	4b28      	ldr	r3, [pc, #160]	; (800194c <main+0x1d4>)
 80018ac:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 80018b0:	1ac0      	subs	r0, r0, r3
 80018b2:	f247 532f 	movw	r3, #29999	; 0x752f
 80018b6:	4298      	cmp	r0, r3
 80018b8:	d9ba      	bls.n	8001830 <main+0xb8>
		  SMSUartTxState = Reset;
 80018ba:	4b1a      	ldr	r3, [pc, #104]	; (8001924 <main+0x1ac>)
 80018bc:	2200      	movs	r2, #0
 80018be:	701a      	strb	r2, [r3, #0]
		  GSM.LastTickReceive = HAL_GetTick();
 80018c0:	f000 fd48 	bl	8002354 <HAL_GetTick>
 80018c4:	4b21      	ldr	r3, [pc, #132]	; (800194c <main+0x1d4>)
 80018c6:	f8c3 0228 	str.w	r0, [r3, #552]	; 0x228
 80018ca:	e7b1      	b.n	8001830 <main+0xb8>
		  sprintf(SMSMessage, "%.1f\n%d\n%s\n%s\n%s", GSM.SignalQuality, GSM.ErrorCounter, GSM.ConfigFlash.apn, GSM.ConfigFlash.path, GSM.ConfigFlash.server);
 80018cc:	4c1f      	ldr	r4, [pc, #124]	; (800194c <main+0x1d4>)
 80018ce:	f894 2224 	ldrb.w	r2, [r4, #548]	; 0x224
 80018d2:	4623      	mov	r3, r4
 80018d4:	e8f3 0118 	ldrd	r0, r1, [r3], #96	; 0x60
 80018d8:	9303      	str	r3, [sp, #12]
 80018da:	f104 0392 	add.w	r3, r4, #146	; 0x92
 80018de:	9302      	str	r3, [sp, #8]
 80018e0:	f104 03e9 	add.w	r3, r4, #233	; 0xe9
 80018e4:	9301      	str	r3, [sp, #4]
 80018e6:	9200      	str	r2, [sp, #0]
 80018e8:	4602      	mov	r2, r0
 80018ea:	460b      	mov	r3, r1
 80018ec:	491d      	ldr	r1, [pc, #116]	; (8001964 <main+0x1ec>)
 80018ee:	481e      	ldr	r0, [pc, #120]	; (8001968 <main+0x1f0>)
 80018f0:	f005 ff6a 	bl	80077c8 <siprintf>
		  strcpy(GSM.SMSNumber, GSM.ConfigFlash.number1);
 80018f4:	f104 01c4 	add.w	r1, r4, #196	; 0xc4
 80018f8:	f104 0012 	add.w	r0, r4, #18
 80018fc:	f005 ff93 	bl	8007826 <strcpy>
		  GSM.TaskToDo.SmsMsgToSend = 1;
 8001900:	f894 322c 	ldrb.w	r3, [r4, #556]	; 0x22c
 8001904:	f043 0302 	orr.w	r3, r3, #2
 8001908:	f884 322c 	strb.w	r3, [r4, #556]	; 0x22c
 800190c:	e797      	b.n	800183e <main+0xc6>
		  SMSUartTxState = Start;
 800190e:	4b05      	ldr	r3, [pc, #20]	; (8001924 <main+0x1ac>)
 8001910:	2201      	movs	r2, #1
 8001912:	701a      	strb	r2, [r3, #0]
 8001914:	e797      	b.n	8001846 <main+0xce>
 8001916:	bf00      	nop
 8001918:	20001348 	.word	0x20001348
 800191c:	200017f8 	.word	0x200017f8
 8001920:	2000174c 	.word	0x2000174c
 8001924:	2000153c 	.word	0x2000153c
 8001928:	20001138 	.word	0x20001138
 800192c:	2000113c 	.word	0x2000113c
 8001930:	0801fc00 	.word	0x0801fc00
 8001934:	20000f2c 	.word	0x20000f2c
 8001938:	20001768 	.word	0x20001768
 800193c:	2000175c 	.word	0x2000175c
 8001940:	20001758 	.word	0x20001758
 8001944:	20001140 	.word	0x20001140
 8001948:	20001748 	.word	0x20001748
 800194c:	20000f08 	.word	0x20000f08
 8001950:	40011000 	.word	0x40011000
 8001954:	20000394 	.word	0x20000394
 8001958:	2000134c 	.word	0x2000134c
 800195c:	20001144 	.word	0x20001144
 8001960:	20001544 	.word	0x20001544
 8001964:	0800b64c 	.word	0x0800b64c
 8001968:	2000144c 	.word	0x2000144c

0800196c <Parser_ParseCMGL>:
		GSM.FtpPut.CnfLength = atoi(ParsePointer);
	}
}

static void Parser_ParseCMGL(void)
{
 800196c:	b538      	push	{r3, r4, r5, lr}
	char *ParsePointer = strtok(NULL, "\"");
 800196e:	4d0b      	ldr	r5, [pc, #44]	; (800199c <Parser_ParseCMGL+0x30>)
 8001970:	4629      	mov	r1, r5
 8001972:	2000      	movs	r0, #0
 8001974:	f006 fd74 	bl	8008460 <strtok>
	ParsePointer = strtok(NULL, "\"");
 8001978:	4629      	mov	r1, r5
 800197a:	2000      	movs	r0, #0
 800197c:	f006 fd70 	bl	8008460 <strtok>
	ParsePointer = strtok(NULL, ",") +1;
 8001980:	4907      	ldr	r1, [pc, #28]	; (80019a0 <Parser_ParseCMGL+0x34>)
 8001982:	2000      	movs	r0, #0
 8001984:	f006 fd6c 	bl	8008460 <strtok>
 8001988:	1c44      	adds	r4, r0, #1
	strtok(ParsePointer, "\"");
 800198a:	4629      	mov	r1, r5
 800198c:	4620      	mov	r0, r4
 800198e:	f006 fd67 	bl	8008460 <strtok>
	strcpy(GSM.SMSNumber,ParsePointer);
 8001992:	4621      	mov	r1, r4
 8001994:	4803      	ldr	r0, [pc, #12]	; (80019a4 <Parser_ParseCMGL+0x38>)
 8001996:	f005 ff46 	bl	8007826 <strcpy>
}
 800199a:	bd38      	pop	{r3, r4, r5, pc}
 800199c:	0800b660 	.word	0x0800b660
 80019a0:	0800b664 	.word	0x0800b664
 80019a4:	20000f1a 	.word	0x20000f1a

080019a8 <Parser_ParseCSQ>:
{
 80019a8:	b508      	push	{r3, lr}
	char * ParsePointer = strtok(NULL, ",");
 80019aa:	4905      	ldr	r1, [pc, #20]	; (80019c0 <Parser_ParseCSQ+0x18>)
 80019ac:	2000      	movs	r0, #0
 80019ae:	f006 fd57 	bl	8008460 <strtok>
	GSM.SignalQuality = atof(ParsePointer);
 80019b2:	f005 fa61 	bl	8006e78 <atof>
 80019b6:	4b03      	ldr	r3, [pc, #12]	; (80019c4 <Parser_ParseCSQ+0x1c>)
 80019b8:	e9c3 0100 	strd	r0, r1, [r3]
}
 80019bc:	bd08      	pop	{r3, pc}
 80019be:	bf00      	nop
 80019c0:	0800b664 	.word	0x0800b664
 80019c4:	20000f08 	.word	0x20000f08

080019c8 <Parser_ParseCREG>:
{
 80019c8:	b538      	push	{r3, r4, r5, lr}
	char * ParsePointer = strtok(NULL, ",");
 80019ca:	4d08      	ldr	r5, [pc, #32]	; (80019ec <Parser_ParseCREG+0x24>)
 80019cc:	4629      	mov	r1, r5
 80019ce:	2000      	movs	r0, #0
 80019d0:	f006 fd46 	bl	8008460 <strtok>
	GSM.CRegN = atoi(ParsePointer);
 80019d4:	f005 fa53 	bl	8006e7e <atoi>
 80019d8:	4c05      	ldr	r4, [pc, #20]	; (80019f0 <Parser_ParseCREG+0x28>)
 80019da:	7260      	strb	r0, [r4, #9]
	ParsePointer = strtok(NULL, ",");
 80019dc:	4629      	mov	r1, r5
 80019de:	2000      	movs	r0, #0
 80019e0:	f006 fd3e 	bl	8008460 <strtok>
	GSM.CRegStat = atoi(ParsePointer);
 80019e4:	f005 fa4b 	bl	8006e7e <atoi>
 80019e8:	72a0      	strb	r0, [r4, #10]
}
 80019ea:	bd38      	pop	{r3, r4, r5, pc}
 80019ec:	0800b664 	.word	0x0800b664
 80019f0:	20000f08 	.word	0x20000f08

080019f4 <Parser_ParseCCLK>:
{
 80019f4:	b510      	push	{r4, lr}
	char * ParsePointer = strtok(NULL, "/");
 80019f6:	4c1a      	ldr	r4, [pc, #104]	; (8001a60 <Parser_ParseCCLK+0x6c>)
 80019f8:	4621      	mov	r1, r4
 80019fa:	2000      	movs	r0, #0
 80019fc:	f006 fd30 	bl	8008460 <strtok>
	year = atoi(ParsePointer+1);
 8001a00:	3001      	adds	r0, #1
 8001a02:	f005 fa3c 	bl	8006e7e <atoi>
 8001a06:	4b17      	ldr	r3, [pc, #92]	; (8001a64 <Parser_ParseCCLK+0x70>)
 8001a08:	7018      	strb	r0, [r3, #0]
	ParsePointer = strtok(NULL, "/");
 8001a0a:	4621      	mov	r1, r4
 8001a0c:	2000      	movs	r0, #0
 8001a0e:	f006 fd27 	bl	8008460 <strtok>
	month = atoi(ParsePointer);
 8001a12:	f005 fa34 	bl	8006e7e <atoi>
 8001a16:	4b14      	ldr	r3, [pc, #80]	; (8001a68 <Parser_ParseCCLK+0x74>)
 8001a18:	7018      	strb	r0, [r3, #0]
	ParsePointer = strtok(NULL, ",");
 8001a1a:	4914      	ldr	r1, [pc, #80]	; (8001a6c <Parser_ParseCCLK+0x78>)
 8001a1c:	2000      	movs	r0, #0
 8001a1e:	f006 fd1f 	bl	8008460 <strtok>
	day = atoi(ParsePointer);
 8001a22:	f005 fa2c 	bl	8006e7e <atoi>
 8001a26:	4b12      	ldr	r3, [pc, #72]	; (8001a70 <Parser_ParseCCLK+0x7c>)
 8001a28:	7018      	strb	r0, [r3, #0]
	ParsePointer = strtok(NULL, ":");
 8001a2a:	4c12      	ldr	r4, [pc, #72]	; (8001a74 <Parser_ParseCCLK+0x80>)
 8001a2c:	4621      	mov	r1, r4
 8001a2e:	2000      	movs	r0, #0
 8001a30:	f006 fd16 	bl	8008460 <strtok>
	hour = atoi(ParsePointer);
 8001a34:	f005 fa23 	bl	8006e7e <atoi>
 8001a38:	4b0f      	ldr	r3, [pc, #60]	; (8001a78 <Parser_ParseCCLK+0x84>)
 8001a3a:	7018      	strb	r0, [r3, #0]
	ParsePointer = strtok(NULL, ":");
 8001a3c:	4621      	mov	r1, r4
 8001a3e:	2000      	movs	r0, #0
 8001a40:	f006 fd0e 	bl	8008460 <strtok>
	minute = atoi(ParsePointer);
 8001a44:	f005 fa1b 	bl	8006e7e <atoi>
 8001a48:	4b0c      	ldr	r3, [pc, #48]	; (8001a7c <Parser_ParseCCLK+0x88>)
 8001a4a:	7018      	strb	r0, [r3, #0]
	ParsePointer = strtok(NULL, "+");
 8001a4c:	490c      	ldr	r1, [pc, #48]	; (8001a80 <Parser_ParseCCLK+0x8c>)
 8001a4e:	2000      	movs	r0, #0
 8001a50:	f006 fd06 	bl	8008460 <strtok>
	second = atoi(ParsePointer);
 8001a54:	f005 fa13 	bl	8006e7e <atoi>
 8001a58:	4b0a      	ldr	r3, [pc, #40]	; (8001a84 <Parser_ParseCCLK+0x90>)
 8001a5a:	7018      	strb	r0, [r3, #0]
}
 8001a5c:	bd10      	pop	{r4, pc}
 8001a5e:	bf00      	nop
 8001a60:	0800b668 	.word	0x0800b668
 8001a64:	20001761 	.word	0x20001761
 8001a68:	20001756 	.word	0x20001756
 8001a6c:	0800b664 	.word	0x0800b664
 8001a70:	2000174a 	.word	0x2000174a
 8001a74:	0800b6e0 	.word	0x0800b6e0
 8001a78:	20001754 	.word	0x20001754
 8001a7c:	20001755 	.word	0x20001755
 8001a80:	0800b66c 	.word	0x0800b66c
 8001a84:	20001757 	.word	0x20001757

08001a88 <Parser_ParseFTPPUT>:
{
 8001a88:	b538      	push	{r3, r4, r5, lr}
	char * ParsePointer = strtok(NULL, ",");
 8001a8a:	4d13      	ldr	r5, [pc, #76]	; (8001ad8 <Parser_ParseFTPPUT+0x50>)
 8001a8c:	4629      	mov	r1, r5
 8001a8e:	2000      	movs	r0, #0
 8001a90:	f006 fce6 	bl	8008460 <strtok>
	GSM.FtpPut.mode = atoi(ParsePointer);
 8001a94:	f005 f9f3 	bl	8006e7e <atoi>
 8001a98:	4c10      	ldr	r4, [pc, #64]	; (8001adc <Parser_ParseFTPPUT+0x54>)
 8001a9a:	7320      	strb	r0, [r4, #12]
	ParsePointer = strtok(NULL, ",");
 8001a9c:	4629      	mov	r1, r5
 8001a9e:	2000      	movs	r0, #0
 8001aa0:	f006 fcde 	bl	8008460 <strtok>
	if(GSM.FtpPut.mode == 1)
 8001aa4:	7b23      	ldrb	r3, [r4, #12]
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d002      	beq.n	8001ab0 <Parser_ParseFTPPUT+0x28>
	else if(GSM.FtpPut.mode == 2)
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d00e      	beq.n	8001acc <Parser_ParseFTPPUT+0x44>
}
 8001aae:	bd38      	pop	{r3, r4, r5, pc}
		GSM.FtpPut.status = atoi(ParsePointer);
 8001ab0:	f005 f9e5 	bl	8006e7e <atoi>
 8001ab4:	b2c0      	uxtb	r0, r0
 8001ab6:	7360      	strb	r0, [r4, #13]
		if(GSM.FtpPut.status == 1)
 8001ab8:	2801      	cmp	r0, #1
 8001aba:	d1f8      	bne.n	8001aae <Parser_ParseFTPPUT+0x26>
			ParsePointer = strtok(NULL, ",");
 8001abc:	4629      	mov	r1, r5
 8001abe:	2000      	movs	r0, #0
 8001ac0:	f006 fcce 	bl	8008460 <strtok>
			GSM.FtpPut.maxLength = atoi(ParsePointer);
 8001ac4:	f005 f9db 	bl	8006e7e <atoi>
 8001ac8:	81e0      	strh	r0, [r4, #14]
 8001aca:	e7f0      	b.n	8001aae <Parser_ParseFTPPUT+0x26>
		GSM.FtpPut.CnfLength = atoi(ParsePointer);
 8001acc:	f005 f9d7 	bl	8006e7e <atoi>
 8001ad0:	4b02      	ldr	r3, [pc, #8]	; (8001adc <Parser_ParseFTPPUT+0x54>)
 8001ad2:	8218      	strh	r0, [r3, #16]
}
 8001ad4:	e7eb      	b.n	8001aae <Parser_ParseFTPPUT+0x26>
 8001ad6:	bf00      	nop
 8001ad8:	0800b664 	.word	0x0800b664
 8001adc:	20000f08 	.word	0x20000f08

08001ae0 <Parser_TakeLine>:
{
 8001ae0:	b570      	push	{r4, r5, r6, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	4606      	mov	r6, r0
 8001ae6:	460d      	mov	r5, r1
	  uint8_t tmp = 0;
 8001ae8:	2400      	movs	r4, #0
 8001aea:	f88d 4007 	strb.w	r4, [sp, #7]
 8001aee:	e006      	b.n	8001afe <Parser_TakeLine+0x1e>
			Destination[i] = tmp;
 8001af0:	552b      	strb	r3, [r5, r4]
			i++;
 8001af2:	3401      	adds	r4, #1
 8001af4:	b2e4      	uxtb	r4, r4
	} while(tmp != ENDLINE);
 8001af6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001afa:	2b0a      	cmp	r3, #10
 8001afc:	d00b      	beq.n	8001b16 <Parser_TakeLine+0x36>
		 Ring_Buffer_Read(Buff, &tmp);
 8001afe:	f10d 0107 	add.w	r1, sp, #7
 8001b02:	4630      	mov	r0, r6
 8001b04:	f000 f968 	bl	8001dd8 <Ring_Buffer_Read>
		 if(tmp == ENDLINE)
 8001b08:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001b0c:	2b0a      	cmp	r3, #10
 8001b0e:	d1ef      	bne.n	8001af0 <Parser_TakeLine+0x10>
			 Destination[i] = 0;
 8001b10:	2300      	movs	r3, #0
 8001b12:	552b      	strb	r3, [r5, r4]
 8001b14:	e7ed      	b.n	8001af2 <Parser_TakeLine+0x12>
}
 8001b16:	b002      	add	sp, #8
 8001b18:	bd70      	pop	{r4, r5, r6, pc}
	...

08001b1c <Parser_parse>:


void Parser_parse(uint8_t * DataToParse)
{
 8001b1c:	b530      	push	{r4, r5, lr}
 8001b1e:	b089      	sub	sp, #36	; 0x24
 8001b20:	4604      	mov	r4, r0

	if(strcmp("OK", (char*)DataToParse) == 0)
 8001b22:	4601      	mov	r1, r0
 8001b24:	4887      	ldr	r0, [pc, #540]	; (8001d44 <Parser_parse+0x228>)
 8001b26:	f7fe fb13 	bl	8000150 <strcmp>
 8001b2a:	b920      	cbnz	r0, 8001b36 <Parser_parse+0x1a>
	{
		GSM.ReceivedState = 1;
 8001b2c:	4b86      	ldr	r3, [pc, #536]	; (8001d48 <Parser_parse+0x22c>)
 8001b2e:	2201      	movs	r2, #1
 8001b30:	721a      	strb	r2, [r3, #8]
//	  	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
//	  	UartLog("led_off\n\r");
//	  }


}
 8001b32:	b009      	add	sp, #36	; 0x24
 8001b34:	bd30      	pop	{r4, r5, pc}
	else if(strcmp("save", (char*)DataToParse) == 0)
 8001b36:	4621      	mov	r1, r4
 8001b38:	4884      	ldr	r0, [pc, #528]	; (8001d4c <Parser_parse+0x230>)
 8001b3a:	f7fe fb09 	bl	8000150 <strcmp>
 8001b3e:	b198      	cbz	r0, 8001b68 <Parser_parse+0x4c>
	else if(strcmp("Log", (char*)DataToParse) == 0)
 8001b40:	4621      	mov	r1, r4
 8001b42:	4883      	ldr	r0, [pc, #524]	; (8001d50 <Parser_parse+0x234>)
 8001b44:	f7fe fb04 	bl	8000150 <strcmp>
 8001b48:	b1a0      	cbz	r0, 8001b74 <Parser_parse+0x58>
	else if(strcmp("Temp", (char*)DataToParse) == 0)
 8001b4a:	4621      	mov	r1, r4
 8001b4c:	4881      	ldr	r0, [pc, #516]	; (8001d54 <Parser_parse+0x238>)
 8001b4e:	f7fe faff 	bl	8000150 <strcmp>
 8001b52:	b368      	cbz	r0, 8001bb0 <Parser_parse+0x94>
	else if(strcmp("ResetGsm", (char*)DataToParse) == 0)
 8001b54:	4621      	mov	r1, r4
 8001b56:	4880      	ldr	r0, [pc, #512]	; (8001d58 <Parser_parse+0x23c>)
 8001b58:	f7fe fafa 	bl	8000150 <strcmp>
 8001b5c:	2800      	cmp	r0, #0
 8001b5e:	d139      	bne.n	8001bd4 <Parser_parse+0xb8>
		SMSUartTxState = Reset;
 8001b60:	4b7e      	ldr	r3, [pc, #504]	; (8001d5c <Parser_parse+0x240>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	701a      	strb	r2, [r3, #0]
 8001b66:	e7e4      	b.n	8001b32 <Parser_parse+0x16>
		Flash_Write_Data(0x0801FC00, GSM.FlashBuff, 128);
 8001b68:	2280      	movs	r2, #128	; 0x80
 8001b6a:	497d      	ldr	r1, [pc, #500]	; (8001d60 <Parser_parse+0x244>)
 8001b6c:	487d      	ldr	r0, [pc, #500]	; (8001d64 <Parser_parse+0x248>)
 8001b6e:	f7ff f8d1 	bl	8000d14 <Flash_Write_Data>
 8001b72:	e7de      	b.n	8001b32 <Parser_parse+0x16>
		sprintf(SMSMessage, "CSQ:%.1f\nERROR:%d\n%d\nAPN:%s\n%s\n%s", GSM.SignalQuality, GSM.ErrorCounter, GSM.ResetCounter, GSM.ConfigFlash.apn, GSM.ConfigFlash.path, GSM.ConfigFlash.server);
 8001b74:	4c74      	ldr	r4, [pc, #464]	; (8001d48 <Parser_parse+0x22c>)
 8001b76:	f894 2224 	ldrb.w	r2, [r4, #548]	; 0x224
 8001b7a:	f8b4 522e 	ldrh.w	r5, [r4, #558]	; 0x22e
 8001b7e:	4623      	mov	r3, r4
 8001b80:	e8f3 0118 	ldrd	r0, r1, [r3], #96	; 0x60
 8001b84:	9304      	str	r3, [sp, #16]
 8001b86:	f104 0392 	add.w	r3, r4, #146	; 0x92
 8001b8a:	9303      	str	r3, [sp, #12]
 8001b8c:	f104 03e9 	add.w	r3, r4, #233	; 0xe9
 8001b90:	9302      	str	r3, [sp, #8]
 8001b92:	9501      	str	r5, [sp, #4]
 8001b94:	9200      	str	r2, [sp, #0]
 8001b96:	4602      	mov	r2, r0
 8001b98:	460b      	mov	r3, r1
 8001b9a:	4973      	ldr	r1, [pc, #460]	; (8001d68 <Parser_parse+0x24c>)
 8001b9c:	4873      	ldr	r0, [pc, #460]	; (8001d6c <Parser_parse+0x250>)
 8001b9e:	f005 fe13 	bl	80077c8 <siprintf>
		GSM.TaskToDo.SmsMsgToSend = 1;
 8001ba2:	f894 322c 	ldrb.w	r3, [r4, #556]	; 0x22c
 8001ba6:	f043 0302 	orr.w	r3, r3, #2
 8001baa:	f884 322c 	strb.w	r3, [r4, #556]	; 0x22c
 8001bae:	e7c0      	b.n	8001b32 <Parser_parse+0x16>
		Temperature100ToString(temperature, TemperatureString);
 8001bb0:	a906      	add	r1, sp, #24
 8001bb2:	4b6f      	ldr	r3, [pc, #444]	; (8001d70 <Parser_parse+0x254>)
 8001bb4:	6818      	ldr	r0, [r3, #0]
 8001bb6:	f000 fb35 	bl	8002224 <Temperature100ToString>
		sprintf(SMSMessage, "Temperature: %s", TemperatureString);
 8001bba:	aa06      	add	r2, sp, #24
 8001bbc:	496d      	ldr	r1, [pc, #436]	; (8001d74 <Parser_parse+0x258>)
 8001bbe:	486b      	ldr	r0, [pc, #428]	; (8001d6c <Parser_parse+0x250>)
 8001bc0:	f005 fe02 	bl	80077c8 <siprintf>
		GSM.TaskToDo.SmsMsgToSend = 1;
 8001bc4:	4a60      	ldr	r2, [pc, #384]	; (8001d48 <Parser_parse+0x22c>)
 8001bc6:	f892 322c 	ldrb.w	r3, [r2, #556]	; 0x22c
 8001bca:	f043 0302 	orr.w	r3, r3, #2
 8001bce:	f882 322c 	strb.w	r3, [r2, #556]	; 0x22c
 8001bd2:	e7ae      	b.n	8001b32 <Parser_parse+0x16>
	else if(strcmp("ResetUc", (char*)DataToParse) == 0)
 8001bd4:	4621      	mov	r1, r4
 8001bd6:	4868      	ldr	r0, [pc, #416]	; (8001d78 <Parser_parse+0x25c>)
 8001bd8:	f7fe faba 	bl	8000150 <strcmp>
 8001bdc:	b158      	cbz	r0, 8001bf6 <Parser_parse+0xda>
	else if(strcmp("ERROR", (char*)DataToParse) == 0)
 8001bde:	4621      	mov	r1, r4
 8001be0:	4866      	ldr	r0, [pc, #408]	; (8001d7c <Parser_parse+0x260>)
 8001be2:	f7fe fab5 	bl	8000150 <strcmp>
 8001be6:	b948      	cbnz	r0, 8001bfc <Parser_parse+0xe0>
		GSM.ErrorCounter++;
 8001be8:	4a57      	ldr	r2, [pc, #348]	; (8001d48 <Parser_parse+0x22c>)
 8001bea:	f892 3224 	ldrb.w	r3, [r2, #548]	; 0x224
 8001bee:	3301      	adds	r3, #1
 8001bf0:	f882 3224 	strb.w	r3, [r2, #548]	; 0x224
 8001bf4:	e79d      	b.n	8001b32 <Parser_parse+0x16>
		HAL_NVIC_SystemReset();
 8001bf6:	f000 fc0b 	bl	8002410 <HAL_NVIC_SystemReset>
 8001bfa:	e79a      	b.n	8001b32 <Parser_parse+0x16>
		char * ParsePointer = strtok((char*)DataToParse, " ");
 8001bfc:	4960      	ldr	r1, [pc, #384]	; (8001d80 <Parser_parse+0x264>)
 8001bfe:	4620      	mov	r0, r4
 8001c00:	f006 fc2e 	bl	8008460 <strtok>
 8001c04:	4604      	mov	r4, r0
		if(strcmp("+CSQ:", ParsePointer) == 0)
 8001c06:	4601      	mov	r1, r0
 8001c08:	485e      	ldr	r0, [pc, #376]	; (8001d84 <Parser_parse+0x268>)
 8001c0a:	f7fe faa1 	bl	8000150 <strcmp>
 8001c0e:	2800      	cmp	r0, #0
 8001c10:	d050      	beq.n	8001cb4 <Parser_parse+0x198>
		else if(strcmp("+CREG:", ParsePointer) == 0)
 8001c12:	4621      	mov	r1, r4
 8001c14:	485c      	ldr	r0, [pc, #368]	; (8001d88 <Parser_parse+0x26c>)
 8001c16:	f7fe fa9b 	bl	8000150 <strcmp>
 8001c1a:	2800      	cmp	r0, #0
 8001c1c:	d04d      	beq.n	8001cba <Parser_parse+0x19e>
		else if(strcmp("+CCLK:", ParsePointer) == 0)
 8001c1e:	4621      	mov	r1, r4
 8001c20:	485a      	ldr	r0, [pc, #360]	; (8001d8c <Parser_parse+0x270>)
 8001c22:	f7fe fa95 	bl	8000150 <strcmp>
 8001c26:	2800      	cmp	r0, #0
 8001c28:	d04a      	beq.n	8001cc0 <Parser_parse+0x1a4>
		else if(strcmp("+FTPPUT:", ParsePointer) == 0)
 8001c2a:	4621      	mov	r1, r4
 8001c2c:	4858      	ldr	r0, [pc, #352]	; (8001d90 <Parser_parse+0x274>)
 8001c2e:	f7fe fa8f 	bl	8000150 <strcmp>
 8001c32:	2800      	cmp	r0, #0
 8001c34:	d047      	beq.n	8001cc6 <Parser_parse+0x1aa>
		else if(strcmp("+CMGL:", ParsePointer) == 0)
 8001c36:	4621      	mov	r1, r4
 8001c38:	4856      	ldr	r0, [pc, #344]	; (8001d94 <Parser_parse+0x278>)
 8001c3a:	f7fe fa89 	bl	8000150 <strcmp>
 8001c3e:	2800      	cmp	r0, #0
 8001c40:	d044      	beq.n	8001ccc <Parser_parse+0x1b0>
		else if(strcmp("login:", ParsePointer) == 0)
 8001c42:	4621      	mov	r1, r4
 8001c44:	4854      	ldr	r0, [pc, #336]	; (8001d98 <Parser_parse+0x27c>)
 8001c46:	f7fe fa83 	bl	8000150 <strcmp>
 8001c4a:	2800      	cmp	r0, #0
 8001c4c:	d041      	beq.n	8001cd2 <Parser_parse+0x1b6>
		else if(strcmp("password:", ParsePointer) == 0)
 8001c4e:	4621      	mov	r1, r4
 8001c50:	4852      	ldr	r0, [pc, #328]	; (8001d9c <Parser_parse+0x280>)
 8001c52:	f7fe fa7d 	bl	8000150 <strcmp>
 8001c56:	2800      	cmp	r0, #0
 8001c58:	d043      	beq.n	8001ce2 <Parser_parse+0x1c6>
		else if(strcmp("server:", ParsePointer) == 0)
 8001c5a:	4621      	mov	r1, r4
 8001c5c:	4850      	ldr	r0, [pc, #320]	; (8001da0 <Parser_parse+0x284>)
 8001c5e:	f7fe fa77 	bl	8000150 <strcmp>
 8001c62:	2800      	cmp	r0, #0
 8001c64:	d045      	beq.n	8001cf2 <Parser_parse+0x1d6>
		else if(strcmp("path:", ParsePointer) == 0)
 8001c66:	4621      	mov	r1, r4
 8001c68:	484e      	ldr	r0, [pc, #312]	; (8001da4 <Parser_parse+0x288>)
 8001c6a:	f7fe fa71 	bl	8000150 <strcmp>
 8001c6e:	2800      	cmp	r0, #0
 8001c70:	d047      	beq.n	8001d02 <Parser_parse+0x1e6>
		else if(strcmp("device:", ParsePointer) == 0)
 8001c72:	4621      	mov	r1, r4
 8001c74:	484c      	ldr	r0, [pc, #304]	; (8001da8 <Parser_parse+0x28c>)
 8001c76:	f7fe fa6b 	bl	8000150 <strcmp>
 8001c7a:	2800      	cmp	r0, #0
 8001c7c:	d049      	beq.n	8001d12 <Parser_parse+0x1f6>
		else if(strcmp("number1:", ParsePointer) == 0)
 8001c7e:	4621      	mov	r1, r4
 8001c80:	484a      	ldr	r0, [pc, #296]	; (8001dac <Parser_parse+0x290>)
 8001c82:	f7fe fa65 	bl	8000150 <strcmp>
 8001c86:	2800      	cmp	r0, #0
 8001c88:	d04b      	beq.n	8001d22 <Parser_parse+0x206>
		else if(strcmp("number2:", ParsePointer) == 0)
 8001c8a:	4621      	mov	r1, r4
 8001c8c:	4848      	ldr	r0, [pc, #288]	; (8001db0 <Parser_parse+0x294>)
 8001c8e:	f7fe fa5f 	bl	8000150 <strcmp>
 8001c92:	2800      	cmp	r0, #0
 8001c94:	d04d      	beq.n	8001d32 <Parser_parse+0x216>
		else if(strcmp("apn:", ParsePointer) == 0)
 8001c96:	4621      	mov	r1, r4
 8001c98:	4846      	ldr	r0, [pc, #280]	; (8001db4 <Parser_parse+0x298>)
 8001c9a:	f7fe fa59 	bl	8000150 <strcmp>
 8001c9e:	2800      	cmp	r0, #0
 8001ca0:	f47f af47 	bne.w	8001b32 <Parser_parse+0x16>
			ParsePointer = strtok(NULL, "\r");
 8001ca4:	4944      	ldr	r1, [pc, #272]	; (8001db8 <Parser_parse+0x29c>)
 8001ca6:	f006 fbdb 	bl	8008460 <strtok>
 8001caa:	4601      	mov	r1, r0
			strcpy(GSM.ConfigFlash.apn, ParsePointer);
 8001cac:	4843      	ldr	r0, [pc, #268]	; (8001dbc <Parser_parse+0x2a0>)
 8001cae:	f005 fdba 	bl	8007826 <strcpy>
}
 8001cb2:	e73e      	b.n	8001b32 <Parser_parse+0x16>
			Parser_ParseCSQ();
 8001cb4:	f7ff fe78 	bl	80019a8 <Parser_ParseCSQ>
 8001cb8:	e73b      	b.n	8001b32 <Parser_parse+0x16>
			Parser_ParseCREG();
 8001cba:	f7ff fe85 	bl	80019c8 <Parser_ParseCREG>
 8001cbe:	e738      	b.n	8001b32 <Parser_parse+0x16>
			Parser_ParseCCLK();
 8001cc0:	f7ff fe98 	bl	80019f4 <Parser_ParseCCLK>
 8001cc4:	e735      	b.n	8001b32 <Parser_parse+0x16>
			Parser_ParseFTPPUT();
 8001cc6:	f7ff fedf 	bl	8001a88 <Parser_ParseFTPPUT>
 8001cca:	e732      	b.n	8001b32 <Parser_parse+0x16>
			Parser_ParseCMGL();
 8001ccc:	f7ff fe4e 	bl	800196c <Parser_ParseCMGL>
 8001cd0:	e72f      	b.n	8001b32 <Parser_parse+0x16>
			ParsePointer = strtok(NULL, "\r");
 8001cd2:	4939      	ldr	r1, [pc, #228]	; (8001db8 <Parser_parse+0x29c>)
 8001cd4:	f006 fbc4 	bl	8008460 <strtok>
 8001cd8:	4601      	mov	r1, r0
			strcpy(GSM.ConfigFlash.login, ParsePointer);
 8001cda:	4821      	ldr	r0, [pc, #132]	; (8001d60 <Parser_parse+0x244>)
 8001cdc:	f005 fda3 	bl	8007826 <strcpy>
 8001ce0:	e727      	b.n	8001b32 <Parser_parse+0x16>
			ParsePointer = strtok(NULL, "\r");
 8001ce2:	4935      	ldr	r1, [pc, #212]	; (8001db8 <Parser_parse+0x29c>)
 8001ce4:	f006 fbbc 	bl	8008460 <strtok>
 8001ce8:	4601      	mov	r1, r0
			strcpy(GSM.ConfigFlash.password, ParsePointer);
 8001cea:	4835      	ldr	r0, [pc, #212]	; (8001dc0 <Parser_parse+0x2a4>)
 8001cec:	f005 fd9b 	bl	8007826 <strcpy>
 8001cf0:	e71f      	b.n	8001b32 <Parser_parse+0x16>
			ParsePointer = strtok(NULL, "\r");
 8001cf2:	4931      	ldr	r1, [pc, #196]	; (8001db8 <Parser_parse+0x29c>)
 8001cf4:	f006 fbb4 	bl	8008460 <strtok>
 8001cf8:	4601      	mov	r1, r0
			strcpy(GSM.ConfigFlash.server, ParsePointer);
 8001cfa:	4832      	ldr	r0, [pc, #200]	; (8001dc4 <Parser_parse+0x2a8>)
 8001cfc:	f005 fd93 	bl	8007826 <strcpy>
 8001d00:	e717      	b.n	8001b32 <Parser_parse+0x16>
			ParsePointer = strtok(NULL, "\r");
 8001d02:	492d      	ldr	r1, [pc, #180]	; (8001db8 <Parser_parse+0x29c>)
 8001d04:	f006 fbac 	bl	8008460 <strtok>
 8001d08:	4601      	mov	r1, r0
			strcpy(GSM.ConfigFlash.path, ParsePointer);
 8001d0a:	482f      	ldr	r0, [pc, #188]	; (8001dc8 <Parser_parse+0x2ac>)
 8001d0c:	f005 fd8b 	bl	8007826 <strcpy>
 8001d10:	e70f      	b.n	8001b32 <Parser_parse+0x16>
			ParsePointer = strtok(NULL, "\r");
 8001d12:	4929      	ldr	r1, [pc, #164]	; (8001db8 <Parser_parse+0x29c>)
 8001d14:	f006 fba4 	bl	8008460 <strtok>
 8001d18:	4601      	mov	r1, r0
			strcpy(GSM.ConfigFlash.deviceNumber, ParsePointer);
 8001d1a:	482c      	ldr	r0, [pc, #176]	; (8001dcc <Parser_parse+0x2b0>)
 8001d1c:	f005 fd83 	bl	8007826 <strcpy>
 8001d20:	e707      	b.n	8001b32 <Parser_parse+0x16>
			ParsePointer = strtok(NULL, "\r");
 8001d22:	4925      	ldr	r1, [pc, #148]	; (8001db8 <Parser_parse+0x29c>)
 8001d24:	f006 fb9c 	bl	8008460 <strtok>
 8001d28:	4601      	mov	r1, r0
			strcpy(GSM.ConfigFlash.number1, ParsePointer);
 8001d2a:	4829      	ldr	r0, [pc, #164]	; (8001dd0 <Parser_parse+0x2b4>)
 8001d2c:	f005 fd7b 	bl	8007826 <strcpy>
 8001d30:	e6ff      	b.n	8001b32 <Parser_parse+0x16>
			ParsePointer = strtok(NULL, "\r");
 8001d32:	4921      	ldr	r1, [pc, #132]	; (8001db8 <Parser_parse+0x29c>)
 8001d34:	f006 fb94 	bl	8008460 <strtok>
 8001d38:	4601      	mov	r1, r0
			strcpy(GSM.ConfigFlash.number2, ParsePointer);
 8001d3a:	4826      	ldr	r0, [pc, #152]	; (8001dd4 <Parser_parse+0x2b8>)
 8001d3c:	f005 fd73 	bl	8007826 <strcpy>
 8001d40:	e6f7      	b.n	8001b32 <Parser_parse+0x16>
 8001d42:	bf00      	nop
 8001d44:	0800b670 	.word	0x0800b670
 8001d48:	20000f08 	.word	0x20000f08
 8001d4c:	0800b674 	.word	0x0800b674
 8001d50:	0800b67c 	.word	0x0800b67c
 8001d54:	0800b6a4 	.word	0x0800b6a4
 8001d58:	0800b6bc 	.word	0x0800b6bc
 8001d5c:	2000153c 	.word	0x2000153c
 8001d60:	20000f2c 	.word	0x20000f2c
 8001d64:	0801fc00 	.word	0x0801fc00
 8001d68:	0800b680 	.word	0x0800b680
 8001d6c:	2000144c 	.word	0x2000144c
 8001d70:	2000175c 	.word	0x2000175c
 8001d74:	0800b6ac 	.word	0x0800b6ac
 8001d78:	0800b6c8 	.word	0x0800b6c8
 8001d7c:	0800b6d0 	.word	0x0800b6d0
 8001d80:	0800b6d8 	.word	0x0800b6d8
 8001d84:	0800b6dc 	.word	0x0800b6dc
 8001d88:	0800b6e4 	.word	0x0800b6e4
 8001d8c:	0800b6ec 	.word	0x0800b6ec
 8001d90:	0800b6f4 	.word	0x0800b6f4
 8001d94:	0800b700 	.word	0x0800b700
 8001d98:	0800b708 	.word	0x0800b708
 8001d9c:	0800b714 	.word	0x0800b714
 8001da0:	0800b720 	.word	0x0800b720
 8001da4:	0800b728 	.word	0x0800b728
 8001da8:	0800b730 	.word	0x0800b730
 8001dac:	0800b738 	.word	0x0800b738
 8001db0:	0800b744 	.word	0x0800b744
 8001db4:	0800b750 	.word	0x0800b750
 8001db8:	0800b710 	.word	0x0800b710
 8001dbc:	20000ff1 	.word	0x20000ff1
 8001dc0:	20000f4a 	.word	0x20000f4a
 8001dc4:	20000f68 	.word	0x20000f68
 8001dc8:	20000f9a 	.word	0x20000f9a
 8001dcc:	20000fec 	.word	0x20000fec
 8001dd0:	20000fcc 	.word	0x20000fcc
 8001dd4:	20000fdc 	.word	0x20000fdc

08001dd8 <Ring_Buffer_Read>:
#include "main.h"
#include "ring_buffer.h"

RbStatus_t Ring_Buffer_Read(RingBuffer_t * Buff, uint8_t *value)
{
	if(Buff->Head == Buff->Tail)
 8001dd8:	8802      	ldrh	r2, [r0, #0]
 8001dda:	8843      	ldrh	r3, [r0, #2]
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d00e      	beq.n	8001dfe <Ring_Buffer_Read+0x26>
	{
		return RB_ERROR;
	}
	*value = Buff->Buffer[Buff->Tail];
 8001de0:	4403      	add	r3, r0
 8001de2:	791b      	ldrb	r3, [r3, #4]
 8001de4:	700b      	strb	r3, [r1, #0]

	Buff->Tail = (Buff->Tail + 1) % RING_BUFFER_SIZE;
 8001de6:	8843      	ldrh	r3, [r0, #2]
 8001de8:	3301      	adds	r3, #1
 8001dea:	425a      	negs	r2, r3
 8001dec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001df0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001df4:	bf58      	it	pl
 8001df6:	4253      	negpl	r3, r2
 8001df8:	8043      	strh	r3, [r0, #2]

	return RB_OK;
 8001dfa:	2000      	movs	r0, #0
 8001dfc:	4770      	bx	lr
		return RB_ERROR;
 8001dfe:	2001      	movs	r0, #1
}
 8001e00:	4770      	bx	lr

08001e02 <Ring_Buffer_Write>:

RbStatus_t Ring_Buffer_Write(RingBuffer_t * Buff, uint8_t value)
{
	uint16_t Head_tmp = (Buff->Head + 1) % RING_BUFFER_SIZE;
 8001e02:	8802      	ldrh	r2, [r0, #0]
 8001e04:	1c53      	adds	r3, r2, #1
 8001e06:	f1d3 0c00 	rsbs	ip, r3, #0
 8001e0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e0e:	f3cc 0c08 	ubfx	ip, ip, #0, #9
 8001e12:	bf58      	it	pl
 8001e14:	f1cc 0300 	rsbpl	r3, ip, #0
 8001e18:	b29b      	uxth	r3, r3

	if(Head_tmp == Buff->Tail)
 8001e1a:	f8b0 c002 	ldrh.w	ip, [r0, #2]
 8001e1e:	459c      	cmp	ip, r3
 8001e20:	d004      	beq.n	8001e2c <Ring_Buffer_Write+0x2a>
	{
		return RB_ERROR;
	}
	Buff->Buffer[Buff->Head] = value;
 8001e22:	4402      	add	r2, r0
 8001e24:	7111      	strb	r1, [r2, #4]
	Buff->Head = Head_tmp;
 8001e26:	8003      	strh	r3, [r0, #0]

	return RB_OK;
 8001e28:	2000      	movs	r0, #0
 8001e2a:	4770      	bx	lr
		return RB_ERROR;
 8001e2c:	2001      	movs	r0, #1
}
 8001e2e:	4770      	bx	lr

08001e30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e30:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001e32:	4b0a      	ldr	r3, [pc, #40]	; (8001e5c <HAL_MspInit+0x2c>)
 8001e34:	699a      	ldr	r2, [r3, #24]
 8001e36:	f042 0201 	orr.w	r2, r2, #1
 8001e3a:	619a      	str	r2, [r3, #24]
 8001e3c:	699a      	ldr	r2, [r3, #24]
 8001e3e:	f002 0201 	and.w	r2, r2, #1
 8001e42:	9200      	str	r2, [sp, #0]
 8001e44:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e46:	69da      	ldr	r2, [r3, #28]
 8001e48:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001e4c:	61da      	str	r2, [r3, #28]
 8001e4e:	69db      	ldr	r3, [r3, #28]
 8001e50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e54:	9301      	str	r3, [sp, #4]
 8001e56:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e58:	b002      	add	sp, #8
 8001e5a:	4770      	bx	lr
 8001e5c:	40021000 	.word	0x40021000

08001e60 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e60:	e7fe      	b.n	8001e60 <NMI_Handler>

08001e62 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e62:	e7fe      	b.n	8001e62 <HardFault_Handler>

08001e64 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e64:	e7fe      	b.n	8001e64 <MemManage_Handler>

08001e66 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e66:	e7fe      	b.n	8001e66 <BusFault_Handler>

08001e68 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e68:	e7fe      	b.n	8001e68 <UsageFault_Handler>

08001e6a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e6a:	4770      	bx	lr

08001e6c <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e6c:	4770      	bx	lr

08001e6e <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e6e:	4770      	bx	lr

08001e70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e70:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e72:	f000 fa63 	bl	800233c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e76:	bd08      	pop	{r3, pc}

08001e78 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001e78:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001e7a:	4802      	ldr	r0, [pc, #8]	; (8001e84 <USB_LP_CAN1_RX0_IRQHandler+0xc>)
 8001e7c:	f001 fb8a 	bl	8003594 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001e80:	bd08      	pop	{r3, pc}
 8001e82:	bf00      	nop
 8001e84:	20002170 	.word	0x20002170

08001e88 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001e88:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001e8a:	4802      	ldr	r0, [pc, #8]	; (8001e94 <TIM3_IRQHandler+0xc>)
 8001e8c:	f002 f9ea 	bl	8004264 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001e90:	bd08      	pop	{r3, pc}
 8001e92:	bf00      	nop
 8001e94:	20001768 	.word	0x20001768

08001e98 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001e98:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001e9a:	4802      	ldr	r0, [pc, #8]	; (8001ea4 <USART1_IRQHandler+0xc>)
 8001e9c:	f002 fe6c 	bl	8004b78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001ea0:	bd08      	pop	{r3, pc}
 8001ea2:	bf00      	nop
 8001ea4:	200017f8 	.word	0x200017f8

08001ea8 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8001ea8:	2001      	movs	r0, #1
 8001eaa:	4770      	bx	lr

08001eac <_kill>:

int _kill(int pid, int sig)
{
 8001eac:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001eae:	f004 ffeb 	bl	8006e88 <__errno>
 8001eb2:	2316      	movs	r3, #22
 8001eb4:	6003      	str	r3, [r0, #0]
  return -1;
}
 8001eb6:	f04f 30ff 	mov.w	r0, #4294967295
 8001eba:	bd08      	pop	{r3, pc}

08001ebc <_exit>:

void _exit (int status)
{
 8001ebc:	b508      	push	{r3, lr}
  _kill(status, -1);
 8001ebe:	f04f 31ff 	mov.w	r1, #4294967295
 8001ec2:	f7ff fff3 	bl	8001eac <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ec6:	e7fe      	b.n	8001ec6 <_exit+0xa>

08001ec8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ec8:	b570      	push	{r4, r5, r6, lr}
 8001eca:	460c      	mov	r4, r1
 8001ecc:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ece:	2500      	movs	r5, #0
 8001ed0:	e006      	b.n	8001ee0 <_read+0x18>
  {
    *ptr++ = __io_getchar();
 8001ed2:	f3af 8000 	nop.w
 8001ed6:	4621      	mov	r1, r4
 8001ed8:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001edc:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 8001ede:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ee0:	42b5      	cmp	r5, r6
 8001ee2:	dbf6      	blt.n	8001ed2 <_read+0xa>
  }

  return len;
}
 8001ee4:	4630      	mov	r0, r6
 8001ee6:	bd70      	pop	{r4, r5, r6, pc}

08001ee8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ee8:	b570      	push	{r4, r5, r6, lr}
 8001eea:	460c      	mov	r4, r1
 8001eec:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eee:	2500      	movs	r5, #0
 8001ef0:	e004      	b.n	8001efc <_write+0x14>
  {
    __io_putchar(*ptr++);
 8001ef2:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001ef6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001efa:	3501      	adds	r5, #1
 8001efc:	42b5      	cmp	r5, r6
 8001efe:	dbf8      	blt.n	8001ef2 <_write+0xa>
  }
  return len;
}
 8001f00:	4630      	mov	r0, r6
 8001f02:	bd70      	pop	{r4, r5, r6, pc}

08001f04 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8001f04:	f04f 30ff 	mov.w	r0, #4294967295
 8001f08:	4770      	bx	lr

08001f0a <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8001f0a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f0e:	604b      	str	r3, [r1, #4]
  return 0;
}
 8001f10:	2000      	movs	r0, #0
 8001f12:	4770      	bx	lr

08001f14 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8001f14:	2001      	movs	r0, #1
 8001f16:	4770      	bx	lr

08001f18 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8001f18:	2000      	movs	r0, #0
 8001f1a:	4770      	bx	lr

08001f1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f1c:	b510      	push	{r4, lr}
 8001f1e:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f20:	4a0c      	ldr	r2, [pc, #48]	; (8001f54 <_sbrk+0x38>)
 8001f22:	490d      	ldr	r1, [pc, #52]	; (8001f58 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f24:	480d      	ldr	r0, [pc, #52]	; (8001f5c <_sbrk+0x40>)
 8001f26:	6800      	ldr	r0, [r0, #0]
 8001f28:	b140      	cbz	r0, 8001f3c <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f2a:	480c      	ldr	r0, [pc, #48]	; (8001f5c <_sbrk+0x40>)
 8001f2c:	6800      	ldr	r0, [r0, #0]
 8001f2e:	4403      	add	r3, r0
 8001f30:	1a52      	subs	r2, r2, r1
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d806      	bhi.n	8001f44 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001f36:	4a09      	ldr	r2, [pc, #36]	; (8001f5c <_sbrk+0x40>)
 8001f38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8001f3a:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8001f3c:	4807      	ldr	r0, [pc, #28]	; (8001f5c <_sbrk+0x40>)
 8001f3e:	4c08      	ldr	r4, [pc, #32]	; (8001f60 <_sbrk+0x44>)
 8001f40:	6004      	str	r4, [r0, #0]
 8001f42:	e7f2      	b.n	8001f2a <_sbrk+0xe>
    errno = ENOMEM;
 8001f44:	f004 ffa0 	bl	8006e88 <__errno>
 8001f48:	230c      	movs	r3, #12
 8001f4a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f50:	e7f3      	b.n	8001f3a <_sbrk+0x1e>
 8001f52:	bf00      	nop
 8001f54:	20005000 	.word	0x20005000
 8001f58:	00001000 	.word	0x00001000
 8001f5c:	20001764 	.word	0x20001764
 8001f60:	20002690 	.word	0x20002690

08001f64 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f64:	4770      	bx	lr
	...

08001f68 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001f68:	b500      	push	{lr}
 8001f6a:	b087      	sub	sp, #28

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	9302      	str	r3, [sp, #8]
 8001f70:	9303      	str	r3, [sp, #12]
 8001f72:	9304      	str	r3, [sp, #16]
 8001f74:	9305      	str	r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f76:	9300      	str	r3, [sp, #0]
 8001f78:	9301      	str	r3, [sp, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001f7a:	4815      	ldr	r0, [pc, #84]	; (8001fd0 <MX_TIM3_Init+0x68>)
 8001f7c:	4a15      	ldr	r2, [pc, #84]	; (8001fd4 <MX_TIM3_Init+0x6c>)
 8001f7e:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 10659;
 8001f80:	f642 12a3 	movw	r2, #10659	; 0x29a3
 8001f84:	6042      	str	r2, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f86:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 65000;
 8001f88:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8001f8c:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f8e:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f90:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001f92:	f002 fa5f 	bl	8004454 <HAL_TIM_Base_Init>
 8001f96:	b990      	cbnz	r0, 8001fbe <MX_TIM3_Init+0x56>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f9c:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001f9e:	a902      	add	r1, sp, #8
 8001fa0:	480b      	ldr	r0, [pc, #44]	; (8001fd0 <MX_TIM3_Init+0x68>)
 8001fa2:	f002 fa8f 	bl	80044c4 <HAL_TIM_ConfigClockSource>
 8001fa6:	b968      	cbnz	r0, 8001fc4 <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fac:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001fae:	4669      	mov	r1, sp
 8001fb0:	4807      	ldr	r0, [pc, #28]	; (8001fd0 <MX_TIM3_Init+0x68>)
 8001fb2:	f002 faf5 	bl	80045a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001fb6:	b940      	cbnz	r0, 8001fca <MX_TIM3_Init+0x62>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001fb8:	b007      	add	sp, #28
 8001fba:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001fbe:	f7ff fb95 	bl	80016ec <Error_Handler>
 8001fc2:	e7e9      	b.n	8001f98 <MX_TIM3_Init+0x30>
    Error_Handler();
 8001fc4:	f7ff fb92 	bl	80016ec <Error_Handler>
 8001fc8:	e7ee      	b.n	8001fa8 <MX_TIM3_Init+0x40>
    Error_Handler();
 8001fca:	f7ff fb8f 	bl	80016ec <Error_Handler>
}
 8001fce:	e7f3      	b.n	8001fb8 <MX_TIM3_Init+0x50>
 8001fd0:	20001768 	.word	0x20001768
 8001fd4:	40000400 	.word	0x40000400

08001fd8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001fd8:	b500      	push	{lr}
 8001fda:	b087      	sub	sp, #28

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fdc:	2300      	movs	r3, #0
 8001fde:	9302      	str	r3, [sp, #8]
 8001fe0:	9303      	str	r3, [sp, #12]
 8001fe2:	9304      	str	r3, [sp, #16]
 8001fe4:	9305      	str	r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fe6:	9300      	str	r3, [sp, #0]
 8001fe8:	9301      	str	r3, [sp, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001fea:	4815      	ldr	r0, [pc, #84]	; (8002040 <MX_TIM4_Init+0x68>)
 8001fec:	4a15      	ldr	r2, [pc, #84]	; (8002044 <MX_TIM4_Init+0x6c>)
 8001fee:	6002      	str	r2, [r0, #0]
  htim4.Init.Prescaler = 32-1;
 8001ff0:	221f      	movs	r2, #31
 8001ff2:	6042      	str	r2, [r0, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ff4:	6083      	str	r3, [r0, #8]
  htim4.Init.Period = 0xffff;
 8001ff6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ffa:	60c2      	str	r2, [r0, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ffc:	6103      	str	r3, [r0, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ffe:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002000:	f002 fa28 	bl	8004454 <HAL_TIM_Base_Init>
 8002004:	b990      	cbnz	r0, 800202c <MX_TIM4_Init+0x54>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002006:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800200a:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800200c:	a902      	add	r1, sp, #8
 800200e:	480c      	ldr	r0, [pc, #48]	; (8002040 <MX_TIM4_Init+0x68>)
 8002010:	f002 fa58 	bl	80044c4 <HAL_TIM_ConfigClockSource>
 8002014:	b968      	cbnz	r0, 8002032 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002016:	2300      	movs	r3, #0
 8002018:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800201a:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800201c:	4669      	mov	r1, sp
 800201e:	4808      	ldr	r0, [pc, #32]	; (8002040 <MX_TIM4_Init+0x68>)
 8002020:	f002 fabe 	bl	80045a0 <HAL_TIMEx_MasterConfigSynchronization>
 8002024:	b940      	cbnz	r0, 8002038 <MX_TIM4_Init+0x60>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002026:	b007      	add	sp, #28
 8002028:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800202c:	f7ff fb5e 	bl	80016ec <Error_Handler>
 8002030:	e7e9      	b.n	8002006 <MX_TIM4_Init+0x2e>
    Error_Handler();
 8002032:	f7ff fb5b 	bl	80016ec <Error_Handler>
 8002036:	e7ee      	b.n	8002016 <MX_TIM4_Init+0x3e>
    Error_Handler();
 8002038:	f7ff fb58 	bl	80016ec <Error_Handler>
}
 800203c:	e7f3      	b.n	8002026 <MX_TIM4_Init+0x4e>
 800203e:	bf00      	nop
 8002040:	200017b0 	.word	0x200017b0
 8002044:	40000800 	.word	0x40000800

08002048 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002048:	b500      	push	{lr}
 800204a:	b083      	sub	sp, #12

  if(tim_baseHandle->Instance==TIM3)
 800204c:	6803      	ldr	r3, [r0, #0]
 800204e:	4a13      	ldr	r2, [pc, #76]	; (800209c <HAL_TIM_Base_MspInit+0x54>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d005      	beq.n	8002060 <HAL_TIM_Base_MspInit+0x18>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM4)
 8002054:	4a12      	ldr	r2, [pc, #72]	; (80020a0 <HAL_TIM_Base_MspInit+0x58>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d015      	beq.n	8002086 <HAL_TIM_Base_MspInit+0x3e>
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800205a:	b003      	add	sp, #12
 800205c:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002060:	4b10      	ldr	r3, [pc, #64]	; (80020a4 <HAL_TIM_Base_MspInit+0x5c>)
 8002062:	69da      	ldr	r2, [r3, #28]
 8002064:	f042 0202 	orr.w	r2, r2, #2
 8002068:	61da      	str	r2, [r3, #28]
 800206a:	69db      	ldr	r3, [r3, #28]
 800206c:	f003 0302 	and.w	r3, r3, #2
 8002070:	9300      	str	r3, [sp, #0]
 8002072:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002074:	2200      	movs	r2, #0
 8002076:	4611      	mov	r1, r2
 8002078:	201d      	movs	r0, #29
 800207a:	f000 f983 	bl	8002384 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800207e:	201d      	movs	r0, #29
 8002080:	f000 f9b8 	bl	80023f4 <HAL_NVIC_EnableIRQ>
 8002084:	e7e9      	b.n	800205a <HAL_TIM_Base_MspInit+0x12>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002086:	4b07      	ldr	r3, [pc, #28]	; (80020a4 <HAL_TIM_Base_MspInit+0x5c>)
 8002088:	69da      	ldr	r2, [r3, #28]
 800208a:	f042 0204 	orr.w	r2, r2, #4
 800208e:	61da      	str	r2, [r3, #28]
 8002090:	69db      	ldr	r3, [r3, #28]
 8002092:	f003 0304 	and.w	r3, r3, #4
 8002096:	9301      	str	r3, [sp, #4]
 8002098:	9b01      	ldr	r3, [sp, #4]
}
 800209a:	e7de      	b.n	800205a <HAL_TIM_Base_MspInit+0x12>
 800209c:	40000400 	.word	0x40000400
 80020a0:	40000800 	.word	0x40000800
 80020a4:	40021000 	.word	0x40021000

080020a8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80020a8:	b508      	push	{r3, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80020aa:	480a      	ldr	r0, [pc, #40]	; (80020d4 <MX_USART1_UART_Init+0x2c>)
 80020ac:	4b0a      	ldr	r3, [pc, #40]	; (80020d8 <MX_USART1_UART_Init+0x30>)
 80020ae:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 9600;
 80020b0:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80020b4:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80020b6:	2300      	movs	r3, #0
 80020b8:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80020ba:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80020bc:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80020be:	220c      	movs	r2, #12
 80020c0:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020c2:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80020c4:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80020c6:	f002 fb6d 	bl	80047a4 <HAL_UART_Init>
 80020ca:	b900      	cbnz	r0, 80020ce <MX_USART1_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80020cc:	bd08      	pop	{r3, pc}
    Error_Handler();
 80020ce:	f7ff fb0d 	bl	80016ec <Error_Handler>
}
 80020d2:	e7fb      	b.n	80020cc <MX_USART1_UART_Init+0x24>
 80020d4:	200017f8 	.word	0x200017f8
 80020d8:	40013800 	.word	0x40013800

080020dc <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80020dc:	b508      	push	{r3, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80020de:	480a      	ldr	r0, [pc, #40]	; (8002108 <MX_USART2_UART_Init+0x2c>)
 80020e0:	4b0a      	ldr	r3, [pc, #40]	; (800210c <MX_USART2_UART_Init+0x30>)
 80020e2:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 9600;
 80020e4:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80020e8:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80020ea:	2300      	movs	r3, #0
 80020ec:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80020ee:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80020f0:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80020f2:	220c      	movs	r2, #12
 80020f4:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020f6:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80020f8:	61c3      	str	r3, [r0, #28]
  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 80020fa:	f002 fb82 	bl	8004802 <HAL_HalfDuplex_Init>
 80020fe:	b900      	cbnz	r0, 8002102 <MX_USART2_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002100:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002102:	f7ff faf3 	bl	80016ec <Error_Handler>
}
 8002106:	e7fb      	b.n	8002100 <MX_USART2_UART_Init+0x24>
 8002108:	2000183c 	.word	0x2000183c
 800210c:	40004400 	.word	0x40004400

08002110 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002110:	b510      	push	{r4, lr}
 8002112:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002114:	2300      	movs	r3, #0
 8002116:	9304      	str	r3, [sp, #16]
 8002118:	9305      	str	r3, [sp, #20]
 800211a:	9306      	str	r3, [sp, #24]
 800211c:	9307      	str	r3, [sp, #28]
  if(uartHandle->Instance==USART1)
 800211e:	6803      	ldr	r3, [r0, #0]
 8002120:	4a27      	ldr	r2, [pc, #156]	; (80021c0 <HAL_UART_MspInit+0xb0>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d004      	beq.n	8002130 <HAL_UART_MspInit+0x20>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(uartHandle->Instance==USART2)
 8002126:	4a27      	ldr	r2, [pc, #156]	; (80021c4 <HAL_UART_MspInit+0xb4>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d02b      	beq.n	8002184 <HAL_UART_MspInit+0x74>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800212c:	b008      	add	sp, #32
 800212e:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8002130:	4b25      	ldr	r3, [pc, #148]	; (80021c8 <HAL_UART_MspInit+0xb8>)
 8002132:	699a      	ldr	r2, [r3, #24]
 8002134:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002138:	619a      	str	r2, [r3, #24]
 800213a:	699a      	ldr	r2, [r3, #24]
 800213c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002140:	9200      	str	r2, [sp, #0]
 8002142:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002144:	699a      	ldr	r2, [r3, #24]
 8002146:	f042 0204 	orr.w	r2, r2, #4
 800214a:	619a      	str	r2, [r3, #24]
 800214c:	699b      	ldr	r3, [r3, #24]
 800214e:	f003 0304 	and.w	r3, r3, #4
 8002152:	9301      	str	r3, [sp, #4]
 8002154:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002156:	f44f 7300 	mov.w	r3, #512	; 0x200
 800215a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800215c:	2302      	movs	r3, #2
 800215e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002160:	2303      	movs	r3, #3
 8002162:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002164:	4c19      	ldr	r4, [pc, #100]	; (80021cc <HAL_UART_MspInit+0xbc>)
 8002166:	a904      	add	r1, sp, #16
 8002168:	4620      	mov	r0, r4
 800216a:	f000 fb4f 	bl	800280c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800216e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002172:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002174:	2300      	movs	r3, #0
 8002176:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002178:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800217a:	a904      	add	r1, sp, #16
 800217c:	4620      	mov	r0, r4
 800217e:	f000 fb45 	bl	800280c <HAL_GPIO_Init>
 8002182:	e7d3      	b.n	800212c <HAL_UART_MspInit+0x1c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002184:	4b10      	ldr	r3, [pc, #64]	; (80021c8 <HAL_UART_MspInit+0xb8>)
 8002186:	69da      	ldr	r2, [r3, #28]
 8002188:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800218c:	61da      	str	r2, [r3, #28]
 800218e:	69da      	ldr	r2, [r3, #28]
 8002190:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8002194:	9202      	str	r2, [sp, #8]
 8002196:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002198:	699a      	ldr	r2, [r3, #24]
 800219a:	f042 0204 	orr.w	r2, r2, #4
 800219e:	619a      	str	r2, [r3, #24]
 80021a0:	699b      	ldr	r3, [r3, #24]
 80021a2:	f003 0304 	and.w	r3, r3, #4
 80021a6:	9303      	str	r3, [sp, #12]
 80021a8:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80021aa:	2304      	movs	r3, #4
 80021ac:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021ae:	2312      	movs	r3, #18
 80021b0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021b2:	2303      	movs	r3, #3
 80021b4:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021b6:	a904      	add	r1, sp, #16
 80021b8:	4804      	ldr	r0, [pc, #16]	; (80021cc <HAL_UART_MspInit+0xbc>)
 80021ba:	f000 fb27 	bl	800280c <HAL_GPIO_Init>
}
 80021be:	e7b5      	b.n	800212c <HAL_UART_MspInit+0x1c>
 80021c0:	40013800 	.word	0x40013800
 80021c4:	40004400 	.word	0x40004400
 80021c8:	40021000 	.word	0x40021000
 80021cc:	40010800 	.word	0x40010800

080021d0 <UartSend>:
{
	HAL_UART_Transmit(&huart1, (uint8_t*) Message, strlen(Message), 20);
}

void UartSend(char * Message)
{
 80021d0:	b510      	push	{r4, lr}
 80021d2:	4604      	mov	r4, r0
	GSM.ReceivedState = 0;
 80021d4:	4b07      	ldr	r3, [pc, #28]	; (80021f4 <UartSend+0x24>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	721a      	strb	r2, [r3, #8]
	HAL_UART_Transmit_IT(&huart1, (uint8_t*) Message, strlen(Message));
 80021da:	f7fd ffc3 	bl	8000164 <strlen>
 80021de:	b282      	uxth	r2, r0
 80021e0:	4621      	mov	r1, r4
 80021e2:	4805      	ldr	r0, [pc, #20]	; (80021f8 <UartSend+0x28>)
 80021e4:	f002 fc20 	bl	8004a28 <HAL_UART_Transmit_IT>
	*Uart1isBusyPtr = 1;
 80021e8:	4b04      	ldr	r3, [pc, #16]	; (80021fc <UartSend+0x2c>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2201      	movs	r2, #1
 80021ee:	701a      	strb	r2, [r3, #0]
}
 80021f0:	bd10      	pop	{r4, pc}
 80021f2:	bf00      	nop
 80021f4:	20000f08 	.word	0x20000f08
 80021f8:	200017f8 	.word	0x200017f8
 80021fc:	20000004 	.word	0x20000004

08002200 <UartSendWoRxCtrl>:

void UartSendWoRxCtrl(char * Message)
{
 8002200:	b510      	push	{r4, lr}
 8002202:	4604      	mov	r4, r0
	HAL_UART_Transmit_IT(&huart1, (uint8_t*) Message, strlen(Message));
 8002204:	f7fd ffae 	bl	8000164 <strlen>
 8002208:	b282      	uxth	r2, r0
 800220a:	4621      	mov	r1, r4
 800220c:	4803      	ldr	r0, [pc, #12]	; (800221c <UartSendWoRxCtrl+0x1c>)
 800220e:	f002 fc0b 	bl	8004a28 <HAL_UART_Transmit_IT>
	*Uart1isBusyPtr = 1;
 8002212:	4b03      	ldr	r3, [pc, #12]	; (8002220 <UartSendWoRxCtrl+0x20>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	2201      	movs	r2, #1
 8002218:	701a      	strb	r2, [r3, #0]
}
 800221a:	bd10      	pop	{r4, pc}
 800221c:	200017f8 	.word	0x200017f8
 8002220:	20000004 	.word	0x20000004

08002224 <Temperature100ToString>:

void Temperature100ToString(int32_t temp, char *StringBuf)
{
 8002224:	b508      	push	{r3, lr}
 8002226:	4684      	mov	ip, r0
 8002228:	4608      	mov	r0, r1
	int16_t Decimal;
	uint16_t Fractial;

	Decimal = temp/100;
 800222a:	4a13      	ldr	r2, [pc, #76]	; (8002278 <Temperature100ToString+0x54>)
 800222c:	fb82 320c 	smull	r3, r2, r2, ip
 8002230:	ea4f 73ec 	mov.w	r3, ip, asr #31
 8002234:	ebc3 1362 	rsb	r3, r3, r2, asr #5
 8002238:	b21a      	sxth	r2, r3

	if(temp>=0)
 800223a:	f1bc 0f00 	cmp.w	ip, #0
 800223e:	db0f      	blt.n	8002260 <Temperature100ToString+0x3c>
	{
		Fractial = temp - Decimal * 100;
 8002240:	ebc3 2143 	rsb	r1, r3, r3, lsl #9
 8002244:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8002248:	ebc3 03c1 	rsb	r3, r3, r1, lsl #3
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	b29b      	uxth	r3, r3
 8002250:	fa1f fc8c 	uxth.w	ip, ip
 8002254:	4463      	add	r3, ip
 8002256:	b29b      	uxth	r3, r3
	else
	{
		Fractial = (temp * -1) - ((Decimal * -1) * 100);
	}

	sprintf(StringBuf, "%.2i.%.2u", Decimal, Fractial);
 8002258:	4908      	ldr	r1, [pc, #32]	; (800227c <Temperature100ToString+0x58>)
 800225a:	f005 fab5 	bl	80077c8 <siprintf>
}
 800225e:	bd08      	pop	{r3, pc}
		Fractial = (temp * -1) - ((Decimal * -1) * 100);
 8002260:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002264:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	b29b      	uxth	r3, r3
 800226c:	fa1f fc8c 	uxth.w	ip, ip
 8002270:	eba3 030c 	sub.w	r3, r3, ip
 8002274:	b29b      	uxth	r3, r3
 8002276:	e7ef      	b.n	8002258 <Temperature100ToString+0x34>
 8002278:	51eb851f 	.word	0x51eb851f
 800227c:	0800b770 	.word	0x0800b770

08002280 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002280:	480c      	ldr	r0, [pc, #48]	; (80022b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002282:	490d      	ldr	r1, [pc, #52]	; (80022b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002284:	4a0d      	ldr	r2, [pc, #52]	; (80022bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002286:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002288:	e002      	b.n	8002290 <LoopCopyDataInit>

0800228a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800228a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800228c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800228e:	3304      	adds	r3, #4

08002290 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002290:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002292:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002294:	d3f9      	bcc.n	800228a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002296:	4a0a      	ldr	r2, [pc, #40]	; (80022c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002298:	4c0a      	ldr	r4, [pc, #40]	; (80022c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800229a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800229c:	e001      	b.n	80022a2 <LoopFillZerobss>

0800229e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800229e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022a0:	3204      	adds	r2, #4

080022a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022a4:	d3fb      	bcc.n	800229e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80022a6:	f7ff fe5d 	bl	8001f64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022aa:	f004 fdf3 	bl	8006e94 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80022ae:	f7ff fa63 	bl	8001778 <main>
  bx lr
 80022b2:	4770      	bx	lr
  ldr r0, =_sdata
 80022b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022b8:	20000364 	.word	0x20000364
  ldr r2, =_sidata
 80022bc:	0800bcc8 	.word	0x0800bcc8
  ldr r2, =_sbss
 80022c0:	20000368 	.word	0x20000368
  ldr r4, =_ebss
 80022c4:	2000268c 	.word	0x2000268c

080022c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80022c8:	e7fe      	b.n	80022c8 <ADC1_2_IRQHandler>
	...

080022cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022cc:	b510      	push	{r4, lr}
 80022ce:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022d0:	4b0e      	ldr	r3, [pc, #56]	; (800230c <HAL_InitTick+0x40>)
 80022d2:	7818      	ldrb	r0, [r3, #0]
 80022d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022d8:	fbb3 f3f0 	udiv	r3, r3, r0
 80022dc:	4a0c      	ldr	r2, [pc, #48]	; (8002310 <HAL_InitTick+0x44>)
 80022de:	6810      	ldr	r0, [r2, #0]
 80022e0:	fbb0 f0f3 	udiv	r0, r0, r3
 80022e4:	f000 f8a6 	bl	8002434 <HAL_SYSTICK_Config>
 80022e8:	b968      	cbnz	r0, 8002306 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022ea:	2c0f      	cmp	r4, #15
 80022ec:	d901      	bls.n	80022f2 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 80022ee:	2001      	movs	r0, #1
 80022f0:	e00a      	b.n	8002308 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022f2:	2200      	movs	r2, #0
 80022f4:	4621      	mov	r1, r4
 80022f6:	f04f 30ff 	mov.w	r0, #4294967295
 80022fa:	f000 f843 	bl	8002384 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022fe:	4b05      	ldr	r3, [pc, #20]	; (8002314 <HAL_InitTick+0x48>)
 8002300:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002302:	2000      	movs	r0, #0
 8002304:	e000      	b.n	8002308 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8002306:	2001      	movs	r0, #1
}
 8002308:	bd10      	pop	{r4, pc}
 800230a:	bf00      	nop
 800230c:	20000010 	.word	0x20000010
 8002310:	2000000c 	.word	0x2000000c
 8002314:	20000014 	.word	0x20000014

08002318 <HAL_Init>:
{
 8002318:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800231a:	4a07      	ldr	r2, [pc, #28]	; (8002338 <HAL_Init+0x20>)
 800231c:	6813      	ldr	r3, [r2, #0]
 800231e:	f043 0310 	orr.w	r3, r3, #16
 8002322:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002324:	2003      	movs	r0, #3
 8002326:	f000 f81b 	bl	8002360 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800232a:	200f      	movs	r0, #15
 800232c:	f7ff ffce 	bl	80022cc <HAL_InitTick>
  HAL_MspInit();
 8002330:	f7ff fd7e 	bl	8001e30 <HAL_MspInit>
}
 8002334:	2000      	movs	r0, #0
 8002336:	bd08      	pop	{r3, pc}
 8002338:	40022000 	.word	0x40022000

0800233c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800233c:	4a03      	ldr	r2, [pc, #12]	; (800234c <HAL_IncTick+0x10>)
 800233e:	6811      	ldr	r1, [r2, #0]
 8002340:	4b03      	ldr	r3, [pc, #12]	; (8002350 <HAL_IncTick+0x14>)
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	440b      	add	r3, r1
 8002346:	6013      	str	r3, [r2, #0]
}
 8002348:	4770      	bx	lr
 800234a:	bf00      	nop
 800234c:	20001880 	.word	0x20001880
 8002350:	20000010 	.word	0x20000010

08002354 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002354:	4b01      	ldr	r3, [pc, #4]	; (800235c <HAL_GetTick+0x8>)
 8002356:	6818      	ldr	r0, [r3, #0]
}
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	20001880 	.word	0x20001880

08002360 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002360:	4a07      	ldr	r2, [pc, #28]	; (8002380 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002362:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002364:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002368:	041b      	lsls	r3, r3, #16
 800236a:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800236c:	0200      	lsls	r0, r0, #8
 800236e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002372:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8002374:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002378:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800237c:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800237e:	4770      	bx	lr
 8002380:	e000ed00 	.word	0xe000ed00

08002384 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002384:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002386:	4b19      	ldr	r3, [pc, #100]	; (80023ec <HAL_NVIC_SetPriority+0x68>)
 8002388:	68db      	ldr	r3, [r3, #12]
 800238a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800238e:	f1c3 0c07 	rsb	ip, r3, #7
 8002392:	f1bc 0f04 	cmp.w	ip, #4
 8002396:	bf28      	it	cs
 8002398:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800239c:	f103 0e04 	add.w	lr, r3, #4
 80023a0:	f1be 0f06 	cmp.w	lr, #6
 80023a4:	d918      	bls.n	80023d8 <HAL_NVIC_SetPriority+0x54>
 80023a6:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023a8:	f04f 3eff 	mov.w	lr, #4294967295
 80023ac:	fa0e fc0c 	lsl.w	ip, lr, ip
 80023b0:	ea21 010c 	bic.w	r1, r1, ip
 80023b4:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023b6:	fa0e f303 	lsl.w	r3, lr, r3
 80023ba:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023be:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80023c0:	2800      	cmp	r0, #0
 80023c2:	db0b      	blt.n	80023dc <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023c4:	0109      	lsls	r1, r1, #4
 80023c6:	b2c9      	uxtb	r1, r1
 80023c8:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80023cc:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80023d0:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80023d4:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023d8:	2300      	movs	r3, #0
 80023da:	e7e5      	b.n	80023a8 <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023dc:	f000 000f 	and.w	r0, r0, #15
 80023e0:	0109      	lsls	r1, r1, #4
 80023e2:	b2c9      	uxtb	r1, r1
 80023e4:	4b02      	ldr	r3, [pc, #8]	; (80023f0 <HAL_NVIC_SetPriority+0x6c>)
 80023e6:	5419      	strb	r1, [r3, r0]
 80023e8:	e7f4      	b.n	80023d4 <HAL_NVIC_SetPriority+0x50>
 80023ea:	bf00      	nop
 80023ec:	e000ed00 	.word	0xe000ed00
 80023f0:	e000ed14 	.word	0xe000ed14

080023f4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80023f4:	2800      	cmp	r0, #0
 80023f6:	db07      	blt.n	8002408 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023f8:	f000 021f 	and.w	r2, r0, #31
 80023fc:	0940      	lsrs	r0, r0, #5
 80023fe:	2301      	movs	r3, #1
 8002400:	4093      	lsls	r3, r2
 8002402:	4a02      	ldr	r2, [pc, #8]	; (800240c <HAL_NVIC_EnableIRQ+0x18>)
 8002404:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	e000e100 	.word	0xe000e100

08002410 <HAL_NVIC_SystemReset>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002410:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002414:	4905      	ldr	r1, [pc, #20]	; (800242c <HAL_NVIC_SystemReset+0x1c>)
 8002416:	68ca      	ldr	r2, [r1, #12]
 8002418:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800241c:	4b04      	ldr	r3, [pc, #16]	; (8002430 <HAL_NVIC_SystemReset+0x20>)
 800241e:	4313      	orrs	r3, r2
 8002420:	60cb      	str	r3, [r1, #12]
 8002422:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002426:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8002428:	e7fd      	b.n	8002426 <HAL_NVIC_SystemReset+0x16>
 800242a:	bf00      	nop
 800242c:	e000ed00 	.word	0xe000ed00
 8002430:	05fa0004 	.word	0x05fa0004

08002434 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002434:	3801      	subs	r0, #1
 8002436:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800243a:	d20b      	bcs.n	8002454 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800243c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002440:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002442:	4a05      	ldr	r2, [pc, #20]	; (8002458 <HAL_SYSTICK_Config+0x24>)
 8002444:	21f0      	movs	r1, #240	; 0xf0
 8002446:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800244a:	2000      	movs	r0, #0
 800244c:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800244e:	2207      	movs	r2, #7
 8002450:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002452:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002454:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002456:	4770      	bx	lr
 8002458:	e000ed00 	.word	0xe000ed00

0800245c <HAL_DMA_Abort>:
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800245c:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8002460:	2b02      	cmp	r3, #2
 8002462:	d006      	beq.n	8002472 <HAL_DMA_Abort+0x16>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002464:	2304      	movs	r3, #4
 8002466:	6383      	str	r3, [r0, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002468:	2300      	movs	r3, #0
 800246a:	f880 3020 	strb.w	r3, [r0, #32]
    
    return HAL_ERROR;
 800246e:	2001      	movs	r0, #1
 8002470:	4770      	bx	lr
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002472:	6802      	ldr	r2, [r0, #0]
 8002474:	6813      	ldr	r3, [r2, #0]
 8002476:	f023 030e 	bic.w	r3, r3, #14
 800247a:	6013      	str	r3, [r2, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800247c:	6802      	ldr	r2, [r0, #0]
 800247e:	6813      	ldr	r3, [r2, #0]
 8002480:	f023 0301 	bic.w	r3, r3, #1
 8002484:	6013      	str	r3, [r2, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002486:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002488:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800248a:	2201      	movs	r2, #1
 800248c:	fa02 f303 	lsl.w	r3, r2, r3
 8002490:	604b      	str	r3, [r1, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002492:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002496:	2300      	movs	r3, #0
 8002498:	f880 3020 	strb.w	r3, [r0, #32]
  
  return status; 
 800249c:	4618      	mov	r0, r3
}
 800249e:	4770      	bx	lr

080024a0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80024a0:	b508      	push	{r3, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80024a2:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d003      	beq.n	80024b2 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024aa:	2304      	movs	r3, #4
 80024ac:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 80024ae:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 80024b0:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024b2:	6802      	ldr	r2, [r0, #0]
 80024b4:	6813      	ldr	r3, [r2, #0]
 80024b6:	f023 030e 	bic.w	r3, r3, #14
 80024ba:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80024bc:	6802      	ldr	r2, [r0, #0]
 80024be:	6813      	ldr	r3, [r2, #0]
 80024c0:	f023 0301 	bic.w	r3, r3, #1
 80024c4:	6013      	str	r3, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80024c6:	6803      	ldr	r3, [r0, #0]
 80024c8:	4a19      	ldr	r2, [pc, #100]	; (8002530 <HAL_DMA_Abort_IT+0x90>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d014      	beq.n	80024f8 <HAL_DMA_Abort_IT+0x58>
 80024ce:	3214      	adds	r2, #20
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d01f      	beq.n	8002514 <HAL_DMA_Abort_IT+0x74>
 80024d4:	3214      	adds	r2, #20
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d01e      	beq.n	8002518 <HAL_DMA_Abort_IT+0x78>
 80024da:	3214      	adds	r2, #20
 80024dc:	4293      	cmp	r3, r2
 80024de:	d01e      	beq.n	800251e <HAL_DMA_Abort_IT+0x7e>
 80024e0:	3214      	adds	r2, #20
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d01e      	beq.n	8002524 <HAL_DMA_Abort_IT+0x84>
 80024e6:	3214      	adds	r2, #20
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d002      	beq.n	80024f2 <HAL_DMA_Abort_IT+0x52>
 80024ec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80024f0:	e003      	b.n	80024fa <HAL_DMA_Abort_IT+0x5a>
 80024f2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80024f6:	e000      	b.n	80024fa <HAL_DMA_Abort_IT+0x5a>
 80024f8:	2201      	movs	r2, #1
 80024fa:	4b0e      	ldr	r3, [pc, #56]	; (8002534 <HAL_DMA_Abort_IT+0x94>)
 80024fc:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80024fe:	2301      	movs	r3, #1
 8002500:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8002504:	2300      	movs	r3, #0
 8002506:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 800250a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800250c:	b16b      	cbz	r3, 800252a <HAL_DMA_Abort_IT+0x8a>
      hdma->XferAbortCallback(hdma);
 800250e:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8002510:	2000      	movs	r0, #0
 8002512:	e7cd      	b.n	80024b0 <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002514:	2210      	movs	r2, #16
 8002516:	e7f0      	b.n	80024fa <HAL_DMA_Abort_IT+0x5a>
 8002518:	f44f 7280 	mov.w	r2, #256	; 0x100
 800251c:	e7ed      	b.n	80024fa <HAL_DMA_Abort_IT+0x5a>
 800251e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002522:	e7ea      	b.n	80024fa <HAL_DMA_Abort_IT+0x5a>
 8002524:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002528:	e7e7      	b.n	80024fa <HAL_DMA_Abort_IT+0x5a>
  HAL_StatusTypeDef status = HAL_OK;
 800252a:	2000      	movs	r0, #0
 800252c:	e7c0      	b.n	80024b0 <HAL_DMA_Abort_IT+0x10>
 800252e:	bf00      	nop
 8002530:	40020008 	.word	0x40020008
 8002534:	40020000 	.word	0x40020000

08002538 <FLASH_Program_HalfWord>:
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002538:	4b04      	ldr	r3, [pc, #16]	; (800254c <FLASH_Program_HalfWord+0x14>)
 800253a:	2200      	movs	r2, #0
 800253c:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800253e:	4a04      	ldr	r2, [pc, #16]	; (8002550 <FLASH_Program_HalfWord+0x18>)
 8002540:	6913      	ldr	r3, [r2, #16]
 8002542:	f043 0301 	orr.w	r3, r3, #1
 8002546:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8002548:	8001      	strh	r1, [r0, #0]
}
 800254a:	4770      	bx	lr
 800254c:	20001888 	.word	0x20001888
 8002550:	40022000 	.word	0x40022000

08002554 <FLASH_SetErrorCode>:
  uint32_t flags = 0U;
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8002554:	4b19      	ldr	r3, [pc, #100]	; (80025bc <FLASH_SetErrorCode+0x68>)
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	f013 0310 	ands.w	r3, r3, #16
 800255c:	d005      	beq.n	800256a <FLASH_SetErrorCode+0x16>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800255e:	4a18      	ldr	r2, [pc, #96]	; (80025c0 <FLASH_SetErrorCode+0x6c>)
 8002560:	69d3      	ldr	r3, [r2, #28]
 8002562:	f043 0302 	orr.w	r3, r3, #2
 8002566:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8002568:	2310      	movs	r3, #16
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800256a:	4a14      	ldr	r2, [pc, #80]	; (80025bc <FLASH_SetErrorCode+0x68>)
 800256c:	68d2      	ldr	r2, [r2, #12]
 800256e:	f012 0f04 	tst.w	r2, #4
 8002572:	d006      	beq.n	8002582 <FLASH_SetErrorCode+0x2e>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8002574:	4912      	ldr	r1, [pc, #72]	; (80025c0 <FLASH_SetErrorCode+0x6c>)
 8002576:	69ca      	ldr	r2, [r1, #28]
 8002578:	f042 0201 	orr.w	r2, r2, #1
 800257c:	61ca      	str	r2, [r1, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 800257e:	f043 0304 	orr.w	r3, r3, #4
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8002582:	4a0e      	ldr	r2, [pc, #56]	; (80025bc <FLASH_SetErrorCode+0x68>)
 8002584:	69d2      	ldr	r2, [r2, #28]
 8002586:	f012 0f01 	tst.w	r2, #1
 800258a:	d009      	beq.n	80025a0 <FLASH_SetErrorCode+0x4c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800258c:	490c      	ldr	r1, [pc, #48]	; (80025c0 <FLASH_SetErrorCode+0x6c>)
 800258e:	69ca      	ldr	r2, [r1, #28]
 8002590:	f042 0204 	orr.w	r2, r2, #4
 8002594:	61ca      	str	r2, [r1, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8002596:	4909      	ldr	r1, [pc, #36]	; (80025bc <FLASH_SetErrorCode+0x68>)
 8002598:	69ca      	ldr	r2, [r1, #28]
 800259a:	f022 0201 	bic.w	r2, r2, #1
 800259e:	61ca      	str	r2, [r1, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80025a0:	f240 1201 	movw	r2, #257	; 0x101
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d002      	beq.n	80025ae <FLASH_SetErrorCode+0x5a>
 80025a8:	4a04      	ldr	r2, [pc, #16]	; (80025bc <FLASH_SetErrorCode+0x68>)
 80025aa:	60d3      	str	r3, [r2, #12]
}  
 80025ac:	4770      	bx	lr
  __HAL_FLASH_CLEAR_FLAG(flags);
 80025ae:	4a03      	ldr	r2, [pc, #12]	; (80025bc <FLASH_SetErrorCode+0x68>)
 80025b0:	69d3      	ldr	r3, [r2, #28]
 80025b2:	f023 0301 	bic.w	r3, r3, #1
 80025b6:	61d3      	str	r3, [r2, #28]
 80025b8:	4770      	bx	lr
 80025ba:	bf00      	nop
 80025bc:	40022000 	.word	0x40022000
 80025c0:	20001888 	.word	0x20001888

080025c4 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80025c4:	4b0a      	ldr	r3, [pc, #40]	; (80025f0 <HAL_FLASH_Unlock+0x2c>)
 80025c6:	691b      	ldr	r3, [r3, #16]
 80025c8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80025cc:	d00b      	beq.n	80025e6 <HAL_FLASH_Unlock+0x22>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80025ce:	4b08      	ldr	r3, [pc, #32]	; (80025f0 <HAL_FLASH_Unlock+0x2c>)
 80025d0:	4a08      	ldr	r2, [pc, #32]	; (80025f4 <HAL_FLASH_Unlock+0x30>)
 80025d2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80025d4:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 80025d8:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80025da:	691b      	ldr	r3, [r3, #16]
 80025dc:	f013 0f80 	tst.w	r3, #128	; 0x80
 80025e0:	d103      	bne.n	80025ea <HAL_FLASH_Unlock+0x26>
  HAL_StatusTypeDef status = HAL_OK;
 80025e2:	2000      	movs	r0, #0
 80025e4:	4770      	bx	lr
 80025e6:	2000      	movs	r0, #0
 80025e8:	4770      	bx	lr
      status = HAL_ERROR;
 80025ea:	2001      	movs	r0, #1
}
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	40022000 	.word	0x40022000
 80025f4:	45670123 	.word	0x45670123

080025f8 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80025f8:	4a03      	ldr	r2, [pc, #12]	; (8002608 <HAL_FLASH_Lock+0x10>)
 80025fa:	6913      	ldr	r3, [r2, #16]
 80025fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002600:	6113      	str	r3, [r2, #16]
}
 8002602:	2000      	movs	r0, #0
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	40022000 	.word	0x40022000

0800260c <HAL_FLASH_GetError>:
   return pFlash.ErrorCode;
 800260c:	4b01      	ldr	r3, [pc, #4]	; (8002614 <HAL_FLASH_GetError+0x8>)
 800260e:	69d8      	ldr	r0, [r3, #28]
}
 8002610:	4770      	bx	lr
 8002612:	bf00      	nop
 8002614:	20001888 	.word	0x20001888

08002618 <FLASH_WaitForLastOperation>:
{
 8002618:	b538      	push	{r3, r4, r5, lr}
 800261a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800261c:	f7ff fe9a 	bl	8002354 <HAL_GetTick>
 8002620:	4605      	mov	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002622:	4b16      	ldr	r3, [pc, #88]	; (800267c <FLASH_WaitForLastOperation+0x64>)
 8002624:	68db      	ldr	r3, [r3, #12]
 8002626:	f013 0f01 	tst.w	r3, #1
 800262a:	d00a      	beq.n	8002642 <FLASH_WaitForLastOperation+0x2a>
    if (Timeout != HAL_MAX_DELAY)
 800262c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8002630:	d0f7      	beq.n	8002622 <FLASH_WaitForLastOperation+0xa>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8002632:	b124      	cbz	r4, 800263e <FLASH_WaitForLastOperation+0x26>
 8002634:	f7ff fe8e 	bl	8002354 <HAL_GetTick>
 8002638:	1b40      	subs	r0, r0, r5
 800263a:	42a0      	cmp	r0, r4
 800263c:	d9f1      	bls.n	8002622 <FLASH_WaitForLastOperation+0xa>
        return HAL_TIMEOUT;
 800263e:	2003      	movs	r0, #3
 8002640:	e01b      	b.n	800267a <FLASH_WaitForLastOperation+0x62>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002642:	4b0e      	ldr	r3, [pc, #56]	; (800267c <FLASH_WaitForLastOperation+0x64>)
 8002644:	68db      	ldr	r3, [r3, #12]
 8002646:	f013 0f20 	tst.w	r3, #32
 800264a:	d002      	beq.n	8002652 <FLASH_WaitForLastOperation+0x3a>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800264c:	4b0b      	ldr	r3, [pc, #44]	; (800267c <FLASH_WaitForLastOperation+0x64>)
 800264e:	2220      	movs	r2, #32
 8002650:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002652:	4b0a      	ldr	r3, [pc, #40]	; (800267c <FLASH_WaitForLastOperation+0x64>)
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	f013 0f10 	tst.w	r3, #16
 800265a:	d10b      	bne.n	8002674 <FLASH_WaitForLastOperation+0x5c>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800265c:	4b07      	ldr	r3, [pc, #28]	; (800267c <FLASH_WaitForLastOperation+0x64>)
 800265e:	69db      	ldr	r3, [r3, #28]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002660:	f013 0f01 	tst.w	r3, #1
 8002664:	d106      	bne.n	8002674 <FLASH_WaitForLastOperation+0x5c>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002666:	4b05      	ldr	r3, [pc, #20]	; (800267c <FLASH_WaitForLastOperation+0x64>)
 8002668:	68db      	ldr	r3, [r3, #12]
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800266a:	f013 0f04 	tst.w	r3, #4
 800266e:	d101      	bne.n	8002674 <FLASH_WaitForLastOperation+0x5c>
  return HAL_OK;
 8002670:	2000      	movs	r0, #0
 8002672:	e002      	b.n	800267a <FLASH_WaitForLastOperation+0x62>
    FLASH_SetErrorCode();
 8002674:	f7ff ff6e 	bl	8002554 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002678:	2001      	movs	r0, #1
}
 800267a:	bd38      	pop	{r3, r4, r5, pc}
 800267c:	40022000 	.word	0x40022000

08002680 <HAL_FLASH_Program>:
{
 8002680:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002684:	461e      	mov	r6, r3
  __HAL_LOCK(&pFlash);
 8002686:	4b24      	ldr	r3, [pc, #144]	; (8002718 <HAL_FLASH_Program+0x98>)
 8002688:	7e1b      	ldrb	r3, [r3, #24]
 800268a:	2b01      	cmp	r3, #1
 800268c:	d041      	beq.n	8002712 <HAL_FLASH_Program+0x92>
 800268e:	4604      	mov	r4, r0
 8002690:	460f      	mov	r7, r1
 8002692:	4690      	mov	r8, r2
 8002694:	4b20      	ldr	r3, [pc, #128]	; (8002718 <HAL_FLASH_Program+0x98>)
 8002696:	2201      	movs	r2, #1
 8002698:	761a      	strb	r2, [r3, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800269a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800269e:	f7ff ffbb 	bl	8002618 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 80026a2:	4603      	mov	r3, r0
 80026a4:	bb78      	cbnz	r0, 8002706 <HAL_FLASH_Program+0x86>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80026a6:	2c01      	cmp	r4, #1
 80026a8:	d008      	beq.n	80026bc <HAL_FLASH_Program+0x3c>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80026aa:	2c02      	cmp	r4, #2
 80026ac:	d003      	beq.n	80026b6 <HAL_FLASH_Program+0x36>
      nbiterations = 4U;
 80026ae:	f04f 0904 	mov.w	r9, #4
    for (index = 0U; index < nbiterations; index++)
 80026b2:	461c      	mov	r4, r3
 80026b4:	e007      	b.n	80026c6 <HAL_FLASH_Program+0x46>
      nbiterations = 2U;
 80026b6:	f04f 0902 	mov.w	r9, #2
 80026ba:	e7fa      	b.n	80026b2 <HAL_FLASH_Program+0x32>
      nbiterations = 1U;
 80026bc:	f04f 0901 	mov.w	r9, #1
 80026c0:	e7f7      	b.n	80026b2 <HAL_FLASH_Program+0x32>
    for (index = 0U; index < nbiterations; index++)
 80026c2:	3401      	adds	r4, #1
 80026c4:	b2e4      	uxtb	r4, r4
 80026c6:	454c      	cmp	r4, r9
 80026c8:	d21d      	bcs.n	8002706 <HAL_FLASH_Program+0x86>
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80026ca:	0121      	lsls	r1, r4, #4
 80026cc:	f1c1 0220 	rsb	r2, r1, #32
 80026d0:	f1a1 0320 	sub.w	r3, r1, #32
 80026d4:	fa28 f101 	lsr.w	r1, r8, r1
 80026d8:	fa06 f202 	lsl.w	r2, r6, r2
 80026dc:	4311      	orrs	r1, r2
 80026de:	fa26 f303 	lsr.w	r3, r6, r3
 80026e2:	4319      	orrs	r1, r3
 80026e4:	b289      	uxth	r1, r1
 80026e6:	eb07 0044 	add.w	r0, r7, r4, lsl #1
 80026ea:	f7ff ff25 	bl	8002538 <FLASH_Program_HalfWord>
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80026ee:	f24c 3050 	movw	r0, #50000	; 0xc350
 80026f2:	f7ff ff91 	bl	8002618 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80026f6:	4b09      	ldr	r3, [pc, #36]	; (800271c <HAL_FLASH_Program+0x9c>)
 80026f8:	691d      	ldr	r5, [r3, #16]
 80026fa:	f025 0501 	bic.w	r5, r5, #1
 80026fe:	611d      	str	r5, [r3, #16]
      if (status != HAL_OK)
 8002700:	4603      	mov	r3, r0
 8002702:	2800      	cmp	r0, #0
 8002704:	d0dd      	beq.n	80026c2 <HAL_FLASH_Program+0x42>
  __HAL_UNLOCK(&pFlash);
 8002706:	4a04      	ldr	r2, [pc, #16]	; (8002718 <HAL_FLASH_Program+0x98>)
 8002708:	2100      	movs	r1, #0
 800270a:	7611      	strb	r1, [r2, #24]
}
 800270c:	4618      	mov	r0, r3
 800270e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(&pFlash);
 8002712:	2302      	movs	r3, #2
 8002714:	e7fa      	b.n	800270c <HAL_FLASH_Program+0x8c>
 8002716:	bf00      	nop
 8002718:	20001888 	.word	0x20001888
 800271c:	40022000 	.word	0x40022000

08002720 <FLASH_MassErase>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002720:	4b06      	ldr	r3, [pc, #24]	; (800273c <FLASH_MassErase+0x1c>)
 8002722:	2200      	movs	r2, #0
 8002724:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8002726:	4b06      	ldr	r3, [pc, #24]	; (8002740 <FLASH_MassErase+0x20>)
 8002728:	691a      	ldr	r2, [r3, #16]
 800272a:	f042 0204 	orr.w	r2, r2, #4
 800272e:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002730:	691a      	ldr	r2, [r3, #16]
 8002732:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002736:	611a      	str	r2, [r3, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8002738:	4770      	bx	lr
 800273a:	bf00      	nop
 800273c:	20001888 	.word	0x20001888
 8002740:	40022000 	.word	0x40022000

08002744 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002744:	4b06      	ldr	r3, [pc, #24]	; (8002760 <FLASH_PageErase+0x1c>)
 8002746:	2200      	movs	r2, #0
 8002748:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800274a:	4b06      	ldr	r3, [pc, #24]	; (8002764 <FLASH_PageErase+0x20>)
 800274c:	691a      	ldr	r2, [r3, #16]
 800274e:	f042 0202 	orr.w	r2, r2, #2
 8002752:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8002754:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002756:	691a      	ldr	r2, [r3, #16]
 8002758:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800275c:	611a      	str	r2, [r3, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800275e:	4770      	bx	lr
 8002760:	20001888 	.word	0x20001888
 8002764:	40022000 	.word	0x40022000

08002768 <HAL_FLASHEx_Erase>:
  __HAL_LOCK(&pFlash);
 8002768:	4b26      	ldr	r3, [pc, #152]	; (8002804 <HAL_FLASHEx_Erase+0x9c>)
 800276a:	7e1b      	ldrb	r3, [r3, #24]
 800276c:	2b01      	cmp	r3, #1
 800276e:	d046      	beq.n	80027fe <HAL_FLASHEx_Erase+0x96>
{
 8002770:	b570      	push	{r4, r5, r6, lr}
 8002772:	4605      	mov	r5, r0
 8002774:	460e      	mov	r6, r1
  __HAL_LOCK(&pFlash);
 8002776:	4b23      	ldr	r3, [pc, #140]	; (8002804 <HAL_FLASHEx_Erase+0x9c>)
 8002778:	2201      	movs	r2, #1
 800277a:	761a      	strb	r2, [r3, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800277c:	6803      	ldr	r3, [r0, #0]
 800277e:	2b02      	cmp	r3, #2
 8002780:	d020      	beq.n	80027c4 <HAL_FLASHEx_Erase+0x5c>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002782:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002786:	f7ff ff47 	bl	8002618 <FLASH_WaitForLastOperation>
 800278a:	bb90      	cbnz	r0, 80027f2 <HAL_FLASHEx_Erase+0x8a>
        *PageError = 0xFFFFFFFFU;
 800278c:	f04f 33ff 	mov.w	r3, #4294967295
 8002790:	6033      	str	r3, [r6, #0]
        for(address = pEraseInit->PageAddress;
 8002792:	68ac      	ldr	r4, [r5, #8]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002794:	2101      	movs	r1, #1
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8002796:	68ea      	ldr	r2, [r5, #12]
 8002798:	68ab      	ldr	r3, [r5, #8]
 800279a:	eb03 2382 	add.w	r3, r3, r2, lsl #10
        for(address = pEraseInit->PageAddress;
 800279e:	42a3      	cmp	r3, r4
 80027a0:	d928      	bls.n	80027f4 <HAL_FLASHEx_Erase+0x8c>
          FLASH_PageErase(address);
 80027a2:	4620      	mov	r0, r4
 80027a4:	f7ff ffce 	bl	8002744 <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80027a8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80027ac:	f7ff ff34 	bl	8002618 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80027b0:	4a15      	ldr	r2, [pc, #84]	; (8002808 <HAL_FLASHEx_Erase+0xa0>)
 80027b2:	6913      	ldr	r3, [r2, #16]
 80027b4:	f023 0302 	bic.w	r3, r3, #2
 80027b8:	6113      	str	r3, [r2, #16]
          if (status != HAL_OK)
 80027ba:	4601      	mov	r1, r0
 80027bc:	b9b8      	cbnz	r0, 80027ee <HAL_FLASHEx_Erase+0x86>
            address += FLASH_PAGE_SIZE)
 80027be:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80027c2:	e7e8      	b.n	8002796 <HAL_FLASHEx_Erase+0x2e>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80027c4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80027c8:	f7ff ff26 	bl	8002618 <FLASH_WaitForLastOperation>
 80027cc:	b108      	cbz	r0, 80027d2 <HAL_FLASHEx_Erase+0x6a>
  HAL_StatusTypeDef status = HAL_ERROR;
 80027ce:	2101      	movs	r1, #1
 80027d0:	e010      	b.n	80027f4 <HAL_FLASHEx_Erase+0x8c>
        FLASH_MassErase(FLASH_BANK_1);
 80027d2:	2001      	movs	r0, #1
 80027d4:	f7ff ffa4 	bl	8002720 <FLASH_MassErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80027d8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80027dc:	f7ff ff1c 	bl	8002618 <FLASH_WaitForLastOperation>
 80027e0:	4601      	mov	r1, r0
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80027e2:	4a09      	ldr	r2, [pc, #36]	; (8002808 <HAL_FLASHEx_Erase+0xa0>)
 80027e4:	6913      	ldr	r3, [r2, #16]
 80027e6:	f023 0304 	bic.w	r3, r3, #4
 80027ea:	6113      	str	r3, [r2, #16]
 80027ec:	e002      	b.n	80027f4 <HAL_FLASHEx_Erase+0x8c>
            *PageError = address;
 80027ee:	6034      	str	r4, [r6, #0]
            break;
 80027f0:	e000      	b.n	80027f4 <HAL_FLASHEx_Erase+0x8c>
  HAL_StatusTypeDef status = HAL_ERROR;
 80027f2:	2101      	movs	r1, #1
  __HAL_UNLOCK(&pFlash);
 80027f4:	4b03      	ldr	r3, [pc, #12]	; (8002804 <HAL_FLASHEx_Erase+0x9c>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	761a      	strb	r2, [r3, #24]
}
 80027fa:	4608      	mov	r0, r1
 80027fc:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(&pFlash);
 80027fe:	2102      	movs	r1, #2
}
 8002800:	4608      	mov	r0, r1
 8002802:	4770      	bx	lr
 8002804:	20001888 	.word	0x20001888
 8002808:	40022000 	.word	0x40022000

0800280c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800280c:	b570      	push	{r4, r5, r6, lr}
 800280e:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002810:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 8002812:	46a4      	mov	ip, r4
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002814:	e0a6      	b.n	8002964 <HAL_GPIO_Init+0x158>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002816:	4d80      	ldr	r5, [pc, #512]	; (8002a18 <HAL_GPIO_Init+0x20c>)
 8002818:	42aa      	cmp	r2, r5
 800281a:	d010      	beq.n	800283e <HAL_GPIO_Init+0x32>
 800281c:	d907      	bls.n	800282e <HAL_GPIO_Init+0x22>
 800281e:	4d7f      	ldr	r5, [pc, #508]	; (8002a1c <HAL_GPIO_Init+0x210>)
 8002820:	42aa      	cmp	r2, r5
 8002822:	d00c      	beq.n	800283e <HAL_GPIO_Init+0x32>
 8002824:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
 8002828:	42aa      	cmp	r2, r5
 800282a:	d008      	beq.n	800283e <HAL_GPIO_Init+0x32>
 800282c:	e013      	b.n	8002856 <HAL_GPIO_Init+0x4a>
 800282e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8002832:	42aa      	cmp	r2, r5
 8002834:	d003      	beq.n	800283e <HAL_GPIO_Init+0x32>
 8002836:	f505 2570 	add.w	r5, r5, #983040	; 0xf0000
 800283a:	42aa      	cmp	r2, r5
 800283c:	d107      	bne.n	800284e <HAL_GPIO_Init+0x42>
        case GPIO_MODE_EVT_RISING:
        case GPIO_MODE_EVT_FALLING:
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800283e:	688a      	ldr	r2, [r1, #8]
 8002840:	2a00      	cmp	r2, #0
 8002842:	d058      	beq.n	80028f6 <HAL_GPIO_Init+0xea>
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
          }
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002844:	2a01      	cmp	r2, #1
 8002846:	d051      	beq.n	80028ec <HAL_GPIO_Init+0xe0>
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;

            /* Reset the corresponding ODR bit */
            GPIOx->BRR = ioposition;
 8002848:	6143      	str	r3, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800284a:	2408      	movs	r4, #8
 800284c:	e003      	b.n	8002856 <HAL_GPIO_Init+0x4a>
      switch (GPIO_Init->Mode)
 800284e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8002852:	42aa      	cmp	r2, r5
 8002854:	d0f3      	beq.n	800283e <HAL_GPIO_Init+0x32>
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002856:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 800285a:	d84e      	bhi.n	80028fa <HAL_GPIO_Init+0xee>
 800285c:	4606      	mov	r6, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800285e:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8002862:	d84c      	bhi.n	80028fe <HAL_GPIO_Init+0xf2>
 8002864:	ea4f 028c 	mov.w	r2, ip, lsl #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002868:	6833      	ldr	r3, [r6, #0]
 800286a:	250f      	movs	r5, #15
 800286c:	4095      	lsls	r5, r2
 800286e:	ea23 0305 	bic.w	r3, r3, r5
 8002872:	fa04 f202 	lsl.w	r2, r4, r2
 8002876:	4313      	orrs	r3, r2
 8002878:	6033      	str	r3, [r6, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800287a:	684b      	ldr	r3, [r1, #4]
 800287c:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002880:	d06e      	beq.n	8002960 <HAL_GPIO_Init+0x154>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002882:	4b67      	ldr	r3, [pc, #412]	; (8002a20 <HAL_GPIO_Init+0x214>)
 8002884:	699a      	ldr	r2, [r3, #24]
 8002886:	f042 0201 	orr.w	r2, r2, #1
 800288a:	619a      	str	r2, [r3, #24]
 800288c:	699b      	ldr	r3, [r3, #24]
 800288e:	f003 0301 	and.w	r3, r3, #1
 8002892:	9301      	str	r3, [sp, #4]
 8002894:	9b01      	ldr	r3, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8002896:	ea4f 029c 	mov.w	r2, ip, lsr #2
 800289a:	1c95      	adds	r5, r2, #2
 800289c:	4b61      	ldr	r3, [pc, #388]	; (8002a24 <HAL_GPIO_Init+0x218>)
 800289e:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80028a2:	f00c 0303 	and.w	r3, ip, #3
 80028a6:	009d      	lsls	r5, r3, #2
 80028a8:	230f      	movs	r3, #15
 80028aa:	40ab      	lsls	r3, r5
 80028ac:	ea26 0603 	bic.w	r6, r6, r3
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80028b0:	4b5d      	ldr	r3, [pc, #372]	; (8002a28 <HAL_GPIO_Init+0x21c>)
 80028b2:	4298      	cmp	r0, r3
 80028b4:	d029      	beq.n	800290a <HAL_GPIO_Init+0xfe>
 80028b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80028ba:	4298      	cmp	r0, r3
 80028bc:	f000 808e 	beq.w	80029dc <HAL_GPIO_Init+0x1d0>
 80028c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80028c4:	4298      	cmp	r0, r3
 80028c6:	f000 808b 	beq.w	80029e0 <HAL_GPIO_Init+0x1d4>
 80028ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80028ce:	4298      	cmp	r0, r3
 80028d0:	d019      	beq.n	8002906 <HAL_GPIO_Init+0xfa>
 80028d2:	2304      	movs	r3, #4
 80028d4:	e01a      	b.n	800290c <HAL_GPIO_Init+0x100>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80028d6:	68cc      	ldr	r4, [r1, #12]
          break;
 80028d8:	e7bd      	b.n	8002856 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80028da:	68cc      	ldr	r4, [r1, #12]
 80028dc:	3404      	adds	r4, #4
          break;
 80028de:	e7ba      	b.n	8002856 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80028e0:	68cc      	ldr	r4, [r1, #12]
 80028e2:	3408      	adds	r4, #8
          break;
 80028e4:	e7b7      	b.n	8002856 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80028e6:	68cc      	ldr	r4, [r1, #12]
 80028e8:	340c      	adds	r4, #12
          break;
 80028ea:	e7b4      	b.n	8002856 <HAL_GPIO_Init+0x4a>
            GPIOx->BSRR = ioposition;
 80028ec:	6103      	str	r3, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80028ee:	2408      	movs	r4, #8
 80028f0:	e7b1      	b.n	8002856 <HAL_GPIO_Init+0x4a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80028f2:	2400      	movs	r4, #0
 80028f4:	e7af      	b.n	8002856 <HAL_GPIO_Init+0x4a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80028f6:	2404      	movs	r4, #4
 80028f8:	e7ad      	b.n	8002856 <HAL_GPIO_Init+0x4a>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80028fa:	1d06      	adds	r6, r0, #4
 80028fc:	e7af      	b.n	800285e <HAL_GPIO_Init+0x52>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80028fe:	f1ac 0208 	sub.w	r2, ip, #8
 8002902:	0092      	lsls	r2, r2, #2
 8002904:	e7b0      	b.n	8002868 <HAL_GPIO_Init+0x5c>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002906:	2303      	movs	r3, #3
 8002908:	e000      	b.n	800290c <HAL_GPIO_Init+0x100>
 800290a:	2300      	movs	r3, #0
 800290c:	40ab      	lsls	r3, r5
 800290e:	4333      	orrs	r3, r6
        AFIO->EXTICR[position >> 2u] = temp;
 8002910:	3202      	adds	r2, #2
 8002912:	4d44      	ldr	r5, [pc, #272]	; (8002a24 <HAL_GPIO_Init+0x218>)
 8002914:	f845 3022 	str.w	r3, [r5, r2, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002918:	684b      	ldr	r3, [r1, #4]
 800291a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800291e:	d061      	beq.n	80029e4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002920:	4a42      	ldr	r2, [pc, #264]	; (8002a2c <HAL_GPIO_Init+0x220>)
 8002922:	6813      	ldr	r3, [r2, #0]
 8002924:	ea43 030e 	orr.w	r3, r3, lr
 8002928:	6013      	str	r3, [r2, #0]
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800292a:	684b      	ldr	r3, [r1, #4]
 800292c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002930:	d05e      	beq.n	80029f0 <HAL_GPIO_Init+0x1e4>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002932:	4a3e      	ldr	r2, [pc, #248]	; (8002a2c <HAL_GPIO_Init+0x220>)
 8002934:	6853      	ldr	r3, [r2, #4]
 8002936:	ea43 030e 	orr.w	r3, r3, lr
 800293a:	6053      	str	r3, [r2, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800293c:	684b      	ldr	r3, [r1, #4]
 800293e:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8002942:	d05b      	beq.n	80029fc <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002944:	4a39      	ldr	r2, [pc, #228]	; (8002a2c <HAL_GPIO_Init+0x220>)
 8002946:	6893      	ldr	r3, [r2, #8]
 8002948:	ea43 030e 	orr.w	r3, r3, lr
 800294c:	6093      	str	r3, [r2, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800294e:	684b      	ldr	r3, [r1, #4]
 8002950:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8002954:	d058      	beq.n	8002a08 <HAL_GPIO_Init+0x1fc>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002956:	4a35      	ldr	r2, [pc, #212]	; (8002a2c <HAL_GPIO_Init+0x220>)
 8002958:	68d3      	ldr	r3, [r2, #12]
 800295a:	ea43 030e 	orr.w	r3, r3, lr
 800295e:	60d3      	str	r3, [r2, #12]
          CLEAR_BIT(EXTI->FTSR, iocurrent);
        }
      }
    }

	position++;
 8002960:	f10c 0c01 	add.w	ip, ip, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002964:	680a      	ldr	r2, [r1, #0]
 8002966:	fa32 f30c 	lsrs.w	r3, r2, ip
 800296a:	d053      	beq.n	8002a14 <HAL_GPIO_Init+0x208>
    ioposition = (0x01uL << position);
 800296c:	2301      	movs	r3, #1
 800296e:	fa03 f30c 	lsl.w	r3, r3, ip
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002972:	ea02 0e03 	and.w	lr, r2, r3
    if (iocurrent == ioposition)
 8002976:	ea33 0202 	bics.w	r2, r3, r2
 800297a:	d1f1      	bne.n	8002960 <HAL_GPIO_Init+0x154>
      switch (GPIO_Init->Mode)
 800297c:	684a      	ldr	r2, [r1, #4]
 800297e:	2a12      	cmp	r2, #18
 8002980:	f63f af49 	bhi.w	8002816 <HAL_GPIO_Init+0xa>
 8002984:	2a12      	cmp	r2, #18
 8002986:	f63f af66 	bhi.w	8002856 <HAL_GPIO_Init+0x4a>
 800298a:	a501      	add	r5, pc, #4	; (adr r5, 8002990 <HAL_GPIO_Init+0x184>)
 800298c:	f855 f022 	ldr.w	pc, [r5, r2, lsl #2]
 8002990:	0800283f 	.word	0x0800283f
 8002994:	080028d7 	.word	0x080028d7
 8002998:	080028e1 	.word	0x080028e1
 800299c:	080028f3 	.word	0x080028f3
 80029a0:	08002857 	.word	0x08002857
 80029a4:	08002857 	.word	0x08002857
 80029a8:	08002857 	.word	0x08002857
 80029ac:	08002857 	.word	0x08002857
 80029b0:	08002857 	.word	0x08002857
 80029b4:	08002857 	.word	0x08002857
 80029b8:	08002857 	.word	0x08002857
 80029bc:	08002857 	.word	0x08002857
 80029c0:	08002857 	.word	0x08002857
 80029c4:	08002857 	.word	0x08002857
 80029c8:	08002857 	.word	0x08002857
 80029cc:	08002857 	.word	0x08002857
 80029d0:	08002857 	.word	0x08002857
 80029d4:	080028db 	.word	0x080028db
 80029d8:	080028e7 	.word	0x080028e7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80029dc:	2301      	movs	r3, #1
 80029de:	e795      	b.n	800290c <HAL_GPIO_Init+0x100>
 80029e0:	2302      	movs	r3, #2
 80029e2:	e793      	b.n	800290c <HAL_GPIO_Init+0x100>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80029e4:	4a11      	ldr	r2, [pc, #68]	; (8002a2c <HAL_GPIO_Init+0x220>)
 80029e6:	6813      	ldr	r3, [r2, #0]
 80029e8:	ea23 030e 	bic.w	r3, r3, lr
 80029ec:	6013      	str	r3, [r2, #0]
 80029ee:	e79c      	b.n	800292a <HAL_GPIO_Init+0x11e>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80029f0:	4a0e      	ldr	r2, [pc, #56]	; (8002a2c <HAL_GPIO_Init+0x220>)
 80029f2:	6853      	ldr	r3, [r2, #4]
 80029f4:	ea23 030e 	bic.w	r3, r3, lr
 80029f8:	6053      	str	r3, [r2, #4]
 80029fa:	e79f      	b.n	800293c <HAL_GPIO_Init+0x130>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80029fc:	4a0b      	ldr	r2, [pc, #44]	; (8002a2c <HAL_GPIO_Init+0x220>)
 80029fe:	6893      	ldr	r3, [r2, #8]
 8002a00:	ea23 030e 	bic.w	r3, r3, lr
 8002a04:	6093      	str	r3, [r2, #8]
 8002a06:	e7a2      	b.n	800294e <HAL_GPIO_Init+0x142>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002a08:	4a08      	ldr	r2, [pc, #32]	; (8002a2c <HAL_GPIO_Init+0x220>)
 8002a0a:	68d3      	ldr	r3, [r2, #12]
 8002a0c:	ea23 030e 	bic.w	r3, r3, lr
 8002a10:	60d3      	str	r3, [r2, #12]
 8002a12:	e7a5      	b.n	8002960 <HAL_GPIO_Init+0x154>
  }
}
 8002a14:	b002      	add	sp, #8
 8002a16:	bd70      	pop	{r4, r5, r6, pc}
 8002a18:	10220000 	.word	0x10220000
 8002a1c:	10310000 	.word	0x10310000
 8002a20:	40021000 	.word	0x40021000
 8002a24:	40010000 	.word	0x40010000
 8002a28:	40010800 	.word	0x40010800
 8002a2c:	40010400 	.word	0x40010400

08002a30 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002a30:	6883      	ldr	r3, [r0, #8]
 8002a32:	4219      	tst	r1, r3
 8002a34:	d001      	beq.n	8002a3a <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 8002a36:	2001      	movs	r0, #1
 8002a38:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002a3a:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8002a3c:	4770      	bx	lr

08002a3e <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a3e:	b10a      	cbz	r2, 8002a44 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a40:	6101      	str	r1, [r0, #16]
 8002a42:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002a44:	0409      	lsls	r1, r1, #16
 8002a46:	6101      	str	r1, [r0, #16]
  }
}
 8002a48:	4770      	bx	lr

08002a4a <HAL_IWDG_Init>:
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8002a4a:	b340      	cbz	r0, 8002a9e <HAL_IWDG_Init+0x54>
{
 8002a4c:	b538      	push	{r3, r4, r5, lr}
 8002a4e:	4604      	mov	r4, r0
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8002a50:	6803      	ldr	r3, [r0, #0]
 8002a52:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8002a56:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8002a58:	6803      	ldr	r3, [r0, #0]
 8002a5a:	f245 5255 	movw	r2, #21845	; 0x5555
 8002a5e:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8002a60:	6803      	ldr	r3, [r0, #0]
 8002a62:	6842      	ldr	r2, [r0, #4]
 8002a64:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8002a66:	6803      	ldr	r3, [r0, #0]
 8002a68:	6882      	ldr	r2, [r0, #8]
 8002a6a:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8002a6c:	f7ff fc72 	bl	8002354 <HAL_GetTick>
 8002a70:	4605      	mov	r5, r0

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002a72:	6823      	ldr	r3, [r4, #0]
 8002a74:	68da      	ldr	r2, [r3, #12]
 8002a76:	f012 0f03 	tst.w	r2, #3
 8002a7a:	d00b      	beq.n	8002a94 <HAL_IWDG_Init+0x4a>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8002a7c:	f7ff fc6a 	bl	8002354 <HAL_GetTick>
 8002a80:	1b40      	subs	r0, r0, r5
 8002a82:	2827      	cmp	r0, #39	; 0x27
 8002a84:	d9f5      	bls.n	8002a72 <HAL_IWDG_Init+0x28>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002a86:	6823      	ldr	r3, [r4, #0]
 8002a88:	68db      	ldr	r3, [r3, #12]
 8002a8a:	f013 0f03 	tst.w	r3, #3
 8002a8e:	d0f0      	beq.n	8002a72 <HAL_IWDG_Init+0x28>
      {
        return HAL_TIMEOUT;
 8002a90:	2003      	movs	r0, #3
 8002a92:	e003      	b.n	8002a9c <HAL_IWDG_Init+0x52>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8002a94:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8002a98:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002a9a:	2000      	movs	r0, #0
}
 8002a9c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8002a9e:	2001      	movs	r0, #1
}
 8002aa0:	4770      	bx	lr

08002aa2 <HAL_IWDG_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8002aa2:	6803      	ldr	r3, [r0, #0]
 8002aa4:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8002aa8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 8002aaa:	2000      	movs	r0, #0
 8002aac:	4770      	bx	lr

08002aae <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002aae:	b538      	push	{r3, r4, r5, lr}
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002ab0:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8002ab4:	d044      	beq.n	8002b40 <HAL_PCD_EP_DB_Receive+0x92>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002ab6:	6804      	ldr	r4, [r0, #0]
 8002ab8:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	f891 c000 	ldrb.w	ip, [r1]
 8002ac2:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 8002ac6:	3302      	adds	r3, #2
 8002ac8:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8002acc:	f8b3 4400 	ldrh.w	r4, [r3, #1024]	; 0x400
 8002ad0:	f3c4 0409 	ubfx	r4, r4, #0, #10

    if (ep->xfer_len >= count)
 8002ad4:	698b      	ldr	r3, [r1, #24]
 8002ad6:	42a3      	cmp	r3, r4
 8002ad8:	d328      	bcc.n	8002b2c <HAL_PCD_EP_DB_Receive+0x7e>
    {
      ep->xfer_len -= count;
 8002ada:	1b1b      	subs	r3, r3, r4
 8002adc:	618b      	str	r3, [r1, #24]
    else
    {
      ep->xfer_len = 0U;
    }

    if (ep->xfer_len == 0U)
 8002ade:	698b      	ldr	r3, [r1, #24]
 8002ae0:	b97b      	cbnz	r3, 8002b02 <HAL_PCD_EP_DB_Receive+0x54>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002ae2:	6805      	ldr	r5, [r0, #0]
 8002ae4:	f835 302c 	ldrh.w	r3, [r5, ip, lsl #2]
 8002ae8:	b29b      	uxth	r3, r3
 8002aea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002aee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002af2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002af6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002afa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002afe:	f825 302c 	strh.w	r3, [r5, ip, lsl #2]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002b02:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002b06:	d00e      	beq.n	8002b26 <HAL_PCD_EP_DB_Receive+0x78>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002b08:	6802      	ldr	r2, [r0, #0]
 8002b0a:	780d      	ldrb	r5, [r1, #0]
 8002b0c:	f832 3025 	ldrh.w	r3, [r2, r5, lsl #2]
 8002b10:	b29b      	uxth	r3, r3
 8002b12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b1e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002b22:	f822 3025 	strh.w	r3, [r2, r5, lsl #2]
    }

    if (count != 0U)
 8002b26:	b924      	cbnz	r4, 8002b32 <HAL_PCD_EP_DB_Receive+0x84>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
    }
  }

  return count;
}
 8002b28:	4620      	mov	r0, r4
 8002b2a:	bd38      	pop	{r3, r4, r5, pc}
      ep->xfer_len = 0U;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	618b      	str	r3, [r1, #24]
 8002b30:	e7d5      	b.n	8002ade <HAL_PCD_EP_DB_Receive+0x30>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002b32:	4623      	mov	r3, r4
 8002b34:	890a      	ldrh	r2, [r1, #8]
 8002b36:	6949      	ldr	r1, [r1, #20]
 8002b38:	6800      	ldr	r0, [r0, #0]
 8002b3a:	f003 f91d 	bl	8005d78 <USB_ReadPMA>
 8002b3e:	e7f3      	b.n	8002b28 <HAL_PCD_EP_DB_Receive+0x7a>
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002b40:	6804      	ldr	r4, [r0, #0]
 8002b42:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 8002b46:	b29b      	uxth	r3, r3
 8002b48:	f891 c000 	ldrb.w	ip, [r1]
 8002b4c:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 8002b50:	3306      	adds	r3, #6
 8002b52:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8002b56:	f8b3 4400 	ldrh.w	r4, [r3, #1024]	; 0x400
 8002b5a:	f3c4 0409 	ubfx	r4, r4, #0, #10
    if (ep->xfer_len >= count)
 8002b5e:	698b      	ldr	r3, [r1, #24]
 8002b60:	42a3      	cmp	r3, r4
 8002b62:	d32f      	bcc.n	8002bc4 <HAL_PCD_EP_DB_Receive+0x116>
      ep->xfer_len -= count;
 8002b64:	1b1b      	subs	r3, r3, r4
 8002b66:	618b      	str	r3, [r1, #24]
    if (ep->xfer_len == 0U)
 8002b68:	698b      	ldr	r3, [r1, #24]
 8002b6a:	b97b      	cbnz	r3, 8002b8c <HAL_PCD_EP_DB_Receive+0xde>
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002b6c:	6805      	ldr	r5, [r0, #0]
 8002b6e:	f835 302c 	ldrh.w	r3, [r5, ip, lsl #2]
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b7c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002b80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b88:	f825 302c 	strh.w	r3, [r5, ip, lsl #2]
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002b8c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002b90:	d10f      	bne.n	8002bb2 <HAL_PCD_EP_DB_Receive+0x104>
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002b92:	6802      	ldr	r2, [r0, #0]
 8002b94:	f891 c000 	ldrb.w	ip, [r1]
 8002b98:	f832 302c 	ldrh.w	r3, [r2, ip, lsl #2]
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ba2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ba6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002baa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002bae:	f822 302c 	strh.w	r3, [r2, ip, lsl #2]
    if (count != 0U)
 8002bb2:	2c00      	cmp	r4, #0
 8002bb4:	d0b8      	beq.n	8002b28 <HAL_PCD_EP_DB_Receive+0x7a>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002bb6:	4623      	mov	r3, r4
 8002bb8:	894a      	ldrh	r2, [r1, #10]
 8002bba:	6949      	ldr	r1, [r1, #20]
 8002bbc:	6800      	ldr	r0, [r0, #0]
 8002bbe:	f003 f8db 	bl	8005d78 <USB_ReadPMA>
 8002bc2:	e7b1      	b.n	8002b28 <HAL_PCD_EP_DB_Receive+0x7a>
      ep->xfer_len = 0U;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	618b      	str	r3, [r1, #24]
 8002bc8:	e7ce      	b.n	8002b68 <HAL_PCD_EP_DB_Receive+0xba>

08002bca <HAL_PCD_Init>:
{
 8002bca:	b570      	push	{r4, r5, r6, lr}
 8002bcc:	b086      	sub	sp, #24
  if (hpcd == NULL)
 8002bce:	2800      	cmp	r0, #0
 8002bd0:	f000 8085 	beq.w	8002cde <HAL_PCD_Init+0x114>
 8002bd4:	4604      	mov	r4, r0
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002bd6:	f890 32a9 	ldrb.w	r3, [r0, #681]	; 0x2a9
 8002bda:	b1eb      	cbz	r3, 8002c18 <HAL_PCD_Init+0x4e>
  hpcd->State = HAL_PCD_STATE_BUSY;
 8002bdc:	2303      	movs	r3, #3
 8002bde:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  __HAL_PCD_DISABLE(hpcd);
 8002be2:	6820      	ldr	r0, [r4, #0]
 8002be4:	f002 f911 	bl	8004e0a <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002be8:	4625      	mov	r5, r4
 8002bea:	f855 6b10 	ldr.w	r6, [r5], #16
 8002bee:	46ec      	mov	ip, sp
 8002bf0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002bf2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8002bf6:	682b      	ldr	r3, [r5, #0]
 8002bf8:	f8cc 3000 	str.w	r3, [ip]
 8002bfc:	1d23      	adds	r3, r4, #4
 8002bfe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c00:	4630      	mov	r0, r6
 8002c02:	f002 f8f2 	bl	8004dea <USB_CoreInit>
 8002c06:	4605      	mov	r5, r0
 8002c08:	b158      	cbz	r0, 8002c22 <HAL_PCD_Init+0x58>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c0a:	2302      	movs	r3, #2
 8002c0c:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
    return HAL_ERROR;
 8002c10:	2501      	movs	r5, #1
}
 8002c12:	4628      	mov	r0, r5
 8002c14:	b006      	add	sp, #24
 8002c16:	bd70      	pop	{r4, r5, r6, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8002c18:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
    HAL_PCD_MspInit(hpcd);
 8002c1c:	f004 f820 	bl	8006c60 <HAL_PCD_MspInit>
 8002c20:	e7dc      	b.n	8002bdc <HAL_PCD_Init+0x12>
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002c22:	2100      	movs	r1, #0
 8002c24:	6820      	ldr	r0, [r4, #0]
 8002c26:	f002 f8fa 	bl	8004e1e <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c2a:	462b      	mov	r3, r5
 8002c2c:	e01a      	b.n	8002c64 <HAL_PCD_Init+0x9a>
    hpcd->IN_ep[i].is_in = 1U;
 8002c2e:	1c5a      	adds	r2, r3, #1
 8002c30:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8002c34:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8002c38:	2001      	movs	r0, #1
 8002c3a:	7048      	strb	r0, [r1, #1]
    hpcd->IN_ep[i].num = i;
 8002c3c:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8002c40:	f804 3031 	strb.w	r3, [r4, r1, lsl #3]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002c44:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8002c48:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8002c4c:	86cb      	strh	r3, [r1, #54]	; 0x36
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002c4e:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
 8002c52:	eb04 0ccc 	add.w	ip, r4, ip, lsl #3
 8002c56:	2000      	movs	r0, #0
 8002c58:	f88c 0003 	strb.w	r0, [ip, #3]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002c5c:	6388      	str	r0, [r1, #56]	; 0x38
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002c5e:	63c8      	str	r0, [r1, #60]	; 0x3c
    hpcd->IN_ep[i].xfer_len = 0U;
 8002c60:	6408      	str	r0, [r1, #64]	; 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c62:	b2d3      	uxtb	r3, r2
 8002c64:	6861      	ldr	r1, [r4, #4]
 8002c66:	428b      	cmp	r3, r1
 8002c68:	d3e1      	bcc.n	8002c2e <HAL_PCD_Init+0x64>
 8002c6a:	e016      	b.n	8002c9a <HAL_PCD_Init+0xd0>
    hpcd->OUT_ep[i].is_in = 0U;
 8002c6c:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8002c70:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8002c74:	2200      	movs	r2, #0
 8002c76:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169
    hpcd->OUT_ep[i].num = i;
 8002c7a:	f883 5168 	strb.w	r5, [r3, #360]	; 0x168
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002c7e:	f883 216b 	strb.w	r2, [r3, #363]	; 0x16b
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002c82:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002c86:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002c8a:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8002c8e:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8002c92:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c96:	3501      	adds	r5, #1
 8002c98:	b2ed      	uxtb	r5, r5
 8002c9a:	42a9      	cmp	r1, r5
 8002c9c:	d8e6      	bhi.n	8002c6c <HAL_PCD_Init+0xa2>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c9e:	4625      	mov	r5, r4
 8002ca0:	f855 6b10 	ldr.w	r6, [r5], #16
 8002ca4:	46ec      	mov	ip, sp
 8002ca6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ca8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8002cac:	682b      	ldr	r3, [r5, #0]
 8002cae:	f8cc 3000 	str.w	r3, [ip]
 8002cb2:	1d23      	adds	r3, r4, #4
 8002cb4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002cb6:	4630      	mov	r0, r6
 8002cb8:	f002 f8b3 	bl	8004e22 <USB_DevInit>
 8002cbc:	4605      	mov	r5, r0
 8002cbe:	b120      	cbz	r0, 8002cca <HAL_PCD_Init+0x100>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002cc0:	2302      	movs	r3, #2
 8002cc2:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
    return HAL_ERROR;
 8002cc6:	2501      	movs	r5, #1
 8002cc8:	e7a3      	b.n	8002c12 <HAL_PCD_Init+0x48>
  hpcd->USB_Address = 0U;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8002cd6:	6820      	ldr	r0, [r4, #0]
 8002cd8:	f002 fbd9 	bl	800548e <USB_DevDisconnect>
  return HAL_OK;
 8002cdc:	e799      	b.n	8002c12 <HAL_PCD_Init+0x48>
    return HAL_ERROR;
 8002cde:	2501      	movs	r5, #1
 8002ce0:	e797      	b.n	8002c12 <HAL_PCD_Init+0x48>

08002ce2 <HAL_PCD_Start>:
{
 8002ce2:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hpcd);
 8002ce4:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d011      	beq.n	8002d10 <HAL_PCD_Start+0x2e>
 8002cec:	4604      	mov	r4, r0
 8002cee:	2501      	movs	r5, #1
 8002cf0:	f880 52a8 	strb.w	r5, [r0, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002cf4:	6800      	ldr	r0, [r0, #0]
 8002cf6:	f002 f87f 	bl	8004df8 <USB_EnableGlobalInt>
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002cfa:	4629      	mov	r1, r5
 8002cfc:	4620      	mov	r0, r4
 8002cfe:	f004 f8ba 	bl	8006e76 <HAL_PCDEx_SetConnectionState>
  (void)USB_DevConnect(hpcd->Instance);
 8002d02:	6820      	ldr	r0, [r4, #0]
 8002d04:	f002 fbc1 	bl	800548a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002d08:	2000      	movs	r0, #0
 8002d0a:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8002d0e:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8002d10:	2002      	movs	r0, #2
 8002d12:	e7fc      	b.n	8002d0e <HAL_PCD_Start+0x2c>

08002d14 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002d14:	b570      	push	{r4, r5, r6, lr}
 8002d16:	4605      	mov	r5, r0
 8002d18:	460c      	mov	r4, r1
 8002d1a:	4616      	mov	r6, r2
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002d1c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002d20:	f000 810d 	beq.w	8002f3e <HAL_PCD_EP_DB_Transmit+0x22a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002d24:	6802      	ldr	r2, [r0, #0]
 8002d26:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	7809      	ldrb	r1, [r1, #0]
 8002d2e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8002d32:	3302      	adds	r3, #2
 8002d34:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8002d38:	f8b3 2400 	ldrh.w	r2, [r3, #1024]	; 0x400
 8002d3c:	f3c2 0209 	ubfx	r2, r2, #0, #10

    if (ep->xfer_len > TxByteNbre)
 8002d40:	69a3      	ldr	r3, [r4, #24]
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d952      	bls.n	8002dec <HAL_PCD_EP_DB_Transmit+0xd8>
    {
      ep->xfer_len -= TxByteNbre;
 8002d46:	1a9b      	subs	r3, r3, r2
 8002d48:	61a3      	str	r3, [r4, #24]
    else
    {
      ep->xfer_len = 0U;
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002d4a:	69a3      	ldr	r3, [r4, #24]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d16a      	bne.n	8002e26 <HAL_PCD_EP_DB_Transmit+0x112>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002d50:	7863      	ldrb	r3, [r4, #1]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d14d      	bne.n	8002df2 <HAL_PCD_EP_DB_Transmit+0xde>
 8002d56:	682b      	ldr	r3, [r5, #0]
 8002d58:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8002d5c:	b292      	uxth	r2, r2
 8002d5e:	4413      	add	r3, r2
 8002d60:	eb03 1101 	add.w	r1, r3, r1, lsl #4
 8002d64:	f8b1 3404 	ldrh.w	r3, [r1, #1028]	; 0x404
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	f8a1 3404 	strh.w	r3, [r1, #1028]	; 0x404
 8002d74:	f8b1 3404 	ldrh.w	r3, [r1, #1028]	; 0x404
 8002d78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d80:	b29b      	uxth	r3, r3
 8002d82:	f8a1 3404 	strh.w	r3, [r1, #1028]	; 0x404
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002d86:	682b      	ldr	r3, [r5, #0]
 8002d88:	7862      	ldrb	r2, [r4, #1]
 8002d8a:	2a00      	cmp	r2, #0
 8002d8c:	d13e      	bne.n	8002e0c <HAL_PCD_EP_DB_Transmit+0xf8>
 8002d8e:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8002d92:	b292      	uxth	r2, r2
 8002d94:	4413      	add	r3, r2
 8002d96:	7822      	ldrb	r2, [r4, #0]
 8002d98:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8002d9c:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 8002da0:	b292      	uxth	r2, r2
 8002da2:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8002da6:	b292      	uxth	r2, r2
 8002da8:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8002dac:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 8002db0:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8002db4:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002db8:	b292      	uxth	r2, r2
 8002dba:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002dbe:	7821      	ldrb	r1, [r4, #0]
 8002dc0:	4628      	mov	r0, r5
 8002dc2:	f003 ff77 	bl	8006cb4 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002dc6:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 8002dca:	d041      	beq.n	8002e50 <HAL_PCD_EP_DB_Transmit+0x13c>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002dcc:	682a      	ldr	r2, [r5, #0]
 8002dce:	7821      	ldrb	r1, [r4, #0]
 8002dd0:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002dda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dde:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002de2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002de6:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8002dea:	e031      	b.n	8002e50 <HAL_PCD_EP_DB_Transmit+0x13c>
      ep->xfer_len = 0U;
 8002dec:	2300      	movs	r3, #0
 8002dee:	61a3      	str	r3, [r4, #24]
 8002df0:	e7ab      	b.n	8002d4a <HAL_PCD_EP_DB_Transmit+0x36>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d1c7      	bne.n	8002d86 <HAL_PCD_EP_DB_Transmit+0x72>
 8002df6:	682b      	ldr	r3, [r5, #0]
 8002df8:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8002dfc:	b292      	uxth	r2, r2
 8002dfe:	4413      	add	r3, r2
 8002e00:	eb03 1101 	add.w	r1, r3, r1, lsl #4
 8002e04:	2300      	movs	r3, #0
 8002e06:	f8a1 3404 	strh.w	r3, [r1, #1028]	; 0x404
 8002e0a:	e7bc      	b.n	8002d86 <HAL_PCD_EP_DB_Transmit+0x72>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002e0c:	2a01      	cmp	r2, #1
 8002e0e:	d1d6      	bne.n	8002dbe <HAL_PCD_EP_DB_Transmit+0xaa>
 8002e10:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8002e14:	b292      	uxth	r2, r2
 8002e16:	4413      	add	r3, r2
 8002e18:	7822      	ldrb	r2, [r4, #0]
 8002e1a:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8002e24:	e7cb      	b.n	8002dbe <HAL_PCD_EP_DB_Transmit+0xaa>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002e26:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 8002e2a:	d00d      	beq.n	8002e48 <HAL_PCD_EP_DB_Transmit+0x134>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002e2c:	6828      	ldr	r0, [r5, #0]
 8002e2e:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e3c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e44:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002e48:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d012      	beq.n	8002e76 <HAL_PCD_EP_DB_Transmit+0x162>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002e50:	682a      	ldr	r2, [r5, #0]
 8002e52:	7821      	ldrb	r1, [r4, #0]
 8002e54:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e62:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8002e66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e6e:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
}
 8002e72:	2000      	movs	r0, #0
 8002e74:	bd70      	pop	{r4, r5, r6, pc}
        ep->xfer_buff += TxByteNbre;
 8002e76:	6963      	ldr	r3, [r4, #20]
 8002e78:	4413      	add	r3, r2
 8002e7a:	6163      	str	r3, [r4, #20]
        ep->xfer_count += TxByteNbre;
 8002e7c:	69e3      	ldr	r3, [r4, #28]
 8002e7e:	4413      	add	r3, r2
 8002e80:	61e3      	str	r3, [r4, #28]
        if (ep->xfer_len_db >= ep->maxpacket)
 8002e82:	6a21      	ldr	r1, [r4, #32]
 8002e84:	6923      	ldr	r3, [r4, #16]
 8002e86:	4299      	cmp	r1, r3
 8002e88:	d31f      	bcc.n	8002eca <HAL_PCD_EP_DB_Transmit+0x1b6>
          ep->xfer_len_db -= len;
 8002e8a:	1ac9      	subs	r1, r1, r3
 8002e8c:	6221      	str	r1, [r4, #32]
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002e8e:	7862      	ldrb	r2, [r4, #1]
 8002e90:	2a00      	cmp	r2, #0
 8002e92:	d13f      	bne.n	8002f14 <HAL_PCD_EP_DB_Transmit+0x200>
 8002e94:	682a      	ldr	r2, [r5, #0]
 8002e96:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 8002e9a:	b289      	uxth	r1, r1
 8002e9c:	440a      	add	r2, r1
 8002e9e:	7821      	ldrb	r1, [r4, #0]
 8002ea0:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002ea4:	b9eb      	cbnz	r3, 8002ee2 <HAL_PCD_EP_DB_Transmit+0x1ce>
 8002ea6:	f8b2 1404 	ldrh.w	r1, [r2, #1028]	; 0x404
 8002eaa:	b289      	uxth	r1, r1
 8002eac:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8002eb0:	b289      	uxth	r1, r1
 8002eb2:	f8a2 1404 	strh.w	r1, [r2, #1028]	; 0x404
 8002eb6:	f8b2 1404 	ldrh.w	r1, [r2, #1028]	; 0x404
 8002eba:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8002ebe:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8002ec2:	b289      	uxth	r1, r1
 8002ec4:	f8a2 1404 	strh.w	r1, [r2, #1028]	; 0x404
 8002ec8:	e026      	b.n	8002f18 <HAL_PCD_EP_DB_Transmit+0x204>
        else if (ep->xfer_len_db == 0U)
 8002eca:	b921      	cbnz	r1, 8002ed6 <HAL_PCD_EP_DB_Transmit+0x1c2>
          ep->xfer_fill_db = 0U;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          len = TxByteNbre;
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	e7db      	b.n	8002e8e <HAL_PCD_EP_DB_Transmit+0x17a>
          ep->xfer_fill_db = 0U;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          ep->xfer_len_db = 0U;
 8002edc:	6223      	str	r3, [r4, #32]
          len = ep->xfer_len_db;
 8002ede:	460b      	mov	r3, r1
 8002ee0:	e7d5      	b.n	8002e8e <HAL_PCD_EP_DB_Transmit+0x17a>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002ee2:	2b3e      	cmp	r3, #62	; 0x3e
 8002ee4:	d809      	bhi.n	8002efa <HAL_PCD_EP_DB_Transmit+0x1e6>
 8002ee6:	0859      	lsrs	r1, r3, #1
 8002ee8:	f013 0f01 	tst.w	r3, #1
 8002eec:	d000      	beq.n	8002ef0 <HAL_PCD_EP_DB_Transmit+0x1dc>
 8002eee:	3101      	adds	r1, #1
 8002ef0:	0289      	lsls	r1, r1, #10
 8002ef2:	b289      	uxth	r1, r1
 8002ef4:	f8a2 1404 	strh.w	r1, [r2, #1028]	; 0x404
 8002ef8:	e00e      	b.n	8002f18 <HAL_PCD_EP_DB_Transmit+0x204>
 8002efa:	0959      	lsrs	r1, r3, #5
 8002efc:	f013 0f1f 	tst.w	r3, #31
 8002f00:	d100      	bne.n	8002f04 <HAL_PCD_EP_DB_Transmit+0x1f0>
 8002f02:	3901      	subs	r1, #1
 8002f04:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 8002f08:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8002f0c:	b289      	uxth	r1, r1
 8002f0e:	f8a2 1404 	strh.w	r1, [r2, #1028]	; 0x404
 8002f12:	e001      	b.n	8002f18 <HAL_PCD_EP_DB_Transmit+0x204>
 8002f14:	2a01      	cmp	r2, #1
 8002f16:	d006      	beq.n	8002f26 <HAL_PCD_EP_DB_Transmit+0x212>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	8922      	ldrh	r2, [r4, #8]
 8002f1c:	6961      	ldr	r1, [r4, #20]
 8002f1e:	6828      	ldr	r0, [r5, #0]
 8002f20:	f002 fabd 	bl	800549e <USB_WritePMA>
 8002f24:	e794      	b.n	8002e50 <HAL_PCD_EP_DB_Transmit+0x13c>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002f26:	682a      	ldr	r2, [r5, #0]
 8002f28:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 8002f2c:	b289      	uxth	r1, r1
 8002f2e:	440a      	add	r2, r1
 8002f30:	7821      	ldrb	r1, [r4, #0]
 8002f32:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002f36:	b299      	uxth	r1, r3
 8002f38:	f8a2 1404 	strh.w	r1, [r2, #1028]	; 0x404
 8002f3c:	e7ec      	b.n	8002f18 <HAL_PCD_EP_DB_Transmit+0x204>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002f3e:	6802      	ldr	r2, [r0, #0]
 8002f40:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	7809      	ldrb	r1, [r1, #0]
 8002f48:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8002f4c:	3306      	adds	r3, #6
 8002f4e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8002f52:	f8b3 2400 	ldrh.w	r2, [r3, #1024]	; 0x400
 8002f56:	f3c2 0209 	ubfx	r2, r2, #0, #10
    if (ep->xfer_len >= TxByteNbre)
 8002f5a:	69a3      	ldr	r3, [r4, #24]
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d353      	bcc.n	8003008 <HAL_PCD_EP_DB_Transmit+0x2f4>
      ep->xfer_len -= TxByteNbre;
 8002f60:	1a9b      	subs	r3, r3, r2
 8002f62:	61a3      	str	r3, [r4, #24]
    if (ep->xfer_len == 0U)
 8002f64:	69a3      	ldr	r3, [r4, #24]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d16b      	bne.n	8003042 <HAL_PCD_EP_DB_Transmit+0x32e>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002f6a:	7863      	ldrb	r3, [r4, #1]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d14e      	bne.n	800300e <HAL_PCD_EP_DB_Transmit+0x2fa>
 8002f70:	682b      	ldr	r3, [r5, #0]
 8002f72:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8002f76:	b292      	uxth	r2, r2
 8002f78:	4413      	add	r3, r2
 8002f7a:	eb03 1101 	add.w	r1, r3, r1, lsl #4
 8002f7e:	f8b1 3404 	ldrh.w	r3, [r1, #1028]	; 0x404
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	f8a1 3404 	strh.w	r3, [r1, #1028]	; 0x404
 8002f8e:	f8b1 3404 	ldrh.w	r3, [r1, #1028]	; 0x404
 8002f92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	f8a1 3404 	strh.w	r3, [r1, #1028]	; 0x404
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002fa0:	682b      	ldr	r3, [r5, #0]
 8002fa2:	7862      	ldrb	r2, [r4, #1]
 8002fa4:	2a00      	cmp	r2, #0
 8002fa6:	d13f      	bne.n	8003028 <HAL_PCD_EP_DB_Transmit+0x314>
 8002fa8:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8002fac:	b292      	uxth	r2, r2
 8002fae:	4413      	add	r3, r2
 8002fb0:	7822      	ldrb	r2, [r4, #0]
 8002fb2:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8002fb6:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 8002fba:	b292      	uxth	r2, r2
 8002fbc:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8002fc0:	b292      	uxth	r2, r2
 8002fc2:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8002fc6:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 8002fca:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8002fce:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002fd2:	b292      	uxth	r2, r2
 8002fd4:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002fd8:	7821      	ldrb	r1, [r4, #0]
 8002fda:	4628      	mov	r0, r5
 8002fdc:	f003 fe6a 	bl	8006cb4 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002fe0:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 8002fe4:	f47f af34 	bne.w	8002e50 <HAL_PCD_EP_DB_Transmit+0x13c>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002fe8:	682a      	ldr	r2, [r5, #0]
 8002fea:	7821      	ldrb	r1, [r4, #0]
 8002fec:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ff6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ffa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ffe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003002:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8003006:	e723      	b.n	8002e50 <HAL_PCD_EP_DB_Transmit+0x13c>
      ep->xfer_len = 0U;
 8003008:	2300      	movs	r3, #0
 800300a:	61a3      	str	r3, [r4, #24]
 800300c:	e7aa      	b.n	8002f64 <HAL_PCD_EP_DB_Transmit+0x250>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800300e:	2b01      	cmp	r3, #1
 8003010:	d1c6      	bne.n	8002fa0 <HAL_PCD_EP_DB_Transmit+0x28c>
 8003012:	682b      	ldr	r3, [r5, #0]
 8003014:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8003018:	b292      	uxth	r2, r2
 800301a:	4413      	add	r3, r2
 800301c:	eb03 1101 	add.w	r1, r3, r1, lsl #4
 8003020:	2300      	movs	r3, #0
 8003022:	f8a1 3404 	strh.w	r3, [r1, #1028]	; 0x404
 8003026:	e7bb      	b.n	8002fa0 <HAL_PCD_EP_DB_Transmit+0x28c>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003028:	2a01      	cmp	r2, #1
 800302a:	d1d5      	bne.n	8002fd8 <HAL_PCD_EP_DB_Transmit+0x2c4>
 800302c:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8003030:	b292      	uxth	r2, r2
 8003032:	4413      	add	r3, r2
 8003034:	7822      	ldrb	r2, [r4, #0]
 8003036:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 800303a:	2200      	movs	r2, #0
 800303c:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8003040:	e7ca      	b.n	8002fd8 <HAL_PCD_EP_DB_Transmit+0x2c4>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003042:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 8003046:	d10d      	bne.n	8003064 <HAL_PCD_EP_DB_Transmit+0x350>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003048:	6828      	ldr	r0, [r5, #0]
 800304a:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 800304e:	b29b      	uxth	r3, r3
 8003050:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003054:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003058:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800305c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003060:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8003064:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8003068:	2b01      	cmp	r3, #1
 800306a:	f47f aef1 	bne.w	8002e50 <HAL_PCD_EP_DB_Transmit+0x13c>
        ep->xfer_buff += TxByteNbre;
 800306e:	6963      	ldr	r3, [r4, #20]
 8003070:	4413      	add	r3, r2
 8003072:	6163      	str	r3, [r4, #20]
        ep->xfer_count += TxByteNbre;
 8003074:	69e3      	ldr	r3, [r4, #28]
 8003076:	4413      	add	r3, r2
 8003078:	61e3      	str	r3, [r4, #28]
        if (ep->xfer_len_db >= ep->maxpacket)
 800307a:	6a21      	ldr	r1, [r4, #32]
 800307c:	6923      	ldr	r3, [r4, #16]
 800307e:	4299      	cmp	r1, r3
 8003080:	d31f      	bcc.n	80030c2 <HAL_PCD_EP_DB_Transmit+0x3ae>
          ep->xfer_len_db -= len;
 8003082:	1ac9      	subs	r1, r1, r3
 8003084:	6221      	str	r1, [r4, #32]
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003086:	682a      	ldr	r2, [r5, #0]
 8003088:	7861      	ldrb	r1, [r4, #1]
 800308a:	2900      	cmp	r1, #0
 800308c:	d13e      	bne.n	800310c <HAL_PCD_EP_DB_Transmit+0x3f8>
 800308e:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 8003092:	b289      	uxth	r1, r1
 8003094:	440a      	add	r2, r1
 8003096:	7821      	ldrb	r1, [r4, #0]
 8003098:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800309c:	b9eb      	cbnz	r3, 80030da <HAL_PCD_EP_DB_Transmit+0x3c6>
 800309e:	f8b2 140c 	ldrh.w	r1, [r2, #1036]	; 0x40c
 80030a2:	b289      	uxth	r1, r1
 80030a4:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 80030a8:	b289      	uxth	r1, r1
 80030aa:	f8a2 140c 	strh.w	r1, [r2, #1036]	; 0x40c
 80030ae:	f8b2 140c 	ldrh.w	r1, [r2, #1036]	; 0x40c
 80030b2:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 80030b6:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80030ba:	b289      	uxth	r1, r1
 80030bc:	f8a2 140c 	strh.w	r1, [r2, #1036]	; 0x40c
 80030c0:	e026      	b.n	8003110 <HAL_PCD_EP_DB_Transmit+0x3fc>
        else if (ep->xfer_len_db == 0U)
 80030c2:	b921      	cbnz	r1, 80030ce <HAL_PCD_EP_DB_Transmit+0x3ba>
          ep->xfer_fill_db = 0U;
 80030c4:	2300      	movs	r3, #0
 80030c6:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          len = TxByteNbre;
 80030ca:	4613      	mov	r3, r2
 80030cc:	e7db      	b.n	8003086 <HAL_PCD_EP_DB_Transmit+0x372>
          ep->xfer_len_db = 0U;
 80030ce:	2300      	movs	r3, #0
 80030d0:	6223      	str	r3, [r4, #32]
          ep->xfer_fill_db = 0;
 80030d2:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          len = ep->xfer_len_db;
 80030d6:	460b      	mov	r3, r1
 80030d8:	e7d5      	b.n	8003086 <HAL_PCD_EP_DB_Transmit+0x372>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80030da:	2b3e      	cmp	r3, #62	; 0x3e
 80030dc:	d809      	bhi.n	80030f2 <HAL_PCD_EP_DB_Transmit+0x3de>
 80030de:	0859      	lsrs	r1, r3, #1
 80030e0:	f013 0f01 	tst.w	r3, #1
 80030e4:	d000      	beq.n	80030e8 <HAL_PCD_EP_DB_Transmit+0x3d4>
 80030e6:	3101      	adds	r1, #1
 80030e8:	0289      	lsls	r1, r1, #10
 80030ea:	b289      	uxth	r1, r1
 80030ec:	f8a2 140c 	strh.w	r1, [r2, #1036]	; 0x40c
 80030f0:	e00e      	b.n	8003110 <HAL_PCD_EP_DB_Transmit+0x3fc>
 80030f2:	0959      	lsrs	r1, r3, #5
 80030f4:	f013 0f1f 	tst.w	r3, #31
 80030f8:	d100      	bne.n	80030fc <HAL_PCD_EP_DB_Transmit+0x3e8>
 80030fa:	3901      	subs	r1, #1
 80030fc:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 8003100:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8003104:	b289      	uxth	r1, r1
 8003106:	f8a2 140c 	strh.w	r1, [r2, #1036]	; 0x40c
 800310a:	e001      	b.n	8003110 <HAL_PCD_EP_DB_Transmit+0x3fc>
 800310c:	2901      	cmp	r1, #1
 800310e:	d006      	beq.n	800311e <HAL_PCD_EP_DB_Transmit+0x40a>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003110:	b29b      	uxth	r3, r3
 8003112:	8962      	ldrh	r2, [r4, #10]
 8003114:	6961      	ldr	r1, [r4, #20]
 8003116:	6828      	ldr	r0, [r5, #0]
 8003118:	f002 f9c1 	bl	800549e <USB_WritePMA>
 800311c:	e698      	b.n	8002e50 <HAL_PCD_EP_DB_Transmit+0x13c>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800311e:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 8003122:	b289      	uxth	r1, r1
 8003124:	440a      	add	r2, r1
 8003126:	7821      	ldrb	r1, [r4, #0]
 8003128:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800312c:	b299      	uxth	r1, r3
 800312e:	f8a2 140c 	strh.w	r1, [r2, #1036]	; 0x40c
 8003132:	e7ed      	b.n	8003110 <HAL_PCD_EP_DB_Transmit+0x3fc>

08003134 <PCD_EP_ISR_Handler>:
{
 8003134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003138:	4605      	mov	r5, r0
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800313a:	6828      	ldr	r0, [r5, #0]
 800313c:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8003140:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8003144:	f000 820f 	beq.w	8003566 <PCD_EP_ISR_Handler+0x432>
    wIstr = hpcd->Instance->ISTR;
 8003148:	f8b0 4044 	ldrh.w	r4, [r0, #68]	; 0x44
 800314c:	b2a3      	uxth	r3, r4
    if (epindex == 0U)
 800314e:	f014 040f 	ands.w	r4, r4, #15
 8003152:	f040 80d8 	bne.w	8003306 <PCD_EP_ISR_Handler+0x1d2>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003156:	f013 0f10 	tst.w	r3, #16
 800315a:	d061      	beq.n	8003220 <PCD_EP_ISR_Handler+0xec>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800315c:	8803      	ldrh	r3, [r0, #0]
 800315e:	b29a      	uxth	r2, r3
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003160:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8003164:	f040 8093 	bne.w	800328e <PCD_EP_ISR_Handler+0x15a>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003168:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 800316c:	d0e5      	beq.n	800313a <PCD_EP_ISR_Handler+0x6>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800316e:	8803      	ldrh	r3, [r0, #0]
 8003170:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003174:	051b      	lsls	r3, r3, #20
 8003176:	0d1b      	lsrs	r3, r3, #20
 8003178:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800317c:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800317e:	6828      	ldr	r0, [r5, #0]
 8003180:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003184:	b29b      	uxth	r3, r3
 8003186:	f895 2168 	ldrb.w	r2, [r5, #360]	; 0x168
 800318a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800318e:	3306      	adds	r3, #6
 8003190:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8003194:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8003198:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800319c:	f8c5 3184 	str.w	r3, [r5, #388]	; 0x184
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80031a0:	b18b      	cbz	r3, 80031c6 <PCD_EP_ISR_Handler+0x92>
 80031a2:	f8d5 117c 	ldr.w	r1, [r5, #380]	; 0x17c
 80031a6:	b171      	cbz	r1, 80031c6 <PCD_EP_ISR_Handler+0x92>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80031a8:	f8b5 216e 	ldrh.w	r2, [r5, #366]	; 0x16e
 80031ac:	f002 fde4 	bl	8005d78 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 80031b0:	f8d5 2184 	ldr.w	r2, [r5, #388]	; 0x184
 80031b4:	f8d5 317c 	ldr.w	r3, [r5, #380]	; 0x17c
 80031b8:	4413      	add	r3, r2
 80031ba:	f8c5 317c 	str.w	r3, [r5, #380]	; 0x17c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80031be:	2100      	movs	r1, #0
 80031c0:	4628      	mov	r0, r5
 80031c2:	f003 fd6b 	bl	8006c9c <HAL_PCD_DataOutStageCallback>
          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 80031c6:	682b      	ldr	r3, [r5, #0]
 80031c8:	881a      	ldrh	r2, [r3, #0]
 80031ca:	f412 6f00 	tst.w	r2, #2048	; 0x800
 80031ce:	d1b4      	bne.n	800313a <PCD_EP_ISR_Handler+0x6>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80031d0:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80031d4:	b292      	uxth	r2, r2
 80031d6:	4413      	add	r3, r2
 80031d8:	f8d5 2178 	ldr.w	r2, [r5, #376]	; 0x178
 80031dc:	2a00      	cmp	r2, #0
 80031de:	d179      	bne.n	80032d4 <PCD_EP_ISR_Handler+0x1a0>
 80031e0:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 80031e4:	b292      	uxth	r2, r2
 80031e6:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80031ea:	b292      	uxth	r2, r2
 80031ec:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 80031f0:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 80031f4:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80031f8:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80031fc:	b292      	uxth	r2, r2
 80031fe:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003202:	682a      	ldr	r2, [r5, #0]
 8003204:	8813      	ldrh	r3, [r2, #0]
 8003206:	b29b      	uxth	r3, r3
 8003208:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800320c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003210:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8003214:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003218:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800321c:	8013      	strh	r3, [r2, #0]
 800321e:	e78c      	b.n	800313a <PCD_EP_ISR_Handler+0x6>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003220:	8803      	ldrh	r3, [r0, #0]
 8003222:	b29b      	uxth	r3, r3
 8003224:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003228:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800322c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003230:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003234:	b29b      	uxth	r3, r3
 8003236:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003238:	682a      	ldr	r2, [r5, #0]
 800323a:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 800323e:	b29b      	uxth	r3, r3
 8003240:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 8003244:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8003248:	3302      	adds	r3, #2
 800324a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800324e:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8003252:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003256:	646b      	str	r3, [r5, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8003258:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 800325a:	4413      	add	r3, r2
 800325c:	63eb      	str	r3, [r5, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800325e:	2100      	movs	r1, #0
 8003260:	4628      	mov	r0, r5
 8003262:	f003 fd27 	bl	8006cb4 <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003266:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 800326a:	2b00      	cmp	r3, #0
 800326c:	f43f af65 	beq.w	800313a <PCD_EP_ISR_Handler+0x6>
 8003270:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8003272:	2b00      	cmp	r3, #0
 8003274:	f47f af61 	bne.w	800313a <PCD_EP_ISR_Handler+0x6>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003278:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 800327c:	682a      	ldr	r2, [r5, #0]
 800327e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003282:	f8a2 304c 	strh.w	r3, [r2, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003286:	2300      	movs	r3, #0
 8003288:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 800328c:	e755      	b.n	800313a <PCD_EP_ISR_Handler+0x6>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800328e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003292:	b29b      	uxth	r3, r3
 8003294:	f895 2168 	ldrb.w	r2, [r5, #360]	; 0x168
 8003298:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800329c:	3306      	adds	r3, #6
 800329e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80032a2:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 80032a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032aa:	f8c5 3184 	str.w	r3, [r5, #388]	; 0x184
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80032ae:	f8b5 216e 	ldrh.w	r2, [r5, #366]	; 0x16e
 80032b2:	f505 712c 	add.w	r1, r5, #688	; 0x2b0
 80032b6:	f002 fd5f 	bl	8005d78 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80032ba:	682a      	ldr	r2, [r5, #0]
 80032bc:	8813      	ldrh	r3, [r2, #0]
 80032be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032c2:	051b      	lsls	r3, r3, #20
 80032c4:	0d1b      	lsrs	r3, r3, #20
 80032c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032ca:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 80032cc:	4628      	mov	r0, r5
 80032ce:	f003 fcdd 	bl	8006c8c <HAL_PCD_SetupStageCallback>
 80032d2:	e732      	b.n	800313a <PCD_EP_ISR_Handler+0x6>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80032d4:	2a3e      	cmp	r2, #62	; 0x3e
 80032d6:	d809      	bhi.n	80032ec <PCD_EP_ISR_Handler+0x1b8>
 80032d8:	0851      	lsrs	r1, r2, #1
 80032da:	f012 0f01 	tst.w	r2, #1
 80032de:	d000      	beq.n	80032e2 <PCD_EP_ISR_Handler+0x1ae>
 80032e0:	3101      	adds	r1, #1
 80032e2:	028a      	lsls	r2, r1, #10
 80032e4:	b292      	uxth	r2, r2
 80032e6:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 80032ea:	e78a      	b.n	8003202 <PCD_EP_ISR_Handler+0xce>
 80032ec:	0951      	lsrs	r1, r2, #5
 80032ee:	f012 0f1f 	tst.w	r2, #31
 80032f2:	d100      	bne.n	80032f6 <PCD_EP_ISR_Handler+0x1c2>
 80032f4:	3901      	subs	r1, #1
 80032f6:	ea6f 62c1 	mvn.w	r2, r1, lsl #27
 80032fa:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80032fe:	b292      	uxth	r2, r2
 8003300:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8003304:	e77d      	b.n	8003202 <PCD_EP_ISR_Handler+0xce>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003306:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 800330a:	b29e      	uxth	r6, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800330c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8003310:	d14f      	bne.n	80033b2 <PCD_EP_ISR_Handler+0x27e>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003312:	f016 0f80 	tst.w	r6, #128	; 0x80
 8003316:	f43f af10 	beq.w	800313a <PCD_EP_ISR_Handler+0x6>
        ep = &hpcd->IN_ep[epindex];
 800331a:	1c62      	adds	r2, r4, #1
 800331c:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8003320:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003324:	6828      	ldr	r0, [r5, #0]
 8003326:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 800332a:	b29b      	uxth	r3, r3
 800332c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003330:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003334:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003338:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800333c:	b29b      	uxth	r3, r3
 800333e:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8003342:	78cb      	ldrb	r3, [r1, #3]
 8003344:	2b03      	cmp	r3, #3
 8003346:	d007      	beq.n	8003358 <PCD_EP_ISR_Handler+0x224>
 8003348:	b133      	cbz	r3, 8003358 <PCD_EP_ISR_Handler+0x224>
 800334a:	2b02      	cmp	r3, #2
 800334c:	f040 8106 	bne.w	800355c <PCD_EP_ISR_Handler+0x428>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003350:	f416 7f80 	tst.w	r6, #256	; 0x100
 8003354:	f040 8102 	bne.w	800355c <PCD_EP_ISR_Handler+0x428>
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003358:	6828      	ldr	r0, [r5, #0]
 800335a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800335e:	b29b      	uxth	r3, r3
 8003360:	1c62      	adds	r2, r4, #1
 8003362:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003366:	f815 6032 	ldrb.w	r6, [r5, r2, lsl #3]
 800336a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800336e:	3302      	adds	r3, #2
 8003370:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8003374:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8003378:	f3c3 0309 	ubfx	r3, r3, #0, #10
          if (ep->xfer_len > TxByteNbre)
 800337c:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8003380:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8003384:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003386:	429a      	cmp	r2, r3
 8003388:	f240 80d4 	bls.w	8003534 <PCD_EP_ISR_Handler+0x400>
            ep->xfer_len -= TxByteNbre;
 800338c:	eb04 0784 	add.w	r7, r4, r4, lsl #2
 8003390:	eb05 07c7 	add.w	r7, r5, r7, lsl #3
 8003394:	1ad2      	subs	r2, r2, r3
 8003396:	643a      	str	r2, [r7, #64]	; 0x40
          if (ep->xfer_len == 0U)
 8003398:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 800339c:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 80033a0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80033a2:	2a00      	cmp	r2, #0
 80033a4:	f040 80cd 	bne.w	8003542 <PCD_EP_ISR_Handler+0x40e>
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80033a8:	4631      	mov	r1, r6
 80033aa:	4628      	mov	r0, r5
 80033ac:	f003 fc82 	bl	8006cb4 <HAL_PCD_DataInStageCallback>
 80033b0:	e6c3      	b.n	800313a <PCD_EP_ISR_Handler+0x6>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80033b2:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 80033b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033ba:	051b      	lsls	r3, r3, #20
 80033bc:	0d1b      	lsrs	r3, r3, #20
 80033be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033c2:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
        ep = &hpcd->OUT_ep[epindex];
 80033c6:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 80033ca:	00c9      	lsls	r1, r1, #3
 80033cc:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 80033d0:	eb05 0801 	add.w	r8, r5, r1
        if (ep->doublebuffer == 0U)
 80033d4:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80033d8:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 80033dc:	f893 3174 	ldrb.w	r3, [r3, #372]	; 0x174
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d142      	bne.n	800346a <PCD_EP_ISR_Handler+0x336>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80033e4:	6828      	ldr	r0, [r5, #0]
 80033e6:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80033ea:	b29b      	uxth	r3, r3
 80033ec:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 80033f0:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 80033f4:	f892 2168 	ldrb.w	r2, [r2, #360]	; 0x168
 80033f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80033fc:	3306      	adds	r3, #6
 80033fe:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8003402:	f8b3 7400 	ldrh.w	r7, [r3, #1024]	; 0x400
 8003406:	f3c7 0709 	ubfx	r7, r7, #0, #10
          if (count != 0U)
 800340a:	bb17      	cbnz	r7, 8003452 <PCD_EP_ISR_Handler+0x31e>
        ep->xfer_count += count;
 800340c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8003410:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8003414:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 8003418:	443a      	add	r2, r7
 800341a:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
        ep->xfer_buff += count;
 800341e:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 8003422:	443a      	add	r2, r7
 8003424:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003428:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 800342c:	b13b      	cbz	r3, 800343e <PCD_EP_ISR_Handler+0x30a>
 800342e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8003432:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8003436:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 800343a:	429f      	cmp	r7, r3
 800343c:	d275      	bcs.n	800352a <PCD_EP_ISR_Handler+0x3f6>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800343e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8003442:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8003446:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 800344a:	4628      	mov	r0, r5
 800344c:	f003 fc26 	bl	8006c9c <HAL_PCD_DataOutStageCallback>
 8003450:	e75f      	b.n	8003312 <PCD_EP_ISR_Handler+0x1de>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003452:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8003456:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 800345a:	463b      	mov	r3, r7
 800345c:	f8b1 216e 	ldrh.w	r2, [r1, #366]	; 0x16e
 8003460:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8003464:	f002 fc88 	bl	8005d78 <USB_ReadPMA>
 8003468:	e7d0      	b.n	800340c <PCD_EP_ISR_Handler+0x2d8>
          if (ep->type == EP_TYPE_BULK)
 800346a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800346e:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8003472:	f893 316b 	ldrb.w	r3, [r3, #363]	; 0x16b
 8003476:	2b02      	cmp	r3, #2
 8003478:	d035      	beq.n	80034e6 <PCD_EP_ISR_Handler+0x3b2>
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800347a:	6829      	ldr	r1, [r5, #0]
 800347c:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8003480:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8003484:	f892 0168 	ldrb.w	r0, [r2, #360]	; 0x168
 8003488:	f831 3020 	ldrh.w	r3, [r1, r0, lsl #2]
 800348c:	b29b      	uxth	r3, r3
 800348e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003492:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003496:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800349a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800349e:	f821 3020 	strh.w	r3, [r1, r0, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80034a2:	6828      	ldr	r0, [r5, #0]
 80034a4:	f892 2168 	ldrb.w	r2, [r2, #360]	; 0x168
 80034a8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80034ac:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80034b0:	d020      	beq.n	80034f4 <PCD_EP_ISR_Handler+0x3c0>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80034b2:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80034b6:	b29b      	uxth	r3, r3
 80034b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80034bc:	3302      	adds	r3, #2
 80034be:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80034c2:	f8b3 7400 	ldrh.w	r7, [r3, #1024]	; 0x400
 80034c6:	f3c7 0709 	ubfx	r7, r7, #0, #10
              if (count != 0U)
 80034ca:	2f00      	cmp	r7, #0
 80034cc:	d09e      	beq.n	800340c <PCD_EP_ISR_Handler+0x2d8>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80034ce:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 80034d2:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 80034d6:	463b      	mov	r3, r7
 80034d8:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 80034dc:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 80034e0:	f002 fc4a 	bl	8005d78 <USB_ReadPMA>
 80034e4:	e792      	b.n	800340c <PCD_EP_ISR_Handler+0x2d8>
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80034e6:	4632      	mov	r2, r6
 80034e8:	4641      	mov	r1, r8
 80034ea:	4628      	mov	r0, r5
 80034ec:	f7ff fadf 	bl	8002aae <HAL_PCD_EP_DB_Receive>
 80034f0:	4607      	mov	r7, r0
 80034f2:	e78b      	b.n	800340c <PCD_EP_ISR_Handler+0x2d8>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80034f4:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80034fe:	3306      	adds	r3, #6
 8003500:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8003504:	f8b3 7400 	ldrh.w	r7, [r3, #1024]	; 0x400
 8003508:	f3c7 0709 	ubfx	r7, r7, #0, #10
              if (count != 0U)
 800350c:	2f00      	cmp	r7, #0
 800350e:	f43f af7d 	beq.w	800340c <PCD_EP_ISR_Handler+0x2d8>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003512:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8003516:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 800351a:	463b      	mov	r3, r7
 800351c:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 8003520:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8003524:	f002 fc28 	bl	8005d78 <USB_ReadPMA>
 8003528:	e770      	b.n	800340c <PCD_EP_ISR_Handler+0x2d8>
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800352a:	4641      	mov	r1, r8
 800352c:	6828      	ldr	r0, [r5, #0]
 800352e:	f001 ffca 	bl	80054c6 <USB_EPStartXfer>
 8003532:	e6ee      	b.n	8003312 <PCD_EP_ISR_Handler+0x1de>
            ep->xfer_len = 0U;
 8003534:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8003538:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 800353c:	2700      	movs	r7, #0
 800353e:	6417      	str	r7, [r2, #64]	; 0x40
 8003540:	e72a      	b.n	8003398 <PCD_EP_ISR_Handler+0x264>
            ep->xfer_buff += TxByteNbre;
 8003542:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8003546:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 800354a:	6bd6      	ldr	r6, [r2, #60]	; 0x3c
 800354c:	441e      	add	r6, r3
 800354e:	63d6      	str	r6, [r2, #60]	; 0x3c
            ep->xfer_count += TxByteNbre;
 8003550:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8003552:	4423      	add	r3, r4
 8003554:	6453      	str	r3, [r2, #68]	; 0x44
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003556:	f001 ffb6 	bl	80054c6 <USB_EPStartXfer>
 800355a:	e5ee      	b.n	800313a <PCD_EP_ISR_Handler+0x6>
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800355c:	4632      	mov	r2, r6
 800355e:	4628      	mov	r0, r5
 8003560:	f7ff fbd8 	bl	8002d14 <HAL_PCD_EP_DB_Transmit>
 8003564:	e5e9      	b.n	800313a <PCD_EP_ISR_Handler+0x6>
}
 8003566:	2000      	movs	r0, #0
 8003568:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800356c <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 800356c:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 8003570:	2b01      	cmp	r3, #1
 8003572:	d00d      	beq.n	8003590 <HAL_PCD_SetAddress+0x24>
{
 8003574:	b510      	push	{r4, lr}
 8003576:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8003578:	2301      	movs	r3, #1
 800357a:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800357e:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003582:	6800      	ldr	r0, [r0, #0]
 8003584:	f001 ff7b 	bl	800547e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003588:	2000      	movs	r0, #0
 800358a:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 800358e:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8003590:	2002      	movs	r0, #2
}
 8003592:	4770      	bx	lr

08003594 <HAL_PCD_IRQHandler>:
{
 8003594:	b510      	push	{r4, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800359a:	6800      	ldr	r0, [r0, #0]
 800359c:	f001 ff79 	bl	8005492 <USB_ReadInterrupts>
 80035a0:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 80035a4:	d147      	bne.n	8003636 <HAL_PCD_IRQHandler+0xa2>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80035a6:	6820      	ldr	r0, [r4, #0]
 80035a8:	f001 ff73 	bl	8005492 <USB_ReadInterrupts>
 80035ac:	f410 6f80 	tst.w	r0, #1024	; 0x400
 80035b0:	d145      	bne.n	800363e <HAL_PCD_IRQHandler+0xaa>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80035b2:	6820      	ldr	r0, [r4, #0]
 80035b4:	f001 ff6d 	bl	8005492 <USB_ReadInterrupts>
 80035b8:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 80035bc:	d008      	beq.n	80035d0 <HAL_PCD_IRQHandler+0x3c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80035be:	6822      	ldr	r2, [r4, #0]
 80035c0:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80035d0:	6820      	ldr	r0, [r4, #0]
 80035d2:	f001 ff5e 	bl	8005492 <USB_ReadInterrupts>
 80035d6:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 80035da:	d008      	beq.n	80035ee <HAL_PCD_IRQHandler+0x5a>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80035dc:	6822      	ldr	r2, [r4, #0]
 80035de:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80035ee:	6820      	ldr	r0, [r4, #0]
 80035f0:	f001 ff4f 	bl	8005492 <USB_ReadInterrupts>
 80035f4:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 80035f8:	d132      	bne.n	8003660 <HAL_PCD_IRQHandler+0xcc>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80035fa:	6820      	ldr	r0, [r4, #0]
 80035fc:	f001 ff49 	bl	8005492 <USB_ReadInterrupts>
 8003600:	f410 6f00 	tst.w	r0, #2048	; 0x800
 8003604:	d178      	bne.n	80036f8 <HAL_PCD_IRQHandler+0x164>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8003606:	6820      	ldr	r0, [r4, #0]
 8003608:	f001 ff43 	bl	8005492 <USB_ReadInterrupts>
 800360c:	f410 7f00 	tst.w	r0, #512	; 0x200
 8003610:	f040 809d 	bne.w	800374e <HAL_PCD_IRQHandler+0x1ba>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8003614:	6820      	ldr	r0, [r4, #0]
 8003616:	f001 ff3c 	bl	8005492 <USB_ReadInterrupts>
 800361a:	f410 7f80 	tst.w	r0, #256	; 0x100
 800361e:	d008      	beq.n	8003632 <HAL_PCD_IRQHandler+0x9e>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003620:	6822      	ldr	r2, [r4, #0]
 8003622:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8003626:	b29b      	uxth	r3, r3
 8003628:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800362c:	b29b      	uxth	r3, r3
 800362e:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 8003632:	b004      	add	sp, #16
 8003634:	bd10      	pop	{r4, pc}
    (void)PCD_EP_ISR_Handler(hpcd);
 8003636:	4620      	mov	r0, r4
 8003638:	f7ff fd7c 	bl	8003134 <PCD_EP_ISR_Handler>
 800363c:	e7b3      	b.n	80035a6 <HAL_PCD_IRQHandler+0x12>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800363e:	6822      	ldr	r2, [r4, #0]
 8003640:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8003644:	b29b      	uxth	r3, r3
 8003646:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800364a:	b29b      	uxth	r3, r3
 800364c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8003650:	4620      	mov	r0, r4
 8003652:	f003 fb40 	bl	8006cd6 <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003656:	2100      	movs	r1, #0
 8003658:	4620      	mov	r0, r4
 800365a:	f7ff ff87 	bl	800356c <HAL_PCD_SetAddress>
 800365e:	e7a8      	b.n	80035b2 <HAL_PCD_IRQHandler+0x1e>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8003660:	6822      	ldr	r2, [r4, #0]
 8003662:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8003666:	b29b      	uxth	r3, r3
 8003668:	f023 0304 	bic.w	r3, r3, #4
 800366c:	b29b      	uxth	r3, r3
 800366e:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003672:	6822      	ldr	r2, [r4, #0]
 8003674:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8003678:	b29b      	uxth	r3, r3
 800367a:	f023 0308 	bic.w	r3, r3, #8
 800367e:	b29b      	uxth	r3, r3
 8003680:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8003684:	4620      	mov	r0, r4
 8003686:	f003 fb49 	bl	8006d1c <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800368a:	6822      	ldr	r2, [r4, #0]
 800368c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8003690:	b29b      	uxth	r3, r3
 8003692:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003696:	b29b      	uxth	r3, r3
 8003698:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
 800369c:	e7ad      	b.n	80035fa <HAL_PCD_IRQHandler+0x66>
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800369e:	6822      	ldr	r2, [r4, #0]
 80036a0:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80036a4:	aa04      	add	r2, sp, #16
 80036a6:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 80036aa:	f822 1c10 	strh.w	r1, [r2, #-16]
    for (i = 0U; i < 8U; i++)
 80036ae:	3301      	adds	r3, #1
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	2b07      	cmp	r3, #7
 80036b4:	d9f3      	bls.n	800369e <HAL_PCD_IRQHandler+0x10a>
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80036b6:	6822      	ldr	r2, [r4, #0]
 80036b8:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80036bc:	b29b      	uxth	r3, r3
 80036be:	f043 0301 	orr.w	r3, r3, #1
 80036c2:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80036c6:	6822      	ldr	r2, [r4, #0]
 80036c8:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80036cc:	b29b      	uxth	r3, r3
 80036ce:	f023 0301 	bic.w	r3, r3, #1
 80036d2:	b29b      	uxth	r3, r3
 80036d4:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80036d8:	6823      	ldr	r3, [r4, #0]
 80036da:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 80036de:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80036e2:	d0f9      	beq.n	80036d8 <HAL_PCD_IRQHandler+0x144>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80036e4:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 80036e8:	b292      	uxth	r2, r2
 80036ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036ee:	b292      	uxth	r2, r2
 80036f0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    for (i = 0U; i < 8U; i++)
 80036f4:	2300      	movs	r3, #0
 80036f6:	e00b      	b.n	8003710 <HAL_PCD_IRQHandler+0x17c>
    for (i = 0U; i < 8U; i++)
 80036f8:	2300      	movs	r3, #0
 80036fa:	e7da      	b.n	80036b2 <HAL_PCD_IRQHandler+0x11e>
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80036fc:	6822      	ldr	r2, [r4, #0]
 80036fe:	a904      	add	r1, sp, #16
 8003700:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 8003704:	f831 1c10 	ldrh.w	r1, [r1, #-16]
 8003708:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
    for (i = 0U; i < 8U; i++)
 800370c:	3301      	adds	r3, #1
 800370e:	b2db      	uxtb	r3, r3
 8003710:	2b07      	cmp	r3, #7
 8003712:	d9f3      	bls.n	80036fc <HAL_PCD_IRQHandler+0x168>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003714:	6822      	ldr	r2, [r4, #0]
 8003716:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 800371a:	b29b      	uxth	r3, r3
 800371c:	f043 0308 	orr.w	r3, r3, #8
 8003720:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003724:	6822      	ldr	r2, [r4, #0]
 8003726:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800372a:	b29b      	uxth	r3, r3
 800372c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003730:	b29b      	uxth	r3, r3
 8003732:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8003736:	6822      	ldr	r2, [r4, #0]
 8003738:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 800373c:	b29b      	uxth	r3, r3
 800373e:	f043 0304 	orr.w	r3, r3, #4
 8003742:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 8003746:	4620      	mov	r0, r4
 8003748:	f003 fad8 	bl	8006cfc <HAL_PCD_SuspendCallback>
 800374c:	e75b      	b.n	8003606 <HAL_PCD_IRQHandler+0x72>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800374e:	6822      	ldr	r2, [r4, #0]
 8003750:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8003754:	b29b      	uxth	r3, r3
 8003756:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800375a:	b29b      	uxth	r3, r3
 800375c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8003760:	4620      	mov	r0, r4
 8003762:	f003 fab2 	bl	8006cca <HAL_PCD_SOFCallback>
 8003766:	e755      	b.n	8003614 <HAL_PCD_IRQHandler+0x80>

08003768 <HAL_PCD_EP_Open>:
{
 8003768:	b510      	push	{r4, lr}
 800376a:	4604      	mov	r4, r0
 800376c:	468c      	mov	ip, r1
  if ((ep_addr & 0x80U) == 0x80U)
 800376e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003772:	d12a      	bne.n	80037ca <HAL_PCD_EP_Open+0x62>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003774:	f001 0007 	and.w	r0, r1, #7
 8003778:	eb00 0180 	add.w	r1, r0, r0, lsl #2
 800377c:	00c9      	lsls	r1, r1, #3
 800377e:	f501 7eb4 	add.w	lr, r1, #360	; 0x168
 8003782:	eb04 010e 	add.w	r1, r4, lr
    ep->is_in = 0U;
 8003786:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800378a:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 800378e:	f04f 0e00 	mov.w	lr, #0
 8003792:	f880 e169 	strb.w	lr, [r0, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 8003796:	f00c 0c07 	and.w	ip, ip, #7
 800379a:	f881 c000 	strb.w	ip, [r1]
  ep->maxpacket = ep_mps;
 800379e:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;
 80037a0:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 80037a2:	784a      	ldrb	r2, [r1, #1]
 80037a4:	b10a      	cbz	r2, 80037aa <HAL_PCD_EP_Open+0x42>
    ep->tx_fifo_num = ep->num;
 80037a6:	f8a1 c00e 	strh.w	ip, [r1, #14]
  if (ep_type == EP_TYPE_BULK)
 80037aa:	2b02      	cmp	r3, #2
 80037ac:	d019      	beq.n	80037e2 <HAL_PCD_EP_Open+0x7a>
  __HAL_LOCK(hpcd);
 80037ae:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d018      	beq.n	80037e8 <HAL_PCD_EP_Open+0x80>
 80037b6:	2301      	movs	r3, #1
 80037b8:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80037bc:	6820      	ldr	r0, [r4, #0]
 80037be:	f001 fb41 	bl	8004e44 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80037c2:	2000      	movs	r0, #0
 80037c4:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 80037c8:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037ca:	f001 0007 	and.w	r0, r1, #7
 80037ce:	3001      	adds	r0, #1
 80037d0:	eb00 0180 	add.w	r1, r0, r0, lsl #2
 80037d4:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
    ep->is_in = 1U;
 80037d8:	f04f 0e01 	mov.w	lr, #1
 80037dc:	f881 e001 	strb.w	lr, [r1, #1]
 80037e0:	e7d9      	b.n	8003796 <HAL_PCD_EP_Open+0x2e>
    ep->data_pid_start = 0U;
 80037e2:	2300      	movs	r3, #0
 80037e4:	710b      	strb	r3, [r1, #4]
 80037e6:	e7e2      	b.n	80037ae <HAL_PCD_EP_Open+0x46>
  __HAL_LOCK(hpcd);
 80037e8:	2002      	movs	r0, #2
 80037ea:	e7ed      	b.n	80037c8 <HAL_PCD_EP_Open+0x60>

080037ec <HAL_PCD_EP_Close>:
{
 80037ec:	b510      	push	{r4, lr}
 80037ee:	4604      	mov	r4, r0
 80037f0:	460b      	mov	r3, r1
  if ((ep_addr & 0x80U) == 0x80U)
 80037f2:	f011 0f80 	tst.w	r1, #128	; 0x80
 80037f6:	d11f      	bne.n	8003838 <HAL_PCD_EP_Close+0x4c>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037f8:	f001 0207 	and.w	r2, r1, #7
 80037fc:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8003800:	00c9      	lsls	r1, r1, #3
 8003802:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 8003806:	4401      	add	r1, r0
    ep->is_in = 0U;
 8003808:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800380c:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8003810:	2000      	movs	r0, #0
 8003812:	f882 0169 	strb.w	r0, [r2, #361]	; 0x169
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003816:	f003 0307 	and.w	r3, r3, #7
 800381a:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 800381c:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8003820:	2b01      	cmp	r3, #1
 8003822:	d013      	beq.n	800384c <HAL_PCD_EP_Close+0x60>
 8003824:	2301      	movs	r3, #1
 8003826:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800382a:	6820      	ldr	r0, [r4, #0]
 800382c:	f001 fcc6 	bl	80051bc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003830:	2000      	movs	r0, #0
 8003832:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8003836:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003838:	f001 0207 	and.w	r2, r1, #7
 800383c:	3201      	adds	r2, #1
 800383e:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8003842:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 8003846:	2001      	movs	r0, #1
 8003848:	7048      	strb	r0, [r1, #1]
 800384a:	e7e4      	b.n	8003816 <HAL_PCD_EP_Close+0x2a>
  __HAL_LOCK(hpcd);
 800384c:	2002      	movs	r0, #2
 800384e:	e7f2      	b.n	8003836 <HAL_PCD_EP_Close+0x4a>

08003850 <HAL_PCD_EP_Receive>:
{
 8003850:	b510      	push	{r4, lr}
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003852:	f001 0407 	and.w	r4, r1, #7
 8003856:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 800385a:	00c9      	lsls	r1, r1, #3
 800385c:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 8003860:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;
 8003862:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
 8003866:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
 800386a:	f8cc 217c 	str.w	r2, [ip, #380]	; 0x17c
  ep->xfer_len = len;
 800386e:	f8cc 3180 	str.w	r3, [ip, #384]	; 0x180
  ep->xfer_count = 0U;
 8003872:	2300      	movs	r3, #0
 8003874:	f8cc 3184 	str.w	r3, [ip, #388]	; 0x184
  ep->is_in = 0U;
 8003878:	f88c 3169 	strb.w	r3, [ip, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 800387c:	f88c 4168 	strb.w	r4, [ip, #360]	; 0x168
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003880:	b924      	cbnz	r4, 800388c <HAL_PCD_EP_Receive+0x3c>
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003882:	6800      	ldr	r0, [r0, #0]
 8003884:	f001 fe1f 	bl	80054c6 <USB_EPStartXfer>
}
 8003888:	2000      	movs	r0, #0
 800388a:	bd10      	pop	{r4, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800388c:	6800      	ldr	r0, [r0, #0]
 800388e:	f001 fe1a 	bl	80054c6 <USB_EPStartXfer>
 8003892:	e7f9      	b.n	8003888 <HAL_PCD_EP_Receive+0x38>

08003894 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003894:	f001 0107 	and.w	r1, r1, #7
 8003898:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800389c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
}
 80038a0:	f8d1 0184 	ldr.w	r0, [r1, #388]	; 0x184
 80038a4:	4770      	bx	lr

080038a6 <HAL_PCD_EP_Transmit>:
{
 80038a6:	b510      	push	{r4, lr}
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038a8:	f001 0407 	and.w	r4, r1, #7
 80038ac:	f104 0c01 	add.w	ip, r4, #1
 80038b0:	eb0c 018c 	add.w	r1, ip, ip, lsl #2
 80038b4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
  ep->xfer_buff = pBuf;
 80038b8:	eb04 0e84 	add.w	lr, r4, r4, lsl #2
 80038bc:	eb00 0ece 	add.w	lr, r0, lr, lsl #3
 80038c0:	f8ce 203c 	str.w	r2, [lr, #60]	; 0x3c
  ep->xfer_len = len;
 80038c4:	f8ce 3040 	str.w	r3, [lr, #64]	; 0x40
  ep->xfer_fill_db = 1U;
 80038c8:	2201      	movs	r2, #1
 80038ca:	f88e 204c 	strb.w	r2, [lr, #76]	; 0x4c
  ep->xfer_len_db = len;
 80038ce:	f8ce 3048 	str.w	r3, [lr, #72]	; 0x48
  ep->xfer_count = 0U;
 80038d2:	2300      	movs	r3, #0
 80038d4:	f8ce 3044 	str.w	r3, [lr, #68]	; 0x44
  ep->is_in = 1U;
 80038d8:	704a      	strb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80038da:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 80038de:	f800 403c 	strb.w	r4, [r0, ip, lsl #3]
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80038e2:	b924      	cbnz	r4, 80038ee <HAL_PCD_EP_Transmit+0x48>
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80038e4:	6800      	ldr	r0, [r0, #0]
 80038e6:	f001 fdee 	bl	80054c6 <USB_EPStartXfer>
}
 80038ea:	2000      	movs	r0, #0
 80038ec:	bd10      	pop	{r4, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80038ee:	6800      	ldr	r0, [r0, #0]
 80038f0:	f001 fde9 	bl	80054c6 <USB_EPStartXfer>
 80038f4:	e7f9      	b.n	80038ea <HAL_PCD_EP_Transmit+0x44>

080038f6 <HAL_PCD_EP_SetStall>:
{
 80038f6:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80038f8:	f001 0507 	and.w	r5, r1, #7
 80038fc:	6842      	ldr	r2, [r0, #4]
 80038fe:	4295      	cmp	r5, r2
 8003900:	d831      	bhi.n	8003966 <HAL_PCD_EP_SetStall+0x70>
 8003902:	4604      	mov	r4, r0
 8003904:	460b      	mov	r3, r1
  if ((0x80U & ep_addr) == 0x80U)
 8003906:	f011 0f80 	tst.w	r1, #128	; 0x80
 800390a:	d11e      	bne.n	800394a <HAL_PCD_EP_SetStall+0x54>
    ep = &hpcd->OUT_ep[ep_addr];
 800390c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8003910:	00c9      	lsls	r1, r1, #3
 8003912:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 8003916:	4401      	add	r1, r0
    ep->is_in = 0U;
 8003918:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800391c:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8003920:	2200      	movs	r2, #0
 8003922:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169
  ep->is_stall = 1U;
 8003926:	2301      	movs	r3, #1
 8003928:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800392a:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 800392c:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8003930:	2b01      	cmp	r3, #1
 8003932:	d01a      	beq.n	800396a <HAL_PCD_EP_SetStall+0x74>
 8003934:	2301      	movs	r3, #1
 8003936:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800393a:	6820      	ldr	r0, [r4, #0]
 800393c:	f001 fd29 	bl	8005392 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003940:	b15d      	cbz	r5, 800395a <HAL_PCD_EP_SetStall+0x64>
  __HAL_UNLOCK(hpcd);
 8003942:	2000      	movs	r0, #0
 8003944:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8003948:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800394a:	1c6b      	adds	r3, r5, #1
 800394c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8003950:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 8003954:	2201      	movs	r2, #1
 8003956:	704a      	strb	r2, [r1, #1]
 8003958:	e7e5      	b.n	8003926 <HAL_PCD_EP_SetStall+0x30>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800395a:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 800395e:	6820      	ldr	r0, [r4, #0]
 8003960:	f001 fd9b 	bl	800549a <USB_EP0_OutStart>
 8003964:	e7ed      	b.n	8003942 <HAL_PCD_EP_SetStall+0x4c>
    return HAL_ERROR;
 8003966:	2001      	movs	r0, #1
 8003968:	e7ee      	b.n	8003948 <HAL_PCD_EP_SetStall+0x52>
  __HAL_LOCK(hpcd);
 800396a:	2002      	movs	r0, #2
 800396c:	e7ec      	b.n	8003948 <HAL_PCD_EP_SetStall+0x52>

0800396e <HAL_PCD_EP_ClrStall>:
{
 800396e:	460b      	mov	r3, r1
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003970:	f001 010f 	and.w	r1, r1, #15
 8003974:	6842      	ldr	r2, [r0, #4]
 8003976:	4291      	cmp	r1, r2
 8003978:	d830      	bhi.n	80039dc <HAL_PCD_EP_ClrStall+0x6e>
{
 800397a:	b510      	push	{r4, lr}
 800397c:	4604      	mov	r4, r0
  if ((0x80U & ep_addr) == 0x80U)
 800397e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003982:	d121      	bne.n	80039c8 <HAL_PCD_EP_ClrStall+0x5a>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003984:	f003 0207 	and.w	r2, r3, #7
 8003988:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 800398c:	00c9      	lsls	r1, r1, #3
 800398e:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 8003992:	4401      	add	r1, r0
    ep->is_in = 0U;
 8003994:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003998:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 800399c:	2000      	movs	r0, #0
 800399e:	f882 0169 	strb.w	r0, [r2, #361]	; 0x169
  ep->is_stall = 0U;
 80039a2:	2200      	movs	r2, #0
 80039a4:	708a      	strb	r2, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80039a6:	f003 0307 	and.w	r3, r3, #7
 80039aa:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 80039ac:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d015      	beq.n	80039e0 <HAL_PCD_EP_ClrStall+0x72>
 80039b4:	2301      	movs	r3, #1
 80039b6:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80039ba:	6820      	ldr	r0, [r4, #0]
 80039bc:	f001 fd0e 	bl	80053dc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80039c0:	2000      	movs	r0, #0
 80039c2:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 80039c6:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039c8:	f003 0207 	and.w	r2, r3, #7
 80039cc:	3201      	adds	r2, #1
 80039ce:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 80039d2:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 80039d6:	2001      	movs	r0, #1
 80039d8:	7048      	strb	r0, [r1, #1]
 80039da:	e7e2      	b.n	80039a2 <HAL_PCD_EP_ClrStall+0x34>
    return HAL_ERROR;
 80039dc:	2001      	movs	r0, #1
}
 80039de:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 80039e0:	2002      	movs	r0, #2
 80039e2:	e7f0      	b.n	80039c6 <HAL_PCD_EP_ClrStall+0x58>

080039e4 <HAL_PCDEx_PMAConfig>:
                                       uint16_t ep_kind, uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80039e4:	f011 0f80 	tst.w	r1, #128	; 0x80
 80039e8:	d00b      	beq.n	8003a02 <HAL_PCDEx_PMAConfig+0x1e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039ea:	f001 0107 	and.w	r1, r1, #7
 80039ee:	3101      	adds	r1, #1
 80039f0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80039f4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80039f8:	b952      	cbnz	r2, 8003a10 <HAL_PCDEx_PMAConfig+0x2c>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80039fa:	730a      	strb	r2, [r1, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80039fc:	80cb      	strh	r3, [r1, #6]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }

  return HAL_OK;
}
 80039fe:	2000      	movs	r0, #0
 8003a00:	4770      	bx	lr
    ep = &hpcd->OUT_ep[ep_addr];
 8003a02:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8003a06:	00c9      	lsls	r1, r1, #3
 8003a08:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 8003a0c:	4401      	add	r1, r0
 8003a0e:	e7f3      	b.n	80039f8 <HAL_PCDEx_PMAConfig+0x14>
    ep->doublebuffer = 1U;
 8003a10:	2201      	movs	r2, #1
 8003a12:	730a      	strb	r2, [r1, #12]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003a14:	810b      	strh	r3, [r1, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003a16:	0c1b      	lsrs	r3, r3, #16
 8003a18:	814b      	strh	r3, [r1, #10]
 8003a1a:	e7f0      	b.n	80039fe <HAL_PCDEx_PMAConfig+0x1a>

08003a1c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003a1c:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003a1e:	4b08      	ldr	r3, [pc, #32]	; (8003a40 <RCC_Delay+0x24>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a08      	ldr	r2, [pc, #32]	; (8003a44 <RCC_Delay+0x28>)
 8003a24:	fba2 2303 	umull	r2, r3, r2, r3
 8003a28:	0a5b      	lsrs	r3, r3, #9
 8003a2a:	fb00 f303 	mul.w	r3, r0, r3
 8003a2e:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8003a30:	bf00      	nop
  }
  while (Delay --);
 8003a32:	9b01      	ldr	r3, [sp, #4]
 8003a34:	1e5a      	subs	r2, r3, #1
 8003a36:	9201      	str	r2, [sp, #4]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d1f9      	bne.n	8003a30 <RCC_Delay+0x14>
}
 8003a3c:	b002      	add	sp, #8
 8003a3e:	4770      	bx	lr
 8003a40:	2000000c 	.word	0x2000000c
 8003a44:	10624dd3 	.word	0x10624dd3

08003a48 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8003a48:	2800      	cmp	r0, #0
 8003a4a:	f000 81f1 	beq.w	8003e30 <HAL_RCC_OscConfig+0x3e8>
{
 8003a4e:	b570      	push	{r4, r5, r6, lr}
 8003a50:	b082      	sub	sp, #8
 8003a52:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a54:	6803      	ldr	r3, [r0, #0]
 8003a56:	f013 0f01 	tst.w	r3, #1
 8003a5a:	d02c      	beq.n	8003ab6 <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a5c:	4b99      	ldr	r3, [pc, #612]	; (8003cc4 <HAL_RCC_OscConfig+0x27c>)
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	f003 030c 	and.w	r3, r3, #12
 8003a64:	2b04      	cmp	r3, #4
 8003a66:	d01d      	beq.n	8003aa4 <HAL_RCC_OscConfig+0x5c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003a68:	4b96      	ldr	r3, [pc, #600]	; (8003cc4 <HAL_RCC_OscConfig+0x27c>)
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	f003 030c 	and.w	r3, r3, #12
 8003a70:	2b08      	cmp	r3, #8
 8003a72:	d012      	beq.n	8003a9a <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a74:	6863      	ldr	r3, [r4, #4]
 8003a76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a7a:	d041      	beq.n	8003b00 <HAL_RCC_OscConfig+0xb8>
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d155      	bne.n	8003b2c <HAL_RCC_OscConfig+0xe4>
 8003a80:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003a84:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003a8e:	601a      	str	r2, [r3, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003a96:	601a      	str	r2, [r3, #0]
 8003a98:	e037      	b.n	8003b0a <HAL_RCC_OscConfig+0xc2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003a9a:	4b8a      	ldr	r3, [pc, #552]	; (8003cc4 <HAL_RCC_OscConfig+0x27c>)
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003aa2:	d0e7      	beq.n	8003a74 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003aa4:	4b87      	ldr	r3, [pc, #540]	; (8003cc4 <HAL_RCC_OscConfig+0x27c>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003aac:	d003      	beq.n	8003ab6 <HAL_RCC_OscConfig+0x6e>
 8003aae:	6863      	ldr	r3, [r4, #4]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	f000 81bf 	beq.w	8003e34 <HAL_RCC_OscConfig+0x3ec>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ab6:	6823      	ldr	r3, [r4, #0]
 8003ab8:	f013 0f02 	tst.w	r3, #2
 8003abc:	d075      	beq.n	8003baa <HAL_RCC_OscConfig+0x162>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003abe:	4b81      	ldr	r3, [pc, #516]	; (8003cc4 <HAL_RCC_OscConfig+0x27c>)
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	f013 0f0c 	tst.w	r3, #12
 8003ac6:	d05f      	beq.n	8003b88 <HAL_RCC_OscConfig+0x140>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003ac8:	4b7e      	ldr	r3, [pc, #504]	; (8003cc4 <HAL_RCC_OscConfig+0x27c>)
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	f003 030c 	and.w	r3, r3, #12
 8003ad0:	2b08      	cmp	r3, #8
 8003ad2:	d054      	beq.n	8003b7e <HAL_RCC_OscConfig+0x136>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ad4:	6923      	ldr	r3, [r4, #16]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	f000 808a 	beq.w	8003bf0 <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_HSI_ENABLE();
 8003adc:	4b7a      	ldr	r3, [pc, #488]	; (8003cc8 <HAL_RCC_OscConfig+0x280>)
 8003ade:	2201      	movs	r2, #1
 8003ae0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003ae2:	f7fe fc37 	bl	8002354 <HAL_GetTick>
 8003ae6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ae8:	4b76      	ldr	r3, [pc, #472]	; (8003cc4 <HAL_RCC_OscConfig+0x27c>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f013 0f02 	tst.w	r3, #2
 8003af0:	d175      	bne.n	8003bde <HAL_RCC_OscConfig+0x196>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003af2:	f7fe fc2f 	bl	8002354 <HAL_GetTick>
 8003af6:	1b40      	subs	r0, r0, r5
 8003af8:	2802      	cmp	r0, #2
 8003afa:	d9f5      	bls.n	8003ae8 <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
 8003afc:	2003      	movs	r0, #3
 8003afe:	e19e      	b.n	8003e3e <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b00:	4a70      	ldr	r2, [pc, #448]	; (8003cc4 <HAL_RCC_OscConfig+0x27c>)
 8003b02:	6813      	ldr	r3, [r2, #0]
 8003b04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b08:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b0a:	6863      	ldr	r3, [r4, #4]
 8003b0c:	b343      	cbz	r3, 8003b60 <HAL_RCC_OscConfig+0x118>
        tickstart = HAL_GetTick();
 8003b0e:	f7fe fc21 	bl	8002354 <HAL_GetTick>
 8003b12:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b14:	4b6b      	ldr	r3, [pc, #428]	; (8003cc4 <HAL_RCC_OscConfig+0x27c>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003b1c:	d1cb      	bne.n	8003ab6 <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b1e:	f7fe fc19 	bl	8002354 <HAL_GetTick>
 8003b22:	1b40      	subs	r0, r0, r5
 8003b24:	2864      	cmp	r0, #100	; 0x64
 8003b26:	d9f5      	bls.n	8003b14 <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 8003b28:	2003      	movs	r0, #3
 8003b2a:	e188      	b.n	8003e3e <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b30:	d009      	beq.n	8003b46 <HAL_RCC_OscConfig+0xfe>
 8003b32:	4b64      	ldr	r3, [pc, #400]	; (8003cc4 <HAL_RCC_OscConfig+0x27c>)
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003b3a:	601a      	str	r2, [r3, #0]
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003b42:	601a      	str	r2, [r3, #0]
 8003b44:	e7e1      	b.n	8003b0a <HAL_RCC_OscConfig+0xc2>
 8003b46:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003b4a:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003b54:	601a      	str	r2, [r3, #0]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003b5c:	601a      	str	r2, [r3, #0]
 8003b5e:	e7d4      	b.n	8003b0a <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 8003b60:	f7fe fbf8 	bl	8002354 <HAL_GetTick>
 8003b64:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b66:	4b57      	ldr	r3, [pc, #348]	; (8003cc4 <HAL_RCC_OscConfig+0x27c>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003b6e:	d0a2      	beq.n	8003ab6 <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b70:	f7fe fbf0 	bl	8002354 <HAL_GetTick>
 8003b74:	1b40      	subs	r0, r0, r5
 8003b76:	2864      	cmp	r0, #100	; 0x64
 8003b78:	d9f5      	bls.n	8003b66 <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 8003b7a:	2003      	movs	r0, #3
 8003b7c:	e15f      	b.n	8003e3e <HAL_RCC_OscConfig+0x3f6>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003b7e:	4b51      	ldr	r3, [pc, #324]	; (8003cc4 <HAL_RCC_OscConfig+0x27c>)
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003b86:	d1a5      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b88:	4b4e      	ldr	r3, [pc, #312]	; (8003cc4 <HAL_RCC_OscConfig+0x27c>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f013 0f02 	tst.w	r3, #2
 8003b90:	d003      	beq.n	8003b9a <HAL_RCC_OscConfig+0x152>
 8003b92:	6923      	ldr	r3, [r4, #16]
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	f040 814f 	bne.w	8003e38 <HAL_RCC_OscConfig+0x3f0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b9a:	4a4a      	ldr	r2, [pc, #296]	; (8003cc4 <HAL_RCC_OscConfig+0x27c>)
 8003b9c:	6813      	ldr	r3, [r2, #0]
 8003b9e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003ba2:	6961      	ldr	r1, [r4, #20]
 8003ba4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003ba8:	6013      	str	r3, [r2, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003baa:	6823      	ldr	r3, [r4, #0]
 8003bac:	f013 0f08 	tst.w	r3, #8
 8003bb0:	d033      	beq.n	8003c1a <HAL_RCC_OscConfig+0x1d2>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003bb2:	69a3      	ldr	r3, [r4, #24]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d05c      	beq.n	8003c72 <HAL_RCC_OscConfig+0x22a>
      __HAL_RCC_LSI_ENABLE();
 8003bb8:	4b43      	ldr	r3, [pc, #268]	; (8003cc8 <HAL_RCC_OscConfig+0x280>)
 8003bba:	2201      	movs	r2, #1
 8003bbc:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8003bc0:	f7fe fbc8 	bl	8002354 <HAL_GetTick>
 8003bc4:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bc6:	4b3f      	ldr	r3, [pc, #252]	; (8003cc4 <HAL_RCC_OscConfig+0x27c>)
 8003bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bca:	f013 0f02 	tst.w	r3, #2
 8003bce:	d121      	bne.n	8003c14 <HAL_RCC_OscConfig+0x1cc>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bd0:	f7fe fbc0 	bl	8002354 <HAL_GetTick>
 8003bd4:	1b40      	subs	r0, r0, r5
 8003bd6:	2802      	cmp	r0, #2
 8003bd8:	d9f5      	bls.n	8003bc6 <HAL_RCC_OscConfig+0x17e>
          return HAL_TIMEOUT;
 8003bda:	2003      	movs	r0, #3
 8003bdc:	e12f      	b.n	8003e3e <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bde:	4a39      	ldr	r2, [pc, #228]	; (8003cc4 <HAL_RCC_OscConfig+0x27c>)
 8003be0:	6813      	ldr	r3, [r2, #0]
 8003be2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003be6:	6961      	ldr	r1, [r4, #20]
 8003be8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003bec:	6013      	str	r3, [r2, #0]
 8003bee:	e7dc      	b.n	8003baa <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 8003bf0:	4b35      	ldr	r3, [pc, #212]	; (8003cc8 <HAL_RCC_OscConfig+0x280>)
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003bf6:	f7fe fbad 	bl	8002354 <HAL_GetTick>
 8003bfa:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bfc:	4b31      	ldr	r3, [pc, #196]	; (8003cc4 <HAL_RCC_OscConfig+0x27c>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f013 0f02 	tst.w	r3, #2
 8003c04:	d0d1      	beq.n	8003baa <HAL_RCC_OscConfig+0x162>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c06:	f7fe fba5 	bl	8002354 <HAL_GetTick>
 8003c0a:	1b40      	subs	r0, r0, r5
 8003c0c:	2802      	cmp	r0, #2
 8003c0e:	d9f5      	bls.n	8003bfc <HAL_RCC_OscConfig+0x1b4>
            return HAL_TIMEOUT;
 8003c10:	2003      	movs	r0, #3
 8003c12:	e114      	b.n	8003e3e <HAL_RCC_OscConfig+0x3f6>
      RCC_Delay(1);
 8003c14:	2001      	movs	r0, #1
 8003c16:	f7ff ff01 	bl	8003a1c <RCC_Delay>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c1a:	6823      	ldr	r3, [r4, #0]
 8003c1c:	f013 0f04 	tst.w	r3, #4
 8003c20:	f000 8096 	beq.w	8003d50 <HAL_RCC_OscConfig+0x308>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c24:	4b27      	ldr	r3, [pc, #156]	; (8003cc4 <HAL_RCC_OscConfig+0x27c>)
 8003c26:	69db      	ldr	r3, [r3, #28]
 8003c28:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003c2c:	d134      	bne.n	8003c98 <HAL_RCC_OscConfig+0x250>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c2e:	4b25      	ldr	r3, [pc, #148]	; (8003cc4 <HAL_RCC_OscConfig+0x27c>)
 8003c30:	69da      	ldr	r2, [r3, #28]
 8003c32:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003c36:	61da      	str	r2, [r3, #28]
 8003c38:	69db      	ldr	r3, [r3, #28]
 8003c3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c3e:	9301      	str	r3, [sp, #4]
 8003c40:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003c42:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c44:	4b21      	ldr	r3, [pc, #132]	; (8003ccc <HAL_RCC_OscConfig+0x284>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003c4c:	d026      	beq.n	8003c9c <HAL_RCC_OscConfig+0x254>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c4e:	68e3      	ldr	r3, [r4, #12]
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d03d      	beq.n	8003cd0 <HAL_RCC_OscConfig+0x288>
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d153      	bne.n	8003d00 <HAL_RCC_OscConfig+0x2b8>
 8003c58:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003c5c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8003c60:	6a1a      	ldr	r2, [r3, #32]
 8003c62:	f022 0201 	bic.w	r2, r2, #1
 8003c66:	621a      	str	r2, [r3, #32]
 8003c68:	6a1a      	ldr	r2, [r3, #32]
 8003c6a:	f022 0204 	bic.w	r2, r2, #4
 8003c6e:	621a      	str	r2, [r3, #32]
 8003c70:	e033      	b.n	8003cda <HAL_RCC_OscConfig+0x292>
      __HAL_RCC_LSI_DISABLE();
 8003c72:	4b15      	ldr	r3, [pc, #84]	; (8003cc8 <HAL_RCC_OscConfig+0x280>)
 8003c74:	2200      	movs	r2, #0
 8003c76:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8003c7a:	f7fe fb6b 	bl	8002354 <HAL_GetTick>
 8003c7e:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c80:	4b10      	ldr	r3, [pc, #64]	; (8003cc4 <HAL_RCC_OscConfig+0x27c>)
 8003c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c84:	f013 0f02 	tst.w	r3, #2
 8003c88:	d0c7      	beq.n	8003c1a <HAL_RCC_OscConfig+0x1d2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c8a:	f7fe fb63 	bl	8002354 <HAL_GetTick>
 8003c8e:	1b40      	subs	r0, r0, r5
 8003c90:	2802      	cmp	r0, #2
 8003c92:	d9f5      	bls.n	8003c80 <HAL_RCC_OscConfig+0x238>
          return HAL_TIMEOUT;
 8003c94:	2003      	movs	r0, #3
 8003c96:	e0d2      	b.n	8003e3e <HAL_RCC_OscConfig+0x3f6>
    FlagStatus       pwrclkchanged = RESET;
 8003c98:	2500      	movs	r5, #0
 8003c9a:	e7d3      	b.n	8003c44 <HAL_RCC_OscConfig+0x1fc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c9c:	4a0b      	ldr	r2, [pc, #44]	; (8003ccc <HAL_RCC_OscConfig+0x284>)
 8003c9e:	6813      	ldr	r3, [r2, #0]
 8003ca0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ca4:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8003ca6:	f7fe fb55 	bl	8002354 <HAL_GetTick>
 8003caa:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cac:	4b07      	ldr	r3, [pc, #28]	; (8003ccc <HAL_RCC_OscConfig+0x284>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003cb4:	d1cb      	bne.n	8003c4e <HAL_RCC_OscConfig+0x206>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cb6:	f7fe fb4d 	bl	8002354 <HAL_GetTick>
 8003cba:	1b80      	subs	r0, r0, r6
 8003cbc:	2864      	cmp	r0, #100	; 0x64
 8003cbe:	d9f5      	bls.n	8003cac <HAL_RCC_OscConfig+0x264>
          return HAL_TIMEOUT;
 8003cc0:	2003      	movs	r0, #3
 8003cc2:	e0bc      	b.n	8003e3e <HAL_RCC_OscConfig+0x3f6>
 8003cc4:	40021000 	.word	0x40021000
 8003cc8:	42420000 	.word	0x42420000
 8003ccc:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cd0:	4a5f      	ldr	r2, [pc, #380]	; (8003e50 <HAL_RCC_OscConfig+0x408>)
 8003cd2:	6a13      	ldr	r3, [r2, #32]
 8003cd4:	f043 0301 	orr.w	r3, r3, #1
 8003cd8:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003cda:	68e3      	ldr	r3, [r4, #12]
 8003cdc:	b333      	cbz	r3, 8003d2c <HAL_RCC_OscConfig+0x2e4>
      tickstart = HAL_GetTick();
 8003cde:	f7fe fb39 	bl	8002354 <HAL_GetTick>
 8003ce2:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ce4:	4b5a      	ldr	r3, [pc, #360]	; (8003e50 <HAL_RCC_OscConfig+0x408>)
 8003ce6:	6a1b      	ldr	r3, [r3, #32]
 8003ce8:	f013 0f02 	tst.w	r3, #2
 8003cec:	d12f      	bne.n	8003d4e <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cee:	f7fe fb31 	bl	8002354 <HAL_GetTick>
 8003cf2:	1b80      	subs	r0, r0, r6
 8003cf4:	f241 3388 	movw	r3, #5000	; 0x1388
 8003cf8:	4298      	cmp	r0, r3
 8003cfa:	d9f3      	bls.n	8003ce4 <HAL_RCC_OscConfig+0x29c>
          return HAL_TIMEOUT;
 8003cfc:	2003      	movs	r0, #3
 8003cfe:	e09e      	b.n	8003e3e <HAL_RCC_OscConfig+0x3f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d00:	2b05      	cmp	r3, #5
 8003d02:	d009      	beq.n	8003d18 <HAL_RCC_OscConfig+0x2d0>
 8003d04:	4b52      	ldr	r3, [pc, #328]	; (8003e50 <HAL_RCC_OscConfig+0x408>)
 8003d06:	6a1a      	ldr	r2, [r3, #32]
 8003d08:	f022 0201 	bic.w	r2, r2, #1
 8003d0c:	621a      	str	r2, [r3, #32]
 8003d0e:	6a1a      	ldr	r2, [r3, #32]
 8003d10:	f022 0204 	bic.w	r2, r2, #4
 8003d14:	621a      	str	r2, [r3, #32]
 8003d16:	e7e0      	b.n	8003cda <HAL_RCC_OscConfig+0x292>
 8003d18:	4b4d      	ldr	r3, [pc, #308]	; (8003e50 <HAL_RCC_OscConfig+0x408>)
 8003d1a:	6a1a      	ldr	r2, [r3, #32]
 8003d1c:	f042 0204 	orr.w	r2, r2, #4
 8003d20:	621a      	str	r2, [r3, #32]
 8003d22:	6a1a      	ldr	r2, [r3, #32]
 8003d24:	f042 0201 	orr.w	r2, r2, #1
 8003d28:	621a      	str	r2, [r3, #32]
 8003d2a:	e7d6      	b.n	8003cda <HAL_RCC_OscConfig+0x292>
      tickstart = HAL_GetTick();
 8003d2c:	f7fe fb12 	bl	8002354 <HAL_GetTick>
 8003d30:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d32:	4b47      	ldr	r3, [pc, #284]	; (8003e50 <HAL_RCC_OscConfig+0x408>)
 8003d34:	6a1b      	ldr	r3, [r3, #32]
 8003d36:	f013 0f02 	tst.w	r3, #2
 8003d3a:	d008      	beq.n	8003d4e <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d3c:	f7fe fb0a 	bl	8002354 <HAL_GetTick>
 8003d40:	1b80      	subs	r0, r0, r6
 8003d42:	f241 3388 	movw	r3, #5000	; 0x1388
 8003d46:	4298      	cmp	r0, r3
 8003d48:	d9f3      	bls.n	8003d32 <HAL_RCC_OscConfig+0x2ea>
          return HAL_TIMEOUT;
 8003d4a:	2003      	movs	r0, #3
 8003d4c:	e077      	b.n	8003e3e <HAL_RCC_OscConfig+0x3f6>
    if (pwrclkchanged == SET)
 8003d4e:	b9e5      	cbnz	r5, 8003d8a <HAL_RCC_OscConfig+0x342>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d50:	69e3      	ldr	r3, [r4, #28]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d072      	beq.n	8003e3c <HAL_RCC_OscConfig+0x3f4>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d56:	4a3e      	ldr	r2, [pc, #248]	; (8003e50 <HAL_RCC_OscConfig+0x408>)
 8003d58:	6852      	ldr	r2, [r2, #4]
 8003d5a:	f002 020c 	and.w	r2, r2, #12
 8003d5e:	2a08      	cmp	r2, #8
 8003d60:	d056      	beq.n	8003e10 <HAL_RCC_OscConfig+0x3c8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	d017      	beq.n	8003d96 <HAL_RCC_OscConfig+0x34e>
        __HAL_RCC_PLL_DISABLE();
 8003d66:	4b3b      	ldr	r3, [pc, #236]	; (8003e54 <HAL_RCC_OscConfig+0x40c>)
 8003d68:	2200      	movs	r2, #0
 8003d6a:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8003d6c:	f7fe faf2 	bl	8002354 <HAL_GetTick>
 8003d70:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d72:	4b37      	ldr	r3, [pc, #220]	; (8003e50 <HAL_RCC_OscConfig+0x408>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003d7a:	d047      	beq.n	8003e0c <HAL_RCC_OscConfig+0x3c4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d7c:	f7fe faea 	bl	8002354 <HAL_GetTick>
 8003d80:	1b00      	subs	r0, r0, r4
 8003d82:	2802      	cmp	r0, #2
 8003d84:	d9f5      	bls.n	8003d72 <HAL_RCC_OscConfig+0x32a>
            return HAL_TIMEOUT;
 8003d86:	2003      	movs	r0, #3
 8003d88:	e059      	b.n	8003e3e <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d8a:	4a31      	ldr	r2, [pc, #196]	; (8003e50 <HAL_RCC_OscConfig+0x408>)
 8003d8c:	69d3      	ldr	r3, [r2, #28]
 8003d8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d92:	61d3      	str	r3, [r2, #28]
 8003d94:	e7dc      	b.n	8003d50 <HAL_RCC_OscConfig+0x308>
        __HAL_RCC_PLL_DISABLE();
 8003d96:	4b2f      	ldr	r3, [pc, #188]	; (8003e54 <HAL_RCC_OscConfig+0x40c>)
 8003d98:	2200      	movs	r2, #0
 8003d9a:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8003d9c:	f7fe fada 	bl	8002354 <HAL_GetTick>
 8003da0:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003da2:	4b2b      	ldr	r3, [pc, #172]	; (8003e50 <HAL_RCC_OscConfig+0x408>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003daa:	d006      	beq.n	8003dba <HAL_RCC_OscConfig+0x372>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dac:	f7fe fad2 	bl	8002354 <HAL_GetTick>
 8003db0:	1b40      	subs	r0, r0, r5
 8003db2:	2802      	cmp	r0, #2
 8003db4:	d9f5      	bls.n	8003da2 <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 8003db6:	2003      	movs	r0, #3
 8003db8:	e041      	b.n	8003e3e <HAL_RCC_OscConfig+0x3f6>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003dba:	6a23      	ldr	r3, [r4, #32]
 8003dbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dc0:	d01a      	beq.n	8003df8 <HAL_RCC_OscConfig+0x3b0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003dc2:	4923      	ldr	r1, [pc, #140]	; (8003e50 <HAL_RCC_OscConfig+0x408>)
 8003dc4:	684b      	ldr	r3, [r1, #4]
 8003dc6:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8003dca:	6a22      	ldr	r2, [r4, #32]
 8003dcc:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003dce:	4302      	orrs	r2, r0
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8003dd4:	4b1f      	ldr	r3, [pc, #124]	; (8003e54 <HAL_RCC_OscConfig+0x40c>)
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8003dda:	f7fe fabb 	bl	8002354 <HAL_GetTick>
 8003dde:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003de0:	4b1b      	ldr	r3, [pc, #108]	; (8003e50 <HAL_RCC_OscConfig+0x408>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003de8:	d10e      	bne.n	8003e08 <HAL_RCC_OscConfig+0x3c0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dea:	f7fe fab3 	bl	8002354 <HAL_GetTick>
 8003dee:	1b00      	subs	r0, r0, r4
 8003df0:	2802      	cmp	r0, #2
 8003df2:	d9f5      	bls.n	8003de0 <HAL_RCC_OscConfig+0x398>
            return HAL_TIMEOUT;
 8003df4:	2003      	movs	r0, #3
 8003df6:	e022      	b.n	8003e3e <HAL_RCC_OscConfig+0x3f6>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003df8:	4a15      	ldr	r2, [pc, #84]	; (8003e50 <HAL_RCC_OscConfig+0x408>)
 8003dfa:	6853      	ldr	r3, [r2, #4]
 8003dfc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003e00:	68a1      	ldr	r1, [r4, #8]
 8003e02:	430b      	orrs	r3, r1
 8003e04:	6053      	str	r3, [r2, #4]
 8003e06:	e7dc      	b.n	8003dc2 <HAL_RCC_OscConfig+0x37a>
  return HAL_OK;
 8003e08:	2000      	movs	r0, #0
 8003e0a:	e018      	b.n	8003e3e <HAL_RCC_OscConfig+0x3f6>
 8003e0c:	2000      	movs	r0, #0
 8003e0e:	e016      	b.n	8003e3e <HAL_RCC_OscConfig+0x3f6>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d016      	beq.n	8003e42 <HAL_RCC_OscConfig+0x3fa>
        pll_config = RCC->CFGR;
 8003e14:	4b0e      	ldr	r3, [pc, #56]	; (8003e50 <HAL_RCC_OscConfig+0x408>)
 8003e16:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e18:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8003e1c:	6a22      	ldr	r2, [r4, #32]
 8003e1e:	4291      	cmp	r1, r2
 8003e20:	d111      	bne.n	8003e46 <HAL_RCC_OscConfig+0x3fe>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003e22:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003e26:	6a62      	ldr	r2, [r4, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d10e      	bne.n	8003e4a <HAL_RCC_OscConfig+0x402>
  return HAL_OK;
 8003e2c:	2000      	movs	r0, #0
 8003e2e:	e006      	b.n	8003e3e <HAL_RCC_OscConfig+0x3f6>
    return HAL_ERROR;
 8003e30:	2001      	movs	r0, #1
}
 8003e32:	4770      	bx	lr
        return HAL_ERROR;
 8003e34:	2001      	movs	r0, #1
 8003e36:	e002      	b.n	8003e3e <HAL_RCC_OscConfig+0x3f6>
        return HAL_ERROR;
 8003e38:	2001      	movs	r0, #1
 8003e3a:	e000      	b.n	8003e3e <HAL_RCC_OscConfig+0x3f6>
  return HAL_OK;
 8003e3c:	2000      	movs	r0, #0
}
 8003e3e:	b002      	add	sp, #8
 8003e40:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8003e42:	2001      	movs	r0, #1
 8003e44:	e7fb      	b.n	8003e3e <HAL_RCC_OscConfig+0x3f6>
          return HAL_ERROR;
 8003e46:	2001      	movs	r0, #1
 8003e48:	e7f9      	b.n	8003e3e <HAL_RCC_OscConfig+0x3f6>
 8003e4a:	2001      	movs	r0, #1
 8003e4c:	e7f7      	b.n	8003e3e <HAL_RCC_OscConfig+0x3f6>
 8003e4e:	bf00      	nop
 8003e50:	40021000 	.word	0x40021000
 8003e54:	42420000 	.word	0x42420000

08003e58 <HAL_RCC_GetSysClockFreq>:
{
 8003e58:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003e5a:	4b17      	ldr	r3, [pc, #92]	; (8003eb8 <HAL_RCC_GetSysClockFreq+0x60>)
 8003e5c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003e5e:	f10d 0c18 	add.w	ip, sp, #24
 8003e62:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003e66:	f240 2301 	movw	r3, #513	; 0x201
 8003e6a:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8003e6e:	4b13      	ldr	r3, [pc, #76]	; (8003ebc <HAL_RCC_GetSysClockFreq+0x64>)
 8003e70:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8003e72:	f003 020c 	and.w	r2, r3, #12
 8003e76:	2a08      	cmp	r2, #8
 8003e78:	d002      	beq.n	8003e80 <HAL_RCC_GetSysClockFreq+0x28>
      sysclockfreq = HSE_VALUE;
 8003e7a:	4811      	ldr	r0, [pc, #68]	; (8003ec0 <HAL_RCC_GetSysClockFreq+0x68>)
}
 8003e7c:	b006      	add	sp, #24
 8003e7e:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003e80:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8003e84:	3218      	adds	r2, #24
 8003e86:	446a      	add	r2, sp
 8003e88:	f812 0c10 	ldrb.w	r0, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003e8c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003e90:	d00d      	beq.n	8003eae <HAL_RCC_GetSysClockFreq+0x56>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003e92:	4b0a      	ldr	r3, [pc, #40]	; (8003ebc <HAL_RCC_GetSysClockFreq+0x64>)
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8003e9a:	3318      	adds	r3, #24
 8003e9c:	446b      	add	r3, sp
 8003e9e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003ea2:	4a07      	ldr	r2, [pc, #28]	; (8003ec0 <HAL_RCC_GetSysClockFreq+0x68>)
 8003ea4:	fb02 f000 	mul.w	r0, r2, r0
 8003ea8:	fbb0 f0f3 	udiv	r0, r0, r3
 8003eac:	e7e6      	b.n	8003e7c <HAL_RCC_GetSysClockFreq+0x24>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003eae:	4b05      	ldr	r3, [pc, #20]	; (8003ec4 <HAL_RCC_GetSysClockFreq+0x6c>)
 8003eb0:	fb03 f000 	mul.w	r0, r3, r0
 8003eb4:	e7e2      	b.n	8003e7c <HAL_RCC_GetSysClockFreq+0x24>
 8003eb6:	bf00      	nop
 8003eb8:	0800b77c 	.word	0x0800b77c
 8003ebc:	40021000 	.word	0x40021000
 8003ec0:	007a1200 	.word	0x007a1200
 8003ec4:	003d0900 	.word	0x003d0900

08003ec8 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8003ec8:	2800      	cmp	r0, #0
 8003eca:	f000 80a0 	beq.w	800400e <HAL_RCC_ClockConfig+0x146>
{
 8003ece:	b570      	push	{r4, r5, r6, lr}
 8003ed0:	460d      	mov	r5, r1
 8003ed2:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ed4:	4b52      	ldr	r3, [pc, #328]	; (8004020 <HAL_RCC_ClockConfig+0x158>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 0307 	and.w	r3, r3, #7
 8003edc:	428b      	cmp	r3, r1
 8003ede:	d20b      	bcs.n	8003ef8 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ee0:	4a4f      	ldr	r2, [pc, #316]	; (8004020 <HAL_RCC_ClockConfig+0x158>)
 8003ee2:	6813      	ldr	r3, [r2, #0]
 8003ee4:	f023 0307 	bic.w	r3, r3, #7
 8003ee8:	430b      	orrs	r3, r1
 8003eea:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eec:	6813      	ldr	r3, [r2, #0]
 8003eee:	f003 0307 	and.w	r3, r3, #7
 8003ef2:	428b      	cmp	r3, r1
 8003ef4:	f040 808d 	bne.w	8004012 <HAL_RCC_ClockConfig+0x14a>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ef8:	6823      	ldr	r3, [r4, #0]
 8003efa:	f013 0f02 	tst.w	r3, #2
 8003efe:	d017      	beq.n	8003f30 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f00:	f013 0f04 	tst.w	r3, #4
 8003f04:	d004      	beq.n	8003f10 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f06:	4a47      	ldr	r2, [pc, #284]	; (8004024 <HAL_RCC_ClockConfig+0x15c>)
 8003f08:	6853      	ldr	r3, [r2, #4]
 8003f0a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003f0e:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f10:	6823      	ldr	r3, [r4, #0]
 8003f12:	f013 0f08 	tst.w	r3, #8
 8003f16:	d004      	beq.n	8003f22 <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f18:	4a42      	ldr	r2, [pc, #264]	; (8004024 <HAL_RCC_ClockConfig+0x15c>)
 8003f1a:	6853      	ldr	r3, [r2, #4]
 8003f1c:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003f20:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f22:	4a40      	ldr	r2, [pc, #256]	; (8004024 <HAL_RCC_ClockConfig+0x15c>)
 8003f24:	6853      	ldr	r3, [r2, #4]
 8003f26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f2a:	68a1      	ldr	r1, [r4, #8]
 8003f2c:	430b      	orrs	r3, r1
 8003f2e:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f30:	6823      	ldr	r3, [r4, #0]
 8003f32:	f013 0f01 	tst.w	r3, #1
 8003f36:	d031      	beq.n	8003f9c <HAL_RCC_ClockConfig+0xd4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f38:	6863      	ldr	r3, [r4, #4]
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d020      	beq.n	8003f80 <HAL_RCC_ClockConfig+0xb8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f3e:	2b02      	cmp	r3, #2
 8003f40:	d025      	beq.n	8003f8e <HAL_RCC_ClockConfig+0xc6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f42:	4a38      	ldr	r2, [pc, #224]	; (8004024 <HAL_RCC_ClockConfig+0x15c>)
 8003f44:	6812      	ldr	r2, [r2, #0]
 8003f46:	f012 0f02 	tst.w	r2, #2
 8003f4a:	d064      	beq.n	8004016 <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f4c:	4935      	ldr	r1, [pc, #212]	; (8004024 <HAL_RCC_ClockConfig+0x15c>)
 8003f4e:	684a      	ldr	r2, [r1, #4]
 8003f50:	f022 0203 	bic.w	r2, r2, #3
 8003f54:	4313      	orrs	r3, r2
 8003f56:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8003f58:	f7fe f9fc 	bl	8002354 <HAL_GetTick>
 8003f5c:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f5e:	4b31      	ldr	r3, [pc, #196]	; (8004024 <HAL_RCC_ClockConfig+0x15c>)
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	f003 030c 	and.w	r3, r3, #12
 8003f66:	6862      	ldr	r2, [r4, #4]
 8003f68:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003f6c:	d016      	beq.n	8003f9c <HAL_RCC_ClockConfig+0xd4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f6e:	f7fe f9f1 	bl	8002354 <HAL_GetTick>
 8003f72:	1b80      	subs	r0, r0, r6
 8003f74:	f241 3388 	movw	r3, #5000	; 0x1388
 8003f78:	4298      	cmp	r0, r3
 8003f7a:	d9f0      	bls.n	8003f5e <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 8003f7c:	2003      	movs	r0, #3
 8003f7e:	e045      	b.n	800400c <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f80:	4a28      	ldr	r2, [pc, #160]	; (8004024 <HAL_RCC_ClockConfig+0x15c>)
 8003f82:	6812      	ldr	r2, [r2, #0]
 8003f84:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8003f88:	d1e0      	bne.n	8003f4c <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8003f8a:	2001      	movs	r0, #1
 8003f8c:	e03e      	b.n	800400c <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f8e:	4a25      	ldr	r2, [pc, #148]	; (8004024 <HAL_RCC_ClockConfig+0x15c>)
 8003f90:	6812      	ldr	r2, [r2, #0]
 8003f92:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8003f96:	d1d9      	bne.n	8003f4c <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8003f98:	2001      	movs	r0, #1
 8003f9a:	e037      	b.n	800400c <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f9c:	4b20      	ldr	r3, [pc, #128]	; (8004020 <HAL_RCC_ClockConfig+0x158>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 0307 	and.w	r3, r3, #7
 8003fa4:	42ab      	cmp	r3, r5
 8003fa6:	d90a      	bls.n	8003fbe <HAL_RCC_ClockConfig+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fa8:	4a1d      	ldr	r2, [pc, #116]	; (8004020 <HAL_RCC_ClockConfig+0x158>)
 8003faa:	6813      	ldr	r3, [r2, #0]
 8003fac:	f023 0307 	bic.w	r3, r3, #7
 8003fb0:	432b      	orrs	r3, r5
 8003fb2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fb4:	6813      	ldr	r3, [r2, #0]
 8003fb6:	f003 0307 	and.w	r3, r3, #7
 8003fba:	42ab      	cmp	r3, r5
 8003fbc:	d12d      	bne.n	800401a <HAL_RCC_ClockConfig+0x152>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fbe:	6823      	ldr	r3, [r4, #0]
 8003fc0:	f013 0f04 	tst.w	r3, #4
 8003fc4:	d006      	beq.n	8003fd4 <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fc6:	4a17      	ldr	r2, [pc, #92]	; (8004024 <HAL_RCC_ClockConfig+0x15c>)
 8003fc8:	6853      	ldr	r3, [r2, #4]
 8003fca:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003fce:	68e1      	ldr	r1, [r4, #12]
 8003fd0:	430b      	orrs	r3, r1
 8003fd2:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fd4:	6823      	ldr	r3, [r4, #0]
 8003fd6:	f013 0f08 	tst.w	r3, #8
 8003fda:	d007      	beq.n	8003fec <HAL_RCC_ClockConfig+0x124>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003fdc:	4a11      	ldr	r2, [pc, #68]	; (8004024 <HAL_RCC_ClockConfig+0x15c>)
 8003fde:	6853      	ldr	r3, [r2, #4]
 8003fe0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8003fe4:	6921      	ldr	r1, [r4, #16]
 8003fe6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003fea:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003fec:	f7ff ff34 	bl	8003e58 <HAL_RCC_GetSysClockFreq>
 8003ff0:	4b0c      	ldr	r3, [pc, #48]	; (8004024 <HAL_RCC_ClockConfig+0x15c>)
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003ff8:	4a0b      	ldr	r2, [pc, #44]	; (8004028 <HAL_RCC_ClockConfig+0x160>)
 8003ffa:	5cd3      	ldrb	r3, [r2, r3]
 8003ffc:	40d8      	lsrs	r0, r3
 8003ffe:	4b0b      	ldr	r3, [pc, #44]	; (800402c <HAL_RCC_ClockConfig+0x164>)
 8004000:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8004002:	4b0b      	ldr	r3, [pc, #44]	; (8004030 <HAL_RCC_ClockConfig+0x168>)
 8004004:	6818      	ldr	r0, [r3, #0]
 8004006:	f7fe f961 	bl	80022cc <HAL_InitTick>
  return HAL_OK;
 800400a:	2000      	movs	r0, #0
}
 800400c:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800400e:	2001      	movs	r0, #1
}
 8004010:	4770      	bx	lr
    return HAL_ERROR;
 8004012:	2001      	movs	r0, #1
 8004014:	e7fa      	b.n	800400c <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 8004016:	2001      	movs	r0, #1
 8004018:	e7f8      	b.n	800400c <HAL_RCC_ClockConfig+0x144>
    return HAL_ERROR;
 800401a:	2001      	movs	r0, #1
 800401c:	e7f6      	b.n	800400c <HAL_RCC_ClockConfig+0x144>
 800401e:	bf00      	nop
 8004020:	40022000 	.word	0x40022000
 8004024:	40021000 	.word	0x40021000
 8004028:	0800b758 	.word	0x0800b758
 800402c:	2000000c 	.word	0x2000000c
 8004030:	20000014 	.word	0x20000014

08004034 <HAL_RCC_GetHCLKFreq>:
}
 8004034:	4b01      	ldr	r3, [pc, #4]	; (800403c <HAL_RCC_GetHCLKFreq+0x8>)
 8004036:	6818      	ldr	r0, [r3, #0]
 8004038:	4770      	bx	lr
 800403a:	bf00      	nop
 800403c:	2000000c 	.word	0x2000000c

08004040 <HAL_RCC_GetPCLK1Freq>:
{
 8004040:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004042:	f7ff fff7 	bl	8004034 <HAL_RCC_GetHCLKFreq>
 8004046:	4b04      	ldr	r3, [pc, #16]	; (8004058 <HAL_RCC_GetPCLK1Freq+0x18>)
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800404e:	4a03      	ldr	r2, [pc, #12]	; (800405c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004050:	5cd3      	ldrb	r3, [r2, r3]
}
 8004052:	40d8      	lsrs	r0, r3
 8004054:	bd08      	pop	{r3, pc}
 8004056:	bf00      	nop
 8004058:	40021000 	.word	0x40021000
 800405c:	0800b768 	.word	0x0800b768

08004060 <HAL_RCC_GetPCLK2Freq>:
{
 8004060:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004062:	f7ff ffe7 	bl	8004034 <HAL_RCC_GetHCLKFreq>
 8004066:	4b04      	ldr	r3, [pc, #16]	; (8004078 <HAL_RCC_GetPCLK2Freq+0x18>)
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800406e:	4a03      	ldr	r2, [pc, #12]	; (800407c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004070:	5cd3      	ldrb	r3, [r2, r3]
}
 8004072:	40d8      	lsrs	r0, r3
 8004074:	bd08      	pop	{r3, pc}
 8004076:	bf00      	nop
 8004078:	40021000 	.word	0x40021000
 800407c:	0800b768 	.word	0x0800b768

08004080 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004080:	b570      	push	{r4, r5, r6, lr}
 8004082:	b082      	sub	sp, #8
 8004084:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004086:	6803      	ldr	r3, [r0, #0]
 8004088:	f013 0f01 	tst.w	r3, #1
 800408c:	d036      	beq.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x7c>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800408e:	4b3f      	ldr	r3, [pc, #252]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8004090:	69db      	ldr	r3, [r3, #28]
 8004092:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8004096:	d149      	bne.n	800412c <HAL_RCCEx_PeriphCLKConfig+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004098:	4b3c      	ldr	r3, [pc, #240]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 800409a:	69da      	ldr	r2, [r3, #28]
 800409c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80040a0:	61da      	str	r2, [r3, #28]
 80040a2:	69db      	ldr	r3, [r3, #28]
 80040a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040a8:	9301      	str	r3, [sp, #4]
 80040aa:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80040ac:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040ae:	4b38      	ldr	r3, [pc, #224]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f413 7f80 	tst.w	r3, #256	; 0x100
 80040b6:	d03b      	beq.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0xb0>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80040b8:	4b34      	ldr	r3, [pc, #208]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80040ba:	6a1b      	ldr	r3, [r3, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80040bc:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80040c0:	d013      	beq.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80040c2:	6862      	ldr	r2, [r4, #4]
 80040c4:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d00e      	beq.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x6a>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80040cc:	4a2f      	ldr	r2, [pc, #188]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80040ce:	6a13      	ldr	r3, [r2, #32]
 80040d0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80040d4:	492f      	ldr	r1, [pc, #188]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 80040d6:	2601      	movs	r6, #1
 80040d8:	f8c1 6440 	str.w	r6, [r1, #1088]	; 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 80040dc:	2600      	movs	r6, #0
 80040de:	f8c1 6440 	str.w	r6, [r1, #1088]	; 0x440
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80040e2:	6210      	str	r0, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80040e4:	f013 0f01 	tst.w	r3, #1
 80040e8:	d136      	bne.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0xd8>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040ea:	4a28      	ldr	r2, [pc, #160]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80040ec:	6a13      	ldr	r3, [r2, #32]
 80040ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040f2:	6861      	ldr	r1, [r4, #4]
 80040f4:	430b      	orrs	r3, r1
 80040f6:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80040f8:	2d00      	cmp	r5, #0
 80040fa:	d13e      	bne.n	800417a <HAL_RCCEx_PeriphCLKConfig+0xfa>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80040fc:	6823      	ldr	r3, [r4, #0]
 80040fe:	f013 0f02 	tst.w	r3, #2
 8004102:	d006      	beq.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004104:	4a21      	ldr	r2, [pc, #132]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8004106:	6853      	ldr	r3, [r2, #4]
 8004108:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800410c:	68a1      	ldr	r1, [r4, #8]
 800410e:	430b      	orrs	r3, r1
 8004110:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004112:	6823      	ldr	r3, [r4, #0]
 8004114:	f013 0f10 	tst.w	r3, #16
 8004118:	d034      	beq.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800411a:	4a1c      	ldr	r2, [pc, #112]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 800411c:	6853      	ldr	r3, [r2, #4]
 800411e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8004122:	68e1      	ldr	r1, [r4, #12]
 8004124:	430b      	orrs	r3, r1
 8004126:	6053      	str	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004128:	2000      	movs	r0, #0
 800412a:	e02c      	b.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x106>
    FlagStatus pwrclkchanged = RESET;
 800412c:	2500      	movs	r5, #0
 800412e:	e7be      	b.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x2e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004130:	4a17      	ldr	r2, [pc, #92]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8004132:	6813      	ldr	r3, [r2, #0]
 8004134:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004138:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800413a:	f7fe f90b 	bl	8002354 <HAL_GetTick>
 800413e:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004140:	4b13      	ldr	r3, [pc, #76]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004148:	d1b6      	bne.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x38>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800414a:	f7fe f903 	bl	8002354 <HAL_GetTick>
 800414e:	1b80      	subs	r0, r0, r6
 8004150:	2864      	cmp	r0, #100	; 0x64
 8004152:	d9f5      	bls.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0xc0>
          return HAL_TIMEOUT;
 8004154:	2003      	movs	r0, #3
 8004156:	e016      	b.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x106>
        tickstart = HAL_GetTick();
 8004158:	f7fe f8fc 	bl	8002354 <HAL_GetTick>
 800415c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800415e:	4b0b      	ldr	r3, [pc, #44]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8004160:	6a1b      	ldr	r3, [r3, #32]
 8004162:	f013 0f02 	tst.w	r3, #2
 8004166:	d1c0      	bne.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x6a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004168:	f7fe f8f4 	bl	8002354 <HAL_GetTick>
 800416c:	1b80      	subs	r0, r0, r6
 800416e:	f241 3388 	movw	r3, #5000	; 0x1388
 8004172:	4298      	cmp	r0, r3
 8004174:	d9f3      	bls.n	800415e <HAL_RCCEx_PeriphCLKConfig+0xde>
            return HAL_TIMEOUT;
 8004176:	2003      	movs	r0, #3
 8004178:	e005      	b.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x106>
      __HAL_RCC_PWR_CLK_DISABLE();
 800417a:	69d3      	ldr	r3, [r2, #28]
 800417c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004180:	61d3      	str	r3, [r2, #28]
 8004182:	e7bb      	b.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x7c>
  return HAL_OK;
 8004184:	2000      	movs	r0, #0
}
 8004186:	b002      	add	sp, #8
 8004188:	bd70      	pop	{r4, r5, r6, pc}
 800418a:	bf00      	nop
 800418c:	40021000 	.word	0x40021000
 8004190:	40007000 	.word	0x40007000
 8004194:	42420000 	.word	0x42420000

08004198 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004198:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800419a:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800419c:	6a04      	ldr	r4, [r0, #32]
 800419e:	f024 0401 	bic.w	r4, r4, #1
 80041a2:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041a4:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80041a6:	f024 0cf0 	bic.w	ip, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80041aa:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80041ae:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 80041b2:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80041b4:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80041b6:	6203      	str	r3, [r0, #32]
}
 80041b8:	bc10      	pop	{r4}
 80041ba:	4770      	bx	lr

080041bc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041bc:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041be:	6a04      	ldr	r4, [r0, #32]
 80041c0:	f024 0410 	bic.w	r4, r4, #16
 80041c4:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041c6:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 80041c8:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80041ca:	f424 4c70 	bic.w	ip, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80041ce:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041d2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80041d6:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80041da:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80041dc:	6203      	str	r3, [r0, #32]
}
 80041de:	bc10      	pop	{r4}
 80041e0:	4770      	bx	lr

080041e2 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80041e2:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80041e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80041e8:	430b      	orrs	r3, r1
 80041ea:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041ee:	6083      	str	r3, [r0, #8]
}
 80041f0:	4770      	bx	lr
	...

080041f4 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 80041f4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d127      	bne.n	800424e <HAL_TIM_Base_Start_IT+0x5a>
  htim->State = HAL_TIM_STATE_BUSY;
 80041fe:	2302      	movs	r3, #2
 8004200:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004204:	6802      	ldr	r2, [r0, #0]
 8004206:	68d3      	ldr	r3, [r2, #12]
 8004208:	f043 0301 	orr.w	r3, r3, #1
 800420c:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800420e:	6803      	ldr	r3, [r0, #0]
 8004210:	4a11      	ldr	r2, [pc, #68]	; (8004258 <HAL_TIM_Base_Start_IT+0x64>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d010      	beq.n	8004238 <HAL_TIM_Base_Start_IT+0x44>
 8004216:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800421a:	d00d      	beq.n	8004238 <HAL_TIM_Base_Start_IT+0x44>
 800421c:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8004220:	4293      	cmp	r3, r2
 8004222:	d009      	beq.n	8004238 <HAL_TIM_Base_Start_IT+0x44>
 8004224:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004228:	4293      	cmp	r3, r2
 800422a:	d005      	beq.n	8004238 <HAL_TIM_Base_Start_IT+0x44>
    __HAL_TIM_ENABLE(htim);
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	f042 0201 	orr.w	r2, r2, #1
 8004232:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004234:	2000      	movs	r0, #0
 8004236:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004238:	689a      	ldr	r2, [r3, #8]
 800423a:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800423e:	2a06      	cmp	r2, #6
 8004240:	d007      	beq.n	8004252 <HAL_TIM_Base_Start_IT+0x5e>
      __HAL_TIM_ENABLE(htim);
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	f042 0201 	orr.w	r2, r2, #1
 8004248:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800424a:	2000      	movs	r0, #0
 800424c:	4770      	bx	lr
    return HAL_ERROR;
 800424e:	2001      	movs	r0, #1
 8004250:	4770      	bx	lr
  return HAL_OK;
 8004252:	2000      	movs	r0, #0
}
 8004254:	4770      	bx	lr
 8004256:	bf00      	nop
 8004258:	40012c00 	.word	0x40012c00

0800425c <HAL_TIM_OC_DelayElapsedCallback>:
}
 800425c:	4770      	bx	lr

0800425e <HAL_TIM_IC_CaptureCallback>:
}
 800425e:	4770      	bx	lr

08004260 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8004260:	4770      	bx	lr

08004262 <HAL_TIM_TriggerCallback>:
}
 8004262:	4770      	bx	lr

08004264 <HAL_TIM_IRQHandler>:
{
 8004264:	b510      	push	{r4, lr}
 8004266:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004268:	6803      	ldr	r3, [r0, #0]
 800426a:	691a      	ldr	r2, [r3, #16]
 800426c:	f012 0f02 	tst.w	r2, #2
 8004270:	d011      	beq.n	8004296 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004272:	68da      	ldr	r2, [r3, #12]
 8004274:	f012 0f02 	tst.w	r2, #2
 8004278:	d00d      	beq.n	8004296 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800427a:	f06f 0202 	mvn.w	r2, #2
 800427e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004280:	2301      	movs	r3, #1
 8004282:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004284:	6803      	ldr	r3, [r0, #0]
 8004286:	699b      	ldr	r3, [r3, #24]
 8004288:	f013 0f03 	tst.w	r3, #3
 800428c:	d070      	beq.n	8004370 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 800428e:	f7ff ffe6 	bl	800425e <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004292:	2300      	movs	r3, #0
 8004294:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004296:	6823      	ldr	r3, [r4, #0]
 8004298:	691a      	ldr	r2, [r3, #16]
 800429a:	f012 0f04 	tst.w	r2, #4
 800429e:	d012      	beq.n	80042c6 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80042a0:	68da      	ldr	r2, [r3, #12]
 80042a2:	f012 0f04 	tst.w	r2, #4
 80042a6:	d00e      	beq.n	80042c6 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80042a8:	f06f 0204 	mvn.w	r2, #4
 80042ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80042ae:	2302      	movs	r3, #2
 80042b0:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80042b2:	6823      	ldr	r3, [r4, #0]
 80042b4:	699b      	ldr	r3, [r3, #24]
 80042b6:	f413 7f40 	tst.w	r3, #768	; 0x300
 80042ba:	d05f      	beq.n	800437c <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 80042bc:	4620      	mov	r0, r4
 80042be:	f7ff ffce 	bl	800425e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042c2:	2300      	movs	r3, #0
 80042c4:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80042c6:	6823      	ldr	r3, [r4, #0]
 80042c8:	691a      	ldr	r2, [r3, #16]
 80042ca:	f012 0f08 	tst.w	r2, #8
 80042ce:	d012      	beq.n	80042f6 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80042d0:	68da      	ldr	r2, [r3, #12]
 80042d2:	f012 0f08 	tst.w	r2, #8
 80042d6:	d00e      	beq.n	80042f6 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80042d8:	f06f 0208 	mvn.w	r2, #8
 80042dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80042de:	2304      	movs	r3, #4
 80042e0:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80042e2:	6823      	ldr	r3, [r4, #0]
 80042e4:	69db      	ldr	r3, [r3, #28]
 80042e6:	f013 0f03 	tst.w	r3, #3
 80042ea:	d04e      	beq.n	800438a <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 80042ec:	4620      	mov	r0, r4
 80042ee:	f7ff ffb6 	bl	800425e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042f2:	2300      	movs	r3, #0
 80042f4:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80042f6:	6823      	ldr	r3, [r4, #0]
 80042f8:	691a      	ldr	r2, [r3, #16]
 80042fa:	f012 0f10 	tst.w	r2, #16
 80042fe:	d012      	beq.n	8004326 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004300:	68da      	ldr	r2, [r3, #12]
 8004302:	f012 0f10 	tst.w	r2, #16
 8004306:	d00e      	beq.n	8004326 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004308:	f06f 0210 	mvn.w	r2, #16
 800430c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800430e:	2308      	movs	r3, #8
 8004310:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004312:	6823      	ldr	r3, [r4, #0]
 8004314:	69db      	ldr	r3, [r3, #28]
 8004316:	f413 7f40 	tst.w	r3, #768	; 0x300
 800431a:	d03d      	beq.n	8004398 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 800431c:	4620      	mov	r0, r4
 800431e:	f7ff ff9e 	bl	800425e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004322:	2300      	movs	r3, #0
 8004324:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004326:	6823      	ldr	r3, [r4, #0]
 8004328:	691a      	ldr	r2, [r3, #16]
 800432a:	f012 0f01 	tst.w	r2, #1
 800432e:	d003      	beq.n	8004338 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004330:	68da      	ldr	r2, [r3, #12]
 8004332:	f012 0f01 	tst.w	r2, #1
 8004336:	d136      	bne.n	80043a6 <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004338:	6823      	ldr	r3, [r4, #0]
 800433a:	691a      	ldr	r2, [r3, #16]
 800433c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004340:	d003      	beq.n	800434a <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004342:	68da      	ldr	r2, [r3, #12]
 8004344:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004348:	d134      	bne.n	80043b4 <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800434a:	6823      	ldr	r3, [r4, #0]
 800434c:	691a      	ldr	r2, [r3, #16]
 800434e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004352:	d003      	beq.n	800435c <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004354:	68da      	ldr	r2, [r3, #12]
 8004356:	f012 0f40 	tst.w	r2, #64	; 0x40
 800435a:	d132      	bne.n	80043c2 <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800435c:	6823      	ldr	r3, [r4, #0]
 800435e:	691a      	ldr	r2, [r3, #16]
 8004360:	f012 0f20 	tst.w	r2, #32
 8004364:	d003      	beq.n	800436e <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004366:	68da      	ldr	r2, [r3, #12]
 8004368:	f012 0f20 	tst.w	r2, #32
 800436c:	d130      	bne.n	80043d0 <HAL_TIM_IRQHandler+0x16c>
}
 800436e:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004370:	f7ff ff74 	bl	800425c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004374:	4620      	mov	r0, r4
 8004376:	f7ff ff73 	bl	8004260 <HAL_TIM_PWM_PulseFinishedCallback>
 800437a:	e78a      	b.n	8004292 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800437c:	4620      	mov	r0, r4
 800437e:	f7ff ff6d 	bl	800425c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004382:	4620      	mov	r0, r4
 8004384:	f7ff ff6c 	bl	8004260 <HAL_TIM_PWM_PulseFinishedCallback>
 8004388:	e79b      	b.n	80042c2 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800438a:	4620      	mov	r0, r4
 800438c:	f7ff ff66 	bl	800425c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004390:	4620      	mov	r0, r4
 8004392:	f7ff ff65 	bl	8004260 <HAL_TIM_PWM_PulseFinishedCallback>
 8004396:	e7ac      	b.n	80042f2 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004398:	4620      	mov	r0, r4
 800439a:	f7ff ff5f 	bl	800425c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800439e:	4620      	mov	r0, r4
 80043a0:	f7ff ff5e 	bl	8004260 <HAL_TIM_PWM_PulseFinishedCallback>
 80043a4:	e7bd      	b.n	8004322 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80043a6:	f06f 0201 	mvn.w	r2, #1
 80043aa:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80043ac:	4620      	mov	r0, r4
 80043ae:	f7fc fe21 	bl	8000ff4 <HAL_TIM_PeriodElapsedCallback>
 80043b2:	e7c1      	b.n	8004338 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80043b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80043b8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80043ba:	4620      	mov	r0, r4
 80043bc:	f000 f927 	bl	800460e <HAL_TIMEx_BreakCallback>
 80043c0:	e7c3      	b.n	800434a <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80043c2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80043c6:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80043c8:	4620      	mov	r0, r4
 80043ca:	f7ff ff4a 	bl	8004262 <HAL_TIM_TriggerCallback>
 80043ce:	e7c5      	b.n	800435c <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80043d0:	f06f 0220 	mvn.w	r2, #32
 80043d4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80043d6:	4620      	mov	r0, r4
 80043d8:	f000 f918 	bl	800460c <HAL_TIMEx_CommutCallback>
}
 80043dc:	e7c7      	b.n	800436e <HAL_TIM_IRQHandler+0x10a>
	...

080043e0 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 80043e0:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043e2:	4a1b      	ldr	r2, [pc, #108]	; (8004450 <TIM_Base_SetConfig+0x70>)
 80043e4:	4290      	cmp	r0, r2
 80043e6:	d00a      	beq.n	80043fe <TIM_Base_SetConfig+0x1e>
 80043e8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80043ec:	d007      	beq.n	80043fe <TIM_Base_SetConfig+0x1e>
 80043ee:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80043f2:	4290      	cmp	r0, r2
 80043f4:	d003      	beq.n	80043fe <TIM_Base_SetConfig+0x1e>
 80043f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80043fa:	4290      	cmp	r0, r2
 80043fc:	d103      	bne.n	8004406 <TIM_Base_SetConfig+0x26>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004402:	684a      	ldr	r2, [r1, #4]
 8004404:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004406:	4a12      	ldr	r2, [pc, #72]	; (8004450 <TIM_Base_SetConfig+0x70>)
 8004408:	4290      	cmp	r0, r2
 800440a:	d00a      	beq.n	8004422 <TIM_Base_SetConfig+0x42>
 800440c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004410:	d007      	beq.n	8004422 <TIM_Base_SetConfig+0x42>
 8004412:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8004416:	4290      	cmp	r0, r2
 8004418:	d003      	beq.n	8004422 <TIM_Base_SetConfig+0x42>
 800441a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800441e:	4290      	cmp	r0, r2
 8004420:	d103      	bne.n	800442a <TIM_Base_SetConfig+0x4a>
    tmpcr1 &= ~TIM_CR1_CKD;
 8004422:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004426:	68ca      	ldr	r2, [r1, #12]
 8004428:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800442a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800442e:	694a      	ldr	r2, [r1, #20]
 8004430:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8004432:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004434:	688b      	ldr	r3, [r1, #8]
 8004436:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004438:	680b      	ldr	r3, [r1, #0]
 800443a:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800443c:	4b04      	ldr	r3, [pc, #16]	; (8004450 <TIM_Base_SetConfig+0x70>)
 800443e:	4298      	cmp	r0, r3
 8004440:	d002      	beq.n	8004448 <TIM_Base_SetConfig+0x68>
  TIMx->EGR = TIM_EGR_UG;
 8004442:	2301      	movs	r3, #1
 8004444:	6143      	str	r3, [r0, #20]
}
 8004446:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8004448:	690b      	ldr	r3, [r1, #16]
 800444a:	6303      	str	r3, [r0, #48]	; 0x30
 800444c:	e7f9      	b.n	8004442 <TIM_Base_SetConfig+0x62>
 800444e:	bf00      	nop
 8004450:	40012c00 	.word	0x40012c00

08004454 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8004454:	b340      	cbz	r0, 80044a8 <HAL_TIM_Base_Init+0x54>
{
 8004456:	b510      	push	{r4, lr}
 8004458:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800445a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800445e:	b1f3      	cbz	r3, 800449e <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8004460:	2302      	movs	r3, #2
 8004462:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004466:	4621      	mov	r1, r4
 8004468:	f851 0b04 	ldr.w	r0, [r1], #4
 800446c:	f7ff ffb8 	bl	80043e0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004470:	2301      	movs	r3, #1
 8004472:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004476:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800447a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800447e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8004482:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004486:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800448a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800448e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8004492:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8004496:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800449a:	2000      	movs	r0, #0
}
 800449c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800449e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80044a2:	f7fd fdd1 	bl	8002048 <HAL_TIM_Base_MspInit>
 80044a6:	e7db      	b.n	8004460 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 80044a8:	2001      	movs	r0, #1
}
 80044aa:	4770      	bx	lr

080044ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80044ac:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80044ae:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044b0:	f424 4c7f 	bic.w	ip, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80044b4:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 80044b8:	430a      	orrs	r2, r1
 80044ba:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044be:	6082      	str	r2, [r0, #8]
}
 80044c0:	bc10      	pop	{r4}
 80044c2:	4770      	bx	lr

080044c4 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80044c4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d066      	beq.n	800459a <HAL_TIM_ConfigClockSource+0xd6>
{
 80044cc:	b510      	push	{r4, lr}
 80044ce:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80044d0:	2301      	movs	r3, #1
 80044d2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80044d6:	2302      	movs	r3, #2
 80044d8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80044dc:	6802      	ldr	r2, [r0, #0]
 80044de:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044e0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80044e4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 80044e8:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80044ea:	680b      	ldr	r3, [r1, #0]
 80044ec:	2b60      	cmp	r3, #96	; 0x60
 80044ee:	d040      	beq.n	8004572 <HAL_TIM_ConfigClockSource+0xae>
 80044f0:	d822      	bhi.n	8004538 <HAL_TIM_ConfigClockSource+0x74>
 80044f2:	2b40      	cmp	r3, #64	; 0x40
 80044f4:	d047      	beq.n	8004586 <HAL_TIM_ConfigClockSource+0xc2>
 80044f6:	d90b      	bls.n	8004510 <HAL_TIM_ConfigClockSource+0x4c>
 80044f8:	2b50      	cmp	r3, #80	; 0x50
 80044fa:	d10e      	bne.n	800451a <HAL_TIM_ConfigClockSource+0x56>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80044fc:	68ca      	ldr	r2, [r1, #12]
 80044fe:	6849      	ldr	r1, [r1, #4]
 8004500:	6800      	ldr	r0, [r0, #0]
 8004502:	f7ff fe49 	bl	8004198 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004506:	2150      	movs	r1, #80	; 0x50
 8004508:	6820      	ldr	r0, [r4, #0]
 800450a:	f7ff fe6a 	bl	80041e2 <TIM_ITRx_SetConfig>
      break;
 800450e:	e004      	b.n	800451a <HAL_TIM_ConfigClockSource+0x56>
  switch (sClockSourceConfig->ClockSource)
 8004510:	2b20      	cmp	r3, #32
 8004512:	d00c      	beq.n	800452e <HAL_TIM_ConfigClockSource+0x6a>
 8004514:	d908      	bls.n	8004528 <HAL_TIM_ConfigClockSource+0x64>
 8004516:	2b30      	cmp	r3, #48	; 0x30
 8004518:	d009      	beq.n	800452e <HAL_TIM_ConfigClockSource+0x6a>
  htim->State = HAL_TIM_STATE_READY;
 800451a:	2301      	movs	r3, #1
 800451c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004520:	2000      	movs	r0, #0
 8004522:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8004526:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 8004528:	b10b      	cbz	r3, 800452e <HAL_TIM_ConfigClockSource+0x6a>
 800452a:	2b10      	cmp	r3, #16
 800452c:	d1f5      	bne.n	800451a <HAL_TIM_ConfigClockSource+0x56>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800452e:	4619      	mov	r1, r3
 8004530:	6820      	ldr	r0, [r4, #0]
 8004532:	f7ff fe56 	bl	80041e2 <TIM_ITRx_SetConfig>
        break;
 8004536:	e7f0      	b.n	800451a <HAL_TIM_ConfigClockSource+0x56>
  switch (sClockSourceConfig->ClockSource)
 8004538:	2b70      	cmp	r3, #112	; 0x70
 800453a:	d00e      	beq.n	800455a <HAL_TIM_ConfigClockSource+0x96>
 800453c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004540:	d1eb      	bne.n	800451a <HAL_TIM_ConfigClockSource+0x56>
      TIM_ETR_SetConfig(htim->Instance,
 8004542:	68cb      	ldr	r3, [r1, #12]
 8004544:	684a      	ldr	r2, [r1, #4]
 8004546:	6889      	ldr	r1, [r1, #8]
 8004548:	6800      	ldr	r0, [r0, #0]
 800454a:	f7ff ffaf 	bl	80044ac <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800454e:	6822      	ldr	r2, [r4, #0]
 8004550:	6893      	ldr	r3, [r2, #8]
 8004552:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004556:	6093      	str	r3, [r2, #8]
      break;
 8004558:	e7df      	b.n	800451a <HAL_TIM_ConfigClockSource+0x56>
      TIM_ETR_SetConfig(htim->Instance,
 800455a:	68cb      	ldr	r3, [r1, #12]
 800455c:	684a      	ldr	r2, [r1, #4]
 800455e:	6889      	ldr	r1, [r1, #8]
 8004560:	6800      	ldr	r0, [r0, #0]
 8004562:	f7ff ffa3 	bl	80044ac <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004566:	6822      	ldr	r2, [r4, #0]
 8004568:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800456a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800456e:	6093      	str	r3, [r2, #8]
      break;
 8004570:	e7d3      	b.n	800451a <HAL_TIM_ConfigClockSource+0x56>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004572:	68ca      	ldr	r2, [r1, #12]
 8004574:	6849      	ldr	r1, [r1, #4]
 8004576:	6800      	ldr	r0, [r0, #0]
 8004578:	f7ff fe20 	bl	80041bc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800457c:	2160      	movs	r1, #96	; 0x60
 800457e:	6820      	ldr	r0, [r4, #0]
 8004580:	f7ff fe2f 	bl	80041e2 <TIM_ITRx_SetConfig>
      break;
 8004584:	e7c9      	b.n	800451a <HAL_TIM_ConfigClockSource+0x56>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004586:	68ca      	ldr	r2, [r1, #12]
 8004588:	6849      	ldr	r1, [r1, #4]
 800458a:	6800      	ldr	r0, [r0, #0]
 800458c:	f7ff fe04 	bl	8004198 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004590:	2140      	movs	r1, #64	; 0x40
 8004592:	6820      	ldr	r0, [r4, #0]
 8004594:	f7ff fe25 	bl	80041e2 <TIM_ITRx_SetConfig>
      break;
 8004598:	e7bf      	b.n	800451a <HAL_TIM_ConfigClockSource+0x56>
  __HAL_LOCK(htim);
 800459a:	2002      	movs	r0, #2
}
 800459c:	4770      	bx	lr
	...

080045a0 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80045a0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d02c      	beq.n	8004602 <HAL_TIMEx_MasterConfigSynchronization+0x62>
{
 80045a8:	b410      	push	{r4}
  __HAL_LOCK(htim);
 80045aa:	2301      	movs	r3, #1
 80045ac:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045b0:	2302      	movs	r3, #2
 80045b2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80045b6:	6803      	ldr	r3, [r0, #0]
 80045b8:	685a      	ldr	r2, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045ba:	689c      	ldr	r4, [r3, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80045bc:	f022 0c70 	bic.w	ip, r2, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80045c0:	680a      	ldr	r2, [r1, #0]
 80045c2:	ea42 020c 	orr.w	r2, r2, ip

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80045c6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045c8:	6803      	ldr	r3, [r0, #0]
 80045ca:	4a0f      	ldr	r2, [pc, #60]	; (8004608 <HAL_TIMEx_MasterConfigSynchronization+0x68>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d00a      	beq.n	80045e6 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 80045d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045d4:	d007      	beq.n	80045e6 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 80045d6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80045da:	4293      	cmp	r3, r2
 80045dc:	d003      	beq.n	80045e6 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 80045de:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d104      	bne.n	80045f0 <HAL_TIMEx_MasterConfigSynchronization+0x50>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80045e6:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80045ea:	684a      	ldr	r2, [r1, #4]
 80045ec:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80045ee:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80045f0:	2301      	movs	r3, #1
 80045f2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045f6:	2300      	movs	r3, #0
 80045f8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 80045fc:	4618      	mov	r0, r3
}
 80045fe:	bc10      	pop	{r4}
 8004600:	4770      	bx	lr
  __HAL_LOCK(htim);
 8004602:	2002      	movs	r0, #2
}
 8004604:	4770      	bx	lr
 8004606:	bf00      	nop
 8004608:	40012c00 	.word	0x40012c00

0800460c <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800460c:	4770      	bx	lr

0800460e <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800460e:	4770      	bx	lr

08004610 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004610:	6802      	ldr	r2, [r0, #0]
 8004612:	68d3      	ldr	r3, [r2, #12]
 8004614:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004618:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800461a:	6802      	ldr	r2, [r0, #0]
 800461c:	6953      	ldr	r3, [r2, #20]
 800461e:	f023 0301 	bic.w	r3, r3, #1
 8004622:	6153      	str	r3, [r2, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004624:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8004626:	2b01      	cmp	r3, #1
 8004628:	d005      	beq.n	8004636 <UART_EndRxTransfer+0x26>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800462a:	2320      	movs	r3, #32
 800462c:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004630:	2300      	movs	r3, #0
 8004632:	6303      	str	r3, [r0, #48]	; 0x30
}
 8004634:	4770      	bx	lr
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004636:	6802      	ldr	r2, [r0, #0]
 8004638:	68d3      	ldr	r3, [r2, #12]
 800463a:	f023 0310 	bic.w	r3, r3, #16
 800463e:	60d3      	str	r3, [r2, #12]
 8004640:	e7f3      	b.n	800462a <UART_EndRxTransfer+0x1a>

08004642 <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004642:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004646:	b2db      	uxtb	r3, r3
 8004648:	2b21      	cmp	r3, #33	; 0x21
 800464a:	d001      	beq.n	8004650 <UART_Transmit_IT+0xe>
    }
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 800464c:	2002      	movs	r0, #2
  }
}
 800464e:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004650:	6883      	ldr	r3, [r0, #8]
 8004652:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004656:	d017      	beq.n	8004688 <UART_Transmit_IT+0x46>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004658:	6a03      	ldr	r3, [r0, #32]
 800465a:	1c5a      	adds	r2, r3, #1
 800465c:	6202      	str	r2, [r0, #32]
 800465e:	781a      	ldrb	r2, [r3, #0]
 8004660:	6803      	ldr	r3, [r0, #0]
 8004662:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 8004664:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 8004666:	b29b      	uxth	r3, r3
 8004668:	3b01      	subs	r3, #1
 800466a:	b29b      	uxth	r3, r3
 800466c:	84c3      	strh	r3, [r0, #38]	; 0x26
 800466e:	b94b      	cbnz	r3, 8004684 <UART_Transmit_IT+0x42>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004670:	6802      	ldr	r2, [r0, #0]
 8004672:	68d3      	ldr	r3, [r2, #12]
 8004674:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004678:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800467a:	6802      	ldr	r2, [r0, #0]
 800467c:	68d3      	ldr	r3, [r2, #12]
 800467e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004682:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 8004684:	2000      	movs	r0, #0
 8004686:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004688:	6903      	ldr	r3, [r0, #16]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d1e4      	bne.n	8004658 <UART_Transmit_IT+0x16>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800468e:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004690:	881b      	ldrh	r3, [r3, #0]
 8004692:	6802      	ldr	r2, [r0, #0]
 8004694:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004698:	6053      	str	r3, [r2, #4]
      huart->pTxBuffPtr += 2U;
 800469a:	6a03      	ldr	r3, [r0, #32]
 800469c:	3302      	adds	r3, #2
 800469e:	6203      	str	r3, [r0, #32]
 80046a0:	e7e0      	b.n	8004664 <UART_Transmit_IT+0x22>
	...

080046a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046a4:	b510      	push	{r4, lr}
 80046a6:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046a8:	6802      	ldr	r2, [r0, #0]
 80046aa:	6913      	ldr	r3, [r2, #16]
 80046ac:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80046b0:	68c1      	ldr	r1, [r0, #12]
 80046b2:	430b      	orrs	r3, r1
 80046b4:	6113      	str	r3, [r2, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80046b6:	6883      	ldr	r3, [r0, #8]
 80046b8:	6902      	ldr	r2, [r0, #16]
 80046ba:	4313      	orrs	r3, r2
 80046bc:	6942      	ldr	r2, [r0, #20]
 80046be:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 80046c0:	6801      	ldr	r1, [r0, #0]
 80046c2:	68cb      	ldr	r3, [r1, #12]
 80046c4:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80046c8:	f023 030c 	bic.w	r3, r3, #12
 80046cc:	4313      	orrs	r3, r2
 80046ce:	60cb      	str	r3, [r1, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80046d0:	6802      	ldr	r2, [r0, #0]
 80046d2:	6953      	ldr	r3, [r2, #20]
 80046d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046d8:	6981      	ldr	r1, [r0, #24]
 80046da:	430b      	orrs	r3, r1
 80046dc:	6153      	str	r3, [r2, #20]


  if(huart->Instance == USART1)
 80046de:	6802      	ldr	r2, [r0, #0]
 80046e0:	4b13      	ldr	r3, [pc, #76]	; (8004730 <UART_SetConfig+0x8c>)
 80046e2:	429a      	cmp	r2, r3
 80046e4:	d020      	beq.n	8004728 <UART_SetConfig+0x84>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80046e6:	f7ff fcab 	bl	8004040 <HAL_RCC_GetPCLK1Freq>
 80046ea:	4602      	mov	r2, r0
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80046ec:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80046f0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80046f4:	6863      	ldr	r3, [r4, #4]
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80046fc:	480d      	ldr	r0, [pc, #52]	; (8004734 <UART_SetConfig+0x90>)
 80046fe:	fba0 3102 	umull	r3, r1, r0, r2
 8004702:	0949      	lsrs	r1, r1, #5
 8004704:	2364      	movs	r3, #100	; 0x64
 8004706:	fb03 2311 	mls	r3, r3, r1, r2
 800470a:	011b      	lsls	r3, r3, #4
 800470c:	3332      	adds	r3, #50	; 0x32
 800470e:	fba0 2303 	umull	r2, r3, r0, r3
 8004712:	095b      	lsrs	r3, r3, #5
 8004714:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004718:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800471c:	f003 030f 	and.w	r3, r3, #15
 8004720:	6821      	ldr	r1, [r4, #0]
 8004722:	4413      	add	r3, r2
 8004724:	608b      	str	r3, [r1, #8]
#endif /* USART_CR1_OVER8 */
}
 8004726:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 8004728:	f7ff fc9a 	bl	8004060 <HAL_RCC_GetPCLK2Freq>
 800472c:	4602      	mov	r2, r0
 800472e:	e7dd      	b.n	80046ec <UART_SetConfig+0x48>
 8004730:	40013800 	.word	0x40013800
 8004734:	51eb851f 	.word	0x51eb851f

08004738 <UART_WaitOnFlagUntilTimeout>:
{
 8004738:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800473c:	4605      	mov	r5, r0
 800473e:	460f      	mov	r7, r1
 8004740:	4616      	mov	r6, r2
 8004742:	4699      	mov	r9, r3
 8004744:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004748:	682c      	ldr	r4, [r5, #0]
 800474a:	6824      	ldr	r4, [r4, #0]
 800474c:	ea37 0304 	bics.w	r3, r7, r4
 8004750:	bf0c      	ite	eq
 8004752:	f04f 0c01 	moveq.w	ip, #1
 8004756:	f04f 0c00 	movne.w	ip, #0
 800475a:	45b4      	cmp	ip, r6
 800475c:	d11f      	bne.n	800479e <UART_WaitOnFlagUntilTimeout+0x66>
    if (Timeout != HAL_MAX_DELAY)
 800475e:	f1b8 3fff 	cmp.w	r8, #4294967295
 8004762:	d0f1      	beq.n	8004748 <UART_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004764:	f1b8 0f00 	cmp.w	r8, #0
 8004768:	d005      	beq.n	8004776 <UART_WaitOnFlagUntilTimeout+0x3e>
 800476a:	f7fd fdf3 	bl	8002354 <HAL_GetTick>
 800476e:	eba0 0009 	sub.w	r0, r0, r9
 8004772:	4540      	cmp	r0, r8
 8004774:	d9e8      	bls.n	8004748 <UART_WaitOnFlagUntilTimeout+0x10>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004776:	682a      	ldr	r2, [r5, #0]
 8004778:	68d3      	ldr	r3, [r2, #12]
 800477a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800477e:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004780:	682a      	ldr	r2, [r5, #0]
 8004782:	6953      	ldr	r3, [r2, #20]
 8004784:	f023 0301 	bic.w	r3, r3, #1
 8004788:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 800478a:	2320      	movs	r3, #32
 800478c:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004790:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
        __HAL_UNLOCK(huart);
 8004794:	2300      	movs	r3, #0
 8004796:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
        return HAL_TIMEOUT;
 800479a:	2003      	movs	r0, #3
 800479c:	e000      	b.n	80047a0 <UART_WaitOnFlagUntilTimeout+0x68>
  return HAL_OK;
 800479e:	2000      	movs	r0, #0
}
 80047a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080047a4 <HAL_UART_Init>:
  if (huart == NULL)
 80047a4:	b358      	cbz	r0, 80047fe <HAL_UART_Init+0x5a>
{
 80047a6:	b510      	push	{r4, lr}
 80047a8:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80047aa:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80047ae:	b30b      	cbz	r3, 80047f4 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 80047b0:	2324      	movs	r3, #36	; 0x24
 80047b2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 80047b6:	6822      	ldr	r2, [r4, #0]
 80047b8:	68d3      	ldr	r3, [r2, #12]
 80047ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80047be:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80047c0:	4620      	mov	r0, r4
 80047c2:	f7ff ff6f 	bl	80046a4 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047c6:	6822      	ldr	r2, [r4, #0]
 80047c8:	6913      	ldr	r3, [r2, #16]
 80047ca:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80047ce:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047d0:	6822      	ldr	r2, [r4, #0]
 80047d2:	6953      	ldr	r3, [r2, #20]
 80047d4:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80047d8:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 80047da:	6822      	ldr	r2, [r4, #0]
 80047dc:	68d3      	ldr	r3, [r2, #12]
 80047de:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80047e2:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047e4:	2000      	movs	r0, #0
 80047e6:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80047e8:	2320      	movs	r3, #32
 80047ea:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80047ee:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 80047f2:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80047f4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 80047f8:	f7fd fc8a 	bl	8002110 <HAL_UART_MspInit>
 80047fc:	e7d8      	b.n	80047b0 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 80047fe:	2001      	movs	r0, #1
}
 8004800:	4770      	bx	lr

08004802 <HAL_HalfDuplex_Init>:
  if (huart == NULL)
 8004802:	2800      	cmp	r0, #0
 8004804:	d030      	beq.n	8004868 <HAL_HalfDuplex_Init+0x66>
{
 8004806:	b510      	push	{r4, lr}
 8004808:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800480a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800480e:	b333      	cbz	r3, 800485e <HAL_HalfDuplex_Init+0x5c>
  huart->gState = HAL_UART_STATE_BUSY;
 8004810:	2324      	movs	r3, #36	; 0x24
 8004812:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8004816:	6822      	ldr	r2, [r4, #0]
 8004818:	68d3      	ldr	r3, [r2, #12]
 800481a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800481e:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8004820:	4620      	mov	r0, r4
 8004822:	f7ff ff3f 	bl	80046a4 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004826:	6822      	ldr	r2, [r4, #0]
 8004828:	6913      	ldr	r3, [r2, #16]
 800482a:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800482e:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8004830:	6822      	ldr	r2, [r4, #0]
 8004832:	6953      	ldr	r3, [r2, #20]
 8004834:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004838:	6153      	str	r3, [r2, #20]
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800483a:	6822      	ldr	r2, [r4, #0]
 800483c:	6953      	ldr	r3, [r2, #20]
 800483e:	f043 0308 	orr.w	r3, r3, #8
 8004842:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8004844:	6822      	ldr	r2, [r4, #0]
 8004846:	68d3      	ldr	r3, [r2, #12]
 8004848:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800484c:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800484e:	2000      	movs	r0, #0
 8004850:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004852:	2320      	movs	r3, #32
 8004854:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004858:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 800485c:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800485e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8004862:	f7fd fc55 	bl	8002110 <HAL_UART_MspInit>
 8004866:	e7d3      	b.n	8004810 <HAL_HalfDuplex_Init+0xe>
    return HAL_ERROR;
 8004868:	2001      	movs	r0, #1
}
 800486a:	4770      	bx	lr

0800486c <HAL_UART_Transmit>:
{
 800486c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004870:	b082      	sub	sp, #8
 8004872:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8004874:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004878:	b2db      	uxtb	r3, r3
 800487a:	2b20      	cmp	r3, #32
 800487c:	d154      	bne.n	8004928 <HAL_UART_Transmit+0xbc>
 800487e:	4604      	mov	r4, r0
 8004880:	460d      	mov	r5, r1
 8004882:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8004884:	2900      	cmp	r1, #0
 8004886:	d053      	beq.n	8004930 <HAL_UART_Transmit+0xc4>
 8004888:	2a00      	cmp	r2, #0
 800488a:	d053      	beq.n	8004934 <HAL_UART_Transmit+0xc8>
    __HAL_LOCK(huart);
 800488c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004890:	2b01      	cmp	r3, #1
 8004892:	d051      	beq.n	8004938 <HAL_UART_Transmit+0xcc>
 8004894:	2301      	movs	r3, #1
 8004896:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800489a:	2300      	movs	r3, #0
 800489c:	6403      	str	r3, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800489e:	2321      	movs	r3, #33	; 0x21
 80048a0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    tickstart = HAL_GetTick();
 80048a4:	f7fd fd56 	bl	8002354 <HAL_GetTick>
 80048a8:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 80048aa:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 80048ae:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048b2:	68a3      	ldr	r3, [r4, #8]
 80048b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048b8:	d005      	beq.n	80048c6 <HAL_UART_Transmit+0x5a>
      pdata16bits = NULL;
 80048ba:	f04f 0800 	mov.w	r8, #0
    __HAL_UNLOCK(huart);
 80048be:	2300      	movs	r3, #0
 80048c0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 80048c4:	e012      	b.n	80048ec <HAL_UART_Transmit+0x80>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048c6:	6923      	ldr	r3, [r4, #16]
 80048c8:	b113      	cbz	r3, 80048d0 <HAL_UART_Transmit+0x64>
      pdata16bits = NULL;
 80048ca:	f04f 0800 	mov.w	r8, #0
 80048ce:	e7f6      	b.n	80048be <HAL_UART_Transmit+0x52>
      pdata16bits = (uint16_t *) pData;
 80048d0:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 80048d2:	2500      	movs	r5, #0
 80048d4:	e7f3      	b.n	80048be <HAL_UART_Transmit+0x52>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80048d6:	f838 3b02 	ldrh.w	r3, [r8], #2
 80048da:	6822      	ldr	r2, [r4, #0]
 80048dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048e0:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 80048e2:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80048e4:	b292      	uxth	r2, r2
 80048e6:	3a01      	subs	r2, #1
 80048e8:	b292      	uxth	r2, r2
 80048ea:	84e2      	strh	r2, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80048ec:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	b173      	cbz	r3, 8004910 <HAL_UART_Transmit+0xa4>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80048f2:	9600      	str	r6, [sp, #0]
 80048f4:	463b      	mov	r3, r7
 80048f6:	2200      	movs	r2, #0
 80048f8:	2180      	movs	r1, #128	; 0x80
 80048fa:	4620      	mov	r0, r4
 80048fc:	f7ff ff1c 	bl	8004738 <UART_WaitOnFlagUntilTimeout>
 8004900:	b9e0      	cbnz	r0, 800493c <HAL_UART_Transmit+0xd0>
      if (pdata8bits == NULL)
 8004902:	2d00      	cmp	r5, #0
 8004904:	d0e7      	beq.n	80048d6 <HAL_UART_Transmit+0x6a>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004906:	f815 2b01 	ldrb.w	r2, [r5], #1
 800490a:	6823      	ldr	r3, [r4, #0]
 800490c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800490e:	e7e8      	b.n	80048e2 <HAL_UART_Transmit+0x76>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004910:	9600      	str	r6, [sp, #0]
 8004912:	463b      	mov	r3, r7
 8004914:	2200      	movs	r2, #0
 8004916:	2140      	movs	r1, #64	; 0x40
 8004918:	4620      	mov	r0, r4
 800491a:	f7ff ff0d 	bl	8004738 <UART_WaitOnFlagUntilTimeout>
 800491e:	b978      	cbnz	r0, 8004940 <HAL_UART_Transmit+0xd4>
    huart->gState = HAL_UART_STATE_READY;
 8004920:	2320      	movs	r3, #32
 8004922:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_OK;
 8004926:	e000      	b.n	800492a <HAL_UART_Transmit+0xbe>
    return HAL_BUSY;
 8004928:	2002      	movs	r0, #2
}
 800492a:	b002      	add	sp, #8
 800492c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8004930:	2001      	movs	r0, #1
 8004932:	e7fa      	b.n	800492a <HAL_UART_Transmit+0xbe>
 8004934:	2001      	movs	r0, #1
 8004936:	e7f8      	b.n	800492a <HAL_UART_Transmit+0xbe>
    __HAL_LOCK(huart);
 8004938:	2002      	movs	r0, #2
 800493a:	e7f6      	b.n	800492a <HAL_UART_Transmit+0xbe>
        return HAL_TIMEOUT;
 800493c:	2003      	movs	r0, #3
 800493e:	e7f4      	b.n	800492a <HAL_UART_Transmit+0xbe>
      return HAL_TIMEOUT;
 8004940:	2003      	movs	r0, #3
 8004942:	e7f2      	b.n	800492a <HAL_UART_Transmit+0xbe>

08004944 <HAL_UART_Receive>:
{
 8004944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004948:	b082      	sub	sp, #8
 800494a:	461e      	mov	r6, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 800494c:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8004950:	b2db      	uxtb	r3, r3
 8004952:	2b20      	cmp	r3, #32
 8004954:	d15c      	bne.n	8004a10 <HAL_UART_Receive+0xcc>
 8004956:	4604      	mov	r4, r0
 8004958:	460d      	mov	r5, r1
 800495a:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 800495c:	2900      	cmp	r1, #0
 800495e:	d05b      	beq.n	8004a18 <HAL_UART_Receive+0xd4>
 8004960:	2a00      	cmp	r2, #0
 8004962:	d05b      	beq.n	8004a1c <HAL_UART_Receive+0xd8>
    __HAL_LOCK(huart);
 8004964:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004968:	2b01      	cmp	r3, #1
 800496a:	d059      	beq.n	8004a20 <HAL_UART_Receive+0xdc>
 800496c:	2301      	movs	r3, #1
 800496e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004972:	2300      	movs	r3, #0
 8004974:	6403      	str	r3, [r0, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004976:	2222      	movs	r2, #34	; 0x22
 8004978:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800497c:	6303      	str	r3, [r0, #48]	; 0x30
    tickstart = HAL_GetTick();
 800497e:	f7fd fce9 	bl	8002354 <HAL_GetTick>
 8004982:	4607      	mov	r7, r0
    huart->RxXferSize = Size;
 8004984:	f8a4 802c 	strh.w	r8, [r4, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004988:	f8a4 802e 	strh.w	r8, [r4, #46]	; 0x2e
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800498c:	68a3      	ldr	r3, [r4, #8]
 800498e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004992:	d005      	beq.n	80049a0 <HAL_UART_Receive+0x5c>
      pdata16bits = NULL;
 8004994:	f04f 0800 	mov.w	r8, #0
    __HAL_UNLOCK(huart);
 8004998:	2300      	movs	r3, #0
 800499a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    while (huart->RxXferCount > 0U)
 800499e:	e017      	b.n	80049d0 <HAL_UART_Receive+0x8c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049a0:	6923      	ldr	r3, [r4, #16]
 80049a2:	b113      	cbz	r3, 80049aa <HAL_UART_Receive+0x66>
      pdata16bits = NULL;
 80049a4:	f04f 0800 	mov.w	r8, #0
 80049a8:	e7f6      	b.n	8004998 <HAL_UART_Receive+0x54>
      pdata16bits = (uint16_t *) pData;
 80049aa:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 80049ac:	2500      	movs	r5, #0
 80049ae:	e7f3      	b.n	8004998 <HAL_UART_Receive+0x54>
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80049b0:	6823      	ldr	r3, [r4, #0]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049b8:	f828 3b02 	strh.w	r3, [r8], #2
        pdata16bits++;
 80049bc:	e003      	b.n	80049c6 <HAL_UART_Receive+0x82>
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80049be:	6823      	ldr	r3, [r4, #0]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	702b      	strb	r3, [r5, #0]
        pdata8bits++;
 80049c4:	3501      	adds	r5, #1
      huart->RxXferCount--;
 80049c6:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 80049c8:	b292      	uxth	r2, r2
 80049ca:	3a01      	subs	r2, #1
 80049cc:	b292      	uxth	r2, r2
 80049ce:	85e2      	strh	r2, [r4, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80049d0:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	b1bb      	cbz	r3, 8004a06 <HAL_UART_Receive+0xc2>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80049d6:	9600      	str	r6, [sp, #0]
 80049d8:	463b      	mov	r3, r7
 80049da:	2200      	movs	r2, #0
 80049dc:	2120      	movs	r1, #32
 80049de:	4620      	mov	r0, r4
 80049e0:	f7ff feaa 	bl	8004738 <UART_WaitOnFlagUntilTimeout>
 80049e4:	b9f0      	cbnz	r0, 8004a24 <HAL_UART_Receive+0xe0>
      if (pdata8bits == NULL)
 80049e6:	2d00      	cmp	r5, #0
 80049e8:	d0e2      	beq.n	80049b0 <HAL_UART_Receive+0x6c>
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80049ea:	68a3      	ldr	r3, [r4, #8]
 80049ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049f0:	d0e5      	beq.n	80049be <HAL_UART_Receive+0x7a>
 80049f2:	b913      	cbnz	r3, 80049fa <HAL_UART_Receive+0xb6>
 80049f4:	6923      	ldr	r3, [r4, #16]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d0e1      	beq.n	80049be <HAL_UART_Receive+0x7a>
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80049fa:	6823      	ldr	r3, [r4, #0]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a02:	702b      	strb	r3, [r5, #0]
 8004a04:	e7de      	b.n	80049c4 <HAL_UART_Receive+0x80>
    huart->RxState = HAL_UART_STATE_READY;
 8004a06:	2320      	movs	r3, #32
 8004a08:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8004a0c:	2000      	movs	r0, #0
 8004a0e:	e000      	b.n	8004a12 <HAL_UART_Receive+0xce>
    return HAL_BUSY;
 8004a10:	2002      	movs	r0, #2
}
 8004a12:	b002      	add	sp, #8
 8004a14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8004a18:	2001      	movs	r0, #1
 8004a1a:	e7fa      	b.n	8004a12 <HAL_UART_Receive+0xce>
 8004a1c:	2001      	movs	r0, #1
 8004a1e:	e7f8      	b.n	8004a12 <HAL_UART_Receive+0xce>
    __HAL_LOCK(huart);
 8004a20:	2002      	movs	r0, #2
 8004a22:	e7f6      	b.n	8004a12 <HAL_UART_Receive+0xce>
        return HAL_TIMEOUT;
 8004a24:	2003      	movs	r0, #3
 8004a26:	e7f4      	b.n	8004a12 <HAL_UART_Receive+0xce>

08004a28 <HAL_UART_Transmit_IT>:
  if (huart->gState == HAL_UART_STATE_READY)
 8004a28:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	2b20      	cmp	r3, #32
 8004a30:	d119      	bne.n	8004a66 <HAL_UART_Transmit_IT+0x3e>
    if ((pData == NULL) || (Size == 0U))
 8004a32:	b1d1      	cbz	r1, 8004a6a <HAL_UART_Transmit_IT+0x42>
 8004a34:	b1da      	cbz	r2, 8004a6e <HAL_UART_Transmit_IT+0x46>
    __HAL_LOCK(huart);
 8004a36:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	d019      	beq.n	8004a72 <HAL_UART_Transmit_IT+0x4a>
 8004a3e:	2301      	movs	r3, #1
 8004a40:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->pTxBuffPtr = pData;
 8004a44:	6201      	str	r1, [r0, #32]
    huart->TxXferSize = Size;
 8004a46:	8482      	strh	r2, [r0, #36]	; 0x24
    huart->TxXferCount = Size;
 8004a48:	84c2      	strh	r2, [r0, #38]	; 0x26
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	6403      	str	r3, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a4e:	2221      	movs	r2, #33	; 0x21
 8004a50:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    __HAL_UNLOCK(huart);
 8004a54:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8004a58:	6801      	ldr	r1, [r0, #0]
 8004a5a:	68ca      	ldr	r2, [r1, #12]
 8004a5c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004a60:	60ca      	str	r2, [r1, #12]
    return HAL_OK;
 8004a62:	4618      	mov	r0, r3
 8004a64:	4770      	bx	lr
    return HAL_BUSY;
 8004a66:	2002      	movs	r0, #2
 8004a68:	4770      	bx	lr
      return HAL_ERROR;
 8004a6a:	2001      	movs	r0, #1
 8004a6c:	4770      	bx	lr
 8004a6e:	2001      	movs	r0, #1
 8004a70:	4770      	bx	lr
    __HAL_LOCK(huart);
 8004a72:	2002      	movs	r0, #2
}
 8004a74:	4770      	bx	lr

08004a76 <UART_EndTransmit_IT>:
{
 8004a76:	b508      	push	{r3, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004a78:	6801      	ldr	r1, [r0, #0]
 8004a7a:	68ca      	ldr	r2, [r1, #12]
 8004a7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a80:	60ca      	str	r2, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 8004a82:	2220      	movs	r2, #32
 8004a84:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  HAL_UART_TxCpltCallback(huart);
 8004a88:	f7fc faac 	bl	8000fe4 <HAL_UART_TxCpltCallback>
}
 8004a8c:	2000      	movs	r0, #0
 8004a8e:	bd08      	pop	{r3, pc}

08004a90 <HAL_UART_ErrorCallback>:
}
 8004a90:	4770      	bx	lr

08004a92 <UART_DMAAbortOnError>:
{
 8004a92:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a94:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8004a96:	2300      	movs	r3, #0
 8004a98:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004a9a:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8004a9c:	f7ff fff8 	bl	8004a90 <HAL_UART_ErrorCallback>
}
 8004aa0:	bd08      	pop	{r3, pc}

08004aa2 <HAL_UARTEx_RxEventCallback>:
}
 8004aa2:	4770      	bx	lr

08004aa4 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004aa4:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	2b22      	cmp	r3, #34	; 0x22
 8004aac:	d160      	bne.n	8004b70 <UART_Receive_IT+0xcc>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004aae:	6883      	ldr	r3, [r0, #8]
 8004ab0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ab4:	d046      	beq.n	8004b44 <UART_Receive_IT+0xa0>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004ab6:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004ab8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004abc:	d004      	beq.n	8004ac8 <UART_Receive_IT+0x24>
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d14d      	bne.n	8004b5e <UART_Receive_IT+0xba>
 8004ac2:	6903      	ldr	r3, [r0, #16]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d14a      	bne.n	8004b5e <UART_Receive_IT+0xba>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004ac8:	6803      	ldr	r3, [r0, #0]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 8004ace:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004ad0:	3301      	adds	r3, #1
 8004ad2:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8004ad4:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	3b01      	subs	r3, #1
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d148      	bne.n	8004b74 <UART_Receive_IT+0xd0>
{
 8004ae2:	b500      	push	{lr}
 8004ae4:	b083      	sub	sp, #12
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004ae6:	6802      	ldr	r2, [r0, #0]
 8004ae8:	68d3      	ldr	r3, [r2, #12]
 8004aea:	f023 0320 	bic.w	r3, r3, #32
 8004aee:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004af0:	6802      	ldr	r2, [r0, #0]
 8004af2:	68d3      	ldr	r3, [r2, #12]
 8004af4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004af8:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004afa:	6802      	ldr	r2, [r0, #0]
 8004afc:	6953      	ldr	r3, [r2, #20]
 8004afe:	f023 0301 	bic.w	r3, r3, #1
 8004b02:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8004b04:	2320      	movs	r3, #32
 8004b06:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b0a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d12c      	bne.n	8004b6a <UART_Receive_IT+0xc6>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b10:	2300      	movs	r3, #0
 8004b12:	6303      	str	r3, [r0, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b14:	6802      	ldr	r2, [r0, #0]
 8004b16:	68d3      	ldr	r3, [r2, #12]
 8004b18:	f023 0310 	bic.w	r3, r3, #16
 8004b1c:	60d3      	str	r3, [r2, #12]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004b1e:	6803      	ldr	r3, [r0, #0]
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	f012 0f10 	tst.w	r2, #16
 8004b26:	d006      	beq.n	8004b36 <UART_Receive_IT+0x92>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004b28:	2200      	movs	r2, #0
 8004b2a:	9201      	str	r2, [sp, #4]
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	9201      	str	r2, [sp, #4]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	9301      	str	r3, [sp, #4]
 8004b34:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b36:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8004b38:	f7ff ffb3 	bl	8004aa2 <HAL_UARTEx_RxEventCallback>
      return HAL_OK;
 8004b3c:	2000      	movs	r0, #0
}
 8004b3e:	b003      	add	sp, #12
 8004b40:	f85d fb04 	ldr.w	pc, [sp], #4
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b44:	6902      	ldr	r2, [r0, #16]
 8004b46:	2a00      	cmp	r2, #0
 8004b48:	d1b5      	bne.n	8004ab6 <UART_Receive_IT+0x12>
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004b4a:	6a82      	ldr	r2, [r0, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004b4c:	6803      	ldr	r3, [r0, #0]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b54:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 8004b56:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004b58:	3302      	adds	r3, #2
 8004b5a:	6283      	str	r3, [r0, #40]	; 0x28
 8004b5c:	e7ba      	b.n	8004ad4 <UART_Receive_IT+0x30>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004b5e:	6803      	ldr	r3, [r0, #0]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b66:	7013      	strb	r3, [r2, #0]
 8004b68:	e7b1      	b.n	8004ace <UART_Receive_IT+0x2a>
       HAL_UART_RxCpltCallback(huart);
 8004b6a:	f7fc fa0b 	bl	8000f84 <HAL_UART_RxCpltCallback>
 8004b6e:	e7e5      	b.n	8004b3c <UART_Receive_IT+0x98>
    return HAL_BUSY;
 8004b70:	2002      	movs	r0, #2
 8004b72:	4770      	bx	lr
    return HAL_OK;
 8004b74:	2000      	movs	r0, #0
}
 8004b76:	4770      	bx	lr

08004b78 <HAL_UART_IRQHandler>:
{
 8004b78:	b530      	push	{r4, r5, lr}
 8004b7a:	b083      	sub	sp, #12
 8004b7c:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004b7e:	6802      	ldr	r2, [r0, #0]
 8004b80:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004b82:	68d0      	ldr	r0, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004b84:	6951      	ldr	r1, [r2, #20]
  if (errorflags == RESET)
 8004b86:	f013 050f 	ands.w	r5, r3, #15
 8004b8a:	d105      	bne.n	8004b98 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b8c:	f013 0f20 	tst.w	r3, #32
 8004b90:	d002      	beq.n	8004b98 <HAL_UART_IRQHandler+0x20>
 8004b92:	f010 0f20 	tst.w	r0, #32
 8004b96:	d119      	bne.n	8004bcc <HAL_UART_IRQHandler+0x54>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004b98:	b12d      	cbz	r5, 8004ba6 <HAL_UART_IRQHandler+0x2e>
 8004b9a:	f011 0101 	ands.w	r1, r1, #1
 8004b9e:	d119      	bne.n	8004bd4 <HAL_UART_IRQHandler+0x5c>
 8004ba0:	f410 7f90 	tst.w	r0, #288	; 0x120
 8004ba4:	d116      	bne.n	8004bd4 <HAL_UART_IRQHandler+0x5c>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ba6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004ba8:	2901      	cmp	r1, #1
 8004baa:	d075      	beq.n	8004c98 <HAL_UART_IRQHandler+0x120>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004bac:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004bb0:	d003      	beq.n	8004bba <HAL_UART_IRQHandler+0x42>
 8004bb2:	f010 0f80 	tst.w	r0, #128	; 0x80
 8004bb6:	f040 80d7 	bne.w	8004d68 <HAL_UART_IRQHandler+0x1f0>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004bba:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004bbe:	d003      	beq.n	8004bc8 <HAL_UART_IRQHandler+0x50>
 8004bc0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004bc4:	f040 80d4 	bne.w	8004d70 <HAL_UART_IRQHandler+0x1f8>
}
 8004bc8:	b003      	add	sp, #12
 8004bca:	bd30      	pop	{r4, r5, pc}
      UART_Receive_IT(huart);
 8004bcc:	4620      	mov	r0, r4
 8004bce:	f7ff ff69 	bl	8004aa4 <UART_Receive_IT>
      return;
 8004bd2:	e7f9      	b.n	8004bc8 <HAL_UART_IRQHandler+0x50>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004bd4:	f013 0f01 	tst.w	r3, #1
 8004bd8:	d006      	beq.n	8004be8 <HAL_UART_IRQHandler+0x70>
 8004bda:	f410 7f80 	tst.w	r0, #256	; 0x100
 8004bde:	d003      	beq.n	8004be8 <HAL_UART_IRQHandler+0x70>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004be0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004be2:	f042 0201 	orr.w	r2, r2, #1
 8004be6:	6422      	str	r2, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004be8:	f013 0f04 	tst.w	r3, #4
 8004bec:	d004      	beq.n	8004bf8 <HAL_UART_IRQHandler+0x80>
 8004bee:	b119      	cbz	r1, 8004bf8 <HAL_UART_IRQHandler+0x80>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004bf0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004bf2:	f042 0202 	orr.w	r2, r2, #2
 8004bf6:	6422      	str	r2, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004bf8:	f013 0f02 	tst.w	r3, #2
 8004bfc:	d004      	beq.n	8004c08 <HAL_UART_IRQHandler+0x90>
 8004bfe:	b119      	cbz	r1, 8004c08 <HAL_UART_IRQHandler+0x90>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004c00:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004c02:	f042 0204 	orr.w	r2, r2, #4
 8004c06:	6422      	str	r2, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004c08:	f013 0f08 	tst.w	r3, #8
 8004c0c:	d007      	beq.n	8004c1e <HAL_UART_IRQHandler+0xa6>
 8004c0e:	f010 0f20 	tst.w	r0, #32
 8004c12:	d100      	bne.n	8004c16 <HAL_UART_IRQHandler+0x9e>
 8004c14:	b119      	cbz	r1, 8004c1e <HAL_UART_IRQHandler+0xa6>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004c16:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004c18:	f042 0208 	orr.w	r2, r2, #8
 8004c1c:	6422      	str	r2, [r4, #64]	; 0x40
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004c1e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004c20:	2a00      	cmp	r2, #0
 8004c22:	d0d1      	beq.n	8004bc8 <HAL_UART_IRQHandler+0x50>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c24:	f013 0f20 	tst.w	r3, #32
 8004c28:	d002      	beq.n	8004c30 <HAL_UART_IRQHandler+0xb8>
 8004c2a:	f010 0f20 	tst.w	r0, #32
 8004c2e:	d121      	bne.n	8004c74 <HAL_UART_IRQHandler+0xfc>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004c30:	6823      	ldr	r3, [r4, #0]
 8004c32:	695b      	ldr	r3, [r3, #20]
 8004c34:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004c38:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004c3a:	f012 0f08 	tst.w	r2, #8
 8004c3e:	d100      	bne.n	8004c42 <HAL_UART_IRQHandler+0xca>
 8004c40:	b323      	cbz	r3, 8004c8c <HAL_UART_IRQHandler+0x114>
        UART_EndRxTransfer(huart);
 8004c42:	4620      	mov	r0, r4
 8004c44:	f7ff fce4 	bl	8004610 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c48:	6823      	ldr	r3, [r4, #0]
 8004c4a:	695a      	ldr	r2, [r3, #20]
 8004c4c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004c50:	d018      	beq.n	8004c84 <HAL_UART_IRQHandler+0x10c>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c52:	695a      	ldr	r2, [r3, #20]
 8004c54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c58:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8004c5a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004c5c:	b173      	cbz	r3, 8004c7c <HAL_UART_IRQHandler+0x104>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004c5e:	4a46      	ldr	r2, [pc, #280]	; (8004d78 <HAL_UART_IRQHandler+0x200>)
 8004c60:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004c62:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004c64:	f7fd fc1c 	bl	80024a0 <HAL_DMA_Abort_IT>
 8004c68:	2800      	cmp	r0, #0
 8004c6a:	d0ad      	beq.n	8004bc8 <HAL_UART_IRQHandler+0x50>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004c6c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004c6e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004c70:	4798      	blx	r3
 8004c72:	e7a9      	b.n	8004bc8 <HAL_UART_IRQHandler+0x50>
        UART_Receive_IT(huart);
 8004c74:	4620      	mov	r0, r4
 8004c76:	f7ff ff15 	bl	8004aa4 <UART_Receive_IT>
 8004c7a:	e7d9      	b.n	8004c30 <HAL_UART_IRQHandler+0xb8>
            HAL_UART_ErrorCallback(huart);
 8004c7c:	4620      	mov	r0, r4
 8004c7e:	f7ff ff07 	bl	8004a90 <HAL_UART_ErrorCallback>
 8004c82:	e7a1      	b.n	8004bc8 <HAL_UART_IRQHandler+0x50>
          HAL_UART_ErrorCallback(huart);
 8004c84:	4620      	mov	r0, r4
 8004c86:	f7ff ff03 	bl	8004a90 <HAL_UART_ErrorCallback>
 8004c8a:	e79d      	b.n	8004bc8 <HAL_UART_IRQHandler+0x50>
        HAL_UART_ErrorCallback(huart);
 8004c8c:	4620      	mov	r0, r4
 8004c8e:	f7ff feff 	bl	8004a90 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c92:	2300      	movs	r3, #0
 8004c94:	6423      	str	r3, [r4, #64]	; 0x40
    return;
 8004c96:	e797      	b.n	8004bc8 <HAL_UART_IRQHandler+0x50>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004c98:	f013 0f10 	tst.w	r3, #16
 8004c9c:	d086      	beq.n	8004bac <HAL_UART_IRQHandler+0x34>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004c9e:	f010 0f10 	tst.w	r0, #16
 8004ca2:	d083      	beq.n	8004bac <HAL_UART_IRQHandler+0x34>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	9301      	str	r3, [sp, #4]
 8004ca8:	6813      	ldr	r3, [r2, #0]
 8004caa:	9301      	str	r3, [sp, #4]
 8004cac:	6853      	ldr	r3, [r2, #4]
 8004cae:	9301      	str	r3, [sp, #4]
 8004cb0:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cb2:	6953      	ldr	r3, [r2, #20]
 8004cb4:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004cb8:	d032      	beq.n	8004d20 <HAL_UART_IRQHandler+0x1a8>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004cba:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004cbc:	680b      	ldr	r3, [r1, #0]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	b29b      	uxth	r3, r3
      if (  (nb_remaining_rx_data > 0U)
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d080      	beq.n	8004bc8 <HAL_UART_IRQHandler+0x50>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004cc6:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
 8004cc8:	4298      	cmp	r0, r3
 8004cca:	f67f af7d 	bls.w	8004bc8 <HAL_UART_IRQHandler+0x50>
        huart->RxXferCount = nb_remaining_rx_data;
 8004cce:	85e3      	strh	r3, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004cd0:	698b      	ldr	r3, [r1, #24]
 8004cd2:	2b20      	cmp	r3, #32
 8004cd4:	d108      	bne.n	8004ce8 <HAL_UART_IRQHandler+0x170>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004cd6:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8004cd8:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8004cda:	b29b      	uxth	r3, r3
 8004cdc:	1ac9      	subs	r1, r1, r3
 8004cde:	b289      	uxth	r1, r1
 8004ce0:	4620      	mov	r0, r4
 8004ce2:	f7ff fede 	bl	8004aa2 <HAL_UARTEx_RxEventCallback>
      return;
 8004ce6:	e76f      	b.n	8004bc8 <HAL_UART_IRQHandler+0x50>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ce8:	68d3      	ldr	r3, [r2, #12]
 8004cea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004cee:	60d3      	str	r3, [r2, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cf0:	6822      	ldr	r2, [r4, #0]
 8004cf2:	6953      	ldr	r3, [r2, #20]
 8004cf4:	f023 0301 	bic.w	r3, r3, #1
 8004cf8:	6153      	str	r3, [r2, #20]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004cfa:	6822      	ldr	r2, [r4, #0]
 8004cfc:	6953      	ldr	r3, [r2, #20]
 8004cfe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d02:	6153      	str	r3, [r2, #20]
          huart->RxState = HAL_UART_STATE_READY;
 8004d04:	2320      	movs	r3, #32
 8004d06:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	6323      	str	r3, [r4, #48]	; 0x30
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d0e:	6822      	ldr	r2, [r4, #0]
 8004d10:	68d3      	ldr	r3, [r2, #12]
 8004d12:	f023 0310 	bic.w	r3, r3, #16
 8004d16:	60d3      	str	r3, [r2, #12]
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004d18:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004d1a:	f7fd fb9f 	bl	800245c <HAL_DMA_Abort>
 8004d1e:	e7da      	b.n	8004cd6 <HAL_UART_IRQHandler+0x15e>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004d20:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8004d22:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	1ac9      	subs	r1, r1, r3
 8004d28:	b289      	uxth	r1, r1
      if (  (huart->RxXferCount > 0U)
 8004d2a:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8004d2c:	b29b      	uxth	r3, r3
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	f43f af4a 	beq.w	8004bc8 <HAL_UART_IRQHandler+0x50>
          &&(nb_rx_data > 0U) )
 8004d34:	2900      	cmp	r1, #0
 8004d36:	f43f af47 	beq.w	8004bc8 <HAL_UART_IRQHandler+0x50>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d3a:	68d3      	ldr	r3, [r2, #12]
 8004d3c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d40:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d42:	6822      	ldr	r2, [r4, #0]
 8004d44:	6953      	ldr	r3, [r2, #20]
 8004d46:	f023 0301 	bic.w	r3, r3, #1
 8004d4a:	6153      	str	r3, [r2, #20]
        huart->RxState = HAL_UART_STATE_READY;
 8004d4c:	2320      	movs	r3, #32
 8004d4e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d52:	2300      	movs	r3, #0
 8004d54:	6323      	str	r3, [r4, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d56:	6822      	ldr	r2, [r4, #0]
 8004d58:	68d3      	ldr	r3, [r2, #12]
 8004d5a:	f023 0310 	bic.w	r3, r3, #16
 8004d5e:	60d3      	str	r3, [r2, #12]
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004d60:	4620      	mov	r0, r4
 8004d62:	f7ff fe9e 	bl	8004aa2 <HAL_UARTEx_RxEventCallback>
      return;
 8004d66:	e72f      	b.n	8004bc8 <HAL_UART_IRQHandler+0x50>
    UART_Transmit_IT(huart);
 8004d68:	4620      	mov	r0, r4
 8004d6a:	f7ff fc6a 	bl	8004642 <UART_Transmit_IT>
    return;
 8004d6e:	e72b      	b.n	8004bc8 <HAL_UART_IRQHandler+0x50>
    UART_EndTransmit_IT(huart);
 8004d70:	4620      	mov	r0, r4
 8004d72:	f7ff fe80 	bl	8004a76 <UART_EndTransmit_IT>
    return;
 8004d76:	e727      	b.n	8004bc8 <HAL_UART_IRQHandler+0x50>
 8004d78:	08004a93 	.word	0x08004a93

08004d7c <UART_Start_Receive_IT>:
{
 8004d7c:	4603      	mov	r3, r0
  huart->pRxBuffPtr = pData;
 8004d7e:	6281      	str	r1, [r0, #40]	; 0x28
  huart->RxXferSize = Size;
 8004d80:	8582      	strh	r2, [r0, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004d82:	85c2      	strh	r2, [r0, #46]	; 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d84:	2000      	movs	r0, #0
 8004d86:	6418      	str	r0, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004d88:	2222      	movs	r2, #34	; 0x22
 8004d8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  __HAL_UNLOCK(huart);
 8004d8e:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004d92:	6819      	ldr	r1, [r3, #0]
 8004d94:	68ca      	ldr	r2, [r1, #12]
 8004d96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d9a:	60ca      	str	r2, [r1, #12]
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004d9c:	6819      	ldr	r1, [r3, #0]
 8004d9e:	694a      	ldr	r2, [r1, #20]
 8004da0:	f042 0201 	orr.w	r2, r2, #1
 8004da4:	614a      	str	r2, [r1, #20]
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	68d3      	ldr	r3, [r2, #12]
 8004daa:	f043 0320 	orr.w	r3, r3, #32
 8004dae:	60d3      	str	r3, [r2, #12]
}
 8004db0:	4770      	bx	lr

08004db2 <HAL_UART_Receive_IT>:
{
 8004db2:	b508      	push	{r3, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8004db4:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	2b20      	cmp	r3, #32
 8004dbc:	d10d      	bne.n	8004dda <HAL_UART_Receive_IT+0x28>
    if ((pData == NULL) || (Size == 0U))
 8004dbe:	b171      	cbz	r1, 8004dde <HAL_UART_Receive_IT+0x2c>
 8004dc0:	b17a      	cbz	r2, 8004de2 <HAL_UART_Receive_IT+0x30>
    __HAL_LOCK(huart);
 8004dc2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004dc6:	2b01      	cmp	r3, #1
 8004dc8:	d00d      	beq.n	8004de6 <HAL_UART_Receive_IT+0x34>
 8004dca:	2301      	movs	r3, #1
 8004dcc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	6303      	str	r3, [r0, #48]	; 0x30
    return(UART_Start_Receive_IT(huart, pData, Size));
 8004dd4:	f7ff ffd2 	bl	8004d7c <UART_Start_Receive_IT>
 8004dd8:	e000      	b.n	8004ddc <HAL_UART_Receive_IT+0x2a>
    return HAL_BUSY;
 8004dda:	2002      	movs	r0, #2
}
 8004ddc:	bd08      	pop	{r3, pc}
      return HAL_ERROR;
 8004dde:	2001      	movs	r0, #1
 8004de0:	e7fc      	b.n	8004ddc <HAL_UART_Receive_IT+0x2a>
 8004de2:	2001      	movs	r0, #1
 8004de4:	e7fa      	b.n	8004ddc <HAL_UART_Receive_IT+0x2a>
    __HAL_LOCK(huart);
 8004de6:	2002      	movs	r0, #2
 8004de8:	e7f8      	b.n	8004ddc <HAL_UART_Receive_IT+0x2a>

08004dea <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004dea:	b084      	sub	sp, #16
 8004dec:	a801      	add	r0, sp, #4
 8004dee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8004df2:	2000      	movs	r0, #0
 8004df4:	b004      	add	sp, #16
 8004df6:	4770      	bx	lr

08004df8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004df8:	4603      	mov	r3, r0
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004dfa:	2000      	movs	r0, #0
 8004dfc:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004e00:	f44f 423f 	mov.w	r2, #48896	; 0xbf00
 8004e04:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
}
 8004e08:	4770      	bx	lr

08004e0a <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004e0a:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8004e0e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004e12:	045b      	lsls	r3, r3, #17
 8004e14:	0c5b      	lsrs	r3, r3, #17
 8004e16:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 8004e1a:	2000      	movs	r0, #0
 8004e1c:	4770      	bx	lr

08004e1e <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8004e1e:	2000      	movs	r0, #0
 8004e20:	4770      	bx	lr

08004e22 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004e22:	b084      	sub	sp, #16
 8004e24:	4684      	mov	ip, r0
 8004e26:	a801      	add	r0, sp, #4
 8004e28:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	f8ac 3040 	strh.w	r3, [ip, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004e32:	2000      	movs	r0, #0
 8004e34:	f8ac 0040 	strh.w	r0, [ip, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004e38:	f8ac 0044 	strh.w	r0, [ip, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004e3c:	f8ac 0050 	strh.w	r0, [ip, #80]	; 0x50

  return HAL_OK;
}
 8004e40:	b004      	add	sp, #16
 8004e42:	4770      	bx	lr

08004e44 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004e44:	b510      	push	{r4, lr}
 8004e46:	4603      	mov	r3, r0
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004e48:	f891 c000 	ldrb.w	ip, [r1]
 8004e4c:	f830 202c 	ldrh.w	r2, [r0, ip, lsl #2]
 8004e50:	b292      	uxth	r2, r2
 8004e52:	f422 42ec 	bic.w	r2, r2, #30208	; 0x7600
 8004e56:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004e5a:	b292      	uxth	r2, r2

  /* initialize Endpoint */
  switch (ep->type)
 8004e5c:	78c8      	ldrb	r0, [r1, #3]
 8004e5e:	2803      	cmp	r0, #3
 8004e60:	d861      	bhi.n	8004f26 <USB_ActivateEndpoint+0xe2>
 8004e62:	e8df f000 	tbb	[pc, r0]
 8004e66:	5c55      	.short	0x5c55
 8004e68:	5802      	.short	0x5802
 8004e6a:	2000      	movs	r0, #0
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004e6c:	f248 0e80 	movw	lr, #32896	; 0x8080
 8004e70:	ea42 020e 	orr.w	r2, r2, lr
 8004e74:	f823 202c 	strh.w	r2, [r3, ip, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004e78:	f891 c000 	ldrb.w	ip, [r1]
 8004e7c:	f833 202c 	ldrh.w	r2, [r3, ip, lsl #2]
 8004e80:	b292      	uxth	r2, r2
 8004e82:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004e86:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004e8a:	ea4c 0202 	orr.w	r2, ip, r2
 8004e8e:	ea42 020e 	orr.w	r2, r2, lr
 8004e92:	f823 202c 	strh.w	r2, [r3, ip, lsl #2]

  if (ep->doublebuffer == 0U)
 8004e96:	7b0a      	ldrb	r2, [r1, #12]
 8004e98:	2a00      	cmp	r2, #0
 8004e9a:	f040 80c4 	bne.w	8005026 <USB_ActivateEndpoint+0x1e2>
  {
    if (ep->is_in != 0U)
 8004e9e:	784a      	ldrb	r2, [r1, #1]
 8004ea0:	2a00      	cmp	r2, #0
 8004ea2:	d051      	beq.n	8004f48 <USB_ActivateEndpoint+0x104>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004ea4:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8004ea8:	b292      	uxth	r2, r2
 8004eaa:	441a      	add	r2, r3
 8004eac:	780c      	ldrb	r4, [r1, #0]
 8004eae:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 8004eb2:	f8b1 c006 	ldrh.w	ip, [r1, #6]
 8004eb6:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8004eba:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8004ebe:	f8a2 c400 	strh.w	ip, [r2, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004ec2:	780c      	ldrb	r4, [r1, #0]
 8004ec4:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8004ec8:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004ecc:	d00c      	beq.n	8004ee8 <USB_ActivateEndpoint+0xa4>
 8004ece:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8004ed2:	b292      	uxth	r2, r2
 8004ed4:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004ed8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004edc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ee0:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8004ee4:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8004ee8:	78ca      	ldrb	r2, [r1, #3]
 8004eea:	2a01      	cmp	r2, #1
 8004eec:	d01d      	beq.n	8004f2a <USB_ActivateEndpoint+0xe6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004eee:	7809      	ldrb	r1, [r1, #0]
 8004ef0:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8004ef4:	b292      	uxth	r2, r2
 8004ef6:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004efa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004efe:	f082 0220 	eor.w	r2, r2, #32
 8004f02:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f06:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004f0a:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8004f0e:	e06a      	b.n	8004fe6 <USB_ActivateEndpoint+0x1a2>
      wEpRegVal |= USB_EP_CONTROL;
 8004f10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
      break;
 8004f14:	e7aa      	b.n	8004e6c <USB_ActivateEndpoint+0x28>
      wEpRegVal |= USB_EP_INTERRUPT;
 8004f16:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
  HAL_StatusTypeDef ret = HAL_OK;
 8004f1a:	2000      	movs	r0, #0
      break;
 8004f1c:	e7a6      	b.n	8004e6c <USB_ActivateEndpoint+0x28>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004f1e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
  HAL_StatusTypeDef ret = HAL_OK;
 8004f22:	2000      	movs	r0, #0
      break;
 8004f24:	e7a2      	b.n	8004e6c <USB_ActivateEndpoint+0x28>
      ret = HAL_ERROR;
 8004f26:	2001      	movs	r0, #1
 8004f28:	e7a0      	b.n	8004e6c <USB_ActivateEndpoint+0x28>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004f2a:	7809      	ldrb	r1, [r1, #0]
 8004f2c:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8004f30:	b292      	uxth	r2, r2
 8004f32:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004f36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f3a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f3e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004f42:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8004f46:	e04e      	b.n	8004fe6 <USB_ActivateEndpoint+0x1a2>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004f48:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8004f4c:	b292      	uxth	r2, r2
 8004f4e:	441a      	add	r2, r3
 8004f50:	780c      	ldrb	r4, [r1, #0]
 8004f52:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 8004f56:	f8b1 c006 	ldrh.w	ip, [r1, #6]
 8004f5a:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8004f5e:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8004f62:	f8a2 c408 	strh.w	ip, [r2, #1032]	; 0x408

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004f66:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8004f6a:	b292      	uxth	r2, r2
 8004f6c:	441a      	add	r2, r3
 8004f6e:	780c      	ldrb	r4, [r1, #0]
 8004f70:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 8004f74:	690c      	ldr	r4, [r1, #16]
 8004f76:	bbbc      	cbnz	r4, 8004fe8 <USB_ActivateEndpoint+0x1a4>
 8004f78:	f8b2 c40c 	ldrh.w	ip, [r2, #1036]	; 0x40c
 8004f7c:	fa1f fc8c 	uxth.w	ip, ip
 8004f80:	f42c 4cf8 	bic.w	ip, ip, #31744	; 0x7c00
 8004f84:	fa1f fc8c 	uxth.w	ip, ip
 8004f88:	f8a2 c40c 	strh.w	ip, [r2, #1036]	; 0x40c
 8004f8c:	f8b2 c40c 	ldrh.w	ip, [r2, #1036]	; 0x40c
 8004f90:	ea6f 4c4c 	mvn.w	ip, ip, lsl #17
 8004f94:	ea6f 4c5c 	mvn.w	ip, ip, lsr #17
 8004f98:	fa1f fc8c 	uxth.w	ip, ip
 8004f9c:	f8a2 c40c 	strh.w	ip, [r2, #1036]	; 0x40c
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004fa0:	780c      	ldrb	r4, [r1, #0]
 8004fa2:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8004fa6:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8004faa:	d00c      	beq.n	8004fc6 <USB_ActivateEndpoint+0x182>
 8004fac:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8004fb0:	b292      	uxth	r2, r2
 8004fb2:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004fb6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004fba:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8004fbe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004fc2:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004fc6:	7809      	ldrb	r1, [r1, #0]
 8004fc8:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8004fcc:	b292      	uxth	r2, r2
 8004fce:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004fd2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004fd6:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8004fda:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004fde:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004fe2:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return ret;
}
 8004fe6:	bd10      	pop	{r4, pc}
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004fe8:	2c3e      	cmp	r4, #62	; 0x3e
 8004fea:	d80d      	bhi.n	8005008 <USB_ActivateEndpoint+0x1c4>
 8004fec:	ea4f 0c54 	mov.w	ip, r4, lsr #1
 8004ff0:	f014 0f01 	tst.w	r4, #1
 8004ff4:	d001      	beq.n	8004ffa <USB_ActivateEndpoint+0x1b6>
 8004ff6:	f10c 0c01 	add.w	ip, ip, #1
 8004ffa:	ea4f 2c8c 	mov.w	ip, ip, lsl #10
 8004ffe:	fa1f fc8c 	uxth.w	ip, ip
 8005002:	f8a2 c40c 	strh.w	ip, [r2, #1036]	; 0x40c
 8005006:	e7cb      	b.n	8004fa0 <USB_ActivateEndpoint+0x15c>
 8005008:	ea4f 1c54 	mov.w	ip, r4, lsr #5
 800500c:	f014 0f1f 	tst.w	r4, #31
 8005010:	d101      	bne.n	8005016 <USB_ActivateEndpoint+0x1d2>
 8005012:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005016:	ea6f 64cc 	mvn.w	r4, ip, lsl #27
 800501a:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 800501e:	b2a4      	uxth	r4, r4
 8005020:	f8a2 440c 	strh.w	r4, [r2, #1036]	; 0x40c
 8005024:	e7bc      	b.n	8004fa0 <USB_ActivateEndpoint+0x15c>
    PCD_SET_EP_DBUF(USBx, ep->num);
 8005026:	f891 c000 	ldrb.w	ip, [r1]
 800502a:	f833 202c 	ldrh.w	r2, [r3, ip, lsl #2]
 800502e:	b292      	uxth	r2, r2
 8005030:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8005034:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005038:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 800503c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005040:	f823 202c 	strh.w	r2, [r3, ip, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005044:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8005048:	b292      	uxth	r2, r2
 800504a:	441a      	add	r2, r3
 800504c:	f891 c000 	ldrb.w	ip, [r1]
 8005050:	eb02 120c 	add.w	r2, r2, ip, lsl #4
 8005054:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 8005058:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800505c:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8005060:	f8a2 c400 	strh.w	ip, [r2, #1024]	; 0x400
 8005064:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8005068:	b292      	uxth	r2, r2
 800506a:	441a      	add	r2, r3
 800506c:	f891 c000 	ldrb.w	ip, [r1]
 8005070:	eb02 120c 	add.w	r2, r2, ip, lsl #4
 8005074:	f8b1 c00a 	ldrh.w	ip, [r1, #10]
 8005078:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800507c:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8005080:	f8a2 c408 	strh.w	ip, [r2, #1032]	; 0x408
    if (ep->is_in == 0U)
 8005084:	784a      	ldrb	r2, [r1, #1]
 8005086:	2a00      	cmp	r2, #0
 8005088:	d141      	bne.n	800510e <USB_ActivateEndpoint+0x2ca>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800508a:	780c      	ldrb	r4, [r1, #0]
 800508c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8005090:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8005094:	d00c      	beq.n	80050b0 <USB_ActivateEndpoint+0x26c>
 8005096:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800509a:	b292      	uxth	r2, r2
 800509c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80050a0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80050a4:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80050a8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80050ac:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80050b0:	780c      	ldrb	r4, [r1, #0]
 80050b2:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80050b6:	f012 0f40 	tst.w	r2, #64	; 0x40
 80050ba:	d00c      	beq.n	80050d6 <USB_ActivateEndpoint+0x292>
 80050bc:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80050c0:	b292      	uxth	r2, r2
 80050c2:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80050c6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80050ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80050ce:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80050d2:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80050d6:	f891 c000 	ldrb.w	ip, [r1]
 80050da:	f833 202c 	ldrh.w	r2, [r3, ip, lsl #2]
 80050de:	b292      	uxth	r2, r2
 80050e0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80050e4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80050e8:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 80050ec:	f248 0480 	movw	r4, #32896	; 0x8080
 80050f0:	4322      	orrs	r2, r4
 80050f2:	f823 202c 	strh.w	r2, [r3, ip, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80050f6:	7809      	ldrb	r1, [r1, #0]
 80050f8:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80050fc:	b292      	uxth	r2, r2
 80050fe:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8005102:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005106:	4322      	orrs	r2, r4
 8005108:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 800510c:	e76b      	b.n	8004fe6 <USB_ActivateEndpoint+0x1a2>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800510e:	780c      	ldrb	r4, [r1, #0]
 8005110:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8005114:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8005118:	d00c      	beq.n	8005134 <USB_ActivateEndpoint+0x2f0>
 800511a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800511e:	b292      	uxth	r2, r2
 8005120:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8005124:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005128:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800512c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005130:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005134:	780c      	ldrb	r4, [r1, #0]
 8005136:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800513a:	f012 0f40 	tst.w	r2, #64	; 0x40
 800513e:	d00c      	beq.n	800515a <USB_ActivateEndpoint+0x316>
 8005140:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8005144:	b292      	uxth	r2, r2
 8005146:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800514a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800514e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005152:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8005156:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 800515a:	78ca      	ldrb	r2, [r1, #3]
 800515c:	2a01      	cmp	r2, #1
 800515e:	d01e      	beq.n	800519e <USB_ActivateEndpoint+0x35a>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005160:	780c      	ldrb	r4, [r1, #0]
 8005162:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8005166:	b292      	uxth	r2, r2
 8005168:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800516c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005170:	f082 0220 	eor.w	r2, r2, #32
 8005174:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005178:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800517c:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005180:	7809      	ldrb	r1, [r1, #0]
 8005182:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8005186:	b292      	uxth	r2, r2
 8005188:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800518c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005190:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005194:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005198:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 800519c:	e723      	b.n	8004fe6 <USB_ActivateEndpoint+0x1a2>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800519e:	780c      	ldrb	r4, [r1, #0]
 80051a0:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80051a4:	b292      	uxth	r2, r2
 80051a6:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80051aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80051b2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80051b6:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
 80051ba:	e7e1      	b.n	8005180 <USB_ActivateEndpoint+0x33c>

080051bc <USB_DeactivateEndpoint>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 80051bc:	7b0b      	ldrb	r3, [r1, #12]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d146      	bne.n	8005250 <USB_DeactivateEndpoint+0x94>
  {
    if (ep->is_in != 0U)
 80051c2:	784b      	ldrb	r3, [r1, #1]
 80051c4:	b313      	cbz	r3, 800520c <USB_DeactivateEndpoint+0x50>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80051c6:	780a      	ldrb	r2, [r1, #0]
 80051c8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80051cc:	f013 0f40 	tst.w	r3, #64	; 0x40
 80051d0:	d00c      	beq.n	80051ec <USB_DeactivateEndpoint+0x30>
 80051d2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80051d6:	b29b      	uxth	r3, r3
 80051d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051e4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80051e8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80051ec:	780a      	ldrb	r2, [r1, #0]
 80051ee:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005200:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005204:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return HAL_OK;
}
 8005208:	2000      	movs	r0, #0
 800520a:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800520c:	780a      	ldrb	r2, [r1, #0]
 800520e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005212:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8005216:	d00c      	beq.n	8005232 <USB_DeactivateEndpoint+0x76>
 8005218:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800521c:	b29b      	uxth	r3, r3
 800521e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005222:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005226:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800522a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800522e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005232:	780a      	ldrb	r2, [r1, #0]
 8005234:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005238:	b29b      	uxth	r3, r3
 800523a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800523e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005242:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005246:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800524a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 800524e:	e7db      	b.n	8005208 <USB_DeactivateEndpoint+0x4c>
    if (ep->is_in == 0U)
 8005250:	784b      	ldrb	r3, [r1, #1]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d14e      	bne.n	80052f4 <USB_DeactivateEndpoint+0x138>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005256:	780a      	ldrb	r2, [r1, #0]
 8005258:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800525c:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8005260:	d00c      	beq.n	800527c <USB_DeactivateEndpoint+0xc0>
 8005262:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005266:	b29b      	uxth	r3, r3
 8005268:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800526c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005270:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005274:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005278:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800527c:	780a      	ldrb	r2, [r1, #0]
 800527e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005282:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005286:	d00c      	beq.n	80052a2 <USB_DeactivateEndpoint+0xe6>
 8005288:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800528c:	b29b      	uxth	r3, r3
 800528e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005292:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005296:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800529a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800529e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 80052a2:	780a      	ldrb	r2, [r1, #0]
 80052a4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80052a8:	b29b      	uxth	r3, r3
 80052aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052b6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80052ba:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80052be:	780b      	ldrb	r3, [r1, #0]
 80052c0:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80052c4:	b292      	uxth	r2, r2
 80052c6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80052ca:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80052ce:	f248 0c80 	movw	ip, #32896	; 0x8080
 80052d2:	ea42 020c 	orr.w	r2, r2, ip
 80052d6:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80052da:	780a      	ldrb	r2, [r1, #0]
 80052dc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80052e0:	b29b      	uxth	r3, r3
 80052e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052ea:	ea43 030c 	orr.w	r3, r3, ip
 80052ee:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 80052f2:	e789      	b.n	8005208 <USB_DeactivateEndpoint+0x4c>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80052f4:	780a      	ldrb	r2, [r1, #0]
 80052f6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80052fa:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80052fe:	d00c      	beq.n	800531a <USB_DeactivateEndpoint+0x15e>
 8005300:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005304:	b29b      	uxth	r3, r3
 8005306:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800530a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800530e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005312:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005316:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800531a:	780a      	ldrb	r2, [r1, #0]
 800531c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005320:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005324:	d00c      	beq.n	8005340 <USB_DeactivateEndpoint+0x184>
 8005326:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800532a:	b29b      	uxth	r3, r3
 800532c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005330:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005334:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005338:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800533c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8005340:	780a      	ldrb	r2, [r1, #0]
 8005342:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005346:	b29b      	uxth	r3, r3
 8005348:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800534c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005350:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005354:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005358:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800535c:	780b      	ldrb	r3, [r1, #0]
 800535e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8005362:	b292      	uxth	r2, r2
 8005364:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8005368:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800536c:	f248 0c80 	movw	ip, #32896	; 0x8080
 8005370:	ea42 020c 	orr.w	r2, r2, ip
 8005374:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005378:	780a      	ldrb	r2, [r1, #0]
 800537a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800537e:	b29b      	uxth	r3, r3
 8005380:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005384:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005388:	ea43 030c 	orr.w	r3, r3, ip
 800538c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8005390:	e73a      	b.n	8005208 <USB_DeactivateEndpoint+0x4c>

08005392 <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 8005392:	784b      	ldrb	r3, [r1, #1]
 8005394:	b18b      	cbz	r3, 80053ba <USB_EPSetStall+0x28>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005396:	780a      	ldrb	r2, [r1, #0]
 8005398:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800539c:	b29b      	uxth	r3, r3
 800539e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053a6:	f083 0310 	eor.w	r3, r3, #16
 80053aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053b2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
  }

  return HAL_OK;
}
 80053b6:	2000      	movs	r0, #0
 80053b8:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80053ba:	780a      	ldrb	r2, [r1, #0]
 80053bc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053ca:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80053ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053d6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 80053da:	e7ec      	b.n	80053b6 <USB_EPSetStall+0x24>

080053dc <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 80053dc:	7b0b      	ldrb	r3, [r1, #12]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d14b      	bne.n	800547a <USB_EPClearStall+0x9e>
  {
    if (ep->is_in != 0U)
 80053e2:	784b      	ldrb	r3, [r1, #1]
 80053e4:	b333      	cbz	r3, 8005434 <USB_EPClearStall+0x58>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80053e6:	780a      	ldrb	r2, [r1, #0]
 80053e8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80053ec:	f013 0f40 	tst.w	r3, #64	; 0x40
 80053f0:	d00c      	beq.n	800540c <USB_EPClearStall+0x30>
 80053f2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80053f6:	b29b      	uxth	r3, r3
 80053f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005400:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005404:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005408:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 800540c:	78cb      	ldrb	r3, [r1, #3]
 800540e:	2b01      	cmp	r3, #1
 8005410:	d033      	beq.n	800547a <USB_EPClearStall+0x9e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005412:	780a      	ldrb	r2, [r1, #0]
 8005414:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005418:	b29b      	uxth	r3, r3
 800541a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800541e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005422:	f083 0320 	eor.w	r3, r3, #32
 8005426:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800542a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800542e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8005432:	e022      	b.n	800547a <USB_EPClearStall+0x9e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005434:	780a      	ldrb	r2, [r1, #0]
 8005436:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800543a:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800543e:	d00c      	beq.n	800545a <USB_EPClearStall+0x7e>
 8005440:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005444:	b29b      	uxth	r3, r3
 8005446:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800544a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800544e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005452:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005456:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800545a:	780a      	ldrb	r2, [r1, #0]
 800545c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005460:	b29b      	uxth	r3, r3
 8005462:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005466:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800546a:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800546e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005472:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005476:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 800547a:	2000      	movs	r0, #0
 800547c:	4770      	bx	lr

0800547e <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 800547e:	b911      	cbnz	r1, 8005486 <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005480:	2380      	movs	r3, #128	; 0x80
 8005482:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 8005486:	2000      	movs	r0, #0
 8005488:	4770      	bx	lr

0800548a <USB_DevConnect>:
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 800548a:	2000      	movs	r0, #0
 800548c:	4770      	bx	lr

0800548e <USB_DevDisconnect>:
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 800548e:	2000      	movs	r0, #0
 8005490:	4770      	bx	lr

08005492 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005492:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 8005496:	b280      	uxth	r0, r0
 8005498:	4770      	bx	lr

0800549a <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 800549a:	2000      	movs	r0, #0
 800549c:	4770      	bx	lr

0800549e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800549e:	b410      	push	{r4}
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80054a0:	1c5c      	adds	r4, r3, #1
 80054a2:	0864      	lsrs	r4, r4, #1
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80054a4:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80054a8:	f502 6280 	add.w	r2, r2, #1024	; 0x400

  for (i = n; i != 0U; i--)
 80054ac:	e007      	b.n	80054be <USB_WritePMA+0x20>
  {
    temp1 = *pBuf;
 80054ae:	780b      	ldrb	r3, [r1, #0]
    pBuf++;
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80054b0:	7848      	ldrb	r0, [r1, #1]
    *pdwVal = (uint16_t)temp2;
 80054b2:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80054b6:	f822 3b04 	strh.w	r3, [r2], #4

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 80054ba:	3102      	adds	r1, #2
  for (i = n; i != 0U; i--)
 80054bc:	3c01      	subs	r4, #1
 80054be:	2c00      	cmp	r4, #0
 80054c0:	d1f5      	bne.n	80054ae <USB_WritePMA+0x10>
  }
}
 80054c2:	bc10      	pop	{r4}
 80054c4:	4770      	bx	lr

080054c6 <USB_EPStartXfer>:
{
 80054c6:	b570      	push	{r4, r5, r6, lr}
 80054c8:	4605      	mov	r5, r0
 80054ca:	460c      	mov	r4, r1
  if (ep->is_in == 1U)
 80054cc:	784b      	ldrb	r3, [r1, #1]
 80054ce:	2b01      	cmp	r3, #1
 80054d0:	d037      	beq.n	8005542 <USB_EPStartXfer+0x7c>
    if (ep->doublebuffer == 0U)
 80054d2:	7b0a      	ldrb	r2, [r1, #12]
 80054d4:	2a00      	cmp	r2, #0
 80054d6:	f040 8326 	bne.w	8005b26 <USB_EPStartXfer+0x660>
      if (ep->xfer_len > ep->maxpacket)
 80054da:	698b      	ldr	r3, [r1, #24]
 80054dc:	690a      	ldr	r2, [r1, #16]
 80054de:	4293      	cmp	r3, r2
 80054e0:	f240 8304 	bls.w	8005aec <USB_EPStartXfer+0x626>
        ep->xfer_len -= len;
 80054e4:	1a9b      	subs	r3, r3, r2
 80054e6:	618b      	str	r3, [r1, #24]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80054e8:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	442b      	add	r3, r5
 80054f0:	7821      	ldrb	r1, [r4, #0]
 80054f2:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80054f6:	2a00      	cmp	r2, #0
 80054f8:	f040 82fc 	bne.w	8005af4 <USB_EPStartXfer+0x62e>
 80054fc:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 8005500:	b292      	uxth	r2, r2
 8005502:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8005506:	b292      	uxth	r2, r2
 8005508:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 800550c:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 8005510:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8005514:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8005518:	b292      	uxth	r2, r2
 800551a:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800551e:	7822      	ldrb	r2, [r4, #0]
 8005520:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8005524:	b29b      	uxth	r3, r3
 8005526:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800552a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800552e:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8005532:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005536:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800553a:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
  return HAL_OK;
 800553e:	2000      	movs	r0, #0
}
 8005540:	bd70      	pop	{r4, r5, r6, pc}
    if (ep->xfer_len > ep->maxpacket)
 8005542:	698e      	ldr	r6, [r1, #24]
 8005544:	690a      	ldr	r2, [r1, #16]
 8005546:	4296      	cmp	r6, r2
 8005548:	d900      	bls.n	800554c <USB_EPStartXfer+0x86>
      len = ep->maxpacket;
 800554a:	4616      	mov	r6, r2
    if (ep->doublebuffer == 0U)
 800554c:	7b23      	ldrb	r3, [r4, #12]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d039      	beq.n	80055c6 <USB_EPStartXfer+0x100>
      if (ep->type == EP_TYPE_BULK)
 8005552:	78e3      	ldrb	r3, [r4, #3]
 8005554:	2b02      	cmp	r3, #2
 8005556:	d058      	beq.n	800560a <USB_EPStartXfer+0x144>
        PCD_SET_EP_DBUF(USBx, ep->num);
 8005558:	7822      	ldrb	r2, [r4, #0]
 800555a:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 800555e:	b29b      	uxth	r3, r3
 8005560:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005564:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005568:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800556c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005570:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
        ep->xfer_len_db -= len;
 8005574:	6a23      	ldr	r3, [r4, #32]
 8005576:	1b9b      	subs	r3, r3, r6
 8005578:	6223      	str	r3, [r4, #32]
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800557a:	7823      	ldrb	r3, [r4, #0]
 800557c:	f835 2023 	ldrh.w	r2, [r5, r3, lsl #2]
 8005580:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005584:	f000 8226 	beq.w	80059d4 <USB_EPStartXfer+0x50e>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005588:	7862      	ldrb	r2, [r4, #1]
 800558a:	2a00      	cmp	r2, #0
 800558c:	f040 81ca 	bne.w	8005924 <USB_EPStartXfer+0x45e>
 8005590:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8005594:	b292      	uxth	r2, r2
 8005596:	442a      	add	r2, r5
 8005598:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 800559c:	2e00      	cmp	r6, #0
 800559e:	f040 81a8 	bne.w	80058f2 <USB_EPStartXfer+0x42c>
 80055a2:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 80055a6:	b292      	uxth	r2, r2
 80055a8:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80055ac:	b292      	uxth	r2, r2
 80055ae:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 80055b2:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 80055b6:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80055ba:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80055be:	b292      	uxth	r2, r2
 80055c0:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 80055c4:	e1b0      	b.n	8005928 <USB_EPStartXfer+0x462>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80055c6:	b2b6      	uxth	r6, r6
 80055c8:	4633      	mov	r3, r6
 80055ca:	88e2      	ldrh	r2, [r4, #6]
 80055cc:	6961      	ldr	r1, [r4, #20]
 80055ce:	4628      	mov	r0, r5
 80055d0:	f7ff ff65 	bl	800549e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80055d4:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 80055d8:	b29b      	uxth	r3, r3
 80055da:	442b      	add	r3, r5
 80055dc:	7822      	ldrb	r2, [r4, #0]
 80055de:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 80055e2:	f8a3 6404 	strh.w	r6, [r3, #1028]	; 0x404
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80055e6:	7822      	ldrb	r2, [r4, #0]
 80055e8:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 80055ec:	b29b      	uxth	r3, r3
 80055ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055f6:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 80055fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005602:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
  return HAL_OK;
 8005606:	2000      	movs	r0, #0
 8005608:	e79a      	b.n	8005540 <USB_EPStartXfer+0x7a>
        if (ep->xfer_len_db > ep->maxpacket)
 800560a:	6a23      	ldr	r3, [r4, #32]
 800560c:	429a      	cmp	r2, r3
 800560e:	f080 8152 	bcs.w	80058b6 <USB_EPStartXfer+0x3f0>
          PCD_SET_EP_DBUF(USBx, ep->num);
 8005612:	7822      	ldrb	r2, [r4, #0]
 8005614:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8005618:	b29b      	uxth	r3, r3
 800561a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800561e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005622:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005626:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800562a:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
          ep->xfer_len_db -= len;
 800562e:	6a23      	ldr	r3, [r4, #32]
 8005630:	1b9b      	subs	r3, r3, r6
 8005632:	6223      	str	r3, [r4, #32]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005634:	7823      	ldrb	r3, [r4, #0]
 8005636:	f835 2023 	ldrh.w	r2, [r5, r3, lsl #2]
 800563a:	f012 0f40 	tst.w	r2, #64	; 0x40
 800563e:	f000 809d 	beq.w	800577c <USB_EPStartXfer+0x2b6>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005642:	7862      	ldrb	r2, [r4, #1]
 8005644:	bb8a      	cbnz	r2, 80056aa <USB_EPStartXfer+0x1e4>
 8005646:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800564a:	b292      	uxth	r2, r2
 800564c:	442a      	add	r2, r5
 800564e:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8005652:	b98e      	cbnz	r6, 8005678 <USB_EPStartXfer+0x1b2>
 8005654:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 8005658:	b292      	uxth	r2, r2
 800565a:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800565e:	b292      	uxth	r2, r2
 8005660:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8005664:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 8005668:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800566c:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8005670:	b292      	uxth	r2, r2
 8005672:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8005676:	e01a      	b.n	80056ae <USB_EPStartXfer+0x1e8>
 8005678:	2e3e      	cmp	r6, #62	; 0x3e
 800567a:	d809      	bhi.n	8005690 <USB_EPStartXfer+0x1ca>
 800567c:	0872      	lsrs	r2, r6, #1
 800567e:	f016 0f01 	tst.w	r6, #1
 8005682:	d000      	beq.n	8005686 <USB_EPStartXfer+0x1c0>
 8005684:	3201      	adds	r2, #1
 8005686:	0292      	lsls	r2, r2, #10
 8005688:	b292      	uxth	r2, r2
 800568a:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 800568e:	e00e      	b.n	80056ae <USB_EPStartXfer+0x1e8>
 8005690:	0972      	lsrs	r2, r6, #5
 8005692:	f016 0f1f 	tst.w	r6, #31
 8005696:	d100      	bne.n	800569a <USB_EPStartXfer+0x1d4>
 8005698:	3a01      	subs	r2, #1
 800569a:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 800569e:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80056a2:	b292      	uxth	r2, r2
 80056a4:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 80056a8:	e001      	b.n	80056ae <USB_EPStartXfer+0x1e8>
 80056aa:	2a01      	cmp	r2, #1
 80056ac:	d02b      	beq.n	8005706 <USB_EPStartXfer+0x240>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80056ae:	b2b3      	uxth	r3, r6
 80056b0:	8962      	ldrh	r2, [r4, #10]
 80056b2:	6961      	ldr	r1, [r4, #20]
 80056b4:	4628      	mov	r0, r5
 80056b6:	f7ff fef2 	bl	800549e <USB_WritePMA>
            ep->xfer_buff += len;
 80056ba:	6963      	ldr	r3, [r4, #20]
 80056bc:	4433      	add	r3, r6
 80056be:	6163      	str	r3, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 80056c0:	6a23      	ldr	r3, [r4, #32]
 80056c2:	6922      	ldr	r2, [r4, #16]
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d928      	bls.n	800571a <USB_EPStartXfer+0x254>
              ep->xfer_len_db -= len;
 80056c8:	1b9b      	subs	r3, r3, r6
 80056ca:	6223      	str	r3, [r4, #32]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80056cc:	7863      	ldrb	r3, [r4, #1]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d140      	bne.n	8005754 <USB_EPStartXfer+0x28e>
 80056d2:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 80056d6:	b29b      	uxth	r3, r3
 80056d8:	442b      	add	r3, r5
 80056da:	7822      	ldrb	r2, [r4, #0]
 80056dc:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 80056e0:	b9fe      	cbnz	r6, 8005722 <USB_EPStartXfer+0x25c>
 80056e2:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 80056e6:	b292      	uxth	r2, r2
 80056e8:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80056ec:	b292      	uxth	r2, r2
 80056ee:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 80056f2:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 80056f6:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80056fa:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80056fe:	b292      	uxth	r2, r2
 8005700:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8005704:	e028      	b.n	8005758 <USB_EPStartXfer+0x292>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005706:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800570a:	b292      	uxth	r2, r2
 800570c:	442a      	add	r2, r5
 800570e:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8005712:	b2b2      	uxth	r2, r6
 8005714:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8005718:	e7c9      	b.n	80056ae <USB_EPStartXfer+0x1e8>
              ep->xfer_len_db = 0U;
 800571a:	2200      	movs	r2, #0
 800571c:	6222      	str	r2, [r4, #32]
              len = ep->xfer_len_db;
 800571e:	461e      	mov	r6, r3
 8005720:	e7d4      	b.n	80056cc <USB_EPStartXfer+0x206>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005722:	2e3e      	cmp	r6, #62	; 0x3e
 8005724:	d809      	bhi.n	800573a <USB_EPStartXfer+0x274>
 8005726:	0872      	lsrs	r2, r6, #1
 8005728:	f016 0f01 	tst.w	r6, #1
 800572c:	d000      	beq.n	8005730 <USB_EPStartXfer+0x26a>
 800572e:	3201      	adds	r2, #1
 8005730:	0292      	lsls	r2, r2, #10
 8005732:	b292      	uxth	r2, r2
 8005734:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8005738:	e00e      	b.n	8005758 <USB_EPStartXfer+0x292>
 800573a:	0972      	lsrs	r2, r6, #5
 800573c:	f016 0f1f 	tst.w	r6, #31
 8005740:	d100      	bne.n	8005744 <USB_EPStartXfer+0x27e>
 8005742:	3a01      	subs	r2, #1
 8005744:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8005748:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800574c:	b292      	uxth	r2, r2
 800574e:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8005752:	e001      	b.n	8005758 <USB_EPStartXfer+0x292>
 8005754:	2b01      	cmp	r3, #1
 8005756:	d006      	beq.n	8005766 <USB_EPStartXfer+0x2a0>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005758:	b2b3      	uxth	r3, r6
 800575a:	8922      	ldrh	r2, [r4, #8]
 800575c:	6961      	ldr	r1, [r4, #20]
 800575e:	4628      	mov	r0, r5
 8005760:	f7ff fe9d 	bl	800549e <USB_WritePMA>
 8005764:	e73f      	b.n	80055e6 <USB_EPStartXfer+0x120>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005766:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 800576a:	b29b      	uxth	r3, r3
 800576c:	442b      	add	r3, r5
 800576e:	7822      	ldrb	r2, [r4, #0]
 8005770:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8005774:	b2b2      	uxth	r2, r6
 8005776:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 800577a:	e7ed      	b.n	8005758 <USB_EPStartXfer+0x292>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800577c:	7862      	ldrb	r2, [r4, #1]
 800577e:	bb8a      	cbnz	r2, 80057e4 <USB_EPStartXfer+0x31e>
 8005780:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8005784:	b292      	uxth	r2, r2
 8005786:	442a      	add	r2, r5
 8005788:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 800578c:	b98e      	cbnz	r6, 80057b2 <USB_EPStartXfer+0x2ec>
 800578e:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 8005792:	b292      	uxth	r2, r2
 8005794:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8005798:	b292      	uxth	r2, r2
 800579a:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 800579e:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 80057a2:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80057a6:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80057aa:	b292      	uxth	r2, r2
 80057ac:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 80057b0:	e01a      	b.n	80057e8 <USB_EPStartXfer+0x322>
 80057b2:	2e3e      	cmp	r6, #62	; 0x3e
 80057b4:	d809      	bhi.n	80057ca <USB_EPStartXfer+0x304>
 80057b6:	0872      	lsrs	r2, r6, #1
 80057b8:	f016 0f01 	tst.w	r6, #1
 80057bc:	d000      	beq.n	80057c0 <USB_EPStartXfer+0x2fa>
 80057be:	3201      	adds	r2, #1
 80057c0:	0292      	lsls	r2, r2, #10
 80057c2:	b292      	uxth	r2, r2
 80057c4:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 80057c8:	e00e      	b.n	80057e8 <USB_EPStartXfer+0x322>
 80057ca:	0972      	lsrs	r2, r6, #5
 80057cc:	f016 0f1f 	tst.w	r6, #31
 80057d0:	d100      	bne.n	80057d4 <USB_EPStartXfer+0x30e>
 80057d2:	3a01      	subs	r2, #1
 80057d4:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 80057d8:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80057dc:	b292      	uxth	r2, r2
 80057de:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 80057e2:	e001      	b.n	80057e8 <USB_EPStartXfer+0x322>
 80057e4:	2a01      	cmp	r2, #1
 80057e6:	d02b      	beq.n	8005840 <USB_EPStartXfer+0x37a>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80057e8:	b2b3      	uxth	r3, r6
 80057ea:	8922      	ldrh	r2, [r4, #8]
 80057ec:	6961      	ldr	r1, [r4, #20]
 80057ee:	4628      	mov	r0, r5
 80057f0:	f7ff fe55 	bl	800549e <USB_WritePMA>
            ep->xfer_buff += len;
 80057f4:	6963      	ldr	r3, [r4, #20]
 80057f6:	4433      	add	r3, r6
 80057f8:	6163      	str	r3, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 80057fa:	6a23      	ldr	r3, [r4, #32]
 80057fc:	6922      	ldr	r2, [r4, #16]
 80057fe:	4293      	cmp	r3, r2
 8005800:	d928      	bls.n	8005854 <USB_EPStartXfer+0x38e>
              ep->xfer_len_db -= len;
 8005802:	1b9b      	subs	r3, r3, r6
 8005804:	6223      	str	r3, [r4, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005806:	7863      	ldrb	r3, [r4, #1]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d140      	bne.n	800588e <USB_EPStartXfer+0x3c8>
 800580c:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8005810:	b29b      	uxth	r3, r3
 8005812:	442b      	add	r3, r5
 8005814:	7822      	ldrb	r2, [r4, #0]
 8005816:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 800581a:	b9fe      	cbnz	r6, 800585c <USB_EPStartXfer+0x396>
 800581c:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 8005820:	b292      	uxth	r2, r2
 8005822:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8005826:	b292      	uxth	r2, r2
 8005828:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 800582c:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 8005830:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8005834:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8005838:	b292      	uxth	r2, r2
 800583a:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 800583e:	e028      	b.n	8005892 <USB_EPStartXfer+0x3cc>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005840:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8005844:	b292      	uxth	r2, r2
 8005846:	442a      	add	r2, r5
 8005848:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 800584c:	b2b2      	uxth	r2, r6
 800584e:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8005852:	e7c9      	b.n	80057e8 <USB_EPStartXfer+0x322>
              ep->xfer_len_db = 0U;
 8005854:	2200      	movs	r2, #0
 8005856:	6222      	str	r2, [r4, #32]
              len = ep->xfer_len_db;
 8005858:	461e      	mov	r6, r3
 800585a:	e7d4      	b.n	8005806 <USB_EPStartXfer+0x340>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800585c:	2e3e      	cmp	r6, #62	; 0x3e
 800585e:	d809      	bhi.n	8005874 <USB_EPStartXfer+0x3ae>
 8005860:	0872      	lsrs	r2, r6, #1
 8005862:	f016 0f01 	tst.w	r6, #1
 8005866:	d000      	beq.n	800586a <USB_EPStartXfer+0x3a4>
 8005868:	3201      	adds	r2, #1
 800586a:	0292      	lsls	r2, r2, #10
 800586c:	b292      	uxth	r2, r2
 800586e:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8005872:	e00e      	b.n	8005892 <USB_EPStartXfer+0x3cc>
 8005874:	0972      	lsrs	r2, r6, #5
 8005876:	f016 0f1f 	tst.w	r6, #31
 800587a:	d100      	bne.n	800587e <USB_EPStartXfer+0x3b8>
 800587c:	3a01      	subs	r2, #1
 800587e:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8005882:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8005886:	b292      	uxth	r2, r2
 8005888:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 800588c:	e001      	b.n	8005892 <USB_EPStartXfer+0x3cc>
 800588e:	2b01      	cmp	r3, #1
 8005890:	d006      	beq.n	80058a0 <USB_EPStartXfer+0x3da>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005892:	b2b3      	uxth	r3, r6
 8005894:	8962      	ldrh	r2, [r4, #10]
 8005896:	6961      	ldr	r1, [r4, #20]
 8005898:	4628      	mov	r0, r5
 800589a:	f7ff fe00 	bl	800549e <USB_WritePMA>
 800589e:	e6a2      	b.n	80055e6 <USB_EPStartXfer+0x120>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80058a0:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 80058a4:	b29b      	uxth	r3, r3
 80058a6:	442b      	add	r3, r5
 80058a8:	7822      	ldrb	r2, [r4, #0]
 80058aa:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 80058ae:	b2b2      	uxth	r2, r6
 80058b0:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 80058b4:	e7ed      	b.n	8005892 <USB_EPStartXfer+0x3cc>
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80058b6:	7821      	ldrb	r1, [r4, #0]
 80058b8:	f835 2021 	ldrh.w	r2, [r5, r1, lsl #2]
 80058bc:	b292      	uxth	r2, r2
 80058be:	f422 42e2 	bic.w	r2, r2, #28928	; 0x7100
 80058c2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80058c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80058ca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80058ce:	f825 2021 	strh.w	r2, [r5, r1, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80058d2:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 80058d6:	b292      	uxth	r2, r2
 80058d8:	442a      	add	r2, r5
 80058da:	7821      	ldrb	r1, [r4, #0]
 80058dc:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80058e0:	b29b      	uxth	r3, r3
 80058e2:	f8a2 3404 	strh.w	r3, [r2, #1028]	; 0x404
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80058e6:	8922      	ldrh	r2, [r4, #8]
 80058e8:	6961      	ldr	r1, [r4, #20]
 80058ea:	4628      	mov	r0, r5
 80058ec:	f7ff fdd7 	bl	800549e <USB_WritePMA>
 80058f0:	e679      	b.n	80055e6 <USB_EPStartXfer+0x120>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80058f2:	2e3e      	cmp	r6, #62	; 0x3e
 80058f4:	d809      	bhi.n	800590a <USB_EPStartXfer+0x444>
 80058f6:	0872      	lsrs	r2, r6, #1
 80058f8:	f016 0f01 	tst.w	r6, #1
 80058fc:	d000      	beq.n	8005900 <USB_EPStartXfer+0x43a>
 80058fe:	3201      	adds	r2, #1
 8005900:	0292      	lsls	r2, r2, #10
 8005902:	b292      	uxth	r2, r2
 8005904:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8005908:	e00e      	b.n	8005928 <USB_EPStartXfer+0x462>
 800590a:	0972      	lsrs	r2, r6, #5
 800590c:	f016 0f1f 	tst.w	r6, #31
 8005910:	d100      	bne.n	8005914 <USB_EPStartXfer+0x44e>
 8005912:	3a01      	subs	r2, #1
 8005914:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8005918:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800591c:	b292      	uxth	r2, r2
 800591e:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8005922:	e001      	b.n	8005928 <USB_EPStartXfer+0x462>
 8005924:	2a01      	cmp	r2, #1
 8005926:	d026      	beq.n	8005976 <USB_EPStartXfer+0x4b0>
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005928:	b2b3      	uxth	r3, r6
 800592a:	8962      	ldrh	r2, [r4, #10]
 800592c:	6961      	ldr	r1, [r4, #20]
 800592e:	4628      	mov	r0, r5
 8005930:	f7ff fdb5 	bl	800549e <USB_WritePMA>
          ep->xfer_buff += len;
 8005934:	6963      	ldr	r3, [r4, #20]
 8005936:	4433      	add	r3, r6
 8005938:	6163      	str	r3, [r4, #20]
          if (ep->xfer_len_db > ep->maxpacket)
 800593a:	6a23      	ldr	r3, [r4, #32]
 800593c:	6922      	ldr	r2, [r4, #16]
 800593e:	4293      	cmp	r3, r2
 8005940:	d923      	bls.n	800598a <USB_EPStartXfer+0x4c4>
            ep->xfer_len_db -= len;
 8005942:	1b9b      	subs	r3, r3, r6
 8005944:	6223      	str	r3, [r4, #32]
          if (len > 0U)
 8005946:	2e00      	cmp	r6, #0
 8005948:	f43f ae4d 	beq.w	80055e6 <USB_EPStartXfer+0x120>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800594c:	7863      	ldrb	r3, [r4, #1]
 800594e:	bb6b      	cbnz	r3, 80059ac <USB_EPStartXfer+0x4e6>
 8005950:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8005954:	b29b      	uxth	r3, r3
 8005956:	442b      	add	r3, r5
 8005958:	7822      	ldrb	r2, [r4, #0]
 800595a:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 800595e:	2e3e      	cmp	r6, #62	; 0x3e
 8005960:	d817      	bhi.n	8005992 <USB_EPStartXfer+0x4cc>
 8005962:	0872      	lsrs	r2, r6, #1
 8005964:	f016 0f01 	tst.w	r6, #1
 8005968:	d000      	beq.n	800596c <USB_EPStartXfer+0x4a6>
 800596a:	3201      	adds	r2, #1
 800596c:	0292      	lsls	r2, r2, #10
 800596e:	b292      	uxth	r2, r2
 8005970:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8005974:	e01c      	b.n	80059b0 <USB_EPStartXfer+0x4ea>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005976:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800597a:	b292      	uxth	r2, r2
 800597c:	442a      	add	r2, r5
 800597e:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8005982:	b2b2      	uxth	r2, r6
 8005984:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8005988:	e7ce      	b.n	8005928 <USB_EPStartXfer+0x462>
            ep->xfer_len_db = 0U;
 800598a:	2200      	movs	r2, #0
 800598c:	6222      	str	r2, [r4, #32]
            len = ep->xfer_len_db;
 800598e:	461e      	mov	r6, r3
 8005990:	e7d9      	b.n	8005946 <USB_EPStartXfer+0x480>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005992:	0972      	lsrs	r2, r6, #5
 8005994:	f016 0f1f 	tst.w	r6, #31
 8005998:	d100      	bne.n	800599c <USB_EPStartXfer+0x4d6>
 800599a:	3a01      	subs	r2, #1
 800599c:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 80059a0:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80059a4:	b292      	uxth	r2, r2
 80059a6:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 80059aa:	e001      	b.n	80059b0 <USB_EPStartXfer+0x4ea>
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	d006      	beq.n	80059be <USB_EPStartXfer+0x4f8>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80059b0:	b2b3      	uxth	r3, r6
 80059b2:	8922      	ldrh	r2, [r4, #8]
 80059b4:	6961      	ldr	r1, [r4, #20]
 80059b6:	4628      	mov	r0, r5
 80059b8:	f7ff fd71 	bl	800549e <USB_WritePMA>
 80059bc:	e613      	b.n	80055e6 <USB_EPStartXfer+0x120>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80059be:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 80059c2:	b29b      	uxth	r3, r3
 80059c4:	442b      	add	r3, r5
 80059c6:	7822      	ldrb	r2, [r4, #0]
 80059c8:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 80059cc:	b2b2      	uxth	r2, r6
 80059ce:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 80059d2:	e7ed      	b.n	80059b0 <USB_EPStartXfer+0x4ea>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80059d4:	7862      	ldrb	r2, [r4, #1]
 80059d6:	bb8a      	cbnz	r2, 8005a3c <USB_EPStartXfer+0x576>
 80059d8:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 80059dc:	b292      	uxth	r2, r2
 80059de:	442a      	add	r2, r5
 80059e0:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 80059e4:	b98e      	cbnz	r6, 8005a0a <USB_EPStartXfer+0x544>
 80059e6:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 80059ea:	b292      	uxth	r2, r2
 80059ec:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80059f0:	b292      	uxth	r2, r2
 80059f2:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 80059f6:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 80059fa:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80059fe:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8005a02:	b292      	uxth	r2, r2
 8005a04:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8005a08:	e01a      	b.n	8005a40 <USB_EPStartXfer+0x57a>
 8005a0a:	2e3e      	cmp	r6, #62	; 0x3e
 8005a0c:	d809      	bhi.n	8005a22 <USB_EPStartXfer+0x55c>
 8005a0e:	0872      	lsrs	r2, r6, #1
 8005a10:	f016 0f01 	tst.w	r6, #1
 8005a14:	d000      	beq.n	8005a18 <USB_EPStartXfer+0x552>
 8005a16:	3201      	adds	r2, #1
 8005a18:	0292      	lsls	r2, r2, #10
 8005a1a:	b292      	uxth	r2, r2
 8005a1c:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8005a20:	e00e      	b.n	8005a40 <USB_EPStartXfer+0x57a>
 8005a22:	0972      	lsrs	r2, r6, #5
 8005a24:	f016 0f1f 	tst.w	r6, #31
 8005a28:	d100      	bne.n	8005a2c <USB_EPStartXfer+0x566>
 8005a2a:	3a01      	subs	r2, #1
 8005a2c:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8005a30:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8005a34:	b292      	uxth	r2, r2
 8005a36:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8005a3a:	e001      	b.n	8005a40 <USB_EPStartXfer+0x57a>
 8005a3c:	2a01      	cmp	r2, #1
 8005a3e:	d026      	beq.n	8005a8e <USB_EPStartXfer+0x5c8>
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005a40:	b2b3      	uxth	r3, r6
 8005a42:	8922      	ldrh	r2, [r4, #8]
 8005a44:	6961      	ldr	r1, [r4, #20]
 8005a46:	4628      	mov	r0, r5
 8005a48:	f7ff fd29 	bl	800549e <USB_WritePMA>
          ep->xfer_buff += len;
 8005a4c:	6963      	ldr	r3, [r4, #20]
 8005a4e:	4433      	add	r3, r6
 8005a50:	6163      	str	r3, [r4, #20]
          if (ep->xfer_len_db > ep->maxpacket)
 8005a52:	6a23      	ldr	r3, [r4, #32]
 8005a54:	6922      	ldr	r2, [r4, #16]
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d923      	bls.n	8005aa2 <USB_EPStartXfer+0x5dc>
            ep->xfer_len_db -= len;
 8005a5a:	1b9b      	subs	r3, r3, r6
 8005a5c:	6223      	str	r3, [r4, #32]
          if (len > 0U)
 8005a5e:	2e00      	cmp	r6, #0
 8005a60:	f43f adc1 	beq.w	80055e6 <USB_EPStartXfer+0x120>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005a64:	7863      	ldrb	r3, [r4, #1]
 8005a66:	bb6b      	cbnz	r3, 8005ac4 <USB_EPStartXfer+0x5fe>
 8005a68:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8005a6c:	b29b      	uxth	r3, r3
 8005a6e:	442b      	add	r3, r5
 8005a70:	7822      	ldrb	r2, [r4, #0]
 8005a72:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8005a76:	2e3e      	cmp	r6, #62	; 0x3e
 8005a78:	d817      	bhi.n	8005aaa <USB_EPStartXfer+0x5e4>
 8005a7a:	0872      	lsrs	r2, r6, #1
 8005a7c:	f016 0f01 	tst.w	r6, #1
 8005a80:	d000      	beq.n	8005a84 <USB_EPStartXfer+0x5be>
 8005a82:	3201      	adds	r2, #1
 8005a84:	0292      	lsls	r2, r2, #10
 8005a86:	b292      	uxth	r2, r2
 8005a88:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8005a8c:	e01c      	b.n	8005ac8 <USB_EPStartXfer+0x602>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005a8e:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8005a92:	b292      	uxth	r2, r2
 8005a94:	442a      	add	r2, r5
 8005a96:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8005a9a:	b2b2      	uxth	r2, r6
 8005a9c:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8005aa0:	e7ce      	b.n	8005a40 <USB_EPStartXfer+0x57a>
            ep->xfer_len_db = 0U;
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	6222      	str	r2, [r4, #32]
            len = ep->xfer_len_db;
 8005aa6:	461e      	mov	r6, r3
 8005aa8:	e7d9      	b.n	8005a5e <USB_EPStartXfer+0x598>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005aaa:	0972      	lsrs	r2, r6, #5
 8005aac:	f016 0f1f 	tst.w	r6, #31
 8005ab0:	d100      	bne.n	8005ab4 <USB_EPStartXfer+0x5ee>
 8005ab2:	3a01      	subs	r2, #1
 8005ab4:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8005ab8:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8005abc:	b292      	uxth	r2, r2
 8005abe:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8005ac2:	e001      	b.n	8005ac8 <USB_EPStartXfer+0x602>
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d006      	beq.n	8005ad6 <USB_EPStartXfer+0x610>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005ac8:	b2b3      	uxth	r3, r6
 8005aca:	8962      	ldrh	r2, [r4, #10]
 8005acc:	6961      	ldr	r1, [r4, #20]
 8005ace:	4628      	mov	r0, r5
 8005ad0:	f7ff fce5 	bl	800549e <USB_WritePMA>
 8005ad4:	e587      	b.n	80055e6 <USB_EPStartXfer+0x120>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005ad6:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	442b      	add	r3, r5
 8005ade:	7822      	ldrb	r2, [r4, #0]
 8005ae0:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8005ae4:	b2b2      	uxth	r2, r6
 8005ae6:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8005aea:	e7ed      	b.n	8005ac8 <USB_EPStartXfer+0x602>
        ep->xfer_len = 0U;
 8005aec:	2200      	movs	r2, #0
 8005aee:	618a      	str	r2, [r1, #24]
        len = ep->xfer_len;
 8005af0:	461a      	mov	r2, r3
 8005af2:	e4f9      	b.n	80054e8 <USB_EPStartXfer+0x22>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005af4:	2a3e      	cmp	r2, #62	; 0x3e
 8005af6:	d809      	bhi.n	8005b0c <USB_EPStartXfer+0x646>
 8005af8:	0851      	lsrs	r1, r2, #1
 8005afa:	f012 0f01 	tst.w	r2, #1
 8005afe:	d000      	beq.n	8005b02 <USB_EPStartXfer+0x63c>
 8005b00:	3101      	adds	r1, #1
 8005b02:	0289      	lsls	r1, r1, #10
 8005b04:	b289      	uxth	r1, r1
 8005b06:	f8a3 140c 	strh.w	r1, [r3, #1036]	; 0x40c
 8005b0a:	e508      	b.n	800551e <USB_EPStartXfer+0x58>
 8005b0c:	0951      	lsrs	r1, r2, #5
 8005b0e:	f012 0f1f 	tst.w	r2, #31
 8005b12:	d100      	bne.n	8005b16 <USB_EPStartXfer+0x650>
 8005b14:	3901      	subs	r1, #1
 8005b16:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 8005b1a:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8005b1e:	b289      	uxth	r1, r1
 8005b20:	f8a3 140c 	strh.w	r1, [r3, #1036]	; 0x40c
 8005b24:	e4fb      	b.n	800551e <USB_EPStartXfer+0x58>
      if (ep->type == EP_TYPE_BULK)
 8005b26:	78ca      	ldrb	r2, [r1, #3]
 8005b28:	2a02      	cmp	r2, #2
 8005b2a:	d045      	beq.n	8005bb8 <USB_EPStartXfer+0x6f2>
      else if (ep->type == EP_TYPE_ISOC)
 8005b2c:	2a01      	cmp	r2, #1
 8005b2e:	f040 8120 	bne.w	8005d72 <USB_EPStartXfer+0x8ac>
        if (ep->xfer_len > ep->maxpacket)
 8005b32:	6989      	ldr	r1, [r1, #24]
 8005b34:	6922      	ldr	r2, [r4, #16]
 8005b36:	4291      	cmp	r1, r2
 8005b38:	f240 80d4 	bls.w	8005ce4 <USB_EPStartXfer+0x81e>
          ep->xfer_len -= len;
 8005b3c:	1a89      	subs	r1, r1, r2
 8005b3e:	61a1      	str	r1, [r4, #24]
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005b40:	b9d3      	cbnz	r3, 8005b78 <USB_EPStartXfer+0x6b2>
 8005b42:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	442b      	add	r3, r5
 8005b4a:	7821      	ldrb	r1, [r4, #0]
 8005b4c:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8005b50:	2a00      	cmp	r2, #0
 8005b52:	f040 80cb 	bne.w	8005cec <USB_EPStartXfer+0x826>
 8005b56:	f8b3 1404 	ldrh.w	r1, [r3, #1028]	; 0x404
 8005b5a:	b289      	uxth	r1, r1
 8005b5c:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8005b60:	b289      	uxth	r1, r1
 8005b62:	f8a3 1404 	strh.w	r1, [r3, #1028]	; 0x404
 8005b66:	f8b3 1404 	ldrh.w	r1, [r3, #1028]	; 0x404
 8005b6a:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8005b6e:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8005b72:	b289      	uxth	r1, r1
 8005b74:	f8a3 1404 	strh.w	r1, [r3, #1028]	; 0x404
 8005b78:	7863      	ldrb	r3, [r4, #1]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	f040 80ea 	bne.w	8005d54 <USB_EPStartXfer+0x88e>
 8005b80:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8005b84:	b29b      	uxth	r3, r3
 8005b86:	442b      	add	r3, r5
 8005b88:	7821      	ldrb	r1, [r4, #0]
 8005b8a:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8005b8e:	2a00      	cmp	r2, #0
 8005b90:	f040 80c5 	bne.w	8005d1e <USB_EPStartXfer+0x858>
 8005b94:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 8005b98:	b292      	uxth	r2, r2
 8005b9a:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8005b9e:	b292      	uxth	r2, r2
 8005ba0:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8005ba4:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 8005ba8:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8005bac:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8005bb0:	b292      	uxth	r2, r2
 8005bb2:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8005bb6:	e4b2      	b.n	800551e <USB_EPStartXfer+0x58>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005bb8:	b9cb      	cbnz	r3, 8005bee <USB_EPStartXfer+0x728>
 8005bba:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8005bbe:	b29b      	uxth	r3, r3
 8005bc0:	4403      	add	r3, r0
 8005bc2:	780a      	ldrb	r2, [r1, #0]
 8005bc4:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8005bc8:	690a      	ldr	r2, [r1, #16]
 8005bca:	bb72      	cbnz	r2, 8005c2a <USB_EPStartXfer+0x764>
 8005bcc:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 8005bd0:	b292      	uxth	r2, r2
 8005bd2:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8005bd6:	b292      	uxth	r2, r2
 8005bd8:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8005bdc:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 8005be0:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8005be4:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8005be8:	b292      	uxth	r2, r2
 8005bea:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8005bee:	7863      	ldrb	r3, [r4, #1]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d14c      	bne.n	8005c8e <USB_EPStartXfer+0x7c8>
 8005bf4:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8005bf8:	b29b      	uxth	r3, r3
 8005bfa:	442b      	add	r3, r5
 8005bfc:	7822      	ldrb	r2, [r4, #0]
 8005bfe:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8005c02:	6922      	ldr	r2, [r4, #16]
 8005c04:	bb52      	cbnz	r2, 8005c5c <USB_EPStartXfer+0x796>
 8005c06:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 8005c0a:	b292      	uxth	r2, r2
 8005c0c:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8005c10:	b292      	uxth	r2, r2
 8005c12:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8005c16:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 8005c1a:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8005c1e:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8005c22:	b292      	uxth	r2, r2
 8005c24:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8005c28:	e033      	b.n	8005c92 <USB_EPStartXfer+0x7cc>
 8005c2a:	2a3e      	cmp	r2, #62	; 0x3e
 8005c2c:	d809      	bhi.n	8005c42 <USB_EPStartXfer+0x77c>
 8005c2e:	0851      	lsrs	r1, r2, #1
 8005c30:	f012 0f01 	tst.w	r2, #1
 8005c34:	d000      	beq.n	8005c38 <USB_EPStartXfer+0x772>
 8005c36:	3101      	adds	r1, #1
 8005c38:	028a      	lsls	r2, r1, #10
 8005c3a:	b292      	uxth	r2, r2
 8005c3c:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8005c40:	e7d5      	b.n	8005bee <USB_EPStartXfer+0x728>
 8005c42:	0951      	lsrs	r1, r2, #5
 8005c44:	f012 0f1f 	tst.w	r2, #31
 8005c48:	d100      	bne.n	8005c4c <USB_EPStartXfer+0x786>
 8005c4a:	3901      	subs	r1, #1
 8005c4c:	ea6f 62c1 	mvn.w	r2, r1, lsl #27
 8005c50:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8005c54:	b292      	uxth	r2, r2
 8005c56:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8005c5a:	e7c8      	b.n	8005bee <USB_EPStartXfer+0x728>
 8005c5c:	2a3e      	cmp	r2, #62	; 0x3e
 8005c5e:	d809      	bhi.n	8005c74 <USB_EPStartXfer+0x7ae>
 8005c60:	0851      	lsrs	r1, r2, #1
 8005c62:	f012 0f01 	tst.w	r2, #1
 8005c66:	d000      	beq.n	8005c6a <USB_EPStartXfer+0x7a4>
 8005c68:	3101      	adds	r1, #1
 8005c6a:	028a      	lsls	r2, r1, #10
 8005c6c:	b292      	uxth	r2, r2
 8005c6e:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8005c72:	e00e      	b.n	8005c92 <USB_EPStartXfer+0x7cc>
 8005c74:	0951      	lsrs	r1, r2, #5
 8005c76:	f012 0f1f 	tst.w	r2, #31
 8005c7a:	d100      	bne.n	8005c7e <USB_EPStartXfer+0x7b8>
 8005c7c:	3901      	subs	r1, #1
 8005c7e:	ea6f 62c1 	mvn.w	r2, r1, lsl #27
 8005c82:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8005c86:	b292      	uxth	r2, r2
 8005c88:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8005c8c:	e001      	b.n	8005c92 <USB_EPStartXfer+0x7cc>
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	d01d      	beq.n	8005cce <USB_EPStartXfer+0x808>
        if (ep->xfer_count != 0U)
 8005c92:	69e3      	ldr	r3, [r4, #28]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	f43f ac42 	beq.w	800551e <USB_EPStartXfer+0x58>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005c9a:	7822      	ldrb	r2, [r4, #0]
 8005c9c:	f835 1022 	ldrh.w	r1, [r5, r2, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005ca0:	f244 0340 	movw	r3, #16448	; 0x4040
 8005ca4:	ea03 0001 	and.w	r0, r3, r1
 8005ca8:	438b      	bics	r3, r1
 8005caa:	d002      	beq.n	8005cb2 <USB_EPStartXfer+0x7ec>
 8005cac:	2800      	cmp	r0, #0
 8005cae:	f47f ac36 	bne.w	800551e <USB_EPStartXfer+0x58>
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8005cb2:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8005cb6:	b29b      	uxth	r3, r3
 8005cb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cc4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005cc8:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 8005ccc:	e427      	b.n	800551e <USB_EPStartXfer+0x58>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005cce:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	442b      	add	r3, r5
 8005cd6:	7822      	ldrb	r2, [r4, #0]
 8005cd8:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8005cdc:	8a22      	ldrh	r2, [r4, #16]
 8005cde:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8005ce2:	e7d6      	b.n	8005c92 <USB_EPStartXfer+0x7cc>
          ep->xfer_len = 0U;
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	61a2      	str	r2, [r4, #24]
          len = ep->xfer_len;
 8005ce8:	460a      	mov	r2, r1
 8005cea:	e729      	b.n	8005b40 <USB_EPStartXfer+0x67a>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005cec:	2a3e      	cmp	r2, #62	; 0x3e
 8005cee:	d809      	bhi.n	8005d04 <USB_EPStartXfer+0x83e>
 8005cf0:	0851      	lsrs	r1, r2, #1
 8005cf2:	f012 0f01 	tst.w	r2, #1
 8005cf6:	d000      	beq.n	8005cfa <USB_EPStartXfer+0x834>
 8005cf8:	3101      	adds	r1, #1
 8005cfa:	0289      	lsls	r1, r1, #10
 8005cfc:	b289      	uxth	r1, r1
 8005cfe:	f8a3 1404 	strh.w	r1, [r3, #1028]	; 0x404
 8005d02:	e739      	b.n	8005b78 <USB_EPStartXfer+0x6b2>
 8005d04:	0951      	lsrs	r1, r2, #5
 8005d06:	f012 0f1f 	tst.w	r2, #31
 8005d0a:	d100      	bne.n	8005d0e <USB_EPStartXfer+0x848>
 8005d0c:	3901      	subs	r1, #1
 8005d0e:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 8005d12:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8005d16:	b289      	uxth	r1, r1
 8005d18:	f8a3 1404 	strh.w	r1, [r3, #1028]	; 0x404
 8005d1c:	e72c      	b.n	8005b78 <USB_EPStartXfer+0x6b2>
 8005d1e:	2a3e      	cmp	r2, #62	; 0x3e
 8005d20:	d80a      	bhi.n	8005d38 <USB_EPStartXfer+0x872>
 8005d22:	0851      	lsrs	r1, r2, #1
 8005d24:	f012 0f01 	tst.w	r2, #1
 8005d28:	d000      	beq.n	8005d2c <USB_EPStartXfer+0x866>
 8005d2a:	3101      	adds	r1, #1
 8005d2c:	028a      	lsls	r2, r1, #10
 8005d2e:	b292      	uxth	r2, r2
 8005d30:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8005d34:	f7ff bbf3 	b.w	800551e <USB_EPStartXfer+0x58>
 8005d38:	0951      	lsrs	r1, r2, #5
 8005d3a:	f012 0f1f 	tst.w	r2, #31
 8005d3e:	d100      	bne.n	8005d42 <USB_EPStartXfer+0x87c>
 8005d40:	3901      	subs	r1, #1
 8005d42:	ea6f 62c1 	mvn.w	r2, r1, lsl #27
 8005d46:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8005d4a:	b292      	uxth	r2, r2
 8005d4c:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8005d50:	f7ff bbe5 	b.w	800551e <USB_EPStartXfer+0x58>
 8005d54:	2b01      	cmp	r3, #1
 8005d56:	f47f abe2 	bne.w	800551e <USB_EPStartXfer+0x58>
 8005d5a:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8005d5e:	b29b      	uxth	r3, r3
 8005d60:	442b      	add	r3, r5
 8005d62:	7821      	ldrb	r1, [r4, #0]
 8005d64:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8005d68:	b292      	uxth	r2, r2
 8005d6a:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8005d6e:	f7ff bbd6 	b.w	800551e <USB_EPStartXfer+0x58>
        return HAL_ERROR;
 8005d72:	2001      	movs	r0, #1
 8005d74:	f7ff bbe4 	b.w	8005540 <USB_EPStartXfer+0x7a>

08005d78 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005d78:	b410      	push	{r4}
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005d7a:	085c      	lsrs	r4, r3, #1
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005d7c:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8005d80:	f500 6080 	add.w	r0, r0, #1024	; 0x400

  for (i = n; i != 0U; i--)
 8005d84:	e007      	b.n	8005d96 <USB_ReadPMA+0x1e>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8005d86:	f830 2b04 	ldrh.w	r2, [r0], #4
    pdwVal++;
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005d8a:	700a      	strb	r2, [r1, #0]
    pBuf++;
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8005d8c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8005d90:	704a      	strb	r2, [r1, #1]
    pBuf++;
 8005d92:	3102      	adds	r1, #2
  for (i = n; i != 0U; i--)
 8005d94:	3c01      	subs	r4, #1
 8005d96:	2c00      	cmp	r4, #0
 8005d98:	d1f5      	bne.n	8005d86 <USB_ReadPMA+0xe>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8005d9a:	f013 0f01 	tst.w	r3, #1
 8005d9e:	d001      	beq.n	8005da4 <USB_ReadPMA+0x2c>
  {
    temp = *pdwVal;
 8005da0:	8803      	ldrh	r3, [r0, #0]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005da2:	700b      	strb	r3, [r1, #0]
  }
}
 8005da4:	bc10      	pop	{r4}
 8005da6:	4770      	bx	lr

08005da8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005da8:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005daa:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005dae:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 8005db2:	b15b      	cbz	r3, 8005dcc <USBD_CDC_EP0_RxReady+0x24>
 8005db4:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8005db8:	28ff      	cmp	r0, #255	; 0xff
 8005dba:	d007      	beq.n	8005dcc <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8005dc2:	4621      	mov	r1, r4
 8005dc4:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8005dc6:	23ff      	movs	r3, #255	; 0xff
 8005dc8:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 8005dcc:	2000      	movs	r0, #0
 8005dce:	bd10      	pop	{r4, pc}

08005dd0 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8005dd0:	2343      	movs	r3, #67	; 0x43
 8005dd2:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8005dd4:	4800      	ldr	r0, [pc, #0]	; (8005dd8 <USBD_CDC_GetFSCfgDesc+0x8>)
 8005dd6:	4770      	bx	lr
 8005dd8:	20000050 	.word	0x20000050

08005ddc <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8005ddc:	2343      	movs	r3, #67	; 0x43
 8005dde:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8005de0:	4800      	ldr	r0, [pc, #0]	; (8005de4 <USBD_CDC_GetHSCfgDesc+0x8>)
 8005de2:	4770      	bx	lr
 8005de4:	20000094 	.word	0x20000094

08005de8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005de8:	2343      	movs	r3, #67	; 0x43
 8005dea:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8005dec:	4800      	ldr	r0, [pc, #0]	; (8005df0 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8005dee:	4770      	bx	lr
 8005df0:	200000e4 	.word	0x200000e4

08005df4 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8005df4:	230a      	movs	r3, #10
 8005df6:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8005df8:	4800      	ldr	r0, [pc, #0]	; (8005dfc <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8005dfa:	4770      	bx	lr
 8005dfc:	200000d8 	.word	0x200000d8

08005e00 <USBD_CDC_DataOut>:
{
 8005e00:	b538      	push	{r3, r4, r5, lr}
 8005e02:	4604      	mov	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005e04:	f8d0 52b8 	ldr.w	r5, [r0, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005e08:	f001 f82a 	bl	8006e60 <USBD_LL_GetRxDataSize>
 8005e0c:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  if (pdev->pClassData != NULL)
 8005e10:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8005e14:	b14b      	cbz	r3, 8005e2a <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005e16:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8005e1a:	68db      	ldr	r3, [r3, #12]
 8005e1c:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 8005e20:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 8005e24:	4798      	blx	r3
    return USBD_OK;
 8005e26:	2000      	movs	r0, #0
}
 8005e28:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8005e2a:	2002      	movs	r0, #2
 8005e2c:	e7fc      	b.n	8005e28 <USBD_CDC_DataOut+0x28>

08005e2e <USBD_CDC_DataIn>:
{
 8005e2e:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005e30:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005e34:	f8d0 42c0 	ldr.w	r4, [r0, #704]	; 0x2c0
  if (pdev->pClassData != NULL)
 8005e38:	b1f2      	cbz	r2, 8005e78 <USBD_CDC_DataIn+0x4a>
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005e3a:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8005e3e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8005e42:	69db      	ldr	r3, [r3, #28]
 8005e44:	b14b      	cbz	r3, 8005e5a <USBD_CDC_DataIn+0x2c>
 8005e46:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
 8005e4a:	eb04 04cc 	add.w	r4, r4, ip, lsl #3
 8005e4e:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8005e50:	fbb3 fcf4 	udiv	ip, r3, r4
 8005e54:	fb04 331c 	mls	r3, r4, ip, r3
 8005e58:	b123      	cbz	r3, 8005e64 <USBD_CDC_DataIn+0x36>
      hcdc->TxState = 0U;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
    return USBD_OK;
 8005e60:	2000      	movs	r0, #0
}
 8005e62:	bd10      	pop	{r4, pc}
      pdev->ep_in[epnum].total_length = 0U;
 8005e64:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8005e68:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	61da      	str	r2, [r3, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005e70:	4613      	mov	r3, r2
 8005e72:	f000 ffe5 	bl	8006e40 <USBD_LL_Transmit>
 8005e76:	e7f3      	b.n	8005e60 <USBD_CDC_DataIn+0x32>
    return USBD_FAIL;
 8005e78:	2002      	movs	r0, #2
 8005e7a:	e7f2      	b.n	8005e62 <USBD_CDC_DataIn+0x34>

08005e7c <USBD_CDC_Setup>:
{
 8005e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e7e:	b083      	sub	sp, #12
 8005e80:	4606      	mov	r6, r0
 8005e82:	460c      	mov	r4, r1
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005e84:	f8d0 72b8 	ldr.w	r7, [r0, #696]	; 0x2b8
  uint8_t ifalt = 0U;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	f88d 3007 	strb.w	r3, [sp, #7]
  uint16_t status_info = 0U;
 8005e8e:	f8ad 3004 	strh.w	r3, [sp, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005e92:	780b      	ldrb	r3, [r1, #0]
 8005e94:	f013 0560 	ands.w	r5, r3, #96	; 0x60
 8005e98:	d027      	beq.n	8005eea <USBD_CDC_Setup+0x6e>
 8005e9a:	2d20      	cmp	r5, #32
 8005e9c:	d153      	bne.n	8005f46 <USBD_CDC_Setup+0xca>
      if (req->wLength)
 8005e9e:	88ca      	ldrh	r2, [r1, #6]
 8005ea0:	b1da      	cbz	r2, 8005eda <USBD_CDC_Setup+0x5e>
        if (req->bmRequest & 0x80U)
 8005ea2:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005ea6:	d00c      	beq.n	8005ec2 <USBD_CDC_Setup+0x46>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005ea8:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 8005eac:	689b      	ldr	r3, [r3, #8]
 8005eae:	4639      	mov	r1, r7
 8005eb0:	7860      	ldrb	r0, [r4, #1]
 8005eb2:	4798      	blx	r3
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005eb4:	88e2      	ldrh	r2, [r4, #6]
 8005eb6:	4639      	mov	r1, r7
 8005eb8:	4630      	mov	r0, r6
 8005eba:	f000 fd7f 	bl	80069bc <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8005ebe:	2500      	movs	r5, #0
 8005ec0:	e044      	b.n	8005f4c <USBD_CDC_Setup+0xd0>
          hcdc->CmdOpCode = req->bRequest;
 8005ec2:	784b      	ldrb	r3, [r1, #1]
 8005ec4:	f887 3200 	strb.w	r3, [r7, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005ec8:	798b      	ldrb	r3, [r1, #6]
 8005eca:	f887 3201 	strb.w	r3, [r7, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005ece:	88ca      	ldrh	r2, [r1, #6]
 8005ed0:	4639      	mov	r1, r7
 8005ed2:	f000 fd88 	bl	80069e6 <USBD_CtlPrepareRx>
  uint8_t ret = USBD_OK;
 8005ed6:	2500      	movs	r5, #0
 8005ed8:	e038      	b.n	8005f4c <USBD_CDC_Setup+0xd0>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005eda:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	7848      	ldrb	r0, [r1, #1]
 8005ee4:	4798      	blx	r3
  uint8_t ret = USBD_OK;
 8005ee6:	2500      	movs	r5, #0
 8005ee8:	e030      	b.n	8005f4c <USBD_CDC_Setup+0xd0>
      switch (req->bRequest)
 8005eea:	784f      	ldrb	r7, [r1, #1]
 8005eec:	2f0a      	cmp	r7, #10
 8005eee:	d014      	beq.n	8005f1a <USBD_CDC_Setup+0x9e>
 8005ef0:	2f0b      	cmp	r7, #11
 8005ef2:	d020      	beq.n	8005f36 <USBD_CDC_Setup+0xba>
 8005ef4:	b11f      	cbz	r7, 8005efe <USBD_CDC_Setup+0x82>
          USBD_CtlError(pdev, req);
 8005ef6:	f000 fa55 	bl	80063a4 <USBD_CtlError>
          ret = USBD_FAIL;
 8005efa:	2502      	movs	r5, #2
          break;
 8005efc:	e026      	b.n	8005f4c <USBD_CDC_Setup+0xd0>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005efe:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005f02:	2b03      	cmp	r3, #3
 8005f04:	d003      	beq.n	8005f0e <USBD_CDC_Setup+0x92>
            USBD_CtlError(pdev, req);
 8005f06:	f000 fa4d 	bl	80063a4 <USBD_CtlError>
            ret = USBD_FAIL;
 8005f0a:	2502      	movs	r5, #2
 8005f0c:	e01e      	b.n	8005f4c <USBD_CDC_Setup+0xd0>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8005f0e:	2202      	movs	r2, #2
 8005f10:	a901      	add	r1, sp, #4
 8005f12:	f000 fd53 	bl	80069bc <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8005f16:	463d      	mov	r5, r7
 8005f18:	e018      	b.n	8005f4c <USBD_CDC_Setup+0xd0>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f1a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005f1e:	2b03      	cmp	r3, #3
 8005f20:	d003      	beq.n	8005f2a <USBD_CDC_Setup+0xae>
            USBD_CtlError(pdev, req);
 8005f22:	f000 fa3f 	bl	80063a4 <USBD_CtlError>
            ret = USBD_FAIL;
 8005f26:	2502      	movs	r5, #2
 8005f28:	e010      	b.n	8005f4c <USBD_CDC_Setup+0xd0>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	f10d 0107 	add.w	r1, sp, #7
 8005f30:	f000 fd44 	bl	80069bc <USBD_CtlSendData>
 8005f34:	e00a      	b.n	8005f4c <USBD_CDC_Setup+0xd0>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005f36:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005f3a:	2b03      	cmp	r3, #3
 8005f3c:	d006      	beq.n	8005f4c <USBD_CDC_Setup+0xd0>
            USBD_CtlError(pdev, req);
 8005f3e:	f000 fa31 	bl	80063a4 <USBD_CtlError>
            ret = USBD_FAIL;
 8005f42:	2502      	movs	r5, #2
 8005f44:	e002      	b.n	8005f4c <USBD_CDC_Setup+0xd0>
      USBD_CtlError(pdev, req);
 8005f46:	f000 fa2d 	bl	80063a4 <USBD_CtlError>
      ret = USBD_FAIL;
 8005f4a:	2502      	movs	r5, #2
}
 8005f4c:	4628      	mov	r0, r5
 8005f4e:	b003      	add	sp, #12
 8005f50:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005f52 <USBD_CDC_DeInit>:
{
 8005f52:	b538      	push	{r3, r4, r5, lr}
 8005f54:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005f56:	2181      	movs	r1, #129	; 0x81
 8005f58:	f000 ff3b 	bl	8006dd2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005f5c:	2500      	movs	r5, #0
 8005f5e:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005f60:	2101      	movs	r1, #1
 8005f62:	4620      	mov	r0, r4
 8005f64:	f000 ff35 	bl	8006dd2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005f68:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005f6c:	2182      	movs	r1, #130	; 0x82
 8005f6e:	4620      	mov	r0, r4
 8005f70:	f000 ff2f 	bl	8006dd2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005f74:	6425      	str	r5, [r4, #64]	; 0x40
  if (pdev->pClassData != NULL)
 8005f76:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8005f7a:	b14b      	cbz	r3, 8005f90 <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005f7c:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8005f84:	f8d4 02b8 	ldr.w	r0, [r4, #696]	; 0x2b8
 8005f88:	f000 ff74 	bl	8006e74 <USBD_static_free>
    pdev->pClassData = NULL;
 8005f8c:	f8c4 52b8 	str.w	r5, [r4, #696]	; 0x2b8
}
 8005f90:	2000      	movs	r0, #0
 8005f92:	bd38      	pop	{r3, r4, r5, pc}

08005f94 <USBD_CDC_Init>:
{
 8005f94:	b570      	push	{r4, r5, r6, lr}
 8005f96:	4604      	mov	r4, r0
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005f98:	7c03      	ldrb	r3, [r0, #16]
 8005f9a:	bbab      	cbnz	r3, 8006008 <USBD_CDC_Init+0x74>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005f9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005fa0:	2202      	movs	r2, #2
 8005fa2:	2181      	movs	r1, #129	; 0x81
 8005fa4:	f000 ff0a 	bl	8006dbc <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005fa8:	2501      	movs	r5, #1
 8005faa:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005fac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005fb0:	2202      	movs	r2, #2
 8005fb2:	4629      	mov	r1, r5
 8005fb4:	4620      	mov	r0, r4
 8005fb6:	f000 ff01 	bl	8006dbc <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005fba:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005fbe:	2308      	movs	r3, #8
 8005fc0:	2203      	movs	r2, #3
 8005fc2:	2182      	movs	r1, #130	; 0x82
 8005fc4:	4620      	mov	r0, r4
 8005fc6:	f000 fef9 	bl	8006dbc <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	6423      	str	r3, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005fce:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005fd2:	f000 ff4b 	bl	8006e6c <USBD_static_malloc>
 8005fd6:	4605      	mov	r5, r0
 8005fd8:	f8c4 02b8 	str.w	r0, [r4, #696]	; 0x2b8
  if (pdev->pClassData == NULL)
 8005fdc:	b368      	cbz	r0, 800603a <USBD_CDC_Init+0xa6>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005fde:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4798      	blx	r3
    hcdc->TxState = 0U;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	f8c5 3214 	str.w	r3, [r5, #532]	; 0x214
    hcdc->RxState = 0U;
 8005fec:	f8c5 3218 	str.w	r3, [r5, #536]	; 0x218
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ff0:	7c26      	ldrb	r6, [r4, #16]
 8005ff2:	b9ce      	cbnz	r6, 8006028 <USBD_CDC_Init+0x94>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005ff4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ff8:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 8005ffc:	2101      	movs	r1, #1
 8005ffe:	4620      	mov	r0, r4
 8006000:	f000 ff26 	bl	8006e50 <USBD_LL_PrepareReceive>
}
 8006004:	4630      	mov	r0, r6
 8006006:	bd70      	pop	{r4, r5, r6, pc}
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006008:	2340      	movs	r3, #64	; 0x40
 800600a:	2202      	movs	r2, #2
 800600c:	2181      	movs	r1, #129	; 0x81
 800600e:	f000 fed5 	bl	8006dbc <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006012:	2501      	movs	r5, #1
 8006014:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006016:	2340      	movs	r3, #64	; 0x40
 8006018:	2202      	movs	r2, #2
 800601a:	4629      	mov	r1, r5
 800601c:	4620      	mov	r0, r4
 800601e:	f000 fecd 	bl	8006dbc <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006022:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
 8006026:	e7ca      	b.n	8005fbe <USBD_CDC_Init+0x2a>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006028:	2340      	movs	r3, #64	; 0x40
 800602a:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 800602e:	2101      	movs	r1, #1
 8006030:	4620      	mov	r0, r4
 8006032:	f000 ff0d 	bl	8006e50 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8006036:	2600      	movs	r6, #0
 8006038:	e7e4      	b.n	8006004 <USBD_CDC_Init+0x70>
    ret = 1U;
 800603a:	2601      	movs	r6, #1
 800603c:	e7e2      	b.n	8006004 <USBD_CDC_Init+0x70>

0800603e <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if (fops != NULL)
 800603e:	b119      	cbz	r1, 8006048 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData = fops;
 8006040:	f8c0 12bc 	str.w	r1, [r0, #700]	; 0x2bc
    ret = USBD_OK;
 8006044:	2000      	movs	r0, #0
 8006046:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8006048:	2002      	movs	r0, #2
  }

  return ret;
}
 800604a:	4770      	bx	lr

0800604c <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800604c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  hcdc->TxBuffer = pbuff;
 8006050:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006054:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
}
 8006058:	2000      	movs	r0, #0
 800605a:	4770      	bx	lr

0800605c <USBD_CDC_SetRxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800605c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  hcdc->RxBuffer = pbuff;
 8006060:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204

  return USBD_OK;
}
 8006064:	2000      	movs	r0, #0
 8006066:	4770      	bx	lr

08006068 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006068:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800606c:	b192      	cbz	r2, 8006094 <USBD_CDC_ReceivePacket+0x2c>
{
 800606e:	b508      	push	{r3, lr}
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006070:	7c03      	ldrb	r3, [r0, #16]
 8006072:	b943      	cbnz	r3, 8006086 <USBD_CDC_ReceivePacket+0x1e>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006074:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006078:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 800607c:	2101      	movs	r1, #1
 800607e:	f000 fee7 	bl	8006e50 <USBD_LL_PrepareReceive>
      USBD_LL_PrepareReceive(pdev,
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006082:	2000      	movs	r0, #0
  }
  else
  {
    return USBD_FAIL;
  }
}
 8006084:	bd08      	pop	{r3, pc}
      USBD_LL_PrepareReceive(pdev,
 8006086:	2340      	movs	r3, #64	; 0x40
 8006088:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 800608c:	2101      	movs	r1, #1
 800608e:	f000 fedf 	bl	8006e50 <USBD_LL_PrepareReceive>
 8006092:	e7f6      	b.n	8006082 <USBD_CDC_ReceivePacket+0x1a>
    return USBD_FAIL;
 8006094:	2002      	movs	r0, #2
}
 8006096:	4770      	bx	lr

08006098 <USBD_Init>:
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006098:	b198      	cbz	r0, 80060c2 <USBD_Init+0x2a>
{
 800609a:	b508      	push	{r3, lr}
 800609c:	4603      	mov	r3, r0
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800609e:	f8d0 02b4 	ldr.w	r0, [r0, #692]	; 0x2b4
 80060a2:	b110      	cbz	r0, 80060aa <USBD_Init+0x12>
  {
    pdev->pClass = NULL;
 80060a4:	2000      	movs	r0, #0
 80060a6:	f8c3 02b4 	str.w	r0, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80060aa:	b109      	cbz	r1, 80060b0 <USBD_Init+0x18>
  {
    pdev->pDesc = pdesc;
 80060ac:	f8c3 12b0 	str.w	r1, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80060b0:	2101      	movs	r1, #1
 80060b2:	f883 129c 	strb.w	r1, [r3, #668]	; 0x29c
  pdev->id = id;
 80060b6:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80060b8:	4618      	mov	r0, r3
 80060ba:	f000 fe35 	bl	8006d28 <USBD_LL_Init>

  return USBD_OK;
 80060be:	2000      	movs	r0, #0
}
 80060c0:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 80060c2:	2002      	movs	r0, #2
}
 80060c4:	4770      	bx	lr

080060c6 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 80060c6:	b119      	cbz	r1, 80060d0 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80060c8:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
    status = USBD_OK;
 80060cc:	2000      	movs	r0, #0
 80060ce:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80060d0:	2002      	movs	r0, #2
  }

  return status;
}
 80060d2:	4770      	bx	lr

080060d4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80060d4:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80060d6:	f000 fe69 	bl	8006dac <USBD_LL_Start>

  return USBD_OK;
}
 80060da:	2000      	movs	r0, #0
 80060dc:	bd08      	pop	{r3, pc}

080060de <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80060de:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 80060e0:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80060e4:	b12b      	cbz	r3, 80060f2 <USBD_SetClassConfig+0x14>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4798      	blx	r3
 80060ea:	b900      	cbnz	r0, 80060ee <USBD_SetClassConfig+0x10>
      ret = USBD_OK;
    }
  }

  return ret;
}
 80060ec:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_FAIL;
 80060ee:	2002      	movs	r0, #2
 80060f0:	e7fc      	b.n	80060ec <USBD_SetClassConfig+0xe>
 80060f2:	2002      	movs	r0, #2
 80060f4:	e7fa      	b.n	80060ec <USBD_SetClassConfig+0xe>

080060f6 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80060f6:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80060f8:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	4798      	blx	r3

  return USBD_OK;
}
 8006100:	2000      	movs	r0, #0
 8006102:	bd08      	pop	{r3, pc}

08006104 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006104:	b538      	push	{r3, r4, r5, lr}
 8006106:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006108:	f500 752a 	add.w	r5, r0, #680	; 0x2a8
 800610c:	4628      	mov	r0, r5
 800610e:	f000 f935 	bl	800637c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006112:	2301      	movs	r3, #1
 8006114:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006118:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	; 0x2ae
 800611c:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006120:	f894 12a8 	ldrb.w	r1, [r4, #680]	; 0x2a8
 8006124:	f001 031f 	and.w	r3, r1, #31
 8006128:	2b01      	cmp	r3, #1
 800612a:	d00e      	beq.n	800614a <USBD_LL_SetupStage+0x46>
 800612c:	2b02      	cmp	r3, #2
 800612e:	d011      	beq.n	8006154 <USBD_LL_SetupStage+0x50>
 8006130:	b12b      	cbz	r3, 800613e <USBD_LL_SetupStage+0x3a>
    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006132:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8006136:	4620      	mov	r0, r4
 8006138:	f000 fe53 	bl	8006de2 <USBD_LL_StallEP>
      break;
 800613c:	e003      	b.n	8006146 <USBD_LL_SetupStage+0x42>
      USBD_StdDevReq(pdev, &pdev->request);
 800613e:	4629      	mov	r1, r5
 8006140:	4620      	mov	r0, r4
 8006142:	f000 fac9 	bl	80066d8 <USBD_StdDevReq>
  }

  return USBD_OK;
}
 8006146:	2000      	movs	r0, #0
 8006148:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 800614a:	4629      	mov	r1, r5
 800614c:	4620      	mov	r0, r4
 800614e:	f000 faf7 	bl	8006740 <USBD_StdItfReq>
      break;
 8006152:	e7f8      	b.n	8006146 <USBD_LL_SetupStage+0x42>
      USBD_StdEPReq(pdev, &pdev->request);
 8006154:	4629      	mov	r1, r5
 8006156:	4620      	mov	r0, r4
 8006158:	f000 fb22 	bl	80067a0 <USBD_StdEPReq>
      break;
 800615c:	e7f3      	b.n	8006146 <USBD_LL_SetupStage+0x42>

0800615e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800615e:	b538      	push	{r3, r4, r5, lr}
 8006160:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006162:	460d      	mov	r5, r1
 8006164:	bb91      	cbnz	r1, 80061cc <USBD_LL_DataOutStage+0x6e>
 8006166:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006168:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 800616c:	2a03      	cmp	r2, #3
 800616e:	d003      	beq.n	8006178 <USBD_LL_DataOutStage+0x1a>
        USBD_CtlSendStatus(pdev);
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006170:	2a05      	cmp	r2, #5
 8006172:	d024      	beq.n	80061be <USBD_LL_DataOutStage+0x60>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8006174:	4608      	mov	r0, r1
 8006176:	e033      	b.n	80061e0 <USBD_LL_DataOutStage+0x82>
      if (pep->rem_length > pep->maxpacket)
 8006178:	f8d0 1160 	ldr.w	r1, [r0, #352]	; 0x160
 800617c:	f8d0 2164 	ldr.w	r2, [r0, #356]	; 0x164
 8006180:	4291      	cmp	r1, r2
 8006182:	d90d      	bls.n	80061a0 <USBD_LL_DataOutStage+0x42>
        pep->rem_length -= pep->maxpacket;
 8006184:	1a89      	subs	r1, r1, r2
 8006186:	f8c0 1160 	str.w	r1, [r0, #352]	; 0x160
        USBD_CtlContinueRx(pdev, pdata,
 800618a:	428a      	cmp	r2, r1
 800618c:	d906      	bls.n	800619c <USBD_LL_DataOutStage+0x3e>
 800618e:	b28a      	uxth	r2, r1
 8006190:	4619      	mov	r1, r3
 8006192:	4620      	mov	r0, r4
 8006194:	f000 fc36 	bl	8006a04 <USBD_CtlContinueRx>
  return USBD_OK;
 8006198:	4628      	mov	r0, r5
 800619a:	e021      	b.n	80061e0 <USBD_LL_DataOutStage+0x82>
        USBD_CtlContinueRx(pdev, pdata,
 800619c:	b292      	uxth	r2, r2
 800619e:	e7f7      	b.n	8006190 <USBD_LL_DataOutStage+0x32>
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80061a0:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80061a4:	691b      	ldr	r3, [r3, #16]
 80061a6:	b11b      	cbz	r3, 80061b0 <USBD_LL_DataOutStage+0x52>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80061a8:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80061ac:	2a03      	cmp	r2, #3
 80061ae:	d004      	beq.n	80061ba <USBD_LL_DataOutStage+0x5c>
        USBD_CtlSendStatus(pdev);
 80061b0:	4620      	mov	r0, r4
 80061b2:	f000 fc2f 	bl	8006a14 <USBD_CtlSendStatus>
  return USBD_OK;
 80061b6:	4628      	mov	r0, r5
 80061b8:	e012      	b.n	80061e0 <USBD_LL_DataOutStage+0x82>
          pdev->pClass->EP0_RxReady(pdev);
 80061ba:	4798      	blx	r3
 80061bc:	e7f8      	b.n	80061b0 <USBD_LL_DataOutStage+0x52>
        pdev->ep0_state = USBD_EP0_IDLE;
 80061be:	2100      	movs	r1, #0
 80061c0:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80061c4:	f000 fe0d 	bl	8006de2 <USBD_LL_StallEP>
  return USBD_OK;
 80061c8:	4628      	mov	r0, r5
 80061ca:	e009      	b.n	80061e0 <USBD_LL_DataOutStage+0x82>
  else if ((pdev->pClass->DataOut != NULL) &&
 80061cc:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80061d0:	699b      	ldr	r3, [r3, #24]
 80061d2:	b133      	cbz	r3, 80061e2 <USBD_LL_DataOutStage+0x84>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80061d4:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80061d8:	2a03      	cmp	r2, #3
 80061da:	d104      	bne.n	80061e6 <USBD_LL_DataOutStage+0x88>
    pdev->pClass->DataOut(pdev, epnum);
 80061dc:	4798      	blx	r3
  return USBD_OK;
 80061de:	2000      	movs	r0, #0
}
 80061e0:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 80061e2:	2002      	movs	r0, #2
 80061e4:	e7fc      	b.n	80061e0 <USBD_LL_DataOutStage+0x82>
 80061e6:	2002      	movs	r0, #2
 80061e8:	e7fa      	b.n	80061e0 <USBD_LL_DataOutStage+0x82>

080061ea <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80061ea:	b538      	push	{r3, r4, r5, lr}
 80061ec:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80061ee:	460d      	mov	r5, r1
 80061f0:	2900      	cmp	r1, #0
 80061f2:	d153      	bne.n	800629c <USBD_LL_DataInStage+0xb2>
 80061f4:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80061f6:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 80061fa:	2a02      	cmp	r2, #2
 80061fc:	d00c      	beq.n	8006218 <USBD_LL_DataInStage+0x2e>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80061fe:	2a04      	cmp	r2, #4
 8006200:	d000      	beq.n	8006204 <USBD_LL_DataInStage+0x1a>
 8006202:	b91a      	cbnz	r2, 800620c <USBD_LL_DataInStage+0x22>
          (pdev->ep0_state == USBD_EP0_IDLE))
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006204:	2180      	movs	r1, #128	; 0x80
 8006206:	4620      	mov	r0, r4
 8006208:	f000 fdeb 	bl	8006de2 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800620c:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8006210:	2b01      	cmp	r3, #1
 8006212:	d03e      	beq.n	8006292 <USBD_LL_DataInStage+0xa8>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8006214:	4628      	mov	r0, r5
}
 8006216:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 8006218:	6a01      	ldr	r1, [r0, #32]
 800621a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800621c:	4291      	cmp	r1, r2
 800621e:	d81b      	bhi.n	8006258 <USBD_LL_DataInStage+0x6e>
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006220:	69c1      	ldr	r1, [r0, #28]
 8006222:	fbb1 f3f2 	udiv	r3, r1, r2
 8006226:	fb02 1313 	mls	r3, r2, r3, r1
 800622a:	b92b      	cbnz	r3, 8006238 <USBD_LL_DataInStage+0x4e>
 800622c:	428a      	cmp	r2, r1
 800622e:	d803      	bhi.n	8006238 <USBD_LL_DataInStage+0x4e>
            (pep->total_length < pdev->ep0_data_len))
 8006230:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006234:	4299      	cmp	r1, r3
 8006236:	d31c      	bcc.n	8006272 <USBD_LL_DataInStage+0x88>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006238:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 800623c:	68db      	ldr	r3, [r3, #12]
 800623e:	b11b      	cbz	r3, 8006248 <USBD_LL_DataInStage+0x5e>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006240:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006244:	2a03      	cmp	r2, #3
 8006246:	d021      	beq.n	800628c <USBD_LL_DataInStage+0xa2>
          USBD_LL_StallEP(pdev, 0x80U);
 8006248:	2180      	movs	r1, #128	; 0x80
 800624a:	4620      	mov	r0, r4
 800624c:	f000 fdc9 	bl	8006de2 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006250:	4620      	mov	r0, r4
 8006252:	f000 fbea 	bl	8006a2a <USBD_CtlReceiveStatus>
 8006256:	e7d9      	b.n	800620c <USBD_LL_DataInStage+0x22>
        pep->rem_length -= pep->maxpacket;
 8006258:	1a8a      	subs	r2, r1, r2
 800625a:	6202      	str	r2, [r0, #32]
        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800625c:	b292      	uxth	r2, r2
 800625e:	4619      	mov	r1, r3
 8006260:	f000 fbb9 	bl	80069d6 <USBD_CtlContinueSendData>
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006264:	2300      	movs	r3, #0
 8006266:	461a      	mov	r2, r3
 8006268:	4619      	mov	r1, r3
 800626a:	4620      	mov	r0, r4
 800626c:	f000 fdf0 	bl	8006e50 <USBD_LL_PrepareReceive>
 8006270:	e7cc      	b.n	800620c <USBD_LL_DataInStage+0x22>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006272:	2200      	movs	r2, #0
 8006274:	4611      	mov	r1, r2
 8006276:	f000 fbae 	bl	80069d6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800627a:	2100      	movs	r1, #0
 800627c:	f8c4 1298 	str.w	r1, [r4, #664]	; 0x298
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006280:	460b      	mov	r3, r1
 8006282:	460a      	mov	r2, r1
 8006284:	4620      	mov	r0, r4
 8006286:	f000 fde3 	bl	8006e50 <USBD_LL_PrepareReceive>
 800628a:	e7bf      	b.n	800620c <USBD_LL_DataInStage+0x22>
            pdev->pClass->EP0_TxSent(pdev);
 800628c:	4620      	mov	r0, r4
 800628e:	4798      	blx	r3
 8006290:	e7da      	b.n	8006248 <USBD_LL_DataInStage+0x5e>
      pdev->dev_test_mode = 0U;
 8006292:	2300      	movs	r3, #0
 8006294:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
  return USBD_OK;
 8006298:	4628      	mov	r0, r5
 800629a:	e7bc      	b.n	8006216 <USBD_LL_DataInStage+0x2c>
  else if ((pdev->pClass->DataIn != NULL) &&
 800629c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80062a0:	695b      	ldr	r3, [r3, #20]
 80062a2:	b133      	cbz	r3, 80062b2 <USBD_LL_DataInStage+0xc8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80062a4:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80062a8:	2a03      	cmp	r2, #3
 80062aa:	d104      	bne.n	80062b6 <USBD_LL_DataInStage+0xcc>
    pdev->pClass->DataIn(pdev, epnum);
 80062ac:	4798      	blx	r3
  return USBD_OK;
 80062ae:	2000      	movs	r0, #0
    pdev->pClass->DataIn(pdev, epnum);
 80062b0:	e7b1      	b.n	8006216 <USBD_LL_DataInStage+0x2c>
    return USBD_FAIL;
 80062b2:	2002      	movs	r0, #2
 80062b4:	e7af      	b.n	8006216 <USBD_LL_DataInStage+0x2c>
 80062b6:	2002      	movs	r0, #2
 80062b8:	e7ad      	b.n	8006216 <USBD_LL_DataInStage+0x2c>

080062ba <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80062ba:	b570      	push	{r4, r5, r6, lr}
 80062bc:	4604      	mov	r4, r0
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80062be:	2340      	movs	r3, #64	; 0x40
 80062c0:	2200      	movs	r2, #0
 80062c2:	4611      	mov	r1, r2
 80062c4:	f000 fd7a 	bl	8006dbc <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80062c8:	2501      	movs	r5, #1
 80062ca:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80062ce:	2640      	movs	r6, #64	; 0x40
 80062d0:	f8c4 6164 	str.w	r6, [r4, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80062d4:	4633      	mov	r3, r6
 80062d6:	2200      	movs	r2, #0
 80062d8:	2180      	movs	r1, #128	; 0x80
 80062da:	4620      	mov	r0, r4
 80062dc:	f000 fd6e 	bl	8006dbc <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80062e0:	61a5      	str	r5, [r4, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80062e2:	6266      	str	r6, [r4, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80062e4:	f884 529c 	strb.w	r5, [r4, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80062e8:	2300      	movs	r3, #0
 80062ea:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  pdev->dev_config = 0U;
 80062ee:	6063      	str	r3, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 80062f0:	f8c4 32a4 	str.w	r3, [r4, #676]	; 0x2a4

  if (pdev->pClassData)
 80062f4:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 80062f8:	b12b      	cbz	r3, 8006306 <USBD_LL_Reset+0x4c>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80062fa:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	2100      	movs	r1, #0
 8006302:	4620      	mov	r0, r4
 8006304:	4798      	blx	r3
  }

  return USBD_OK;
}
 8006306:	2000      	movs	r0, #0
 8006308:	bd70      	pop	{r4, r5, r6, pc}

0800630a <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800630a:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 800630c:	2000      	movs	r0, #0
 800630e:	4770      	bx	lr

08006310 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8006310:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006314:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006318:	2304      	movs	r3, #4
 800631a:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 800631e:	2000      	movs	r0, #0
 8006320:	4770      	bx	lr

08006322 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006322:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006326:	2b04      	cmp	r3, #4
 8006328:	d001      	beq.n	800632e <USBD_LL_Resume+0xc>
  {
    pdev->dev_state = pdev->dev_old_state;
  }

  return USBD_OK;
}
 800632a:	2000      	movs	r0, #0
 800632c:	4770      	bx	lr
    pdev->dev_state = pdev->dev_old_state;
 800632e:	f890 329d 	ldrb.w	r3, [r0, #669]	; 0x29d
 8006332:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
 8006336:	e7f8      	b.n	800632a <USBD_LL_Resume+0x8>

08006338 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006338:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800633a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800633e:	2b03      	cmp	r3, #3
 8006340:	d001      	beq.n	8006346 <USBD_LL_SOF+0xe>
      pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
}
 8006342:	2000      	movs	r0, #0
 8006344:	bd08      	pop	{r3, pc}
    if (pdev->pClass->SOF != NULL)
 8006346:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800634a:	69db      	ldr	r3, [r3, #28]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d0f8      	beq.n	8006342 <USBD_LL_SOF+0xa>
      pdev->pClass->SOF(pdev);
 8006350:	4798      	blx	r3
 8006352:	e7f6      	b.n	8006342 <USBD_LL_SOF+0xa>

08006354 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006354:	4603      	mov	r3, r0
  uint8_t  len = 0U;
 8006356:	2000      	movs	r0, #0

  while (*buf != '\0')
 8006358:	e002      	b.n	8006360 <USBD_GetLen+0xc>
  {
    len++;
 800635a:	3001      	adds	r0, #1
 800635c:	b2c0      	uxtb	r0, r0
    buf++;
 800635e:	3301      	adds	r3, #1
  while (*buf != '\0')
 8006360:	781a      	ldrb	r2, [r3, #0]
 8006362:	2a00      	cmp	r2, #0
 8006364:	d1f9      	bne.n	800635a <USBD_GetLen+0x6>
  }

  return len;
}
 8006366:	4770      	bx	lr

08006368 <USBD_SetFeature>:
{
 8006368:	b508      	push	{r3, lr}
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800636a:	884b      	ldrh	r3, [r1, #2]
 800636c:	2b01      	cmp	r3, #1
 800636e:	d000      	beq.n	8006372 <USBD_SetFeature+0xa>
}
 8006370:	bd08      	pop	{r3, pc}
    pdev->dev_remote_wakeup = 1U;
 8006372:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8006376:	f000 fb4d 	bl	8006a14 <USBD_CtlSendStatus>
}
 800637a:	e7f9      	b.n	8006370 <USBD_SetFeature+0x8>

0800637c <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 800637c:	780b      	ldrb	r3, [r1, #0]
 800637e:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8006380:	784b      	ldrb	r3, [r1, #1]
 8006382:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8006384:	788b      	ldrb	r3, [r1, #2]
 8006386:	78ca      	ldrb	r2, [r1, #3]
 8006388:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800638c:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800638e:	790b      	ldrb	r3, [r1, #4]
 8006390:	794a      	ldrb	r2, [r1, #5]
 8006392:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8006396:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8006398:	798b      	ldrb	r3, [r1, #6]
 800639a:	79ca      	ldrb	r2, [r1, #7]
 800639c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80063a0:	80c3      	strh	r3, [r0, #6]
}
 80063a2:	4770      	bx	lr

080063a4 <USBD_CtlError>:
{
 80063a4:	b510      	push	{r4, lr}
 80063a6:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 80063a8:	2180      	movs	r1, #128	; 0x80
 80063aa:	f000 fd1a 	bl	8006de2 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80063ae:	2100      	movs	r1, #0
 80063b0:	4620      	mov	r0, r4
 80063b2:	f000 fd16 	bl	8006de2 <USBD_LL_StallEP>
}
 80063b6:	bd10      	pop	{r4, pc}

080063b8 <USBD_GetDescriptor>:
{
 80063b8:	b530      	push	{r4, r5, lr}
 80063ba:	b083      	sub	sp, #12
 80063bc:	4605      	mov	r5, r0
 80063be:	460c      	mov	r4, r1
  uint16_t len = 0U;
 80063c0:	2300      	movs	r3, #0
 80063c2:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 80063c6:	884a      	ldrh	r2, [r1, #2]
 80063c8:	0a13      	lsrs	r3, r2, #8
 80063ca:	3b01      	subs	r3, #1
 80063cc:	2b06      	cmp	r3, #6
 80063ce:	f200 80a4 	bhi.w	800651a <USBD_GetDescriptor+0x162>
 80063d2:	e8df f003 	tbb	[pc, r3]
 80063d6:	1804      	.short	0x1804
 80063d8:	86a2a22c 	.word	0x86a2a22c
 80063dc:	93          	.byte	0x93
 80063dd:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80063de:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f10d 0106 	add.w	r1, sp, #6
 80063e8:	7c00      	ldrb	r0, [r0, #16]
 80063ea:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 80063ec:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80063f0:	b11a      	cbz	r2, 80063fa <USBD_GetDescriptor+0x42>
 80063f2:	88e3      	ldrh	r3, [r4, #6]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	f040 8094 	bne.w	8006522 <USBD_GetDescriptor+0x16a>
    if (req->wLength == 0U)
 80063fa:	88e3      	ldrh	r3, [r4, #6]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	f000 809a 	beq.w	8006536 <USBD_GetDescriptor+0x17e>
}
 8006402:	b003      	add	sp, #12
 8006404:	bd30      	pop	{r4, r5, pc}
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006406:	7c03      	ldrb	r3, [r0, #16]
 8006408:	b943      	cbnz	r3, 800641c <USBD_GetDescriptor+0x64>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800640a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800640e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006410:	f10d 0006 	add.w	r0, sp, #6
 8006414:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006416:	2302      	movs	r3, #2
 8006418:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800641a:	e7e7      	b.n	80063ec <USBD_GetDescriptor+0x34>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800641c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8006420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006422:	f10d 0006 	add.w	r0, sp, #6
 8006426:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006428:	2302      	movs	r3, #2
 800642a:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800642c:	e7de      	b.n	80063ec <USBD_GetDescriptor+0x34>
      switch ((uint8_t)(req->wValue))
 800642e:	b2d2      	uxtb	r2, r2
 8006430:	2a05      	cmp	r2, #5
 8006432:	d852      	bhi.n	80064da <USBD_GetDescriptor+0x122>
 8006434:	e8df f002 	tbb	[pc, r2]
 8006438:	2a1d1003 	.word	0x2a1d1003
 800643c:	4437      	.short	0x4437
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800643e:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	b123      	cbz	r3, 8006450 <USBD_GetDescriptor+0x98>
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006446:	f10d 0106 	add.w	r1, sp, #6
 800644a:	7c00      	ldrb	r0, [r0, #16]
 800644c:	4798      	blx	r3
  if (err != 0U)
 800644e:	e7cd      	b.n	80063ec <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8006450:	4621      	mov	r1, r4
 8006452:	f7ff ffa7 	bl	80063a4 <USBD_CtlError>
  if (err != 0U)
 8006456:	e7d4      	b.n	8006402 <USBD_GetDescriptor+0x4a>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006458:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800645c:	689b      	ldr	r3, [r3, #8]
 800645e:	b123      	cbz	r3, 800646a <USBD_GetDescriptor+0xb2>
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006460:	f10d 0106 	add.w	r1, sp, #6
 8006464:	7c00      	ldrb	r0, [r0, #16]
 8006466:	4798      	blx	r3
  if (err != 0U)
 8006468:	e7c0      	b.n	80063ec <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 800646a:	4621      	mov	r1, r4
 800646c:	f7ff ff9a 	bl	80063a4 <USBD_CtlError>
  if (err != 0U)
 8006470:	e7c7      	b.n	8006402 <USBD_GetDescriptor+0x4a>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006472:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8006476:	68db      	ldr	r3, [r3, #12]
 8006478:	b123      	cbz	r3, 8006484 <USBD_GetDescriptor+0xcc>
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800647a:	f10d 0106 	add.w	r1, sp, #6
 800647e:	7c00      	ldrb	r0, [r0, #16]
 8006480:	4798      	blx	r3
  if (err != 0U)
 8006482:	e7b3      	b.n	80063ec <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8006484:	4621      	mov	r1, r4
 8006486:	f7ff ff8d 	bl	80063a4 <USBD_CtlError>
  if (err != 0U)
 800648a:	e7ba      	b.n	8006402 <USBD_GetDescriptor+0x4a>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800648c:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8006490:	691b      	ldr	r3, [r3, #16]
 8006492:	b123      	cbz	r3, 800649e <USBD_GetDescriptor+0xe6>
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006494:	f10d 0106 	add.w	r1, sp, #6
 8006498:	7c00      	ldrb	r0, [r0, #16]
 800649a:	4798      	blx	r3
  if (err != 0U)
 800649c:	e7a6      	b.n	80063ec <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 800649e:	4621      	mov	r1, r4
 80064a0:	f7ff ff80 	bl	80063a4 <USBD_CtlError>
  if (err != 0U)
 80064a4:	e7ad      	b.n	8006402 <USBD_GetDescriptor+0x4a>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80064a6:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80064aa:	695b      	ldr	r3, [r3, #20]
 80064ac:	b123      	cbz	r3, 80064b8 <USBD_GetDescriptor+0x100>
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80064ae:	f10d 0106 	add.w	r1, sp, #6
 80064b2:	7c00      	ldrb	r0, [r0, #16]
 80064b4:	4798      	blx	r3
  if (err != 0U)
 80064b6:	e799      	b.n	80063ec <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 80064b8:	4621      	mov	r1, r4
 80064ba:	f7ff ff73 	bl	80063a4 <USBD_CtlError>
  if (err != 0U)
 80064be:	e7a0      	b.n	8006402 <USBD_GetDescriptor+0x4a>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80064c0:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80064c4:	699b      	ldr	r3, [r3, #24]
 80064c6:	b123      	cbz	r3, 80064d2 <USBD_GetDescriptor+0x11a>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80064c8:	f10d 0106 	add.w	r1, sp, #6
 80064cc:	7c00      	ldrb	r0, [r0, #16]
 80064ce:	4798      	blx	r3
  if (err != 0U)
 80064d0:	e78c      	b.n	80063ec <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 80064d2:	4621      	mov	r1, r4
 80064d4:	f7ff ff66 	bl	80063a4 <USBD_CtlError>
  if (err != 0U)
 80064d8:	e793      	b.n	8006402 <USBD_GetDescriptor+0x4a>
          USBD_CtlError(pdev, req);
 80064da:	4621      	mov	r1, r4
 80064dc:	f7ff ff62 	bl	80063a4 <USBD_CtlError>
  if (err != 0U)
 80064e0:	e78f      	b.n	8006402 <USBD_GetDescriptor+0x4a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80064e2:	7c03      	ldrb	r3, [r0, #16]
 80064e4:	b933      	cbnz	r3, 80064f4 <USBD_GetDescriptor+0x13c>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80064e6:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80064ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064ec:	f10d 0006 	add.w	r0, sp, #6
 80064f0:	4798      	blx	r3
  if (err != 0U)
 80064f2:	e77b      	b.n	80063ec <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 80064f4:	4621      	mov	r1, r4
 80064f6:	f7ff ff55 	bl	80063a4 <USBD_CtlError>
  if (err != 0U)
 80064fa:	e782      	b.n	8006402 <USBD_GetDescriptor+0x4a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80064fc:	7c03      	ldrb	r3, [r0, #16]
 80064fe:	b943      	cbnz	r3, 8006512 <USBD_GetDescriptor+0x15a>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006500:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8006504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006506:	f10d 0006 	add.w	r0, sp, #6
 800650a:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800650c:	2307      	movs	r3, #7
 800650e:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8006510:	e76c      	b.n	80063ec <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 8006512:	4621      	mov	r1, r4
 8006514:	f7ff ff46 	bl	80063a4 <USBD_CtlError>
  if (err != 0U)
 8006518:	e773      	b.n	8006402 <USBD_GetDescriptor+0x4a>
      USBD_CtlError(pdev, req);
 800651a:	4621      	mov	r1, r4
 800651c:	f7ff ff42 	bl	80063a4 <USBD_CtlError>
    return;
 8006520:	e76f      	b.n	8006402 <USBD_GetDescriptor+0x4a>
      len = MIN(len, req->wLength);
 8006522:	429a      	cmp	r2, r3
 8006524:	bf28      	it	cs
 8006526:	461a      	movcs	r2, r3
 8006528:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800652c:	4601      	mov	r1, r0
 800652e:	4628      	mov	r0, r5
 8006530:	f000 fa44 	bl	80069bc <USBD_CtlSendData>
 8006534:	e761      	b.n	80063fa <USBD_GetDescriptor+0x42>
      (void)USBD_CtlSendStatus(pdev);
 8006536:	4628      	mov	r0, r5
 8006538:	f000 fa6c 	bl	8006a14 <USBD_CtlSendStatus>
 800653c:	e761      	b.n	8006402 <USBD_GetDescriptor+0x4a>

0800653e <USBD_SetAddress>:
{
 800653e:	b538      	push	{r3, r4, r5, lr}
 8006540:	4604      	mov	r4, r0
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006542:	888b      	ldrh	r3, [r1, #4]
 8006544:	b9f3      	cbnz	r3, 8006584 <USBD_SetAddress+0x46>
 8006546:	88cb      	ldrh	r3, [r1, #6]
 8006548:	b9e3      	cbnz	r3, 8006584 <USBD_SetAddress+0x46>
 800654a:	884b      	ldrh	r3, [r1, #2]
 800654c:	2b7f      	cmp	r3, #127	; 0x7f
 800654e:	d819      	bhi.n	8006584 <USBD_SetAddress+0x46>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006550:	f003 057f 	and.w	r5, r3, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006554:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006558:	2b03      	cmp	r3, #3
 800655a:	d00c      	beq.n	8006576 <USBD_SetAddress+0x38>
      pdev->dev_address = dev_addr;
 800655c:	f880 529e 	strb.w	r5, [r0, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006560:	4629      	mov	r1, r5
 8006562:	f000 fc65 	bl	8006e30 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8006566:	4620      	mov	r0, r4
 8006568:	f000 fa54 	bl	8006a14 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 800656c:	b135      	cbz	r5, 800657c <USBD_SetAddress+0x3e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800656e:	2302      	movs	r3, #2
 8006570:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8006574:	e009      	b.n	800658a <USBD_SetAddress+0x4c>
      USBD_CtlError(pdev, req);
 8006576:	f7ff ff15 	bl	80063a4 <USBD_CtlError>
 800657a:	e006      	b.n	800658a <USBD_SetAddress+0x4c>
        pdev->dev_state = USBD_STATE_DEFAULT;
 800657c:	2301      	movs	r3, #1
 800657e:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8006582:	e002      	b.n	800658a <USBD_SetAddress+0x4c>
    USBD_CtlError(pdev, req);
 8006584:	4620      	mov	r0, r4
 8006586:	f7ff ff0d 	bl	80063a4 <USBD_CtlError>
}
 800658a:	bd38      	pop	{r3, r4, r5, pc}

0800658c <USBD_SetConfig>:
{
 800658c:	b538      	push	{r3, r4, r5, lr}
 800658e:	4604      	mov	r4, r0
 8006590:	460d      	mov	r5, r1
  cfgidx = (uint8_t)(req->wValue);
 8006592:	7889      	ldrb	r1, [r1, #2]
 8006594:	4b28      	ldr	r3, [pc, #160]	; (8006638 <USBD_SetConfig+0xac>)
 8006596:	7019      	strb	r1, [r3, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006598:	2901      	cmp	r1, #1
 800659a:	d80e      	bhi.n	80065ba <USBD_SetConfig+0x2e>
    switch (pdev->dev_state)
 800659c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80065a0:	2b02      	cmp	r3, #2
 80065a2:	d00e      	beq.n	80065c2 <USBD_SetConfig+0x36>
 80065a4:	2b03      	cmp	r3, #3
 80065a6:	d021      	beq.n	80065ec <USBD_SetConfig+0x60>
        USBD_CtlError(pdev, req);
 80065a8:	4629      	mov	r1, r5
 80065aa:	f7ff fefb 	bl	80063a4 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80065ae:	4b22      	ldr	r3, [pc, #136]	; (8006638 <USBD_SetConfig+0xac>)
 80065b0:	7819      	ldrb	r1, [r3, #0]
 80065b2:	4620      	mov	r0, r4
 80065b4:	f7ff fd9f 	bl	80060f6 <USBD_ClrClassConfig>
        break;
 80065b8:	e002      	b.n	80065c0 <USBD_SetConfig+0x34>
    USBD_CtlError(pdev, req);
 80065ba:	4629      	mov	r1, r5
 80065bc:	f7ff fef2 	bl	80063a4 <USBD_CtlError>
}
 80065c0:	bd38      	pop	{r3, r4, r5, pc}
        if (cfgidx)
 80065c2:	b181      	cbz	r1, 80065e6 <USBD_SetConfig+0x5a>
          pdev->dev_config = cfgidx;
 80065c4:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80065c6:	2303      	movs	r3, #3
 80065c8:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80065cc:	f7ff fd87 	bl	80060de <USBD_SetClassConfig>
 80065d0:	2802      	cmp	r0, #2
 80065d2:	d003      	beq.n	80065dc <USBD_SetConfig+0x50>
          USBD_CtlSendStatus(pdev);
 80065d4:	4620      	mov	r0, r4
 80065d6:	f000 fa1d 	bl	8006a14 <USBD_CtlSendStatus>
 80065da:	e7f1      	b.n	80065c0 <USBD_SetConfig+0x34>
            USBD_CtlError(pdev, req);
 80065dc:	4629      	mov	r1, r5
 80065de:	4620      	mov	r0, r4
 80065e0:	f7ff fee0 	bl	80063a4 <USBD_CtlError>
            return;
 80065e4:	e7ec      	b.n	80065c0 <USBD_SetConfig+0x34>
          USBD_CtlSendStatus(pdev);
 80065e6:	f000 fa15 	bl	8006a14 <USBD_CtlSendStatus>
 80065ea:	e7e9      	b.n	80065c0 <USBD_SetConfig+0x34>
        if (cfgidx == 0U)
 80065ec:	b189      	cbz	r1, 8006612 <USBD_SetConfig+0x86>
        else if (cfgidx != pdev->dev_config)
 80065ee:	6843      	ldr	r3, [r0, #4]
 80065f0:	4299      	cmp	r1, r3
 80065f2:	d01d      	beq.n	8006630 <USBD_SetConfig+0xa4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80065f4:	b2d9      	uxtb	r1, r3
 80065f6:	f7ff fd7e 	bl	80060f6 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80065fa:	4b0f      	ldr	r3, [pc, #60]	; (8006638 <USBD_SetConfig+0xac>)
 80065fc:	7819      	ldrb	r1, [r3, #0]
 80065fe:	6061      	str	r1, [r4, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006600:	4620      	mov	r0, r4
 8006602:	f7ff fd6c 	bl	80060de <USBD_SetClassConfig>
 8006606:	2802      	cmp	r0, #2
 8006608:	d00d      	beq.n	8006626 <USBD_SetConfig+0x9a>
          USBD_CtlSendStatus(pdev);
 800660a:	4620      	mov	r0, r4
 800660c:	f000 fa02 	bl	8006a14 <USBD_CtlSendStatus>
 8006610:	e7d6      	b.n	80065c0 <USBD_SetConfig+0x34>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006612:	2302      	movs	r3, #2
 8006614:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8006618:	6041      	str	r1, [r0, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800661a:	f7ff fd6c 	bl	80060f6 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800661e:	4620      	mov	r0, r4
 8006620:	f000 f9f8 	bl	8006a14 <USBD_CtlSendStatus>
 8006624:	e7cc      	b.n	80065c0 <USBD_SetConfig+0x34>
            USBD_CtlError(pdev, req);
 8006626:	4629      	mov	r1, r5
 8006628:	4620      	mov	r0, r4
 800662a:	f7ff febb 	bl	80063a4 <USBD_CtlError>
            return;
 800662e:	e7c7      	b.n	80065c0 <USBD_SetConfig+0x34>
          USBD_CtlSendStatus(pdev);
 8006630:	f000 f9f0 	bl	8006a14 <USBD_CtlSendStatus>
 8006634:	e7c4      	b.n	80065c0 <USBD_SetConfig+0x34>
 8006636:	bf00      	nop
 8006638:	200018a8 	.word	0x200018a8

0800663c <USBD_GetConfig>:
{
 800663c:	b508      	push	{r3, lr}
  if (req->wLength != 1U)
 800663e:	88cb      	ldrh	r3, [r1, #6]
 8006640:	2b01      	cmp	r3, #1
 8006642:	d10a      	bne.n	800665a <USBD_GetConfig+0x1e>
    switch (pdev->dev_state)
 8006644:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006648:	2b02      	cmp	r3, #2
 800664a:	d909      	bls.n	8006660 <USBD_GetConfig+0x24>
 800664c:	2b03      	cmp	r3, #3
 800664e:	d109      	bne.n	8006664 <USBD_GetConfig+0x28>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8006650:	2201      	movs	r2, #1
 8006652:	1d01      	adds	r1, r0, #4
 8006654:	f000 f9b2 	bl	80069bc <USBD_CtlSendData>
        break;
 8006658:	e001      	b.n	800665e <USBD_GetConfig+0x22>
    USBD_CtlError(pdev, req);
 800665a:	f7ff fea3 	bl	80063a4 <USBD_CtlError>
}
 800665e:	bd08      	pop	{r3, pc}
    switch (pdev->dev_state)
 8006660:	b25b      	sxtb	r3, r3
 8006662:	b913      	cbnz	r3, 800666a <USBD_GetConfig+0x2e>
        USBD_CtlError(pdev, req);
 8006664:	f7ff fe9e 	bl	80063a4 <USBD_CtlError>
}
 8006668:	e7f9      	b.n	800665e <USBD_GetConfig+0x22>
        pdev->dev_default_config = 0U;
 800666a:	4601      	mov	r1, r0
 800666c:	2300      	movs	r3, #0
 800666e:	f841 3f08 	str.w	r3, [r1, #8]!
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8006672:	2201      	movs	r2, #1
 8006674:	f000 f9a2 	bl	80069bc <USBD_CtlSendData>
        break;
 8006678:	e7f1      	b.n	800665e <USBD_GetConfig+0x22>

0800667a <USBD_GetStatus>:
{
 800667a:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 800667c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006680:	3b01      	subs	r3, #1
 8006682:	2b02      	cmp	r3, #2
 8006684:	d812      	bhi.n	80066ac <USBD_GetStatus+0x32>
      if (req->wLength != 0x2U)
 8006686:	88cb      	ldrh	r3, [r1, #6]
 8006688:	2b02      	cmp	r3, #2
 800668a:	d10c      	bne.n	80066a6 <USBD_GetStatus+0x2c>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800668c:	2301      	movs	r3, #1
 800668e:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup)
 8006690:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 8006694:	b10b      	cbz	r3, 800669a <USBD_GetStatus+0x20>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006696:	2303      	movs	r3, #3
 8006698:	60c3      	str	r3, [r0, #12]
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800669a:	2202      	movs	r2, #2
 800669c:	f100 010c 	add.w	r1, r0, #12
 80066a0:	f000 f98c 	bl	80069bc <USBD_CtlSendData>
}
 80066a4:	bd08      	pop	{r3, pc}
        USBD_CtlError(pdev, req);
 80066a6:	f7ff fe7d 	bl	80063a4 <USBD_CtlError>
        break;
 80066aa:	e7fb      	b.n	80066a4 <USBD_GetStatus+0x2a>
      USBD_CtlError(pdev, req);
 80066ac:	f7ff fe7a 	bl	80063a4 <USBD_CtlError>
}
 80066b0:	e7f8      	b.n	80066a4 <USBD_GetStatus+0x2a>

080066b2 <USBD_ClrFeature>:
{
 80066b2:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 80066b4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80066b8:	3b01      	subs	r3, #1
 80066ba:	2b02      	cmp	r3, #2
 80066bc:	d809      	bhi.n	80066d2 <USBD_ClrFeature+0x20>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80066be:	884b      	ldrh	r3, [r1, #2]
 80066c0:	2b01      	cmp	r3, #1
 80066c2:	d000      	beq.n	80066c6 <USBD_ClrFeature+0x14>
}
 80066c4:	bd08      	pop	{r3, pc}
        pdev->dev_remote_wakeup = 0U;
 80066c6:	2300      	movs	r3, #0
 80066c8:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80066cc:	f000 f9a2 	bl	8006a14 <USBD_CtlSendStatus>
 80066d0:	e7f8      	b.n	80066c4 <USBD_ClrFeature+0x12>
      USBD_CtlError(pdev, req);
 80066d2:	f7ff fe67 	bl	80063a4 <USBD_CtlError>
}
 80066d6:	e7f5      	b.n	80066c4 <USBD_ClrFeature+0x12>

080066d8 <USBD_StdDevReq>:
{
 80066d8:	b508      	push	{r3, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80066da:	780b      	ldrb	r3, [r1, #0]
 80066dc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80066e0:	2b20      	cmp	r3, #32
 80066e2:	d005      	beq.n	80066f0 <USBD_StdDevReq+0x18>
 80066e4:	2b40      	cmp	r3, #64	; 0x40
 80066e6:	d003      	beq.n	80066f0 <USBD_StdDevReq+0x18>
 80066e8:	b143      	cbz	r3, 80066fc <USBD_StdDevReq+0x24>
      USBD_CtlError(pdev, req);
 80066ea:	f7ff fe5b 	bl	80063a4 <USBD_CtlError>
      break;
 80066ee:	e003      	b.n	80066f8 <USBD_StdDevReq+0x20>
      pdev->pClass->Setup(pdev, req);
 80066f0:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80066f4:	689b      	ldr	r3, [r3, #8]
 80066f6:	4798      	blx	r3
}
 80066f8:	2000      	movs	r0, #0
 80066fa:	bd08      	pop	{r3, pc}
      switch (req->bRequest)
 80066fc:	784b      	ldrb	r3, [r1, #1]
 80066fe:	2b09      	cmp	r3, #9
 8006700:	d81b      	bhi.n	800673a <USBD_StdDevReq+0x62>
 8006702:	e8df f003 	tbb	[pc, r3]
 8006706:	1711      	.short	0x1711
 8006708:	081a141a 	.word	0x081a141a
 800670c:	0b0e1a05 	.word	0x0b0e1a05
          USBD_GetDescriptor(pdev, req);
 8006710:	f7ff fe52 	bl	80063b8 <USBD_GetDescriptor>
          break;
 8006714:	e7f0      	b.n	80066f8 <USBD_StdDevReq+0x20>
          USBD_SetAddress(pdev, req);
 8006716:	f7ff ff12 	bl	800653e <USBD_SetAddress>
          break;
 800671a:	e7ed      	b.n	80066f8 <USBD_StdDevReq+0x20>
          USBD_SetConfig(pdev, req);
 800671c:	f7ff ff36 	bl	800658c <USBD_SetConfig>
          break;
 8006720:	e7ea      	b.n	80066f8 <USBD_StdDevReq+0x20>
          USBD_GetConfig(pdev, req);
 8006722:	f7ff ff8b 	bl	800663c <USBD_GetConfig>
          break;
 8006726:	e7e7      	b.n	80066f8 <USBD_StdDevReq+0x20>
          USBD_GetStatus(pdev, req);
 8006728:	f7ff ffa7 	bl	800667a <USBD_GetStatus>
          break;
 800672c:	e7e4      	b.n	80066f8 <USBD_StdDevReq+0x20>
          USBD_SetFeature(pdev, req);
 800672e:	f7ff fe1b 	bl	8006368 <USBD_SetFeature>
          break;
 8006732:	e7e1      	b.n	80066f8 <USBD_StdDevReq+0x20>
          USBD_ClrFeature(pdev, req);
 8006734:	f7ff ffbd 	bl	80066b2 <USBD_ClrFeature>
          break;
 8006738:	e7de      	b.n	80066f8 <USBD_StdDevReq+0x20>
          USBD_CtlError(pdev, req);
 800673a:	f7ff fe33 	bl	80063a4 <USBD_CtlError>
          break;
 800673e:	e7db      	b.n	80066f8 <USBD_StdDevReq+0x20>

08006740 <USBD_StdItfReq>:
{
 8006740:	b538      	push	{r3, r4, r5, lr}
 8006742:	4605      	mov	r5, r0
 8006744:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006746:	780b      	ldrb	r3, [r1, #0]
 8006748:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800674c:	2b20      	cmp	r3, #32
 800674e:	d006      	beq.n	800675e <USBD_StdItfReq+0x1e>
 8006750:	2b40      	cmp	r3, #64	; 0x40
 8006752:	d004      	beq.n	800675e <USBD_StdItfReq+0x1e>
 8006754:	b11b      	cbz	r3, 800675e <USBD_StdItfReq+0x1e>
      USBD_CtlError(pdev, req);
 8006756:	f7ff fe25 	bl	80063a4 <USBD_CtlError>
}
 800675a:	2000      	movs	r0, #0
 800675c:	bd38      	pop	{r3, r4, r5, pc}
      switch (pdev->dev_state)
 800675e:	f895 329c 	ldrb.w	r3, [r5, #668]	; 0x29c
 8006762:	3b01      	subs	r3, #1
 8006764:	2b02      	cmp	r3, #2
 8006766:	d816      	bhi.n	8006796 <USBD_StdItfReq+0x56>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006768:	7923      	ldrb	r3, [r4, #4]
 800676a:	2b01      	cmp	r3, #1
 800676c:	d80e      	bhi.n	800678c <USBD_StdItfReq+0x4c>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800676e:	f8d5 32b4 	ldr.w	r3, [r5, #692]	; 0x2b4
 8006772:	689b      	ldr	r3, [r3, #8]
 8006774:	4621      	mov	r1, r4
 8006776:	4628      	mov	r0, r5
 8006778:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 800677a:	88e3      	ldrh	r3, [r4, #6]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d1ec      	bne.n	800675a <USBD_StdItfReq+0x1a>
 8006780:	2800      	cmp	r0, #0
 8006782:	d1ea      	bne.n	800675a <USBD_StdItfReq+0x1a>
              USBD_CtlSendStatus(pdev);
 8006784:	4628      	mov	r0, r5
 8006786:	f000 f945 	bl	8006a14 <USBD_CtlSendStatus>
 800678a:	e7e6      	b.n	800675a <USBD_StdItfReq+0x1a>
            USBD_CtlError(pdev, req);
 800678c:	4621      	mov	r1, r4
 800678e:	4628      	mov	r0, r5
 8006790:	f7ff fe08 	bl	80063a4 <USBD_CtlError>
 8006794:	e7e1      	b.n	800675a <USBD_StdItfReq+0x1a>
          USBD_CtlError(pdev, req);
 8006796:	4621      	mov	r1, r4
 8006798:	4628      	mov	r0, r5
 800679a:	f7ff fe03 	bl	80063a4 <USBD_CtlError>
          break;
 800679e:	e7dc      	b.n	800675a <USBD_StdItfReq+0x1a>

080067a0 <USBD_StdEPReq>:
{
 80067a0:	b570      	push	{r4, r5, r6, lr}
 80067a2:	4605      	mov	r5, r0
  ep_addr  = LOBYTE(req->wIndex);
 80067a4:	888b      	ldrh	r3, [r1, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80067a6:	780c      	ldrb	r4, [r1, #0]
 80067a8:	f004 0460 	and.w	r4, r4, #96	; 0x60
 80067ac:	2c20      	cmp	r4, #32
 80067ae:	d007      	beq.n	80067c0 <USBD_StdEPReq+0x20>
 80067b0:	b2da      	uxtb	r2, r3
 80067b2:	2c40      	cmp	r4, #64	; 0x40
 80067b4:	d004      	beq.n	80067c0 <USBD_StdEPReq+0x20>
 80067b6:	b15c      	cbz	r4, 80067d0 <USBD_StdEPReq+0x30>
      USBD_CtlError(pdev, req);
 80067b8:	f7ff fdf4 	bl	80063a4 <USBD_CtlError>
  return ret;
 80067bc:	2400      	movs	r4, #0
      break;
 80067be:	e005      	b.n	80067cc <USBD_StdEPReq+0x2c>
      pdev->pClass->Setup(pdev, req);
 80067c0:	f8d5 32b4 	ldr.w	r3, [r5, #692]	; 0x2b4
 80067c4:	689b      	ldr	r3, [r3, #8]
 80067c6:	4628      	mov	r0, r5
 80067c8:	4798      	blx	r3
  return ret;
 80067ca:	2400      	movs	r4, #0
}
 80067cc:	4620      	mov	r0, r4
 80067ce:	bd70      	pop	{r4, r5, r6, pc}
      if ((req->bmRequest & 0x60U) == 0x20U)
 80067d0:	2c20      	cmp	r4, #32
 80067d2:	d009      	beq.n	80067e8 <USBD_StdEPReq+0x48>
      switch (req->bRequest)
 80067d4:	784e      	ldrb	r6, [r1, #1]
 80067d6:	2e01      	cmp	r6, #1
 80067d8:	d033      	beq.n	8006842 <USBD_StdEPReq+0xa2>
 80067da:	2e03      	cmp	r6, #3
 80067dc:	d00a      	beq.n	80067f4 <USBD_StdEPReq+0x54>
 80067de:	2e00      	cmp	r6, #0
 80067e0:	d055      	beq.n	800688e <USBD_StdEPReq+0xee>
          USBD_CtlError(pdev, req);
 80067e2:	f7ff fddf 	bl	80063a4 <USBD_CtlError>
          break;
 80067e6:	e7f1      	b.n	80067cc <USBD_StdEPReq+0x2c>
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80067e8:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80067ec:	689b      	ldr	r3, [r3, #8]
 80067ee:	4798      	blx	r3
 80067f0:	4604      	mov	r4, r0
        return ret;
 80067f2:	e7eb      	b.n	80067cc <USBD_StdEPReq+0x2c>
          switch (pdev->dev_state)
 80067f4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80067f8:	2b02      	cmp	r3, #2
 80067fa:	d004      	beq.n	8006806 <USBD_StdEPReq+0x66>
 80067fc:	2b03      	cmp	r3, #3
 80067fe:	d011      	beq.n	8006824 <USBD_StdEPReq+0x84>
              USBD_CtlError(pdev, req);
 8006800:	f7ff fdd0 	bl	80063a4 <USBD_CtlError>
              break;
 8006804:	e7e2      	b.n	80067cc <USBD_StdEPReq+0x2c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006806:	b10a      	cbz	r2, 800680c <USBD_StdEPReq+0x6c>
 8006808:	2a80      	cmp	r2, #128	; 0x80
 800680a:	d103      	bne.n	8006814 <USBD_StdEPReq+0x74>
                USBD_CtlError(pdev, req);
 800680c:	4628      	mov	r0, r5
 800680e:	f7ff fdc9 	bl	80063a4 <USBD_CtlError>
 8006812:	e7db      	b.n	80067cc <USBD_StdEPReq+0x2c>
                USBD_LL_StallEP(pdev, ep_addr);
 8006814:	4611      	mov	r1, r2
 8006816:	f000 fae4 	bl	8006de2 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800681a:	2180      	movs	r1, #128	; 0x80
 800681c:	4628      	mov	r0, r5
 800681e:	f000 fae0 	bl	8006de2 <USBD_LL_StallEP>
 8006822:	e7d3      	b.n	80067cc <USBD_StdEPReq+0x2c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006824:	884b      	ldrh	r3, [r1, #2]
 8006826:	b923      	cbnz	r3, 8006832 <USBD_StdEPReq+0x92>
                if ((ep_addr != 0x00U) &&
 8006828:	b11a      	cbz	r2, 8006832 <USBD_StdEPReq+0x92>
 800682a:	2a80      	cmp	r2, #128	; 0x80
 800682c:	d001      	beq.n	8006832 <USBD_StdEPReq+0x92>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800682e:	88cb      	ldrh	r3, [r1, #6]
 8006830:	b11b      	cbz	r3, 800683a <USBD_StdEPReq+0x9a>
              USBD_CtlSendStatus(pdev);
 8006832:	4628      	mov	r0, r5
 8006834:	f000 f8ee 	bl	8006a14 <USBD_CtlSendStatus>
              break;
 8006838:	e7c8      	b.n	80067cc <USBD_StdEPReq+0x2c>
                  USBD_LL_StallEP(pdev, ep_addr);
 800683a:	4611      	mov	r1, r2
 800683c:	f000 fad1 	bl	8006de2 <USBD_LL_StallEP>
 8006840:	e7f7      	b.n	8006832 <USBD_StdEPReq+0x92>
          switch (pdev->dev_state)
 8006842:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006846:	2b02      	cmp	r3, #2
 8006848:	d004      	beq.n	8006854 <USBD_StdEPReq+0xb4>
 800684a:	2b03      	cmp	r3, #3
 800684c:	d011      	beq.n	8006872 <USBD_StdEPReq+0xd2>
              USBD_CtlError(pdev, req);
 800684e:	f7ff fda9 	bl	80063a4 <USBD_CtlError>
              break;
 8006852:	e7bb      	b.n	80067cc <USBD_StdEPReq+0x2c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006854:	b10a      	cbz	r2, 800685a <USBD_StdEPReq+0xba>
 8006856:	2a80      	cmp	r2, #128	; 0x80
 8006858:	d103      	bne.n	8006862 <USBD_StdEPReq+0xc2>
                USBD_CtlError(pdev, req);
 800685a:	4628      	mov	r0, r5
 800685c:	f7ff fda2 	bl	80063a4 <USBD_CtlError>
 8006860:	e7b4      	b.n	80067cc <USBD_StdEPReq+0x2c>
                USBD_LL_StallEP(pdev, ep_addr);
 8006862:	4611      	mov	r1, r2
 8006864:	f000 fabd 	bl	8006de2 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006868:	2180      	movs	r1, #128	; 0x80
 800686a:	4628      	mov	r0, r5
 800686c:	f000 fab9 	bl	8006de2 <USBD_LL_StallEP>
 8006870:	e7ac      	b.n	80067cc <USBD_StdEPReq+0x2c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006872:	884b      	ldrh	r3, [r1, #2]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d1a9      	bne.n	80067cc <USBD_StdEPReq+0x2c>
                if ((ep_addr & 0x7FU) != 0x00U)
 8006878:	f012 0f7f 	tst.w	r2, #127	; 0x7f
 800687c:	d103      	bne.n	8006886 <USBD_StdEPReq+0xe6>
                USBD_CtlSendStatus(pdev);
 800687e:	4628      	mov	r0, r5
 8006880:	f000 f8c8 	bl	8006a14 <USBD_CtlSendStatus>
 8006884:	e7a2      	b.n	80067cc <USBD_StdEPReq+0x2c>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8006886:	4611      	mov	r1, r2
 8006888:	f000 fab3 	bl	8006df2 <USBD_LL_ClearStallEP>
 800688c:	e7f7      	b.n	800687e <USBD_StdEPReq+0xde>
          switch (pdev->dev_state)
 800688e:	f890 029c 	ldrb.w	r0, [r0, #668]	; 0x29c
 8006892:	2802      	cmp	r0, #2
 8006894:	d006      	beq.n	80068a4 <USBD_StdEPReq+0x104>
 8006896:	2803      	cmp	r0, #3
 8006898:	d029      	beq.n	80068ee <USBD_StdEPReq+0x14e>
              USBD_CtlError(pdev, req);
 800689a:	4628      	mov	r0, r5
 800689c:	f7ff fd82 	bl	80063a4 <USBD_CtlError>
  return ret;
 80068a0:	4634      	mov	r4, r6
              break;
 80068a2:	e793      	b.n	80067cc <USBD_StdEPReq+0x2c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80068a4:	b10a      	cbz	r2, 80068aa <USBD_StdEPReq+0x10a>
 80068a6:	2a80      	cmp	r2, #128	; 0x80
 80068a8:	d113      	bne.n	80068d2 <USBD_StdEPReq+0x132>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80068aa:	f013 0f80 	tst.w	r3, #128	; 0x80
 80068ae:	d115      	bne.n	80068dc <USBD_StdEPReq+0x13c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80068b0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80068b4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80068b8:	0091      	lsls	r1, r2, #2
 80068ba:	f501 71a8 	add.w	r1, r1, #336	; 0x150
 80068be:	4429      	add	r1, r5
 80068c0:	3104      	adds	r1, #4
              pep->status = 0x0000U;
 80068c2:	2300      	movs	r3, #0
 80068c4:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80068c6:	2202      	movs	r2, #2
 80068c8:	4628      	mov	r0, r5
 80068ca:	f000 f877 	bl	80069bc <USBD_CtlSendData>
  return ret;
 80068ce:	4634      	mov	r4, r6
              break;
 80068d0:	e77c      	b.n	80067cc <USBD_StdEPReq+0x2c>
                USBD_CtlError(pdev, req);
 80068d2:	4628      	mov	r0, r5
 80068d4:	f7ff fd66 	bl	80063a4 <USBD_CtlError>
  return ret;
 80068d8:	4634      	mov	r4, r6
                break;
 80068da:	e777      	b.n	80067cc <USBD_StdEPReq+0x2c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80068dc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80068e0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80068e4:	0091      	lsls	r1, r2, #2
 80068e6:	3110      	adds	r1, #16
 80068e8:	4429      	add	r1, r5
 80068ea:	3104      	adds	r1, #4
 80068ec:	e7e9      	b.n	80068c2 <USBD_StdEPReq+0x122>
              if ((ep_addr & 0x80U) == 0x80U)
 80068ee:	b25b      	sxtb	r3, r3
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	db1f      	blt.n	8006934 <USBD_StdEPReq+0x194>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80068f4:	f002 000f 	and.w	r0, r2, #15
 80068f8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80068fc:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 8006900:	f8d0 0158 	ldr.w	r0, [r0, #344]	; 0x158
 8006904:	b320      	cbz	r0, 8006950 <USBD_StdEPReq+0x1b0>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006906:	2b00      	cmp	r3, #0
 8006908:	db27      	blt.n	800695a <USBD_StdEPReq+0x1ba>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800690a:	f002 037f 	and.w	r3, r2, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800690e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006912:	009c      	lsls	r4, r3, #2
 8006914:	f504 74a8 	add.w	r4, r4, #336	; 0x150
 8006918:	442c      	add	r4, r5
 800691a:	3404      	adds	r4, #4
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800691c:	b10a      	cbz	r2, 8006922 <USBD_StdEPReq+0x182>
 800691e:	2a80      	cmp	r2, #128	; 0x80
 8006920:	d124      	bne.n	800696c <USBD_StdEPReq+0x1cc>
                pep->status = 0x0000U;
 8006922:	2300      	movs	r3, #0
 8006924:	6023      	str	r3, [r4, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006926:	2202      	movs	r2, #2
 8006928:	4621      	mov	r1, r4
 800692a:	4628      	mov	r0, r5
 800692c:	f000 f846 	bl	80069bc <USBD_CtlSendData>
  return ret;
 8006930:	4634      	mov	r4, r6
              break;
 8006932:	e74b      	b.n	80067cc <USBD_StdEPReq+0x2c>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006934:	f002 000f 	and.w	r0, r2, #15
 8006938:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800693c:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 8006940:	6980      	ldr	r0, [r0, #24]
 8006942:	2800      	cmp	r0, #0
 8006944:	d1df      	bne.n	8006906 <USBD_StdEPReq+0x166>
                  USBD_CtlError(pdev, req);
 8006946:	4628      	mov	r0, r5
 8006948:	f7ff fd2c 	bl	80063a4 <USBD_CtlError>
  return ret;
 800694c:	4634      	mov	r4, r6
                  break;
 800694e:	e73d      	b.n	80067cc <USBD_StdEPReq+0x2c>
                  USBD_CtlError(pdev, req);
 8006950:	4628      	mov	r0, r5
 8006952:	f7ff fd27 	bl	80063a4 <USBD_CtlError>
  return ret;
 8006956:	4634      	mov	r4, r6
                  break;
 8006958:	e738      	b.n	80067cc <USBD_StdEPReq+0x2c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800695a:	f002 037f 	and.w	r3, r2, #127	; 0x7f
 800695e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006962:	009c      	lsls	r4, r3, #2
 8006964:	3410      	adds	r4, #16
 8006966:	442c      	add	r4, r5
 8006968:	3404      	adds	r4, #4
 800696a:	e7d7      	b.n	800691c <USBD_StdEPReq+0x17c>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800696c:	4611      	mov	r1, r2
 800696e:	4628      	mov	r0, r5
 8006970:	f000 fa47 	bl	8006e02 <USBD_LL_IsStallEP>
 8006974:	b110      	cbz	r0, 800697c <USBD_StdEPReq+0x1dc>
                pep->status = 0x0001U;
 8006976:	2301      	movs	r3, #1
 8006978:	6023      	str	r3, [r4, #0]
 800697a:	e7d4      	b.n	8006926 <USBD_StdEPReq+0x186>
                pep->status = 0x0000U;
 800697c:	2300      	movs	r3, #0
 800697e:	6023      	str	r3, [r4, #0]
 8006980:	e7d1      	b.n	8006926 <USBD_StdEPReq+0x186>

08006982 <USBD_GetString>:
  if (desc != NULL)
 8006982:	b1d0      	cbz	r0, 80069ba <USBD_GetString+0x38>
{
 8006984:	b570      	push	{r4, r5, r6, lr}
 8006986:	460d      	mov	r5, r1
 8006988:	4616      	mov	r6, r2
 800698a:	4604      	mov	r4, r0
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800698c:	f7ff fce2 	bl	8006354 <USBD_GetLen>
 8006990:	1c43      	adds	r3, r0, #1
 8006992:	005b      	lsls	r3, r3, #1
 8006994:	b29b      	uxth	r3, r3
 8006996:	8033      	strh	r3, [r6, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8006998:	702b      	strb	r3, [r5, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800699a:	2303      	movs	r3, #3
 800699c:	706b      	strb	r3, [r5, #1]
 800699e:	2302      	movs	r3, #2
    while (*desc != '\0')
 80069a0:	e007      	b.n	80069b2 <USBD_GetString+0x30>
      unicode[idx++] = *desc++;
 80069a2:	3401      	adds	r4, #1
 80069a4:	1c5a      	adds	r2, r3, #1
 80069a6:	b2d2      	uxtb	r2, r2
 80069a8:	54e8      	strb	r0, [r5, r3]
      unicode[idx++] =  0U;
 80069aa:	3302      	adds	r3, #2
 80069ac:	b2db      	uxtb	r3, r3
 80069ae:	2100      	movs	r1, #0
 80069b0:	54a9      	strb	r1, [r5, r2]
    while (*desc != '\0')
 80069b2:	7820      	ldrb	r0, [r4, #0]
 80069b4:	2800      	cmp	r0, #0
 80069b6:	d1f4      	bne.n	80069a2 <USBD_GetString+0x20>
}
 80069b8:	bd70      	pop	{r4, r5, r6, pc}
 80069ba:	4770      	bx	lr

080069bc <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80069bc:	b508      	push	{r3, lr}
 80069be:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80069c0:	2202      	movs	r2, #2
 80069c2:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80069c6:	61c3      	str	r3, [r0, #28]
  pdev->ep_in[0].rem_length   = len;
 80069c8:	6203      	str	r3, [r0, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80069ca:	460a      	mov	r2, r1
 80069cc:	2100      	movs	r1, #0
 80069ce:	f000 fa37 	bl	8006e40 <USBD_LL_Transmit>

  return USBD_OK;
}
 80069d2:	2000      	movs	r0, #0
 80069d4:	bd08      	pop	{r3, pc}

080069d6 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80069d6:	b508      	push	{r3, lr}
 80069d8:	4613      	mov	r3, r2
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80069da:	460a      	mov	r2, r1
 80069dc:	2100      	movs	r1, #0
 80069de:	f000 fa2f 	bl	8006e40 <USBD_LL_Transmit>

  return USBD_OK;
}
 80069e2:	2000      	movs	r0, #0
 80069e4:	bd08      	pop	{r3, pc}

080069e6 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80069e6:	b508      	push	{r3, lr}
 80069e8:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80069ea:	2203      	movs	r2, #3
 80069ec:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80069f0:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80069f4:	f8c0 3160 	str.w	r3, [r0, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80069f8:	460a      	mov	r2, r1
 80069fa:	2100      	movs	r1, #0
 80069fc:	f000 fa28 	bl	8006e50 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8006a00:	2000      	movs	r0, #0
 8006a02:	bd08      	pop	{r3, pc}

08006a04 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8006a04:	b508      	push	{r3, lr}
 8006a06:	4613      	mov	r3, r2
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006a08:	460a      	mov	r2, r1
 8006a0a:	2100      	movs	r1, #0
 8006a0c:	f000 fa20 	bl	8006e50 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8006a10:	2000      	movs	r0, #0
 8006a12:	bd08      	pop	{r3, pc}

08006a14 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006a14:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006a16:	2304      	movs	r3, #4
 8006a18:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	461a      	mov	r2, r3
 8006a20:	4619      	mov	r1, r3
 8006a22:	f000 fa0d 	bl	8006e40 <USBD_LL_Transmit>

  return USBD_OK;
}
 8006a26:	2000      	movs	r0, #0
 8006a28:	bd08      	pop	{r3, pc}

08006a2a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006a2a:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006a2c:	2305      	movs	r3, #5
 8006a2e:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006a32:	2300      	movs	r3, #0
 8006a34:	461a      	mov	r2, r3
 8006a36:	4619      	mov	r1, r3
 8006a38:	f000 fa0a 	bl	8006e50 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8006a3c:	2000      	movs	r0, #0
 8006a3e:	bd08      	pop	{r3, pc}

08006a40 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006a40:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006a42:	2200      	movs	r2, #0
 8006a44:	490f      	ldr	r1, [pc, #60]	; (8006a84 <MX_USB_DEVICE_Init+0x44>)
 8006a46:	4810      	ldr	r0, [pc, #64]	; (8006a88 <MX_USB_DEVICE_Init+0x48>)
 8006a48:	f7ff fb26 	bl	8006098 <USBD_Init>
 8006a4c:	b970      	cbnz	r0, 8006a6c <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006a4e:	490f      	ldr	r1, [pc, #60]	; (8006a8c <MX_USB_DEVICE_Init+0x4c>)
 8006a50:	480d      	ldr	r0, [pc, #52]	; (8006a88 <MX_USB_DEVICE_Init+0x48>)
 8006a52:	f7ff fb38 	bl	80060c6 <USBD_RegisterClass>
 8006a56:	b960      	cbnz	r0, 8006a72 <MX_USB_DEVICE_Init+0x32>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006a58:	490d      	ldr	r1, [pc, #52]	; (8006a90 <MX_USB_DEVICE_Init+0x50>)
 8006a5a:	480b      	ldr	r0, [pc, #44]	; (8006a88 <MX_USB_DEVICE_Init+0x48>)
 8006a5c:	f7ff faef 	bl	800603e <USBD_CDC_RegisterInterface>
 8006a60:	b950      	cbnz	r0, 8006a78 <MX_USB_DEVICE_Init+0x38>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006a62:	4809      	ldr	r0, [pc, #36]	; (8006a88 <MX_USB_DEVICE_Init+0x48>)
 8006a64:	f7ff fb36 	bl	80060d4 <USBD_Start>
 8006a68:	b948      	cbnz	r0, 8006a7e <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006a6a:	bd08      	pop	{r3, pc}
    Error_Handler();
 8006a6c:	f7fa fe3e 	bl	80016ec <Error_Handler>
 8006a70:	e7ed      	b.n	8006a4e <MX_USB_DEVICE_Init+0xe>
    Error_Handler();
 8006a72:	f7fa fe3b 	bl	80016ec <Error_Handler>
 8006a76:	e7ef      	b.n	8006a58 <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 8006a78:	f7fa fe38 	bl	80016ec <Error_Handler>
 8006a7c:	e7f1      	b.n	8006a62 <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 8006a7e:	f7fa fe35 	bl	80016ec <Error_Handler>
}
 8006a82:	e7f2      	b.n	8006a6a <MX_USB_DEVICE_Init+0x2a>
 8006a84:	20000140 	.word	0x20000140
 8006a88:	200018ac 	.word	0x200018ac
 8006a8c:	20000018 	.word	0x20000018
 8006a90:	20000128 	.word	0x20000128

08006a94 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8006a94:	2000      	movs	r0, #0
 8006a96:	4770      	bx	lr

08006a98 <CDC_Control_FS>:
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006a98:	2820      	cmp	r0, #32
 8006a9a:	d003      	beq.n	8006aa4 <CDC_Control_FS+0xc>
 8006a9c:	2821      	cmp	r0, #33	; 0x21
 8006a9e:	d009      	beq.n	8006ab4 <CDC_Control_FS+0x1c>
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8006aa0:	2000      	movs	r0, #0
 8006aa2:	4770      	bx	lr
    	memcpy(lineCoding, pbuf, sizeof(lineCoding));
 8006aa4:	4b07      	ldr	r3, [pc, #28]	; (8006ac4 <CDC_Control_FS+0x2c>)
 8006aa6:	6808      	ldr	r0, [r1, #0]
 8006aa8:	6018      	str	r0, [r3, #0]
 8006aaa:	8888      	ldrh	r0, [r1, #4]
 8006aac:	798a      	ldrb	r2, [r1, #6]
 8006aae:	8098      	strh	r0, [r3, #4]
 8006ab0:	719a      	strb	r2, [r3, #6]
    break;
 8006ab2:	e7f5      	b.n	8006aa0 <CDC_Control_FS+0x8>
    	memcpy(pbuf, lineCoding, sizeof(lineCoding));
 8006ab4:	4b03      	ldr	r3, [pc, #12]	; (8006ac4 <CDC_Control_FS+0x2c>)
 8006ab6:	6818      	ldr	r0, [r3, #0]
 8006ab8:	6008      	str	r0, [r1, #0]
 8006aba:	889a      	ldrh	r2, [r3, #4]
 8006abc:	799b      	ldrb	r3, [r3, #6]
 8006abe:	808a      	strh	r2, [r1, #4]
 8006ac0:	718b      	strb	r3, [r1, #6]
    break;
 8006ac2:	e7ed      	b.n	8006aa0 <CDC_Control_FS+0x8>
 8006ac4:	20000138 	.word	0x20000138

08006ac8 <CDC_Init_FS>:
{
 8006ac8:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006aca:	4c06      	ldr	r4, [pc, #24]	; (8006ae4 <CDC_Init_FS+0x1c>)
 8006acc:	2200      	movs	r2, #0
 8006ace:	4906      	ldr	r1, [pc, #24]	; (8006ae8 <CDC_Init_FS+0x20>)
 8006ad0:	4620      	mov	r0, r4
 8006ad2:	f7ff fabb 	bl	800604c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006ad6:	4905      	ldr	r1, [pc, #20]	; (8006aec <CDC_Init_FS+0x24>)
 8006ad8:	4620      	mov	r0, r4
 8006ada:	f7ff fabf 	bl	800605c <USBD_CDC_SetRxBuffer>
}
 8006ade:	2000      	movs	r0, #0
 8006ae0:	bd10      	pop	{r4, pc}
 8006ae2:	bf00      	nop
 8006ae4:	200018ac 	.word	0x200018ac
 8006ae8:	20001d70 	.word	0x20001d70
 8006aec:	20001b70 	.word	0x20001b70

08006af0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006af0:	b570      	push	{r4, r5, r6, lr}
 8006af2:	4604      	mov	r4, r0
 8006af4:	460d      	mov	r5, r1
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006af6:	4e07      	ldr	r6, [pc, #28]	; (8006b14 <CDC_Receive_FS+0x24>)
 8006af8:	4601      	mov	r1, r0
 8006afa:	4630      	mov	r0, r6
 8006afc:	f7ff faae 	bl	800605c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006b00:	4630      	mov	r0, r6
 8006b02:	f7ff fab1 	bl	8006068 <USBD_CDC_ReceivePacket>
  CDC_ReveiveCallback(Buf, Len[0]); // My callback function
 8006b06:	7829      	ldrb	r1, [r5, #0]
 8006b08:	4620      	mov	r0, r4
 8006b0a:	f7fa fdb3 	bl	8001674 <CDC_ReveiveCallback>
  return (USBD_OK);
  /* USER CODE END 6 */
}
 8006b0e:	2000      	movs	r0, #0
 8006b10:	bd70      	pop	{r4, r5, r6, pc}
 8006b12:	bf00      	nop
 8006b14:	200018ac 	.word	0x200018ac

08006b18 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006b18:	2312      	movs	r3, #18
 8006b1a:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 8006b1c:	4800      	ldr	r0, [pc, #0]	; (8006b20 <USBD_FS_DeviceDescriptor+0x8>)
 8006b1e:	4770      	bx	lr
 8006b20:	2000015c 	.word	0x2000015c

08006b24 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006b24:	2304      	movs	r3, #4
 8006b26:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 8006b28:	4800      	ldr	r0, [pc, #0]	; (8006b2c <USBD_FS_LangIDStrDescriptor+0x8>)
 8006b2a:	4770      	bx	lr
 8006b2c:	20000170 	.word	0x20000170

08006b30 <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 8006b30:	2300      	movs	r3, #0
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d21e      	bcs.n	8006b74 <IntToUnicode+0x44>
{
 8006b36:	b500      	push	{lr}
 8006b38:	e010      	b.n	8006b5c <IntToUnicode+0x2c>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006b3a:	f10c 0c37 	add.w	ip, ip, #55	; 0x37
 8006b3e:	f801 c013 	strb.w	ip, [r1, r3, lsl #1]
    }

    value = value << 4;
 8006b42:	0100      	lsls	r0, r0, #4

    pbuf[2 * idx + 1] = 0;
 8006b44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8006b48:	f10c 0c01 	add.w	ip, ip, #1
 8006b4c:	f04f 0e00 	mov.w	lr, #0
 8006b50:	f801 e00c 	strb.w	lr, [r1, ip]
  for (idx = 0; idx < len; idx++)
 8006b54:	3301      	adds	r3, #1
 8006b56:	b2db      	uxtb	r3, r3
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d209      	bcs.n	8006b70 <IntToUnicode+0x40>
    if (((value >> 28)) < 0xA)
 8006b5c:	ea4f 7c10 	mov.w	ip, r0, lsr #28
 8006b60:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
 8006b64:	d2e9      	bcs.n	8006b3a <IntToUnicode+0xa>
      pbuf[2 * idx] = (value >> 28) + '0';
 8006b66:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8006b6a:	f801 c013 	strb.w	ip, [r1, r3, lsl #1]
 8006b6e:	e7e8      	b.n	8006b42 <IntToUnicode+0x12>
  }
}
 8006b70:	f85d fb04 	ldr.w	pc, [sp], #4
 8006b74:	4770      	bx	lr
	...

08006b78 <Get_SerialNum>:
{
 8006b78:	b538      	push	{r3, r4, r5, lr}
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006b7a:	4b0b      	ldr	r3, [pc, #44]	; (8006ba8 <Get_SerialNum+0x30>)
 8006b7c:	f8d3 07e8 	ldr.w	r0, [r3, #2024]	; 0x7e8
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006b80:	f8d3 47ec 	ldr.w	r4, [r3, #2028]	; 0x7ec
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006b84:	f8d3 37f0 	ldr.w	r3, [r3, #2032]	; 0x7f0
  if (deviceserial0 != 0)
 8006b88:	18c0      	adds	r0, r0, r3
 8006b8a:	d100      	bne.n	8006b8e <Get_SerialNum+0x16>
}
 8006b8c:	bd38      	pop	{r3, r4, r5, pc}
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006b8e:	4d07      	ldr	r5, [pc, #28]	; (8006bac <Get_SerialNum+0x34>)
 8006b90:	2208      	movs	r2, #8
 8006b92:	1ca9      	adds	r1, r5, #2
 8006b94:	f7ff ffcc 	bl	8006b30 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006b98:	2204      	movs	r2, #4
 8006b9a:	f105 0112 	add.w	r1, r5, #18
 8006b9e:	4620      	mov	r0, r4
 8006ba0:	f7ff ffc6 	bl	8006b30 <IntToUnicode>
}
 8006ba4:	e7f2      	b.n	8006b8c <Get_SerialNum+0x14>
 8006ba6:	bf00      	nop
 8006ba8:	1ffff000 	.word	0x1ffff000
 8006bac:	20000174 	.word	0x20000174

08006bb0 <USBD_FS_SerialStrDescriptor>:
{
 8006bb0:	b508      	push	{r3, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8006bb2:	231a      	movs	r3, #26
 8006bb4:	800b      	strh	r3, [r1, #0]
  Get_SerialNum();
 8006bb6:	f7ff ffdf 	bl	8006b78 <Get_SerialNum>
}
 8006bba:	4801      	ldr	r0, [pc, #4]	; (8006bc0 <USBD_FS_SerialStrDescriptor+0x10>)
 8006bbc:	bd08      	pop	{r3, pc}
 8006bbe:	bf00      	nop
 8006bc0:	20000174 	.word	0x20000174

08006bc4 <USBD_FS_ProductStrDescriptor>:
{
 8006bc4:	b508      	push	{r3, lr}
 8006bc6:	460a      	mov	r2, r1
  if(speed == 0)
 8006bc8:	b928      	cbnz	r0, 8006bd6 <USBD_FS_ProductStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006bca:	4905      	ldr	r1, [pc, #20]	; (8006be0 <USBD_FS_ProductStrDescriptor+0x1c>)
 8006bcc:	4805      	ldr	r0, [pc, #20]	; (8006be4 <USBD_FS_ProductStrDescriptor+0x20>)
 8006bce:	f7ff fed8 	bl	8006982 <USBD_GetString>
}
 8006bd2:	4803      	ldr	r0, [pc, #12]	; (8006be0 <USBD_FS_ProductStrDescriptor+0x1c>)
 8006bd4:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006bd6:	4902      	ldr	r1, [pc, #8]	; (8006be0 <USBD_FS_ProductStrDescriptor+0x1c>)
 8006bd8:	4802      	ldr	r0, [pc, #8]	; (8006be4 <USBD_FS_ProductStrDescriptor+0x20>)
 8006bda:	f7ff fed2 	bl	8006982 <USBD_GetString>
 8006bde:	e7f8      	b.n	8006bd2 <USBD_FS_ProductStrDescriptor+0xe>
 8006be0:	20001f70 	.word	0x20001f70
 8006be4:	0800b790 	.word	0x0800b790

08006be8 <USBD_FS_ManufacturerStrDescriptor>:
{
 8006be8:	b510      	push	{r4, lr}
 8006bea:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006bec:	4c03      	ldr	r4, [pc, #12]	; (8006bfc <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8006bee:	4621      	mov	r1, r4
 8006bf0:	4803      	ldr	r0, [pc, #12]	; (8006c00 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8006bf2:	f7ff fec6 	bl	8006982 <USBD_GetString>
}
 8006bf6:	4620      	mov	r0, r4
 8006bf8:	bd10      	pop	{r4, pc}
 8006bfa:	bf00      	nop
 8006bfc:	20001f70 	.word	0x20001f70
 8006c00:	0800b7a0 	.word	0x0800b7a0

08006c04 <USBD_FS_ConfigStrDescriptor>:
{
 8006c04:	b508      	push	{r3, lr}
 8006c06:	460a      	mov	r2, r1
  if(speed == USBD_SPEED_HIGH)
 8006c08:	b928      	cbnz	r0, 8006c16 <USBD_FS_ConfigStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006c0a:	4905      	ldr	r1, [pc, #20]	; (8006c20 <USBD_FS_ConfigStrDescriptor+0x1c>)
 8006c0c:	4805      	ldr	r0, [pc, #20]	; (8006c24 <USBD_FS_ConfigStrDescriptor+0x20>)
 8006c0e:	f7ff feb8 	bl	8006982 <USBD_GetString>
}
 8006c12:	4803      	ldr	r0, [pc, #12]	; (8006c20 <USBD_FS_ConfigStrDescriptor+0x1c>)
 8006c14:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006c16:	4902      	ldr	r1, [pc, #8]	; (8006c20 <USBD_FS_ConfigStrDescriptor+0x1c>)
 8006c18:	4802      	ldr	r0, [pc, #8]	; (8006c24 <USBD_FS_ConfigStrDescriptor+0x20>)
 8006c1a:	f7ff feb2 	bl	8006982 <USBD_GetString>
 8006c1e:	e7f8      	b.n	8006c12 <USBD_FS_ConfigStrDescriptor+0xe>
 8006c20:	20001f70 	.word	0x20001f70
 8006c24:	0800b7a8 	.word	0x0800b7a8

08006c28 <USBD_FS_InterfaceStrDescriptor>:
{
 8006c28:	b508      	push	{r3, lr}
 8006c2a:	460a      	mov	r2, r1
  if(speed == 0)
 8006c2c:	b928      	cbnz	r0, 8006c3a <USBD_FS_InterfaceStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006c2e:	4905      	ldr	r1, [pc, #20]	; (8006c44 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8006c30:	4805      	ldr	r0, [pc, #20]	; (8006c48 <USBD_FS_InterfaceStrDescriptor+0x20>)
 8006c32:	f7ff fea6 	bl	8006982 <USBD_GetString>
}
 8006c36:	4803      	ldr	r0, [pc, #12]	; (8006c44 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8006c38:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006c3a:	4902      	ldr	r1, [pc, #8]	; (8006c44 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8006c3c:	4802      	ldr	r0, [pc, #8]	; (8006c48 <USBD_FS_InterfaceStrDescriptor+0x20>)
 8006c3e:	f7ff fea0 	bl	8006982 <USBD_GetString>
 8006c42:	e7f8      	b.n	8006c36 <USBD_FS_InterfaceStrDescriptor+0xe>
 8006c44:	20001f70 	.word	0x20001f70
 8006c48:	0800b7b4 	.word	0x0800b7b4

08006c4c <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 8006c4c:	2802      	cmp	r0, #2
 8006c4e:	d805      	bhi.n	8006c5c <USBD_Get_USB_Status+0x10>
 8006c50:	e8df f000 	tbb	[pc, r0]
 8006c54:	0405      	.short	0x0405
 8006c56:	02          	.byte	0x02
 8006c57:	00          	.byte	0x00
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
    break;
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006c58:	2001      	movs	r0, #1
    break;
 8006c5a:	4770      	bx	lr
      usb_status = USBD_FAIL;
 8006c5c:	2002      	movs	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8006c5e:	4770      	bx	lr

08006c60 <HAL_PCD_MspInit>:
  if(pcdHandle->Instance==USB)
 8006c60:	6802      	ldr	r2, [r0, #0]
 8006c62:	4b09      	ldr	r3, [pc, #36]	; (8006c88 <HAL_PCD_MspInit+0x28>)
 8006c64:	429a      	cmp	r2, r3
 8006c66:	d000      	beq.n	8006c6a <HAL_PCD_MspInit+0xa>
 8006c68:	4770      	bx	lr
{
 8006c6a:	b082      	sub	sp, #8
    __HAL_RCC_USB_CLK_ENABLE();
 8006c6c:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8006c70:	69da      	ldr	r2, [r3, #28]
 8006c72:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8006c76:	61da      	str	r2, [r3, #28]
 8006c78:	69db      	ldr	r3, [r3, #28]
 8006c7a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006c7e:	9301      	str	r3, [sp, #4]
 8006c80:	9b01      	ldr	r3, [sp, #4]
}
 8006c82:	b002      	add	sp, #8
 8006c84:	4770      	bx	lr
 8006c86:	bf00      	nop
 8006c88:	40005c00 	.word	0x40005c00

08006c8c <HAL_PCD_SetupStageCallback>:
{
 8006c8c:	b508      	push	{r3, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006c8e:	f500 712c 	add.w	r1, r0, #688	; 0x2b0
 8006c92:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8006c96:	f7ff fa35 	bl	8006104 <USBD_LL_SetupStage>
}
 8006c9a:	bd08      	pop	{r3, pc}

08006c9c <HAL_PCD_DataOutStageCallback>:
{
 8006c9c:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006c9e:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8006ca2:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8006ca6:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 8006caa:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8006cae:	f7ff fa56 	bl	800615e <USBD_LL_DataOutStage>
}
 8006cb2:	bd08      	pop	{r3, pc}

08006cb4 <HAL_PCD_DataInStageCallback>:
{
 8006cb4:	b508      	push	{r3, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006cb6:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8006cba:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8006cbe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006cc0:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8006cc4:	f7ff fa91 	bl	80061ea <USBD_LL_DataInStage>
}
 8006cc8:	bd08      	pop	{r3, pc}

08006cca <HAL_PCD_SOFCallback>:
{
 8006cca:	b508      	push	{r3, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006ccc:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8006cd0:	f7ff fb32 	bl	8006338 <USBD_LL_SOF>
}
 8006cd4:	bd08      	pop	{r3, pc}

08006cd6 <HAL_PCD_ResetCallback>:
{
 8006cd6:	b510      	push	{r4, lr}
 8006cd8:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006cda:	6883      	ldr	r3, [r0, #8]
 8006cdc:	2b02      	cmp	r3, #2
 8006cde:	d109      	bne.n	8006cf4 <HAL_PCD_ResetCallback+0x1e>
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006ce0:	2101      	movs	r1, #1
 8006ce2:	f8d4 02e8 	ldr.w	r0, [r4, #744]	; 0x2e8
 8006ce6:	f7ff fb10 	bl	800630a <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006cea:	f8d4 02e8 	ldr.w	r0, [r4, #744]	; 0x2e8
 8006cee:	f7ff fae4 	bl	80062ba <USBD_LL_Reset>
}
 8006cf2:	bd10      	pop	{r4, pc}
    Error_Handler();
 8006cf4:	f7fa fcfa 	bl	80016ec <Error_Handler>
 8006cf8:	e7f2      	b.n	8006ce0 <HAL_PCD_ResetCallback+0xa>
	...

08006cfc <HAL_PCD_SuspendCallback>:
{
 8006cfc:	b510      	push	{r4, lr}
 8006cfe:	4604      	mov	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006d00:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8006d04:	f7ff fb04 	bl	8006310 <USBD_LL_Suspend>
  if (hpcd->Init.low_power_enable)
 8006d08:	69a3      	ldr	r3, [r4, #24]
 8006d0a:	b123      	cbz	r3, 8006d16 <HAL_PCD_SuspendCallback+0x1a>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006d0c:	4a02      	ldr	r2, [pc, #8]	; (8006d18 <HAL_PCD_SuspendCallback+0x1c>)
 8006d0e:	6913      	ldr	r3, [r2, #16]
 8006d10:	f043 0306 	orr.w	r3, r3, #6
 8006d14:	6113      	str	r3, [r2, #16]
}
 8006d16:	bd10      	pop	{r4, pc}
 8006d18:	e000ed00 	.word	0xe000ed00

08006d1c <HAL_PCD_ResumeCallback>:
{
 8006d1c:	b508      	push	{r3, lr}
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006d1e:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8006d22:	f7ff fafe 	bl	8006322 <USBD_LL_Resume>
}
 8006d26:	bd08      	pop	{r3, pc}

08006d28 <USBD_LL_Init>:
{
 8006d28:	b510      	push	{r4, lr}
 8006d2a:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 8006d2c:	481d      	ldr	r0, [pc, #116]	; (8006da4 <USBD_LL_Init+0x7c>)
 8006d2e:	f8c0 42e8 	str.w	r4, [r0, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8006d32:	f8c4 02c0 	str.w	r0, [r4, #704]	; 0x2c0
  hpcd_USB_FS.Instance = USB;
 8006d36:	4b1c      	ldr	r3, [pc, #112]	; (8006da8 <USBD_LL_Init+0x80>)
 8006d38:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8006d3a:	2308      	movs	r3, #8
 8006d3c:	6043      	str	r3, [r0, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8006d3e:	2302      	movs	r3, #2
 8006d40:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8006d42:	2300      	movs	r3, #0
 8006d44:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8006d46:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8006d48:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8006d4a:	f7fb ff3e 	bl	8002bca <HAL_PCD_Init>
 8006d4e:	bb30      	cbnz	r0, 8006d9e <USBD_LL_Init+0x76>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8006d50:	2318      	movs	r3, #24
 8006d52:	2200      	movs	r2, #0
 8006d54:	4611      	mov	r1, r2
 8006d56:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8006d5a:	f7fc fe43 	bl	80039e4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8006d5e:	2358      	movs	r3, #88	; 0x58
 8006d60:	2200      	movs	r2, #0
 8006d62:	2180      	movs	r1, #128	; 0x80
 8006d64:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8006d68:	f7fc fe3c 	bl	80039e4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8006d6c:	23c0      	movs	r3, #192	; 0xc0
 8006d6e:	2200      	movs	r2, #0
 8006d70:	2181      	movs	r1, #129	; 0x81
 8006d72:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8006d76:	f7fc fe35 	bl	80039e4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8006d7a:	f44f 7388 	mov.w	r3, #272	; 0x110
 8006d7e:	2200      	movs	r2, #0
 8006d80:	2101      	movs	r1, #1
 8006d82:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8006d86:	f7fc fe2d 	bl	80039e4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8006d8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006d8e:	2200      	movs	r2, #0
 8006d90:	2182      	movs	r1, #130	; 0x82
 8006d92:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8006d96:	f7fc fe25 	bl	80039e4 <HAL_PCDEx_PMAConfig>
}
 8006d9a:	2000      	movs	r0, #0
 8006d9c:	bd10      	pop	{r4, pc}
    Error_Handler( );
 8006d9e:	f7fa fca5 	bl	80016ec <Error_Handler>
 8006da2:	e7d5      	b.n	8006d50 <USBD_LL_Init+0x28>
 8006da4:	20002170 	.word	0x20002170
 8006da8:	40005c00 	.word	0x40005c00

08006dac <USBD_LL_Start>:
{
 8006dac:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8006dae:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8006db2:	f7fb ff96 	bl	8002ce2 <HAL_PCD_Start>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006db6:	f7ff ff49 	bl	8006c4c <USBD_Get_USB_Status>
}
 8006dba:	bd08      	pop	{r3, pc}

08006dbc <USBD_LL_OpenEP>:
{
 8006dbc:	b508      	push	{r3, lr}
 8006dbe:	4694      	mov	ip, r2
 8006dc0:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006dc2:	4663      	mov	r3, ip
 8006dc4:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8006dc8:	f7fc fcce 	bl	8003768 <HAL_PCD_EP_Open>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006dcc:	f7ff ff3e 	bl	8006c4c <USBD_Get_USB_Status>
}
 8006dd0:	bd08      	pop	{r3, pc}

08006dd2 <USBD_LL_CloseEP>:
{
 8006dd2:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006dd4:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8006dd8:	f7fc fd08 	bl	80037ec <HAL_PCD_EP_Close>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006ddc:	f7ff ff36 	bl	8006c4c <USBD_Get_USB_Status>
}
 8006de0:	bd08      	pop	{r3, pc}

08006de2 <USBD_LL_StallEP>:
{
 8006de2:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006de4:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8006de8:	f7fc fd85 	bl	80038f6 <HAL_PCD_EP_SetStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006dec:	f7ff ff2e 	bl	8006c4c <USBD_Get_USB_Status>
}
 8006df0:	bd08      	pop	{r3, pc}

08006df2 <USBD_LL_ClearStallEP>:
{
 8006df2:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006df4:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8006df8:	f7fc fdb9 	bl	800396e <HAL_PCD_EP_ClrStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006dfc:	f7ff ff26 	bl	8006c4c <USBD_Get_USB_Status>
}
 8006e00:	bd08      	pop	{r3, pc}

08006e02 <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006e02:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
  if((ep_addr & 0x80) == 0x80)
 8006e06:	f011 0f80 	tst.w	r1, #128	; 0x80
 8006e0a:	d108      	bne.n	8006e1e <USBD_LL_IsStallEP+0x1c>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006e0c:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8006e10:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8006e14:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8006e18:	f891 016a 	ldrb.w	r0, [r1, #362]	; 0x16a
}
 8006e1c:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006e1e:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8006e22:	3101      	adds	r1, #1
 8006e24:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8006e28:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8006e2c:	7888      	ldrb	r0, [r1, #2]
 8006e2e:	4770      	bx	lr

08006e30 <USBD_LL_SetUSBAddress>:
{
 8006e30:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006e32:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8006e36:	f7fc fb99 	bl	800356c <HAL_PCD_SetAddress>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006e3a:	f7ff ff07 	bl	8006c4c <USBD_Get_USB_Status>
}
 8006e3e:	bd08      	pop	{r3, pc}

08006e40 <USBD_LL_Transmit>:
{
 8006e40:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006e42:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8006e46:	f7fc fd2e 	bl	80038a6 <HAL_PCD_EP_Transmit>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006e4a:	f7ff feff 	bl	8006c4c <USBD_Get_USB_Status>
}
 8006e4e:	bd08      	pop	{r3, pc}

08006e50 <USBD_LL_PrepareReceive>:
{
 8006e50:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006e52:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8006e56:	f7fc fcfb 	bl	8003850 <HAL_PCD_EP_Receive>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006e5a:	f7ff fef7 	bl	8006c4c <USBD_Get_USB_Status>
}
 8006e5e:	bd08      	pop	{r3, pc}

08006e60 <USBD_LL_GetRxDataSize>:
{
 8006e60:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006e62:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8006e66:	f7fc fd15 	bl	8003894 <HAL_PCD_EP_GetRxCount>
}
 8006e6a:	bd08      	pop	{r3, pc}

08006e6c <USBD_static_malloc>:
}
 8006e6c:	4800      	ldr	r0, [pc, #0]	; (8006e70 <USBD_static_malloc+0x4>)
 8006e6e:	4770      	bx	lr
 8006e70:	2000245c 	.word	0x2000245c

08006e74 <USBD_static_free>:
}
 8006e74:	4770      	bx	lr

08006e76 <HAL_PCDEx_SetConnectionState>:
}
 8006e76:	4770      	bx	lr

08006e78 <atof>:
 8006e78:	2100      	movs	r1, #0
 8006e7a:	f001 bae5 	b.w	8008448 <strtod>

08006e7e <atoi>:
 8006e7e:	220a      	movs	r2, #10
 8006e80:	2100      	movs	r1, #0
 8006e82:	f001 bbc5 	b.w	8008610 <strtol>
	...

08006e88 <__errno>:
 8006e88:	4b01      	ldr	r3, [pc, #4]	; (8006e90 <__errno+0x8>)
 8006e8a:	6818      	ldr	r0, [r3, #0]
 8006e8c:	4770      	bx	lr
 8006e8e:	bf00      	nop
 8006e90:	20000190 	.word	0x20000190

08006e94 <__libc_init_array>:
 8006e94:	b570      	push	{r4, r5, r6, lr}
 8006e96:	2600      	movs	r6, #0
 8006e98:	4d0c      	ldr	r5, [pc, #48]	; (8006ecc <__libc_init_array+0x38>)
 8006e9a:	4c0d      	ldr	r4, [pc, #52]	; (8006ed0 <__libc_init_array+0x3c>)
 8006e9c:	1b64      	subs	r4, r4, r5
 8006e9e:	10a4      	asrs	r4, r4, #2
 8006ea0:	42a6      	cmp	r6, r4
 8006ea2:	d109      	bne.n	8006eb8 <__libc_init_array+0x24>
 8006ea4:	f004 fac0 	bl	800b428 <_init>
 8006ea8:	2600      	movs	r6, #0
 8006eaa:	4d0a      	ldr	r5, [pc, #40]	; (8006ed4 <__libc_init_array+0x40>)
 8006eac:	4c0a      	ldr	r4, [pc, #40]	; (8006ed8 <__libc_init_array+0x44>)
 8006eae:	1b64      	subs	r4, r4, r5
 8006eb0:	10a4      	asrs	r4, r4, #2
 8006eb2:	42a6      	cmp	r6, r4
 8006eb4:	d105      	bne.n	8006ec2 <__libc_init_array+0x2e>
 8006eb6:	bd70      	pop	{r4, r5, r6, pc}
 8006eb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ebc:	4798      	blx	r3
 8006ebe:	3601      	adds	r6, #1
 8006ec0:	e7ee      	b.n	8006ea0 <__libc_init_array+0xc>
 8006ec2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ec6:	4798      	blx	r3
 8006ec8:	3601      	adds	r6, #1
 8006eca:	e7f2      	b.n	8006eb2 <__libc_init_array+0x1e>
 8006ecc:	0800bcc0 	.word	0x0800bcc0
 8006ed0:	0800bcc0 	.word	0x0800bcc0
 8006ed4:	0800bcc0 	.word	0x0800bcc0
 8006ed8:	0800bcc4 	.word	0x0800bcc4

08006edc <memcpy>:
 8006edc:	440a      	add	r2, r1
 8006ede:	4291      	cmp	r1, r2
 8006ee0:	f100 33ff 	add.w	r3, r0, #4294967295
 8006ee4:	d100      	bne.n	8006ee8 <memcpy+0xc>
 8006ee6:	4770      	bx	lr
 8006ee8:	b510      	push	{r4, lr}
 8006eea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006eee:	4291      	cmp	r1, r2
 8006ef0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ef4:	d1f9      	bne.n	8006eea <memcpy+0xe>
 8006ef6:	bd10      	pop	{r4, pc}

08006ef8 <memset>:
 8006ef8:	4603      	mov	r3, r0
 8006efa:	4402      	add	r2, r0
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d100      	bne.n	8006f02 <memset+0xa>
 8006f00:	4770      	bx	lr
 8006f02:	f803 1b01 	strb.w	r1, [r3], #1
 8006f06:	e7f9      	b.n	8006efc <memset+0x4>

08006f08 <__cvt>:
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f0e:	461f      	mov	r7, r3
 8006f10:	bfbb      	ittet	lt
 8006f12:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8006f16:	461f      	movlt	r7, r3
 8006f18:	2300      	movge	r3, #0
 8006f1a:	232d      	movlt	r3, #45	; 0x2d
 8006f1c:	b088      	sub	sp, #32
 8006f1e:	4614      	mov	r4, r2
 8006f20:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006f22:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006f24:	7013      	strb	r3, [r2, #0]
 8006f26:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006f28:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8006f2c:	f023 0820 	bic.w	r8, r3, #32
 8006f30:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006f34:	d005      	beq.n	8006f42 <__cvt+0x3a>
 8006f36:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006f3a:	d100      	bne.n	8006f3e <__cvt+0x36>
 8006f3c:	3501      	adds	r5, #1
 8006f3e:	2302      	movs	r3, #2
 8006f40:	e000      	b.n	8006f44 <__cvt+0x3c>
 8006f42:	2303      	movs	r3, #3
 8006f44:	aa07      	add	r2, sp, #28
 8006f46:	9204      	str	r2, [sp, #16]
 8006f48:	aa06      	add	r2, sp, #24
 8006f4a:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006f4e:	e9cd 3500 	strd	r3, r5, [sp]
 8006f52:	4622      	mov	r2, r4
 8006f54:	463b      	mov	r3, r7
 8006f56:	f001 fc0f 	bl	8008778 <_dtoa_r>
 8006f5a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006f5e:	4606      	mov	r6, r0
 8006f60:	d102      	bne.n	8006f68 <__cvt+0x60>
 8006f62:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006f64:	07db      	lsls	r3, r3, #31
 8006f66:	d522      	bpl.n	8006fae <__cvt+0xa6>
 8006f68:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006f6c:	eb06 0905 	add.w	r9, r6, r5
 8006f70:	d110      	bne.n	8006f94 <__cvt+0x8c>
 8006f72:	7833      	ldrb	r3, [r6, #0]
 8006f74:	2b30      	cmp	r3, #48	; 0x30
 8006f76:	d10a      	bne.n	8006f8e <__cvt+0x86>
 8006f78:	2200      	movs	r2, #0
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	4620      	mov	r0, r4
 8006f7e:	4639      	mov	r1, r7
 8006f80:	f7f9 fd1c 	bl	80009bc <__aeabi_dcmpeq>
 8006f84:	b918      	cbnz	r0, 8006f8e <__cvt+0x86>
 8006f86:	f1c5 0501 	rsb	r5, r5, #1
 8006f8a:	f8ca 5000 	str.w	r5, [sl]
 8006f8e:	f8da 3000 	ldr.w	r3, [sl]
 8006f92:	4499      	add	r9, r3
 8006f94:	2200      	movs	r2, #0
 8006f96:	2300      	movs	r3, #0
 8006f98:	4620      	mov	r0, r4
 8006f9a:	4639      	mov	r1, r7
 8006f9c:	f7f9 fd0e 	bl	80009bc <__aeabi_dcmpeq>
 8006fa0:	b108      	cbz	r0, 8006fa6 <__cvt+0x9e>
 8006fa2:	f8cd 901c 	str.w	r9, [sp, #28]
 8006fa6:	2230      	movs	r2, #48	; 0x30
 8006fa8:	9b07      	ldr	r3, [sp, #28]
 8006faa:	454b      	cmp	r3, r9
 8006fac:	d307      	bcc.n	8006fbe <__cvt+0xb6>
 8006fae:	4630      	mov	r0, r6
 8006fb0:	9b07      	ldr	r3, [sp, #28]
 8006fb2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006fb4:	1b9b      	subs	r3, r3, r6
 8006fb6:	6013      	str	r3, [r2, #0]
 8006fb8:	b008      	add	sp, #32
 8006fba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fbe:	1c59      	adds	r1, r3, #1
 8006fc0:	9107      	str	r1, [sp, #28]
 8006fc2:	701a      	strb	r2, [r3, #0]
 8006fc4:	e7f0      	b.n	8006fa8 <__cvt+0xa0>

08006fc6 <__exponent>:
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006fca:	2900      	cmp	r1, #0
 8006fcc:	f803 2b02 	strb.w	r2, [r3], #2
 8006fd0:	bfb6      	itet	lt
 8006fd2:	222d      	movlt	r2, #45	; 0x2d
 8006fd4:	222b      	movge	r2, #43	; 0x2b
 8006fd6:	4249      	neglt	r1, r1
 8006fd8:	2909      	cmp	r1, #9
 8006fda:	7042      	strb	r2, [r0, #1]
 8006fdc:	dd2b      	ble.n	8007036 <__exponent+0x70>
 8006fde:	f10d 0407 	add.w	r4, sp, #7
 8006fe2:	46a4      	mov	ip, r4
 8006fe4:	270a      	movs	r7, #10
 8006fe6:	fb91 f6f7 	sdiv	r6, r1, r7
 8006fea:	460a      	mov	r2, r1
 8006fec:	46a6      	mov	lr, r4
 8006fee:	fb07 1516 	mls	r5, r7, r6, r1
 8006ff2:	2a63      	cmp	r2, #99	; 0x63
 8006ff4:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8006ff8:	4631      	mov	r1, r6
 8006ffa:	f104 34ff 	add.w	r4, r4, #4294967295
 8006ffe:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007002:	dcf0      	bgt.n	8006fe6 <__exponent+0x20>
 8007004:	3130      	adds	r1, #48	; 0x30
 8007006:	f1ae 0502 	sub.w	r5, lr, #2
 800700a:	f804 1c01 	strb.w	r1, [r4, #-1]
 800700e:	4629      	mov	r1, r5
 8007010:	1c44      	adds	r4, r0, #1
 8007012:	4561      	cmp	r1, ip
 8007014:	d30a      	bcc.n	800702c <__exponent+0x66>
 8007016:	f10d 0209 	add.w	r2, sp, #9
 800701a:	eba2 020e 	sub.w	r2, r2, lr
 800701e:	4565      	cmp	r5, ip
 8007020:	bf88      	it	hi
 8007022:	2200      	movhi	r2, #0
 8007024:	4413      	add	r3, r2
 8007026:	1a18      	subs	r0, r3, r0
 8007028:	b003      	add	sp, #12
 800702a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800702c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007030:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007034:	e7ed      	b.n	8007012 <__exponent+0x4c>
 8007036:	2330      	movs	r3, #48	; 0x30
 8007038:	3130      	adds	r1, #48	; 0x30
 800703a:	7083      	strb	r3, [r0, #2]
 800703c:	70c1      	strb	r1, [r0, #3]
 800703e:	1d03      	adds	r3, r0, #4
 8007040:	e7f1      	b.n	8007026 <__exponent+0x60>
	...

08007044 <_printf_float>:
 8007044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007048:	b091      	sub	sp, #68	; 0x44
 800704a:	460c      	mov	r4, r1
 800704c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8007050:	4616      	mov	r6, r2
 8007052:	461f      	mov	r7, r3
 8007054:	4605      	mov	r5, r0
 8007056:	f002 fcf5 	bl	8009a44 <_localeconv_r>
 800705a:	6803      	ldr	r3, [r0, #0]
 800705c:	4618      	mov	r0, r3
 800705e:	9309      	str	r3, [sp, #36]	; 0x24
 8007060:	f7f9 f880 	bl	8000164 <strlen>
 8007064:	2300      	movs	r3, #0
 8007066:	930e      	str	r3, [sp, #56]	; 0x38
 8007068:	f8d8 3000 	ldr.w	r3, [r8]
 800706c:	900a      	str	r0, [sp, #40]	; 0x28
 800706e:	3307      	adds	r3, #7
 8007070:	f023 0307 	bic.w	r3, r3, #7
 8007074:	f103 0208 	add.w	r2, r3, #8
 8007078:	f894 9018 	ldrb.w	r9, [r4, #24]
 800707c:	f8d4 b000 	ldr.w	fp, [r4]
 8007080:	f8c8 2000 	str.w	r2, [r8]
 8007084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007088:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800708c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8007090:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8007094:	930b      	str	r3, [sp, #44]	; 0x2c
 8007096:	f04f 32ff 	mov.w	r2, #4294967295
 800709a:	4640      	mov	r0, r8
 800709c:	4b9c      	ldr	r3, [pc, #624]	; (8007310 <_printf_float+0x2cc>)
 800709e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80070a0:	f7f9 fcbe 	bl	8000a20 <__aeabi_dcmpun>
 80070a4:	bb70      	cbnz	r0, 8007104 <_printf_float+0xc0>
 80070a6:	f04f 32ff 	mov.w	r2, #4294967295
 80070aa:	4640      	mov	r0, r8
 80070ac:	4b98      	ldr	r3, [pc, #608]	; (8007310 <_printf_float+0x2cc>)
 80070ae:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80070b0:	f7f9 fc98 	bl	80009e4 <__aeabi_dcmple>
 80070b4:	bb30      	cbnz	r0, 8007104 <_printf_float+0xc0>
 80070b6:	2200      	movs	r2, #0
 80070b8:	2300      	movs	r3, #0
 80070ba:	4640      	mov	r0, r8
 80070bc:	4651      	mov	r1, sl
 80070be:	f7f9 fc87 	bl	80009d0 <__aeabi_dcmplt>
 80070c2:	b110      	cbz	r0, 80070ca <_printf_float+0x86>
 80070c4:	232d      	movs	r3, #45	; 0x2d
 80070c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80070ca:	4b92      	ldr	r3, [pc, #584]	; (8007314 <_printf_float+0x2d0>)
 80070cc:	4892      	ldr	r0, [pc, #584]	; (8007318 <_printf_float+0x2d4>)
 80070ce:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80070d2:	bf94      	ite	ls
 80070d4:	4698      	movls	r8, r3
 80070d6:	4680      	movhi	r8, r0
 80070d8:	2303      	movs	r3, #3
 80070da:	f04f 0a00 	mov.w	sl, #0
 80070de:	6123      	str	r3, [r4, #16]
 80070e0:	f02b 0304 	bic.w	r3, fp, #4
 80070e4:	6023      	str	r3, [r4, #0]
 80070e6:	4633      	mov	r3, r6
 80070e8:	4621      	mov	r1, r4
 80070ea:	4628      	mov	r0, r5
 80070ec:	9700      	str	r7, [sp, #0]
 80070ee:	aa0f      	add	r2, sp, #60	; 0x3c
 80070f0:	f000 f9d4 	bl	800749c <_printf_common>
 80070f4:	3001      	adds	r0, #1
 80070f6:	f040 8090 	bne.w	800721a <_printf_float+0x1d6>
 80070fa:	f04f 30ff 	mov.w	r0, #4294967295
 80070fe:	b011      	add	sp, #68	; 0x44
 8007100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007104:	4642      	mov	r2, r8
 8007106:	4653      	mov	r3, sl
 8007108:	4640      	mov	r0, r8
 800710a:	4651      	mov	r1, sl
 800710c:	f7f9 fc88 	bl	8000a20 <__aeabi_dcmpun>
 8007110:	b148      	cbz	r0, 8007126 <_printf_float+0xe2>
 8007112:	f1ba 0f00 	cmp.w	sl, #0
 8007116:	bfb8      	it	lt
 8007118:	232d      	movlt	r3, #45	; 0x2d
 800711a:	4880      	ldr	r0, [pc, #512]	; (800731c <_printf_float+0x2d8>)
 800711c:	bfb8      	it	lt
 800711e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007122:	4b7f      	ldr	r3, [pc, #508]	; (8007320 <_printf_float+0x2dc>)
 8007124:	e7d3      	b.n	80070ce <_printf_float+0x8a>
 8007126:	6863      	ldr	r3, [r4, #4]
 8007128:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800712c:	1c5a      	adds	r2, r3, #1
 800712e:	d142      	bne.n	80071b6 <_printf_float+0x172>
 8007130:	2306      	movs	r3, #6
 8007132:	6063      	str	r3, [r4, #4]
 8007134:	2200      	movs	r2, #0
 8007136:	9206      	str	r2, [sp, #24]
 8007138:	aa0e      	add	r2, sp, #56	; 0x38
 800713a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800713e:	aa0d      	add	r2, sp, #52	; 0x34
 8007140:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8007144:	9203      	str	r2, [sp, #12]
 8007146:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800714a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800714e:	6023      	str	r3, [r4, #0]
 8007150:	6863      	ldr	r3, [r4, #4]
 8007152:	4642      	mov	r2, r8
 8007154:	9300      	str	r3, [sp, #0]
 8007156:	4628      	mov	r0, r5
 8007158:	4653      	mov	r3, sl
 800715a:	910b      	str	r1, [sp, #44]	; 0x2c
 800715c:	f7ff fed4 	bl	8006f08 <__cvt>
 8007160:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007162:	4680      	mov	r8, r0
 8007164:	2947      	cmp	r1, #71	; 0x47
 8007166:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007168:	d108      	bne.n	800717c <_printf_float+0x138>
 800716a:	1cc8      	adds	r0, r1, #3
 800716c:	db02      	blt.n	8007174 <_printf_float+0x130>
 800716e:	6863      	ldr	r3, [r4, #4]
 8007170:	4299      	cmp	r1, r3
 8007172:	dd40      	ble.n	80071f6 <_printf_float+0x1b2>
 8007174:	f1a9 0902 	sub.w	r9, r9, #2
 8007178:	fa5f f989 	uxtb.w	r9, r9
 800717c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007180:	d81f      	bhi.n	80071c2 <_printf_float+0x17e>
 8007182:	464a      	mov	r2, r9
 8007184:	3901      	subs	r1, #1
 8007186:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800718a:	910d      	str	r1, [sp, #52]	; 0x34
 800718c:	f7ff ff1b 	bl	8006fc6 <__exponent>
 8007190:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007192:	4682      	mov	sl, r0
 8007194:	1813      	adds	r3, r2, r0
 8007196:	2a01      	cmp	r2, #1
 8007198:	6123      	str	r3, [r4, #16]
 800719a:	dc02      	bgt.n	80071a2 <_printf_float+0x15e>
 800719c:	6822      	ldr	r2, [r4, #0]
 800719e:	07d2      	lsls	r2, r2, #31
 80071a0:	d501      	bpl.n	80071a6 <_printf_float+0x162>
 80071a2:	3301      	adds	r3, #1
 80071a4:	6123      	str	r3, [r4, #16]
 80071a6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d09b      	beq.n	80070e6 <_printf_float+0xa2>
 80071ae:	232d      	movs	r3, #45	; 0x2d
 80071b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80071b4:	e797      	b.n	80070e6 <_printf_float+0xa2>
 80071b6:	2947      	cmp	r1, #71	; 0x47
 80071b8:	d1bc      	bne.n	8007134 <_printf_float+0xf0>
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d1ba      	bne.n	8007134 <_printf_float+0xf0>
 80071be:	2301      	movs	r3, #1
 80071c0:	e7b7      	b.n	8007132 <_printf_float+0xee>
 80071c2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80071c6:	d118      	bne.n	80071fa <_printf_float+0x1b6>
 80071c8:	2900      	cmp	r1, #0
 80071ca:	6863      	ldr	r3, [r4, #4]
 80071cc:	dd0b      	ble.n	80071e6 <_printf_float+0x1a2>
 80071ce:	6121      	str	r1, [r4, #16]
 80071d0:	b913      	cbnz	r3, 80071d8 <_printf_float+0x194>
 80071d2:	6822      	ldr	r2, [r4, #0]
 80071d4:	07d0      	lsls	r0, r2, #31
 80071d6:	d502      	bpl.n	80071de <_printf_float+0x19a>
 80071d8:	3301      	adds	r3, #1
 80071da:	440b      	add	r3, r1
 80071dc:	6123      	str	r3, [r4, #16]
 80071de:	f04f 0a00 	mov.w	sl, #0
 80071e2:	65a1      	str	r1, [r4, #88]	; 0x58
 80071e4:	e7df      	b.n	80071a6 <_printf_float+0x162>
 80071e6:	b913      	cbnz	r3, 80071ee <_printf_float+0x1aa>
 80071e8:	6822      	ldr	r2, [r4, #0]
 80071ea:	07d2      	lsls	r2, r2, #31
 80071ec:	d501      	bpl.n	80071f2 <_printf_float+0x1ae>
 80071ee:	3302      	adds	r3, #2
 80071f0:	e7f4      	b.n	80071dc <_printf_float+0x198>
 80071f2:	2301      	movs	r3, #1
 80071f4:	e7f2      	b.n	80071dc <_printf_float+0x198>
 80071f6:	f04f 0967 	mov.w	r9, #103	; 0x67
 80071fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80071fc:	4299      	cmp	r1, r3
 80071fe:	db05      	blt.n	800720c <_printf_float+0x1c8>
 8007200:	6823      	ldr	r3, [r4, #0]
 8007202:	6121      	str	r1, [r4, #16]
 8007204:	07d8      	lsls	r0, r3, #31
 8007206:	d5ea      	bpl.n	80071de <_printf_float+0x19a>
 8007208:	1c4b      	adds	r3, r1, #1
 800720a:	e7e7      	b.n	80071dc <_printf_float+0x198>
 800720c:	2900      	cmp	r1, #0
 800720e:	bfcc      	ite	gt
 8007210:	2201      	movgt	r2, #1
 8007212:	f1c1 0202 	rsble	r2, r1, #2
 8007216:	4413      	add	r3, r2
 8007218:	e7e0      	b.n	80071dc <_printf_float+0x198>
 800721a:	6823      	ldr	r3, [r4, #0]
 800721c:	055a      	lsls	r2, r3, #21
 800721e:	d407      	bmi.n	8007230 <_printf_float+0x1ec>
 8007220:	6923      	ldr	r3, [r4, #16]
 8007222:	4642      	mov	r2, r8
 8007224:	4631      	mov	r1, r6
 8007226:	4628      	mov	r0, r5
 8007228:	47b8      	blx	r7
 800722a:	3001      	adds	r0, #1
 800722c:	d12b      	bne.n	8007286 <_printf_float+0x242>
 800722e:	e764      	b.n	80070fa <_printf_float+0xb6>
 8007230:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007234:	f240 80dd 	bls.w	80073f2 <_printf_float+0x3ae>
 8007238:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800723c:	2200      	movs	r2, #0
 800723e:	2300      	movs	r3, #0
 8007240:	f7f9 fbbc 	bl	80009bc <__aeabi_dcmpeq>
 8007244:	2800      	cmp	r0, #0
 8007246:	d033      	beq.n	80072b0 <_printf_float+0x26c>
 8007248:	2301      	movs	r3, #1
 800724a:	4631      	mov	r1, r6
 800724c:	4628      	mov	r0, r5
 800724e:	4a35      	ldr	r2, [pc, #212]	; (8007324 <_printf_float+0x2e0>)
 8007250:	47b8      	blx	r7
 8007252:	3001      	adds	r0, #1
 8007254:	f43f af51 	beq.w	80070fa <_printf_float+0xb6>
 8007258:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800725c:	429a      	cmp	r2, r3
 800725e:	db02      	blt.n	8007266 <_printf_float+0x222>
 8007260:	6823      	ldr	r3, [r4, #0]
 8007262:	07d8      	lsls	r0, r3, #31
 8007264:	d50f      	bpl.n	8007286 <_printf_float+0x242>
 8007266:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800726a:	4631      	mov	r1, r6
 800726c:	4628      	mov	r0, r5
 800726e:	47b8      	blx	r7
 8007270:	3001      	adds	r0, #1
 8007272:	f43f af42 	beq.w	80070fa <_printf_float+0xb6>
 8007276:	f04f 0800 	mov.w	r8, #0
 800727a:	f104 091a 	add.w	r9, r4, #26
 800727e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007280:	3b01      	subs	r3, #1
 8007282:	4543      	cmp	r3, r8
 8007284:	dc09      	bgt.n	800729a <_printf_float+0x256>
 8007286:	6823      	ldr	r3, [r4, #0]
 8007288:	079b      	lsls	r3, r3, #30
 800728a:	f100 8102 	bmi.w	8007492 <_printf_float+0x44e>
 800728e:	68e0      	ldr	r0, [r4, #12]
 8007290:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007292:	4298      	cmp	r0, r3
 8007294:	bfb8      	it	lt
 8007296:	4618      	movlt	r0, r3
 8007298:	e731      	b.n	80070fe <_printf_float+0xba>
 800729a:	2301      	movs	r3, #1
 800729c:	464a      	mov	r2, r9
 800729e:	4631      	mov	r1, r6
 80072a0:	4628      	mov	r0, r5
 80072a2:	47b8      	blx	r7
 80072a4:	3001      	adds	r0, #1
 80072a6:	f43f af28 	beq.w	80070fa <_printf_float+0xb6>
 80072aa:	f108 0801 	add.w	r8, r8, #1
 80072ae:	e7e6      	b.n	800727e <_printf_float+0x23a>
 80072b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	dc38      	bgt.n	8007328 <_printf_float+0x2e4>
 80072b6:	2301      	movs	r3, #1
 80072b8:	4631      	mov	r1, r6
 80072ba:	4628      	mov	r0, r5
 80072bc:	4a19      	ldr	r2, [pc, #100]	; (8007324 <_printf_float+0x2e0>)
 80072be:	47b8      	blx	r7
 80072c0:	3001      	adds	r0, #1
 80072c2:	f43f af1a 	beq.w	80070fa <_printf_float+0xb6>
 80072c6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80072ca:	4313      	orrs	r3, r2
 80072cc:	d102      	bne.n	80072d4 <_printf_float+0x290>
 80072ce:	6823      	ldr	r3, [r4, #0]
 80072d0:	07d9      	lsls	r1, r3, #31
 80072d2:	d5d8      	bpl.n	8007286 <_printf_float+0x242>
 80072d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80072d8:	4631      	mov	r1, r6
 80072da:	4628      	mov	r0, r5
 80072dc:	47b8      	blx	r7
 80072de:	3001      	adds	r0, #1
 80072e0:	f43f af0b 	beq.w	80070fa <_printf_float+0xb6>
 80072e4:	f04f 0900 	mov.w	r9, #0
 80072e8:	f104 0a1a 	add.w	sl, r4, #26
 80072ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80072ee:	425b      	negs	r3, r3
 80072f0:	454b      	cmp	r3, r9
 80072f2:	dc01      	bgt.n	80072f8 <_printf_float+0x2b4>
 80072f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80072f6:	e794      	b.n	8007222 <_printf_float+0x1de>
 80072f8:	2301      	movs	r3, #1
 80072fa:	4652      	mov	r2, sl
 80072fc:	4631      	mov	r1, r6
 80072fe:	4628      	mov	r0, r5
 8007300:	47b8      	blx	r7
 8007302:	3001      	adds	r0, #1
 8007304:	f43f aef9 	beq.w	80070fa <_printf_float+0xb6>
 8007308:	f109 0901 	add.w	r9, r9, #1
 800730c:	e7ee      	b.n	80072ec <_printf_float+0x2a8>
 800730e:	bf00      	nop
 8007310:	7fefffff 	.word	0x7fefffff
 8007314:	0800b7c8 	.word	0x0800b7c8
 8007318:	0800b7cc 	.word	0x0800b7cc
 800731c:	0800b7d4 	.word	0x0800b7d4
 8007320:	0800b7d0 	.word	0x0800b7d0
 8007324:	0800b7d8 	.word	0x0800b7d8
 8007328:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800732a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800732c:	429a      	cmp	r2, r3
 800732e:	bfa8      	it	ge
 8007330:	461a      	movge	r2, r3
 8007332:	2a00      	cmp	r2, #0
 8007334:	4691      	mov	r9, r2
 8007336:	dc37      	bgt.n	80073a8 <_printf_float+0x364>
 8007338:	f04f 0b00 	mov.w	fp, #0
 800733c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007340:	f104 021a 	add.w	r2, r4, #26
 8007344:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8007348:	ebaa 0309 	sub.w	r3, sl, r9
 800734c:	455b      	cmp	r3, fp
 800734e:	dc33      	bgt.n	80073b8 <_printf_float+0x374>
 8007350:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007354:	429a      	cmp	r2, r3
 8007356:	db3b      	blt.n	80073d0 <_printf_float+0x38c>
 8007358:	6823      	ldr	r3, [r4, #0]
 800735a:	07da      	lsls	r2, r3, #31
 800735c:	d438      	bmi.n	80073d0 <_printf_float+0x38c>
 800735e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007360:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007362:	eba3 020a 	sub.w	r2, r3, sl
 8007366:	eba3 0901 	sub.w	r9, r3, r1
 800736a:	4591      	cmp	r9, r2
 800736c:	bfa8      	it	ge
 800736e:	4691      	movge	r9, r2
 8007370:	f1b9 0f00 	cmp.w	r9, #0
 8007374:	dc34      	bgt.n	80073e0 <_printf_float+0x39c>
 8007376:	f04f 0800 	mov.w	r8, #0
 800737a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800737e:	f104 0a1a 	add.w	sl, r4, #26
 8007382:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007386:	1a9b      	subs	r3, r3, r2
 8007388:	eba3 0309 	sub.w	r3, r3, r9
 800738c:	4543      	cmp	r3, r8
 800738e:	f77f af7a 	ble.w	8007286 <_printf_float+0x242>
 8007392:	2301      	movs	r3, #1
 8007394:	4652      	mov	r2, sl
 8007396:	4631      	mov	r1, r6
 8007398:	4628      	mov	r0, r5
 800739a:	47b8      	blx	r7
 800739c:	3001      	adds	r0, #1
 800739e:	f43f aeac 	beq.w	80070fa <_printf_float+0xb6>
 80073a2:	f108 0801 	add.w	r8, r8, #1
 80073a6:	e7ec      	b.n	8007382 <_printf_float+0x33e>
 80073a8:	4613      	mov	r3, r2
 80073aa:	4631      	mov	r1, r6
 80073ac:	4642      	mov	r2, r8
 80073ae:	4628      	mov	r0, r5
 80073b0:	47b8      	blx	r7
 80073b2:	3001      	adds	r0, #1
 80073b4:	d1c0      	bne.n	8007338 <_printf_float+0x2f4>
 80073b6:	e6a0      	b.n	80070fa <_printf_float+0xb6>
 80073b8:	2301      	movs	r3, #1
 80073ba:	4631      	mov	r1, r6
 80073bc:	4628      	mov	r0, r5
 80073be:	920b      	str	r2, [sp, #44]	; 0x2c
 80073c0:	47b8      	blx	r7
 80073c2:	3001      	adds	r0, #1
 80073c4:	f43f ae99 	beq.w	80070fa <_printf_float+0xb6>
 80073c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80073ca:	f10b 0b01 	add.w	fp, fp, #1
 80073ce:	e7b9      	b.n	8007344 <_printf_float+0x300>
 80073d0:	4631      	mov	r1, r6
 80073d2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80073d6:	4628      	mov	r0, r5
 80073d8:	47b8      	blx	r7
 80073da:	3001      	adds	r0, #1
 80073dc:	d1bf      	bne.n	800735e <_printf_float+0x31a>
 80073de:	e68c      	b.n	80070fa <_printf_float+0xb6>
 80073e0:	464b      	mov	r3, r9
 80073e2:	4631      	mov	r1, r6
 80073e4:	4628      	mov	r0, r5
 80073e6:	eb08 020a 	add.w	r2, r8, sl
 80073ea:	47b8      	blx	r7
 80073ec:	3001      	adds	r0, #1
 80073ee:	d1c2      	bne.n	8007376 <_printf_float+0x332>
 80073f0:	e683      	b.n	80070fa <_printf_float+0xb6>
 80073f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80073f4:	2a01      	cmp	r2, #1
 80073f6:	dc01      	bgt.n	80073fc <_printf_float+0x3b8>
 80073f8:	07db      	lsls	r3, r3, #31
 80073fa:	d537      	bpl.n	800746c <_printf_float+0x428>
 80073fc:	2301      	movs	r3, #1
 80073fe:	4642      	mov	r2, r8
 8007400:	4631      	mov	r1, r6
 8007402:	4628      	mov	r0, r5
 8007404:	47b8      	blx	r7
 8007406:	3001      	adds	r0, #1
 8007408:	f43f ae77 	beq.w	80070fa <_printf_float+0xb6>
 800740c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007410:	4631      	mov	r1, r6
 8007412:	4628      	mov	r0, r5
 8007414:	47b8      	blx	r7
 8007416:	3001      	adds	r0, #1
 8007418:	f43f ae6f 	beq.w	80070fa <_printf_float+0xb6>
 800741c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007420:	2200      	movs	r2, #0
 8007422:	2300      	movs	r3, #0
 8007424:	f7f9 faca 	bl	80009bc <__aeabi_dcmpeq>
 8007428:	b9d8      	cbnz	r0, 8007462 <_printf_float+0x41e>
 800742a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800742c:	f108 0201 	add.w	r2, r8, #1
 8007430:	3b01      	subs	r3, #1
 8007432:	4631      	mov	r1, r6
 8007434:	4628      	mov	r0, r5
 8007436:	47b8      	blx	r7
 8007438:	3001      	adds	r0, #1
 800743a:	d10e      	bne.n	800745a <_printf_float+0x416>
 800743c:	e65d      	b.n	80070fa <_printf_float+0xb6>
 800743e:	2301      	movs	r3, #1
 8007440:	464a      	mov	r2, r9
 8007442:	4631      	mov	r1, r6
 8007444:	4628      	mov	r0, r5
 8007446:	47b8      	blx	r7
 8007448:	3001      	adds	r0, #1
 800744a:	f43f ae56 	beq.w	80070fa <_printf_float+0xb6>
 800744e:	f108 0801 	add.w	r8, r8, #1
 8007452:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007454:	3b01      	subs	r3, #1
 8007456:	4543      	cmp	r3, r8
 8007458:	dcf1      	bgt.n	800743e <_printf_float+0x3fa>
 800745a:	4653      	mov	r3, sl
 800745c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007460:	e6e0      	b.n	8007224 <_printf_float+0x1e0>
 8007462:	f04f 0800 	mov.w	r8, #0
 8007466:	f104 091a 	add.w	r9, r4, #26
 800746a:	e7f2      	b.n	8007452 <_printf_float+0x40e>
 800746c:	2301      	movs	r3, #1
 800746e:	4642      	mov	r2, r8
 8007470:	e7df      	b.n	8007432 <_printf_float+0x3ee>
 8007472:	2301      	movs	r3, #1
 8007474:	464a      	mov	r2, r9
 8007476:	4631      	mov	r1, r6
 8007478:	4628      	mov	r0, r5
 800747a:	47b8      	blx	r7
 800747c:	3001      	adds	r0, #1
 800747e:	f43f ae3c 	beq.w	80070fa <_printf_float+0xb6>
 8007482:	f108 0801 	add.w	r8, r8, #1
 8007486:	68e3      	ldr	r3, [r4, #12]
 8007488:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800748a:	1a5b      	subs	r3, r3, r1
 800748c:	4543      	cmp	r3, r8
 800748e:	dcf0      	bgt.n	8007472 <_printf_float+0x42e>
 8007490:	e6fd      	b.n	800728e <_printf_float+0x24a>
 8007492:	f04f 0800 	mov.w	r8, #0
 8007496:	f104 0919 	add.w	r9, r4, #25
 800749a:	e7f4      	b.n	8007486 <_printf_float+0x442>

0800749c <_printf_common>:
 800749c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074a0:	4616      	mov	r6, r2
 80074a2:	4699      	mov	r9, r3
 80074a4:	688a      	ldr	r2, [r1, #8]
 80074a6:	690b      	ldr	r3, [r1, #16]
 80074a8:	4607      	mov	r7, r0
 80074aa:	4293      	cmp	r3, r2
 80074ac:	bfb8      	it	lt
 80074ae:	4613      	movlt	r3, r2
 80074b0:	6033      	str	r3, [r6, #0]
 80074b2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80074b6:	460c      	mov	r4, r1
 80074b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80074bc:	b10a      	cbz	r2, 80074c2 <_printf_common+0x26>
 80074be:	3301      	adds	r3, #1
 80074c0:	6033      	str	r3, [r6, #0]
 80074c2:	6823      	ldr	r3, [r4, #0]
 80074c4:	0699      	lsls	r1, r3, #26
 80074c6:	bf42      	ittt	mi
 80074c8:	6833      	ldrmi	r3, [r6, #0]
 80074ca:	3302      	addmi	r3, #2
 80074cc:	6033      	strmi	r3, [r6, #0]
 80074ce:	6825      	ldr	r5, [r4, #0]
 80074d0:	f015 0506 	ands.w	r5, r5, #6
 80074d4:	d106      	bne.n	80074e4 <_printf_common+0x48>
 80074d6:	f104 0a19 	add.w	sl, r4, #25
 80074da:	68e3      	ldr	r3, [r4, #12]
 80074dc:	6832      	ldr	r2, [r6, #0]
 80074de:	1a9b      	subs	r3, r3, r2
 80074e0:	42ab      	cmp	r3, r5
 80074e2:	dc28      	bgt.n	8007536 <_printf_common+0x9a>
 80074e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80074e8:	1e13      	subs	r3, r2, #0
 80074ea:	6822      	ldr	r2, [r4, #0]
 80074ec:	bf18      	it	ne
 80074ee:	2301      	movne	r3, #1
 80074f0:	0692      	lsls	r2, r2, #26
 80074f2:	d42d      	bmi.n	8007550 <_printf_common+0xb4>
 80074f4:	4649      	mov	r1, r9
 80074f6:	4638      	mov	r0, r7
 80074f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80074fc:	47c0      	blx	r8
 80074fe:	3001      	adds	r0, #1
 8007500:	d020      	beq.n	8007544 <_printf_common+0xa8>
 8007502:	6823      	ldr	r3, [r4, #0]
 8007504:	68e5      	ldr	r5, [r4, #12]
 8007506:	f003 0306 	and.w	r3, r3, #6
 800750a:	2b04      	cmp	r3, #4
 800750c:	bf18      	it	ne
 800750e:	2500      	movne	r5, #0
 8007510:	6832      	ldr	r2, [r6, #0]
 8007512:	f04f 0600 	mov.w	r6, #0
 8007516:	68a3      	ldr	r3, [r4, #8]
 8007518:	bf08      	it	eq
 800751a:	1aad      	subeq	r5, r5, r2
 800751c:	6922      	ldr	r2, [r4, #16]
 800751e:	bf08      	it	eq
 8007520:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007524:	4293      	cmp	r3, r2
 8007526:	bfc4      	itt	gt
 8007528:	1a9b      	subgt	r3, r3, r2
 800752a:	18ed      	addgt	r5, r5, r3
 800752c:	341a      	adds	r4, #26
 800752e:	42b5      	cmp	r5, r6
 8007530:	d11a      	bne.n	8007568 <_printf_common+0xcc>
 8007532:	2000      	movs	r0, #0
 8007534:	e008      	b.n	8007548 <_printf_common+0xac>
 8007536:	2301      	movs	r3, #1
 8007538:	4652      	mov	r2, sl
 800753a:	4649      	mov	r1, r9
 800753c:	4638      	mov	r0, r7
 800753e:	47c0      	blx	r8
 8007540:	3001      	adds	r0, #1
 8007542:	d103      	bne.n	800754c <_printf_common+0xb0>
 8007544:	f04f 30ff 	mov.w	r0, #4294967295
 8007548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800754c:	3501      	adds	r5, #1
 800754e:	e7c4      	b.n	80074da <_printf_common+0x3e>
 8007550:	2030      	movs	r0, #48	; 0x30
 8007552:	18e1      	adds	r1, r4, r3
 8007554:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007558:	1c5a      	adds	r2, r3, #1
 800755a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800755e:	4422      	add	r2, r4
 8007560:	3302      	adds	r3, #2
 8007562:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007566:	e7c5      	b.n	80074f4 <_printf_common+0x58>
 8007568:	2301      	movs	r3, #1
 800756a:	4622      	mov	r2, r4
 800756c:	4649      	mov	r1, r9
 800756e:	4638      	mov	r0, r7
 8007570:	47c0      	blx	r8
 8007572:	3001      	adds	r0, #1
 8007574:	d0e6      	beq.n	8007544 <_printf_common+0xa8>
 8007576:	3601      	adds	r6, #1
 8007578:	e7d9      	b.n	800752e <_printf_common+0x92>
	...

0800757c <_printf_i>:
 800757c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007580:	7e0f      	ldrb	r7, [r1, #24]
 8007582:	4691      	mov	r9, r2
 8007584:	2f78      	cmp	r7, #120	; 0x78
 8007586:	4680      	mov	r8, r0
 8007588:	460c      	mov	r4, r1
 800758a:	469a      	mov	sl, r3
 800758c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800758e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007592:	d807      	bhi.n	80075a4 <_printf_i+0x28>
 8007594:	2f62      	cmp	r7, #98	; 0x62
 8007596:	d80a      	bhi.n	80075ae <_printf_i+0x32>
 8007598:	2f00      	cmp	r7, #0
 800759a:	f000 80d9 	beq.w	8007750 <_printf_i+0x1d4>
 800759e:	2f58      	cmp	r7, #88	; 0x58
 80075a0:	f000 80a4 	beq.w	80076ec <_printf_i+0x170>
 80075a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80075a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80075ac:	e03a      	b.n	8007624 <_printf_i+0xa8>
 80075ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80075b2:	2b15      	cmp	r3, #21
 80075b4:	d8f6      	bhi.n	80075a4 <_printf_i+0x28>
 80075b6:	a101      	add	r1, pc, #4	; (adr r1, 80075bc <_printf_i+0x40>)
 80075b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80075bc:	08007615 	.word	0x08007615
 80075c0:	08007629 	.word	0x08007629
 80075c4:	080075a5 	.word	0x080075a5
 80075c8:	080075a5 	.word	0x080075a5
 80075cc:	080075a5 	.word	0x080075a5
 80075d0:	080075a5 	.word	0x080075a5
 80075d4:	08007629 	.word	0x08007629
 80075d8:	080075a5 	.word	0x080075a5
 80075dc:	080075a5 	.word	0x080075a5
 80075e0:	080075a5 	.word	0x080075a5
 80075e4:	080075a5 	.word	0x080075a5
 80075e8:	08007737 	.word	0x08007737
 80075ec:	08007659 	.word	0x08007659
 80075f0:	08007719 	.word	0x08007719
 80075f4:	080075a5 	.word	0x080075a5
 80075f8:	080075a5 	.word	0x080075a5
 80075fc:	08007759 	.word	0x08007759
 8007600:	080075a5 	.word	0x080075a5
 8007604:	08007659 	.word	0x08007659
 8007608:	080075a5 	.word	0x080075a5
 800760c:	080075a5 	.word	0x080075a5
 8007610:	08007721 	.word	0x08007721
 8007614:	682b      	ldr	r3, [r5, #0]
 8007616:	1d1a      	adds	r2, r3, #4
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	602a      	str	r2, [r5, #0]
 800761c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007620:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007624:	2301      	movs	r3, #1
 8007626:	e0a4      	b.n	8007772 <_printf_i+0x1f6>
 8007628:	6820      	ldr	r0, [r4, #0]
 800762a:	6829      	ldr	r1, [r5, #0]
 800762c:	0606      	lsls	r6, r0, #24
 800762e:	f101 0304 	add.w	r3, r1, #4
 8007632:	d50a      	bpl.n	800764a <_printf_i+0xce>
 8007634:	680e      	ldr	r6, [r1, #0]
 8007636:	602b      	str	r3, [r5, #0]
 8007638:	2e00      	cmp	r6, #0
 800763a:	da03      	bge.n	8007644 <_printf_i+0xc8>
 800763c:	232d      	movs	r3, #45	; 0x2d
 800763e:	4276      	negs	r6, r6
 8007640:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007644:	230a      	movs	r3, #10
 8007646:	485e      	ldr	r0, [pc, #376]	; (80077c0 <_printf_i+0x244>)
 8007648:	e019      	b.n	800767e <_printf_i+0x102>
 800764a:	680e      	ldr	r6, [r1, #0]
 800764c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007650:	602b      	str	r3, [r5, #0]
 8007652:	bf18      	it	ne
 8007654:	b236      	sxthne	r6, r6
 8007656:	e7ef      	b.n	8007638 <_printf_i+0xbc>
 8007658:	682b      	ldr	r3, [r5, #0]
 800765a:	6820      	ldr	r0, [r4, #0]
 800765c:	1d19      	adds	r1, r3, #4
 800765e:	6029      	str	r1, [r5, #0]
 8007660:	0601      	lsls	r1, r0, #24
 8007662:	d501      	bpl.n	8007668 <_printf_i+0xec>
 8007664:	681e      	ldr	r6, [r3, #0]
 8007666:	e002      	b.n	800766e <_printf_i+0xf2>
 8007668:	0646      	lsls	r6, r0, #25
 800766a:	d5fb      	bpl.n	8007664 <_printf_i+0xe8>
 800766c:	881e      	ldrh	r6, [r3, #0]
 800766e:	2f6f      	cmp	r7, #111	; 0x6f
 8007670:	bf0c      	ite	eq
 8007672:	2308      	moveq	r3, #8
 8007674:	230a      	movne	r3, #10
 8007676:	4852      	ldr	r0, [pc, #328]	; (80077c0 <_printf_i+0x244>)
 8007678:	2100      	movs	r1, #0
 800767a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800767e:	6865      	ldr	r5, [r4, #4]
 8007680:	2d00      	cmp	r5, #0
 8007682:	bfa8      	it	ge
 8007684:	6821      	ldrge	r1, [r4, #0]
 8007686:	60a5      	str	r5, [r4, #8]
 8007688:	bfa4      	itt	ge
 800768a:	f021 0104 	bicge.w	r1, r1, #4
 800768e:	6021      	strge	r1, [r4, #0]
 8007690:	b90e      	cbnz	r6, 8007696 <_printf_i+0x11a>
 8007692:	2d00      	cmp	r5, #0
 8007694:	d04d      	beq.n	8007732 <_printf_i+0x1b6>
 8007696:	4615      	mov	r5, r2
 8007698:	fbb6 f1f3 	udiv	r1, r6, r3
 800769c:	fb03 6711 	mls	r7, r3, r1, r6
 80076a0:	5dc7      	ldrb	r7, [r0, r7]
 80076a2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80076a6:	4637      	mov	r7, r6
 80076a8:	42bb      	cmp	r3, r7
 80076aa:	460e      	mov	r6, r1
 80076ac:	d9f4      	bls.n	8007698 <_printf_i+0x11c>
 80076ae:	2b08      	cmp	r3, #8
 80076b0:	d10b      	bne.n	80076ca <_printf_i+0x14e>
 80076b2:	6823      	ldr	r3, [r4, #0]
 80076b4:	07de      	lsls	r6, r3, #31
 80076b6:	d508      	bpl.n	80076ca <_printf_i+0x14e>
 80076b8:	6923      	ldr	r3, [r4, #16]
 80076ba:	6861      	ldr	r1, [r4, #4]
 80076bc:	4299      	cmp	r1, r3
 80076be:	bfde      	ittt	le
 80076c0:	2330      	movle	r3, #48	; 0x30
 80076c2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80076c6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80076ca:	1b52      	subs	r2, r2, r5
 80076cc:	6122      	str	r2, [r4, #16]
 80076ce:	464b      	mov	r3, r9
 80076d0:	4621      	mov	r1, r4
 80076d2:	4640      	mov	r0, r8
 80076d4:	f8cd a000 	str.w	sl, [sp]
 80076d8:	aa03      	add	r2, sp, #12
 80076da:	f7ff fedf 	bl	800749c <_printf_common>
 80076de:	3001      	adds	r0, #1
 80076e0:	d14c      	bne.n	800777c <_printf_i+0x200>
 80076e2:	f04f 30ff 	mov.w	r0, #4294967295
 80076e6:	b004      	add	sp, #16
 80076e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076ec:	4834      	ldr	r0, [pc, #208]	; (80077c0 <_printf_i+0x244>)
 80076ee:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80076f2:	6829      	ldr	r1, [r5, #0]
 80076f4:	6823      	ldr	r3, [r4, #0]
 80076f6:	f851 6b04 	ldr.w	r6, [r1], #4
 80076fa:	6029      	str	r1, [r5, #0]
 80076fc:	061d      	lsls	r5, r3, #24
 80076fe:	d514      	bpl.n	800772a <_printf_i+0x1ae>
 8007700:	07df      	lsls	r7, r3, #31
 8007702:	bf44      	itt	mi
 8007704:	f043 0320 	orrmi.w	r3, r3, #32
 8007708:	6023      	strmi	r3, [r4, #0]
 800770a:	b91e      	cbnz	r6, 8007714 <_printf_i+0x198>
 800770c:	6823      	ldr	r3, [r4, #0]
 800770e:	f023 0320 	bic.w	r3, r3, #32
 8007712:	6023      	str	r3, [r4, #0]
 8007714:	2310      	movs	r3, #16
 8007716:	e7af      	b.n	8007678 <_printf_i+0xfc>
 8007718:	6823      	ldr	r3, [r4, #0]
 800771a:	f043 0320 	orr.w	r3, r3, #32
 800771e:	6023      	str	r3, [r4, #0]
 8007720:	2378      	movs	r3, #120	; 0x78
 8007722:	4828      	ldr	r0, [pc, #160]	; (80077c4 <_printf_i+0x248>)
 8007724:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007728:	e7e3      	b.n	80076f2 <_printf_i+0x176>
 800772a:	0659      	lsls	r1, r3, #25
 800772c:	bf48      	it	mi
 800772e:	b2b6      	uxthmi	r6, r6
 8007730:	e7e6      	b.n	8007700 <_printf_i+0x184>
 8007732:	4615      	mov	r5, r2
 8007734:	e7bb      	b.n	80076ae <_printf_i+0x132>
 8007736:	682b      	ldr	r3, [r5, #0]
 8007738:	6826      	ldr	r6, [r4, #0]
 800773a:	1d18      	adds	r0, r3, #4
 800773c:	6961      	ldr	r1, [r4, #20]
 800773e:	6028      	str	r0, [r5, #0]
 8007740:	0635      	lsls	r5, r6, #24
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	d501      	bpl.n	800774a <_printf_i+0x1ce>
 8007746:	6019      	str	r1, [r3, #0]
 8007748:	e002      	b.n	8007750 <_printf_i+0x1d4>
 800774a:	0670      	lsls	r0, r6, #25
 800774c:	d5fb      	bpl.n	8007746 <_printf_i+0x1ca>
 800774e:	8019      	strh	r1, [r3, #0]
 8007750:	2300      	movs	r3, #0
 8007752:	4615      	mov	r5, r2
 8007754:	6123      	str	r3, [r4, #16]
 8007756:	e7ba      	b.n	80076ce <_printf_i+0x152>
 8007758:	682b      	ldr	r3, [r5, #0]
 800775a:	2100      	movs	r1, #0
 800775c:	1d1a      	adds	r2, r3, #4
 800775e:	602a      	str	r2, [r5, #0]
 8007760:	681d      	ldr	r5, [r3, #0]
 8007762:	6862      	ldr	r2, [r4, #4]
 8007764:	4628      	mov	r0, r5
 8007766:	f002 f98b 	bl	8009a80 <memchr>
 800776a:	b108      	cbz	r0, 8007770 <_printf_i+0x1f4>
 800776c:	1b40      	subs	r0, r0, r5
 800776e:	6060      	str	r0, [r4, #4]
 8007770:	6863      	ldr	r3, [r4, #4]
 8007772:	6123      	str	r3, [r4, #16]
 8007774:	2300      	movs	r3, #0
 8007776:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800777a:	e7a8      	b.n	80076ce <_printf_i+0x152>
 800777c:	462a      	mov	r2, r5
 800777e:	4649      	mov	r1, r9
 8007780:	4640      	mov	r0, r8
 8007782:	6923      	ldr	r3, [r4, #16]
 8007784:	47d0      	blx	sl
 8007786:	3001      	adds	r0, #1
 8007788:	d0ab      	beq.n	80076e2 <_printf_i+0x166>
 800778a:	6823      	ldr	r3, [r4, #0]
 800778c:	079b      	lsls	r3, r3, #30
 800778e:	d413      	bmi.n	80077b8 <_printf_i+0x23c>
 8007790:	68e0      	ldr	r0, [r4, #12]
 8007792:	9b03      	ldr	r3, [sp, #12]
 8007794:	4298      	cmp	r0, r3
 8007796:	bfb8      	it	lt
 8007798:	4618      	movlt	r0, r3
 800779a:	e7a4      	b.n	80076e6 <_printf_i+0x16a>
 800779c:	2301      	movs	r3, #1
 800779e:	4632      	mov	r2, r6
 80077a0:	4649      	mov	r1, r9
 80077a2:	4640      	mov	r0, r8
 80077a4:	47d0      	blx	sl
 80077a6:	3001      	adds	r0, #1
 80077a8:	d09b      	beq.n	80076e2 <_printf_i+0x166>
 80077aa:	3501      	adds	r5, #1
 80077ac:	68e3      	ldr	r3, [r4, #12]
 80077ae:	9903      	ldr	r1, [sp, #12]
 80077b0:	1a5b      	subs	r3, r3, r1
 80077b2:	42ab      	cmp	r3, r5
 80077b4:	dcf2      	bgt.n	800779c <_printf_i+0x220>
 80077b6:	e7eb      	b.n	8007790 <_printf_i+0x214>
 80077b8:	2500      	movs	r5, #0
 80077ba:	f104 0619 	add.w	r6, r4, #25
 80077be:	e7f5      	b.n	80077ac <_printf_i+0x230>
 80077c0:	0800b7da 	.word	0x0800b7da
 80077c4:	0800b7eb 	.word	0x0800b7eb

080077c8 <siprintf>:
 80077c8:	b40e      	push	{r1, r2, r3}
 80077ca:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80077ce:	b500      	push	{lr}
 80077d0:	b09c      	sub	sp, #112	; 0x70
 80077d2:	ab1d      	add	r3, sp, #116	; 0x74
 80077d4:	9002      	str	r0, [sp, #8]
 80077d6:	9006      	str	r0, [sp, #24]
 80077d8:	9107      	str	r1, [sp, #28]
 80077da:	9104      	str	r1, [sp, #16]
 80077dc:	4808      	ldr	r0, [pc, #32]	; (8007800 <siprintf+0x38>)
 80077de:	4909      	ldr	r1, [pc, #36]	; (8007804 <siprintf+0x3c>)
 80077e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80077e4:	9105      	str	r1, [sp, #20]
 80077e6:	6800      	ldr	r0, [r0, #0]
 80077e8:	a902      	add	r1, sp, #8
 80077ea:	9301      	str	r3, [sp, #4]
 80077ec:	f002 ff5a 	bl	800a6a4 <_svfiprintf_r>
 80077f0:	2200      	movs	r2, #0
 80077f2:	9b02      	ldr	r3, [sp, #8]
 80077f4:	701a      	strb	r2, [r3, #0]
 80077f6:	b01c      	add	sp, #112	; 0x70
 80077f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80077fc:	b003      	add	sp, #12
 80077fe:	4770      	bx	lr
 8007800:	20000190 	.word	0x20000190
 8007804:	ffff0208 	.word	0xffff0208

08007808 <strcat>:
 8007808:	4602      	mov	r2, r0
 800780a:	b510      	push	{r4, lr}
 800780c:	7814      	ldrb	r4, [r2, #0]
 800780e:	4613      	mov	r3, r2
 8007810:	3201      	adds	r2, #1
 8007812:	2c00      	cmp	r4, #0
 8007814:	d1fa      	bne.n	800780c <strcat+0x4>
 8007816:	3b01      	subs	r3, #1
 8007818:	f811 2b01 	ldrb.w	r2, [r1], #1
 800781c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007820:	2a00      	cmp	r2, #0
 8007822:	d1f9      	bne.n	8007818 <strcat+0x10>
 8007824:	bd10      	pop	{r4, pc}

08007826 <strcpy>:
 8007826:	4603      	mov	r3, r0
 8007828:	f811 2b01 	ldrb.w	r2, [r1], #1
 800782c:	f803 2b01 	strb.w	r2, [r3], #1
 8007830:	2a00      	cmp	r2, #0
 8007832:	d1f9      	bne.n	8007828 <strcpy+0x2>
 8007834:	4770      	bx	lr

08007836 <sulp>:
 8007836:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800783a:	460f      	mov	r7, r1
 800783c:	4690      	mov	r8, r2
 800783e:	f002 fc9d 	bl	800a17c <__ulp>
 8007842:	4604      	mov	r4, r0
 8007844:	460d      	mov	r5, r1
 8007846:	f1b8 0f00 	cmp.w	r8, #0
 800784a:	d011      	beq.n	8007870 <sulp+0x3a>
 800784c:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8007850:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007854:	2b00      	cmp	r3, #0
 8007856:	dd0b      	ble.n	8007870 <sulp+0x3a>
 8007858:	2400      	movs	r4, #0
 800785a:	051b      	lsls	r3, r3, #20
 800785c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007860:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007864:	4622      	mov	r2, r4
 8007866:	462b      	mov	r3, r5
 8007868:	f7f8 fe40 	bl	80004ec <__aeabi_dmul>
 800786c:	4604      	mov	r4, r0
 800786e:	460d      	mov	r5, r1
 8007870:	4620      	mov	r0, r4
 8007872:	4629      	mov	r1, r5
 8007874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007878 <_strtod_l>:
 8007878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800787c:	469b      	mov	fp, r3
 800787e:	2300      	movs	r3, #0
 8007880:	b09f      	sub	sp, #124	; 0x7c
 8007882:	931a      	str	r3, [sp, #104]	; 0x68
 8007884:	4b9e      	ldr	r3, [pc, #632]	; (8007b00 <_strtod_l+0x288>)
 8007886:	4682      	mov	sl, r0
 8007888:	681f      	ldr	r7, [r3, #0]
 800788a:	460e      	mov	r6, r1
 800788c:	4638      	mov	r0, r7
 800788e:	9215      	str	r2, [sp, #84]	; 0x54
 8007890:	f7f8 fc68 	bl	8000164 <strlen>
 8007894:	f04f 0800 	mov.w	r8, #0
 8007898:	4604      	mov	r4, r0
 800789a:	f04f 0900 	mov.w	r9, #0
 800789e:	9619      	str	r6, [sp, #100]	; 0x64
 80078a0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80078a2:	781a      	ldrb	r2, [r3, #0]
 80078a4:	2a2b      	cmp	r2, #43	; 0x2b
 80078a6:	d04c      	beq.n	8007942 <_strtod_l+0xca>
 80078a8:	d83a      	bhi.n	8007920 <_strtod_l+0xa8>
 80078aa:	2a0d      	cmp	r2, #13
 80078ac:	d833      	bhi.n	8007916 <_strtod_l+0x9e>
 80078ae:	2a08      	cmp	r2, #8
 80078b0:	d833      	bhi.n	800791a <_strtod_l+0xa2>
 80078b2:	2a00      	cmp	r2, #0
 80078b4:	d03d      	beq.n	8007932 <_strtod_l+0xba>
 80078b6:	2300      	movs	r3, #0
 80078b8:	930a      	str	r3, [sp, #40]	; 0x28
 80078ba:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80078bc:	782b      	ldrb	r3, [r5, #0]
 80078be:	2b30      	cmp	r3, #48	; 0x30
 80078c0:	f040 80aa 	bne.w	8007a18 <_strtod_l+0x1a0>
 80078c4:	786b      	ldrb	r3, [r5, #1]
 80078c6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80078ca:	2b58      	cmp	r3, #88	; 0x58
 80078cc:	d166      	bne.n	800799c <_strtod_l+0x124>
 80078ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078d0:	4650      	mov	r0, sl
 80078d2:	9301      	str	r3, [sp, #4]
 80078d4:	ab1a      	add	r3, sp, #104	; 0x68
 80078d6:	9300      	str	r3, [sp, #0]
 80078d8:	4a8a      	ldr	r2, [pc, #552]	; (8007b04 <_strtod_l+0x28c>)
 80078da:	f8cd b008 	str.w	fp, [sp, #8]
 80078de:	ab1b      	add	r3, sp, #108	; 0x6c
 80078e0:	a919      	add	r1, sp, #100	; 0x64
 80078e2:	f001 fdb1 	bl	8009448 <__gethex>
 80078e6:	f010 0607 	ands.w	r6, r0, #7
 80078ea:	4604      	mov	r4, r0
 80078ec:	d005      	beq.n	80078fa <_strtod_l+0x82>
 80078ee:	2e06      	cmp	r6, #6
 80078f0:	d129      	bne.n	8007946 <_strtod_l+0xce>
 80078f2:	2300      	movs	r3, #0
 80078f4:	3501      	adds	r5, #1
 80078f6:	9519      	str	r5, [sp, #100]	; 0x64
 80078f8:	930a      	str	r3, [sp, #40]	; 0x28
 80078fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	f040 858a 	bne.w	8008416 <_strtod_l+0xb9e>
 8007902:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007904:	b1d3      	cbz	r3, 800793c <_strtod_l+0xc4>
 8007906:	4642      	mov	r2, r8
 8007908:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800790c:	4610      	mov	r0, r2
 800790e:	4619      	mov	r1, r3
 8007910:	b01f      	add	sp, #124	; 0x7c
 8007912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007916:	2a20      	cmp	r2, #32
 8007918:	d1cd      	bne.n	80078b6 <_strtod_l+0x3e>
 800791a:	3301      	adds	r3, #1
 800791c:	9319      	str	r3, [sp, #100]	; 0x64
 800791e:	e7bf      	b.n	80078a0 <_strtod_l+0x28>
 8007920:	2a2d      	cmp	r2, #45	; 0x2d
 8007922:	d1c8      	bne.n	80078b6 <_strtod_l+0x3e>
 8007924:	2201      	movs	r2, #1
 8007926:	920a      	str	r2, [sp, #40]	; 0x28
 8007928:	1c5a      	adds	r2, r3, #1
 800792a:	9219      	str	r2, [sp, #100]	; 0x64
 800792c:	785b      	ldrb	r3, [r3, #1]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d1c3      	bne.n	80078ba <_strtod_l+0x42>
 8007932:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007934:	9619      	str	r6, [sp, #100]	; 0x64
 8007936:	2b00      	cmp	r3, #0
 8007938:	f040 856b 	bne.w	8008412 <_strtod_l+0xb9a>
 800793c:	4642      	mov	r2, r8
 800793e:	464b      	mov	r3, r9
 8007940:	e7e4      	b.n	800790c <_strtod_l+0x94>
 8007942:	2200      	movs	r2, #0
 8007944:	e7ef      	b.n	8007926 <_strtod_l+0xae>
 8007946:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007948:	b13a      	cbz	r2, 800795a <_strtod_l+0xe2>
 800794a:	2135      	movs	r1, #53	; 0x35
 800794c:	a81c      	add	r0, sp, #112	; 0x70
 800794e:	f002 fd19 	bl	800a384 <__copybits>
 8007952:	4650      	mov	r0, sl
 8007954:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007956:	f002 f8e1 	bl	8009b1c <_Bfree>
 800795a:	3e01      	subs	r6, #1
 800795c:	2e04      	cmp	r6, #4
 800795e:	d806      	bhi.n	800796e <_strtod_l+0xf6>
 8007960:	e8df f006 	tbb	[pc, r6]
 8007964:	1714030a 	.word	0x1714030a
 8007968:	0a          	.byte	0x0a
 8007969:	00          	.byte	0x00
 800796a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800796e:	0721      	lsls	r1, r4, #28
 8007970:	d5c3      	bpl.n	80078fa <_strtod_l+0x82>
 8007972:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8007976:	e7c0      	b.n	80078fa <_strtod_l+0x82>
 8007978:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800797a:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 800797e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007982:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007986:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800798a:	e7f0      	b.n	800796e <_strtod_l+0xf6>
 800798c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8007b08 <_strtod_l+0x290>
 8007990:	e7ed      	b.n	800796e <_strtod_l+0xf6>
 8007992:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8007996:	f04f 38ff 	mov.w	r8, #4294967295
 800799a:	e7e8      	b.n	800796e <_strtod_l+0xf6>
 800799c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800799e:	1c5a      	adds	r2, r3, #1
 80079a0:	9219      	str	r2, [sp, #100]	; 0x64
 80079a2:	785b      	ldrb	r3, [r3, #1]
 80079a4:	2b30      	cmp	r3, #48	; 0x30
 80079a6:	d0f9      	beq.n	800799c <_strtod_l+0x124>
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d0a6      	beq.n	80078fa <_strtod_l+0x82>
 80079ac:	2301      	movs	r3, #1
 80079ae:	9307      	str	r3, [sp, #28]
 80079b0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80079b2:	220a      	movs	r2, #10
 80079b4:	9308      	str	r3, [sp, #32]
 80079b6:	2300      	movs	r3, #0
 80079b8:	469b      	mov	fp, r3
 80079ba:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80079be:	9819      	ldr	r0, [sp, #100]	; 0x64
 80079c0:	7805      	ldrb	r5, [r0, #0]
 80079c2:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 80079c6:	b2d9      	uxtb	r1, r3
 80079c8:	2909      	cmp	r1, #9
 80079ca:	d927      	bls.n	8007a1c <_strtod_l+0x1a4>
 80079cc:	4622      	mov	r2, r4
 80079ce:	4639      	mov	r1, r7
 80079d0:	f003 f8d6 	bl	800ab80 <strncmp>
 80079d4:	2800      	cmp	r0, #0
 80079d6:	d033      	beq.n	8007a40 <_strtod_l+0x1c8>
 80079d8:	2000      	movs	r0, #0
 80079da:	462a      	mov	r2, r5
 80079dc:	465c      	mov	r4, fp
 80079de:	4603      	mov	r3, r0
 80079e0:	9004      	str	r0, [sp, #16]
 80079e2:	2a65      	cmp	r2, #101	; 0x65
 80079e4:	d001      	beq.n	80079ea <_strtod_l+0x172>
 80079e6:	2a45      	cmp	r2, #69	; 0x45
 80079e8:	d114      	bne.n	8007a14 <_strtod_l+0x19c>
 80079ea:	b91c      	cbnz	r4, 80079f4 <_strtod_l+0x17c>
 80079ec:	9a07      	ldr	r2, [sp, #28]
 80079ee:	4302      	orrs	r2, r0
 80079f0:	d09f      	beq.n	8007932 <_strtod_l+0xba>
 80079f2:	2400      	movs	r4, #0
 80079f4:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80079f6:	1c72      	adds	r2, r6, #1
 80079f8:	9219      	str	r2, [sp, #100]	; 0x64
 80079fa:	7872      	ldrb	r2, [r6, #1]
 80079fc:	2a2b      	cmp	r2, #43	; 0x2b
 80079fe:	d079      	beq.n	8007af4 <_strtod_l+0x27c>
 8007a00:	2a2d      	cmp	r2, #45	; 0x2d
 8007a02:	f000 8083 	beq.w	8007b0c <_strtod_l+0x294>
 8007a06:	2700      	movs	r7, #0
 8007a08:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007a0c:	2909      	cmp	r1, #9
 8007a0e:	f240 8083 	bls.w	8007b18 <_strtod_l+0x2a0>
 8007a12:	9619      	str	r6, [sp, #100]	; 0x64
 8007a14:	2500      	movs	r5, #0
 8007a16:	e09f      	b.n	8007b58 <_strtod_l+0x2e0>
 8007a18:	2300      	movs	r3, #0
 8007a1a:	e7c8      	b.n	80079ae <_strtod_l+0x136>
 8007a1c:	f1bb 0f08 	cmp.w	fp, #8
 8007a20:	bfd5      	itete	le
 8007a22:	9906      	ldrle	r1, [sp, #24]
 8007a24:	9905      	ldrgt	r1, [sp, #20]
 8007a26:	fb02 3301 	mlale	r3, r2, r1, r3
 8007a2a:	fb02 3301 	mlagt	r3, r2, r1, r3
 8007a2e:	f100 0001 	add.w	r0, r0, #1
 8007a32:	bfd4      	ite	le
 8007a34:	9306      	strle	r3, [sp, #24]
 8007a36:	9305      	strgt	r3, [sp, #20]
 8007a38:	f10b 0b01 	add.w	fp, fp, #1
 8007a3c:	9019      	str	r0, [sp, #100]	; 0x64
 8007a3e:	e7be      	b.n	80079be <_strtod_l+0x146>
 8007a40:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007a42:	191a      	adds	r2, r3, r4
 8007a44:	9219      	str	r2, [sp, #100]	; 0x64
 8007a46:	5d1a      	ldrb	r2, [r3, r4]
 8007a48:	f1bb 0f00 	cmp.w	fp, #0
 8007a4c:	d036      	beq.n	8007abc <_strtod_l+0x244>
 8007a4e:	465c      	mov	r4, fp
 8007a50:	9004      	str	r0, [sp, #16]
 8007a52:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007a56:	2b09      	cmp	r3, #9
 8007a58:	d912      	bls.n	8007a80 <_strtod_l+0x208>
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	e7c1      	b.n	80079e2 <_strtod_l+0x16a>
 8007a5e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007a60:	3001      	adds	r0, #1
 8007a62:	1c5a      	adds	r2, r3, #1
 8007a64:	9219      	str	r2, [sp, #100]	; 0x64
 8007a66:	785a      	ldrb	r2, [r3, #1]
 8007a68:	2a30      	cmp	r2, #48	; 0x30
 8007a6a:	d0f8      	beq.n	8007a5e <_strtod_l+0x1e6>
 8007a6c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007a70:	2b08      	cmp	r3, #8
 8007a72:	f200 84d5 	bhi.w	8008420 <_strtod_l+0xba8>
 8007a76:	9004      	str	r0, [sp, #16]
 8007a78:	2000      	movs	r0, #0
 8007a7a:	4604      	mov	r4, r0
 8007a7c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007a7e:	9308      	str	r3, [sp, #32]
 8007a80:	3a30      	subs	r2, #48	; 0x30
 8007a82:	f100 0301 	add.w	r3, r0, #1
 8007a86:	d013      	beq.n	8007ab0 <_strtod_l+0x238>
 8007a88:	9904      	ldr	r1, [sp, #16]
 8007a8a:	1905      	adds	r5, r0, r4
 8007a8c:	4419      	add	r1, r3
 8007a8e:	9104      	str	r1, [sp, #16]
 8007a90:	4623      	mov	r3, r4
 8007a92:	210a      	movs	r1, #10
 8007a94:	42ab      	cmp	r3, r5
 8007a96:	d113      	bne.n	8007ac0 <_strtod_l+0x248>
 8007a98:	1823      	adds	r3, r4, r0
 8007a9a:	2b08      	cmp	r3, #8
 8007a9c:	f104 0401 	add.w	r4, r4, #1
 8007aa0:	4404      	add	r4, r0
 8007aa2:	dc1b      	bgt.n	8007adc <_strtod_l+0x264>
 8007aa4:	230a      	movs	r3, #10
 8007aa6:	9906      	ldr	r1, [sp, #24]
 8007aa8:	fb03 2301 	mla	r3, r3, r1, r2
 8007aac:	9306      	str	r3, [sp, #24]
 8007aae:	2300      	movs	r3, #0
 8007ab0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	1c51      	adds	r1, r2, #1
 8007ab6:	9119      	str	r1, [sp, #100]	; 0x64
 8007ab8:	7852      	ldrb	r2, [r2, #1]
 8007aba:	e7ca      	b.n	8007a52 <_strtod_l+0x1da>
 8007abc:	4658      	mov	r0, fp
 8007abe:	e7d3      	b.n	8007a68 <_strtod_l+0x1f0>
 8007ac0:	2b08      	cmp	r3, #8
 8007ac2:	dc04      	bgt.n	8007ace <_strtod_l+0x256>
 8007ac4:	9f06      	ldr	r7, [sp, #24]
 8007ac6:	434f      	muls	r7, r1
 8007ac8:	9706      	str	r7, [sp, #24]
 8007aca:	3301      	adds	r3, #1
 8007acc:	e7e2      	b.n	8007a94 <_strtod_l+0x21c>
 8007ace:	1c5f      	adds	r7, r3, #1
 8007ad0:	2f10      	cmp	r7, #16
 8007ad2:	bfde      	ittt	le
 8007ad4:	9f05      	ldrle	r7, [sp, #20]
 8007ad6:	434f      	mulle	r7, r1
 8007ad8:	9705      	strle	r7, [sp, #20]
 8007ada:	e7f6      	b.n	8007aca <_strtod_l+0x252>
 8007adc:	2c10      	cmp	r4, #16
 8007ade:	bfdf      	itttt	le
 8007ae0:	230a      	movle	r3, #10
 8007ae2:	9905      	ldrle	r1, [sp, #20]
 8007ae4:	fb03 2301 	mlale	r3, r3, r1, r2
 8007ae8:	9305      	strle	r3, [sp, #20]
 8007aea:	e7e0      	b.n	8007aae <_strtod_l+0x236>
 8007aec:	2300      	movs	r3, #0
 8007aee:	9304      	str	r3, [sp, #16]
 8007af0:	2301      	movs	r3, #1
 8007af2:	e77b      	b.n	80079ec <_strtod_l+0x174>
 8007af4:	2700      	movs	r7, #0
 8007af6:	1cb2      	adds	r2, r6, #2
 8007af8:	9219      	str	r2, [sp, #100]	; 0x64
 8007afa:	78b2      	ldrb	r2, [r6, #2]
 8007afc:	e784      	b.n	8007a08 <_strtod_l+0x190>
 8007afe:	bf00      	nop
 8007b00:	0800bae0 	.word	0x0800bae0
 8007b04:	0800b7fc 	.word	0x0800b7fc
 8007b08:	7ff00000 	.word	0x7ff00000
 8007b0c:	2701      	movs	r7, #1
 8007b0e:	e7f2      	b.n	8007af6 <_strtod_l+0x27e>
 8007b10:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007b12:	1c51      	adds	r1, r2, #1
 8007b14:	9119      	str	r1, [sp, #100]	; 0x64
 8007b16:	7852      	ldrb	r2, [r2, #1]
 8007b18:	2a30      	cmp	r2, #48	; 0x30
 8007b1a:	d0f9      	beq.n	8007b10 <_strtod_l+0x298>
 8007b1c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007b20:	2908      	cmp	r1, #8
 8007b22:	f63f af77 	bhi.w	8007a14 <_strtod_l+0x19c>
 8007b26:	f04f 0e0a 	mov.w	lr, #10
 8007b2a:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8007b2e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007b30:	9209      	str	r2, [sp, #36]	; 0x24
 8007b32:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007b34:	1c51      	adds	r1, r2, #1
 8007b36:	9119      	str	r1, [sp, #100]	; 0x64
 8007b38:	7852      	ldrb	r2, [r2, #1]
 8007b3a:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8007b3e:	2d09      	cmp	r5, #9
 8007b40:	d935      	bls.n	8007bae <_strtod_l+0x336>
 8007b42:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007b44:	1b49      	subs	r1, r1, r5
 8007b46:	2908      	cmp	r1, #8
 8007b48:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8007b4c:	dc02      	bgt.n	8007b54 <_strtod_l+0x2dc>
 8007b4e:	4565      	cmp	r5, ip
 8007b50:	bfa8      	it	ge
 8007b52:	4665      	movge	r5, ip
 8007b54:	b107      	cbz	r7, 8007b58 <_strtod_l+0x2e0>
 8007b56:	426d      	negs	r5, r5
 8007b58:	2c00      	cmp	r4, #0
 8007b5a:	d14c      	bne.n	8007bf6 <_strtod_l+0x37e>
 8007b5c:	9907      	ldr	r1, [sp, #28]
 8007b5e:	4301      	orrs	r1, r0
 8007b60:	f47f aecb 	bne.w	80078fa <_strtod_l+0x82>
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	f47f aee4 	bne.w	8007932 <_strtod_l+0xba>
 8007b6a:	2a69      	cmp	r2, #105	; 0x69
 8007b6c:	d026      	beq.n	8007bbc <_strtod_l+0x344>
 8007b6e:	dc23      	bgt.n	8007bb8 <_strtod_l+0x340>
 8007b70:	2a49      	cmp	r2, #73	; 0x49
 8007b72:	d023      	beq.n	8007bbc <_strtod_l+0x344>
 8007b74:	2a4e      	cmp	r2, #78	; 0x4e
 8007b76:	f47f aedc 	bne.w	8007932 <_strtod_l+0xba>
 8007b7a:	499d      	ldr	r1, [pc, #628]	; (8007df0 <_strtod_l+0x578>)
 8007b7c:	a819      	add	r0, sp, #100	; 0x64
 8007b7e:	f001 feb1 	bl	80098e4 <__match>
 8007b82:	2800      	cmp	r0, #0
 8007b84:	f43f aed5 	beq.w	8007932 <_strtod_l+0xba>
 8007b88:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007b8a:	781b      	ldrb	r3, [r3, #0]
 8007b8c:	2b28      	cmp	r3, #40	; 0x28
 8007b8e:	d12c      	bne.n	8007bea <_strtod_l+0x372>
 8007b90:	4998      	ldr	r1, [pc, #608]	; (8007df4 <_strtod_l+0x57c>)
 8007b92:	aa1c      	add	r2, sp, #112	; 0x70
 8007b94:	a819      	add	r0, sp, #100	; 0x64
 8007b96:	f001 feb9 	bl	800990c <__hexnan>
 8007b9a:	2805      	cmp	r0, #5
 8007b9c:	d125      	bne.n	8007bea <_strtod_l+0x372>
 8007b9e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007ba0:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8007ba4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007ba8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8007bac:	e6a5      	b.n	80078fa <_strtod_l+0x82>
 8007bae:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8007bb2:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8007bb6:	e7bc      	b.n	8007b32 <_strtod_l+0x2ba>
 8007bb8:	2a6e      	cmp	r2, #110	; 0x6e
 8007bba:	e7dc      	b.n	8007b76 <_strtod_l+0x2fe>
 8007bbc:	498e      	ldr	r1, [pc, #568]	; (8007df8 <_strtod_l+0x580>)
 8007bbe:	a819      	add	r0, sp, #100	; 0x64
 8007bc0:	f001 fe90 	bl	80098e4 <__match>
 8007bc4:	2800      	cmp	r0, #0
 8007bc6:	f43f aeb4 	beq.w	8007932 <_strtod_l+0xba>
 8007bca:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007bcc:	498b      	ldr	r1, [pc, #556]	; (8007dfc <_strtod_l+0x584>)
 8007bce:	3b01      	subs	r3, #1
 8007bd0:	a819      	add	r0, sp, #100	; 0x64
 8007bd2:	9319      	str	r3, [sp, #100]	; 0x64
 8007bd4:	f001 fe86 	bl	80098e4 <__match>
 8007bd8:	b910      	cbnz	r0, 8007be0 <_strtod_l+0x368>
 8007bda:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007bdc:	3301      	adds	r3, #1
 8007bde:	9319      	str	r3, [sp, #100]	; 0x64
 8007be0:	f04f 0800 	mov.w	r8, #0
 8007be4:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8007e00 <_strtod_l+0x588>
 8007be8:	e687      	b.n	80078fa <_strtod_l+0x82>
 8007bea:	4886      	ldr	r0, [pc, #536]	; (8007e04 <_strtod_l+0x58c>)
 8007bec:	f002 ffb2 	bl	800ab54 <nan>
 8007bf0:	4680      	mov	r8, r0
 8007bf2:	4689      	mov	r9, r1
 8007bf4:	e681      	b.n	80078fa <_strtod_l+0x82>
 8007bf6:	9b04      	ldr	r3, [sp, #16]
 8007bf8:	f1bb 0f00 	cmp.w	fp, #0
 8007bfc:	bf08      	it	eq
 8007bfe:	46a3      	moveq	fp, r4
 8007c00:	1aeb      	subs	r3, r5, r3
 8007c02:	2c10      	cmp	r4, #16
 8007c04:	9806      	ldr	r0, [sp, #24]
 8007c06:	4626      	mov	r6, r4
 8007c08:	9307      	str	r3, [sp, #28]
 8007c0a:	bfa8      	it	ge
 8007c0c:	2610      	movge	r6, #16
 8007c0e:	f7f8 fbf3 	bl	80003f8 <__aeabi_ui2d>
 8007c12:	2c09      	cmp	r4, #9
 8007c14:	4680      	mov	r8, r0
 8007c16:	4689      	mov	r9, r1
 8007c18:	dd13      	ble.n	8007c42 <_strtod_l+0x3ca>
 8007c1a:	4b7b      	ldr	r3, [pc, #492]	; (8007e08 <_strtod_l+0x590>)
 8007c1c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007c20:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007c24:	f7f8 fc62 	bl	80004ec <__aeabi_dmul>
 8007c28:	4680      	mov	r8, r0
 8007c2a:	9805      	ldr	r0, [sp, #20]
 8007c2c:	4689      	mov	r9, r1
 8007c2e:	f7f8 fbe3 	bl	80003f8 <__aeabi_ui2d>
 8007c32:	4602      	mov	r2, r0
 8007c34:	460b      	mov	r3, r1
 8007c36:	4640      	mov	r0, r8
 8007c38:	4649      	mov	r1, r9
 8007c3a:	f7f8 faa1 	bl	8000180 <__adddf3>
 8007c3e:	4680      	mov	r8, r0
 8007c40:	4689      	mov	r9, r1
 8007c42:	2c0f      	cmp	r4, #15
 8007c44:	dc36      	bgt.n	8007cb4 <_strtod_l+0x43c>
 8007c46:	9b07      	ldr	r3, [sp, #28]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	f43f ae56 	beq.w	80078fa <_strtod_l+0x82>
 8007c4e:	dd22      	ble.n	8007c96 <_strtod_l+0x41e>
 8007c50:	2b16      	cmp	r3, #22
 8007c52:	dc09      	bgt.n	8007c68 <_strtod_l+0x3f0>
 8007c54:	496c      	ldr	r1, [pc, #432]	; (8007e08 <_strtod_l+0x590>)
 8007c56:	4642      	mov	r2, r8
 8007c58:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007c5c:	464b      	mov	r3, r9
 8007c5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c62:	f7f8 fc43 	bl	80004ec <__aeabi_dmul>
 8007c66:	e7c3      	b.n	8007bf0 <_strtod_l+0x378>
 8007c68:	9a07      	ldr	r2, [sp, #28]
 8007c6a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	db20      	blt.n	8007cb4 <_strtod_l+0x43c>
 8007c72:	4d65      	ldr	r5, [pc, #404]	; (8007e08 <_strtod_l+0x590>)
 8007c74:	f1c4 040f 	rsb	r4, r4, #15
 8007c78:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8007c7c:	4642      	mov	r2, r8
 8007c7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c82:	464b      	mov	r3, r9
 8007c84:	f7f8 fc32 	bl	80004ec <__aeabi_dmul>
 8007c88:	9b07      	ldr	r3, [sp, #28]
 8007c8a:	1b1c      	subs	r4, r3, r4
 8007c8c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8007c90:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007c94:	e7e5      	b.n	8007c62 <_strtod_l+0x3ea>
 8007c96:	9b07      	ldr	r3, [sp, #28]
 8007c98:	3316      	adds	r3, #22
 8007c9a:	db0b      	blt.n	8007cb4 <_strtod_l+0x43c>
 8007c9c:	9b04      	ldr	r3, [sp, #16]
 8007c9e:	4640      	mov	r0, r8
 8007ca0:	1b5d      	subs	r5, r3, r5
 8007ca2:	4b59      	ldr	r3, [pc, #356]	; (8007e08 <_strtod_l+0x590>)
 8007ca4:	4649      	mov	r1, r9
 8007ca6:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8007caa:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007cae:	f7f8 fd47 	bl	8000740 <__aeabi_ddiv>
 8007cb2:	e79d      	b.n	8007bf0 <_strtod_l+0x378>
 8007cb4:	9b07      	ldr	r3, [sp, #28]
 8007cb6:	1ba6      	subs	r6, r4, r6
 8007cb8:	441e      	add	r6, r3
 8007cba:	2e00      	cmp	r6, #0
 8007cbc:	dd74      	ble.n	8007da8 <_strtod_l+0x530>
 8007cbe:	f016 030f 	ands.w	r3, r6, #15
 8007cc2:	d00a      	beq.n	8007cda <_strtod_l+0x462>
 8007cc4:	4950      	ldr	r1, [pc, #320]	; (8007e08 <_strtod_l+0x590>)
 8007cc6:	4642      	mov	r2, r8
 8007cc8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007ccc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007cd0:	464b      	mov	r3, r9
 8007cd2:	f7f8 fc0b 	bl	80004ec <__aeabi_dmul>
 8007cd6:	4680      	mov	r8, r0
 8007cd8:	4689      	mov	r9, r1
 8007cda:	f036 060f 	bics.w	r6, r6, #15
 8007cde:	d052      	beq.n	8007d86 <_strtod_l+0x50e>
 8007ce0:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8007ce4:	dd27      	ble.n	8007d36 <_strtod_l+0x4be>
 8007ce6:	f04f 0b00 	mov.w	fp, #0
 8007cea:	f8cd b010 	str.w	fp, [sp, #16]
 8007cee:	f8cd b020 	str.w	fp, [sp, #32]
 8007cf2:	f8cd b018 	str.w	fp, [sp, #24]
 8007cf6:	2322      	movs	r3, #34	; 0x22
 8007cf8:	f04f 0800 	mov.w	r8, #0
 8007cfc:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8007e00 <_strtod_l+0x588>
 8007d00:	f8ca 3000 	str.w	r3, [sl]
 8007d04:	9b08      	ldr	r3, [sp, #32]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	f43f adf7 	beq.w	80078fa <_strtod_l+0x82>
 8007d0c:	4650      	mov	r0, sl
 8007d0e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007d10:	f001 ff04 	bl	8009b1c <_Bfree>
 8007d14:	4650      	mov	r0, sl
 8007d16:	9906      	ldr	r1, [sp, #24]
 8007d18:	f001 ff00 	bl	8009b1c <_Bfree>
 8007d1c:	4650      	mov	r0, sl
 8007d1e:	9904      	ldr	r1, [sp, #16]
 8007d20:	f001 fefc 	bl	8009b1c <_Bfree>
 8007d24:	4650      	mov	r0, sl
 8007d26:	9908      	ldr	r1, [sp, #32]
 8007d28:	f001 fef8 	bl	8009b1c <_Bfree>
 8007d2c:	4659      	mov	r1, fp
 8007d2e:	4650      	mov	r0, sl
 8007d30:	f001 fef4 	bl	8009b1c <_Bfree>
 8007d34:	e5e1      	b.n	80078fa <_strtod_l+0x82>
 8007d36:	4b35      	ldr	r3, [pc, #212]	; (8007e0c <_strtod_l+0x594>)
 8007d38:	4640      	mov	r0, r8
 8007d3a:	9305      	str	r3, [sp, #20]
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	4649      	mov	r1, r9
 8007d40:	461f      	mov	r7, r3
 8007d42:	1136      	asrs	r6, r6, #4
 8007d44:	2e01      	cmp	r6, #1
 8007d46:	dc21      	bgt.n	8007d8c <_strtod_l+0x514>
 8007d48:	b10b      	cbz	r3, 8007d4e <_strtod_l+0x4d6>
 8007d4a:	4680      	mov	r8, r0
 8007d4c:	4689      	mov	r9, r1
 8007d4e:	4b2f      	ldr	r3, [pc, #188]	; (8007e0c <_strtod_l+0x594>)
 8007d50:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8007d54:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007d58:	4642      	mov	r2, r8
 8007d5a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007d5e:	464b      	mov	r3, r9
 8007d60:	f7f8 fbc4 	bl	80004ec <__aeabi_dmul>
 8007d64:	4b26      	ldr	r3, [pc, #152]	; (8007e00 <_strtod_l+0x588>)
 8007d66:	460a      	mov	r2, r1
 8007d68:	400b      	ands	r3, r1
 8007d6a:	4929      	ldr	r1, [pc, #164]	; (8007e10 <_strtod_l+0x598>)
 8007d6c:	4680      	mov	r8, r0
 8007d6e:	428b      	cmp	r3, r1
 8007d70:	d8b9      	bhi.n	8007ce6 <_strtod_l+0x46e>
 8007d72:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007d76:	428b      	cmp	r3, r1
 8007d78:	bf86      	itte	hi
 8007d7a:	f04f 38ff 	movhi.w	r8, #4294967295
 8007d7e:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8007e14 <_strtod_l+0x59c>
 8007d82:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8007d86:	2300      	movs	r3, #0
 8007d88:	9305      	str	r3, [sp, #20]
 8007d8a:	e07f      	b.n	8007e8c <_strtod_l+0x614>
 8007d8c:	07f2      	lsls	r2, r6, #31
 8007d8e:	d505      	bpl.n	8007d9c <_strtod_l+0x524>
 8007d90:	9b05      	ldr	r3, [sp, #20]
 8007d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d96:	f7f8 fba9 	bl	80004ec <__aeabi_dmul>
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	9a05      	ldr	r2, [sp, #20]
 8007d9e:	3701      	adds	r7, #1
 8007da0:	3208      	adds	r2, #8
 8007da2:	1076      	asrs	r6, r6, #1
 8007da4:	9205      	str	r2, [sp, #20]
 8007da6:	e7cd      	b.n	8007d44 <_strtod_l+0x4cc>
 8007da8:	d0ed      	beq.n	8007d86 <_strtod_l+0x50e>
 8007daa:	4276      	negs	r6, r6
 8007dac:	f016 020f 	ands.w	r2, r6, #15
 8007db0:	d00a      	beq.n	8007dc8 <_strtod_l+0x550>
 8007db2:	4b15      	ldr	r3, [pc, #84]	; (8007e08 <_strtod_l+0x590>)
 8007db4:	4640      	mov	r0, r8
 8007db6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007dba:	4649      	mov	r1, r9
 8007dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dc0:	f7f8 fcbe 	bl	8000740 <__aeabi_ddiv>
 8007dc4:	4680      	mov	r8, r0
 8007dc6:	4689      	mov	r9, r1
 8007dc8:	1136      	asrs	r6, r6, #4
 8007dca:	d0dc      	beq.n	8007d86 <_strtod_l+0x50e>
 8007dcc:	2e1f      	cmp	r6, #31
 8007dce:	dd23      	ble.n	8007e18 <_strtod_l+0x5a0>
 8007dd0:	f04f 0b00 	mov.w	fp, #0
 8007dd4:	f8cd b010 	str.w	fp, [sp, #16]
 8007dd8:	f8cd b020 	str.w	fp, [sp, #32]
 8007ddc:	f8cd b018 	str.w	fp, [sp, #24]
 8007de0:	2322      	movs	r3, #34	; 0x22
 8007de2:	f04f 0800 	mov.w	r8, #0
 8007de6:	f04f 0900 	mov.w	r9, #0
 8007dea:	f8ca 3000 	str.w	r3, [sl]
 8007dee:	e789      	b.n	8007d04 <_strtod_l+0x48c>
 8007df0:	0800b7d5 	.word	0x0800b7d5
 8007df4:	0800b810 	.word	0x0800b810
 8007df8:	0800b7cd 	.word	0x0800b7cd
 8007dfc:	0800ba04 	.word	0x0800ba04
 8007e00:	7ff00000 	.word	0x7ff00000
 8007e04:	0800b8ff 	.word	0x0800b8ff
 8007e08:	0800bb78 	.word	0x0800bb78
 8007e0c:	0800bb50 	.word	0x0800bb50
 8007e10:	7ca00000 	.word	0x7ca00000
 8007e14:	7fefffff 	.word	0x7fefffff
 8007e18:	f016 0310 	ands.w	r3, r6, #16
 8007e1c:	bf18      	it	ne
 8007e1e:	236a      	movne	r3, #106	; 0x6a
 8007e20:	4640      	mov	r0, r8
 8007e22:	9305      	str	r3, [sp, #20]
 8007e24:	4649      	mov	r1, r9
 8007e26:	2300      	movs	r3, #0
 8007e28:	4fb0      	ldr	r7, [pc, #704]	; (80080ec <_strtod_l+0x874>)
 8007e2a:	07f2      	lsls	r2, r6, #31
 8007e2c:	d504      	bpl.n	8007e38 <_strtod_l+0x5c0>
 8007e2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e32:	f7f8 fb5b 	bl	80004ec <__aeabi_dmul>
 8007e36:	2301      	movs	r3, #1
 8007e38:	1076      	asrs	r6, r6, #1
 8007e3a:	f107 0708 	add.w	r7, r7, #8
 8007e3e:	d1f4      	bne.n	8007e2a <_strtod_l+0x5b2>
 8007e40:	b10b      	cbz	r3, 8007e46 <_strtod_l+0x5ce>
 8007e42:	4680      	mov	r8, r0
 8007e44:	4689      	mov	r9, r1
 8007e46:	9b05      	ldr	r3, [sp, #20]
 8007e48:	b1c3      	cbz	r3, 8007e7c <_strtod_l+0x604>
 8007e4a:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8007e4e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	4649      	mov	r1, r9
 8007e56:	dd11      	ble.n	8007e7c <_strtod_l+0x604>
 8007e58:	2b1f      	cmp	r3, #31
 8007e5a:	f340 8127 	ble.w	80080ac <_strtod_l+0x834>
 8007e5e:	2b34      	cmp	r3, #52	; 0x34
 8007e60:	bfd8      	it	le
 8007e62:	f04f 33ff 	movle.w	r3, #4294967295
 8007e66:	f04f 0800 	mov.w	r8, #0
 8007e6a:	bfcf      	iteee	gt
 8007e6c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8007e70:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007e74:	fa03 f202 	lslle.w	r2, r3, r2
 8007e78:	ea02 0901 	andle.w	r9, r2, r1
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	2300      	movs	r3, #0
 8007e80:	4640      	mov	r0, r8
 8007e82:	4649      	mov	r1, r9
 8007e84:	f7f8 fd9a 	bl	80009bc <__aeabi_dcmpeq>
 8007e88:	2800      	cmp	r0, #0
 8007e8a:	d1a1      	bne.n	8007dd0 <_strtod_l+0x558>
 8007e8c:	9b06      	ldr	r3, [sp, #24]
 8007e8e:	465a      	mov	r2, fp
 8007e90:	9300      	str	r3, [sp, #0]
 8007e92:	4650      	mov	r0, sl
 8007e94:	4623      	mov	r3, r4
 8007e96:	9908      	ldr	r1, [sp, #32]
 8007e98:	f001 fea8 	bl	8009bec <__s2b>
 8007e9c:	9008      	str	r0, [sp, #32]
 8007e9e:	2800      	cmp	r0, #0
 8007ea0:	f43f af21 	beq.w	8007ce6 <_strtod_l+0x46e>
 8007ea4:	9b04      	ldr	r3, [sp, #16]
 8007ea6:	f04f 0b00 	mov.w	fp, #0
 8007eaa:	1b5d      	subs	r5, r3, r5
 8007eac:	9b07      	ldr	r3, [sp, #28]
 8007eae:	f8cd b010 	str.w	fp, [sp, #16]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	bfb4      	ite	lt
 8007eb6:	462b      	movlt	r3, r5
 8007eb8:	2300      	movge	r3, #0
 8007eba:	930e      	str	r3, [sp, #56]	; 0x38
 8007ebc:	9b07      	ldr	r3, [sp, #28]
 8007ebe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007ec2:	9314      	str	r3, [sp, #80]	; 0x50
 8007ec4:	9b08      	ldr	r3, [sp, #32]
 8007ec6:	4650      	mov	r0, sl
 8007ec8:	6859      	ldr	r1, [r3, #4]
 8007eca:	f001 fde7 	bl	8009a9c <_Balloc>
 8007ece:	9006      	str	r0, [sp, #24]
 8007ed0:	2800      	cmp	r0, #0
 8007ed2:	f43f af10 	beq.w	8007cf6 <_strtod_l+0x47e>
 8007ed6:	9b08      	ldr	r3, [sp, #32]
 8007ed8:	300c      	adds	r0, #12
 8007eda:	691a      	ldr	r2, [r3, #16]
 8007edc:	f103 010c 	add.w	r1, r3, #12
 8007ee0:	3202      	adds	r2, #2
 8007ee2:	0092      	lsls	r2, r2, #2
 8007ee4:	f7fe fffa 	bl	8006edc <memcpy>
 8007ee8:	ab1c      	add	r3, sp, #112	; 0x70
 8007eea:	9301      	str	r3, [sp, #4]
 8007eec:	ab1b      	add	r3, sp, #108	; 0x6c
 8007eee:	9300      	str	r3, [sp, #0]
 8007ef0:	4642      	mov	r2, r8
 8007ef2:	464b      	mov	r3, r9
 8007ef4:	4650      	mov	r0, sl
 8007ef6:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8007efa:	f002 f9b9 	bl	800a270 <__d2b>
 8007efe:	901a      	str	r0, [sp, #104]	; 0x68
 8007f00:	2800      	cmp	r0, #0
 8007f02:	f43f aef8 	beq.w	8007cf6 <_strtod_l+0x47e>
 8007f06:	2101      	movs	r1, #1
 8007f08:	4650      	mov	r0, sl
 8007f0a:	f001 ff07 	bl	8009d1c <__i2b>
 8007f0e:	4603      	mov	r3, r0
 8007f10:	9004      	str	r0, [sp, #16]
 8007f12:	2800      	cmp	r0, #0
 8007f14:	f43f aeef 	beq.w	8007cf6 <_strtod_l+0x47e>
 8007f18:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8007f1a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007f1c:	2d00      	cmp	r5, #0
 8007f1e:	bfab      	itete	ge
 8007f20:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8007f22:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 8007f24:	18ee      	addge	r6, r5, r3
 8007f26:	1b5c      	sublt	r4, r3, r5
 8007f28:	9b05      	ldr	r3, [sp, #20]
 8007f2a:	bfa8      	it	ge
 8007f2c:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 8007f2e:	eba5 0503 	sub.w	r5, r5, r3
 8007f32:	4415      	add	r5, r2
 8007f34:	4b6e      	ldr	r3, [pc, #440]	; (80080f0 <_strtod_l+0x878>)
 8007f36:	f105 35ff 	add.w	r5, r5, #4294967295
 8007f3a:	bfb8      	it	lt
 8007f3c:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8007f3e:	429d      	cmp	r5, r3
 8007f40:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007f44:	f280 80c4 	bge.w	80080d0 <_strtod_l+0x858>
 8007f48:	1b5b      	subs	r3, r3, r5
 8007f4a:	2b1f      	cmp	r3, #31
 8007f4c:	f04f 0701 	mov.w	r7, #1
 8007f50:	eba2 0203 	sub.w	r2, r2, r3
 8007f54:	f300 80b1 	bgt.w	80080ba <_strtod_l+0x842>
 8007f58:	2500      	movs	r5, #0
 8007f5a:	fa07 f303 	lsl.w	r3, r7, r3
 8007f5e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007f60:	18b7      	adds	r7, r6, r2
 8007f62:	9b05      	ldr	r3, [sp, #20]
 8007f64:	42be      	cmp	r6, r7
 8007f66:	4414      	add	r4, r2
 8007f68:	441c      	add	r4, r3
 8007f6a:	4633      	mov	r3, r6
 8007f6c:	bfa8      	it	ge
 8007f6e:	463b      	movge	r3, r7
 8007f70:	42a3      	cmp	r3, r4
 8007f72:	bfa8      	it	ge
 8007f74:	4623      	movge	r3, r4
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	bfc2      	ittt	gt
 8007f7a:	1aff      	subgt	r7, r7, r3
 8007f7c:	1ae4      	subgt	r4, r4, r3
 8007f7e:	1af6      	subgt	r6, r6, r3
 8007f80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	dd17      	ble.n	8007fb6 <_strtod_l+0x73e>
 8007f86:	461a      	mov	r2, r3
 8007f88:	4650      	mov	r0, sl
 8007f8a:	9904      	ldr	r1, [sp, #16]
 8007f8c:	f001 ff84 	bl	8009e98 <__pow5mult>
 8007f90:	9004      	str	r0, [sp, #16]
 8007f92:	2800      	cmp	r0, #0
 8007f94:	f43f aeaf 	beq.w	8007cf6 <_strtod_l+0x47e>
 8007f98:	4601      	mov	r1, r0
 8007f9a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007f9c:	4650      	mov	r0, sl
 8007f9e:	f001 fed3 	bl	8009d48 <__multiply>
 8007fa2:	9009      	str	r0, [sp, #36]	; 0x24
 8007fa4:	2800      	cmp	r0, #0
 8007fa6:	f43f aea6 	beq.w	8007cf6 <_strtod_l+0x47e>
 8007faa:	4650      	mov	r0, sl
 8007fac:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007fae:	f001 fdb5 	bl	8009b1c <_Bfree>
 8007fb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fb4:	931a      	str	r3, [sp, #104]	; 0x68
 8007fb6:	2f00      	cmp	r7, #0
 8007fb8:	f300 808e 	bgt.w	80080d8 <_strtod_l+0x860>
 8007fbc:	9b07      	ldr	r3, [sp, #28]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	dd08      	ble.n	8007fd4 <_strtod_l+0x75c>
 8007fc2:	4650      	mov	r0, sl
 8007fc4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007fc6:	9906      	ldr	r1, [sp, #24]
 8007fc8:	f001 ff66 	bl	8009e98 <__pow5mult>
 8007fcc:	9006      	str	r0, [sp, #24]
 8007fce:	2800      	cmp	r0, #0
 8007fd0:	f43f ae91 	beq.w	8007cf6 <_strtod_l+0x47e>
 8007fd4:	2c00      	cmp	r4, #0
 8007fd6:	dd08      	ble.n	8007fea <_strtod_l+0x772>
 8007fd8:	4622      	mov	r2, r4
 8007fda:	4650      	mov	r0, sl
 8007fdc:	9906      	ldr	r1, [sp, #24]
 8007fde:	f001 ffb5 	bl	8009f4c <__lshift>
 8007fe2:	9006      	str	r0, [sp, #24]
 8007fe4:	2800      	cmp	r0, #0
 8007fe6:	f43f ae86 	beq.w	8007cf6 <_strtod_l+0x47e>
 8007fea:	2e00      	cmp	r6, #0
 8007fec:	dd08      	ble.n	8008000 <_strtod_l+0x788>
 8007fee:	4632      	mov	r2, r6
 8007ff0:	4650      	mov	r0, sl
 8007ff2:	9904      	ldr	r1, [sp, #16]
 8007ff4:	f001 ffaa 	bl	8009f4c <__lshift>
 8007ff8:	9004      	str	r0, [sp, #16]
 8007ffa:	2800      	cmp	r0, #0
 8007ffc:	f43f ae7b 	beq.w	8007cf6 <_strtod_l+0x47e>
 8008000:	4650      	mov	r0, sl
 8008002:	9a06      	ldr	r2, [sp, #24]
 8008004:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008006:	f002 f82d 	bl	800a064 <__mdiff>
 800800a:	4683      	mov	fp, r0
 800800c:	2800      	cmp	r0, #0
 800800e:	f43f ae72 	beq.w	8007cf6 <_strtod_l+0x47e>
 8008012:	2400      	movs	r4, #0
 8008014:	68c3      	ldr	r3, [r0, #12]
 8008016:	9904      	ldr	r1, [sp, #16]
 8008018:	60c4      	str	r4, [r0, #12]
 800801a:	930b      	str	r3, [sp, #44]	; 0x2c
 800801c:	f002 f806 	bl	800a02c <__mcmp>
 8008020:	42a0      	cmp	r0, r4
 8008022:	da6b      	bge.n	80080fc <_strtod_l+0x884>
 8008024:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008026:	ea53 0308 	orrs.w	r3, r3, r8
 800802a:	f040 8091 	bne.w	8008150 <_strtod_l+0x8d8>
 800802e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008032:	2b00      	cmp	r3, #0
 8008034:	f040 808c 	bne.w	8008150 <_strtod_l+0x8d8>
 8008038:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800803c:	0d1b      	lsrs	r3, r3, #20
 800803e:	051b      	lsls	r3, r3, #20
 8008040:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008044:	f240 8084 	bls.w	8008150 <_strtod_l+0x8d8>
 8008048:	f8db 3014 	ldr.w	r3, [fp, #20]
 800804c:	b91b      	cbnz	r3, 8008056 <_strtod_l+0x7de>
 800804e:	f8db 3010 	ldr.w	r3, [fp, #16]
 8008052:	2b01      	cmp	r3, #1
 8008054:	dd7c      	ble.n	8008150 <_strtod_l+0x8d8>
 8008056:	4659      	mov	r1, fp
 8008058:	2201      	movs	r2, #1
 800805a:	4650      	mov	r0, sl
 800805c:	f001 ff76 	bl	8009f4c <__lshift>
 8008060:	9904      	ldr	r1, [sp, #16]
 8008062:	4683      	mov	fp, r0
 8008064:	f001 ffe2 	bl	800a02c <__mcmp>
 8008068:	2800      	cmp	r0, #0
 800806a:	dd71      	ble.n	8008150 <_strtod_l+0x8d8>
 800806c:	9905      	ldr	r1, [sp, #20]
 800806e:	464b      	mov	r3, r9
 8008070:	4a20      	ldr	r2, [pc, #128]	; (80080f4 <_strtod_l+0x87c>)
 8008072:	2900      	cmp	r1, #0
 8008074:	f000 808c 	beq.w	8008190 <_strtod_l+0x918>
 8008078:	ea02 0109 	and.w	r1, r2, r9
 800807c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008080:	f300 8086 	bgt.w	8008190 <_strtod_l+0x918>
 8008084:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008088:	f77f aeaa 	ble.w	8007de0 <_strtod_l+0x568>
 800808c:	4640      	mov	r0, r8
 800808e:	4649      	mov	r1, r9
 8008090:	4b19      	ldr	r3, [pc, #100]	; (80080f8 <_strtod_l+0x880>)
 8008092:	2200      	movs	r2, #0
 8008094:	f7f8 fa2a 	bl	80004ec <__aeabi_dmul>
 8008098:	460b      	mov	r3, r1
 800809a:	4303      	orrs	r3, r0
 800809c:	bf08      	it	eq
 800809e:	2322      	moveq	r3, #34	; 0x22
 80080a0:	4680      	mov	r8, r0
 80080a2:	4689      	mov	r9, r1
 80080a4:	bf08      	it	eq
 80080a6:	f8ca 3000 	streq.w	r3, [sl]
 80080aa:	e62f      	b.n	8007d0c <_strtod_l+0x494>
 80080ac:	f04f 32ff 	mov.w	r2, #4294967295
 80080b0:	fa02 f303 	lsl.w	r3, r2, r3
 80080b4:	ea03 0808 	and.w	r8, r3, r8
 80080b8:	e6e0      	b.n	8007e7c <_strtod_l+0x604>
 80080ba:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 80080be:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 80080c2:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 80080c6:	35e2      	adds	r5, #226	; 0xe2
 80080c8:	fa07 f505 	lsl.w	r5, r7, r5
 80080cc:	970f      	str	r7, [sp, #60]	; 0x3c
 80080ce:	e747      	b.n	8007f60 <_strtod_l+0x6e8>
 80080d0:	2301      	movs	r3, #1
 80080d2:	2500      	movs	r5, #0
 80080d4:	930f      	str	r3, [sp, #60]	; 0x3c
 80080d6:	e743      	b.n	8007f60 <_strtod_l+0x6e8>
 80080d8:	463a      	mov	r2, r7
 80080da:	4650      	mov	r0, sl
 80080dc:	991a      	ldr	r1, [sp, #104]	; 0x68
 80080de:	f001 ff35 	bl	8009f4c <__lshift>
 80080e2:	901a      	str	r0, [sp, #104]	; 0x68
 80080e4:	2800      	cmp	r0, #0
 80080e6:	f47f af69 	bne.w	8007fbc <_strtod_l+0x744>
 80080ea:	e604      	b.n	8007cf6 <_strtod_l+0x47e>
 80080ec:	0800b828 	.word	0x0800b828
 80080f0:	fffffc02 	.word	0xfffffc02
 80080f4:	7ff00000 	.word	0x7ff00000
 80080f8:	39500000 	.word	0x39500000
 80080fc:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008100:	d165      	bne.n	80081ce <_strtod_l+0x956>
 8008102:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008104:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008108:	b35a      	cbz	r2, 8008162 <_strtod_l+0x8ea>
 800810a:	4a99      	ldr	r2, [pc, #612]	; (8008370 <_strtod_l+0xaf8>)
 800810c:	4293      	cmp	r3, r2
 800810e:	d12b      	bne.n	8008168 <_strtod_l+0x8f0>
 8008110:	9b05      	ldr	r3, [sp, #20]
 8008112:	4641      	mov	r1, r8
 8008114:	b303      	cbz	r3, 8008158 <_strtod_l+0x8e0>
 8008116:	464a      	mov	r2, r9
 8008118:	4b96      	ldr	r3, [pc, #600]	; (8008374 <_strtod_l+0xafc>)
 800811a:	4013      	ands	r3, r2
 800811c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008120:	f04f 32ff 	mov.w	r2, #4294967295
 8008124:	d81b      	bhi.n	800815e <_strtod_l+0x8e6>
 8008126:	0d1b      	lsrs	r3, r3, #20
 8008128:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800812c:	fa02 f303 	lsl.w	r3, r2, r3
 8008130:	4299      	cmp	r1, r3
 8008132:	d119      	bne.n	8008168 <_strtod_l+0x8f0>
 8008134:	4b90      	ldr	r3, [pc, #576]	; (8008378 <_strtod_l+0xb00>)
 8008136:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008138:	429a      	cmp	r2, r3
 800813a:	d102      	bne.n	8008142 <_strtod_l+0x8ca>
 800813c:	3101      	adds	r1, #1
 800813e:	f43f adda 	beq.w	8007cf6 <_strtod_l+0x47e>
 8008142:	f04f 0800 	mov.w	r8, #0
 8008146:	4b8b      	ldr	r3, [pc, #556]	; (8008374 <_strtod_l+0xafc>)
 8008148:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800814a:	401a      	ands	r2, r3
 800814c:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8008150:	9b05      	ldr	r3, [sp, #20]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d19a      	bne.n	800808c <_strtod_l+0x814>
 8008156:	e5d9      	b.n	8007d0c <_strtod_l+0x494>
 8008158:	f04f 33ff 	mov.w	r3, #4294967295
 800815c:	e7e8      	b.n	8008130 <_strtod_l+0x8b8>
 800815e:	4613      	mov	r3, r2
 8008160:	e7e6      	b.n	8008130 <_strtod_l+0x8b8>
 8008162:	ea53 0308 	orrs.w	r3, r3, r8
 8008166:	d081      	beq.n	800806c <_strtod_l+0x7f4>
 8008168:	b1e5      	cbz	r5, 80081a4 <_strtod_l+0x92c>
 800816a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800816c:	421d      	tst	r5, r3
 800816e:	d0ef      	beq.n	8008150 <_strtod_l+0x8d8>
 8008170:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008172:	4640      	mov	r0, r8
 8008174:	4649      	mov	r1, r9
 8008176:	9a05      	ldr	r2, [sp, #20]
 8008178:	b1c3      	cbz	r3, 80081ac <_strtod_l+0x934>
 800817a:	f7ff fb5c 	bl	8007836 <sulp>
 800817e:	4602      	mov	r2, r0
 8008180:	460b      	mov	r3, r1
 8008182:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008186:	f7f7 fffb 	bl	8000180 <__adddf3>
 800818a:	4680      	mov	r8, r0
 800818c:	4689      	mov	r9, r1
 800818e:	e7df      	b.n	8008150 <_strtod_l+0x8d8>
 8008190:	4013      	ands	r3, r2
 8008192:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008196:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800819a:	f04f 38ff 	mov.w	r8, #4294967295
 800819e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80081a2:	e7d5      	b.n	8008150 <_strtod_l+0x8d8>
 80081a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80081a6:	ea13 0f08 	tst.w	r3, r8
 80081aa:	e7e0      	b.n	800816e <_strtod_l+0x8f6>
 80081ac:	f7ff fb43 	bl	8007836 <sulp>
 80081b0:	4602      	mov	r2, r0
 80081b2:	460b      	mov	r3, r1
 80081b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80081b8:	f7f7 ffe0 	bl	800017c <__aeabi_dsub>
 80081bc:	2200      	movs	r2, #0
 80081be:	2300      	movs	r3, #0
 80081c0:	4680      	mov	r8, r0
 80081c2:	4689      	mov	r9, r1
 80081c4:	f7f8 fbfa 	bl	80009bc <__aeabi_dcmpeq>
 80081c8:	2800      	cmp	r0, #0
 80081ca:	d0c1      	beq.n	8008150 <_strtod_l+0x8d8>
 80081cc:	e608      	b.n	8007de0 <_strtod_l+0x568>
 80081ce:	4658      	mov	r0, fp
 80081d0:	9904      	ldr	r1, [sp, #16]
 80081d2:	f002 f8a9 	bl	800a328 <__ratio>
 80081d6:	2200      	movs	r2, #0
 80081d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80081dc:	4606      	mov	r6, r0
 80081de:	460f      	mov	r7, r1
 80081e0:	f7f8 fc00 	bl	80009e4 <__aeabi_dcmple>
 80081e4:	2800      	cmp	r0, #0
 80081e6:	d070      	beq.n	80082ca <_strtod_l+0xa52>
 80081e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d042      	beq.n	8008274 <_strtod_l+0x9fc>
 80081ee:	2600      	movs	r6, #0
 80081f0:	4f62      	ldr	r7, [pc, #392]	; (800837c <_strtod_l+0xb04>)
 80081f2:	4d62      	ldr	r5, [pc, #392]	; (800837c <_strtod_l+0xb04>)
 80081f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081f6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80081fa:	0d1b      	lsrs	r3, r3, #20
 80081fc:	051b      	lsls	r3, r3, #20
 80081fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8008200:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008202:	4b5f      	ldr	r3, [pc, #380]	; (8008380 <_strtod_l+0xb08>)
 8008204:	429a      	cmp	r2, r3
 8008206:	f040 80c3 	bne.w	8008390 <_strtod_l+0xb18>
 800820a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800820c:	4640      	mov	r0, r8
 800820e:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8008212:	4649      	mov	r1, r9
 8008214:	f001 ffb2 	bl	800a17c <__ulp>
 8008218:	4602      	mov	r2, r0
 800821a:	460b      	mov	r3, r1
 800821c:	4630      	mov	r0, r6
 800821e:	4639      	mov	r1, r7
 8008220:	f7f8 f964 	bl	80004ec <__aeabi_dmul>
 8008224:	4642      	mov	r2, r8
 8008226:	464b      	mov	r3, r9
 8008228:	f7f7 ffaa 	bl	8000180 <__adddf3>
 800822c:	460b      	mov	r3, r1
 800822e:	4951      	ldr	r1, [pc, #324]	; (8008374 <_strtod_l+0xafc>)
 8008230:	4a54      	ldr	r2, [pc, #336]	; (8008384 <_strtod_l+0xb0c>)
 8008232:	4019      	ands	r1, r3
 8008234:	4291      	cmp	r1, r2
 8008236:	4680      	mov	r8, r0
 8008238:	d95d      	bls.n	80082f6 <_strtod_l+0xa7e>
 800823a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800823c:	4b4e      	ldr	r3, [pc, #312]	; (8008378 <_strtod_l+0xb00>)
 800823e:	429a      	cmp	r2, r3
 8008240:	d103      	bne.n	800824a <_strtod_l+0x9d2>
 8008242:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008244:	3301      	adds	r3, #1
 8008246:	f43f ad56 	beq.w	8007cf6 <_strtod_l+0x47e>
 800824a:	f04f 38ff 	mov.w	r8, #4294967295
 800824e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8008378 <_strtod_l+0xb00>
 8008252:	4650      	mov	r0, sl
 8008254:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008256:	f001 fc61 	bl	8009b1c <_Bfree>
 800825a:	4650      	mov	r0, sl
 800825c:	9906      	ldr	r1, [sp, #24]
 800825e:	f001 fc5d 	bl	8009b1c <_Bfree>
 8008262:	4650      	mov	r0, sl
 8008264:	9904      	ldr	r1, [sp, #16]
 8008266:	f001 fc59 	bl	8009b1c <_Bfree>
 800826a:	4659      	mov	r1, fp
 800826c:	4650      	mov	r0, sl
 800826e:	f001 fc55 	bl	8009b1c <_Bfree>
 8008272:	e627      	b.n	8007ec4 <_strtod_l+0x64c>
 8008274:	f1b8 0f00 	cmp.w	r8, #0
 8008278:	d119      	bne.n	80082ae <_strtod_l+0xa36>
 800827a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800827c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008280:	b9e3      	cbnz	r3, 80082bc <_strtod_l+0xa44>
 8008282:	2200      	movs	r2, #0
 8008284:	4630      	mov	r0, r6
 8008286:	4639      	mov	r1, r7
 8008288:	4b3c      	ldr	r3, [pc, #240]	; (800837c <_strtod_l+0xb04>)
 800828a:	f7f8 fba1 	bl	80009d0 <__aeabi_dcmplt>
 800828e:	b9c8      	cbnz	r0, 80082c4 <_strtod_l+0xa4c>
 8008290:	2200      	movs	r2, #0
 8008292:	4630      	mov	r0, r6
 8008294:	4639      	mov	r1, r7
 8008296:	4b3c      	ldr	r3, [pc, #240]	; (8008388 <_strtod_l+0xb10>)
 8008298:	f7f8 f928 	bl	80004ec <__aeabi_dmul>
 800829c:	4604      	mov	r4, r0
 800829e:	460d      	mov	r5, r1
 80082a0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80082a4:	9416      	str	r4, [sp, #88]	; 0x58
 80082a6:	9317      	str	r3, [sp, #92]	; 0x5c
 80082a8:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 80082ac:	e7a2      	b.n	80081f4 <_strtod_l+0x97c>
 80082ae:	f1b8 0f01 	cmp.w	r8, #1
 80082b2:	d103      	bne.n	80082bc <_strtod_l+0xa44>
 80082b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	f43f ad92 	beq.w	8007de0 <_strtod_l+0x568>
 80082bc:	2600      	movs	r6, #0
 80082be:	2400      	movs	r4, #0
 80082c0:	4f32      	ldr	r7, [pc, #200]	; (800838c <_strtod_l+0xb14>)
 80082c2:	e796      	b.n	80081f2 <_strtod_l+0x97a>
 80082c4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80082c6:	4d30      	ldr	r5, [pc, #192]	; (8008388 <_strtod_l+0xb10>)
 80082c8:	e7ea      	b.n	80082a0 <_strtod_l+0xa28>
 80082ca:	4b2f      	ldr	r3, [pc, #188]	; (8008388 <_strtod_l+0xb10>)
 80082cc:	2200      	movs	r2, #0
 80082ce:	4630      	mov	r0, r6
 80082d0:	4639      	mov	r1, r7
 80082d2:	f7f8 f90b 	bl	80004ec <__aeabi_dmul>
 80082d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80082d8:	4604      	mov	r4, r0
 80082da:	460d      	mov	r5, r1
 80082dc:	b933      	cbnz	r3, 80082ec <_strtod_l+0xa74>
 80082de:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80082e2:	9010      	str	r0, [sp, #64]	; 0x40
 80082e4:	9311      	str	r3, [sp, #68]	; 0x44
 80082e6:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80082ea:	e783      	b.n	80081f4 <_strtod_l+0x97c>
 80082ec:	4602      	mov	r2, r0
 80082ee:	460b      	mov	r3, r1
 80082f0:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80082f4:	e7f7      	b.n	80082e6 <_strtod_l+0xa6e>
 80082f6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80082fa:	9b05      	ldr	r3, [sp, #20]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d1a8      	bne.n	8008252 <_strtod_l+0x9da>
 8008300:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008304:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008306:	0d1b      	lsrs	r3, r3, #20
 8008308:	051b      	lsls	r3, r3, #20
 800830a:	429a      	cmp	r2, r3
 800830c:	d1a1      	bne.n	8008252 <_strtod_l+0x9da>
 800830e:	4620      	mov	r0, r4
 8008310:	4629      	mov	r1, r5
 8008312:	f7f8 fbe3 	bl	8000adc <__aeabi_d2lz>
 8008316:	f7f8 f8bb 	bl	8000490 <__aeabi_l2d>
 800831a:	4602      	mov	r2, r0
 800831c:	460b      	mov	r3, r1
 800831e:	4620      	mov	r0, r4
 8008320:	4629      	mov	r1, r5
 8008322:	f7f7 ff2b 	bl	800017c <__aeabi_dsub>
 8008326:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008328:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800832c:	ea43 0308 	orr.w	r3, r3, r8
 8008330:	4313      	orrs	r3, r2
 8008332:	4604      	mov	r4, r0
 8008334:	460d      	mov	r5, r1
 8008336:	d066      	beq.n	8008406 <_strtod_l+0xb8e>
 8008338:	a309      	add	r3, pc, #36	; (adr r3, 8008360 <_strtod_l+0xae8>)
 800833a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800833e:	f7f8 fb47 	bl	80009d0 <__aeabi_dcmplt>
 8008342:	2800      	cmp	r0, #0
 8008344:	f47f ace2 	bne.w	8007d0c <_strtod_l+0x494>
 8008348:	a307      	add	r3, pc, #28	; (adr r3, 8008368 <_strtod_l+0xaf0>)
 800834a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800834e:	4620      	mov	r0, r4
 8008350:	4629      	mov	r1, r5
 8008352:	f7f8 fb5b 	bl	8000a0c <__aeabi_dcmpgt>
 8008356:	2800      	cmp	r0, #0
 8008358:	f43f af7b 	beq.w	8008252 <_strtod_l+0x9da>
 800835c:	e4d6      	b.n	8007d0c <_strtod_l+0x494>
 800835e:	bf00      	nop
 8008360:	94a03595 	.word	0x94a03595
 8008364:	3fdfffff 	.word	0x3fdfffff
 8008368:	35afe535 	.word	0x35afe535
 800836c:	3fe00000 	.word	0x3fe00000
 8008370:	000fffff 	.word	0x000fffff
 8008374:	7ff00000 	.word	0x7ff00000
 8008378:	7fefffff 	.word	0x7fefffff
 800837c:	3ff00000 	.word	0x3ff00000
 8008380:	7fe00000 	.word	0x7fe00000
 8008384:	7c9fffff 	.word	0x7c9fffff
 8008388:	3fe00000 	.word	0x3fe00000
 800838c:	bff00000 	.word	0xbff00000
 8008390:	9b05      	ldr	r3, [sp, #20]
 8008392:	b313      	cbz	r3, 80083da <_strtod_l+0xb62>
 8008394:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008396:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800839a:	d81e      	bhi.n	80083da <_strtod_l+0xb62>
 800839c:	a326      	add	r3, pc, #152	; (adr r3, 8008438 <_strtod_l+0xbc0>)
 800839e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083a2:	4620      	mov	r0, r4
 80083a4:	4629      	mov	r1, r5
 80083a6:	f7f8 fb1d 	bl	80009e4 <__aeabi_dcmple>
 80083aa:	b190      	cbz	r0, 80083d2 <_strtod_l+0xb5a>
 80083ac:	4629      	mov	r1, r5
 80083ae:	4620      	mov	r0, r4
 80083b0:	f7f8 fb74 	bl	8000a9c <__aeabi_d2uiz>
 80083b4:	2801      	cmp	r0, #1
 80083b6:	bf38      	it	cc
 80083b8:	2001      	movcc	r0, #1
 80083ba:	f7f8 f81d 	bl	80003f8 <__aeabi_ui2d>
 80083be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80083c0:	4604      	mov	r4, r0
 80083c2:	460d      	mov	r5, r1
 80083c4:	b9d3      	cbnz	r3, 80083fc <_strtod_l+0xb84>
 80083c6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80083ca:	9012      	str	r0, [sp, #72]	; 0x48
 80083cc:	9313      	str	r3, [sp, #76]	; 0x4c
 80083ce:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 80083d2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80083d4:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 80083d8:	1a9f      	subs	r7, r3, r2
 80083da:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80083de:	f001 fecd 	bl	800a17c <__ulp>
 80083e2:	4602      	mov	r2, r0
 80083e4:	460b      	mov	r3, r1
 80083e6:	4630      	mov	r0, r6
 80083e8:	4639      	mov	r1, r7
 80083ea:	f7f8 f87f 	bl	80004ec <__aeabi_dmul>
 80083ee:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80083f2:	f7f7 fec5 	bl	8000180 <__adddf3>
 80083f6:	4680      	mov	r8, r0
 80083f8:	4689      	mov	r9, r1
 80083fa:	e77e      	b.n	80082fa <_strtod_l+0xa82>
 80083fc:	4602      	mov	r2, r0
 80083fe:	460b      	mov	r3, r1
 8008400:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8008404:	e7e3      	b.n	80083ce <_strtod_l+0xb56>
 8008406:	a30e      	add	r3, pc, #56	; (adr r3, 8008440 <_strtod_l+0xbc8>)
 8008408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800840c:	f7f8 fae0 	bl	80009d0 <__aeabi_dcmplt>
 8008410:	e7a1      	b.n	8008356 <_strtod_l+0xade>
 8008412:	2300      	movs	r3, #0
 8008414:	930a      	str	r3, [sp, #40]	; 0x28
 8008416:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008418:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800841a:	6013      	str	r3, [r2, #0]
 800841c:	f7ff ba71 	b.w	8007902 <_strtod_l+0x8a>
 8008420:	2a65      	cmp	r2, #101	; 0x65
 8008422:	f43f ab63 	beq.w	8007aec <_strtod_l+0x274>
 8008426:	2a45      	cmp	r2, #69	; 0x45
 8008428:	f43f ab60 	beq.w	8007aec <_strtod_l+0x274>
 800842c:	2301      	movs	r3, #1
 800842e:	f7ff bb95 	b.w	8007b5c <_strtod_l+0x2e4>
 8008432:	bf00      	nop
 8008434:	f3af 8000 	nop.w
 8008438:	ffc00000 	.word	0xffc00000
 800843c:	41dfffff 	.word	0x41dfffff
 8008440:	94a03595 	.word	0x94a03595
 8008444:	3fcfffff 	.word	0x3fcfffff

08008448 <strtod>:
 8008448:	460a      	mov	r2, r1
 800844a:	4601      	mov	r1, r0
 800844c:	4802      	ldr	r0, [pc, #8]	; (8008458 <strtod+0x10>)
 800844e:	4b03      	ldr	r3, [pc, #12]	; (800845c <strtod+0x14>)
 8008450:	6800      	ldr	r0, [r0, #0]
 8008452:	f7ff ba11 	b.w	8007878 <_strtod_l>
 8008456:	bf00      	nop
 8008458:	20000190 	.word	0x20000190
 800845c:	200001f8 	.word	0x200001f8

08008460 <strtok>:
 8008460:	4b16      	ldr	r3, [pc, #88]	; (80084bc <strtok+0x5c>)
 8008462:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008466:	681f      	ldr	r7, [r3, #0]
 8008468:	4605      	mov	r5, r0
 800846a:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 800846c:	460e      	mov	r6, r1
 800846e:	b9ec      	cbnz	r4, 80084ac <strtok+0x4c>
 8008470:	2050      	movs	r0, #80	; 0x50
 8008472:	f001 faeb 	bl	8009a4c <malloc>
 8008476:	4602      	mov	r2, r0
 8008478:	65b8      	str	r0, [r7, #88]	; 0x58
 800847a:	b920      	cbnz	r0, 8008486 <strtok+0x26>
 800847c:	2157      	movs	r1, #87	; 0x57
 800847e:	4b10      	ldr	r3, [pc, #64]	; (80084c0 <strtok+0x60>)
 8008480:	4810      	ldr	r0, [pc, #64]	; (80084c4 <strtok+0x64>)
 8008482:	f000 f8cf 	bl	8008624 <__assert_func>
 8008486:	e9c0 4400 	strd	r4, r4, [r0]
 800848a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800848e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8008492:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8008496:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800849a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800849e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80084a2:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80084a6:	6184      	str	r4, [r0, #24]
 80084a8:	7704      	strb	r4, [r0, #28]
 80084aa:	6244      	str	r4, [r0, #36]	; 0x24
 80084ac:	4631      	mov	r1, r6
 80084ae:	4628      	mov	r0, r5
 80084b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80084b2:	2301      	movs	r3, #1
 80084b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80084b8:	f000 b806 	b.w	80084c8 <__strtok_r>
 80084bc:	20000190 	.word	0x20000190
 80084c0:	0800b850 	.word	0x0800b850
 80084c4:	0800b867 	.word	0x0800b867

080084c8 <__strtok_r>:
 80084c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80084ca:	b908      	cbnz	r0, 80084d0 <__strtok_r+0x8>
 80084cc:	6810      	ldr	r0, [r2, #0]
 80084ce:	b188      	cbz	r0, 80084f4 <__strtok_r+0x2c>
 80084d0:	4604      	mov	r4, r0
 80084d2:	460f      	mov	r7, r1
 80084d4:	4620      	mov	r0, r4
 80084d6:	f814 5b01 	ldrb.w	r5, [r4], #1
 80084da:	f817 6b01 	ldrb.w	r6, [r7], #1
 80084de:	b91e      	cbnz	r6, 80084e8 <__strtok_r+0x20>
 80084e0:	b965      	cbnz	r5, 80084fc <__strtok_r+0x34>
 80084e2:	4628      	mov	r0, r5
 80084e4:	6015      	str	r5, [r2, #0]
 80084e6:	e005      	b.n	80084f4 <__strtok_r+0x2c>
 80084e8:	42b5      	cmp	r5, r6
 80084ea:	d1f6      	bne.n	80084da <__strtok_r+0x12>
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d1f0      	bne.n	80084d2 <__strtok_r+0xa>
 80084f0:	6014      	str	r4, [r2, #0]
 80084f2:	7003      	strb	r3, [r0, #0]
 80084f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80084f6:	461c      	mov	r4, r3
 80084f8:	e00c      	b.n	8008514 <__strtok_r+0x4c>
 80084fa:	b915      	cbnz	r5, 8008502 <__strtok_r+0x3a>
 80084fc:	460e      	mov	r6, r1
 80084fe:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008502:	f816 5b01 	ldrb.w	r5, [r6], #1
 8008506:	42ab      	cmp	r3, r5
 8008508:	d1f7      	bne.n	80084fa <__strtok_r+0x32>
 800850a:	2b00      	cmp	r3, #0
 800850c:	d0f3      	beq.n	80084f6 <__strtok_r+0x2e>
 800850e:	2300      	movs	r3, #0
 8008510:	f804 3c01 	strb.w	r3, [r4, #-1]
 8008514:	6014      	str	r4, [r2, #0]
 8008516:	e7ed      	b.n	80084f4 <__strtok_r+0x2c>

08008518 <_strtol_l.constprop.0>:
 8008518:	2b01      	cmp	r3, #1
 800851a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800851e:	4680      	mov	r8, r0
 8008520:	d001      	beq.n	8008526 <_strtol_l.constprop.0+0xe>
 8008522:	2b24      	cmp	r3, #36	; 0x24
 8008524:	d906      	bls.n	8008534 <_strtol_l.constprop.0+0x1c>
 8008526:	f7fe fcaf 	bl	8006e88 <__errno>
 800852a:	2316      	movs	r3, #22
 800852c:	6003      	str	r3, [r0, #0]
 800852e:	2000      	movs	r0, #0
 8008530:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008534:	460d      	mov	r5, r1
 8008536:	4f35      	ldr	r7, [pc, #212]	; (800860c <_strtol_l.constprop.0+0xf4>)
 8008538:	4628      	mov	r0, r5
 800853a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800853e:	5de6      	ldrb	r6, [r4, r7]
 8008540:	f016 0608 	ands.w	r6, r6, #8
 8008544:	d1f8      	bne.n	8008538 <_strtol_l.constprop.0+0x20>
 8008546:	2c2d      	cmp	r4, #45	; 0x2d
 8008548:	d12f      	bne.n	80085aa <_strtol_l.constprop.0+0x92>
 800854a:	2601      	movs	r6, #1
 800854c:	782c      	ldrb	r4, [r5, #0]
 800854e:	1c85      	adds	r5, r0, #2
 8008550:	2b00      	cmp	r3, #0
 8008552:	d057      	beq.n	8008604 <_strtol_l.constprop.0+0xec>
 8008554:	2b10      	cmp	r3, #16
 8008556:	d109      	bne.n	800856c <_strtol_l.constprop.0+0x54>
 8008558:	2c30      	cmp	r4, #48	; 0x30
 800855a:	d107      	bne.n	800856c <_strtol_l.constprop.0+0x54>
 800855c:	7828      	ldrb	r0, [r5, #0]
 800855e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8008562:	2858      	cmp	r0, #88	; 0x58
 8008564:	d149      	bne.n	80085fa <_strtol_l.constprop.0+0xe2>
 8008566:	2310      	movs	r3, #16
 8008568:	786c      	ldrb	r4, [r5, #1]
 800856a:	3502      	adds	r5, #2
 800856c:	2700      	movs	r7, #0
 800856e:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8008572:	f10e 3eff 	add.w	lr, lr, #4294967295
 8008576:	fbbe f9f3 	udiv	r9, lr, r3
 800857a:	4638      	mov	r0, r7
 800857c:	fb03 ea19 	mls	sl, r3, r9, lr
 8008580:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8008584:	f1bc 0f09 	cmp.w	ip, #9
 8008588:	d814      	bhi.n	80085b4 <_strtol_l.constprop.0+0x9c>
 800858a:	4664      	mov	r4, ip
 800858c:	42a3      	cmp	r3, r4
 800858e:	dd22      	ble.n	80085d6 <_strtol_l.constprop.0+0xbe>
 8008590:	2f00      	cmp	r7, #0
 8008592:	db1d      	blt.n	80085d0 <_strtol_l.constprop.0+0xb8>
 8008594:	4581      	cmp	r9, r0
 8008596:	d31b      	bcc.n	80085d0 <_strtol_l.constprop.0+0xb8>
 8008598:	d101      	bne.n	800859e <_strtol_l.constprop.0+0x86>
 800859a:	45a2      	cmp	sl, r4
 800859c:	db18      	blt.n	80085d0 <_strtol_l.constprop.0+0xb8>
 800859e:	2701      	movs	r7, #1
 80085a0:	fb00 4003 	mla	r0, r0, r3, r4
 80085a4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80085a8:	e7ea      	b.n	8008580 <_strtol_l.constprop.0+0x68>
 80085aa:	2c2b      	cmp	r4, #43	; 0x2b
 80085ac:	bf04      	itt	eq
 80085ae:	782c      	ldrbeq	r4, [r5, #0]
 80085b0:	1c85      	addeq	r5, r0, #2
 80085b2:	e7cd      	b.n	8008550 <_strtol_l.constprop.0+0x38>
 80085b4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80085b8:	f1bc 0f19 	cmp.w	ip, #25
 80085bc:	d801      	bhi.n	80085c2 <_strtol_l.constprop.0+0xaa>
 80085be:	3c37      	subs	r4, #55	; 0x37
 80085c0:	e7e4      	b.n	800858c <_strtol_l.constprop.0+0x74>
 80085c2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80085c6:	f1bc 0f19 	cmp.w	ip, #25
 80085ca:	d804      	bhi.n	80085d6 <_strtol_l.constprop.0+0xbe>
 80085cc:	3c57      	subs	r4, #87	; 0x57
 80085ce:	e7dd      	b.n	800858c <_strtol_l.constprop.0+0x74>
 80085d0:	f04f 37ff 	mov.w	r7, #4294967295
 80085d4:	e7e6      	b.n	80085a4 <_strtol_l.constprop.0+0x8c>
 80085d6:	2f00      	cmp	r7, #0
 80085d8:	da07      	bge.n	80085ea <_strtol_l.constprop.0+0xd2>
 80085da:	2322      	movs	r3, #34	; 0x22
 80085dc:	4670      	mov	r0, lr
 80085de:	f8c8 3000 	str.w	r3, [r8]
 80085e2:	2a00      	cmp	r2, #0
 80085e4:	d0a4      	beq.n	8008530 <_strtol_l.constprop.0+0x18>
 80085e6:	1e69      	subs	r1, r5, #1
 80085e8:	e005      	b.n	80085f6 <_strtol_l.constprop.0+0xde>
 80085ea:	b106      	cbz	r6, 80085ee <_strtol_l.constprop.0+0xd6>
 80085ec:	4240      	negs	r0, r0
 80085ee:	2a00      	cmp	r2, #0
 80085f0:	d09e      	beq.n	8008530 <_strtol_l.constprop.0+0x18>
 80085f2:	2f00      	cmp	r7, #0
 80085f4:	d1f7      	bne.n	80085e6 <_strtol_l.constprop.0+0xce>
 80085f6:	6011      	str	r1, [r2, #0]
 80085f8:	e79a      	b.n	8008530 <_strtol_l.constprop.0+0x18>
 80085fa:	2430      	movs	r4, #48	; 0x30
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d1b5      	bne.n	800856c <_strtol_l.constprop.0+0x54>
 8008600:	2308      	movs	r3, #8
 8008602:	e7b3      	b.n	800856c <_strtol_l.constprop.0+0x54>
 8008604:	2c30      	cmp	r4, #48	; 0x30
 8008606:	d0a9      	beq.n	800855c <_strtol_l.constprop.0+0x44>
 8008608:	230a      	movs	r3, #10
 800860a:	e7af      	b.n	800856c <_strtol_l.constprop.0+0x54>
 800860c:	0800b901 	.word	0x0800b901

08008610 <strtol>:
 8008610:	4613      	mov	r3, r2
 8008612:	460a      	mov	r2, r1
 8008614:	4601      	mov	r1, r0
 8008616:	4802      	ldr	r0, [pc, #8]	; (8008620 <strtol+0x10>)
 8008618:	6800      	ldr	r0, [r0, #0]
 800861a:	f7ff bf7d 	b.w	8008518 <_strtol_l.constprop.0>
 800861e:	bf00      	nop
 8008620:	20000190 	.word	0x20000190

08008624 <__assert_func>:
 8008624:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008626:	4614      	mov	r4, r2
 8008628:	461a      	mov	r2, r3
 800862a:	4b09      	ldr	r3, [pc, #36]	; (8008650 <__assert_func+0x2c>)
 800862c:	4605      	mov	r5, r0
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	68d8      	ldr	r0, [r3, #12]
 8008632:	b14c      	cbz	r4, 8008648 <__assert_func+0x24>
 8008634:	4b07      	ldr	r3, [pc, #28]	; (8008654 <__assert_func+0x30>)
 8008636:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800863a:	9100      	str	r1, [sp, #0]
 800863c:	462b      	mov	r3, r5
 800863e:	4906      	ldr	r1, [pc, #24]	; (8008658 <__assert_func+0x34>)
 8008640:	f000 fe88 	bl	8009354 <fiprintf>
 8008644:	f002 fb7e 	bl	800ad44 <abort>
 8008648:	4b04      	ldr	r3, [pc, #16]	; (800865c <__assert_func+0x38>)
 800864a:	461c      	mov	r4, r3
 800864c:	e7f3      	b.n	8008636 <__assert_func+0x12>
 800864e:	bf00      	nop
 8008650:	20000190 	.word	0x20000190
 8008654:	0800b8c4 	.word	0x0800b8c4
 8008658:	0800b8d1 	.word	0x0800b8d1
 800865c:	0800b8ff 	.word	0x0800b8ff

08008660 <quorem>:
 8008660:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008664:	6903      	ldr	r3, [r0, #16]
 8008666:	690c      	ldr	r4, [r1, #16]
 8008668:	4607      	mov	r7, r0
 800866a:	42a3      	cmp	r3, r4
 800866c:	f2c0 8082 	blt.w	8008774 <quorem+0x114>
 8008670:	3c01      	subs	r4, #1
 8008672:	f100 0514 	add.w	r5, r0, #20
 8008676:	f101 0814 	add.w	r8, r1, #20
 800867a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800867e:	9301      	str	r3, [sp, #4]
 8008680:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008684:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008688:	3301      	adds	r3, #1
 800868a:	429a      	cmp	r2, r3
 800868c:	fbb2 f6f3 	udiv	r6, r2, r3
 8008690:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008694:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008698:	d331      	bcc.n	80086fe <quorem+0x9e>
 800869a:	f04f 0e00 	mov.w	lr, #0
 800869e:	4640      	mov	r0, r8
 80086a0:	46ac      	mov	ip, r5
 80086a2:	46f2      	mov	sl, lr
 80086a4:	f850 2b04 	ldr.w	r2, [r0], #4
 80086a8:	b293      	uxth	r3, r2
 80086aa:	fb06 e303 	mla	r3, r6, r3, lr
 80086ae:	0c12      	lsrs	r2, r2, #16
 80086b0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80086b4:	b29b      	uxth	r3, r3
 80086b6:	fb06 e202 	mla	r2, r6, r2, lr
 80086ba:	ebaa 0303 	sub.w	r3, sl, r3
 80086be:	f8dc a000 	ldr.w	sl, [ip]
 80086c2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80086c6:	fa1f fa8a 	uxth.w	sl, sl
 80086ca:	4453      	add	r3, sl
 80086cc:	f8dc a000 	ldr.w	sl, [ip]
 80086d0:	b292      	uxth	r2, r2
 80086d2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80086d6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80086da:	b29b      	uxth	r3, r3
 80086dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80086e0:	4581      	cmp	r9, r0
 80086e2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80086e6:	f84c 3b04 	str.w	r3, [ip], #4
 80086ea:	d2db      	bcs.n	80086a4 <quorem+0x44>
 80086ec:	f855 300b 	ldr.w	r3, [r5, fp]
 80086f0:	b92b      	cbnz	r3, 80086fe <quorem+0x9e>
 80086f2:	9b01      	ldr	r3, [sp, #4]
 80086f4:	3b04      	subs	r3, #4
 80086f6:	429d      	cmp	r5, r3
 80086f8:	461a      	mov	r2, r3
 80086fa:	d32f      	bcc.n	800875c <quorem+0xfc>
 80086fc:	613c      	str	r4, [r7, #16]
 80086fe:	4638      	mov	r0, r7
 8008700:	f001 fc94 	bl	800a02c <__mcmp>
 8008704:	2800      	cmp	r0, #0
 8008706:	db25      	blt.n	8008754 <quorem+0xf4>
 8008708:	4628      	mov	r0, r5
 800870a:	f04f 0c00 	mov.w	ip, #0
 800870e:	3601      	adds	r6, #1
 8008710:	f858 1b04 	ldr.w	r1, [r8], #4
 8008714:	f8d0 e000 	ldr.w	lr, [r0]
 8008718:	b28b      	uxth	r3, r1
 800871a:	ebac 0303 	sub.w	r3, ip, r3
 800871e:	fa1f f28e 	uxth.w	r2, lr
 8008722:	4413      	add	r3, r2
 8008724:	0c0a      	lsrs	r2, r1, #16
 8008726:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800872a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800872e:	b29b      	uxth	r3, r3
 8008730:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008734:	45c1      	cmp	r9, r8
 8008736:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800873a:	f840 3b04 	str.w	r3, [r0], #4
 800873e:	d2e7      	bcs.n	8008710 <quorem+0xb0>
 8008740:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008744:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008748:	b922      	cbnz	r2, 8008754 <quorem+0xf4>
 800874a:	3b04      	subs	r3, #4
 800874c:	429d      	cmp	r5, r3
 800874e:	461a      	mov	r2, r3
 8008750:	d30a      	bcc.n	8008768 <quorem+0x108>
 8008752:	613c      	str	r4, [r7, #16]
 8008754:	4630      	mov	r0, r6
 8008756:	b003      	add	sp, #12
 8008758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800875c:	6812      	ldr	r2, [r2, #0]
 800875e:	3b04      	subs	r3, #4
 8008760:	2a00      	cmp	r2, #0
 8008762:	d1cb      	bne.n	80086fc <quorem+0x9c>
 8008764:	3c01      	subs	r4, #1
 8008766:	e7c6      	b.n	80086f6 <quorem+0x96>
 8008768:	6812      	ldr	r2, [r2, #0]
 800876a:	3b04      	subs	r3, #4
 800876c:	2a00      	cmp	r2, #0
 800876e:	d1f0      	bne.n	8008752 <quorem+0xf2>
 8008770:	3c01      	subs	r4, #1
 8008772:	e7eb      	b.n	800874c <quorem+0xec>
 8008774:	2000      	movs	r0, #0
 8008776:	e7ee      	b.n	8008756 <quorem+0xf6>

08008778 <_dtoa_r>:
 8008778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800877c:	4616      	mov	r6, r2
 800877e:	461f      	mov	r7, r3
 8008780:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008782:	b099      	sub	sp, #100	; 0x64
 8008784:	4605      	mov	r5, r0
 8008786:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800878a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800878e:	b974      	cbnz	r4, 80087ae <_dtoa_r+0x36>
 8008790:	2010      	movs	r0, #16
 8008792:	f001 f95b 	bl	8009a4c <malloc>
 8008796:	4602      	mov	r2, r0
 8008798:	6268      	str	r0, [r5, #36]	; 0x24
 800879a:	b920      	cbnz	r0, 80087a6 <_dtoa_r+0x2e>
 800879c:	21ea      	movs	r1, #234	; 0xea
 800879e:	4ba8      	ldr	r3, [pc, #672]	; (8008a40 <_dtoa_r+0x2c8>)
 80087a0:	48a8      	ldr	r0, [pc, #672]	; (8008a44 <_dtoa_r+0x2cc>)
 80087a2:	f7ff ff3f 	bl	8008624 <__assert_func>
 80087a6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80087aa:	6004      	str	r4, [r0, #0]
 80087ac:	60c4      	str	r4, [r0, #12]
 80087ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80087b0:	6819      	ldr	r1, [r3, #0]
 80087b2:	b151      	cbz	r1, 80087ca <_dtoa_r+0x52>
 80087b4:	685a      	ldr	r2, [r3, #4]
 80087b6:	2301      	movs	r3, #1
 80087b8:	4093      	lsls	r3, r2
 80087ba:	604a      	str	r2, [r1, #4]
 80087bc:	608b      	str	r3, [r1, #8]
 80087be:	4628      	mov	r0, r5
 80087c0:	f001 f9ac 	bl	8009b1c <_Bfree>
 80087c4:	2200      	movs	r2, #0
 80087c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80087c8:	601a      	str	r2, [r3, #0]
 80087ca:	1e3b      	subs	r3, r7, #0
 80087cc:	bfaf      	iteee	ge
 80087ce:	2300      	movge	r3, #0
 80087d0:	2201      	movlt	r2, #1
 80087d2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80087d6:	9305      	strlt	r3, [sp, #20]
 80087d8:	bfa8      	it	ge
 80087da:	f8c8 3000 	strge.w	r3, [r8]
 80087de:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80087e2:	4b99      	ldr	r3, [pc, #612]	; (8008a48 <_dtoa_r+0x2d0>)
 80087e4:	bfb8      	it	lt
 80087e6:	f8c8 2000 	strlt.w	r2, [r8]
 80087ea:	ea33 0309 	bics.w	r3, r3, r9
 80087ee:	d119      	bne.n	8008824 <_dtoa_r+0xac>
 80087f0:	f242 730f 	movw	r3, #9999	; 0x270f
 80087f4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80087f6:	6013      	str	r3, [r2, #0]
 80087f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80087fc:	4333      	orrs	r3, r6
 80087fe:	f000 857f 	beq.w	8009300 <_dtoa_r+0xb88>
 8008802:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008804:	b953      	cbnz	r3, 800881c <_dtoa_r+0xa4>
 8008806:	4b91      	ldr	r3, [pc, #580]	; (8008a4c <_dtoa_r+0x2d4>)
 8008808:	e022      	b.n	8008850 <_dtoa_r+0xd8>
 800880a:	4b91      	ldr	r3, [pc, #580]	; (8008a50 <_dtoa_r+0x2d8>)
 800880c:	9303      	str	r3, [sp, #12]
 800880e:	3308      	adds	r3, #8
 8008810:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008812:	6013      	str	r3, [r2, #0]
 8008814:	9803      	ldr	r0, [sp, #12]
 8008816:	b019      	add	sp, #100	; 0x64
 8008818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800881c:	4b8b      	ldr	r3, [pc, #556]	; (8008a4c <_dtoa_r+0x2d4>)
 800881e:	9303      	str	r3, [sp, #12]
 8008820:	3303      	adds	r3, #3
 8008822:	e7f5      	b.n	8008810 <_dtoa_r+0x98>
 8008824:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008828:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800882c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008830:	2200      	movs	r2, #0
 8008832:	2300      	movs	r3, #0
 8008834:	f7f8 f8c2 	bl	80009bc <__aeabi_dcmpeq>
 8008838:	4680      	mov	r8, r0
 800883a:	b158      	cbz	r0, 8008854 <_dtoa_r+0xdc>
 800883c:	2301      	movs	r3, #1
 800883e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008840:	6013      	str	r3, [r2, #0]
 8008842:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008844:	2b00      	cmp	r3, #0
 8008846:	f000 8558 	beq.w	80092fa <_dtoa_r+0xb82>
 800884a:	4882      	ldr	r0, [pc, #520]	; (8008a54 <_dtoa_r+0x2dc>)
 800884c:	6018      	str	r0, [r3, #0]
 800884e:	1e43      	subs	r3, r0, #1
 8008850:	9303      	str	r3, [sp, #12]
 8008852:	e7df      	b.n	8008814 <_dtoa_r+0x9c>
 8008854:	ab16      	add	r3, sp, #88	; 0x58
 8008856:	9301      	str	r3, [sp, #4]
 8008858:	ab17      	add	r3, sp, #92	; 0x5c
 800885a:	9300      	str	r3, [sp, #0]
 800885c:	4628      	mov	r0, r5
 800885e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008862:	f001 fd05 	bl	800a270 <__d2b>
 8008866:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800886a:	4683      	mov	fp, r0
 800886c:	2c00      	cmp	r4, #0
 800886e:	d07f      	beq.n	8008970 <_dtoa_r+0x1f8>
 8008870:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008874:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008876:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800887a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800887e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8008882:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8008886:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800888a:	2200      	movs	r2, #0
 800888c:	4b72      	ldr	r3, [pc, #456]	; (8008a58 <_dtoa_r+0x2e0>)
 800888e:	f7f7 fc75 	bl	800017c <__aeabi_dsub>
 8008892:	a365      	add	r3, pc, #404	; (adr r3, 8008a28 <_dtoa_r+0x2b0>)
 8008894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008898:	f7f7 fe28 	bl	80004ec <__aeabi_dmul>
 800889c:	a364      	add	r3, pc, #400	; (adr r3, 8008a30 <_dtoa_r+0x2b8>)
 800889e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088a2:	f7f7 fc6d 	bl	8000180 <__adddf3>
 80088a6:	4606      	mov	r6, r0
 80088a8:	4620      	mov	r0, r4
 80088aa:	460f      	mov	r7, r1
 80088ac:	f7f7 fdb4 	bl	8000418 <__aeabi_i2d>
 80088b0:	a361      	add	r3, pc, #388	; (adr r3, 8008a38 <_dtoa_r+0x2c0>)
 80088b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088b6:	f7f7 fe19 	bl	80004ec <__aeabi_dmul>
 80088ba:	4602      	mov	r2, r0
 80088bc:	460b      	mov	r3, r1
 80088be:	4630      	mov	r0, r6
 80088c0:	4639      	mov	r1, r7
 80088c2:	f7f7 fc5d 	bl	8000180 <__adddf3>
 80088c6:	4606      	mov	r6, r0
 80088c8:	460f      	mov	r7, r1
 80088ca:	f7f8 f8bf 	bl	8000a4c <__aeabi_d2iz>
 80088ce:	2200      	movs	r2, #0
 80088d0:	4682      	mov	sl, r0
 80088d2:	2300      	movs	r3, #0
 80088d4:	4630      	mov	r0, r6
 80088d6:	4639      	mov	r1, r7
 80088d8:	f7f8 f87a 	bl	80009d0 <__aeabi_dcmplt>
 80088dc:	b148      	cbz	r0, 80088f2 <_dtoa_r+0x17a>
 80088de:	4650      	mov	r0, sl
 80088e0:	f7f7 fd9a 	bl	8000418 <__aeabi_i2d>
 80088e4:	4632      	mov	r2, r6
 80088e6:	463b      	mov	r3, r7
 80088e8:	f7f8 f868 	bl	80009bc <__aeabi_dcmpeq>
 80088ec:	b908      	cbnz	r0, 80088f2 <_dtoa_r+0x17a>
 80088ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 80088f2:	f1ba 0f16 	cmp.w	sl, #22
 80088f6:	d858      	bhi.n	80089aa <_dtoa_r+0x232>
 80088f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80088fc:	4b57      	ldr	r3, [pc, #348]	; (8008a5c <_dtoa_r+0x2e4>)
 80088fe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008906:	f7f8 f863 	bl	80009d0 <__aeabi_dcmplt>
 800890a:	2800      	cmp	r0, #0
 800890c:	d04f      	beq.n	80089ae <_dtoa_r+0x236>
 800890e:	2300      	movs	r3, #0
 8008910:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008914:	930f      	str	r3, [sp, #60]	; 0x3c
 8008916:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008918:	1b1c      	subs	r4, r3, r4
 800891a:	1e63      	subs	r3, r4, #1
 800891c:	9309      	str	r3, [sp, #36]	; 0x24
 800891e:	bf49      	itett	mi
 8008920:	f1c4 0301 	rsbmi	r3, r4, #1
 8008924:	2300      	movpl	r3, #0
 8008926:	9306      	strmi	r3, [sp, #24]
 8008928:	2300      	movmi	r3, #0
 800892a:	bf54      	ite	pl
 800892c:	9306      	strpl	r3, [sp, #24]
 800892e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8008930:	f1ba 0f00 	cmp.w	sl, #0
 8008934:	db3d      	blt.n	80089b2 <_dtoa_r+0x23a>
 8008936:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008938:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800893c:	4453      	add	r3, sl
 800893e:	9309      	str	r3, [sp, #36]	; 0x24
 8008940:	2300      	movs	r3, #0
 8008942:	930a      	str	r3, [sp, #40]	; 0x28
 8008944:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008946:	2b09      	cmp	r3, #9
 8008948:	f200 808c 	bhi.w	8008a64 <_dtoa_r+0x2ec>
 800894c:	2b05      	cmp	r3, #5
 800894e:	bfc4      	itt	gt
 8008950:	3b04      	subgt	r3, #4
 8008952:	9322      	strgt	r3, [sp, #136]	; 0x88
 8008954:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008956:	bfc8      	it	gt
 8008958:	2400      	movgt	r4, #0
 800895a:	f1a3 0302 	sub.w	r3, r3, #2
 800895e:	bfd8      	it	le
 8008960:	2401      	movle	r4, #1
 8008962:	2b03      	cmp	r3, #3
 8008964:	f200 808a 	bhi.w	8008a7c <_dtoa_r+0x304>
 8008968:	e8df f003 	tbb	[pc, r3]
 800896c:	5b4d4f2d 	.word	0x5b4d4f2d
 8008970:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8008974:	441c      	add	r4, r3
 8008976:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800897a:	2b20      	cmp	r3, #32
 800897c:	bfc3      	ittte	gt
 800897e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008982:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8008986:	fa09 f303 	lslgt.w	r3, r9, r3
 800898a:	f1c3 0320 	rsble	r3, r3, #32
 800898e:	bfc6      	itte	gt
 8008990:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008994:	4318      	orrgt	r0, r3
 8008996:	fa06 f003 	lslle.w	r0, r6, r3
 800899a:	f7f7 fd2d 	bl	80003f8 <__aeabi_ui2d>
 800899e:	2301      	movs	r3, #1
 80089a0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80089a4:	3c01      	subs	r4, #1
 80089a6:	9313      	str	r3, [sp, #76]	; 0x4c
 80089a8:	e76f      	b.n	800888a <_dtoa_r+0x112>
 80089aa:	2301      	movs	r3, #1
 80089ac:	e7b2      	b.n	8008914 <_dtoa_r+0x19c>
 80089ae:	900f      	str	r0, [sp, #60]	; 0x3c
 80089b0:	e7b1      	b.n	8008916 <_dtoa_r+0x19e>
 80089b2:	9b06      	ldr	r3, [sp, #24]
 80089b4:	eba3 030a 	sub.w	r3, r3, sl
 80089b8:	9306      	str	r3, [sp, #24]
 80089ba:	f1ca 0300 	rsb	r3, sl, #0
 80089be:	930a      	str	r3, [sp, #40]	; 0x28
 80089c0:	2300      	movs	r3, #0
 80089c2:	930e      	str	r3, [sp, #56]	; 0x38
 80089c4:	e7be      	b.n	8008944 <_dtoa_r+0x1cc>
 80089c6:	2300      	movs	r3, #0
 80089c8:	930b      	str	r3, [sp, #44]	; 0x2c
 80089ca:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	dc58      	bgt.n	8008a82 <_dtoa_r+0x30a>
 80089d0:	f04f 0901 	mov.w	r9, #1
 80089d4:	464b      	mov	r3, r9
 80089d6:	f8cd 9020 	str.w	r9, [sp, #32]
 80089da:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 80089de:	2200      	movs	r2, #0
 80089e0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80089e2:	6042      	str	r2, [r0, #4]
 80089e4:	2204      	movs	r2, #4
 80089e6:	f102 0614 	add.w	r6, r2, #20
 80089ea:	429e      	cmp	r6, r3
 80089ec:	6841      	ldr	r1, [r0, #4]
 80089ee:	d94e      	bls.n	8008a8e <_dtoa_r+0x316>
 80089f0:	4628      	mov	r0, r5
 80089f2:	f001 f853 	bl	8009a9c <_Balloc>
 80089f6:	9003      	str	r0, [sp, #12]
 80089f8:	2800      	cmp	r0, #0
 80089fa:	d14c      	bne.n	8008a96 <_dtoa_r+0x31e>
 80089fc:	4602      	mov	r2, r0
 80089fe:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008a02:	4b17      	ldr	r3, [pc, #92]	; (8008a60 <_dtoa_r+0x2e8>)
 8008a04:	e6cc      	b.n	80087a0 <_dtoa_r+0x28>
 8008a06:	2301      	movs	r3, #1
 8008a08:	e7de      	b.n	80089c8 <_dtoa_r+0x250>
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	930b      	str	r3, [sp, #44]	; 0x2c
 8008a0e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008a10:	eb0a 0903 	add.w	r9, sl, r3
 8008a14:	f109 0301 	add.w	r3, r9, #1
 8008a18:	2b01      	cmp	r3, #1
 8008a1a:	9308      	str	r3, [sp, #32]
 8008a1c:	bfb8      	it	lt
 8008a1e:	2301      	movlt	r3, #1
 8008a20:	e7dd      	b.n	80089de <_dtoa_r+0x266>
 8008a22:	2301      	movs	r3, #1
 8008a24:	e7f2      	b.n	8008a0c <_dtoa_r+0x294>
 8008a26:	bf00      	nop
 8008a28:	636f4361 	.word	0x636f4361
 8008a2c:	3fd287a7 	.word	0x3fd287a7
 8008a30:	8b60c8b3 	.word	0x8b60c8b3
 8008a34:	3fc68a28 	.word	0x3fc68a28
 8008a38:	509f79fb 	.word	0x509f79fb
 8008a3c:	3fd34413 	.word	0x3fd34413
 8008a40:	0800b850 	.word	0x0800b850
 8008a44:	0800ba0e 	.word	0x0800ba0e
 8008a48:	7ff00000 	.word	0x7ff00000
 8008a4c:	0800ba0a 	.word	0x0800ba0a
 8008a50:	0800ba01 	.word	0x0800ba01
 8008a54:	0800b7d9 	.word	0x0800b7d9
 8008a58:	3ff80000 	.word	0x3ff80000
 8008a5c:	0800bb78 	.word	0x0800bb78
 8008a60:	0800ba69 	.word	0x0800ba69
 8008a64:	2401      	movs	r4, #1
 8008a66:	2300      	movs	r3, #0
 8008a68:	940b      	str	r4, [sp, #44]	; 0x2c
 8008a6a:	9322      	str	r3, [sp, #136]	; 0x88
 8008a6c:	f04f 39ff 	mov.w	r9, #4294967295
 8008a70:	2200      	movs	r2, #0
 8008a72:	2312      	movs	r3, #18
 8008a74:	f8cd 9020 	str.w	r9, [sp, #32]
 8008a78:	9223      	str	r2, [sp, #140]	; 0x8c
 8008a7a:	e7b0      	b.n	80089de <_dtoa_r+0x266>
 8008a7c:	2301      	movs	r3, #1
 8008a7e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008a80:	e7f4      	b.n	8008a6c <_dtoa_r+0x2f4>
 8008a82:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8008a86:	464b      	mov	r3, r9
 8008a88:	f8cd 9020 	str.w	r9, [sp, #32]
 8008a8c:	e7a7      	b.n	80089de <_dtoa_r+0x266>
 8008a8e:	3101      	adds	r1, #1
 8008a90:	6041      	str	r1, [r0, #4]
 8008a92:	0052      	lsls	r2, r2, #1
 8008a94:	e7a7      	b.n	80089e6 <_dtoa_r+0x26e>
 8008a96:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008a98:	9a03      	ldr	r2, [sp, #12]
 8008a9a:	601a      	str	r2, [r3, #0]
 8008a9c:	9b08      	ldr	r3, [sp, #32]
 8008a9e:	2b0e      	cmp	r3, #14
 8008aa0:	f200 80a8 	bhi.w	8008bf4 <_dtoa_r+0x47c>
 8008aa4:	2c00      	cmp	r4, #0
 8008aa6:	f000 80a5 	beq.w	8008bf4 <_dtoa_r+0x47c>
 8008aaa:	f1ba 0f00 	cmp.w	sl, #0
 8008aae:	dd34      	ble.n	8008b1a <_dtoa_r+0x3a2>
 8008ab0:	4a9a      	ldr	r2, [pc, #616]	; (8008d1c <_dtoa_r+0x5a4>)
 8008ab2:	f00a 030f 	and.w	r3, sl, #15
 8008ab6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008aba:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008abe:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008ac2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008ac6:	ea4f 142a 	mov.w	r4, sl, asr #4
 8008aca:	d016      	beq.n	8008afa <_dtoa_r+0x382>
 8008acc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008ad0:	4b93      	ldr	r3, [pc, #588]	; (8008d20 <_dtoa_r+0x5a8>)
 8008ad2:	2703      	movs	r7, #3
 8008ad4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008ad8:	f7f7 fe32 	bl	8000740 <__aeabi_ddiv>
 8008adc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008ae0:	f004 040f 	and.w	r4, r4, #15
 8008ae4:	4e8e      	ldr	r6, [pc, #568]	; (8008d20 <_dtoa_r+0x5a8>)
 8008ae6:	b954      	cbnz	r4, 8008afe <_dtoa_r+0x386>
 8008ae8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008aec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008af0:	f7f7 fe26 	bl	8000740 <__aeabi_ddiv>
 8008af4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008af8:	e029      	b.n	8008b4e <_dtoa_r+0x3d6>
 8008afa:	2702      	movs	r7, #2
 8008afc:	e7f2      	b.n	8008ae4 <_dtoa_r+0x36c>
 8008afe:	07e1      	lsls	r1, r4, #31
 8008b00:	d508      	bpl.n	8008b14 <_dtoa_r+0x39c>
 8008b02:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008b06:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008b0a:	f7f7 fcef 	bl	80004ec <__aeabi_dmul>
 8008b0e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008b12:	3701      	adds	r7, #1
 8008b14:	1064      	asrs	r4, r4, #1
 8008b16:	3608      	adds	r6, #8
 8008b18:	e7e5      	b.n	8008ae6 <_dtoa_r+0x36e>
 8008b1a:	f000 80a5 	beq.w	8008c68 <_dtoa_r+0x4f0>
 8008b1e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008b22:	f1ca 0400 	rsb	r4, sl, #0
 8008b26:	4b7d      	ldr	r3, [pc, #500]	; (8008d1c <_dtoa_r+0x5a4>)
 8008b28:	f004 020f 	and.w	r2, r4, #15
 8008b2c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b34:	f7f7 fcda 	bl	80004ec <__aeabi_dmul>
 8008b38:	2702      	movs	r7, #2
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008b40:	4e77      	ldr	r6, [pc, #476]	; (8008d20 <_dtoa_r+0x5a8>)
 8008b42:	1124      	asrs	r4, r4, #4
 8008b44:	2c00      	cmp	r4, #0
 8008b46:	f040 8084 	bne.w	8008c52 <_dtoa_r+0x4da>
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d1d2      	bne.n	8008af4 <_dtoa_r+0x37c>
 8008b4e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	f000 808b 	beq.w	8008c6c <_dtoa_r+0x4f4>
 8008b56:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008b5a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008b5e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008b62:	2200      	movs	r2, #0
 8008b64:	4b6f      	ldr	r3, [pc, #444]	; (8008d24 <_dtoa_r+0x5ac>)
 8008b66:	f7f7 ff33 	bl	80009d0 <__aeabi_dcmplt>
 8008b6a:	2800      	cmp	r0, #0
 8008b6c:	d07e      	beq.n	8008c6c <_dtoa_r+0x4f4>
 8008b6e:	9b08      	ldr	r3, [sp, #32]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d07b      	beq.n	8008c6c <_dtoa_r+0x4f4>
 8008b74:	f1b9 0f00 	cmp.w	r9, #0
 8008b78:	dd38      	ble.n	8008bec <_dtoa_r+0x474>
 8008b7a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008b7e:	2200      	movs	r2, #0
 8008b80:	4b69      	ldr	r3, [pc, #420]	; (8008d28 <_dtoa_r+0x5b0>)
 8008b82:	f7f7 fcb3 	bl	80004ec <__aeabi_dmul>
 8008b86:	464c      	mov	r4, r9
 8008b88:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008b8c:	f10a 38ff 	add.w	r8, sl, #4294967295
 8008b90:	3701      	adds	r7, #1
 8008b92:	4638      	mov	r0, r7
 8008b94:	f7f7 fc40 	bl	8000418 <__aeabi_i2d>
 8008b98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b9c:	f7f7 fca6 	bl	80004ec <__aeabi_dmul>
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	4b62      	ldr	r3, [pc, #392]	; (8008d2c <_dtoa_r+0x5b4>)
 8008ba4:	f7f7 faec 	bl	8000180 <__adddf3>
 8008ba8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8008bac:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008bb0:	9611      	str	r6, [sp, #68]	; 0x44
 8008bb2:	2c00      	cmp	r4, #0
 8008bb4:	d15d      	bne.n	8008c72 <_dtoa_r+0x4fa>
 8008bb6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008bba:	2200      	movs	r2, #0
 8008bbc:	4b5c      	ldr	r3, [pc, #368]	; (8008d30 <_dtoa_r+0x5b8>)
 8008bbe:	f7f7 fadd 	bl	800017c <__aeabi_dsub>
 8008bc2:	4602      	mov	r2, r0
 8008bc4:	460b      	mov	r3, r1
 8008bc6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008bca:	4633      	mov	r3, r6
 8008bcc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008bce:	f7f7 ff1d 	bl	8000a0c <__aeabi_dcmpgt>
 8008bd2:	2800      	cmp	r0, #0
 8008bd4:	f040 829c 	bne.w	8009110 <_dtoa_r+0x998>
 8008bd8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008bdc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008bde:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008be2:	f7f7 fef5 	bl	80009d0 <__aeabi_dcmplt>
 8008be6:	2800      	cmp	r0, #0
 8008be8:	f040 8290 	bne.w	800910c <_dtoa_r+0x994>
 8008bec:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8008bf0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008bf4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	f2c0 8152 	blt.w	8008ea0 <_dtoa_r+0x728>
 8008bfc:	f1ba 0f0e 	cmp.w	sl, #14
 8008c00:	f300 814e 	bgt.w	8008ea0 <_dtoa_r+0x728>
 8008c04:	4b45      	ldr	r3, [pc, #276]	; (8008d1c <_dtoa_r+0x5a4>)
 8008c06:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008c0a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008c0e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8008c12:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	f280 80db 	bge.w	8008dd0 <_dtoa_r+0x658>
 8008c1a:	9b08      	ldr	r3, [sp, #32]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	f300 80d7 	bgt.w	8008dd0 <_dtoa_r+0x658>
 8008c22:	f040 8272 	bne.w	800910a <_dtoa_r+0x992>
 8008c26:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	4b40      	ldr	r3, [pc, #256]	; (8008d30 <_dtoa_r+0x5b8>)
 8008c2e:	f7f7 fc5d 	bl	80004ec <__aeabi_dmul>
 8008c32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008c36:	f7f7 fedf 	bl	80009f8 <__aeabi_dcmpge>
 8008c3a:	9c08      	ldr	r4, [sp, #32]
 8008c3c:	4626      	mov	r6, r4
 8008c3e:	2800      	cmp	r0, #0
 8008c40:	f040 8248 	bne.w	80090d4 <_dtoa_r+0x95c>
 8008c44:	2331      	movs	r3, #49	; 0x31
 8008c46:	9f03      	ldr	r7, [sp, #12]
 8008c48:	f10a 0a01 	add.w	sl, sl, #1
 8008c4c:	f807 3b01 	strb.w	r3, [r7], #1
 8008c50:	e244      	b.n	80090dc <_dtoa_r+0x964>
 8008c52:	07e2      	lsls	r2, r4, #31
 8008c54:	d505      	bpl.n	8008c62 <_dtoa_r+0x4ea>
 8008c56:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008c5a:	f7f7 fc47 	bl	80004ec <__aeabi_dmul>
 8008c5e:	2301      	movs	r3, #1
 8008c60:	3701      	adds	r7, #1
 8008c62:	1064      	asrs	r4, r4, #1
 8008c64:	3608      	adds	r6, #8
 8008c66:	e76d      	b.n	8008b44 <_dtoa_r+0x3cc>
 8008c68:	2702      	movs	r7, #2
 8008c6a:	e770      	b.n	8008b4e <_dtoa_r+0x3d6>
 8008c6c:	46d0      	mov	r8, sl
 8008c6e:	9c08      	ldr	r4, [sp, #32]
 8008c70:	e78f      	b.n	8008b92 <_dtoa_r+0x41a>
 8008c72:	9903      	ldr	r1, [sp, #12]
 8008c74:	4b29      	ldr	r3, [pc, #164]	; (8008d1c <_dtoa_r+0x5a4>)
 8008c76:	4421      	add	r1, r4
 8008c78:	9112      	str	r1, [sp, #72]	; 0x48
 8008c7a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008c7c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008c80:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8008c84:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008c88:	2900      	cmp	r1, #0
 8008c8a:	d055      	beq.n	8008d38 <_dtoa_r+0x5c0>
 8008c8c:	2000      	movs	r0, #0
 8008c8e:	4929      	ldr	r1, [pc, #164]	; (8008d34 <_dtoa_r+0x5bc>)
 8008c90:	f7f7 fd56 	bl	8000740 <__aeabi_ddiv>
 8008c94:	463b      	mov	r3, r7
 8008c96:	4632      	mov	r2, r6
 8008c98:	f7f7 fa70 	bl	800017c <__aeabi_dsub>
 8008c9c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008ca0:	9f03      	ldr	r7, [sp, #12]
 8008ca2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008ca6:	f7f7 fed1 	bl	8000a4c <__aeabi_d2iz>
 8008caa:	4604      	mov	r4, r0
 8008cac:	f7f7 fbb4 	bl	8000418 <__aeabi_i2d>
 8008cb0:	4602      	mov	r2, r0
 8008cb2:	460b      	mov	r3, r1
 8008cb4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008cb8:	f7f7 fa60 	bl	800017c <__aeabi_dsub>
 8008cbc:	4602      	mov	r2, r0
 8008cbe:	460b      	mov	r3, r1
 8008cc0:	3430      	adds	r4, #48	; 0x30
 8008cc2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008cc6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008cca:	f807 4b01 	strb.w	r4, [r7], #1
 8008cce:	f7f7 fe7f 	bl	80009d0 <__aeabi_dcmplt>
 8008cd2:	2800      	cmp	r0, #0
 8008cd4:	d174      	bne.n	8008dc0 <_dtoa_r+0x648>
 8008cd6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008cda:	2000      	movs	r0, #0
 8008cdc:	4911      	ldr	r1, [pc, #68]	; (8008d24 <_dtoa_r+0x5ac>)
 8008cde:	f7f7 fa4d 	bl	800017c <__aeabi_dsub>
 8008ce2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008ce6:	f7f7 fe73 	bl	80009d0 <__aeabi_dcmplt>
 8008cea:	2800      	cmp	r0, #0
 8008cec:	f040 80b7 	bne.w	8008e5e <_dtoa_r+0x6e6>
 8008cf0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008cf2:	429f      	cmp	r7, r3
 8008cf4:	f43f af7a 	beq.w	8008bec <_dtoa_r+0x474>
 8008cf8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	4b0a      	ldr	r3, [pc, #40]	; (8008d28 <_dtoa_r+0x5b0>)
 8008d00:	f7f7 fbf4 	bl	80004ec <__aeabi_dmul>
 8008d04:	2200      	movs	r2, #0
 8008d06:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008d0a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008d0e:	4b06      	ldr	r3, [pc, #24]	; (8008d28 <_dtoa_r+0x5b0>)
 8008d10:	f7f7 fbec 	bl	80004ec <__aeabi_dmul>
 8008d14:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008d18:	e7c3      	b.n	8008ca2 <_dtoa_r+0x52a>
 8008d1a:	bf00      	nop
 8008d1c:	0800bb78 	.word	0x0800bb78
 8008d20:	0800bb50 	.word	0x0800bb50
 8008d24:	3ff00000 	.word	0x3ff00000
 8008d28:	40240000 	.word	0x40240000
 8008d2c:	401c0000 	.word	0x401c0000
 8008d30:	40140000 	.word	0x40140000
 8008d34:	3fe00000 	.word	0x3fe00000
 8008d38:	4630      	mov	r0, r6
 8008d3a:	4639      	mov	r1, r7
 8008d3c:	f7f7 fbd6 	bl	80004ec <__aeabi_dmul>
 8008d40:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008d42:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008d46:	9c03      	ldr	r4, [sp, #12]
 8008d48:	9314      	str	r3, [sp, #80]	; 0x50
 8008d4a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008d4e:	f7f7 fe7d 	bl	8000a4c <__aeabi_d2iz>
 8008d52:	9015      	str	r0, [sp, #84]	; 0x54
 8008d54:	f7f7 fb60 	bl	8000418 <__aeabi_i2d>
 8008d58:	4602      	mov	r2, r0
 8008d5a:	460b      	mov	r3, r1
 8008d5c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008d60:	f7f7 fa0c 	bl	800017c <__aeabi_dsub>
 8008d64:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008d66:	4606      	mov	r6, r0
 8008d68:	3330      	adds	r3, #48	; 0x30
 8008d6a:	f804 3b01 	strb.w	r3, [r4], #1
 8008d6e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008d70:	460f      	mov	r7, r1
 8008d72:	429c      	cmp	r4, r3
 8008d74:	f04f 0200 	mov.w	r2, #0
 8008d78:	d124      	bne.n	8008dc4 <_dtoa_r+0x64c>
 8008d7a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008d7e:	4bb0      	ldr	r3, [pc, #704]	; (8009040 <_dtoa_r+0x8c8>)
 8008d80:	f7f7 f9fe 	bl	8000180 <__adddf3>
 8008d84:	4602      	mov	r2, r0
 8008d86:	460b      	mov	r3, r1
 8008d88:	4630      	mov	r0, r6
 8008d8a:	4639      	mov	r1, r7
 8008d8c:	f7f7 fe3e 	bl	8000a0c <__aeabi_dcmpgt>
 8008d90:	2800      	cmp	r0, #0
 8008d92:	d163      	bne.n	8008e5c <_dtoa_r+0x6e4>
 8008d94:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008d98:	2000      	movs	r0, #0
 8008d9a:	49a9      	ldr	r1, [pc, #676]	; (8009040 <_dtoa_r+0x8c8>)
 8008d9c:	f7f7 f9ee 	bl	800017c <__aeabi_dsub>
 8008da0:	4602      	mov	r2, r0
 8008da2:	460b      	mov	r3, r1
 8008da4:	4630      	mov	r0, r6
 8008da6:	4639      	mov	r1, r7
 8008da8:	f7f7 fe12 	bl	80009d0 <__aeabi_dcmplt>
 8008dac:	2800      	cmp	r0, #0
 8008dae:	f43f af1d 	beq.w	8008bec <_dtoa_r+0x474>
 8008db2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8008db4:	1e7b      	subs	r3, r7, #1
 8008db6:	9314      	str	r3, [sp, #80]	; 0x50
 8008db8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8008dbc:	2b30      	cmp	r3, #48	; 0x30
 8008dbe:	d0f8      	beq.n	8008db2 <_dtoa_r+0x63a>
 8008dc0:	46c2      	mov	sl, r8
 8008dc2:	e03b      	b.n	8008e3c <_dtoa_r+0x6c4>
 8008dc4:	4b9f      	ldr	r3, [pc, #636]	; (8009044 <_dtoa_r+0x8cc>)
 8008dc6:	f7f7 fb91 	bl	80004ec <__aeabi_dmul>
 8008dca:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008dce:	e7bc      	b.n	8008d4a <_dtoa_r+0x5d2>
 8008dd0:	9f03      	ldr	r7, [sp, #12]
 8008dd2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8008dd6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008dda:	4640      	mov	r0, r8
 8008ddc:	4649      	mov	r1, r9
 8008dde:	f7f7 fcaf 	bl	8000740 <__aeabi_ddiv>
 8008de2:	f7f7 fe33 	bl	8000a4c <__aeabi_d2iz>
 8008de6:	4604      	mov	r4, r0
 8008de8:	f7f7 fb16 	bl	8000418 <__aeabi_i2d>
 8008dec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008df0:	f7f7 fb7c 	bl	80004ec <__aeabi_dmul>
 8008df4:	4602      	mov	r2, r0
 8008df6:	460b      	mov	r3, r1
 8008df8:	4640      	mov	r0, r8
 8008dfa:	4649      	mov	r1, r9
 8008dfc:	f7f7 f9be 	bl	800017c <__aeabi_dsub>
 8008e00:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8008e04:	f807 6b01 	strb.w	r6, [r7], #1
 8008e08:	9e03      	ldr	r6, [sp, #12]
 8008e0a:	f8dd c020 	ldr.w	ip, [sp, #32]
 8008e0e:	1bbe      	subs	r6, r7, r6
 8008e10:	45b4      	cmp	ip, r6
 8008e12:	4602      	mov	r2, r0
 8008e14:	460b      	mov	r3, r1
 8008e16:	d136      	bne.n	8008e86 <_dtoa_r+0x70e>
 8008e18:	f7f7 f9b2 	bl	8000180 <__adddf3>
 8008e1c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008e20:	4680      	mov	r8, r0
 8008e22:	4689      	mov	r9, r1
 8008e24:	f7f7 fdf2 	bl	8000a0c <__aeabi_dcmpgt>
 8008e28:	bb58      	cbnz	r0, 8008e82 <_dtoa_r+0x70a>
 8008e2a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008e2e:	4640      	mov	r0, r8
 8008e30:	4649      	mov	r1, r9
 8008e32:	f7f7 fdc3 	bl	80009bc <__aeabi_dcmpeq>
 8008e36:	b108      	cbz	r0, 8008e3c <_dtoa_r+0x6c4>
 8008e38:	07e1      	lsls	r1, r4, #31
 8008e3a:	d422      	bmi.n	8008e82 <_dtoa_r+0x70a>
 8008e3c:	4628      	mov	r0, r5
 8008e3e:	4659      	mov	r1, fp
 8008e40:	f000 fe6c 	bl	8009b1c <_Bfree>
 8008e44:	2300      	movs	r3, #0
 8008e46:	703b      	strb	r3, [r7, #0]
 8008e48:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008e4a:	f10a 0001 	add.w	r0, sl, #1
 8008e4e:	6018      	str	r0, [r3, #0]
 8008e50:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	f43f acde 	beq.w	8008814 <_dtoa_r+0x9c>
 8008e58:	601f      	str	r7, [r3, #0]
 8008e5a:	e4db      	b.n	8008814 <_dtoa_r+0x9c>
 8008e5c:	4627      	mov	r7, r4
 8008e5e:	463b      	mov	r3, r7
 8008e60:	461f      	mov	r7, r3
 8008e62:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008e66:	2a39      	cmp	r2, #57	; 0x39
 8008e68:	d107      	bne.n	8008e7a <_dtoa_r+0x702>
 8008e6a:	9a03      	ldr	r2, [sp, #12]
 8008e6c:	429a      	cmp	r2, r3
 8008e6e:	d1f7      	bne.n	8008e60 <_dtoa_r+0x6e8>
 8008e70:	2230      	movs	r2, #48	; 0x30
 8008e72:	9903      	ldr	r1, [sp, #12]
 8008e74:	f108 0801 	add.w	r8, r8, #1
 8008e78:	700a      	strb	r2, [r1, #0]
 8008e7a:	781a      	ldrb	r2, [r3, #0]
 8008e7c:	3201      	adds	r2, #1
 8008e7e:	701a      	strb	r2, [r3, #0]
 8008e80:	e79e      	b.n	8008dc0 <_dtoa_r+0x648>
 8008e82:	46d0      	mov	r8, sl
 8008e84:	e7eb      	b.n	8008e5e <_dtoa_r+0x6e6>
 8008e86:	2200      	movs	r2, #0
 8008e88:	4b6e      	ldr	r3, [pc, #440]	; (8009044 <_dtoa_r+0x8cc>)
 8008e8a:	f7f7 fb2f 	bl	80004ec <__aeabi_dmul>
 8008e8e:	2200      	movs	r2, #0
 8008e90:	2300      	movs	r3, #0
 8008e92:	4680      	mov	r8, r0
 8008e94:	4689      	mov	r9, r1
 8008e96:	f7f7 fd91 	bl	80009bc <__aeabi_dcmpeq>
 8008e9a:	2800      	cmp	r0, #0
 8008e9c:	d09b      	beq.n	8008dd6 <_dtoa_r+0x65e>
 8008e9e:	e7cd      	b.n	8008e3c <_dtoa_r+0x6c4>
 8008ea0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008ea2:	2a00      	cmp	r2, #0
 8008ea4:	f000 80d0 	beq.w	8009048 <_dtoa_r+0x8d0>
 8008ea8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008eaa:	2a01      	cmp	r2, #1
 8008eac:	f300 80ae 	bgt.w	800900c <_dtoa_r+0x894>
 8008eb0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008eb2:	2a00      	cmp	r2, #0
 8008eb4:	f000 80a6 	beq.w	8009004 <_dtoa_r+0x88c>
 8008eb8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008ebc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008ebe:	9f06      	ldr	r7, [sp, #24]
 8008ec0:	9a06      	ldr	r2, [sp, #24]
 8008ec2:	2101      	movs	r1, #1
 8008ec4:	441a      	add	r2, r3
 8008ec6:	9206      	str	r2, [sp, #24]
 8008ec8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008eca:	4628      	mov	r0, r5
 8008ecc:	441a      	add	r2, r3
 8008ece:	9209      	str	r2, [sp, #36]	; 0x24
 8008ed0:	f000 ff24 	bl	8009d1c <__i2b>
 8008ed4:	4606      	mov	r6, r0
 8008ed6:	2f00      	cmp	r7, #0
 8008ed8:	dd0c      	ble.n	8008ef4 <_dtoa_r+0x77c>
 8008eda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	dd09      	ble.n	8008ef4 <_dtoa_r+0x77c>
 8008ee0:	42bb      	cmp	r3, r7
 8008ee2:	bfa8      	it	ge
 8008ee4:	463b      	movge	r3, r7
 8008ee6:	9a06      	ldr	r2, [sp, #24]
 8008ee8:	1aff      	subs	r7, r7, r3
 8008eea:	1ad2      	subs	r2, r2, r3
 8008eec:	9206      	str	r2, [sp, #24]
 8008eee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ef0:	1ad3      	subs	r3, r2, r3
 8008ef2:	9309      	str	r3, [sp, #36]	; 0x24
 8008ef4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ef6:	b1f3      	cbz	r3, 8008f36 <_dtoa_r+0x7be>
 8008ef8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	f000 80a8 	beq.w	8009050 <_dtoa_r+0x8d8>
 8008f00:	2c00      	cmp	r4, #0
 8008f02:	dd10      	ble.n	8008f26 <_dtoa_r+0x7ae>
 8008f04:	4631      	mov	r1, r6
 8008f06:	4622      	mov	r2, r4
 8008f08:	4628      	mov	r0, r5
 8008f0a:	f000 ffc5 	bl	8009e98 <__pow5mult>
 8008f0e:	465a      	mov	r2, fp
 8008f10:	4601      	mov	r1, r0
 8008f12:	4606      	mov	r6, r0
 8008f14:	4628      	mov	r0, r5
 8008f16:	f000 ff17 	bl	8009d48 <__multiply>
 8008f1a:	4680      	mov	r8, r0
 8008f1c:	4659      	mov	r1, fp
 8008f1e:	4628      	mov	r0, r5
 8008f20:	f000 fdfc 	bl	8009b1c <_Bfree>
 8008f24:	46c3      	mov	fp, r8
 8008f26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f28:	1b1a      	subs	r2, r3, r4
 8008f2a:	d004      	beq.n	8008f36 <_dtoa_r+0x7be>
 8008f2c:	4659      	mov	r1, fp
 8008f2e:	4628      	mov	r0, r5
 8008f30:	f000 ffb2 	bl	8009e98 <__pow5mult>
 8008f34:	4683      	mov	fp, r0
 8008f36:	2101      	movs	r1, #1
 8008f38:	4628      	mov	r0, r5
 8008f3a:	f000 feef 	bl	8009d1c <__i2b>
 8008f3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008f40:	4604      	mov	r4, r0
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	f340 8086 	ble.w	8009054 <_dtoa_r+0x8dc>
 8008f48:	461a      	mov	r2, r3
 8008f4a:	4601      	mov	r1, r0
 8008f4c:	4628      	mov	r0, r5
 8008f4e:	f000 ffa3 	bl	8009e98 <__pow5mult>
 8008f52:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008f54:	4604      	mov	r4, r0
 8008f56:	2b01      	cmp	r3, #1
 8008f58:	dd7f      	ble.n	800905a <_dtoa_r+0x8e2>
 8008f5a:	f04f 0800 	mov.w	r8, #0
 8008f5e:	6923      	ldr	r3, [r4, #16]
 8008f60:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008f64:	6918      	ldr	r0, [r3, #16]
 8008f66:	f000 fe8b 	bl	8009c80 <__hi0bits>
 8008f6a:	f1c0 0020 	rsb	r0, r0, #32
 8008f6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f70:	4418      	add	r0, r3
 8008f72:	f010 001f 	ands.w	r0, r0, #31
 8008f76:	f000 8092 	beq.w	800909e <_dtoa_r+0x926>
 8008f7a:	f1c0 0320 	rsb	r3, r0, #32
 8008f7e:	2b04      	cmp	r3, #4
 8008f80:	f340 808a 	ble.w	8009098 <_dtoa_r+0x920>
 8008f84:	f1c0 001c 	rsb	r0, r0, #28
 8008f88:	9b06      	ldr	r3, [sp, #24]
 8008f8a:	4407      	add	r7, r0
 8008f8c:	4403      	add	r3, r0
 8008f8e:	9306      	str	r3, [sp, #24]
 8008f90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f92:	4403      	add	r3, r0
 8008f94:	9309      	str	r3, [sp, #36]	; 0x24
 8008f96:	9b06      	ldr	r3, [sp, #24]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	dd05      	ble.n	8008fa8 <_dtoa_r+0x830>
 8008f9c:	4659      	mov	r1, fp
 8008f9e:	461a      	mov	r2, r3
 8008fa0:	4628      	mov	r0, r5
 8008fa2:	f000 ffd3 	bl	8009f4c <__lshift>
 8008fa6:	4683      	mov	fp, r0
 8008fa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	dd05      	ble.n	8008fba <_dtoa_r+0x842>
 8008fae:	4621      	mov	r1, r4
 8008fb0:	461a      	mov	r2, r3
 8008fb2:	4628      	mov	r0, r5
 8008fb4:	f000 ffca 	bl	8009f4c <__lshift>
 8008fb8:	4604      	mov	r4, r0
 8008fba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d070      	beq.n	80090a2 <_dtoa_r+0x92a>
 8008fc0:	4621      	mov	r1, r4
 8008fc2:	4658      	mov	r0, fp
 8008fc4:	f001 f832 	bl	800a02c <__mcmp>
 8008fc8:	2800      	cmp	r0, #0
 8008fca:	da6a      	bge.n	80090a2 <_dtoa_r+0x92a>
 8008fcc:	2300      	movs	r3, #0
 8008fce:	4659      	mov	r1, fp
 8008fd0:	220a      	movs	r2, #10
 8008fd2:	4628      	mov	r0, r5
 8008fd4:	f000 fdc4 	bl	8009b60 <__multadd>
 8008fd8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008fda:	4683      	mov	fp, r0
 8008fdc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	f000 8194 	beq.w	800930e <_dtoa_r+0xb96>
 8008fe6:	4631      	mov	r1, r6
 8008fe8:	2300      	movs	r3, #0
 8008fea:	220a      	movs	r2, #10
 8008fec:	4628      	mov	r0, r5
 8008fee:	f000 fdb7 	bl	8009b60 <__multadd>
 8008ff2:	f1b9 0f00 	cmp.w	r9, #0
 8008ff6:	4606      	mov	r6, r0
 8008ff8:	f300 8093 	bgt.w	8009122 <_dtoa_r+0x9aa>
 8008ffc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008ffe:	2b02      	cmp	r3, #2
 8009000:	dc57      	bgt.n	80090b2 <_dtoa_r+0x93a>
 8009002:	e08e      	b.n	8009122 <_dtoa_r+0x9aa>
 8009004:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009006:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800900a:	e757      	b.n	8008ebc <_dtoa_r+0x744>
 800900c:	9b08      	ldr	r3, [sp, #32]
 800900e:	1e5c      	subs	r4, r3, #1
 8009010:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009012:	42a3      	cmp	r3, r4
 8009014:	bfb7      	itett	lt
 8009016:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009018:	1b1c      	subge	r4, r3, r4
 800901a:	1ae2      	sublt	r2, r4, r3
 800901c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800901e:	bfbe      	ittt	lt
 8009020:	940a      	strlt	r4, [sp, #40]	; 0x28
 8009022:	189b      	addlt	r3, r3, r2
 8009024:	930e      	strlt	r3, [sp, #56]	; 0x38
 8009026:	9b08      	ldr	r3, [sp, #32]
 8009028:	bfb8      	it	lt
 800902a:	2400      	movlt	r4, #0
 800902c:	2b00      	cmp	r3, #0
 800902e:	bfbb      	ittet	lt
 8009030:	9b06      	ldrlt	r3, [sp, #24]
 8009032:	9a08      	ldrlt	r2, [sp, #32]
 8009034:	9f06      	ldrge	r7, [sp, #24]
 8009036:	1a9f      	sublt	r7, r3, r2
 8009038:	bfac      	ite	ge
 800903a:	9b08      	ldrge	r3, [sp, #32]
 800903c:	2300      	movlt	r3, #0
 800903e:	e73f      	b.n	8008ec0 <_dtoa_r+0x748>
 8009040:	3fe00000 	.word	0x3fe00000
 8009044:	40240000 	.word	0x40240000
 8009048:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800904a:	9f06      	ldr	r7, [sp, #24]
 800904c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800904e:	e742      	b.n	8008ed6 <_dtoa_r+0x75e>
 8009050:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009052:	e76b      	b.n	8008f2c <_dtoa_r+0x7b4>
 8009054:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009056:	2b01      	cmp	r3, #1
 8009058:	dc19      	bgt.n	800908e <_dtoa_r+0x916>
 800905a:	9b04      	ldr	r3, [sp, #16]
 800905c:	b9bb      	cbnz	r3, 800908e <_dtoa_r+0x916>
 800905e:	9b05      	ldr	r3, [sp, #20]
 8009060:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009064:	b99b      	cbnz	r3, 800908e <_dtoa_r+0x916>
 8009066:	9b05      	ldr	r3, [sp, #20]
 8009068:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800906c:	0d1b      	lsrs	r3, r3, #20
 800906e:	051b      	lsls	r3, r3, #20
 8009070:	b183      	cbz	r3, 8009094 <_dtoa_r+0x91c>
 8009072:	f04f 0801 	mov.w	r8, #1
 8009076:	9b06      	ldr	r3, [sp, #24]
 8009078:	3301      	adds	r3, #1
 800907a:	9306      	str	r3, [sp, #24]
 800907c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800907e:	3301      	adds	r3, #1
 8009080:	9309      	str	r3, [sp, #36]	; 0x24
 8009082:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009084:	2b00      	cmp	r3, #0
 8009086:	f47f af6a 	bne.w	8008f5e <_dtoa_r+0x7e6>
 800908a:	2001      	movs	r0, #1
 800908c:	e76f      	b.n	8008f6e <_dtoa_r+0x7f6>
 800908e:	f04f 0800 	mov.w	r8, #0
 8009092:	e7f6      	b.n	8009082 <_dtoa_r+0x90a>
 8009094:	4698      	mov	r8, r3
 8009096:	e7f4      	b.n	8009082 <_dtoa_r+0x90a>
 8009098:	f43f af7d 	beq.w	8008f96 <_dtoa_r+0x81e>
 800909c:	4618      	mov	r0, r3
 800909e:	301c      	adds	r0, #28
 80090a0:	e772      	b.n	8008f88 <_dtoa_r+0x810>
 80090a2:	9b08      	ldr	r3, [sp, #32]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	dc36      	bgt.n	8009116 <_dtoa_r+0x99e>
 80090a8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80090aa:	2b02      	cmp	r3, #2
 80090ac:	dd33      	ble.n	8009116 <_dtoa_r+0x99e>
 80090ae:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80090b2:	f1b9 0f00 	cmp.w	r9, #0
 80090b6:	d10d      	bne.n	80090d4 <_dtoa_r+0x95c>
 80090b8:	4621      	mov	r1, r4
 80090ba:	464b      	mov	r3, r9
 80090bc:	2205      	movs	r2, #5
 80090be:	4628      	mov	r0, r5
 80090c0:	f000 fd4e 	bl	8009b60 <__multadd>
 80090c4:	4601      	mov	r1, r0
 80090c6:	4604      	mov	r4, r0
 80090c8:	4658      	mov	r0, fp
 80090ca:	f000 ffaf 	bl	800a02c <__mcmp>
 80090ce:	2800      	cmp	r0, #0
 80090d0:	f73f adb8 	bgt.w	8008c44 <_dtoa_r+0x4cc>
 80090d4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80090d6:	9f03      	ldr	r7, [sp, #12]
 80090d8:	ea6f 0a03 	mvn.w	sl, r3
 80090dc:	f04f 0800 	mov.w	r8, #0
 80090e0:	4621      	mov	r1, r4
 80090e2:	4628      	mov	r0, r5
 80090e4:	f000 fd1a 	bl	8009b1c <_Bfree>
 80090e8:	2e00      	cmp	r6, #0
 80090ea:	f43f aea7 	beq.w	8008e3c <_dtoa_r+0x6c4>
 80090ee:	f1b8 0f00 	cmp.w	r8, #0
 80090f2:	d005      	beq.n	8009100 <_dtoa_r+0x988>
 80090f4:	45b0      	cmp	r8, r6
 80090f6:	d003      	beq.n	8009100 <_dtoa_r+0x988>
 80090f8:	4641      	mov	r1, r8
 80090fa:	4628      	mov	r0, r5
 80090fc:	f000 fd0e 	bl	8009b1c <_Bfree>
 8009100:	4631      	mov	r1, r6
 8009102:	4628      	mov	r0, r5
 8009104:	f000 fd0a 	bl	8009b1c <_Bfree>
 8009108:	e698      	b.n	8008e3c <_dtoa_r+0x6c4>
 800910a:	2400      	movs	r4, #0
 800910c:	4626      	mov	r6, r4
 800910e:	e7e1      	b.n	80090d4 <_dtoa_r+0x95c>
 8009110:	46c2      	mov	sl, r8
 8009112:	4626      	mov	r6, r4
 8009114:	e596      	b.n	8008c44 <_dtoa_r+0x4cc>
 8009116:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009118:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800911c:	2b00      	cmp	r3, #0
 800911e:	f000 80fd 	beq.w	800931c <_dtoa_r+0xba4>
 8009122:	2f00      	cmp	r7, #0
 8009124:	dd05      	ble.n	8009132 <_dtoa_r+0x9ba>
 8009126:	4631      	mov	r1, r6
 8009128:	463a      	mov	r2, r7
 800912a:	4628      	mov	r0, r5
 800912c:	f000 ff0e 	bl	8009f4c <__lshift>
 8009130:	4606      	mov	r6, r0
 8009132:	f1b8 0f00 	cmp.w	r8, #0
 8009136:	d05c      	beq.n	80091f2 <_dtoa_r+0xa7a>
 8009138:	4628      	mov	r0, r5
 800913a:	6871      	ldr	r1, [r6, #4]
 800913c:	f000 fcae 	bl	8009a9c <_Balloc>
 8009140:	4607      	mov	r7, r0
 8009142:	b928      	cbnz	r0, 8009150 <_dtoa_r+0x9d8>
 8009144:	4602      	mov	r2, r0
 8009146:	f240 21ea 	movw	r1, #746	; 0x2ea
 800914a:	4b7f      	ldr	r3, [pc, #508]	; (8009348 <_dtoa_r+0xbd0>)
 800914c:	f7ff bb28 	b.w	80087a0 <_dtoa_r+0x28>
 8009150:	6932      	ldr	r2, [r6, #16]
 8009152:	f106 010c 	add.w	r1, r6, #12
 8009156:	3202      	adds	r2, #2
 8009158:	0092      	lsls	r2, r2, #2
 800915a:	300c      	adds	r0, #12
 800915c:	f7fd febe 	bl	8006edc <memcpy>
 8009160:	2201      	movs	r2, #1
 8009162:	4639      	mov	r1, r7
 8009164:	4628      	mov	r0, r5
 8009166:	f000 fef1 	bl	8009f4c <__lshift>
 800916a:	46b0      	mov	r8, r6
 800916c:	4606      	mov	r6, r0
 800916e:	9b03      	ldr	r3, [sp, #12]
 8009170:	3301      	adds	r3, #1
 8009172:	9308      	str	r3, [sp, #32]
 8009174:	9b03      	ldr	r3, [sp, #12]
 8009176:	444b      	add	r3, r9
 8009178:	930a      	str	r3, [sp, #40]	; 0x28
 800917a:	9b04      	ldr	r3, [sp, #16]
 800917c:	f003 0301 	and.w	r3, r3, #1
 8009180:	9309      	str	r3, [sp, #36]	; 0x24
 8009182:	9b08      	ldr	r3, [sp, #32]
 8009184:	4621      	mov	r1, r4
 8009186:	3b01      	subs	r3, #1
 8009188:	4658      	mov	r0, fp
 800918a:	9304      	str	r3, [sp, #16]
 800918c:	f7ff fa68 	bl	8008660 <quorem>
 8009190:	4603      	mov	r3, r0
 8009192:	4641      	mov	r1, r8
 8009194:	3330      	adds	r3, #48	; 0x30
 8009196:	9006      	str	r0, [sp, #24]
 8009198:	4658      	mov	r0, fp
 800919a:	930b      	str	r3, [sp, #44]	; 0x2c
 800919c:	f000 ff46 	bl	800a02c <__mcmp>
 80091a0:	4632      	mov	r2, r6
 80091a2:	4681      	mov	r9, r0
 80091a4:	4621      	mov	r1, r4
 80091a6:	4628      	mov	r0, r5
 80091a8:	f000 ff5c 	bl	800a064 <__mdiff>
 80091ac:	68c2      	ldr	r2, [r0, #12]
 80091ae:	4607      	mov	r7, r0
 80091b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80091b2:	bb02      	cbnz	r2, 80091f6 <_dtoa_r+0xa7e>
 80091b4:	4601      	mov	r1, r0
 80091b6:	4658      	mov	r0, fp
 80091b8:	f000 ff38 	bl	800a02c <__mcmp>
 80091bc:	4602      	mov	r2, r0
 80091be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80091c0:	4639      	mov	r1, r7
 80091c2:	4628      	mov	r0, r5
 80091c4:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80091c8:	f000 fca8 	bl	8009b1c <_Bfree>
 80091cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80091ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80091d0:	9f08      	ldr	r7, [sp, #32]
 80091d2:	ea43 0102 	orr.w	r1, r3, r2
 80091d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091d8:	430b      	orrs	r3, r1
 80091da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80091dc:	d10d      	bne.n	80091fa <_dtoa_r+0xa82>
 80091de:	2b39      	cmp	r3, #57	; 0x39
 80091e0:	d029      	beq.n	8009236 <_dtoa_r+0xabe>
 80091e2:	f1b9 0f00 	cmp.w	r9, #0
 80091e6:	dd01      	ble.n	80091ec <_dtoa_r+0xa74>
 80091e8:	9b06      	ldr	r3, [sp, #24]
 80091ea:	3331      	adds	r3, #49	; 0x31
 80091ec:	9a04      	ldr	r2, [sp, #16]
 80091ee:	7013      	strb	r3, [r2, #0]
 80091f0:	e776      	b.n	80090e0 <_dtoa_r+0x968>
 80091f2:	4630      	mov	r0, r6
 80091f4:	e7b9      	b.n	800916a <_dtoa_r+0x9f2>
 80091f6:	2201      	movs	r2, #1
 80091f8:	e7e2      	b.n	80091c0 <_dtoa_r+0xa48>
 80091fa:	f1b9 0f00 	cmp.w	r9, #0
 80091fe:	db06      	blt.n	800920e <_dtoa_r+0xa96>
 8009200:	9922      	ldr	r1, [sp, #136]	; 0x88
 8009202:	ea41 0909 	orr.w	r9, r1, r9
 8009206:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009208:	ea59 0101 	orrs.w	r1, r9, r1
 800920c:	d120      	bne.n	8009250 <_dtoa_r+0xad8>
 800920e:	2a00      	cmp	r2, #0
 8009210:	ddec      	ble.n	80091ec <_dtoa_r+0xa74>
 8009212:	4659      	mov	r1, fp
 8009214:	2201      	movs	r2, #1
 8009216:	4628      	mov	r0, r5
 8009218:	9308      	str	r3, [sp, #32]
 800921a:	f000 fe97 	bl	8009f4c <__lshift>
 800921e:	4621      	mov	r1, r4
 8009220:	4683      	mov	fp, r0
 8009222:	f000 ff03 	bl	800a02c <__mcmp>
 8009226:	2800      	cmp	r0, #0
 8009228:	9b08      	ldr	r3, [sp, #32]
 800922a:	dc02      	bgt.n	8009232 <_dtoa_r+0xaba>
 800922c:	d1de      	bne.n	80091ec <_dtoa_r+0xa74>
 800922e:	07da      	lsls	r2, r3, #31
 8009230:	d5dc      	bpl.n	80091ec <_dtoa_r+0xa74>
 8009232:	2b39      	cmp	r3, #57	; 0x39
 8009234:	d1d8      	bne.n	80091e8 <_dtoa_r+0xa70>
 8009236:	2339      	movs	r3, #57	; 0x39
 8009238:	9a04      	ldr	r2, [sp, #16]
 800923a:	7013      	strb	r3, [r2, #0]
 800923c:	463b      	mov	r3, r7
 800923e:	461f      	mov	r7, r3
 8009240:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8009244:	3b01      	subs	r3, #1
 8009246:	2a39      	cmp	r2, #57	; 0x39
 8009248:	d050      	beq.n	80092ec <_dtoa_r+0xb74>
 800924a:	3201      	adds	r2, #1
 800924c:	701a      	strb	r2, [r3, #0]
 800924e:	e747      	b.n	80090e0 <_dtoa_r+0x968>
 8009250:	2a00      	cmp	r2, #0
 8009252:	dd03      	ble.n	800925c <_dtoa_r+0xae4>
 8009254:	2b39      	cmp	r3, #57	; 0x39
 8009256:	d0ee      	beq.n	8009236 <_dtoa_r+0xabe>
 8009258:	3301      	adds	r3, #1
 800925a:	e7c7      	b.n	80091ec <_dtoa_r+0xa74>
 800925c:	9a08      	ldr	r2, [sp, #32]
 800925e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009260:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009264:	428a      	cmp	r2, r1
 8009266:	d02a      	beq.n	80092be <_dtoa_r+0xb46>
 8009268:	4659      	mov	r1, fp
 800926a:	2300      	movs	r3, #0
 800926c:	220a      	movs	r2, #10
 800926e:	4628      	mov	r0, r5
 8009270:	f000 fc76 	bl	8009b60 <__multadd>
 8009274:	45b0      	cmp	r8, r6
 8009276:	4683      	mov	fp, r0
 8009278:	f04f 0300 	mov.w	r3, #0
 800927c:	f04f 020a 	mov.w	r2, #10
 8009280:	4641      	mov	r1, r8
 8009282:	4628      	mov	r0, r5
 8009284:	d107      	bne.n	8009296 <_dtoa_r+0xb1e>
 8009286:	f000 fc6b 	bl	8009b60 <__multadd>
 800928a:	4680      	mov	r8, r0
 800928c:	4606      	mov	r6, r0
 800928e:	9b08      	ldr	r3, [sp, #32]
 8009290:	3301      	adds	r3, #1
 8009292:	9308      	str	r3, [sp, #32]
 8009294:	e775      	b.n	8009182 <_dtoa_r+0xa0a>
 8009296:	f000 fc63 	bl	8009b60 <__multadd>
 800929a:	4631      	mov	r1, r6
 800929c:	4680      	mov	r8, r0
 800929e:	2300      	movs	r3, #0
 80092a0:	220a      	movs	r2, #10
 80092a2:	4628      	mov	r0, r5
 80092a4:	f000 fc5c 	bl	8009b60 <__multadd>
 80092a8:	4606      	mov	r6, r0
 80092aa:	e7f0      	b.n	800928e <_dtoa_r+0xb16>
 80092ac:	f1b9 0f00 	cmp.w	r9, #0
 80092b0:	bfcc      	ite	gt
 80092b2:	464f      	movgt	r7, r9
 80092b4:	2701      	movle	r7, #1
 80092b6:	f04f 0800 	mov.w	r8, #0
 80092ba:	9a03      	ldr	r2, [sp, #12]
 80092bc:	4417      	add	r7, r2
 80092be:	4659      	mov	r1, fp
 80092c0:	2201      	movs	r2, #1
 80092c2:	4628      	mov	r0, r5
 80092c4:	9308      	str	r3, [sp, #32]
 80092c6:	f000 fe41 	bl	8009f4c <__lshift>
 80092ca:	4621      	mov	r1, r4
 80092cc:	4683      	mov	fp, r0
 80092ce:	f000 fead 	bl	800a02c <__mcmp>
 80092d2:	2800      	cmp	r0, #0
 80092d4:	dcb2      	bgt.n	800923c <_dtoa_r+0xac4>
 80092d6:	d102      	bne.n	80092de <_dtoa_r+0xb66>
 80092d8:	9b08      	ldr	r3, [sp, #32]
 80092da:	07db      	lsls	r3, r3, #31
 80092dc:	d4ae      	bmi.n	800923c <_dtoa_r+0xac4>
 80092de:	463b      	mov	r3, r7
 80092e0:	461f      	mov	r7, r3
 80092e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80092e6:	2a30      	cmp	r2, #48	; 0x30
 80092e8:	d0fa      	beq.n	80092e0 <_dtoa_r+0xb68>
 80092ea:	e6f9      	b.n	80090e0 <_dtoa_r+0x968>
 80092ec:	9a03      	ldr	r2, [sp, #12]
 80092ee:	429a      	cmp	r2, r3
 80092f0:	d1a5      	bne.n	800923e <_dtoa_r+0xac6>
 80092f2:	2331      	movs	r3, #49	; 0x31
 80092f4:	f10a 0a01 	add.w	sl, sl, #1
 80092f8:	e779      	b.n	80091ee <_dtoa_r+0xa76>
 80092fa:	4b14      	ldr	r3, [pc, #80]	; (800934c <_dtoa_r+0xbd4>)
 80092fc:	f7ff baa8 	b.w	8008850 <_dtoa_r+0xd8>
 8009300:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009302:	2b00      	cmp	r3, #0
 8009304:	f47f aa81 	bne.w	800880a <_dtoa_r+0x92>
 8009308:	4b11      	ldr	r3, [pc, #68]	; (8009350 <_dtoa_r+0xbd8>)
 800930a:	f7ff baa1 	b.w	8008850 <_dtoa_r+0xd8>
 800930e:	f1b9 0f00 	cmp.w	r9, #0
 8009312:	dc03      	bgt.n	800931c <_dtoa_r+0xba4>
 8009314:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009316:	2b02      	cmp	r3, #2
 8009318:	f73f aecb 	bgt.w	80090b2 <_dtoa_r+0x93a>
 800931c:	9f03      	ldr	r7, [sp, #12]
 800931e:	4621      	mov	r1, r4
 8009320:	4658      	mov	r0, fp
 8009322:	f7ff f99d 	bl	8008660 <quorem>
 8009326:	9a03      	ldr	r2, [sp, #12]
 8009328:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800932c:	f807 3b01 	strb.w	r3, [r7], #1
 8009330:	1aba      	subs	r2, r7, r2
 8009332:	4591      	cmp	r9, r2
 8009334:	ddba      	ble.n	80092ac <_dtoa_r+0xb34>
 8009336:	4659      	mov	r1, fp
 8009338:	2300      	movs	r3, #0
 800933a:	220a      	movs	r2, #10
 800933c:	4628      	mov	r0, r5
 800933e:	f000 fc0f 	bl	8009b60 <__multadd>
 8009342:	4683      	mov	fp, r0
 8009344:	e7eb      	b.n	800931e <_dtoa_r+0xba6>
 8009346:	bf00      	nop
 8009348:	0800ba69 	.word	0x0800ba69
 800934c:	0800b7d8 	.word	0x0800b7d8
 8009350:	0800ba01 	.word	0x0800ba01

08009354 <fiprintf>:
 8009354:	b40e      	push	{r1, r2, r3}
 8009356:	b503      	push	{r0, r1, lr}
 8009358:	4601      	mov	r1, r0
 800935a:	ab03      	add	r3, sp, #12
 800935c:	4805      	ldr	r0, [pc, #20]	; (8009374 <fiprintf+0x20>)
 800935e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009362:	6800      	ldr	r0, [r0, #0]
 8009364:	9301      	str	r3, [sp, #4]
 8009366:	f001 fac5 	bl	800a8f4 <_vfiprintf_r>
 800936a:	b002      	add	sp, #8
 800936c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009370:	b003      	add	sp, #12
 8009372:	4770      	bx	lr
 8009374:	20000190 	.word	0x20000190

08009378 <rshift>:
 8009378:	6903      	ldr	r3, [r0, #16]
 800937a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800937e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009382:	f100 0414 	add.w	r4, r0, #20
 8009386:	ea4f 1261 	mov.w	r2, r1, asr #5
 800938a:	dd46      	ble.n	800941a <rshift+0xa2>
 800938c:	f011 011f 	ands.w	r1, r1, #31
 8009390:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009394:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009398:	d10c      	bne.n	80093b4 <rshift+0x3c>
 800939a:	4629      	mov	r1, r5
 800939c:	f100 0710 	add.w	r7, r0, #16
 80093a0:	42b1      	cmp	r1, r6
 80093a2:	d335      	bcc.n	8009410 <rshift+0x98>
 80093a4:	1a9b      	subs	r3, r3, r2
 80093a6:	009b      	lsls	r3, r3, #2
 80093a8:	1eea      	subs	r2, r5, #3
 80093aa:	4296      	cmp	r6, r2
 80093ac:	bf38      	it	cc
 80093ae:	2300      	movcc	r3, #0
 80093b0:	4423      	add	r3, r4
 80093b2:	e015      	b.n	80093e0 <rshift+0x68>
 80093b4:	46a1      	mov	r9, r4
 80093b6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80093ba:	f1c1 0820 	rsb	r8, r1, #32
 80093be:	40cf      	lsrs	r7, r1
 80093c0:	f105 0e04 	add.w	lr, r5, #4
 80093c4:	4576      	cmp	r6, lr
 80093c6:	46f4      	mov	ip, lr
 80093c8:	d816      	bhi.n	80093f8 <rshift+0x80>
 80093ca:	1a9a      	subs	r2, r3, r2
 80093cc:	0092      	lsls	r2, r2, #2
 80093ce:	3a04      	subs	r2, #4
 80093d0:	3501      	adds	r5, #1
 80093d2:	42ae      	cmp	r6, r5
 80093d4:	bf38      	it	cc
 80093d6:	2200      	movcc	r2, #0
 80093d8:	18a3      	adds	r3, r4, r2
 80093da:	50a7      	str	r7, [r4, r2]
 80093dc:	b107      	cbz	r7, 80093e0 <rshift+0x68>
 80093de:	3304      	adds	r3, #4
 80093e0:	42a3      	cmp	r3, r4
 80093e2:	eba3 0204 	sub.w	r2, r3, r4
 80093e6:	bf08      	it	eq
 80093e8:	2300      	moveq	r3, #0
 80093ea:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80093ee:	6102      	str	r2, [r0, #16]
 80093f0:	bf08      	it	eq
 80093f2:	6143      	streq	r3, [r0, #20]
 80093f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80093f8:	f8dc c000 	ldr.w	ip, [ip]
 80093fc:	fa0c fc08 	lsl.w	ip, ip, r8
 8009400:	ea4c 0707 	orr.w	r7, ip, r7
 8009404:	f849 7b04 	str.w	r7, [r9], #4
 8009408:	f85e 7b04 	ldr.w	r7, [lr], #4
 800940c:	40cf      	lsrs	r7, r1
 800940e:	e7d9      	b.n	80093c4 <rshift+0x4c>
 8009410:	f851 cb04 	ldr.w	ip, [r1], #4
 8009414:	f847 cf04 	str.w	ip, [r7, #4]!
 8009418:	e7c2      	b.n	80093a0 <rshift+0x28>
 800941a:	4623      	mov	r3, r4
 800941c:	e7e0      	b.n	80093e0 <rshift+0x68>

0800941e <__hexdig_fun>:
 800941e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009422:	2b09      	cmp	r3, #9
 8009424:	d802      	bhi.n	800942c <__hexdig_fun+0xe>
 8009426:	3820      	subs	r0, #32
 8009428:	b2c0      	uxtb	r0, r0
 800942a:	4770      	bx	lr
 800942c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009430:	2b05      	cmp	r3, #5
 8009432:	d801      	bhi.n	8009438 <__hexdig_fun+0x1a>
 8009434:	3847      	subs	r0, #71	; 0x47
 8009436:	e7f7      	b.n	8009428 <__hexdig_fun+0xa>
 8009438:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800943c:	2b05      	cmp	r3, #5
 800943e:	d801      	bhi.n	8009444 <__hexdig_fun+0x26>
 8009440:	3827      	subs	r0, #39	; 0x27
 8009442:	e7f1      	b.n	8009428 <__hexdig_fun+0xa>
 8009444:	2000      	movs	r0, #0
 8009446:	4770      	bx	lr

08009448 <__gethex>:
 8009448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800944c:	b08b      	sub	sp, #44	; 0x2c
 800944e:	9305      	str	r3, [sp, #20]
 8009450:	4bb2      	ldr	r3, [pc, #712]	; (800971c <__gethex+0x2d4>)
 8009452:	9002      	str	r0, [sp, #8]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	468b      	mov	fp, r1
 8009458:	4618      	mov	r0, r3
 800945a:	4690      	mov	r8, r2
 800945c:	9303      	str	r3, [sp, #12]
 800945e:	f7f6 fe81 	bl	8000164 <strlen>
 8009462:	4682      	mov	sl, r0
 8009464:	9b03      	ldr	r3, [sp, #12]
 8009466:	f8db 2000 	ldr.w	r2, [fp]
 800946a:	4403      	add	r3, r0
 800946c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009470:	9306      	str	r3, [sp, #24]
 8009472:	1c93      	adds	r3, r2, #2
 8009474:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009478:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800947c:	32fe      	adds	r2, #254	; 0xfe
 800947e:	18d1      	adds	r1, r2, r3
 8009480:	461f      	mov	r7, r3
 8009482:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009486:	9101      	str	r1, [sp, #4]
 8009488:	2830      	cmp	r0, #48	; 0x30
 800948a:	d0f8      	beq.n	800947e <__gethex+0x36>
 800948c:	f7ff ffc7 	bl	800941e <__hexdig_fun>
 8009490:	4604      	mov	r4, r0
 8009492:	2800      	cmp	r0, #0
 8009494:	d13a      	bne.n	800950c <__gethex+0xc4>
 8009496:	4652      	mov	r2, sl
 8009498:	4638      	mov	r0, r7
 800949a:	9903      	ldr	r1, [sp, #12]
 800949c:	f001 fb70 	bl	800ab80 <strncmp>
 80094a0:	4605      	mov	r5, r0
 80094a2:	2800      	cmp	r0, #0
 80094a4:	d166      	bne.n	8009574 <__gethex+0x12c>
 80094a6:	f817 000a 	ldrb.w	r0, [r7, sl]
 80094aa:	eb07 060a 	add.w	r6, r7, sl
 80094ae:	f7ff ffb6 	bl	800941e <__hexdig_fun>
 80094b2:	2800      	cmp	r0, #0
 80094b4:	d060      	beq.n	8009578 <__gethex+0x130>
 80094b6:	4633      	mov	r3, r6
 80094b8:	7818      	ldrb	r0, [r3, #0]
 80094ba:	461f      	mov	r7, r3
 80094bc:	2830      	cmp	r0, #48	; 0x30
 80094be:	f103 0301 	add.w	r3, r3, #1
 80094c2:	d0f9      	beq.n	80094b8 <__gethex+0x70>
 80094c4:	f7ff ffab 	bl	800941e <__hexdig_fun>
 80094c8:	2301      	movs	r3, #1
 80094ca:	fab0 f480 	clz	r4, r0
 80094ce:	4635      	mov	r5, r6
 80094d0:	0964      	lsrs	r4, r4, #5
 80094d2:	9301      	str	r3, [sp, #4]
 80094d4:	463a      	mov	r2, r7
 80094d6:	4616      	mov	r6, r2
 80094d8:	7830      	ldrb	r0, [r6, #0]
 80094da:	3201      	adds	r2, #1
 80094dc:	f7ff ff9f 	bl	800941e <__hexdig_fun>
 80094e0:	2800      	cmp	r0, #0
 80094e2:	d1f8      	bne.n	80094d6 <__gethex+0x8e>
 80094e4:	4652      	mov	r2, sl
 80094e6:	4630      	mov	r0, r6
 80094e8:	9903      	ldr	r1, [sp, #12]
 80094ea:	f001 fb49 	bl	800ab80 <strncmp>
 80094ee:	b980      	cbnz	r0, 8009512 <__gethex+0xca>
 80094f0:	b94d      	cbnz	r5, 8009506 <__gethex+0xbe>
 80094f2:	eb06 050a 	add.w	r5, r6, sl
 80094f6:	462a      	mov	r2, r5
 80094f8:	4616      	mov	r6, r2
 80094fa:	7830      	ldrb	r0, [r6, #0]
 80094fc:	3201      	adds	r2, #1
 80094fe:	f7ff ff8e 	bl	800941e <__hexdig_fun>
 8009502:	2800      	cmp	r0, #0
 8009504:	d1f8      	bne.n	80094f8 <__gethex+0xb0>
 8009506:	1bad      	subs	r5, r5, r6
 8009508:	00ad      	lsls	r5, r5, #2
 800950a:	e004      	b.n	8009516 <__gethex+0xce>
 800950c:	2400      	movs	r4, #0
 800950e:	4625      	mov	r5, r4
 8009510:	e7e0      	b.n	80094d4 <__gethex+0x8c>
 8009512:	2d00      	cmp	r5, #0
 8009514:	d1f7      	bne.n	8009506 <__gethex+0xbe>
 8009516:	7833      	ldrb	r3, [r6, #0]
 8009518:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800951c:	2b50      	cmp	r3, #80	; 0x50
 800951e:	d139      	bne.n	8009594 <__gethex+0x14c>
 8009520:	7873      	ldrb	r3, [r6, #1]
 8009522:	2b2b      	cmp	r3, #43	; 0x2b
 8009524:	d02a      	beq.n	800957c <__gethex+0x134>
 8009526:	2b2d      	cmp	r3, #45	; 0x2d
 8009528:	d02c      	beq.n	8009584 <__gethex+0x13c>
 800952a:	f04f 0900 	mov.w	r9, #0
 800952e:	1c71      	adds	r1, r6, #1
 8009530:	7808      	ldrb	r0, [r1, #0]
 8009532:	f7ff ff74 	bl	800941e <__hexdig_fun>
 8009536:	1e43      	subs	r3, r0, #1
 8009538:	b2db      	uxtb	r3, r3
 800953a:	2b18      	cmp	r3, #24
 800953c:	d82a      	bhi.n	8009594 <__gethex+0x14c>
 800953e:	f1a0 0210 	sub.w	r2, r0, #16
 8009542:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009546:	f7ff ff6a 	bl	800941e <__hexdig_fun>
 800954a:	1e43      	subs	r3, r0, #1
 800954c:	b2db      	uxtb	r3, r3
 800954e:	2b18      	cmp	r3, #24
 8009550:	d91b      	bls.n	800958a <__gethex+0x142>
 8009552:	f1b9 0f00 	cmp.w	r9, #0
 8009556:	d000      	beq.n	800955a <__gethex+0x112>
 8009558:	4252      	negs	r2, r2
 800955a:	4415      	add	r5, r2
 800955c:	f8cb 1000 	str.w	r1, [fp]
 8009560:	b1d4      	cbz	r4, 8009598 <__gethex+0x150>
 8009562:	9b01      	ldr	r3, [sp, #4]
 8009564:	2b00      	cmp	r3, #0
 8009566:	bf14      	ite	ne
 8009568:	2700      	movne	r7, #0
 800956a:	2706      	moveq	r7, #6
 800956c:	4638      	mov	r0, r7
 800956e:	b00b      	add	sp, #44	; 0x2c
 8009570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009574:	463e      	mov	r6, r7
 8009576:	4625      	mov	r5, r4
 8009578:	2401      	movs	r4, #1
 800957a:	e7cc      	b.n	8009516 <__gethex+0xce>
 800957c:	f04f 0900 	mov.w	r9, #0
 8009580:	1cb1      	adds	r1, r6, #2
 8009582:	e7d5      	b.n	8009530 <__gethex+0xe8>
 8009584:	f04f 0901 	mov.w	r9, #1
 8009588:	e7fa      	b.n	8009580 <__gethex+0x138>
 800958a:	230a      	movs	r3, #10
 800958c:	fb03 0202 	mla	r2, r3, r2, r0
 8009590:	3a10      	subs	r2, #16
 8009592:	e7d6      	b.n	8009542 <__gethex+0xfa>
 8009594:	4631      	mov	r1, r6
 8009596:	e7e1      	b.n	800955c <__gethex+0x114>
 8009598:	4621      	mov	r1, r4
 800959a:	1bf3      	subs	r3, r6, r7
 800959c:	3b01      	subs	r3, #1
 800959e:	2b07      	cmp	r3, #7
 80095a0:	dc0a      	bgt.n	80095b8 <__gethex+0x170>
 80095a2:	9802      	ldr	r0, [sp, #8]
 80095a4:	f000 fa7a 	bl	8009a9c <_Balloc>
 80095a8:	4604      	mov	r4, r0
 80095aa:	b940      	cbnz	r0, 80095be <__gethex+0x176>
 80095ac:	4602      	mov	r2, r0
 80095ae:	21de      	movs	r1, #222	; 0xde
 80095b0:	4b5b      	ldr	r3, [pc, #364]	; (8009720 <__gethex+0x2d8>)
 80095b2:	485c      	ldr	r0, [pc, #368]	; (8009724 <__gethex+0x2dc>)
 80095b4:	f7ff f836 	bl	8008624 <__assert_func>
 80095b8:	3101      	adds	r1, #1
 80095ba:	105b      	asrs	r3, r3, #1
 80095bc:	e7ef      	b.n	800959e <__gethex+0x156>
 80095be:	f04f 0b00 	mov.w	fp, #0
 80095c2:	f100 0914 	add.w	r9, r0, #20
 80095c6:	f1ca 0301 	rsb	r3, sl, #1
 80095ca:	f8cd 9010 	str.w	r9, [sp, #16]
 80095ce:	f8cd b004 	str.w	fp, [sp, #4]
 80095d2:	9308      	str	r3, [sp, #32]
 80095d4:	42b7      	cmp	r7, r6
 80095d6:	d33f      	bcc.n	8009658 <__gethex+0x210>
 80095d8:	9f04      	ldr	r7, [sp, #16]
 80095da:	9b01      	ldr	r3, [sp, #4]
 80095dc:	f847 3b04 	str.w	r3, [r7], #4
 80095e0:	eba7 0709 	sub.w	r7, r7, r9
 80095e4:	10bf      	asrs	r7, r7, #2
 80095e6:	6127      	str	r7, [r4, #16]
 80095e8:	4618      	mov	r0, r3
 80095ea:	f000 fb49 	bl	8009c80 <__hi0bits>
 80095ee:	017f      	lsls	r7, r7, #5
 80095f0:	f8d8 6000 	ldr.w	r6, [r8]
 80095f4:	1a3f      	subs	r7, r7, r0
 80095f6:	42b7      	cmp	r7, r6
 80095f8:	dd62      	ble.n	80096c0 <__gethex+0x278>
 80095fa:	1bbf      	subs	r7, r7, r6
 80095fc:	4639      	mov	r1, r7
 80095fe:	4620      	mov	r0, r4
 8009600:	f000 fee3 	bl	800a3ca <__any_on>
 8009604:	4682      	mov	sl, r0
 8009606:	b1a8      	cbz	r0, 8009634 <__gethex+0x1ec>
 8009608:	f04f 0a01 	mov.w	sl, #1
 800960c:	1e7b      	subs	r3, r7, #1
 800960e:	1159      	asrs	r1, r3, #5
 8009610:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009614:	f003 021f 	and.w	r2, r3, #31
 8009618:	fa0a f202 	lsl.w	r2, sl, r2
 800961c:	420a      	tst	r2, r1
 800961e:	d009      	beq.n	8009634 <__gethex+0x1ec>
 8009620:	4553      	cmp	r3, sl
 8009622:	dd05      	ble.n	8009630 <__gethex+0x1e8>
 8009624:	4620      	mov	r0, r4
 8009626:	1eb9      	subs	r1, r7, #2
 8009628:	f000 fecf 	bl	800a3ca <__any_on>
 800962c:	2800      	cmp	r0, #0
 800962e:	d144      	bne.n	80096ba <__gethex+0x272>
 8009630:	f04f 0a02 	mov.w	sl, #2
 8009634:	4639      	mov	r1, r7
 8009636:	4620      	mov	r0, r4
 8009638:	f7ff fe9e 	bl	8009378 <rshift>
 800963c:	443d      	add	r5, r7
 800963e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009642:	42ab      	cmp	r3, r5
 8009644:	da4a      	bge.n	80096dc <__gethex+0x294>
 8009646:	4621      	mov	r1, r4
 8009648:	9802      	ldr	r0, [sp, #8]
 800964a:	f000 fa67 	bl	8009b1c <_Bfree>
 800964e:	2300      	movs	r3, #0
 8009650:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009652:	27a3      	movs	r7, #163	; 0xa3
 8009654:	6013      	str	r3, [r2, #0]
 8009656:	e789      	b.n	800956c <__gethex+0x124>
 8009658:	1e73      	subs	r3, r6, #1
 800965a:	9a06      	ldr	r2, [sp, #24]
 800965c:	9307      	str	r3, [sp, #28]
 800965e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009662:	4293      	cmp	r3, r2
 8009664:	d019      	beq.n	800969a <__gethex+0x252>
 8009666:	f1bb 0f20 	cmp.w	fp, #32
 800966a:	d107      	bne.n	800967c <__gethex+0x234>
 800966c:	9b04      	ldr	r3, [sp, #16]
 800966e:	9a01      	ldr	r2, [sp, #4]
 8009670:	f843 2b04 	str.w	r2, [r3], #4
 8009674:	9304      	str	r3, [sp, #16]
 8009676:	2300      	movs	r3, #0
 8009678:	469b      	mov	fp, r3
 800967a:	9301      	str	r3, [sp, #4]
 800967c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009680:	f7ff fecd 	bl	800941e <__hexdig_fun>
 8009684:	9b01      	ldr	r3, [sp, #4]
 8009686:	f000 000f 	and.w	r0, r0, #15
 800968a:	fa00 f00b 	lsl.w	r0, r0, fp
 800968e:	4303      	orrs	r3, r0
 8009690:	9301      	str	r3, [sp, #4]
 8009692:	f10b 0b04 	add.w	fp, fp, #4
 8009696:	9b07      	ldr	r3, [sp, #28]
 8009698:	e00d      	b.n	80096b6 <__gethex+0x26e>
 800969a:	9a08      	ldr	r2, [sp, #32]
 800969c:	1e73      	subs	r3, r6, #1
 800969e:	4413      	add	r3, r2
 80096a0:	42bb      	cmp	r3, r7
 80096a2:	d3e0      	bcc.n	8009666 <__gethex+0x21e>
 80096a4:	4618      	mov	r0, r3
 80096a6:	4652      	mov	r2, sl
 80096a8:	9903      	ldr	r1, [sp, #12]
 80096aa:	9309      	str	r3, [sp, #36]	; 0x24
 80096ac:	f001 fa68 	bl	800ab80 <strncmp>
 80096b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096b2:	2800      	cmp	r0, #0
 80096b4:	d1d7      	bne.n	8009666 <__gethex+0x21e>
 80096b6:	461e      	mov	r6, r3
 80096b8:	e78c      	b.n	80095d4 <__gethex+0x18c>
 80096ba:	f04f 0a03 	mov.w	sl, #3
 80096be:	e7b9      	b.n	8009634 <__gethex+0x1ec>
 80096c0:	da09      	bge.n	80096d6 <__gethex+0x28e>
 80096c2:	1bf7      	subs	r7, r6, r7
 80096c4:	4621      	mov	r1, r4
 80096c6:	463a      	mov	r2, r7
 80096c8:	9802      	ldr	r0, [sp, #8]
 80096ca:	f000 fc3f 	bl	8009f4c <__lshift>
 80096ce:	4604      	mov	r4, r0
 80096d0:	1bed      	subs	r5, r5, r7
 80096d2:	f100 0914 	add.w	r9, r0, #20
 80096d6:	f04f 0a00 	mov.w	sl, #0
 80096da:	e7b0      	b.n	800963e <__gethex+0x1f6>
 80096dc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80096e0:	42a8      	cmp	r0, r5
 80096e2:	dd72      	ble.n	80097ca <__gethex+0x382>
 80096e4:	1b45      	subs	r5, r0, r5
 80096e6:	42ae      	cmp	r6, r5
 80096e8:	dc35      	bgt.n	8009756 <__gethex+0x30e>
 80096ea:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80096ee:	2b02      	cmp	r3, #2
 80096f0:	d029      	beq.n	8009746 <__gethex+0x2fe>
 80096f2:	2b03      	cmp	r3, #3
 80096f4:	d02b      	beq.n	800974e <__gethex+0x306>
 80096f6:	2b01      	cmp	r3, #1
 80096f8:	d11c      	bne.n	8009734 <__gethex+0x2ec>
 80096fa:	42ae      	cmp	r6, r5
 80096fc:	d11a      	bne.n	8009734 <__gethex+0x2ec>
 80096fe:	2e01      	cmp	r6, #1
 8009700:	d112      	bne.n	8009728 <__gethex+0x2e0>
 8009702:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009706:	9a05      	ldr	r2, [sp, #20]
 8009708:	2762      	movs	r7, #98	; 0x62
 800970a:	6013      	str	r3, [r2, #0]
 800970c:	2301      	movs	r3, #1
 800970e:	6123      	str	r3, [r4, #16]
 8009710:	f8c9 3000 	str.w	r3, [r9]
 8009714:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009716:	601c      	str	r4, [r3, #0]
 8009718:	e728      	b.n	800956c <__gethex+0x124>
 800971a:	bf00      	nop
 800971c:	0800bae0 	.word	0x0800bae0
 8009720:	0800ba69 	.word	0x0800ba69
 8009724:	0800ba7a 	.word	0x0800ba7a
 8009728:	4620      	mov	r0, r4
 800972a:	1e71      	subs	r1, r6, #1
 800972c:	f000 fe4d 	bl	800a3ca <__any_on>
 8009730:	2800      	cmp	r0, #0
 8009732:	d1e6      	bne.n	8009702 <__gethex+0x2ba>
 8009734:	4621      	mov	r1, r4
 8009736:	9802      	ldr	r0, [sp, #8]
 8009738:	f000 f9f0 	bl	8009b1c <_Bfree>
 800973c:	2300      	movs	r3, #0
 800973e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009740:	2750      	movs	r7, #80	; 0x50
 8009742:	6013      	str	r3, [r2, #0]
 8009744:	e712      	b.n	800956c <__gethex+0x124>
 8009746:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009748:	2b00      	cmp	r3, #0
 800974a:	d1f3      	bne.n	8009734 <__gethex+0x2ec>
 800974c:	e7d9      	b.n	8009702 <__gethex+0x2ba>
 800974e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009750:	2b00      	cmp	r3, #0
 8009752:	d1d6      	bne.n	8009702 <__gethex+0x2ba>
 8009754:	e7ee      	b.n	8009734 <__gethex+0x2ec>
 8009756:	1e6f      	subs	r7, r5, #1
 8009758:	f1ba 0f00 	cmp.w	sl, #0
 800975c:	d132      	bne.n	80097c4 <__gethex+0x37c>
 800975e:	b127      	cbz	r7, 800976a <__gethex+0x322>
 8009760:	4639      	mov	r1, r7
 8009762:	4620      	mov	r0, r4
 8009764:	f000 fe31 	bl	800a3ca <__any_on>
 8009768:	4682      	mov	sl, r0
 800976a:	2101      	movs	r1, #1
 800976c:	117b      	asrs	r3, r7, #5
 800976e:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009772:	f007 071f 	and.w	r7, r7, #31
 8009776:	fa01 f707 	lsl.w	r7, r1, r7
 800977a:	421f      	tst	r7, r3
 800977c:	f04f 0702 	mov.w	r7, #2
 8009780:	4629      	mov	r1, r5
 8009782:	4620      	mov	r0, r4
 8009784:	bf18      	it	ne
 8009786:	f04a 0a02 	orrne.w	sl, sl, #2
 800978a:	1b76      	subs	r6, r6, r5
 800978c:	f7ff fdf4 	bl	8009378 <rshift>
 8009790:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009794:	f1ba 0f00 	cmp.w	sl, #0
 8009798:	d048      	beq.n	800982c <__gethex+0x3e4>
 800979a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800979e:	2b02      	cmp	r3, #2
 80097a0:	d015      	beq.n	80097ce <__gethex+0x386>
 80097a2:	2b03      	cmp	r3, #3
 80097a4:	d017      	beq.n	80097d6 <__gethex+0x38e>
 80097a6:	2b01      	cmp	r3, #1
 80097a8:	d109      	bne.n	80097be <__gethex+0x376>
 80097aa:	f01a 0f02 	tst.w	sl, #2
 80097ae:	d006      	beq.n	80097be <__gethex+0x376>
 80097b0:	f8d9 0000 	ldr.w	r0, [r9]
 80097b4:	ea4a 0a00 	orr.w	sl, sl, r0
 80097b8:	f01a 0f01 	tst.w	sl, #1
 80097bc:	d10e      	bne.n	80097dc <__gethex+0x394>
 80097be:	f047 0710 	orr.w	r7, r7, #16
 80097c2:	e033      	b.n	800982c <__gethex+0x3e4>
 80097c4:	f04f 0a01 	mov.w	sl, #1
 80097c8:	e7cf      	b.n	800976a <__gethex+0x322>
 80097ca:	2701      	movs	r7, #1
 80097cc:	e7e2      	b.n	8009794 <__gethex+0x34c>
 80097ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80097d0:	f1c3 0301 	rsb	r3, r3, #1
 80097d4:	9315      	str	r3, [sp, #84]	; 0x54
 80097d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d0f0      	beq.n	80097be <__gethex+0x376>
 80097dc:	f04f 0c00 	mov.w	ip, #0
 80097e0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80097e4:	f104 0314 	add.w	r3, r4, #20
 80097e8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80097ec:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80097f0:	4618      	mov	r0, r3
 80097f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80097f6:	f1b2 3fff 	cmp.w	r2, #4294967295
 80097fa:	d01c      	beq.n	8009836 <__gethex+0x3ee>
 80097fc:	3201      	adds	r2, #1
 80097fe:	6002      	str	r2, [r0, #0]
 8009800:	2f02      	cmp	r7, #2
 8009802:	f104 0314 	add.w	r3, r4, #20
 8009806:	d13d      	bne.n	8009884 <__gethex+0x43c>
 8009808:	f8d8 2000 	ldr.w	r2, [r8]
 800980c:	3a01      	subs	r2, #1
 800980e:	42b2      	cmp	r2, r6
 8009810:	d10a      	bne.n	8009828 <__gethex+0x3e0>
 8009812:	2201      	movs	r2, #1
 8009814:	1171      	asrs	r1, r6, #5
 8009816:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800981a:	f006 061f 	and.w	r6, r6, #31
 800981e:	fa02 f606 	lsl.w	r6, r2, r6
 8009822:	421e      	tst	r6, r3
 8009824:	bf18      	it	ne
 8009826:	4617      	movne	r7, r2
 8009828:	f047 0720 	orr.w	r7, r7, #32
 800982c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800982e:	601c      	str	r4, [r3, #0]
 8009830:	9b05      	ldr	r3, [sp, #20]
 8009832:	601d      	str	r5, [r3, #0]
 8009834:	e69a      	b.n	800956c <__gethex+0x124>
 8009836:	4299      	cmp	r1, r3
 8009838:	f843 cc04 	str.w	ip, [r3, #-4]
 800983c:	d8d8      	bhi.n	80097f0 <__gethex+0x3a8>
 800983e:	68a3      	ldr	r3, [r4, #8]
 8009840:	459b      	cmp	fp, r3
 8009842:	db17      	blt.n	8009874 <__gethex+0x42c>
 8009844:	6861      	ldr	r1, [r4, #4]
 8009846:	9802      	ldr	r0, [sp, #8]
 8009848:	3101      	adds	r1, #1
 800984a:	f000 f927 	bl	8009a9c <_Balloc>
 800984e:	4681      	mov	r9, r0
 8009850:	b918      	cbnz	r0, 800985a <__gethex+0x412>
 8009852:	4602      	mov	r2, r0
 8009854:	2184      	movs	r1, #132	; 0x84
 8009856:	4b19      	ldr	r3, [pc, #100]	; (80098bc <__gethex+0x474>)
 8009858:	e6ab      	b.n	80095b2 <__gethex+0x16a>
 800985a:	6922      	ldr	r2, [r4, #16]
 800985c:	f104 010c 	add.w	r1, r4, #12
 8009860:	3202      	adds	r2, #2
 8009862:	0092      	lsls	r2, r2, #2
 8009864:	300c      	adds	r0, #12
 8009866:	f7fd fb39 	bl	8006edc <memcpy>
 800986a:	4621      	mov	r1, r4
 800986c:	9802      	ldr	r0, [sp, #8]
 800986e:	f000 f955 	bl	8009b1c <_Bfree>
 8009872:	464c      	mov	r4, r9
 8009874:	6923      	ldr	r3, [r4, #16]
 8009876:	1c5a      	adds	r2, r3, #1
 8009878:	6122      	str	r2, [r4, #16]
 800987a:	2201      	movs	r2, #1
 800987c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009880:	615a      	str	r2, [r3, #20]
 8009882:	e7bd      	b.n	8009800 <__gethex+0x3b8>
 8009884:	6922      	ldr	r2, [r4, #16]
 8009886:	455a      	cmp	r2, fp
 8009888:	dd0b      	ble.n	80098a2 <__gethex+0x45a>
 800988a:	2101      	movs	r1, #1
 800988c:	4620      	mov	r0, r4
 800988e:	f7ff fd73 	bl	8009378 <rshift>
 8009892:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009896:	3501      	adds	r5, #1
 8009898:	42ab      	cmp	r3, r5
 800989a:	f6ff aed4 	blt.w	8009646 <__gethex+0x1fe>
 800989e:	2701      	movs	r7, #1
 80098a0:	e7c2      	b.n	8009828 <__gethex+0x3e0>
 80098a2:	f016 061f 	ands.w	r6, r6, #31
 80098a6:	d0fa      	beq.n	800989e <__gethex+0x456>
 80098a8:	4453      	add	r3, sl
 80098aa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80098ae:	f000 f9e7 	bl	8009c80 <__hi0bits>
 80098b2:	f1c6 0620 	rsb	r6, r6, #32
 80098b6:	42b0      	cmp	r0, r6
 80098b8:	dbe7      	blt.n	800988a <__gethex+0x442>
 80098ba:	e7f0      	b.n	800989e <__gethex+0x456>
 80098bc:	0800ba69 	.word	0x0800ba69

080098c0 <L_shift>:
 80098c0:	f1c2 0208 	rsb	r2, r2, #8
 80098c4:	0092      	lsls	r2, r2, #2
 80098c6:	b570      	push	{r4, r5, r6, lr}
 80098c8:	f1c2 0620 	rsb	r6, r2, #32
 80098cc:	6843      	ldr	r3, [r0, #4]
 80098ce:	6804      	ldr	r4, [r0, #0]
 80098d0:	fa03 f506 	lsl.w	r5, r3, r6
 80098d4:	432c      	orrs	r4, r5
 80098d6:	40d3      	lsrs	r3, r2
 80098d8:	6004      	str	r4, [r0, #0]
 80098da:	f840 3f04 	str.w	r3, [r0, #4]!
 80098de:	4288      	cmp	r0, r1
 80098e0:	d3f4      	bcc.n	80098cc <L_shift+0xc>
 80098e2:	bd70      	pop	{r4, r5, r6, pc}

080098e4 <__match>:
 80098e4:	b530      	push	{r4, r5, lr}
 80098e6:	6803      	ldr	r3, [r0, #0]
 80098e8:	3301      	adds	r3, #1
 80098ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80098ee:	b914      	cbnz	r4, 80098f6 <__match+0x12>
 80098f0:	6003      	str	r3, [r0, #0]
 80098f2:	2001      	movs	r0, #1
 80098f4:	bd30      	pop	{r4, r5, pc}
 80098f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80098fa:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80098fe:	2d19      	cmp	r5, #25
 8009900:	bf98      	it	ls
 8009902:	3220      	addls	r2, #32
 8009904:	42a2      	cmp	r2, r4
 8009906:	d0f0      	beq.n	80098ea <__match+0x6>
 8009908:	2000      	movs	r0, #0
 800990a:	e7f3      	b.n	80098f4 <__match+0x10>

0800990c <__hexnan>:
 800990c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009910:	2500      	movs	r5, #0
 8009912:	680b      	ldr	r3, [r1, #0]
 8009914:	4682      	mov	sl, r0
 8009916:	115e      	asrs	r6, r3, #5
 8009918:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800991c:	f013 031f 	ands.w	r3, r3, #31
 8009920:	bf18      	it	ne
 8009922:	3604      	addne	r6, #4
 8009924:	1f37      	subs	r7, r6, #4
 8009926:	46b9      	mov	r9, r7
 8009928:	463c      	mov	r4, r7
 800992a:	46ab      	mov	fp, r5
 800992c:	b087      	sub	sp, #28
 800992e:	4690      	mov	r8, r2
 8009930:	6802      	ldr	r2, [r0, #0]
 8009932:	9301      	str	r3, [sp, #4]
 8009934:	f846 5c04 	str.w	r5, [r6, #-4]
 8009938:	9502      	str	r5, [sp, #8]
 800993a:	7851      	ldrb	r1, [r2, #1]
 800993c:	1c53      	adds	r3, r2, #1
 800993e:	9303      	str	r3, [sp, #12]
 8009940:	b341      	cbz	r1, 8009994 <__hexnan+0x88>
 8009942:	4608      	mov	r0, r1
 8009944:	9205      	str	r2, [sp, #20]
 8009946:	9104      	str	r1, [sp, #16]
 8009948:	f7ff fd69 	bl	800941e <__hexdig_fun>
 800994c:	2800      	cmp	r0, #0
 800994e:	d14f      	bne.n	80099f0 <__hexnan+0xe4>
 8009950:	9904      	ldr	r1, [sp, #16]
 8009952:	9a05      	ldr	r2, [sp, #20]
 8009954:	2920      	cmp	r1, #32
 8009956:	d818      	bhi.n	800998a <__hexnan+0x7e>
 8009958:	9b02      	ldr	r3, [sp, #8]
 800995a:	459b      	cmp	fp, r3
 800995c:	dd13      	ble.n	8009986 <__hexnan+0x7a>
 800995e:	454c      	cmp	r4, r9
 8009960:	d206      	bcs.n	8009970 <__hexnan+0x64>
 8009962:	2d07      	cmp	r5, #7
 8009964:	dc04      	bgt.n	8009970 <__hexnan+0x64>
 8009966:	462a      	mov	r2, r5
 8009968:	4649      	mov	r1, r9
 800996a:	4620      	mov	r0, r4
 800996c:	f7ff ffa8 	bl	80098c0 <L_shift>
 8009970:	4544      	cmp	r4, r8
 8009972:	d950      	bls.n	8009a16 <__hexnan+0x10a>
 8009974:	2300      	movs	r3, #0
 8009976:	f1a4 0904 	sub.w	r9, r4, #4
 800997a:	f844 3c04 	str.w	r3, [r4, #-4]
 800997e:	461d      	mov	r5, r3
 8009980:	464c      	mov	r4, r9
 8009982:	f8cd b008 	str.w	fp, [sp, #8]
 8009986:	9a03      	ldr	r2, [sp, #12]
 8009988:	e7d7      	b.n	800993a <__hexnan+0x2e>
 800998a:	2929      	cmp	r1, #41	; 0x29
 800998c:	d156      	bne.n	8009a3c <__hexnan+0x130>
 800998e:	3202      	adds	r2, #2
 8009990:	f8ca 2000 	str.w	r2, [sl]
 8009994:	f1bb 0f00 	cmp.w	fp, #0
 8009998:	d050      	beq.n	8009a3c <__hexnan+0x130>
 800999a:	454c      	cmp	r4, r9
 800999c:	d206      	bcs.n	80099ac <__hexnan+0xa0>
 800999e:	2d07      	cmp	r5, #7
 80099a0:	dc04      	bgt.n	80099ac <__hexnan+0xa0>
 80099a2:	462a      	mov	r2, r5
 80099a4:	4649      	mov	r1, r9
 80099a6:	4620      	mov	r0, r4
 80099a8:	f7ff ff8a 	bl	80098c0 <L_shift>
 80099ac:	4544      	cmp	r4, r8
 80099ae:	d934      	bls.n	8009a1a <__hexnan+0x10e>
 80099b0:	4623      	mov	r3, r4
 80099b2:	f1a8 0204 	sub.w	r2, r8, #4
 80099b6:	f853 1b04 	ldr.w	r1, [r3], #4
 80099ba:	429f      	cmp	r7, r3
 80099bc:	f842 1f04 	str.w	r1, [r2, #4]!
 80099c0:	d2f9      	bcs.n	80099b6 <__hexnan+0xaa>
 80099c2:	1b3b      	subs	r3, r7, r4
 80099c4:	f023 0303 	bic.w	r3, r3, #3
 80099c8:	3304      	adds	r3, #4
 80099ca:	3401      	adds	r4, #1
 80099cc:	3e03      	subs	r6, #3
 80099ce:	42b4      	cmp	r4, r6
 80099d0:	bf88      	it	hi
 80099d2:	2304      	movhi	r3, #4
 80099d4:	2200      	movs	r2, #0
 80099d6:	4443      	add	r3, r8
 80099d8:	f843 2b04 	str.w	r2, [r3], #4
 80099dc:	429f      	cmp	r7, r3
 80099de:	d2fb      	bcs.n	80099d8 <__hexnan+0xcc>
 80099e0:	683b      	ldr	r3, [r7, #0]
 80099e2:	b91b      	cbnz	r3, 80099ec <__hexnan+0xe0>
 80099e4:	4547      	cmp	r7, r8
 80099e6:	d127      	bne.n	8009a38 <__hexnan+0x12c>
 80099e8:	2301      	movs	r3, #1
 80099ea:	603b      	str	r3, [r7, #0]
 80099ec:	2005      	movs	r0, #5
 80099ee:	e026      	b.n	8009a3e <__hexnan+0x132>
 80099f0:	3501      	adds	r5, #1
 80099f2:	2d08      	cmp	r5, #8
 80099f4:	f10b 0b01 	add.w	fp, fp, #1
 80099f8:	dd06      	ble.n	8009a08 <__hexnan+0xfc>
 80099fa:	4544      	cmp	r4, r8
 80099fc:	d9c3      	bls.n	8009986 <__hexnan+0x7a>
 80099fe:	2300      	movs	r3, #0
 8009a00:	2501      	movs	r5, #1
 8009a02:	f844 3c04 	str.w	r3, [r4, #-4]
 8009a06:	3c04      	subs	r4, #4
 8009a08:	6822      	ldr	r2, [r4, #0]
 8009a0a:	f000 000f 	and.w	r0, r0, #15
 8009a0e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8009a12:	6022      	str	r2, [r4, #0]
 8009a14:	e7b7      	b.n	8009986 <__hexnan+0x7a>
 8009a16:	2508      	movs	r5, #8
 8009a18:	e7b5      	b.n	8009986 <__hexnan+0x7a>
 8009a1a:	9b01      	ldr	r3, [sp, #4]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d0df      	beq.n	80099e0 <__hexnan+0xd4>
 8009a20:	f04f 32ff 	mov.w	r2, #4294967295
 8009a24:	f1c3 0320 	rsb	r3, r3, #32
 8009a28:	fa22 f303 	lsr.w	r3, r2, r3
 8009a2c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009a30:	401a      	ands	r2, r3
 8009a32:	f846 2c04 	str.w	r2, [r6, #-4]
 8009a36:	e7d3      	b.n	80099e0 <__hexnan+0xd4>
 8009a38:	3f04      	subs	r7, #4
 8009a3a:	e7d1      	b.n	80099e0 <__hexnan+0xd4>
 8009a3c:	2004      	movs	r0, #4
 8009a3e:	b007      	add	sp, #28
 8009a40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009a44 <_localeconv_r>:
 8009a44:	4800      	ldr	r0, [pc, #0]	; (8009a48 <_localeconv_r+0x4>)
 8009a46:	4770      	bx	lr
 8009a48:	200002e8 	.word	0x200002e8

08009a4c <malloc>:
 8009a4c:	4b02      	ldr	r3, [pc, #8]	; (8009a58 <malloc+0xc>)
 8009a4e:	4601      	mov	r1, r0
 8009a50:	6818      	ldr	r0, [r3, #0]
 8009a52:	f000 bd57 	b.w	800a504 <_malloc_r>
 8009a56:	bf00      	nop
 8009a58:	20000190 	.word	0x20000190

08009a5c <__ascii_mbtowc>:
 8009a5c:	b082      	sub	sp, #8
 8009a5e:	b901      	cbnz	r1, 8009a62 <__ascii_mbtowc+0x6>
 8009a60:	a901      	add	r1, sp, #4
 8009a62:	b142      	cbz	r2, 8009a76 <__ascii_mbtowc+0x1a>
 8009a64:	b14b      	cbz	r3, 8009a7a <__ascii_mbtowc+0x1e>
 8009a66:	7813      	ldrb	r3, [r2, #0]
 8009a68:	600b      	str	r3, [r1, #0]
 8009a6a:	7812      	ldrb	r2, [r2, #0]
 8009a6c:	1e10      	subs	r0, r2, #0
 8009a6e:	bf18      	it	ne
 8009a70:	2001      	movne	r0, #1
 8009a72:	b002      	add	sp, #8
 8009a74:	4770      	bx	lr
 8009a76:	4610      	mov	r0, r2
 8009a78:	e7fb      	b.n	8009a72 <__ascii_mbtowc+0x16>
 8009a7a:	f06f 0001 	mvn.w	r0, #1
 8009a7e:	e7f8      	b.n	8009a72 <__ascii_mbtowc+0x16>

08009a80 <memchr>:
 8009a80:	4603      	mov	r3, r0
 8009a82:	b510      	push	{r4, lr}
 8009a84:	b2c9      	uxtb	r1, r1
 8009a86:	4402      	add	r2, r0
 8009a88:	4293      	cmp	r3, r2
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	d101      	bne.n	8009a92 <memchr+0x12>
 8009a8e:	2000      	movs	r0, #0
 8009a90:	e003      	b.n	8009a9a <memchr+0x1a>
 8009a92:	7804      	ldrb	r4, [r0, #0]
 8009a94:	3301      	adds	r3, #1
 8009a96:	428c      	cmp	r4, r1
 8009a98:	d1f6      	bne.n	8009a88 <memchr+0x8>
 8009a9a:	bd10      	pop	{r4, pc}

08009a9c <_Balloc>:
 8009a9c:	b570      	push	{r4, r5, r6, lr}
 8009a9e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009aa0:	4604      	mov	r4, r0
 8009aa2:	460d      	mov	r5, r1
 8009aa4:	b976      	cbnz	r6, 8009ac4 <_Balloc+0x28>
 8009aa6:	2010      	movs	r0, #16
 8009aa8:	f7ff ffd0 	bl	8009a4c <malloc>
 8009aac:	4602      	mov	r2, r0
 8009aae:	6260      	str	r0, [r4, #36]	; 0x24
 8009ab0:	b920      	cbnz	r0, 8009abc <_Balloc+0x20>
 8009ab2:	2166      	movs	r1, #102	; 0x66
 8009ab4:	4b17      	ldr	r3, [pc, #92]	; (8009b14 <_Balloc+0x78>)
 8009ab6:	4818      	ldr	r0, [pc, #96]	; (8009b18 <_Balloc+0x7c>)
 8009ab8:	f7fe fdb4 	bl	8008624 <__assert_func>
 8009abc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009ac0:	6006      	str	r6, [r0, #0]
 8009ac2:	60c6      	str	r6, [r0, #12]
 8009ac4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009ac6:	68f3      	ldr	r3, [r6, #12]
 8009ac8:	b183      	cbz	r3, 8009aec <_Balloc+0x50>
 8009aca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009acc:	68db      	ldr	r3, [r3, #12]
 8009ace:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009ad2:	b9b8      	cbnz	r0, 8009b04 <_Balloc+0x68>
 8009ad4:	2101      	movs	r1, #1
 8009ad6:	fa01 f605 	lsl.w	r6, r1, r5
 8009ada:	1d72      	adds	r2, r6, #5
 8009adc:	4620      	mov	r0, r4
 8009ade:	0092      	lsls	r2, r2, #2
 8009ae0:	f000 fc94 	bl	800a40c <_calloc_r>
 8009ae4:	b160      	cbz	r0, 8009b00 <_Balloc+0x64>
 8009ae6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009aea:	e00e      	b.n	8009b0a <_Balloc+0x6e>
 8009aec:	2221      	movs	r2, #33	; 0x21
 8009aee:	2104      	movs	r1, #4
 8009af0:	4620      	mov	r0, r4
 8009af2:	f000 fc8b 	bl	800a40c <_calloc_r>
 8009af6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009af8:	60f0      	str	r0, [r6, #12]
 8009afa:	68db      	ldr	r3, [r3, #12]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d1e4      	bne.n	8009aca <_Balloc+0x2e>
 8009b00:	2000      	movs	r0, #0
 8009b02:	bd70      	pop	{r4, r5, r6, pc}
 8009b04:	6802      	ldr	r2, [r0, #0]
 8009b06:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009b10:	e7f7      	b.n	8009b02 <_Balloc+0x66>
 8009b12:	bf00      	nop
 8009b14:	0800b850 	.word	0x0800b850
 8009b18:	0800baf4 	.word	0x0800baf4

08009b1c <_Bfree>:
 8009b1c:	b570      	push	{r4, r5, r6, lr}
 8009b1e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009b20:	4605      	mov	r5, r0
 8009b22:	460c      	mov	r4, r1
 8009b24:	b976      	cbnz	r6, 8009b44 <_Bfree+0x28>
 8009b26:	2010      	movs	r0, #16
 8009b28:	f7ff ff90 	bl	8009a4c <malloc>
 8009b2c:	4602      	mov	r2, r0
 8009b2e:	6268      	str	r0, [r5, #36]	; 0x24
 8009b30:	b920      	cbnz	r0, 8009b3c <_Bfree+0x20>
 8009b32:	218a      	movs	r1, #138	; 0x8a
 8009b34:	4b08      	ldr	r3, [pc, #32]	; (8009b58 <_Bfree+0x3c>)
 8009b36:	4809      	ldr	r0, [pc, #36]	; (8009b5c <_Bfree+0x40>)
 8009b38:	f7fe fd74 	bl	8008624 <__assert_func>
 8009b3c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009b40:	6006      	str	r6, [r0, #0]
 8009b42:	60c6      	str	r6, [r0, #12]
 8009b44:	b13c      	cbz	r4, 8009b56 <_Bfree+0x3a>
 8009b46:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009b48:	6862      	ldr	r2, [r4, #4]
 8009b4a:	68db      	ldr	r3, [r3, #12]
 8009b4c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009b50:	6021      	str	r1, [r4, #0]
 8009b52:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009b56:	bd70      	pop	{r4, r5, r6, pc}
 8009b58:	0800b850 	.word	0x0800b850
 8009b5c:	0800baf4 	.word	0x0800baf4

08009b60 <__multadd>:
 8009b60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b64:	4607      	mov	r7, r0
 8009b66:	460c      	mov	r4, r1
 8009b68:	461e      	mov	r6, r3
 8009b6a:	2000      	movs	r0, #0
 8009b6c:	690d      	ldr	r5, [r1, #16]
 8009b6e:	f101 0c14 	add.w	ip, r1, #20
 8009b72:	f8dc 3000 	ldr.w	r3, [ip]
 8009b76:	3001      	adds	r0, #1
 8009b78:	b299      	uxth	r1, r3
 8009b7a:	fb02 6101 	mla	r1, r2, r1, r6
 8009b7e:	0c1e      	lsrs	r6, r3, #16
 8009b80:	0c0b      	lsrs	r3, r1, #16
 8009b82:	fb02 3306 	mla	r3, r2, r6, r3
 8009b86:	b289      	uxth	r1, r1
 8009b88:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009b8c:	4285      	cmp	r5, r0
 8009b8e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009b92:	f84c 1b04 	str.w	r1, [ip], #4
 8009b96:	dcec      	bgt.n	8009b72 <__multadd+0x12>
 8009b98:	b30e      	cbz	r6, 8009bde <__multadd+0x7e>
 8009b9a:	68a3      	ldr	r3, [r4, #8]
 8009b9c:	42ab      	cmp	r3, r5
 8009b9e:	dc19      	bgt.n	8009bd4 <__multadd+0x74>
 8009ba0:	6861      	ldr	r1, [r4, #4]
 8009ba2:	4638      	mov	r0, r7
 8009ba4:	3101      	adds	r1, #1
 8009ba6:	f7ff ff79 	bl	8009a9c <_Balloc>
 8009baa:	4680      	mov	r8, r0
 8009bac:	b928      	cbnz	r0, 8009bba <__multadd+0x5a>
 8009bae:	4602      	mov	r2, r0
 8009bb0:	21b5      	movs	r1, #181	; 0xb5
 8009bb2:	4b0c      	ldr	r3, [pc, #48]	; (8009be4 <__multadd+0x84>)
 8009bb4:	480c      	ldr	r0, [pc, #48]	; (8009be8 <__multadd+0x88>)
 8009bb6:	f7fe fd35 	bl	8008624 <__assert_func>
 8009bba:	6922      	ldr	r2, [r4, #16]
 8009bbc:	f104 010c 	add.w	r1, r4, #12
 8009bc0:	3202      	adds	r2, #2
 8009bc2:	0092      	lsls	r2, r2, #2
 8009bc4:	300c      	adds	r0, #12
 8009bc6:	f7fd f989 	bl	8006edc <memcpy>
 8009bca:	4621      	mov	r1, r4
 8009bcc:	4638      	mov	r0, r7
 8009bce:	f7ff ffa5 	bl	8009b1c <_Bfree>
 8009bd2:	4644      	mov	r4, r8
 8009bd4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009bd8:	3501      	adds	r5, #1
 8009bda:	615e      	str	r6, [r3, #20]
 8009bdc:	6125      	str	r5, [r4, #16]
 8009bde:	4620      	mov	r0, r4
 8009be0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009be4:	0800ba69 	.word	0x0800ba69
 8009be8:	0800baf4 	.word	0x0800baf4

08009bec <__s2b>:
 8009bec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009bf0:	4615      	mov	r5, r2
 8009bf2:	2209      	movs	r2, #9
 8009bf4:	461f      	mov	r7, r3
 8009bf6:	3308      	adds	r3, #8
 8009bf8:	460c      	mov	r4, r1
 8009bfa:	fb93 f3f2 	sdiv	r3, r3, r2
 8009bfe:	4606      	mov	r6, r0
 8009c00:	2201      	movs	r2, #1
 8009c02:	2100      	movs	r1, #0
 8009c04:	429a      	cmp	r2, r3
 8009c06:	db09      	blt.n	8009c1c <__s2b+0x30>
 8009c08:	4630      	mov	r0, r6
 8009c0a:	f7ff ff47 	bl	8009a9c <_Balloc>
 8009c0e:	b940      	cbnz	r0, 8009c22 <__s2b+0x36>
 8009c10:	4602      	mov	r2, r0
 8009c12:	21ce      	movs	r1, #206	; 0xce
 8009c14:	4b18      	ldr	r3, [pc, #96]	; (8009c78 <__s2b+0x8c>)
 8009c16:	4819      	ldr	r0, [pc, #100]	; (8009c7c <__s2b+0x90>)
 8009c18:	f7fe fd04 	bl	8008624 <__assert_func>
 8009c1c:	0052      	lsls	r2, r2, #1
 8009c1e:	3101      	adds	r1, #1
 8009c20:	e7f0      	b.n	8009c04 <__s2b+0x18>
 8009c22:	9b08      	ldr	r3, [sp, #32]
 8009c24:	2d09      	cmp	r5, #9
 8009c26:	6143      	str	r3, [r0, #20]
 8009c28:	f04f 0301 	mov.w	r3, #1
 8009c2c:	6103      	str	r3, [r0, #16]
 8009c2e:	dd16      	ble.n	8009c5e <__s2b+0x72>
 8009c30:	f104 0909 	add.w	r9, r4, #9
 8009c34:	46c8      	mov	r8, r9
 8009c36:	442c      	add	r4, r5
 8009c38:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009c3c:	4601      	mov	r1, r0
 8009c3e:	220a      	movs	r2, #10
 8009c40:	4630      	mov	r0, r6
 8009c42:	3b30      	subs	r3, #48	; 0x30
 8009c44:	f7ff ff8c 	bl	8009b60 <__multadd>
 8009c48:	45a0      	cmp	r8, r4
 8009c4a:	d1f5      	bne.n	8009c38 <__s2b+0x4c>
 8009c4c:	f1a5 0408 	sub.w	r4, r5, #8
 8009c50:	444c      	add	r4, r9
 8009c52:	1b2d      	subs	r5, r5, r4
 8009c54:	1963      	adds	r3, r4, r5
 8009c56:	42bb      	cmp	r3, r7
 8009c58:	db04      	blt.n	8009c64 <__s2b+0x78>
 8009c5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c5e:	2509      	movs	r5, #9
 8009c60:	340a      	adds	r4, #10
 8009c62:	e7f6      	b.n	8009c52 <__s2b+0x66>
 8009c64:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009c68:	4601      	mov	r1, r0
 8009c6a:	220a      	movs	r2, #10
 8009c6c:	4630      	mov	r0, r6
 8009c6e:	3b30      	subs	r3, #48	; 0x30
 8009c70:	f7ff ff76 	bl	8009b60 <__multadd>
 8009c74:	e7ee      	b.n	8009c54 <__s2b+0x68>
 8009c76:	bf00      	nop
 8009c78:	0800ba69 	.word	0x0800ba69
 8009c7c:	0800baf4 	.word	0x0800baf4

08009c80 <__hi0bits>:
 8009c80:	0c02      	lsrs	r2, r0, #16
 8009c82:	0412      	lsls	r2, r2, #16
 8009c84:	4603      	mov	r3, r0
 8009c86:	b9ca      	cbnz	r2, 8009cbc <__hi0bits+0x3c>
 8009c88:	0403      	lsls	r3, r0, #16
 8009c8a:	2010      	movs	r0, #16
 8009c8c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009c90:	bf04      	itt	eq
 8009c92:	021b      	lsleq	r3, r3, #8
 8009c94:	3008      	addeq	r0, #8
 8009c96:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009c9a:	bf04      	itt	eq
 8009c9c:	011b      	lsleq	r3, r3, #4
 8009c9e:	3004      	addeq	r0, #4
 8009ca0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009ca4:	bf04      	itt	eq
 8009ca6:	009b      	lsleq	r3, r3, #2
 8009ca8:	3002      	addeq	r0, #2
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	db05      	blt.n	8009cba <__hi0bits+0x3a>
 8009cae:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8009cb2:	f100 0001 	add.w	r0, r0, #1
 8009cb6:	bf08      	it	eq
 8009cb8:	2020      	moveq	r0, #32
 8009cba:	4770      	bx	lr
 8009cbc:	2000      	movs	r0, #0
 8009cbe:	e7e5      	b.n	8009c8c <__hi0bits+0xc>

08009cc0 <__lo0bits>:
 8009cc0:	6803      	ldr	r3, [r0, #0]
 8009cc2:	4602      	mov	r2, r0
 8009cc4:	f013 0007 	ands.w	r0, r3, #7
 8009cc8:	d00b      	beq.n	8009ce2 <__lo0bits+0x22>
 8009cca:	07d9      	lsls	r1, r3, #31
 8009ccc:	d421      	bmi.n	8009d12 <__lo0bits+0x52>
 8009cce:	0798      	lsls	r0, r3, #30
 8009cd0:	bf49      	itett	mi
 8009cd2:	085b      	lsrmi	r3, r3, #1
 8009cd4:	089b      	lsrpl	r3, r3, #2
 8009cd6:	2001      	movmi	r0, #1
 8009cd8:	6013      	strmi	r3, [r2, #0]
 8009cda:	bf5c      	itt	pl
 8009cdc:	2002      	movpl	r0, #2
 8009cde:	6013      	strpl	r3, [r2, #0]
 8009ce0:	4770      	bx	lr
 8009ce2:	b299      	uxth	r1, r3
 8009ce4:	b909      	cbnz	r1, 8009cea <__lo0bits+0x2a>
 8009ce6:	2010      	movs	r0, #16
 8009ce8:	0c1b      	lsrs	r3, r3, #16
 8009cea:	b2d9      	uxtb	r1, r3
 8009cec:	b909      	cbnz	r1, 8009cf2 <__lo0bits+0x32>
 8009cee:	3008      	adds	r0, #8
 8009cf0:	0a1b      	lsrs	r3, r3, #8
 8009cf2:	0719      	lsls	r1, r3, #28
 8009cf4:	bf04      	itt	eq
 8009cf6:	091b      	lsreq	r3, r3, #4
 8009cf8:	3004      	addeq	r0, #4
 8009cfa:	0799      	lsls	r1, r3, #30
 8009cfc:	bf04      	itt	eq
 8009cfe:	089b      	lsreq	r3, r3, #2
 8009d00:	3002      	addeq	r0, #2
 8009d02:	07d9      	lsls	r1, r3, #31
 8009d04:	d403      	bmi.n	8009d0e <__lo0bits+0x4e>
 8009d06:	085b      	lsrs	r3, r3, #1
 8009d08:	f100 0001 	add.w	r0, r0, #1
 8009d0c:	d003      	beq.n	8009d16 <__lo0bits+0x56>
 8009d0e:	6013      	str	r3, [r2, #0]
 8009d10:	4770      	bx	lr
 8009d12:	2000      	movs	r0, #0
 8009d14:	4770      	bx	lr
 8009d16:	2020      	movs	r0, #32
 8009d18:	4770      	bx	lr
	...

08009d1c <__i2b>:
 8009d1c:	b510      	push	{r4, lr}
 8009d1e:	460c      	mov	r4, r1
 8009d20:	2101      	movs	r1, #1
 8009d22:	f7ff febb 	bl	8009a9c <_Balloc>
 8009d26:	4602      	mov	r2, r0
 8009d28:	b928      	cbnz	r0, 8009d36 <__i2b+0x1a>
 8009d2a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009d2e:	4b04      	ldr	r3, [pc, #16]	; (8009d40 <__i2b+0x24>)
 8009d30:	4804      	ldr	r0, [pc, #16]	; (8009d44 <__i2b+0x28>)
 8009d32:	f7fe fc77 	bl	8008624 <__assert_func>
 8009d36:	2301      	movs	r3, #1
 8009d38:	6144      	str	r4, [r0, #20]
 8009d3a:	6103      	str	r3, [r0, #16]
 8009d3c:	bd10      	pop	{r4, pc}
 8009d3e:	bf00      	nop
 8009d40:	0800ba69 	.word	0x0800ba69
 8009d44:	0800baf4 	.word	0x0800baf4

08009d48 <__multiply>:
 8009d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d4c:	4691      	mov	r9, r2
 8009d4e:	690a      	ldr	r2, [r1, #16]
 8009d50:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009d54:	460c      	mov	r4, r1
 8009d56:	429a      	cmp	r2, r3
 8009d58:	bfbe      	ittt	lt
 8009d5a:	460b      	movlt	r3, r1
 8009d5c:	464c      	movlt	r4, r9
 8009d5e:	4699      	movlt	r9, r3
 8009d60:	6927      	ldr	r7, [r4, #16]
 8009d62:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009d66:	68a3      	ldr	r3, [r4, #8]
 8009d68:	6861      	ldr	r1, [r4, #4]
 8009d6a:	eb07 060a 	add.w	r6, r7, sl
 8009d6e:	42b3      	cmp	r3, r6
 8009d70:	b085      	sub	sp, #20
 8009d72:	bfb8      	it	lt
 8009d74:	3101      	addlt	r1, #1
 8009d76:	f7ff fe91 	bl	8009a9c <_Balloc>
 8009d7a:	b930      	cbnz	r0, 8009d8a <__multiply+0x42>
 8009d7c:	4602      	mov	r2, r0
 8009d7e:	f240 115d 	movw	r1, #349	; 0x15d
 8009d82:	4b43      	ldr	r3, [pc, #268]	; (8009e90 <__multiply+0x148>)
 8009d84:	4843      	ldr	r0, [pc, #268]	; (8009e94 <__multiply+0x14c>)
 8009d86:	f7fe fc4d 	bl	8008624 <__assert_func>
 8009d8a:	f100 0514 	add.w	r5, r0, #20
 8009d8e:	462b      	mov	r3, r5
 8009d90:	2200      	movs	r2, #0
 8009d92:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009d96:	4543      	cmp	r3, r8
 8009d98:	d321      	bcc.n	8009dde <__multiply+0x96>
 8009d9a:	f104 0314 	add.w	r3, r4, #20
 8009d9e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009da2:	f109 0314 	add.w	r3, r9, #20
 8009da6:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009daa:	9202      	str	r2, [sp, #8]
 8009dac:	1b3a      	subs	r2, r7, r4
 8009dae:	3a15      	subs	r2, #21
 8009db0:	f022 0203 	bic.w	r2, r2, #3
 8009db4:	3204      	adds	r2, #4
 8009db6:	f104 0115 	add.w	r1, r4, #21
 8009dba:	428f      	cmp	r7, r1
 8009dbc:	bf38      	it	cc
 8009dbe:	2204      	movcc	r2, #4
 8009dc0:	9201      	str	r2, [sp, #4]
 8009dc2:	9a02      	ldr	r2, [sp, #8]
 8009dc4:	9303      	str	r3, [sp, #12]
 8009dc6:	429a      	cmp	r2, r3
 8009dc8:	d80c      	bhi.n	8009de4 <__multiply+0x9c>
 8009dca:	2e00      	cmp	r6, #0
 8009dcc:	dd03      	ble.n	8009dd6 <__multiply+0x8e>
 8009dce:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d059      	beq.n	8009e8a <__multiply+0x142>
 8009dd6:	6106      	str	r6, [r0, #16]
 8009dd8:	b005      	add	sp, #20
 8009dda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dde:	f843 2b04 	str.w	r2, [r3], #4
 8009de2:	e7d8      	b.n	8009d96 <__multiply+0x4e>
 8009de4:	f8b3 a000 	ldrh.w	sl, [r3]
 8009de8:	f1ba 0f00 	cmp.w	sl, #0
 8009dec:	d023      	beq.n	8009e36 <__multiply+0xee>
 8009dee:	46a9      	mov	r9, r5
 8009df0:	f04f 0c00 	mov.w	ip, #0
 8009df4:	f104 0e14 	add.w	lr, r4, #20
 8009df8:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009dfc:	f8d9 1000 	ldr.w	r1, [r9]
 8009e00:	fa1f fb82 	uxth.w	fp, r2
 8009e04:	b289      	uxth	r1, r1
 8009e06:	fb0a 110b 	mla	r1, sl, fp, r1
 8009e0a:	4461      	add	r1, ip
 8009e0c:	f8d9 c000 	ldr.w	ip, [r9]
 8009e10:	0c12      	lsrs	r2, r2, #16
 8009e12:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8009e16:	fb0a c202 	mla	r2, sl, r2, ip
 8009e1a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009e1e:	b289      	uxth	r1, r1
 8009e20:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009e24:	4577      	cmp	r7, lr
 8009e26:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009e2a:	f849 1b04 	str.w	r1, [r9], #4
 8009e2e:	d8e3      	bhi.n	8009df8 <__multiply+0xb0>
 8009e30:	9a01      	ldr	r2, [sp, #4]
 8009e32:	f845 c002 	str.w	ip, [r5, r2]
 8009e36:	9a03      	ldr	r2, [sp, #12]
 8009e38:	3304      	adds	r3, #4
 8009e3a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009e3e:	f1b9 0f00 	cmp.w	r9, #0
 8009e42:	d020      	beq.n	8009e86 <__multiply+0x13e>
 8009e44:	46ae      	mov	lr, r5
 8009e46:	f04f 0a00 	mov.w	sl, #0
 8009e4a:	6829      	ldr	r1, [r5, #0]
 8009e4c:	f104 0c14 	add.w	ip, r4, #20
 8009e50:	f8bc b000 	ldrh.w	fp, [ip]
 8009e54:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009e58:	b289      	uxth	r1, r1
 8009e5a:	fb09 220b 	mla	r2, r9, fp, r2
 8009e5e:	4492      	add	sl, r2
 8009e60:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009e64:	f84e 1b04 	str.w	r1, [lr], #4
 8009e68:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009e6c:	f8be 1000 	ldrh.w	r1, [lr]
 8009e70:	0c12      	lsrs	r2, r2, #16
 8009e72:	fb09 1102 	mla	r1, r9, r2, r1
 8009e76:	4567      	cmp	r7, ip
 8009e78:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009e7c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009e80:	d8e6      	bhi.n	8009e50 <__multiply+0x108>
 8009e82:	9a01      	ldr	r2, [sp, #4]
 8009e84:	50a9      	str	r1, [r5, r2]
 8009e86:	3504      	adds	r5, #4
 8009e88:	e79b      	b.n	8009dc2 <__multiply+0x7a>
 8009e8a:	3e01      	subs	r6, #1
 8009e8c:	e79d      	b.n	8009dca <__multiply+0x82>
 8009e8e:	bf00      	nop
 8009e90:	0800ba69 	.word	0x0800ba69
 8009e94:	0800baf4 	.word	0x0800baf4

08009e98 <__pow5mult>:
 8009e98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e9c:	4615      	mov	r5, r2
 8009e9e:	f012 0203 	ands.w	r2, r2, #3
 8009ea2:	4606      	mov	r6, r0
 8009ea4:	460f      	mov	r7, r1
 8009ea6:	d007      	beq.n	8009eb8 <__pow5mult+0x20>
 8009ea8:	4c25      	ldr	r4, [pc, #148]	; (8009f40 <__pow5mult+0xa8>)
 8009eaa:	3a01      	subs	r2, #1
 8009eac:	2300      	movs	r3, #0
 8009eae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009eb2:	f7ff fe55 	bl	8009b60 <__multadd>
 8009eb6:	4607      	mov	r7, r0
 8009eb8:	10ad      	asrs	r5, r5, #2
 8009eba:	d03d      	beq.n	8009f38 <__pow5mult+0xa0>
 8009ebc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009ebe:	b97c      	cbnz	r4, 8009ee0 <__pow5mult+0x48>
 8009ec0:	2010      	movs	r0, #16
 8009ec2:	f7ff fdc3 	bl	8009a4c <malloc>
 8009ec6:	4602      	mov	r2, r0
 8009ec8:	6270      	str	r0, [r6, #36]	; 0x24
 8009eca:	b928      	cbnz	r0, 8009ed8 <__pow5mult+0x40>
 8009ecc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009ed0:	4b1c      	ldr	r3, [pc, #112]	; (8009f44 <__pow5mult+0xac>)
 8009ed2:	481d      	ldr	r0, [pc, #116]	; (8009f48 <__pow5mult+0xb0>)
 8009ed4:	f7fe fba6 	bl	8008624 <__assert_func>
 8009ed8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009edc:	6004      	str	r4, [r0, #0]
 8009ede:	60c4      	str	r4, [r0, #12]
 8009ee0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009ee4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009ee8:	b94c      	cbnz	r4, 8009efe <__pow5mult+0x66>
 8009eea:	f240 2171 	movw	r1, #625	; 0x271
 8009eee:	4630      	mov	r0, r6
 8009ef0:	f7ff ff14 	bl	8009d1c <__i2b>
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	4604      	mov	r4, r0
 8009ef8:	f8c8 0008 	str.w	r0, [r8, #8]
 8009efc:	6003      	str	r3, [r0, #0]
 8009efe:	f04f 0900 	mov.w	r9, #0
 8009f02:	07eb      	lsls	r3, r5, #31
 8009f04:	d50a      	bpl.n	8009f1c <__pow5mult+0x84>
 8009f06:	4639      	mov	r1, r7
 8009f08:	4622      	mov	r2, r4
 8009f0a:	4630      	mov	r0, r6
 8009f0c:	f7ff ff1c 	bl	8009d48 <__multiply>
 8009f10:	4680      	mov	r8, r0
 8009f12:	4639      	mov	r1, r7
 8009f14:	4630      	mov	r0, r6
 8009f16:	f7ff fe01 	bl	8009b1c <_Bfree>
 8009f1a:	4647      	mov	r7, r8
 8009f1c:	106d      	asrs	r5, r5, #1
 8009f1e:	d00b      	beq.n	8009f38 <__pow5mult+0xa0>
 8009f20:	6820      	ldr	r0, [r4, #0]
 8009f22:	b938      	cbnz	r0, 8009f34 <__pow5mult+0x9c>
 8009f24:	4622      	mov	r2, r4
 8009f26:	4621      	mov	r1, r4
 8009f28:	4630      	mov	r0, r6
 8009f2a:	f7ff ff0d 	bl	8009d48 <__multiply>
 8009f2e:	6020      	str	r0, [r4, #0]
 8009f30:	f8c0 9000 	str.w	r9, [r0]
 8009f34:	4604      	mov	r4, r0
 8009f36:	e7e4      	b.n	8009f02 <__pow5mult+0x6a>
 8009f38:	4638      	mov	r0, r7
 8009f3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f3e:	bf00      	nop
 8009f40:	0800bc40 	.word	0x0800bc40
 8009f44:	0800b850 	.word	0x0800b850
 8009f48:	0800baf4 	.word	0x0800baf4

08009f4c <__lshift>:
 8009f4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f50:	460c      	mov	r4, r1
 8009f52:	4607      	mov	r7, r0
 8009f54:	4691      	mov	r9, r2
 8009f56:	6923      	ldr	r3, [r4, #16]
 8009f58:	6849      	ldr	r1, [r1, #4]
 8009f5a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009f5e:	68a3      	ldr	r3, [r4, #8]
 8009f60:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009f64:	f108 0601 	add.w	r6, r8, #1
 8009f68:	42b3      	cmp	r3, r6
 8009f6a:	db0b      	blt.n	8009f84 <__lshift+0x38>
 8009f6c:	4638      	mov	r0, r7
 8009f6e:	f7ff fd95 	bl	8009a9c <_Balloc>
 8009f72:	4605      	mov	r5, r0
 8009f74:	b948      	cbnz	r0, 8009f8a <__lshift+0x3e>
 8009f76:	4602      	mov	r2, r0
 8009f78:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009f7c:	4b29      	ldr	r3, [pc, #164]	; (800a024 <__lshift+0xd8>)
 8009f7e:	482a      	ldr	r0, [pc, #168]	; (800a028 <__lshift+0xdc>)
 8009f80:	f7fe fb50 	bl	8008624 <__assert_func>
 8009f84:	3101      	adds	r1, #1
 8009f86:	005b      	lsls	r3, r3, #1
 8009f88:	e7ee      	b.n	8009f68 <__lshift+0x1c>
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	f100 0114 	add.w	r1, r0, #20
 8009f90:	f100 0210 	add.w	r2, r0, #16
 8009f94:	4618      	mov	r0, r3
 8009f96:	4553      	cmp	r3, sl
 8009f98:	db37      	blt.n	800a00a <__lshift+0xbe>
 8009f9a:	6920      	ldr	r0, [r4, #16]
 8009f9c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009fa0:	f104 0314 	add.w	r3, r4, #20
 8009fa4:	f019 091f 	ands.w	r9, r9, #31
 8009fa8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009fac:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009fb0:	d02f      	beq.n	800a012 <__lshift+0xc6>
 8009fb2:	468a      	mov	sl, r1
 8009fb4:	f04f 0c00 	mov.w	ip, #0
 8009fb8:	f1c9 0e20 	rsb	lr, r9, #32
 8009fbc:	681a      	ldr	r2, [r3, #0]
 8009fbe:	fa02 f209 	lsl.w	r2, r2, r9
 8009fc2:	ea42 020c 	orr.w	r2, r2, ip
 8009fc6:	f84a 2b04 	str.w	r2, [sl], #4
 8009fca:	f853 2b04 	ldr.w	r2, [r3], #4
 8009fce:	4298      	cmp	r0, r3
 8009fd0:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009fd4:	d8f2      	bhi.n	8009fbc <__lshift+0x70>
 8009fd6:	1b03      	subs	r3, r0, r4
 8009fd8:	3b15      	subs	r3, #21
 8009fda:	f023 0303 	bic.w	r3, r3, #3
 8009fde:	3304      	adds	r3, #4
 8009fe0:	f104 0215 	add.w	r2, r4, #21
 8009fe4:	4290      	cmp	r0, r2
 8009fe6:	bf38      	it	cc
 8009fe8:	2304      	movcc	r3, #4
 8009fea:	f841 c003 	str.w	ip, [r1, r3]
 8009fee:	f1bc 0f00 	cmp.w	ip, #0
 8009ff2:	d001      	beq.n	8009ff8 <__lshift+0xac>
 8009ff4:	f108 0602 	add.w	r6, r8, #2
 8009ff8:	3e01      	subs	r6, #1
 8009ffa:	4638      	mov	r0, r7
 8009ffc:	4621      	mov	r1, r4
 8009ffe:	612e      	str	r6, [r5, #16]
 800a000:	f7ff fd8c 	bl	8009b1c <_Bfree>
 800a004:	4628      	mov	r0, r5
 800a006:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a00a:	f842 0f04 	str.w	r0, [r2, #4]!
 800a00e:	3301      	adds	r3, #1
 800a010:	e7c1      	b.n	8009f96 <__lshift+0x4a>
 800a012:	3904      	subs	r1, #4
 800a014:	f853 2b04 	ldr.w	r2, [r3], #4
 800a018:	4298      	cmp	r0, r3
 800a01a:	f841 2f04 	str.w	r2, [r1, #4]!
 800a01e:	d8f9      	bhi.n	800a014 <__lshift+0xc8>
 800a020:	e7ea      	b.n	8009ff8 <__lshift+0xac>
 800a022:	bf00      	nop
 800a024:	0800ba69 	.word	0x0800ba69
 800a028:	0800baf4 	.word	0x0800baf4

0800a02c <__mcmp>:
 800a02c:	4603      	mov	r3, r0
 800a02e:	690a      	ldr	r2, [r1, #16]
 800a030:	6900      	ldr	r0, [r0, #16]
 800a032:	b530      	push	{r4, r5, lr}
 800a034:	1a80      	subs	r0, r0, r2
 800a036:	d10d      	bne.n	800a054 <__mcmp+0x28>
 800a038:	3314      	adds	r3, #20
 800a03a:	3114      	adds	r1, #20
 800a03c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a040:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a044:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a048:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a04c:	4295      	cmp	r5, r2
 800a04e:	d002      	beq.n	800a056 <__mcmp+0x2a>
 800a050:	d304      	bcc.n	800a05c <__mcmp+0x30>
 800a052:	2001      	movs	r0, #1
 800a054:	bd30      	pop	{r4, r5, pc}
 800a056:	42a3      	cmp	r3, r4
 800a058:	d3f4      	bcc.n	800a044 <__mcmp+0x18>
 800a05a:	e7fb      	b.n	800a054 <__mcmp+0x28>
 800a05c:	f04f 30ff 	mov.w	r0, #4294967295
 800a060:	e7f8      	b.n	800a054 <__mcmp+0x28>
	...

0800a064 <__mdiff>:
 800a064:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a068:	460d      	mov	r5, r1
 800a06a:	4607      	mov	r7, r0
 800a06c:	4611      	mov	r1, r2
 800a06e:	4628      	mov	r0, r5
 800a070:	4614      	mov	r4, r2
 800a072:	f7ff ffdb 	bl	800a02c <__mcmp>
 800a076:	1e06      	subs	r6, r0, #0
 800a078:	d111      	bne.n	800a09e <__mdiff+0x3a>
 800a07a:	4631      	mov	r1, r6
 800a07c:	4638      	mov	r0, r7
 800a07e:	f7ff fd0d 	bl	8009a9c <_Balloc>
 800a082:	4602      	mov	r2, r0
 800a084:	b928      	cbnz	r0, 800a092 <__mdiff+0x2e>
 800a086:	f240 2132 	movw	r1, #562	; 0x232
 800a08a:	4b3a      	ldr	r3, [pc, #232]	; (800a174 <__mdiff+0x110>)
 800a08c:	483a      	ldr	r0, [pc, #232]	; (800a178 <__mdiff+0x114>)
 800a08e:	f7fe fac9 	bl	8008624 <__assert_func>
 800a092:	2301      	movs	r3, #1
 800a094:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800a098:	4610      	mov	r0, r2
 800a09a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a09e:	bfa4      	itt	ge
 800a0a0:	4623      	movge	r3, r4
 800a0a2:	462c      	movge	r4, r5
 800a0a4:	4638      	mov	r0, r7
 800a0a6:	6861      	ldr	r1, [r4, #4]
 800a0a8:	bfa6      	itte	ge
 800a0aa:	461d      	movge	r5, r3
 800a0ac:	2600      	movge	r6, #0
 800a0ae:	2601      	movlt	r6, #1
 800a0b0:	f7ff fcf4 	bl	8009a9c <_Balloc>
 800a0b4:	4602      	mov	r2, r0
 800a0b6:	b918      	cbnz	r0, 800a0c0 <__mdiff+0x5c>
 800a0b8:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a0bc:	4b2d      	ldr	r3, [pc, #180]	; (800a174 <__mdiff+0x110>)
 800a0be:	e7e5      	b.n	800a08c <__mdiff+0x28>
 800a0c0:	f102 0814 	add.w	r8, r2, #20
 800a0c4:	46c2      	mov	sl, r8
 800a0c6:	f04f 0c00 	mov.w	ip, #0
 800a0ca:	6927      	ldr	r7, [r4, #16]
 800a0cc:	60c6      	str	r6, [r0, #12]
 800a0ce:	692e      	ldr	r6, [r5, #16]
 800a0d0:	f104 0014 	add.w	r0, r4, #20
 800a0d4:	f105 0914 	add.w	r9, r5, #20
 800a0d8:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800a0dc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a0e0:	3410      	adds	r4, #16
 800a0e2:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800a0e6:	f859 3b04 	ldr.w	r3, [r9], #4
 800a0ea:	fa1f f18b 	uxth.w	r1, fp
 800a0ee:	448c      	add	ip, r1
 800a0f0:	b299      	uxth	r1, r3
 800a0f2:	0c1b      	lsrs	r3, r3, #16
 800a0f4:	ebac 0101 	sub.w	r1, ip, r1
 800a0f8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a0fc:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800a100:	b289      	uxth	r1, r1
 800a102:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800a106:	454e      	cmp	r6, r9
 800a108:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800a10c:	f84a 3b04 	str.w	r3, [sl], #4
 800a110:	d8e7      	bhi.n	800a0e2 <__mdiff+0x7e>
 800a112:	1b73      	subs	r3, r6, r5
 800a114:	3b15      	subs	r3, #21
 800a116:	f023 0303 	bic.w	r3, r3, #3
 800a11a:	3515      	adds	r5, #21
 800a11c:	3304      	adds	r3, #4
 800a11e:	42ae      	cmp	r6, r5
 800a120:	bf38      	it	cc
 800a122:	2304      	movcc	r3, #4
 800a124:	4418      	add	r0, r3
 800a126:	4443      	add	r3, r8
 800a128:	461e      	mov	r6, r3
 800a12a:	4605      	mov	r5, r0
 800a12c:	4575      	cmp	r5, lr
 800a12e:	d30e      	bcc.n	800a14e <__mdiff+0xea>
 800a130:	f10e 0103 	add.w	r1, lr, #3
 800a134:	1a09      	subs	r1, r1, r0
 800a136:	f021 0103 	bic.w	r1, r1, #3
 800a13a:	3803      	subs	r0, #3
 800a13c:	4586      	cmp	lr, r0
 800a13e:	bf38      	it	cc
 800a140:	2100      	movcc	r1, #0
 800a142:	4419      	add	r1, r3
 800a144:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800a148:	b18b      	cbz	r3, 800a16e <__mdiff+0x10a>
 800a14a:	6117      	str	r7, [r2, #16]
 800a14c:	e7a4      	b.n	800a098 <__mdiff+0x34>
 800a14e:	f855 8b04 	ldr.w	r8, [r5], #4
 800a152:	fa1f f188 	uxth.w	r1, r8
 800a156:	4461      	add	r1, ip
 800a158:	140c      	asrs	r4, r1, #16
 800a15a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a15e:	b289      	uxth	r1, r1
 800a160:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a164:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800a168:	f846 1b04 	str.w	r1, [r6], #4
 800a16c:	e7de      	b.n	800a12c <__mdiff+0xc8>
 800a16e:	3f01      	subs	r7, #1
 800a170:	e7e8      	b.n	800a144 <__mdiff+0xe0>
 800a172:	bf00      	nop
 800a174:	0800ba69 	.word	0x0800ba69
 800a178:	0800baf4 	.word	0x0800baf4

0800a17c <__ulp>:
 800a17c:	4b11      	ldr	r3, [pc, #68]	; (800a1c4 <__ulp+0x48>)
 800a17e:	400b      	ands	r3, r1
 800a180:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800a184:	2b00      	cmp	r3, #0
 800a186:	dd02      	ble.n	800a18e <__ulp+0x12>
 800a188:	2000      	movs	r0, #0
 800a18a:	4619      	mov	r1, r3
 800a18c:	4770      	bx	lr
 800a18e:	425b      	negs	r3, r3
 800a190:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800a194:	f04f 0000 	mov.w	r0, #0
 800a198:	f04f 0100 	mov.w	r1, #0
 800a19c:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a1a0:	da04      	bge.n	800a1ac <__ulp+0x30>
 800a1a2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a1a6:	fa43 f102 	asr.w	r1, r3, r2
 800a1aa:	4770      	bx	lr
 800a1ac:	f1a2 0314 	sub.w	r3, r2, #20
 800a1b0:	2b1e      	cmp	r3, #30
 800a1b2:	bfd6      	itet	le
 800a1b4:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800a1b8:	2301      	movgt	r3, #1
 800a1ba:	fa22 f303 	lsrle.w	r3, r2, r3
 800a1be:	4618      	mov	r0, r3
 800a1c0:	4770      	bx	lr
 800a1c2:	bf00      	nop
 800a1c4:	7ff00000 	.word	0x7ff00000

0800a1c8 <__b2d>:
 800a1c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a1cc:	6907      	ldr	r7, [r0, #16]
 800a1ce:	f100 0914 	add.w	r9, r0, #20
 800a1d2:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800a1d6:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800a1da:	f1a7 0804 	sub.w	r8, r7, #4
 800a1de:	4630      	mov	r0, r6
 800a1e0:	f7ff fd4e 	bl	8009c80 <__hi0bits>
 800a1e4:	f1c0 0320 	rsb	r3, r0, #32
 800a1e8:	280a      	cmp	r0, #10
 800a1ea:	600b      	str	r3, [r1, #0]
 800a1ec:	491f      	ldr	r1, [pc, #124]	; (800a26c <__b2d+0xa4>)
 800a1ee:	dc17      	bgt.n	800a220 <__b2d+0x58>
 800a1f0:	45c1      	cmp	r9, r8
 800a1f2:	bf28      	it	cs
 800a1f4:	2200      	movcs	r2, #0
 800a1f6:	f1c0 0c0b 	rsb	ip, r0, #11
 800a1fa:	fa26 f30c 	lsr.w	r3, r6, ip
 800a1fe:	bf38      	it	cc
 800a200:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800a204:	ea43 0501 	orr.w	r5, r3, r1
 800a208:	f100 0315 	add.w	r3, r0, #21
 800a20c:	fa06 f303 	lsl.w	r3, r6, r3
 800a210:	fa22 f20c 	lsr.w	r2, r2, ip
 800a214:	ea43 0402 	orr.w	r4, r3, r2
 800a218:	4620      	mov	r0, r4
 800a21a:	4629      	mov	r1, r5
 800a21c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a220:	45c1      	cmp	r9, r8
 800a222:	bf2e      	itee	cs
 800a224:	2200      	movcs	r2, #0
 800a226:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800a22a:	f1a7 0808 	subcc.w	r8, r7, #8
 800a22e:	f1b0 030b 	subs.w	r3, r0, #11
 800a232:	d016      	beq.n	800a262 <__b2d+0x9a>
 800a234:	f1c3 0720 	rsb	r7, r3, #32
 800a238:	fa22 f107 	lsr.w	r1, r2, r7
 800a23c:	45c8      	cmp	r8, r9
 800a23e:	fa06 f603 	lsl.w	r6, r6, r3
 800a242:	ea46 0601 	orr.w	r6, r6, r1
 800a246:	bf94      	ite	ls
 800a248:	2100      	movls	r1, #0
 800a24a:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800a24e:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800a252:	fa02 f003 	lsl.w	r0, r2, r3
 800a256:	40f9      	lsrs	r1, r7
 800a258:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a25c:	ea40 0401 	orr.w	r4, r0, r1
 800a260:	e7da      	b.n	800a218 <__b2d+0x50>
 800a262:	4614      	mov	r4, r2
 800a264:	ea46 0501 	orr.w	r5, r6, r1
 800a268:	e7d6      	b.n	800a218 <__b2d+0x50>
 800a26a:	bf00      	nop
 800a26c:	3ff00000 	.word	0x3ff00000

0800a270 <__d2b>:
 800a270:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800a274:	2101      	movs	r1, #1
 800a276:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800a27a:	4690      	mov	r8, r2
 800a27c:	461d      	mov	r5, r3
 800a27e:	f7ff fc0d 	bl	8009a9c <_Balloc>
 800a282:	4604      	mov	r4, r0
 800a284:	b930      	cbnz	r0, 800a294 <__d2b+0x24>
 800a286:	4602      	mov	r2, r0
 800a288:	f240 310a 	movw	r1, #778	; 0x30a
 800a28c:	4b24      	ldr	r3, [pc, #144]	; (800a320 <__d2b+0xb0>)
 800a28e:	4825      	ldr	r0, [pc, #148]	; (800a324 <__d2b+0xb4>)
 800a290:	f7fe f9c8 	bl	8008624 <__assert_func>
 800a294:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800a298:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800a29c:	bb2d      	cbnz	r5, 800a2ea <__d2b+0x7a>
 800a29e:	9301      	str	r3, [sp, #4]
 800a2a0:	f1b8 0300 	subs.w	r3, r8, #0
 800a2a4:	d026      	beq.n	800a2f4 <__d2b+0x84>
 800a2a6:	4668      	mov	r0, sp
 800a2a8:	9300      	str	r3, [sp, #0]
 800a2aa:	f7ff fd09 	bl	8009cc0 <__lo0bits>
 800a2ae:	9900      	ldr	r1, [sp, #0]
 800a2b0:	b1f0      	cbz	r0, 800a2f0 <__d2b+0x80>
 800a2b2:	9a01      	ldr	r2, [sp, #4]
 800a2b4:	f1c0 0320 	rsb	r3, r0, #32
 800a2b8:	fa02 f303 	lsl.w	r3, r2, r3
 800a2bc:	430b      	orrs	r3, r1
 800a2be:	40c2      	lsrs	r2, r0
 800a2c0:	6163      	str	r3, [r4, #20]
 800a2c2:	9201      	str	r2, [sp, #4]
 800a2c4:	9b01      	ldr	r3, [sp, #4]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	bf14      	ite	ne
 800a2ca:	2102      	movne	r1, #2
 800a2cc:	2101      	moveq	r1, #1
 800a2ce:	61a3      	str	r3, [r4, #24]
 800a2d0:	6121      	str	r1, [r4, #16]
 800a2d2:	b1c5      	cbz	r5, 800a306 <__d2b+0x96>
 800a2d4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a2d8:	4405      	add	r5, r0
 800a2da:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a2de:	603d      	str	r5, [r7, #0]
 800a2e0:	6030      	str	r0, [r6, #0]
 800a2e2:	4620      	mov	r0, r4
 800a2e4:	b002      	add	sp, #8
 800a2e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a2ee:	e7d6      	b.n	800a29e <__d2b+0x2e>
 800a2f0:	6161      	str	r1, [r4, #20]
 800a2f2:	e7e7      	b.n	800a2c4 <__d2b+0x54>
 800a2f4:	a801      	add	r0, sp, #4
 800a2f6:	f7ff fce3 	bl	8009cc0 <__lo0bits>
 800a2fa:	2101      	movs	r1, #1
 800a2fc:	9b01      	ldr	r3, [sp, #4]
 800a2fe:	6121      	str	r1, [r4, #16]
 800a300:	6163      	str	r3, [r4, #20]
 800a302:	3020      	adds	r0, #32
 800a304:	e7e5      	b.n	800a2d2 <__d2b+0x62>
 800a306:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800a30a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a30e:	6038      	str	r0, [r7, #0]
 800a310:	6918      	ldr	r0, [r3, #16]
 800a312:	f7ff fcb5 	bl	8009c80 <__hi0bits>
 800a316:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800a31a:	6031      	str	r1, [r6, #0]
 800a31c:	e7e1      	b.n	800a2e2 <__d2b+0x72>
 800a31e:	bf00      	nop
 800a320:	0800ba69 	.word	0x0800ba69
 800a324:	0800baf4 	.word	0x0800baf4

0800a328 <__ratio>:
 800a328:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a32c:	4688      	mov	r8, r1
 800a32e:	4669      	mov	r1, sp
 800a330:	4681      	mov	r9, r0
 800a332:	f7ff ff49 	bl	800a1c8 <__b2d>
 800a336:	460f      	mov	r7, r1
 800a338:	4604      	mov	r4, r0
 800a33a:	460d      	mov	r5, r1
 800a33c:	4640      	mov	r0, r8
 800a33e:	a901      	add	r1, sp, #4
 800a340:	f7ff ff42 	bl	800a1c8 <__b2d>
 800a344:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a348:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a34c:	468b      	mov	fp, r1
 800a34e:	eba3 0c02 	sub.w	ip, r3, r2
 800a352:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a356:	1a9b      	subs	r3, r3, r2
 800a358:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	bfd5      	itete	le
 800a360:	460a      	movle	r2, r1
 800a362:	462a      	movgt	r2, r5
 800a364:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a368:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a36c:	bfd8      	it	le
 800a36e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a372:	465b      	mov	r3, fp
 800a374:	4602      	mov	r2, r0
 800a376:	4639      	mov	r1, r7
 800a378:	4620      	mov	r0, r4
 800a37a:	f7f6 f9e1 	bl	8000740 <__aeabi_ddiv>
 800a37e:	b003      	add	sp, #12
 800a380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a384 <__copybits>:
 800a384:	3901      	subs	r1, #1
 800a386:	b570      	push	{r4, r5, r6, lr}
 800a388:	1149      	asrs	r1, r1, #5
 800a38a:	6914      	ldr	r4, [r2, #16]
 800a38c:	3101      	adds	r1, #1
 800a38e:	f102 0314 	add.w	r3, r2, #20
 800a392:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a396:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a39a:	1f05      	subs	r5, r0, #4
 800a39c:	42a3      	cmp	r3, r4
 800a39e:	d30c      	bcc.n	800a3ba <__copybits+0x36>
 800a3a0:	1aa3      	subs	r3, r4, r2
 800a3a2:	3b11      	subs	r3, #17
 800a3a4:	f023 0303 	bic.w	r3, r3, #3
 800a3a8:	3211      	adds	r2, #17
 800a3aa:	42a2      	cmp	r2, r4
 800a3ac:	bf88      	it	hi
 800a3ae:	2300      	movhi	r3, #0
 800a3b0:	4418      	add	r0, r3
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	4288      	cmp	r0, r1
 800a3b6:	d305      	bcc.n	800a3c4 <__copybits+0x40>
 800a3b8:	bd70      	pop	{r4, r5, r6, pc}
 800a3ba:	f853 6b04 	ldr.w	r6, [r3], #4
 800a3be:	f845 6f04 	str.w	r6, [r5, #4]!
 800a3c2:	e7eb      	b.n	800a39c <__copybits+0x18>
 800a3c4:	f840 3b04 	str.w	r3, [r0], #4
 800a3c8:	e7f4      	b.n	800a3b4 <__copybits+0x30>

0800a3ca <__any_on>:
 800a3ca:	f100 0214 	add.w	r2, r0, #20
 800a3ce:	6900      	ldr	r0, [r0, #16]
 800a3d0:	114b      	asrs	r3, r1, #5
 800a3d2:	4298      	cmp	r0, r3
 800a3d4:	b510      	push	{r4, lr}
 800a3d6:	db11      	blt.n	800a3fc <__any_on+0x32>
 800a3d8:	dd0a      	ble.n	800a3f0 <__any_on+0x26>
 800a3da:	f011 011f 	ands.w	r1, r1, #31
 800a3de:	d007      	beq.n	800a3f0 <__any_on+0x26>
 800a3e0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a3e4:	fa24 f001 	lsr.w	r0, r4, r1
 800a3e8:	fa00 f101 	lsl.w	r1, r0, r1
 800a3ec:	428c      	cmp	r4, r1
 800a3ee:	d10b      	bne.n	800a408 <__any_on+0x3e>
 800a3f0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a3f4:	4293      	cmp	r3, r2
 800a3f6:	d803      	bhi.n	800a400 <__any_on+0x36>
 800a3f8:	2000      	movs	r0, #0
 800a3fa:	bd10      	pop	{r4, pc}
 800a3fc:	4603      	mov	r3, r0
 800a3fe:	e7f7      	b.n	800a3f0 <__any_on+0x26>
 800a400:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a404:	2900      	cmp	r1, #0
 800a406:	d0f5      	beq.n	800a3f4 <__any_on+0x2a>
 800a408:	2001      	movs	r0, #1
 800a40a:	e7f6      	b.n	800a3fa <__any_on+0x30>

0800a40c <_calloc_r>:
 800a40c:	b570      	push	{r4, r5, r6, lr}
 800a40e:	fba1 5402 	umull	r5, r4, r1, r2
 800a412:	b934      	cbnz	r4, 800a422 <_calloc_r+0x16>
 800a414:	4629      	mov	r1, r5
 800a416:	f000 f875 	bl	800a504 <_malloc_r>
 800a41a:	4606      	mov	r6, r0
 800a41c:	b928      	cbnz	r0, 800a42a <_calloc_r+0x1e>
 800a41e:	4630      	mov	r0, r6
 800a420:	bd70      	pop	{r4, r5, r6, pc}
 800a422:	220c      	movs	r2, #12
 800a424:	2600      	movs	r6, #0
 800a426:	6002      	str	r2, [r0, #0]
 800a428:	e7f9      	b.n	800a41e <_calloc_r+0x12>
 800a42a:	462a      	mov	r2, r5
 800a42c:	4621      	mov	r1, r4
 800a42e:	f7fc fd63 	bl	8006ef8 <memset>
 800a432:	e7f4      	b.n	800a41e <_calloc_r+0x12>

0800a434 <_free_r>:
 800a434:	b538      	push	{r3, r4, r5, lr}
 800a436:	4605      	mov	r5, r0
 800a438:	2900      	cmp	r1, #0
 800a43a:	d040      	beq.n	800a4be <_free_r+0x8a>
 800a43c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a440:	1f0c      	subs	r4, r1, #4
 800a442:	2b00      	cmp	r3, #0
 800a444:	bfb8      	it	lt
 800a446:	18e4      	addlt	r4, r4, r3
 800a448:	f000 feba 	bl	800b1c0 <__malloc_lock>
 800a44c:	4a1c      	ldr	r2, [pc, #112]	; (800a4c0 <_free_r+0x8c>)
 800a44e:	6813      	ldr	r3, [r2, #0]
 800a450:	b933      	cbnz	r3, 800a460 <_free_r+0x2c>
 800a452:	6063      	str	r3, [r4, #4]
 800a454:	6014      	str	r4, [r2, #0]
 800a456:	4628      	mov	r0, r5
 800a458:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a45c:	f000 beb6 	b.w	800b1cc <__malloc_unlock>
 800a460:	42a3      	cmp	r3, r4
 800a462:	d908      	bls.n	800a476 <_free_r+0x42>
 800a464:	6820      	ldr	r0, [r4, #0]
 800a466:	1821      	adds	r1, r4, r0
 800a468:	428b      	cmp	r3, r1
 800a46a:	bf01      	itttt	eq
 800a46c:	6819      	ldreq	r1, [r3, #0]
 800a46e:	685b      	ldreq	r3, [r3, #4]
 800a470:	1809      	addeq	r1, r1, r0
 800a472:	6021      	streq	r1, [r4, #0]
 800a474:	e7ed      	b.n	800a452 <_free_r+0x1e>
 800a476:	461a      	mov	r2, r3
 800a478:	685b      	ldr	r3, [r3, #4]
 800a47a:	b10b      	cbz	r3, 800a480 <_free_r+0x4c>
 800a47c:	42a3      	cmp	r3, r4
 800a47e:	d9fa      	bls.n	800a476 <_free_r+0x42>
 800a480:	6811      	ldr	r1, [r2, #0]
 800a482:	1850      	adds	r0, r2, r1
 800a484:	42a0      	cmp	r0, r4
 800a486:	d10b      	bne.n	800a4a0 <_free_r+0x6c>
 800a488:	6820      	ldr	r0, [r4, #0]
 800a48a:	4401      	add	r1, r0
 800a48c:	1850      	adds	r0, r2, r1
 800a48e:	4283      	cmp	r3, r0
 800a490:	6011      	str	r1, [r2, #0]
 800a492:	d1e0      	bne.n	800a456 <_free_r+0x22>
 800a494:	6818      	ldr	r0, [r3, #0]
 800a496:	685b      	ldr	r3, [r3, #4]
 800a498:	4401      	add	r1, r0
 800a49a:	6011      	str	r1, [r2, #0]
 800a49c:	6053      	str	r3, [r2, #4]
 800a49e:	e7da      	b.n	800a456 <_free_r+0x22>
 800a4a0:	d902      	bls.n	800a4a8 <_free_r+0x74>
 800a4a2:	230c      	movs	r3, #12
 800a4a4:	602b      	str	r3, [r5, #0]
 800a4a6:	e7d6      	b.n	800a456 <_free_r+0x22>
 800a4a8:	6820      	ldr	r0, [r4, #0]
 800a4aa:	1821      	adds	r1, r4, r0
 800a4ac:	428b      	cmp	r3, r1
 800a4ae:	bf01      	itttt	eq
 800a4b0:	6819      	ldreq	r1, [r3, #0]
 800a4b2:	685b      	ldreq	r3, [r3, #4]
 800a4b4:	1809      	addeq	r1, r1, r0
 800a4b6:	6021      	streq	r1, [r4, #0]
 800a4b8:	6063      	str	r3, [r4, #4]
 800a4ba:	6054      	str	r4, [r2, #4]
 800a4bc:	e7cb      	b.n	800a456 <_free_r+0x22>
 800a4be:	bd38      	pop	{r3, r4, r5, pc}
 800a4c0:	2000267c 	.word	0x2000267c

0800a4c4 <sbrk_aligned>:
 800a4c4:	b570      	push	{r4, r5, r6, lr}
 800a4c6:	4e0e      	ldr	r6, [pc, #56]	; (800a500 <sbrk_aligned+0x3c>)
 800a4c8:	460c      	mov	r4, r1
 800a4ca:	6831      	ldr	r1, [r6, #0]
 800a4cc:	4605      	mov	r5, r0
 800a4ce:	b911      	cbnz	r1, 800a4d6 <sbrk_aligned+0x12>
 800a4d0:	f000 fb46 	bl	800ab60 <_sbrk_r>
 800a4d4:	6030      	str	r0, [r6, #0]
 800a4d6:	4621      	mov	r1, r4
 800a4d8:	4628      	mov	r0, r5
 800a4da:	f000 fb41 	bl	800ab60 <_sbrk_r>
 800a4de:	1c43      	adds	r3, r0, #1
 800a4e0:	d00a      	beq.n	800a4f8 <sbrk_aligned+0x34>
 800a4e2:	1cc4      	adds	r4, r0, #3
 800a4e4:	f024 0403 	bic.w	r4, r4, #3
 800a4e8:	42a0      	cmp	r0, r4
 800a4ea:	d007      	beq.n	800a4fc <sbrk_aligned+0x38>
 800a4ec:	1a21      	subs	r1, r4, r0
 800a4ee:	4628      	mov	r0, r5
 800a4f0:	f000 fb36 	bl	800ab60 <_sbrk_r>
 800a4f4:	3001      	adds	r0, #1
 800a4f6:	d101      	bne.n	800a4fc <sbrk_aligned+0x38>
 800a4f8:	f04f 34ff 	mov.w	r4, #4294967295
 800a4fc:	4620      	mov	r0, r4
 800a4fe:	bd70      	pop	{r4, r5, r6, pc}
 800a500:	20002680 	.word	0x20002680

0800a504 <_malloc_r>:
 800a504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a508:	1ccd      	adds	r5, r1, #3
 800a50a:	f025 0503 	bic.w	r5, r5, #3
 800a50e:	3508      	adds	r5, #8
 800a510:	2d0c      	cmp	r5, #12
 800a512:	bf38      	it	cc
 800a514:	250c      	movcc	r5, #12
 800a516:	2d00      	cmp	r5, #0
 800a518:	4607      	mov	r7, r0
 800a51a:	db01      	blt.n	800a520 <_malloc_r+0x1c>
 800a51c:	42a9      	cmp	r1, r5
 800a51e:	d905      	bls.n	800a52c <_malloc_r+0x28>
 800a520:	230c      	movs	r3, #12
 800a522:	2600      	movs	r6, #0
 800a524:	603b      	str	r3, [r7, #0]
 800a526:	4630      	mov	r0, r6
 800a528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a52c:	4e2e      	ldr	r6, [pc, #184]	; (800a5e8 <_malloc_r+0xe4>)
 800a52e:	f000 fe47 	bl	800b1c0 <__malloc_lock>
 800a532:	6833      	ldr	r3, [r6, #0]
 800a534:	461c      	mov	r4, r3
 800a536:	bb34      	cbnz	r4, 800a586 <_malloc_r+0x82>
 800a538:	4629      	mov	r1, r5
 800a53a:	4638      	mov	r0, r7
 800a53c:	f7ff ffc2 	bl	800a4c4 <sbrk_aligned>
 800a540:	1c43      	adds	r3, r0, #1
 800a542:	4604      	mov	r4, r0
 800a544:	d14d      	bne.n	800a5e2 <_malloc_r+0xde>
 800a546:	6834      	ldr	r4, [r6, #0]
 800a548:	4626      	mov	r6, r4
 800a54a:	2e00      	cmp	r6, #0
 800a54c:	d140      	bne.n	800a5d0 <_malloc_r+0xcc>
 800a54e:	6823      	ldr	r3, [r4, #0]
 800a550:	4631      	mov	r1, r6
 800a552:	4638      	mov	r0, r7
 800a554:	eb04 0803 	add.w	r8, r4, r3
 800a558:	f000 fb02 	bl	800ab60 <_sbrk_r>
 800a55c:	4580      	cmp	r8, r0
 800a55e:	d13a      	bne.n	800a5d6 <_malloc_r+0xd2>
 800a560:	6821      	ldr	r1, [r4, #0]
 800a562:	3503      	adds	r5, #3
 800a564:	1a6d      	subs	r5, r5, r1
 800a566:	f025 0503 	bic.w	r5, r5, #3
 800a56a:	3508      	adds	r5, #8
 800a56c:	2d0c      	cmp	r5, #12
 800a56e:	bf38      	it	cc
 800a570:	250c      	movcc	r5, #12
 800a572:	4638      	mov	r0, r7
 800a574:	4629      	mov	r1, r5
 800a576:	f7ff ffa5 	bl	800a4c4 <sbrk_aligned>
 800a57a:	3001      	adds	r0, #1
 800a57c:	d02b      	beq.n	800a5d6 <_malloc_r+0xd2>
 800a57e:	6823      	ldr	r3, [r4, #0]
 800a580:	442b      	add	r3, r5
 800a582:	6023      	str	r3, [r4, #0]
 800a584:	e00e      	b.n	800a5a4 <_malloc_r+0xa0>
 800a586:	6822      	ldr	r2, [r4, #0]
 800a588:	1b52      	subs	r2, r2, r5
 800a58a:	d41e      	bmi.n	800a5ca <_malloc_r+0xc6>
 800a58c:	2a0b      	cmp	r2, #11
 800a58e:	d916      	bls.n	800a5be <_malloc_r+0xba>
 800a590:	1961      	adds	r1, r4, r5
 800a592:	42a3      	cmp	r3, r4
 800a594:	6025      	str	r5, [r4, #0]
 800a596:	bf18      	it	ne
 800a598:	6059      	strne	r1, [r3, #4]
 800a59a:	6863      	ldr	r3, [r4, #4]
 800a59c:	bf08      	it	eq
 800a59e:	6031      	streq	r1, [r6, #0]
 800a5a0:	5162      	str	r2, [r4, r5]
 800a5a2:	604b      	str	r3, [r1, #4]
 800a5a4:	4638      	mov	r0, r7
 800a5a6:	f104 060b 	add.w	r6, r4, #11
 800a5aa:	f000 fe0f 	bl	800b1cc <__malloc_unlock>
 800a5ae:	f026 0607 	bic.w	r6, r6, #7
 800a5b2:	1d23      	adds	r3, r4, #4
 800a5b4:	1af2      	subs	r2, r6, r3
 800a5b6:	d0b6      	beq.n	800a526 <_malloc_r+0x22>
 800a5b8:	1b9b      	subs	r3, r3, r6
 800a5ba:	50a3      	str	r3, [r4, r2]
 800a5bc:	e7b3      	b.n	800a526 <_malloc_r+0x22>
 800a5be:	6862      	ldr	r2, [r4, #4]
 800a5c0:	42a3      	cmp	r3, r4
 800a5c2:	bf0c      	ite	eq
 800a5c4:	6032      	streq	r2, [r6, #0]
 800a5c6:	605a      	strne	r2, [r3, #4]
 800a5c8:	e7ec      	b.n	800a5a4 <_malloc_r+0xa0>
 800a5ca:	4623      	mov	r3, r4
 800a5cc:	6864      	ldr	r4, [r4, #4]
 800a5ce:	e7b2      	b.n	800a536 <_malloc_r+0x32>
 800a5d0:	4634      	mov	r4, r6
 800a5d2:	6876      	ldr	r6, [r6, #4]
 800a5d4:	e7b9      	b.n	800a54a <_malloc_r+0x46>
 800a5d6:	230c      	movs	r3, #12
 800a5d8:	4638      	mov	r0, r7
 800a5da:	603b      	str	r3, [r7, #0]
 800a5dc:	f000 fdf6 	bl	800b1cc <__malloc_unlock>
 800a5e0:	e7a1      	b.n	800a526 <_malloc_r+0x22>
 800a5e2:	6025      	str	r5, [r4, #0]
 800a5e4:	e7de      	b.n	800a5a4 <_malloc_r+0xa0>
 800a5e6:	bf00      	nop
 800a5e8:	2000267c 	.word	0x2000267c

0800a5ec <__ssputs_r>:
 800a5ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5f0:	688e      	ldr	r6, [r1, #8]
 800a5f2:	4682      	mov	sl, r0
 800a5f4:	429e      	cmp	r6, r3
 800a5f6:	460c      	mov	r4, r1
 800a5f8:	4690      	mov	r8, r2
 800a5fa:	461f      	mov	r7, r3
 800a5fc:	d838      	bhi.n	800a670 <__ssputs_r+0x84>
 800a5fe:	898a      	ldrh	r2, [r1, #12]
 800a600:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a604:	d032      	beq.n	800a66c <__ssputs_r+0x80>
 800a606:	6825      	ldr	r5, [r4, #0]
 800a608:	6909      	ldr	r1, [r1, #16]
 800a60a:	3301      	adds	r3, #1
 800a60c:	eba5 0901 	sub.w	r9, r5, r1
 800a610:	6965      	ldr	r5, [r4, #20]
 800a612:	444b      	add	r3, r9
 800a614:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a618:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a61c:	106d      	asrs	r5, r5, #1
 800a61e:	429d      	cmp	r5, r3
 800a620:	bf38      	it	cc
 800a622:	461d      	movcc	r5, r3
 800a624:	0553      	lsls	r3, r2, #21
 800a626:	d531      	bpl.n	800a68c <__ssputs_r+0xa0>
 800a628:	4629      	mov	r1, r5
 800a62a:	f7ff ff6b 	bl	800a504 <_malloc_r>
 800a62e:	4606      	mov	r6, r0
 800a630:	b950      	cbnz	r0, 800a648 <__ssputs_r+0x5c>
 800a632:	230c      	movs	r3, #12
 800a634:	f04f 30ff 	mov.w	r0, #4294967295
 800a638:	f8ca 3000 	str.w	r3, [sl]
 800a63c:	89a3      	ldrh	r3, [r4, #12]
 800a63e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a642:	81a3      	strh	r3, [r4, #12]
 800a644:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a648:	464a      	mov	r2, r9
 800a64a:	6921      	ldr	r1, [r4, #16]
 800a64c:	f7fc fc46 	bl	8006edc <memcpy>
 800a650:	89a3      	ldrh	r3, [r4, #12]
 800a652:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a656:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a65a:	81a3      	strh	r3, [r4, #12]
 800a65c:	6126      	str	r6, [r4, #16]
 800a65e:	444e      	add	r6, r9
 800a660:	6026      	str	r6, [r4, #0]
 800a662:	463e      	mov	r6, r7
 800a664:	6165      	str	r5, [r4, #20]
 800a666:	eba5 0509 	sub.w	r5, r5, r9
 800a66a:	60a5      	str	r5, [r4, #8]
 800a66c:	42be      	cmp	r6, r7
 800a66e:	d900      	bls.n	800a672 <__ssputs_r+0x86>
 800a670:	463e      	mov	r6, r7
 800a672:	4632      	mov	r2, r6
 800a674:	4641      	mov	r1, r8
 800a676:	6820      	ldr	r0, [r4, #0]
 800a678:	f000 fd88 	bl	800b18c <memmove>
 800a67c:	68a3      	ldr	r3, [r4, #8]
 800a67e:	2000      	movs	r0, #0
 800a680:	1b9b      	subs	r3, r3, r6
 800a682:	60a3      	str	r3, [r4, #8]
 800a684:	6823      	ldr	r3, [r4, #0]
 800a686:	4433      	add	r3, r6
 800a688:	6023      	str	r3, [r4, #0]
 800a68a:	e7db      	b.n	800a644 <__ssputs_r+0x58>
 800a68c:	462a      	mov	r2, r5
 800a68e:	f000 fda3 	bl	800b1d8 <_realloc_r>
 800a692:	4606      	mov	r6, r0
 800a694:	2800      	cmp	r0, #0
 800a696:	d1e1      	bne.n	800a65c <__ssputs_r+0x70>
 800a698:	4650      	mov	r0, sl
 800a69a:	6921      	ldr	r1, [r4, #16]
 800a69c:	f7ff feca 	bl	800a434 <_free_r>
 800a6a0:	e7c7      	b.n	800a632 <__ssputs_r+0x46>
	...

0800a6a4 <_svfiprintf_r>:
 800a6a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6a8:	4698      	mov	r8, r3
 800a6aa:	898b      	ldrh	r3, [r1, #12]
 800a6ac:	4607      	mov	r7, r0
 800a6ae:	061b      	lsls	r3, r3, #24
 800a6b0:	460d      	mov	r5, r1
 800a6b2:	4614      	mov	r4, r2
 800a6b4:	b09d      	sub	sp, #116	; 0x74
 800a6b6:	d50e      	bpl.n	800a6d6 <_svfiprintf_r+0x32>
 800a6b8:	690b      	ldr	r3, [r1, #16]
 800a6ba:	b963      	cbnz	r3, 800a6d6 <_svfiprintf_r+0x32>
 800a6bc:	2140      	movs	r1, #64	; 0x40
 800a6be:	f7ff ff21 	bl	800a504 <_malloc_r>
 800a6c2:	6028      	str	r0, [r5, #0]
 800a6c4:	6128      	str	r0, [r5, #16]
 800a6c6:	b920      	cbnz	r0, 800a6d2 <_svfiprintf_r+0x2e>
 800a6c8:	230c      	movs	r3, #12
 800a6ca:	603b      	str	r3, [r7, #0]
 800a6cc:	f04f 30ff 	mov.w	r0, #4294967295
 800a6d0:	e0d1      	b.n	800a876 <_svfiprintf_r+0x1d2>
 800a6d2:	2340      	movs	r3, #64	; 0x40
 800a6d4:	616b      	str	r3, [r5, #20]
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	9309      	str	r3, [sp, #36]	; 0x24
 800a6da:	2320      	movs	r3, #32
 800a6dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a6e0:	2330      	movs	r3, #48	; 0x30
 800a6e2:	f04f 0901 	mov.w	r9, #1
 800a6e6:	f8cd 800c 	str.w	r8, [sp, #12]
 800a6ea:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a890 <_svfiprintf_r+0x1ec>
 800a6ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a6f2:	4623      	mov	r3, r4
 800a6f4:	469a      	mov	sl, r3
 800a6f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a6fa:	b10a      	cbz	r2, 800a700 <_svfiprintf_r+0x5c>
 800a6fc:	2a25      	cmp	r2, #37	; 0x25
 800a6fe:	d1f9      	bne.n	800a6f4 <_svfiprintf_r+0x50>
 800a700:	ebba 0b04 	subs.w	fp, sl, r4
 800a704:	d00b      	beq.n	800a71e <_svfiprintf_r+0x7a>
 800a706:	465b      	mov	r3, fp
 800a708:	4622      	mov	r2, r4
 800a70a:	4629      	mov	r1, r5
 800a70c:	4638      	mov	r0, r7
 800a70e:	f7ff ff6d 	bl	800a5ec <__ssputs_r>
 800a712:	3001      	adds	r0, #1
 800a714:	f000 80aa 	beq.w	800a86c <_svfiprintf_r+0x1c8>
 800a718:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a71a:	445a      	add	r2, fp
 800a71c:	9209      	str	r2, [sp, #36]	; 0x24
 800a71e:	f89a 3000 	ldrb.w	r3, [sl]
 800a722:	2b00      	cmp	r3, #0
 800a724:	f000 80a2 	beq.w	800a86c <_svfiprintf_r+0x1c8>
 800a728:	2300      	movs	r3, #0
 800a72a:	f04f 32ff 	mov.w	r2, #4294967295
 800a72e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a732:	f10a 0a01 	add.w	sl, sl, #1
 800a736:	9304      	str	r3, [sp, #16]
 800a738:	9307      	str	r3, [sp, #28]
 800a73a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a73e:	931a      	str	r3, [sp, #104]	; 0x68
 800a740:	4654      	mov	r4, sl
 800a742:	2205      	movs	r2, #5
 800a744:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a748:	4851      	ldr	r0, [pc, #324]	; (800a890 <_svfiprintf_r+0x1ec>)
 800a74a:	f7ff f999 	bl	8009a80 <memchr>
 800a74e:	9a04      	ldr	r2, [sp, #16]
 800a750:	b9d8      	cbnz	r0, 800a78a <_svfiprintf_r+0xe6>
 800a752:	06d0      	lsls	r0, r2, #27
 800a754:	bf44      	itt	mi
 800a756:	2320      	movmi	r3, #32
 800a758:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a75c:	0711      	lsls	r1, r2, #28
 800a75e:	bf44      	itt	mi
 800a760:	232b      	movmi	r3, #43	; 0x2b
 800a762:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a766:	f89a 3000 	ldrb.w	r3, [sl]
 800a76a:	2b2a      	cmp	r3, #42	; 0x2a
 800a76c:	d015      	beq.n	800a79a <_svfiprintf_r+0xf6>
 800a76e:	4654      	mov	r4, sl
 800a770:	2000      	movs	r0, #0
 800a772:	f04f 0c0a 	mov.w	ip, #10
 800a776:	9a07      	ldr	r2, [sp, #28]
 800a778:	4621      	mov	r1, r4
 800a77a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a77e:	3b30      	subs	r3, #48	; 0x30
 800a780:	2b09      	cmp	r3, #9
 800a782:	d94e      	bls.n	800a822 <_svfiprintf_r+0x17e>
 800a784:	b1b0      	cbz	r0, 800a7b4 <_svfiprintf_r+0x110>
 800a786:	9207      	str	r2, [sp, #28]
 800a788:	e014      	b.n	800a7b4 <_svfiprintf_r+0x110>
 800a78a:	eba0 0308 	sub.w	r3, r0, r8
 800a78e:	fa09 f303 	lsl.w	r3, r9, r3
 800a792:	4313      	orrs	r3, r2
 800a794:	46a2      	mov	sl, r4
 800a796:	9304      	str	r3, [sp, #16]
 800a798:	e7d2      	b.n	800a740 <_svfiprintf_r+0x9c>
 800a79a:	9b03      	ldr	r3, [sp, #12]
 800a79c:	1d19      	adds	r1, r3, #4
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	9103      	str	r1, [sp, #12]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	bfbb      	ittet	lt
 800a7a6:	425b      	neglt	r3, r3
 800a7a8:	f042 0202 	orrlt.w	r2, r2, #2
 800a7ac:	9307      	strge	r3, [sp, #28]
 800a7ae:	9307      	strlt	r3, [sp, #28]
 800a7b0:	bfb8      	it	lt
 800a7b2:	9204      	strlt	r2, [sp, #16]
 800a7b4:	7823      	ldrb	r3, [r4, #0]
 800a7b6:	2b2e      	cmp	r3, #46	; 0x2e
 800a7b8:	d10c      	bne.n	800a7d4 <_svfiprintf_r+0x130>
 800a7ba:	7863      	ldrb	r3, [r4, #1]
 800a7bc:	2b2a      	cmp	r3, #42	; 0x2a
 800a7be:	d135      	bne.n	800a82c <_svfiprintf_r+0x188>
 800a7c0:	9b03      	ldr	r3, [sp, #12]
 800a7c2:	3402      	adds	r4, #2
 800a7c4:	1d1a      	adds	r2, r3, #4
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	9203      	str	r2, [sp, #12]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	bfb8      	it	lt
 800a7ce:	f04f 33ff 	movlt.w	r3, #4294967295
 800a7d2:	9305      	str	r3, [sp, #20]
 800a7d4:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800a894 <_svfiprintf_r+0x1f0>
 800a7d8:	2203      	movs	r2, #3
 800a7da:	4650      	mov	r0, sl
 800a7dc:	7821      	ldrb	r1, [r4, #0]
 800a7de:	f7ff f94f 	bl	8009a80 <memchr>
 800a7e2:	b140      	cbz	r0, 800a7f6 <_svfiprintf_r+0x152>
 800a7e4:	2340      	movs	r3, #64	; 0x40
 800a7e6:	eba0 000a 	sub.w	r0, r0, sl
 800a7ea:	fa03 f000 	lsl.w	r0, r3, r0
 800a7ee:	9b04      	ldr	r3, [sp, #16]
 800a7f0:	3401      	adds	r4, #1
 800a7f2:	4303      	orrs	r3, r0
 800a7f4:	9304      	str	r3, [sp, #16]
 800a7f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7fa:	2206      	movs	r2, #6
 800a7fc:	4826      	ldr	r0, [pc, #152]	; (800a898 <_svfiprintf_r+0x1f4>)
 800a7fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a802:	f7ff f93d 	bl	8009a80 <memchr>
 800a806:	2800      	cmp	r0, #0
 800a808:	d038      	beq.n	800a87c <_svfiprintf_r+0x1d8>
 800a80a:	4b24      	ldr	r3, [pc, #144]	; (800a89c <_svfiprintf_r+0x1f8>)
 800a80c:	bb1b      	cbnz	r3, 800a856 <_svfiprintf_r+0x1b2>
 800a80e:	9b03      	ldr	r3, [sp, #12]
 800a810:	3307      	adds	r3, #7
 800a812:	f023 0307 	bic.w	r3, r3, #7
 800a816:	3308      	adds	r3, #8
 800a818:	9303      	str	r3, [sp, #12]
 800a81a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a81c:	4433      	add	r3, r6
 800a81e:	9309      	str	r3, [sp, #36]	; 0x24
 800a820:	e767      	b.n	800a6f2 <_svfiprintf_r+0x4e>
 800a822:	460c      	mov	r4, r1
 800a824:	2001      	movs	r0, #1
 800a826:	fb0c 3202 	mla	r2, ip, r2, r3
 800a82a:	e7a5      	b.n	800a778 <_svfiprintf_r+0xd4>
 800a82c:	2300      	movs	r3, #0
 800a82e:	f04f 0c0a 	mov.w	ip, #10
 800a832:	4619      	mov	r1, r3
 800a834:	3401      	adds	r4, #1
 800a836:	9305      	str	r3, [sp, #20]
 800a838:	4620      	mov	r0, r4
 800a83a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a83e:	3a30      	subs	r2, #48	; 0x30
 800a840:	2a09      	cmp	r2, #9
 800a842:	d903      	bls.n	800a84c <_svfiprintf_r+0x1a8>
 800a844:	2b00      	cmp	r3, #0
 800a846:	d0c5      	beq.n	800a7d4 <_svfiprintf_r+0x130>
 800a848:	9105      	str	r1, [sp, #20]
 800a84a:	e7c3      	b.n	800a7d4 <_svfiprintf_r+0x130>
 800a84c:	4604      	mov	r4, r0
 800a84e:	2301      	movs	r3, #1
 800a850:	fb0c 2101 	mla	r1, ip, r1, r2
 800a854:	e7f0      	b.n	800a838 <_svfiprintf_r+0x194>
 800a856:	ab03      	add	r3, sp, #12
 800a858:	9300      	str	r3, [sp, #0]
 800a85a:	462a      	mov	r2, r5
 800a85c:	4638      	mov	r0, r7
 800a85e:	4b10      	ldr	r3, [pc, #64]	; (800a8a0 <_svfiprintf_r+0x1fc>)
 800a860:	a904      	add	r1, sp, #16
 800a862:	f7fc fbef 	bl	8007044 <_printf_float>
 800a866:	1c42      	adds	r2, r0, #1
 800a868:	4606      	mov	r6, r0
 800a86a:	d1d6      	bne.n	800a81a <_svfiprintf_r+0x176>
 800a86c:	89ab      	ldrh	r3, [r5, #12]
 800a86e:	065b      	lsls	r3, r3, #25
 800a870:	f53f af2c 	bmi.w	800a6cc <_svfiprintf_r+0x28>
 800a874:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a876:	b01d      	add	sp, #116	; 0x74
 800a878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a87c:	ab03      	add	r3, sp, #12
 800a87e:	9300      	str	r3, [sp, #0]
 800a880:	462a      	mov	r2, r5
 800a882:	4638      	mov	r0, r7
 800a884:	4b06      	ldr	r3, [pc, #24]	; (800a8a0 <_svfiprintf_r+0x1fc>)
 800a886:	a904      	add	r1, sp, #16
 800a888:	f7fc fe78 	bl	800757c <_printf_i>
 800a88c:	e7eb      	b.n	800a866 <_svfiprintf_r+0x1c2>
 800a88e:	bf00      	nop
 800a890:	0800bc4c 	.word	0x0800bc4c
 800a894:	0800bc52 	.word	0x0800bc52
 800a898:	0800bc56 	.word	0x0800bc56
 800a89c:	08007045 	.word	0x08007045
 800a8a0:	0800a5ed 	.word	0x0800a5ed

0800a8a4 <__sfputc_r>:
 800a8a4:	6893      	ldr	r3, [r2, #8]
 800a8a6:	b410      	push	{r4}
 800a8a8:	3b01      	subs	r3, #1
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	6093      	str	r3, [r2, #8]
 800a8ae:	da07      	bge.n	800a8c0 <__sfputc_r+0x1c>
 800a8b0:	6994      	ldr	r4, [r2, #24]
 800a8b2:	42a3      	cmp	r3, r4
 800a8b4:	db01      	blt.n	800a8ba <__sfputc_r+0x16>
 800a8b6:	290a      	cmp	r1, #10
 800a8b8:	d102      	bne.n	800a8c0 <__sfputc_r+0x1c>
 800a8ba:	bc10      	pop	{r4}
 800a8bc:	f000 b974 	b.w	800aba8 <__swbuf_r>
 800a8c0:	6813      	ldr	r3, [r2, #0]
 800a8c2:	1c58      	adds	r0, r3, #1
 800a8c4:	6010      	str	r0, [r2, #0]
 800a8c6:	7019      	strb	r1, [r3, #0]
 800a8c8:	4608      	mov	r0, r1
 800a8ca:	bc10      	pop	{r4}
 800a8cc:	4770      	bx	lr

0800a8ce <__sfputs_r>:
 800a8ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8d0:	4606      	mov	r6, r0
 800a8d2:	460f      	mov	r7, r1
 800a8d4:	4614      	mov	r4, r2
 800a8d6:	18d5      	adds	r5, r2, r3
 800a8d8:	42ac      	cmp	r4, r5
 800a8da:	d101      	bne.n	800a8e0 <__sfputs_r+0x12>
 800a8dc:	2000      	movs	r0, #0
 800a8de:	e007      	b.n	800a8f0 <__sfputs_r+0x22>
 800a8e0:	463a      	mov	r2, r7
 800a8e2:	4630      	mov	r0, r6
 800a8e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8e8:	f7ff ffdc 	bl	800a8a4 <__sfputc_r>
 800a8ec:	1c43      	adds	r3, r0, #1
 800a8ee:	d1f3      	bne.n	800a8d8 <__sfputs_r+0xa>
 800a8f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a8f4 <_vfiprintf_r>:
 800a8f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8f8:	460d      	mov	r5, r1
 800a8fa:	4614      	mov	r4, r2
 800a8fc:	4698      	mov	r8, r3
 800a8fe:	4606      	mov	r6, r0
 800a900:	b09d      	sub	sp, #116	; 0x74
 800a902:	b118      	cbz	r0, 800a90c <_vfiprintf_r+0x18>
 800a904:	6983      	ldr	r3, [r0, #24]
 800a906:	b90b      	cbnz	r3, 800a90c <_vfiprintf_r+0x18>
 800a908:	f000 fb3a 	bl	800af80 <__sinit>
 800a90c:	4b89      	ldr	r3, [pc, #548]	; (800ab34 <_vfiprintf_r+0x240>)
 800a90e:	429d      	cmp	r5, r3
 800a910:	d11b      	bne.n	800a94a <_vfiprintf_r+0x56>
 800a912:	6875      	ldr	r5, [r6, #4]
 800a914:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a916:	07d9      	lsls	r1, r3, #31
 800a918:	d405      	bmi.n	800a926 <_vfiprintf_r+0x32>
 800a91a:	89ab      	ldrh	r3, [r5, #12]
 800a91c:	059a      	lsls	r2, r3, #22
 800a91e:	d402      	bmi.n	800a926 <_vfiprintf_r+0x32>
 800a920:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a922:	f000 fbcb 	bl	800b0bc <__retarget_lock_acquire_recursive>
 800a926:	89ab      	ldrh	r3, [r5, #12]
 800a928:	071b      	lsls	r3, r3, #28
 800a92a:	d501      	bpl.n	800a930 <_vfiprintf_r+0x3c>
 800a92c:	692b      	ldr	r3, [r5, #16]
 800a92e:	b9eb      	cbnz	r3, 800a96c <_vfiprintf_r+0x78>
 800a930:	4629      	mov	r1, r5
 800a932:	4630      	mov	r0, r6
 800a934:	f000 f998 	bl	800ac68 <__swsetup_r>
 800a938:	b1c0      	cbz	r0, 800a96c <_vfiprintf_r+0x78>
 800a93a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a93c:	07dc      	lsls	r4, r3, #31
 800a93e:	d50e      	bpl.n	800a95e <_vfiprintf_r+0x6a>
 800a940:	f04f 30ff 	mov.w	r0, #4294967295
 800a944:	b01d      	add	sp, #116	; 0x74
 800a946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a94a:	4b7b      	ldr	r3, [pc, #492]	; (800ab38 <_vfiprintf_r+0x244>)
 800a94c:	429d      	cmp	r5, r3
 800a94e:	d101      	bne.n	800a954 <_vfiprintf_r+0x60>
 800a950:	68b5      	ldr	r5, [r6, #8]
 800a952:	e7df      	b.n	800a914 <_vfiprintf_r+0x20>
 800a954:	4b79      	ldr	r3, [pc, #484]	; (800ab3c <_vfiprintf_r+0x248>)
 800a956:	429d      	cmp	r5, r3
 800a958:	bf08      	it	eq
 800a95a:	68f5      	ldreq	r5, [r6, #12]
 800a95c:	e7da      	b.n	800a914 <_vfiprintf_r+0x20>
 800a95e:	89ab      	ldrh	r3, [r5, #12]
 800a960:	0598      	lsls	r0, r3, #22
 800a962:	d4ed      	bmi.n	800a940 <_vfiprintf_r+0x4c>
 800a964:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a966:	f000 fbaa 	bl	800b0be <__retarget_lock_release_recursive>
 800a96a:	e7e9      	b.n	800a940 <_vfiprintf_r+0x4c>
 800a96c:	2300      	movs	r3, #0
 800a96e:	9309      	str	r3, [sp, #36]	; 0x24
 800a970:	2320      	movs	r3, #32
 800a972:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a976:	2330      	movs	r3, #48	; 0x30
 800a978:	f04f 0901 	mov.w	r9, #1
 800a97c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a980:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800ab40 <_vfiprintf_r+0x24c>
 800a984:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a988:	4623      	mov	r3, r4
 800a98a:	469a      	mov	sl, r3
 800a98c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a990:	b10a      	cbz	r2, 800a996 <_vfiprintf_r+0xa2>
 800a992:	2a25      	cmp	r2, #37	; 0x25
 800a994:	d1f9      	bne.n	800a98a <_vfiprintf_r+0x96>
 800a996:	ebba 0b04 	subs.w	fp, sl, r4
 800a99a:	d00b      	beq.n	800a9b4 <_vfiprintf_r+0xc0>
 800a99c:	465b      	mov	r3, fp
 800a99e:	4622      	mov	r2, r4
 800a9a0:	4629      	mov	r1, r5
 800a9a2:	4630      	mov	r0, r6
 800a9a4:	f7ff ff93 	bl	800a8ce <__sfputs_r>
 800a9a8:	3001      	adds	r0, #1
 800a9aa:	f000 80aa 	beq.w	800ab02 <_vfiprintf_r+0x20e>
 800a9ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a9b0:	445a      	add	r2, fp
 800a9b2:	9209      	str	r2, [sp, #36]	; 0x24
 800a9b4:	f89a 3000 	ldrb.w	r3, [sl]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	f000 80a2 	beq.w	800ab02 <_vfiprintf_r+0x20e>
 800a9be:	2300      	movs	r3, #0
 800a9c0:	f04f 32ff 	mov.w	r2, #4294967295
 800a9c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a9c8:	f10a 0a01 	add.w	sl, sl, #1
 800a9cc:	9304      	str	r3, [sp, #16]
 800a9ce:	9307      	str	r3, [sp, #28]
 800a9d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a9d4:	931a      	str	r3, [sp, #104]	; 0x68
 800a9d6:	4654      	mov	r4, sl
 800a9d8:	2205      	movs	r2, #5
 800a9da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9de:	4858      	ldr	r0, [pc, #352]	; (800ab40 <_vfiprintf_r+0x24c>)
 800a9e0:	f7ff f84e 	bl	8009a80 <memchr>
 800a9e4:	9a04      	ldr	r2, [sp, #16]
 800a9e6:	b9d8      	cbnz	r0, 800aa20 <_vfiprintf_r+0x12c>
 800a9e8:	06d1      	lsls	r1, r2, #27
 800a9ea:	bf44      	itt	mi
 800a9ec:	2320      	movmi	r3, #32
 800a9ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a9f2:	0713      	lsls	r3, r2, #28
 800a9f4:	bf44      	itt	mi
 800a9f6:	232b      	movmi	r3, #43	; 0x2b
 800a9f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a9fc:	f89a 3000 	ldrb.w	r3, [sl]
 800aa00:	2b2a      	cmp	r3, #42	; 0x2a
 800aa02:	d015      	beq.n	800aa30 <_vfiprintf_r+0x13c>
 800aa04:	4654      	mov	r4, sl
 800aa06:	2000      	movs	r0, #0
 800aa08:	f04f 0c0a 	mov.w	ip, #10
 800aa0c:	9a07      	ldr	r2, [sp, #28]
 800aa0e:	4621      	mov	r1, r4
 800aa10:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aa14:	3b30      	subs	r3, #48	; 0x30
 800aa16:	2b09      	cmp	r3, #9
 800aa18:	d94e      	bls.n	800aab8 <_vfiprintf_r+0x1c4>
 800aa1a:	b1b0      	cbz	r0, 800aa4a <_vfiprintf_r+0x156>
 800aa1c:	9207      	str	r2, [sp, #28]
 800aa1e:	e014      	b.n	800aa4a <_vfiprintf_r+0x156>
 800aa20:	eba0 0308 	sub.w	r3, r0, r8
 800aa24:	fa09 f303 	lsl.w	r3, r9, r3
 800aa28:	4313      	orrs	r3, r2
 800aa2a:	46a2      	mov	sl, r4
 800aa2c:	9304      	str	r3, [sp, #16]
 800aa2e:	e7d2      	b.n	800a9d6 <_vfiprintf_r+0xe2>
 800aa30:	9b03      	ldr	r3, [sp, #12]
 800aa32:	1d19      	adds	r1, r3, #4
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	9103      	str	r1, [sp, #12]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	bfbb      	ittet	lt
 800aa3c:	425b      	neglt	r3, r3
 800aa3e:	f042 0202 	orrlt.w	r2, r2, #2
 800aa42:	9307      	strge	r3, [sp, #28]
 800aa44:	9307      	strlt	r3, [sp, #28]
 800aa46:	bfb8      	it	lt
 800aa48:	9204      	strlt	r2, [sp, #16]
 800aa4a:	7823      	ldrb	r3, [r4, #0]
 800aa4c:	2b2e      	cmp	r3, #46	; 0x2e
 800aa4e:	d10c      	bne.n	800aa6a <_vfiprintf_r+0x176>
 800aa50:	7863      	ldrb	r3, [r4, #1]
 800aa52:	2b2a      	cmp	r3, #42	; 0x2a
 800aa54:	d135      	bne.n	800aac2 <_vfiprintf_r+0x1ce>
 800aa56:	9b03      	ldr	r3, [sp, #12]
 800aa58:	3402      	adds	r4, #2
 800aa5a:	1d1a      	adds	r2, r3, #4
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	9203      	str	r2, [sp, #12]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	bfb8      	it	lt
 800aa64:	f04f 33ff 	movlt.w	r3, #4294967295
 800aa68:	9305      	str	r3, [sp, #20]
 800aa6a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800ab44 <_vfiprintf_r+0x250>
 800aa6e:	2203      	movs	r2, #3
 800aa70:	4650      	mov	r0, sl
 800aa72:	7821      	ldrb	r1, [r4, #0]
 800aa74:	f7ff f804 	bl	8009a80 <memchr>
 800aa78:	b140      	cbz	r0, 800aa8c <_vfiprintf_r+0x198>
 800aa7a:	2340      	movs	r3, #64	; 0x40
 800aa7c:	eba0 000a 	sub.w	r0, r0, sl
 800aa80:	fa03 f000 	lsl.w	r0, r3, r0
 800aa84:	9b04      	ldr	r3, [sp, #16]
 800aa86:	3401      	adds	r4, #1
 800aa88:	4303      	orrs	r3, r0
 800aa8a:	9304      	str	r3, [sp, #16]
 800aa8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa90:	2206      	movs	r2, #6
 800aa92:	482d      	ldr	r0, [pc, #180]	; (800ab48 <_vfiprintf_r+0x254>)
 800aa94:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aa98:	f7fe fff2 	bl	8009a80 <memchr>
 800aa9c:	2800      	cmp	r0, #0
 800aa9e:	d03f      	beq.n	800ab20 <_vfiprintf_r+0x22c>
 800aaa0:	4b2a      	ldr	r3, [pc, #168]	; (800ab4c <_vfiprintf_r+0x258>)
 800aaa2:	bb1b      	cbnz	r3, 800aaec <_vfiprintf_r+0x1f8>
 800aaa4:	9b03      	ldr	r3, [sp, #12]
 800aaa6:	3307      	adds	r3, #7
 800aaa8:	f023 0307 	bic.w	r3, r3, #7
 800aaac:	3308      	adds	r3, #8
 800aaae:	9303      	str	r3, [sp, #12]
 800aab0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aab2:	443b      	add	r3, r7
 800aab4:	9309      	str	r3, [sp, #36]	; 0x24
 800aab6:	e767      	b.n	800a988 <_vfiprintf_r+0x94>
 800aab8:	460c      	mov	r4, r1
 800aaba:	2001      	movs	r0, #1
 800aabc:	fb0c 3202 	mla	r2, ip, r2, r3
 800aac0:	e7a5      	b.n	800aa0e <_vfiprintf_r+0x11a>
 800aac2:	2300      	movs	r3, #0
 800aac4:	f04f 0c0a 	mov.w	ip, #10
 800aac8:	4619      	mov	r1, r3
 800aaca:	3401      	adds	r4, #1
 800aacc:	9305      	str	r3, [sp, #20]
 800aace:	4620      	mov	r0, r4
 800aad0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aad4:	3a30      	subs	r2, #48	; 0x30
 800aad6:	2a09      	cmp	r2, #9
 800aad8:	d903      	bls.n	800aae2 <_vfiprintf_r+0x1ee>
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d0c5      	beq.n	800aa6a <_vfiprintf_r+0x176>
 800aade:	9105      	str	r1, [sp, #20]
 800aae0:	e7c3      	b.n	800aa6a <_vfiprintf_r+0x176>
 800aae2:	4604      	mov	r4, r0
 800aae4:	2301      	movs	r3, #1
 800aae6:	fb0c 2101 	mla	r1, ip, r1, r2
 800aaea:	e7f0      	b.n	800aace <_vfiprintf_r+0x1da>
 800aaec:	ab03      	add	r3, sp, #12
 800aaee:	9300      	str	r3, [sp, #0]
 800aaf0:	462a      	mov	r2, r5
 800aaf2:	4630      	mov	r0, r6
 800aaf4:	4b16      	ldr	r3, [pc, #88]	; (800ab50 <_vfiprintf_r+0x25c>)
 800aaf6:	a904      	add	r1, sp, #16
 800aaf8:	f7fc faa4 	bl	8007044 <_printf_float>
 800aafc:	4607      	mov	r7, r0
 800aafe:	1c78      	adds	r0, r7, #1
 800ab00:	d1d6      	bne.n	800aab0 <_vfiprintf_r+0x1bc>
 800ab02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ab04:	07d9      	lsls	r1, r3, #31
 800ab06:	d405      	bmi.n	800ab14 <_vfiprintf_r+0x220>
 800ab08:	89ab      	ldrh	r3, [r5, #12]
 800ab0a:	059a      	lsls	r2, r3, #22
 800ab0c:	d402      	bmi.n	800ab14 <_vfiprintf_r+0x220>
 800ab0e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ab10:	f000 fad5 	bl	800b0be <__retarget_lock_release_recursive>
 800ab14:	89ab      	ldrh	r3, [r5, #12]
 800ab16:	065b      	lsls	r3, r3, #25
 800ab18:	f53f af12 	bmi.w	800a940 <_vfiprintf_r+0x4c>
 800ab1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ab1e:	e711      	b.n	800a944 <_vfiprintf_r+0x50>
 800ab20:	ab03      	add	r3, sp, #12
 800ab22:	9300      	str	r3, [sp, #0]
 800ab24:	462a      	mov	r2, r5
 800ab26:	4630      	mov	r0, r6
 800ab28:	4b09      	ldr	r3, [pc, #36]	; (800ab50 <_vfiprintf_r+0x25c>)
 800ab2a:	a904      	add	r1, sp, #16
 800ab2c:	f7fc fd26 	bl	800757c <_printf_i>
 800ab30:	e7e4      	b.n	800aafc <_vfiprintf_r+0x208>
 800ab32:	bf00      	nop
 800ab34:	0800bc80 	.word	0x0800bc80
 800ab38:	0800bca0 	.word	0x0800bca0
 800ab3c:	0800bc60 	.word	0x0800bc60
 800ab40:	0800bc4c 	.word	0x0800bc4c
 800ab44:	0800bc52 	.word	0x0800bc52
 800ab48:	0800bc56 	.word	0x0800bc56
 800ab4c:	08007045 	.word	0x08007045
 800ab50:	0800a8cf 	.word	0x0800a8cf

0800ab54 <nan>:
 800ab54:	2000      	movs	r0, #0
 800ab56:	4901      	ldr	r1, [pc, #4]	; (800ab5c <nan+0x8>)
 800ab58:	4770      	bx	lr
 800ab5a:	bf00      	nop
 800ab5c:	7ff80000 	.word	0x7ff80000

0800ab60 <_sbrk_r>:
 800ab60:	b538      	push	{r3, r4, r5, lr}
 800ab62:	2300      	movs	r3, #0
 800ab64:	4d05      	ldr	r5, [pc, #20]	; (800ab7c <_sbrk_r+0x1c>)
 800ab66:	4604      	mov	r4, r0
 800ab68:	4608      	mov	r0, r1
 800ab6a:	602b      	str	r3, [r5, #0]
 800ab6c:	f7f7 f9d6 	bl	8001f1c <_sbrk>
 800ab70:	1c43      	adds	r3, r0, #1
 800ab72:	d102      	bne.n	800ab7a <_sbrk_r+0x1a>
 800ab74:	682b      	ldr	r3, [r5, #0]
 800ab76:	b103      	cbz	r3, 800ab7a <_sbrk_r+0x1a>
 800ab78:	6023      	str	r3, [r4, #0]
 800ab7a:	bd38      	pop	{r3, r4, r5, pc}
 800ab7c:	20002688 	.word	0x20002688

0800ab80 <strncmp>:
 800ab80:	4603      	mov	r3, r0
 800ab82:	b510      	push	{r4, lr}
 800ab84:	b172      	cbz	r2, 800aba4 <strncmp+0x24>
 800ab86:	3901      	subs	r1, #1
 800ab88:	1884      	adds	r4, r0, r2
 800ab8a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ab8e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ab92:	4290      	cmp	r0, r2
 800ab94:	d101      	bne.n	800ab9a <strncmp+0x1a>
 800ab96:	42a3      	cmp	r3, r4
 800ab98:	d101      	bne.n	800ab9e <strncmp+0x1e>
 800ab9a:	1a80      	subs	r0, r0, r2
 800ab9c:	bd10      	pop	{r4, pc}
 800ab9e:	2800      	cmp	r0, #0
 800aba0:	d1f3      	bne.n	800ab8a <strncmp+0xa>
 800aba2:	e7fa      	b.n	800ab9a <strncmp+0x1a>
 800aba4:	4610      	mov	r0, r2
 800aba6:	e7f9      	b.n	800ab9c <strncmp+0x1c>

0800aba8 <__swbuf_r>:
 800aba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abaa:	460e      	mov	r6, r1
 800abac:	4614      	mov	r4, r2
 800abae:	4605      	mov	r5, r0
 800abb0:	b118      	cbz	r0, 800abba <__swbuf_r+0x12>
 800abb2:	6983      	ldr	r3, [r0, #24]
 800abb4:	b90b      	cbnz	r3, 800abba <__swbuf_r+0x12>
 800abb6:	f000 f9e3 	bl	800af80 <__sinit>
 800abba:	4b21      	ldr	r3, [pc, #132]	; (800ac40 <__swbuf_r+0x98>)
 800abbc:	429c      	cmp	r4, r3
 800abbe:	d12b      	bne.n	800ac18 <__swbuf_r+0x70>
 800abc0:	686c      	ldr	r4, [r5, #4]
 800abc2:	69a3      	ldr	r3, [r4, #24]
 800abc4:	60a3      	str	r3, [r4, #8]
 800abc6:	89a3      	ldrh	r3, [r4, #12]
 800abc8:	071a      	lsls	r2, r3, #28
 800abca:	d52f      	bpl.n	800ac2c <__swbuf_r+0x84>
 800abcc:	6923      	ldr	r3, [r4, #16]
 800abce:	b36b      	cbz	r3, 800ac2c <__swbuf_r+0x84>
 800abd0:	6923      	ldr	r3, [r4, #16]
 800abd2:	6820      	ldr	r0, [r4, #0]
 800abd4:	b2f6      	uxtb	r6, r6
 800abd6:	1ac0      	subs	r0, r0, r3
 800abd8:	6963      	ldr	r3, [r4, #20]
 800abda:	4637      	mov	r7, r6
 800abdc:	4283      	cmp	r3, r0
 800abde:	dc04      	bgt.n	800abea <__swbuf_r+0x42>
 800abe0:	4621      	mov	r1, r4
 800abe2:	4628      	mov	r0, r5
 800abe4:	f000 f938 	bl	800ae58 <_fflush_r>
 800abe8:	bb30      	cbnz	r0, 800ac38 <__swbuf_r+0x90>
 800abea:	68a3      	ldr	r3, [r4, #8]
 800abec:	3001      	adds	r0, #1
 800abee:	3b01      	subs	r3, #1
 800abf0:	60a3      	str	r3, [r4, #8]
 800abf2:	6823      	ldr	r3, [r4, #0]
 800abf4:	1c5a      	adds	r2, r3, #1
 800abf6:	6022      	str	r2, [r4, #0]
 800abf8:	701e      	strb	r6, [r3, #0]
 800abfa:	6963      	ldr	r3, [r4, #20]
 800abfc:	4283      	cmp	r3, r0
 800abfe:	d004      	beq.n	800ac0a <__swbuf_r+0x62>
 800ac00:	89a3      	ldrh	r3, [r4, #12]
 800ac02:	07db      	lsls	r3, r3, #31
 800ac04:	d506      	bpl.n	800ac14 <__swbuf_r+0x6c>
 800ac06:	2e0a      	cmp	r6, #10
 800ac08:	d104      	bne.n	800ac14 <__swbuf_r+0x6c>
 800ac0a:	4621      	mov	r1, r4
 800ac0c:	4628      	mov	r0, r5
 800ac0e:	f000 f923 	bl	800ae58 <_fflush_r>
 800ac12:	b988      	cbnz	r0, 800ac38 <__swbuf_r+0x90>
 800ac14:	4638      	mov	r0, r7
 800ac16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac18:	4b0a      	ldr	r3, [pc, #40]	; (800ac44 <__swbuf_r+0x9c>)
 800ac1a:	429c      	cmp	r4, r3
 800ac1c:	d101      	bne.n	800ac22 <__swbuf_r+0x7a>
 800ac1e:	68ac      	ldr	r4, [r5, #8]
 800ac20:	e7cf      	b.n	800abc2 <__swbuf_r+0x1a>
 800ac22:	4b09      	ldr	r3, [pc, #36]	; (800ac48 <__swbuf_r+0xa0>)
 800ac24:	429c      	cmp	r4, r3
 800ac26:	bf08      	it	eq
 800ac28:	68ec      	ldreq	r4, [r5, #12]
 800ac2a:	e7ca      	b.n	800abc2 <__swbuf_r+0x1a>
 800ac2c:	4621      	mov	r1, r4
 800ac2e:	4628      	mov	r0, r5
 800ac30:	f000 f81a 	bl	800ac68 <__swsetup_r>
 800ac34:	2800      	cmp	r0, #0
 800ac36:	d0cb      	beq.n	800abd0 <__swbuf_r+0x28>
 800ac38:	f04f 37ff 	mov.w	r7, #4294967295
 800ac3c:	e7ea      	b.n	800ac14 <__swbuf_r+0x6c>
 800ac3e:	bf00      	nop
 800ac40:	0800bc80 	.word	0x0800bc80
 800ac44:	0800bca0 	.word	0x0800bca0
 800ac48:	0800bc60 	.word	0x0800bc60

0800ac4c <__ascii_wctomb>:
 800ac4c:	4603      	mov	r3, r0
 800ac4e:	4608      	mov	r0, r1
 800ac50:	b141      	cbz	r1, 800ac64 <__ascii_wctomb+0x18>
 800ac52:	2aff      	cmp	r2, #255	; 0xff
 800ac54:	d904      	bls.n	800ac60 <__ascii_wctomb+0x14>
 800ac56:	228a      	movs	r2, #138	; 0x8a
 800ac58:	f04f 30ff 	mov.w	r0, #4294967295
 800ac5c:	601a      	str	r2, [r3, #0]
 800ac5e:	4770      	bx	lr
 800ac60:	2001      	movs	r0, #1
 800ac62:	700a      	strb	r2, [r1, #0]
 800ac64:	4770      	bx	lr
	...

0800ac68 <__swsetup_r>:
 800ac68:	4b32      	ldr	r3, [pc, #200]	; (800ad34 <__swsetup_r+0xcc>)
 800ac6a:	b570      	push	{r4, r5, r6, lr}
 800ac6c:	681d      	ldr	r5, [r3, #0]
 800ac6e:	4606      	mov	r6, r0
 800ac70:	460c      	mov	r4, r1
 800ac72:	b125      	cbz	r5, 800ac7e <__swsetup_r+0x16>
 800ac74:	69ab      	ldr	r3, [r5, #24]
 800ac76:	b913      	cbnz	r3, 800ac7e <__swsetup_r+0x16>
 800ac78:	4628      	mov	r0, r5
 800ac7a:	f000 f981 	bl	800af80 <__sinit>
 800ac7e:	4b2e      	ldr	r3, [pc, #184]	; (800ad38 <__swsetup_r+0xd0>)
 800ac80:	429c      	cmp	r4, r3
 800ac82:	d10f      	bne.n	800aca4 <__swsetup_r+0x3c>
 800ac84:	686c      	ldr	r4, [r5, #4]
 800ac86:	89a3      	ldrh	r3, [r4, #12]
 800ac88:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ac8c:	0719      	lsls	r1, r3, #28
 800ac8e:	d42c      	bmi.n	800acea <__swsetup_r+0x82>
 800ac90:	06dd      	lsls	r5, r3, #27
 800ac92:	d411      	bmi.n	800acb8 <__swsetup_r+0x50>
 800ac94:	2309      	movs	r3, #9
 800ac96:	6033      	str	r3, [r6, #0]
 800ac98:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ac9c:	f04f 30ff 	mov.w	r0, #4294967295
 800aca0:	81a3      	strh	r3, [r4, #12]
 800aca2:	e03e      	b.n	800ad22 <__swsetup_r+0xba>
 800aca4:	4b25      	ldr	r3, [pc, #148]	; (800ad3c <__swsetup_r+0xd4>)
 800aca6:	429c      	cmp	r4, r3
 800aca8:	d101      	bne.n	800acae <__swsetup_r+0x46>
 800acaa:	68ac      	ldr	r4, [r5, #8]
 800acac:	e7eb      	b.n	800ac86 <__swsetup_r+0x1e>
 800acae:	4b24      	ldr	r3, [pc, #144]	; (800ad40 <__swsetup_r+0xd8>)
 800acb0:	429c      	cmp	r4, r3
 800acb2:	bf08      	it	eq
 800acb4:	68ec      	ldreq	r4, [r5, #12]
 800acb6:	e7e6      	b.n	800ac86 <__swsetup_r+0x1e>
 800acb8:	0758      	lsls	r0, r3, #29
 800acba:	d512      	bpl.n	800ace2 <__swsetup_r+0x7a>
 800acbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800acbe:	b141      	cbz	r1, 800acd2 <__swsetup_r+0x6a>
 800acc0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800acc4:	4299      	cmp	r1, r3
 800acc6:	d002      	beq.n	800acce <__swsetup_r+0x66>
 800acc8:	4630      	mov	r0, r6
 800acca:	f7ff fbb3 	bl	800a434 <_free_r>
 800acce:	2300      	movs	r3, #0
 800acd0:	6363      	str	r3, [r4, #52]	; 0x34
 800acd2:	89a3      	ldrh	r3, [r4, #12]
 800acd4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800acd8:	81a3      	strh	r3, [r4, #12]
 800acda:	2300      	movs	r3, #0
 800acdc:	6063      	str	r3, [r4, #4]
 800acde:	6923      	ldr	r3, [r4, #16]
 800ace0:	6023      	str	r3, [r4, #0]
 800ace2:	89a3      	ldrh	r3, [r4, #12]
 800ace4:	f043 0308 	orr.w	r3, r3, #8
 800ace8:	81a3      	strh	r3, [r4, #12]
 800acea:	6923      	ldr	r3, [r4, #16]
 800acec:	b94b      	cbnz	r3, 800ad02 <__swsetup_r+0x9a>
 800acee:	89a3      	ldrh	r3, [r4, #12]
 800acf0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800acf4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800acf8:	d003      	beq.n	800ad02 <__swsetup_r+0x9a>
 800acfa:	4621      	mov	r1, r4
 800acfc:	4630      	mov	r0, r6
 800acfe:	f000 fa05 	bl	800b10c <__smakebuf_r>
 800ad02:	89a0      	ldrh	r0, [r4, #12]
 800ad04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ad08:	f010 0301 	ands.w	r3, r0, #1
 800ad0c:	d00a      	beq.n	800ad24 <__swsetup_r+0xbc>
 800ad0e:	2300      	movs	r3, #0
 800ad10:	60a3      	str	r3, [r4, #8]
 800ad12:	6963      	ldr	r3, [r4, #20]
 800ad14:	425b      	negs	r3, r3
 800ad16:	61a3      	str	r3, [r4, #24]
 800ad18:	6923      	ldr	r3, [r4, #16]
 800ad1a:	b943      	cbnz	r3, 800ad2e <__swsetup_r+0xc6>
 800ad1c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ad20:	d1ba      	bne.n	800ac98 <__swsetup_r+0x30>
 800ad22:	bd70      	pop	{r4, r5, r6, pc}
 800ad24:	0781      	lsls	r1, r0, #30
 800ad26:	bf58      	it	pl
 800ad28:	6963      	ldrpl	r3, [r4, #20]
 800ad2a:	60a3      	str	r3, [r4, #8]
 800ad2c:	e7f4      	b.n	800ad18 <__swsetup_r+0xb0>
 800ad2e:	2000      	movs	r0, #0
 800ad30:	e7f7      	b.n	800ad22 <__swsetup_r+0xba>
 800ad32:	bf00      	nop
 800ad34:	20000190 	.word	0x20000190
 800ad38:	0800bc80 	.word	0x0800bc80
 800ad3c:	0800bca0 	.word	0x0800bca0
 800ad40:	0800bc60 	.word	0x0800bc60

0800ad44 <abort>:
 800ad44:	2006      	movs	r0, #6
 800ad46:	b508      	push	{r3, lr}
 800ad48:	f000 fa9e 	bl	800b288 <raise>
 800ad4c:	2001      	movs	r0, #1
 800ad4e:	f7f7 f8b5 	bl	8001ebc <_exit>
	...

0800ad54 <__sflush_r>:
 800ad54:	898a      	ldrh	r2, [r1, #12]
 800ad56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad58:	4605      	mov	r5, r0
 800ad5a:	0710      	lsls	r0, r2, #28
 800ad5c:	460c      	mov	r4, r1
 800ad5e:	d457      	bmi.n	800ae10 <__sflush_r+0xbc>
 800ad60:	684b      	ldr	r3, [r1, #4]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	dc04      	bgt.n	800ad70 <__sflush_r+0x1c>
 800ad66:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	dc01      	bgt.n	800ad70 <__sflush_r+0x1c>
 800ad6c:	2000      	movs	r0, #0
 800ad6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ad72:	2e00      	cmp	r6, #0
 800ad74:	d0fa      	beq.n	800ad6c <__sflush_r+0x18>
 800ad76:	2300      	movs	r3, #0
 800ad78:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ad7c:	682f      	ldr	r7, [r5, #0]
 800ad7e:	602b      	str	r3, [r5, #0]
 800ad80:	d032      	beq.n	800ade8 <__sflush_r+0x94>
 800ad82:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ad84:	89a3      	ldrh	r3, [r4, #12]
 800ad86:	075a      	lsls	r2, r3, #29
 800ad88:	d505      	bpl.n	800ad96 <__sflush_r+0x42>
 800ad8a:	6863      	ldr	r3, [r4, #4]
 800ad8c:	1ac0      	subs	r0, r0, r3
 800ad8e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ad90:	b10b      	cbz	r3, 800ad96 <__sflush_r+0x42>
 800ad92:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ad94:	1ac0      	subs	r0, r0, r3
 800ad96:	2300      	movs	r3, #0
 800ad98:	4602      	mov	r2, r0
 800ad9a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ad9c:	4628      	mov	r0, r5
 800ad9e:	6a21      	ldr	r1, [r4, #32]
 800ada0:	47b0      	blx	r6
 800ada2:	1c43      	adds	r3, r0, #1
 800ada4:	89a3      	ldrh	r3, [r4, #12]
 800ada6:	d106      	bne.n	800adb6 <__sflush_r+0x62>
 800ada8:	6829      	ldr	r1, [r5, #0]
 800adaa:	291d      	cmp	r1, #29
 800adac:	d82c      	bhi.n	800ae08 <__sflush_r+0xb4>
 800adae:	4a29      	ldr	r2, [pc, #164]	; (800ae54 <__sflush_r+0x100>)
 800adb0:	40ca      	lsrs	r2, r1
 800adb2:	07d6      	lsls	r6, r2, #31
 800adb4:	d528      	bpl.n	800ae08 <__sflush_r+0xb4>
 800adb6:	2200      	movs	r2, #0
 800adb8:	6062      	str	r2, [r4, #4]
 800adba:	6922      	ldr	r2, [r4, #16]
 800adbc:	04d9      	lsls	r1, r3, #19
 800adbe:	6022      	str	r2, [r4, #0]
 800adc0:	d504      	bpl.n	800adcc <__sflush_r+0x78>
 800adc2:	1c42      	adds	r2, r0, #1
 800adc4:	d101      	bne.n	800adca <__sflush_r+0x76>
 800adc6:	682b      	ldr	r3, [r5, #0]
 800adc8:	b903      	cbnz	r3, 800adcc <__sflush_r+0x78>
 800adca:	6560      	str	r0, [r4, #84]	; 0x54
 800adcc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800adce:	602f      	str	r7, [r5, #0]
 800add0:	2900      	cmp	r1, #0
 800add2:	d0cb      	beq.n	800ad6c <__sflush_r+0x18>
 800add4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800add8:	4299      	cmp	r1, r3
 800adda:	d002      	beq.n	800ade2 <__sflush_r+0x8e>
 800addc:	4628      	mov	r0, r5
 800adde:	f7ff fb29 	bl	800a434 <_free_r>
 800ade2:	2000      	movs	r0, #0
 800ade4:	6360      	str	r0, [r4, #52]	; 0x34
 800ade6:	e7c2      	b.n	800ad6e <__sflush_r+0x1a>
 800ade8:	6a21      	ldr	r1, [r4, #32]
 800adea:	2301      	movs	r3, #1
 800adec:	4628      	mov	r0, r5
 800adee:	47b0      	blx	r6
 800adf0:	1c41      	adds	r1, r0, #1
 800adf2:	d1c7      	bne.n	800ad84 <__sflush_r+0x30>
 800adf4:	682b      	ldr	r3, [r5, #0]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d0c4      	beq.n	800ad84 <__sflush_r+0x30>
 800adfa:	2b1d      	cmp	r3, #29
 800adfc:	d001      	beq.n	800ae02 <__sflush_r+0xae>
 800adfe:	2b16      	cmp	r3, #22
 800ae00:	d101      	bne.n	800ae06 <__sflush_r+0xb2>
 800ae02:	602f      	str	r7, [r5, #0]
 800ae04:	e7b2      	b.n	800ad6c <__sflush_r+0x18>
 800ae06:	89a3      	ldrh	r3, [r4, #12]
 800ae08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae0c:	81a3      	strh	r3, [r4, #12]
 800ae0e:	e7ae      	b.n	800ad6e <__sflush_r+0x1a>
 800ae10:	690f      	ldr	r7, [r1, #16]
 800ae12:	2f00      	cmp	r7, #0
 800ae14:	d0aa      	beq.n	800ad6c <__sflush_r+0x18>
 800ae16:	0793      	lsls	r3, r2, #30
 800ae18:	bf18      	it	ne
 800ae1a:	2300      	movne	r3, #0
 800ae1c:	680e      	ldr	r6, [r1, #0]
 800ae1e:	bf08      	it	eq
 800ae20:	694b      	ldreq	r3, [r1, #20]
 800ae22:	1bf6      	subs	r6, r6, r7
 800ae24:	600f      	str	r7, [r1, #0]
 800ae26:	608b      	str	r3, [r1, #8]
 800ae28:	2e00      	cmp	r6, #0
 800ae2a:	dd9f      	ble.n	800ad6c <__sflush_r+0x18>
 800ae2c:	4633      	mov	r3, r6
 800ae2e:	463a      	mov	r2, r7
 800ae30:	4628      	mov	r0, r5
 800ae32:	6a21      	ldr	r1, [r4, #32]
 800ae34:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800ae38:	47e0      	blx	ip
 800ae3a:	2800      	cmp	r0, #0
 800ae3c:	dc06      	bgt.n	800ae4c <__sflush_r+0xf8>
 800ae3e:	89a3      	ldrh	r3, [r4, #12]
 800ae40:	f04f 30ff 	mov.w	r0, #4294967295
 800ae44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae48:	81a3      	strh	r3, [r4, #12]
 800ae4a:	e790      	b.n	800ad6e <__sflush_r+0x1a>
 800ae4c:	4407      	add	r7, r0
 800ae4e:	1a36      	subs	r6, r6, r0
 800ae50:	e7ea      	b.n	800ae28 <__sflush_r+0xd4>
 800ae52:	bf00      	nop
 800ae54:	20400001 	.word	0x20400001

0800ae58 <_fflush_r>:
 800ae58:	b538      	push	{r3, r4, r5, lr}
 800ae5a:	690b      	ldr	r3, [r1, #16]
 800ae5c:	4605      	mov	r5, r0
 800ae5e:	460c      	mov	r4, r1
 800ae60:	b913      	cbnz	r3, 800ae68 <_fflush_r+0x10>
 800ae62:	2500      	movs	r5, #0
 800ae64:	4628      	mov	r0, r5
 800ae66:	bd38      	pop	{r3, r4, r5, pc}
 800ae68:	b118      	cbz	r0, 800ae72 <_fflush_r+0x1a>
 800ae6a:	6983      	ldr	r3, [r0, #24]
 800ae6c:	b90b      	cbnz	r3, 800ae72 <_fflush_r+0x1a>
 800ae6e:	f000 f887 	bl	800af80 <__sinit>
 800ae72:	4b14      	ldr	r3, [pc, #80]	; (800aec4 <_fflush_r+0x6c>)
 800ae74:	429c      	cmp	r4, r3
 800ae76:	d11b      	bne.n	800aeb0 <_fflush_r+0x58>
 800ae78:	686c      	ldr	r4, [r5, #4]
 800ae7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d0ef      	beq.n	800ae62 <_fflush_r+0xa>
 800ae82:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ae84:	07d0      	lsls	r0, r2, #31
 800ae86:	d404      	bmi.n	800ae92 <_fflush_r+0x3a>
 800ae88:	0599      	lsls	r1, r3, #22
 800ae8a:	d402      	bmi.n	800ae92 <_fflush_r+0x3a>
 800ae8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ae8e:	f000 f915 	bl	800b0bc <__retarget_lock_acquire_recursive>
 800ae92:	4628      	mov	r0, r5
 800ae94:	4621      	mov	r1, r4
 800ae96:	f7ff ff5d 	bl	800ad54 <__sflush_r>
 800ae9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ae9c:	4605      	mov	r5, r0
 800ae9e:	07da      	lsls	r2, r3, #31
 800aea0:	d4e0      	bmi.n	800ae64 <_fflush_r+0xc>
 800aea2:	89a3      	ldrh	r3, [r4, #12]
 800aea4:	059b      	lsls	r3, r3, #22
 800aea6:	d4dd      	bmi.n	800ae64 <_fflush_r+0xc>
 800aea8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aeaa:	f000 f908 	bl	800b0be <__retarget_lock_release_recursive>
 800aeae:	e7d9      	b.n	800ae64 <_fflush_r+0xc>
 800aeb0:	4b05      	ldr	r3, [pc, #20]	; (800aec8 <_fflush_r+0x70>)
 800aeb2:	429c      	cmp	r4, r3
 800aeb4:	d101      	bne.n	800aeba <_fflush_r+0x62>
 800aeb6:	68ac      	ldr	r4, [r5, #8]
 800aeb8:	e7df      	b.n	800ae7a <_fflush_r+0x22>
 800aeba:	4b04      	ldr	r3, [pc, #16]	; (800aecc <_fflush_r+0x74>)
 800aebc:	429c      	cmp	r4, r3
 800aebe:	bf08      	it	eq
 800aec0:	68ec      	ldreq	r4, [r5, #12]
 800aec2:	e7da      	b.n	800ae7a <_fflush_r+0x22>
 800aec4:	0800bc80 	.word	0x0800bc80
 800aec8:	0800bca0 	.word	0x0800bca0
 800aecc:	0800bc60 	.word	0x0800bc60

0800aed0 <std>:
 800aed0:	2300      	movs	r3, #0
 800aed2:	b510      	push	{r4, lr}
 800aed4:	4604      	mov	r4, r0
 800aed6:	e9c0 3300 	strd	r3, r3, [r0]
 800aeda:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aede:	6083      	str	r3, [r0, #8]
 800aee0:	8181      	strh	r1, [r0, #12]
 800aee2:	6643      	str	r3, [r0, #100]	; 0x64
 800aee4:	81c2      	strh	r2, [r0, #14]
 800aee6:	6183      	str	r3, [r0, #24]
 800aee8:	4619      	mov	r1, r3
 800aeea:	2208      	movs	r2, #8
 800aeec:	305c      	adds	r0, #92	; 0x5c
 800aeee:	f7fc f803 	bl	8006ef8 <memset>
 800aef2:	4b05      	ldr	r3, [pc, #20]	; (800af08 <std+0x38>)
 800aef4:	6224      	str	r4, [r4, #32]
 800aef6:	6263      	str	r3, [r4, #36]	; 0x24
 800aef8:	4b04      	ldr	r3, [pc, #16]	; (800af0c <std+0x3c>)
 800aefa:	62a3      	str	r3, [r4, #40]	; 0x28
 800aefc:	4b04      	ldr	r3, [pc, #16]	; (800af10 <std+0x40>)
 800aefe:	62e3      	str	r3, [r4, #44]	; 0x2c
 800af00:	4b04      	ldr	r3, [pc, #16]	; (800af14 <std+0x44>)
 800af02:	6323      	str	r3, [r4, #48]	; 0x30
 800af04:	bd10      	pop	{r4, pc}
 800af06:	bf00      	nop
 800af08:	0800b2c1 	.word	0x0800b2c1
 800af0c:	0800b2e3 	.word	0x0800b2e3
 800af10:	0800b31b 	.word	0x0800b31b
 800af14:	0800b33f 	.word	0x0800b33f

0800af18 <_cleanup_r>:
 800af18:	4901      	ldr	r1, [pc, #4]	; (800af20 <_cleanup_r+0x8>)
 800af1a:	f000 b8af 	b.w	800b07c <_fwalk_reent>
 800af1e:	bf00      	nop
 800af20:	0800ae59 	.word	0x0800ae59

0800af24 <__sfmoreglue>:
 800af24:	2268      	movs	r2, #104	; 0x68
 800af26:	b570      	push	{r4, r5, r6, lr}
 800af28:	1e4d      	subs	r5, r1, #1
 800af2a:	4355      	muls	r5, r2
 800af2c:	460e      	mov	r6, r1
 800af2e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800af32:	f7ff fae7 	bl	800a504 <_malloc_r>
 800af36:	4604      	mov	r4, r0
 800af38:	b140      	cbz	r0, 800af4c <__sfmoreglue+0x28>
 800af3a:	2100      	movs	r1, #0
 800af3c:	e9c0 1600 	strd	r1, r6, [r0]
 800af40:	300c      	adds	r0, #12
 800af42:	60a0      	str	r0, [r4, #8]
 800af44:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800af48:	f7fb ffd6 	bl	8006ef8 <memset>
 800af4c:	4620      	mov	r0, r4
 800af4e:	bd70      	pop	{r4, r5, r6, pc}

0800af50 <__sfp_lock_acquire>:
 800af50:	4801      	ldr	r0, [pc, #4]	; (800af58 <__sfp_lock_acquire+0x8>)
 800af52:	f000 b8b3 	b.w	800b0bc <__retarget_lock_acquire_recursive>
 800af56:	bf00      	nop
 800af58:	20002685 	.word	0x20002685

0800af5c <__sfp_lock_release>:
 800af5c:	4801      	ldr	r0, [pc, #4]	; (800af64 <__sfp_lock_release+0x8>)
 800af5e:	f000 b8ae 	b.w	800b0be <__retarget_lock_release_recursive>
 800af62:	bf00      	nop
 800af64:	20002685 	.word	0x20002685

0800af68 <__sinit_lock_acquire>:
 800af68:	4801      	ldr	r0, [pc, #4]	; (800af70 <__sinit_lock_acquire+0x8>)
 800af6a:	f000 b8a7 	b.w	800b0bc <__retarget_lock_acquire_recursive>
 800af6e:	bf00      	nop
 800af70:	20002686 	.word	0x20002686

0800af74 <__sinit_lock_release>:
 800af74:	4801      	ldr	r0, [pc, #4]	; (800af7c <__sinit_lock_release+0x8>)
 800af76:	f000 b8a2 	b.w	800b0be <__retarget_lock_release_recursive>
 800af7a:	bf00      	nop
 800af7c:	20002686 	.word	0x20002686

0800af80 <__sinit>:
 800af80:	b510      	push	{r4, lr}
 800af82:	4604      	mov	r4, r0
 800af84:	f7ff fff0 	bl	800af68 <__sinit_lock_acquire>
 800af88:	69a3      	ldr	r3, [r4, #24]
 800af8a:	b11b      	cbz	r3, 800af94 <__sinit+0x14>
 800af8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af90:	f7ff bff0 	b.w	800af74 <__sinit_lock_release>
 800af94:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800af98:	6523      	str	r3, [r4, #80]	; 0x50
 800af9a:	4b13      	ldr	r3, [pc, #76]	; (800afe8 <__sinit+0x68>)
 800af9c:	4a13      	ldr	r2, [pc, #76]	; (800afec <__sinit+0x6c>)
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	62a2      	str	r2, [r4, #40]	; 0x28
 800afa2:	42a3      	cmp	r3, r4
 800afa4:	bf08      	it	eq
 800afa6:	2301      	moveq	r3, #1
 800afa8:	4620      	mov	r0, r4
 800afaa:	bf08      	it	eq
 800afac:	61a3      	streq	r3, [r4, #24]
 800afae:	f000 f81f 	bl	800aff0 <__sfp>
 800afb2:	6060      	str	r0, [r4, #4]
 800afb4:	4620      	mov	r0, r4
 800afb6:	f000 f81b 	bl	800aff0 <__sfp>
 800afba:	60a0      	str	r0, [r4, #8]
 800afbc:	4620      	mov	r0, r4
 800afbe:	f000 f817 	bl	800aff0 <__sfp>
 800afc2:	2200      	movs	r2, #0
 800afc4:	2104      	movs	r1, #4
 800afc6:	60e0      	str	r0, [r4, #12]
 800afc8:	6860      	ldr	r0, [r4, #4]
 800afca:	f7ff ff81 	bl	800aed0 <std>
 800afce:	2201      	movs	r2, #1
 800afd0:	2109      	movs	r1, #9
 800afd2:	68a0      	ldr	r0, [r4, #8]
 800afd4:	f7ff ff7c 	bl	800aed0 <std>
 800afd8:	2202      	movs	r2, #2
 800afda:	2112      	movs	r1, #18
 800afdc:	68e0      	ldr	r0, [r4, #12]
 800afde:	f7ff ff77 	bl	800aed0 <std>
 800afe2:	2301      	movs	r3, #1
 800afe4:	61a3      	str	r3, [r4, #24]
 800afe6:	e7d1      	b.n	800af8c <__sinit+0xc>
 800afe8:	0800b7c4 	.word	0x0800b7c4
 800afec:	0800af19 	.word	0x0800af19

0800aff0 <__sfp>:
 800aff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aff2:	4607      	mov	r7, r0
 800aff4:	f7ff ffac 	bl	800af50 <__sfp_lock_acquire>
 800aff8:	4b1e      	ldr	r3, [pc, #120]	; (800b074 <__sfp+0x84>)
 800affa:	681e      	ldr	r6, [r3, #0]
 800affc:	69b3      	ldr	r3, [r6, #24]
 800affe:	b913      	cbnz	r3, 800b006 <__sfp+0x16>
 800b000:	4630      	mov	r0, r6
 800b002:	f7ff ffbd 	bl	800af80 <__sinit>
 800b006:	3648      	adds	r6, #72	; 0x48
 800b008:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b00c:	3b01      	subs	r3, #1
 800b00e:	d503      	bpl.n	800b018 <__sfp+0x28>
 800b010:	6833      	ldr	r3, [r6, #0]
 800b012:	b30b      	cbz	r3, 800b058 <__sfp+0x68>
 800b014:	6836      	ldr	r6, [r6, #0]
 800b016:	e7f7      	b.n	800b008 <__sfp+0x18>
 800b018:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b01c:	b9d5      	cbnz	r5, 800b054 <__sfp+0x64>
 800b01e:	4b16      	ldr	r3, [pc, #88]	; (800b078 <__sfp+0x88>)
 800b020:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b024:	60e3      	str	r3, [r4, #12]
 800b026:	6665      	str	r5, [r4, #100]	; 0x64
 800b028:	f000 f847 	bl	800b0ba <__retarget_lock_init_recursive>
 800b02c:	f7ff ff96 	bl	800af5c <__sfp_lock_release>
 800b030:	2208      	movs	r2, #8
 800b032:	4629      	mov	r1, r5
 800b034:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b038:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b03c:	6025      	str	r5, [r4, #0]
 800b03e:	61a5      	str	r5, [r4, #24]
 800b040:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b044:	f7fb ff58 	bl	8006ef8 <memset>
 800b048:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b04c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b050:	4620      	mov	r0, r4
 800b052:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b054:	3468      	adds	r4, #104	; 0x68
 800b056:	e7d9      	b.n	800b00c <__sfp+0x1c>
 800b058:	2104      	movs	r1, #4
 800b05a:	4638      	mov	r0, r7
 800b05c:	f7ff ff62 	bl	800af24 <__sfmoreglue>
 800b060:	4604      	mov	r4, r0
 800b062:	6030      	str	r0, [r6, #0]
 800b064:	2800      	cmp	r0, #0
 800b066:	d1d5      	bne.n	800b014 <__sfp+0x24>
 800b068:	f7ff ff78 	bl	800af5c <__sfp_lock_release>
 800b06c:	230c      	movs	r3, #12
 800b06e:	603b      	str	r3, [r7, #0]
 800b070:	e7ee      	b.n	800b050 <__sfp+0x60>
 800b072:	bf00      	nop
 800b074:	0800b7c4 	.word	0x0800b7c4
 800b078:	ffff0001 	.word	0xffff0001

0800b07c <_fwalk_reent>:
 800b07c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b080:	4606      	mov	r6, r0
 800b082:	4688      	mov	r8, r1
 800b084:	2700      	movs	r7, #0
 800b086:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b08a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b08e:	f1b9 0901 	subs.w	r9, r9, #1
 800b092:	d505      	bpl.n	800b0a0 <_fwalk_reent+0x24>
 800b094:	6824      	ldr	r4, [r4, #0]
 800b096:	2c00      	cmp	r4, #0
 800b098:	d1f7      	bne.n	800b08a <_fwalk_reent+0xe>
 800b09a:	4638      	mov	r0, r7
 800b09c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b0a0:	89ab      	ldrh	r3, [r5, #12]
 800b0a2:	2b01      	cmp	r3, #1
 800b0a4:	d907      	bls.n	800b0b6 <_fwalk_reent+0x3a>
 800b0a6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b0aa:	3301      	adds	r3, #1
 800b0ac:	d003      	beq.n	800b0b6 <_fwalk_reent+0x3a>
 800b0ae:	4629      	mov	r1, r5
 800b0b0:	4630      	mov	r0, r6
 800b0b2:	47c0      	blx	r8
 800b0b4:	4307      	orrs	r7, r0
 800b0b6:	3568      	adds	r5, #104	; 0x68
 800b0b8:	e7e9      	b.n	800b08e <_fwalk_reent+0x12>

0800b0ba <__retarget_lock_init_recursive>:
 800b0ba:	4770      	bx	lr

0800b0bc <__retarget_lock_acquire_recursive>:
 800b0bc:	4770      	bx	lr

0800b0be <__retarget_lock_release_recursive>:
 800b0be:	4770      	bx	lr

0800b0c0 <__swhatbuf_r>:
 800b0c0:	b570      	push	{r4, r5, r6, lr}
 800b0c2:	460e      	mov	r6, r1
 800b0c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0c8:	4614      	mov	r4, r2
 800b0ca:	2900      	cmp	r1, #0
 800b0cc:	461d      	mov	r5, r3
 800b0ce:	b096      	sub	sp, #88	; 0x58
 800b0d0:	da08      	bge.n	800b0e4 <__swhatbuf_r+0x24>
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b0d8:	602a      	str	r2, [r5, #0]
 800b0da:	061a      	lsls	r2, r3, #24
 800b0dc:	d410      	bmi.n	800b100 <__swhatbuf_r+0x40>
 800b0de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b0e2:	e00e      	b.n	800b102 <__swhatbuf_r+0x42>
 800b0e4:	466a      	mov	r2, sp
 800b0e6:	f000 f951 	bl	800b38c <_fstat_r>
 800b0ea:	2800      	cmp	r0, #0
 800b0ec:	dbf1      	blt.n	800b0d2 <__swhatbuf_r+0x12>
 800b0ee:	9a01      	ldr	r2, [sp, #4]
 800b0f0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b0f4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b0f8:	425a      	negs	r2, r3
 800b0fa:	415a      	adcs	r2, r3
 800b0fc:	602a      	str	r2, [r5, #0]
 800b0fe:	e7ee      	b.n	800b0de <__swhatbuf_r+0x1e>
 800b100:	2340      	movs	r3, #64	; 0x40
 800b102:	2000      	movs	r0, #0
 800b104:	6023      	str	r3, [r4, #0]
 800b106:	b016      	add	sp, #88	; 0x58
 800b108:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b10c <__smakebuf_r>:
 800b10c:	898b      	ldrh	r3, [r1, #12]
 800b10e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b110:	079d      	lsls	r5, r3, #30
 800b112:	4606      	mov	r6, r0
 800b114:	460c      	mov	r4, r1
 800b116:	d507      	bpl.n	800b128 <__smakebuf_r+0x1c>
 800b118:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b11c:	6023      	str	r3, [r4, #0]
 800b11e:	6123      	str	r3, [r4, #16]
 800b120:	2301      	movs	r3, #1
 800b122:	6163      	str	r3, [r4, #20]
 800b124:	b002      	add	sp, #8
 800b126:	bd70      	pop	{r4, r5, r6, pc}
 800b128:	466a      	mov	r2, sp
 800b12a:	ab01      	add	r3, sp, #4
 800b12c:	f7ff ffc8 	bl	800b0c0 <__swhatbuf_r>
 800b130:	9900      	ldr	r1, [sp, #0]
 800b132:	4605      	mov	r5, r0
 800b134:	4630      	mov	r0, r6
 800b136:	f7ff f9e5 	bl	800a504 <_malloc_r>
 800b13a:	b948      	cbnz	r0, 800b150 <__smakebuf_r+0x44>
 800b13c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b140:	059a      	lsls	r2, r3, #22
 800b142:	d4ef      	bmi.n	800b124 <__smakebuf_r+0x18>
 800b144:	f023 0303 	bic.w	r3, r3, #3
 800b148:	f043 0302 	orr.w	r3, r3, #2
 800b14c:	81a3      	strh	r3, [r4, #12]
 800b14e:	e7e3      	b.n	800b118 <__smakebuf_r+0xc>
 800b150:	4b0d      	ldr	r3, [pc, #52]	; (800b188 <__smakebuf_r+0x7c>)
 800b152:	62b3      	str	r3, [r6, #40]	; 0x28
 800b154:	89a3      	ldrh	r3, [r4, #12]
 800b156:	6020      	str	r0, [r4, #0]
 800b158:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b15c:	81a3      	strh	r3, [r4, #12]
 800b15e:	9b00      	ldr	r3, [sp, #0]
 800b160:	6120      	str	r0, [r4, #16]
 800b162:	6163      	str	r3, [r4, #20]
 800b164:	9b01      	ldr	r3, [sp, #4]
 800b166:	b15b      	cbz	r3, 800b180 <__smakebuf_r+0x74>
 800b168:	4630      	mov	r0, r6
 800b16a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b16e:	f000 f91f 	bl	800b3b0 <_isatty_r>
 800b172:	b128      	cbz	r0, 800b180 <__smakebuf_r+0x74>
 800b174:	89a3      	ldrh	r3, [r4, #12]
 800b176:	f023 0303 	bic.w	r3, r3, #3
 800b17a:	f043 0301 	orr.w	r3, r3, #1
 800b17e:	81a3      	strh	r3, [r4, #12]
 800b180:	89a0      	ldrh	r0, [r4, #12]
 800b182:	4305      	orrs	r5, r0
 800b184:	81a5      	strh	r5, [r4, #12]
 800b186:	e7cd      	b.n	800b124 <__smakebuf_r+0x18>
 800b188:	0800af19 	.word	0x0800af19

0800b18c <memmove>:
 800b18c:	4288      	cmp	r0, r1
 800b18e:	b510      	push	{r4, lr}
 800b190:	eb01 0402 	add.w	r4, r1, r2
 800b194:	d902      	bls.n	800b19c <memmove+0x10>
 800b196:	4284      	cmp	r4, r0
 800b198:	4623      	mov	r3, r4
 800b19a:	d807      	bhi.n	800b1ac <memmove+0x20>
 800b19c:	1e43      	subs	r3, r0, #1
 800b19e:	42a1      	cmp	r1, r4
 800b1a0:	d008      	beq.n	800b1b4 <memmove+0x28>
 800b1a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b1a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b1aa:	e7f8      	b.n	800b19e <memmove+0x12>
 800b1ac:	4601      	mov	r1, r0
 800b1ae:	4402      	add	r2, r0
 800b1b0:	428a      	cmp	r2, r1
 800b1b2:	d100      	bne.n	800b1b6 <memmove+0x2a>
 800b1b4:	bd10      	pop	{r4, pc}
 800b1b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b1ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b1be:	e7f7      	b.n	800b1b0 <memmove+0x24>

0800b1c0 <__malloc_lock>:
 800b1c0:	4801      	ldr	r0, [pc, #4]	; (800b1c8 <__malloc_lock+0x8>)
 800b1c2:	f7ff bf7b 	b.w	800b0bc <__retarget_lock_acquire_recursive>
 800b1c6:	bf00      	nop
 800b1c8:	20002684 	.word	0x20002684

0800b1cc <__malloc_unlock>:
 800b1cc:	4801      	ldr	r0, [pc, #4]	; (800b1d4 <__malloc_unlock+0x8>)
 800b1ce:	f7ff bf76 	b.w	800b0be <__retarget_lock_release_recursive>
 800b1d2:	bf00      	nop
 800b1d4:	20002684 	.word	0x20002684

0800b1d8 <_realloc_r>:
 800b1d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1dc:	4680      	mov	r8, r0
 800b1de:	4614      	mov	r4, r2
 800b1e0:	460e      	mov	r6, r1
 800b1e2:	b921      	cbnz	r1, 800b1ee <_realloc_r+0x16>
 800b1e4:	4611      	mov	r1, r2
 800b1e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b1ea:	f7ff b98b 	b.w	800a504 <_malloc_r>
 800b1ee:	b92a      	cbnz	r2, 800b1fc <_realloc_r+0x24>
 800b1f0:	f7ff f920 	bl	800a434 <_free_r>
 800b1f4:	4625      	mov	r5, r4
 800b1f6:	4628      	mov	r0, r5
 800b1f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1fc:	f000 f8fa 	bl	800b3f4 <_malloc_usable_size_r>
 800b200:	4284      	cmp	r4, r0
 800b202:	4607      	mov	r7, r0
 800b204:	d802      	bhi.n	800b20c <_realloc_r+0x34>
 800b206:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b20a:	d812      	bhi.n	800b232 <_realloc_r+0x5a>
 800b20c:	4621      	mov	r1, r4
 800b20e:	4640      	mov	r0, r8
 800b210:	f7ff f978 	bl	800a504 <_malloc_r>
 800b214:	4605      	mov	r5, r0
 800b216:	2800      	cmp	r0, #0
 800b218:	d0ed      	beq.n	800b1f6 <_realloc_r+0x1e>
 800b21a:	42bc      	cmp	r4, r7
 800b21c:	4622      	mov	r2, r4
 800b21e:	4631      	mov	r1, r6
 800b220:	bf28      	it	cs
 800b222:	463a      	movcs	r2, r7
 800b224:	f7fb fe5a 	bl	8006edc <memcpy>
 800b228:	4631      	mov	r1, r6
 800b22a:	4640      	mov	r0, r8
 800b22c:	f7ff f902 	bl	800a434 <_free_r>
 800b230:	e7e1      	b.n	800b1f6 <_realloc_r+0x1e>
 800b232:	4635      	mov	r5, r6
 800b234:	e7df      	b.n	800b1f6 <_realloc_r+0x1e>

0800b236 <_raise_r>:
 800b236:	291f      	cmp	r1, #31
 800b238:	b538      	push	{r3, r4, r5, lr}
 800b23a:	4604      	mov	r4, r0
 800b23c:	460d      	mov	r5, r1
 800b23e:	d904      	bls.n	800b24a <_raise_r+0x14>
 800b240:	2316      	movs	r3, #22
 800b242:	6003      	str	r3, [r0, #0]
 800b244:	f04f 30ff 	mov.w	r0, #4294967295
 800b248:	bd38      	pop	{r3, r4, r5, pc}
 800b24a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b24c:	b112      	cbz	r2, 800b254 <_raise_r+0x1e>
 800b24e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b252:	b94b      	cbnz	r3, 800b268 <_raise_r+0x32>
 800b254:	4620      	mov	r0, r4
 800b256:	f000 f831 	bl	800b2bc <_getpid_r>
 800b25a:	462a      	mov	r2, r5
 800b25c:	4601      	mov	r1, r0
 800b25e:	4620      	mov	r0, r4
 800b260:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b264:	f000 b818 	b.w	800b298 <_kill_r>
 800b268:	2b01      	cmp	r3, #1
 800b26a:	d00a      	beq.n	800b282 <_raise_r+0x4c>
 800b26c:	1c59      	adds	r1, r3, #1
 800b26e:	d103      	bne.n	800b278 <_raise_r+0x42>
 800b270:	2316      	movs	r3, #22
 800b272:	6003      	str	r3, [r0, #0]
 800b274:	2001      	movs	r0, #1
 800b276:	e7e7      	b.n	800b248 <_raise_r+0x12>
 800b278:	2400      	movs	r4, #0
 800b27a:	4628      	mov	r0, r5
 800b27c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b280:	4798      	blx	r3
 800b282:	2000      	movs	r0, #0
 800b284:	e7e0      	b.n	800b248 <_raise_r+0x12>
	...

0800b288 <raise>:
 800b288:	4b02      	ldr	r3, [pc, #8]	; (800b294 <raise+0xc>)
 800b28a:	4601      	mov	r1, r0
 800b28c:	6818      	ldr	r0, [r3, #0]
 800b28e:	f7ff bfd2 	b.w	800b236 <_raise_r>
 800b292:	bf00      	nop
 800b294:	20000190 	.word	0x20000190

0800b298 <_kill_r>:
 800b298:	b538      	push	{r3, r4, r5, lr}
 800b29a:	2300      	movs	r3, #0
 800b29c:	4d06      	ldr	r5, [pc, #24]	; (800b2b8 <_kill_r+0x20>)
 800b29e:	4604      	mov	r4, r0
 800b2a0:	4608      	mov	r0, r1
 800b2a2:	4611      	mov	r1, r2
 800b2a4:	602b      	str	r3, [r5, #0]
 800b2a6:	f7f6 fe01 	bl	8001eac <_kill>
 800b2aa:	1c43      	adds	r3, r0, #1
 800b2ac:	d102      	bne.n	800b2b4 <_kill_r+0x1c>
 800b2ae:	682b      	ldr	r3, [r5, #0]
 800b2b0:	b103      	cbz	r3, 800b2b4 <_kill_r+0x1c>
 800b2b2:	6023      	str	r3, [r4, #0]
 800b2b4:	bd38      	pop	{r3, r4, r5, pc}
 800b2b6:	bf00      	nop
 800b2b8:	20002688 	.word	0x20002688

0800b2bc <_getpid_r>:
 800b2bc:	f7f6 bdf4 	b.w	8001ea8 <_getpid>

0800b2c0 <__sread>:
 800b2c0:	b510      	push	{r4, lr}
 800b2c2:	460c      	mov	r4, r1
 800b2c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2c8:	f000 f89c 	bl	800b404 <_read_r>
 800b2cc:	2800      	cmp	r0, #0
 800b2ce:	bfab      	itete	ge
 800b2d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b2d2:	89a3      	ldrhlt	r3, [r4, #12]
 800b2d4:	181b      	addge	r3, r3, r0
 800b2d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b2da:	bfac      	ite	ge
 800b2dc:	6563      	strge	r3, [r4, #84]	; 0x54
 800b2de:	81a3      	strhlt	r3, [r4, #12]
 800b2e0:	bd10      	pop	{r4, pc}

0800b2e2 <__swrite>:
 800b2e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2e6:	461f      	mov	r7, r3
 800b2e8:	898b      	ldrh	r3, [r1, #12]
 800b2ea:	4605      	mov	r5, r0
 800b2ec:	05db      	lsls	r3, r3, #23
 800b2ee:	460c      	mov	r4, r1
 800b2f0:	4616      	mov	r6, r2
 800b2f2:	d505      	bpl.n	800b300 <__swrite+0x1e>
 800b2f4:	2302      	movs	r3, #2
 800b2f6:	2200      	movs	r2, #0
 800b2f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2fc:	f000 f868 	bl	800b3d0 <_lseek_r>
 800b300:	89a3      	ldrh	r3, [r4, #12]
 800b302:	4632      	mov	r2, r6
 800b304:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b308:	81a3      	strh	r3, [r4, #12]
 800b30a:	4628      	mov	r0, r5
 800b30c:	463b      	mov	r3, r7
 800b30e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b312:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b316:	f000 b817 	b.w	800b348 <_write_r>

0800b31a <__sseek>:
 800b31a:	b510      	push	{r4, lr}
 800b31c:	460c      	mov	r4, r1
 800b31e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b322:	f000 f855 	bl	800b3d0 <_lseek_r>
 800b326:	1c43      	adds	r3, r0, #1
 800b328:	89a3      	ldrh	r3, [r4, #12]
 800b32a:	bf15      	itete	ne
 800b32c:	6560      	strne	r0, [r4, #84]	; 0x54
 800b32e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b332:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b336:	81a3      	strheq	r3, [r4, #12]
 800b338:	bf18      	it	ne
 800b33a:	81a3      	strhne	r3, [r4, #12]
 800b33c:	bd10      	pop	{r4, pc}

0800b33e <__sclose>:
 800b33e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b342:	f000 b813 	b.w	800b36c <_close_r>
	...

0800b348 <_write_r>:
 800b348:	b538      	push	{r3, r4, r5, lr}
 800b34a:	4604      	mov	r4, r0
 800b34c:	4608      	mov	r0, r1
 800b34e:	4611      	mov	r1, r2
 800b350:	2200      	movs	r2, #0
 800b352:	4d05      	ldr	r5, [pc, #20]	; (800b368 <_write_r+0x20>)
 800b354:	602a      	str	r2, [r5, #0]
 800b356:	461a      	mov	r2, r3
 800b358:	f7f6 fdc6 	bl	8001ee8 <_write>
 800b35c:	1c43      	adds	r3, r0, #1
 800b35e:	d102      	bne.n	800b366 <_write_r+0x1e>
 800b360:	682b      	ldr	r3, [r5, #0]
 800b362:	b103      	cbz	r3, 800b366 <_write_r+0x1e>
 800b364:	6023      	str	r3, [r4, #0]
 800b366:	bd38      	pop	{r3, r4, r5, pc}
 800b368:	20002688 	.word	0x20002688

0800b36c <_close_r>:
 800b36c:	b538      	push	{r3, r4, r5, lr}
 800b36e:	2300      	movs	r3, #0
 800b370:	4d05      	ldr	r5, [pc, #20]	; (800b388 <_close_r+0x1c>)
 800b372:	4604      	mov	r4, r0
 800b374:	4608      	mov	r0, r1
 800b376:	602b      	str	r3, [r5, #0]
 800b378:	f7f6 fdc4 	bl	8001f04 <_close>
 800b37c:	1c43      	adds	r3, r0, #1
 800b37e:	d102      	bne.n	800b386 <_close_r+0x1a>
 800b380:	682b      	ldr	r3, [r5, #0]
 800b382:	b103      	cbz	r3, 800b386 <_close_r+0x1a>
 800b384:	6023      	str	r3, [r4, #0]
 800b386:	bd38      	pop	{r3, r4, r5, pc}
 800b388:	20002688 	.word	0x20002688

0800b38c <_fstat_r>:
 800b38c:	b538      	push	{r3, r4, r5, lr}
 800b38e:	2300      	movs	r3, #0
 800b390:	4d06      	ldr	r5, [pc, #24]	; (800b3ac <_fstat_r+0x20>)
 800b392:	4604      	mov	r4, r0
 800b394:	4608      	mov	r0, r1
 800b396:	4611      	mov	r1, r2
 800b398:	602b      	str	r3, [r5, #0]
 800b39a:	f7f6 fdb6 	bl	8001f0a <_fstat>
 800b39e:	1c43      	adds	r3, r0, #1
 800b3a0:	d102      	bne.n	800b3a8 <_fstat_r+0x1c>
 800b3a2:	682b      	ldr	r3, [r5, #0]
 800b3a4:	b103      	cbz	r3, 800b3a8 <_fstat_r+0x1c>
 800b3a6:	6023      	str	r3, [r4, #0]
 800b3a8:	bd38      	pop	{r3, r4, r5, pc}
 800b3aa:	bf00      	nop
 800b3ac:	20002688 	.word	0x20002688

0800b3b0 <_isatty_r>:
 800b3b0:	b538      	push	{r3, r4, r5, lr}
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	4d05      	ldr	r5, [pc, #20]	; (800b3cc <_isatty_r+0x1c>)
 800b3b6:	4604      	mov	r4, r0
 800b3b8:	4608      	mov	r0, r1
 800b3ba:	602b      	str	r3, [r5, #0]
 800b3bc:	f7f6 fdaa 	bl	8001f14 <_isatty>
 800b3c0:	1c43      	adds	r3, r0, #1
 800b3c2:	d102      	bne.n	800b3ca <_isatty_r+0x1a>
 800b3c4:	682b      	ldr	r3, [r5, #0]
 800b3c6:	b103      	cbz	r3, 800b3ca <_isatty_r+0x1a>
 800b3c8:	6023      	str	r3, [r4, #0]
 800b3ca:	bd38      	pop	{r3, r4, r5, pc}
 800b3cc:	20002688 	.word	0x20002688

0800b3d0 <_lseek_r>:
 800b3d0:	b538      	push	{r3, r4, r5, lr}
 800b3d2:	4604      	mov	r4, r0
 800b3d4:	4608      	mov	r0, r1
 800b3d6:	4611      	mov	r1, r2
 800b3d8:	2200      	movs	r2, #0
 800b3da:	4d05      	ldr	r5, [pc, #20]	; (800b3f0 <_lseek_r+0x20>)
 800b3dc:	602a      	str	r2, [r5, #0]
 800b3de:	461a      	mov	r2, r3
 800b3e0:	f7f6 fd9a 	bl	8001f18 <_lseek>
 800b3e4:	1c43      	adds	r3, r0, #1
 800b3e6:	d102      	bne.n	800b3ee <_lseek_r+0x1e>
 800b3e8:	682b      	ldr	r3, [r5, #0]
 800b3ea:	b103      	cbz	r3, 800b3ee <_lseek_r+0x1e>
 800b3ec:	6023      	str	r3, [r4, #0]
 800b3ee:	bd38      	pop	{r3, r4, r5, pc}
 800b3f0:	20002688 	.word	0x20002688

0800b3f4 <_malloc_usable_size_r>:
 800b3f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b3f8:	1f18      	subs	r0, r3, #4
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	bfbc      	itt	lt
 800b3fe:	580b      	ldrlt	r3, [r1, r0]
 800b400:	18c0      	addlt	r0, r0, r3
 800b402:	4770      	bx	lr

0800b404 <_read_r>:
 800b404:	b538      	push	{r3, r4, r5, lr}
 800b406:	4604      	mov	r4, r0
 800b408:	4608      	mov	r0, r1
 800b40a:	4611      	mov	r1, r2
 800b40c:	2200      	movs	r2, #0
 800b40e:	4d05      	ldr	r5, [pc, #20]	; (800b424 <_read_r+0x20>)
 800b410:	602a      	str	r2, [r5, #0]
 800b412:	461a      	mov	r2, r3
 800b414:	f7f6 fd58 	bl	8001ec8 <_read>
 800b418:	1c43      	adds	r3, r0, #1
 800b41a:	d102      	bne.n	800b422 <_read_r+0x1e>
 800b41c:	682b      	ldr	r3, [r5, #0]
 800b41e:	b103      	cbz	r3, 800b422 <_read_r+0x1e>
 800b420:	6023      	str	r3, [r4, #0]
 800b422:	bd38      	pop	{r3, r4, r5, pc}
 800b424:	20002688 	.word	0x20002688

0800b428 <_init>:
 800b428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b42a:	bf00      	nop
 800b42c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b42e:	bc08      	pop	{r3}
 800b430:	469e      	mov	lr, r3
 800b432:	4770      	bx	lr

0800b434 <_fini>:
 800b434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b436:	bf00      	nop
 800b438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b43a:	bc08      	pop	{r3}
 800b43c:	469e      	mov	lr, r3
 800b43e:	4770      	bx	lr
