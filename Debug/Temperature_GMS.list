
Temperature_GMS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af88  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007f0  0800b098  0800b098  0001b098  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b888  0800b888  00020364  2**0
                  CONTENTS
  4 .ARM          00000000  0800b888  0800b888  00020364  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b888  0800b888  00020364  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b888  0800b888  0001b888  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b88c  0800b88c  0001b88c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000364  20000000  0800b890  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000229c  20000368  0800bbf4  00020368  2**3
                  ALLOC
 10 ._user_heap_stack 00001804  20002604  0800bbf4  00022604  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020364  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ec4d  00000000  00000000  0002038d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005459  00000000  00000000  0003efda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00014652  00000000  00000000  00044433  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014c8  00000000  00000000  00058a88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000019d8  00000000  00000000  00059f50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d552  00000000  00000000  0005b928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002257c  00000000  00000000  00078e7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00091f8c  00000000  00000000  0009b3f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012d382  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004a48  00000000  00000000  0012d3d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000368 	.word	0x20000368
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b080 	.word	0x0800b080

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000036c 	.word	0x2000036c
 800014c:	0800b080 	.word	0x0800b080

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2uiz>:
 8000a9c:	004a      	lsls	r2, r1, #1
 8000a9e:	d211      	bcs.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d211      	bcs.n	8000aca <__aeabi_d2uiz+0x2e>
 8000aa6:	d50d      	bpl.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d40e      	bmi.n	8000ad0 <__aeabi_d2uiz+0x34>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d102      	bne.n	8000ad6 <__aeabi_d2uiz+0x3a>
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	4770      	bx	lr
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	4770      	bx	lr

08000adc <__aeabi_d2lz>:
 8000adc:	b538      	push	{r3, r4, r5, lr}
 8000ade:	4605      	mov	r5, r0
 8000ae0:	460c      	mov	r4, r1
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	4628      	mov	r0, r5
 8000ae8:	4621      	mov	r1, r4
 8000aea:	f7ff ff71 	bl	80009d0 <__aeabi_dcmplt>
 8000aee:	b928      	cbnz	r0, 8000afc <__aeabi_d2lz+0x20>
 8000af0:	4628      	mov	r0, r5
 8000af2:	4621      	mov	r1, r4
 8000af4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000af8:	f000 b80a 	b.w	8000b10 <__aeabi_d2ulz>
 8000afc:	4628      	mov	r0, r5
 8000afe:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000b02:	f000 f805 	bl	8000b10 <__aeabi_d2ulz>
 8000b06:	4240      	negs	r0, r0
 8000b08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b0c:	bd38      	pop	{r3, r4, r5, pc}
 8000b0e:	bf00      	nop

08000b10 <__aeabi_d2ulz>:
 8000b10:	b5d0      	push	{r4, r6, r7, lr}
 8000b12:	2200      	movs	r2, #0
 8000b14:	4b0b      	ldr	r3, [pc, #44]	; (8000b44 <__aeabi_d2ulz+0x34>)
 8000b16:	4606      	mov	r6, r0
 8000b18:	460f      	mov	r7, r1
 8000b1a:	f7ff fce7 	bl	80004ec <__aeabi_dmul>
 8000b1e:	f7ff ffbd 	bl	8000a9c <__aeabi_d2uiz>
 8000b22:	4604      	mov	r4, r0
 8000b24:	f7ff fc68 	bl	80003f8 <__aeabi_ui2d>
 8000b28:	2200      	movs	r2, #0
 8000b2a:	4b07      	ldr	r3, [pc, #28]	; (8000b48 <__aeabi_d2ulz+0x38>)
 8000b2c:	f7ff fcde 	bl	80004ec <__aeabi_dmul>
 8000b30:	4602      	mov	r2, r0
 8000b32:	460b      	mov	r3, r1
 8000b34:	4630      	mov	r0, r6
 8000b36:	4639      	mov	r1, r7
 8000b38:	f7ff fb20 	bl	800017c <__aeabi_dsub>
 8000b3c:	f7ff ffae 	bl	8000a9c <__aeabi_d2uiz>
 8000b40:	4621      	mov	r1, r4
 8000b42:	bdd0      	pop	{r4, r6, r7, pc}
 8000b44:	3df00000 	.word	0x3df00000
 8000b48:	41f00000 	.word	0x41f00000

08000b4c <set_baudrate>:
#include "usart.h"



static void set_baudrate(uint32_t baudrate)
{
 8000b4c:	b508      	push	{r3, lr}
	  huart2.Instance = USART2;
 8000b4e:	4b0a      	ldr	r3, [pc, #40]	; (8000b78 <set_baudrate+0x2c>)
 8000b50:	4a0a      	ldr	r2, [pc, #40]	; (8000b7c <set_baudrate+0x30>)
 8000b52:	601a      	str	r2, [r3, #0]
	  huart2.Init.BaudRate = baudrate;
 8000b54:	6058      	str	r0, [r3, #4]
	  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b56:	2200      	movs	r2, #0
 8000b58:	609a      	str	r2, [r3, #8]
	  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b5a:	60da      	str	r2, [r3, #12]
	  huart2.Init.Parity = UART_PARITY_NONE;
 8000b5c:	611a      	str	r2, [r3, #16]
	  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b5e:	210c      	movs	r1, #12
 8000b60:	6159      	str	r1, [r3, #20]
	  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b62:	619a      	str	r2, [r3, #24]
	  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b64:	61da      	str	r2, [r3, #28]
	  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 8000b66:	4618      	mov	r0, r3
 8000b68:	f003 fccf 	bl	800450a <HAL_HalfDuplex_Init>
 8000b6c:	b900      	cbnz	r0, 8000b70 <set_baudrate+0x24>
	  {
	    Error_Handler();
	  }
}
 8000b6e:	bd08      	pop	{r3, pc}
	    Error_Handler();
 8000b70:	f000 fe5a 	bl	8001828 <Error_Handler>
}
 8000b74:	e7fb      	b.n	8000b6e <set_baudrate+0x22>
 8000b76:	bf00      	nop
 8000b78:	200017b8 	.word	0x200017b8
 8000b7c:	40004400 	.word	0x40004400

08000b80 <wire_reset>:


HAL_StatusTypeDef wire_reset(void)
{
 8000b80:	b510      	push	{r4, lr}
 8000b82:	b082      	sub	sp, #8
	uint8_t data_out = 0xF0;
 8000b84:	23f0      	movs	r3, #240	; 0xf0
 8000b86:	f88d 3007 	strb.w	r3, [sp, #7]
	uint8_t data_in = 0;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	f88d 3006 	strb.w	r3, [sp, #6]

	set_baudrate(9600);
 8000b90:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8000b94:	f7ff ffda 	bl	8000b4c <set_baudrate>
	HAL_UART_Transmit(&UART, &data_out, 1, HAL_MAX_DELAY);
 8000b98:	4c0e      	ldr	r4, [pc, #56]	; (8000bd4 <wire_reset+0x54>)
 8000b9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	f10d 0107 	add.w	r1, sp, #7
 8000ba4:	4620      	mov	r0, r4
 8000ba6:	f003 fce5 	bl	8004574 <HAL_UART_Transmit>
	HAL_UART_Receive(&UART, &data_in, 1, HAL_MAX_DELAY);
 8000baa:	f04f 33ff 	mov.w	r3, #4294967295
 8000bae:	2201      	movs	r2, #1
 8000bb0:	f10d 0106 	add.w	r1, sp, #6
 8000bb4:	4620      	mov	r0, r4
 8000bb6:	f003 fd4f 	bl	8004658 <HAL_UART_Receive>
	set_baudrate(115200);
 8000bba:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 8000bbe:	f7ff ffc5 	bl	8000b4c <set_baudrate>

	if (data_in != 0xF0)
 8000bc2:	f89d 0006 	ldrb.w	r0, [sp, #6]
		return HAL_OK;
	else
		return HAL_ERROR;
}
 8000bc6:	28f0      	cmp	r0, #240	; 0xf0
 8000bc8:	bf14      	ite	ne
 8000bca:	2000      	movne	r0, #0
 8000bcc:	2001      	moveq	r0, #1
 8000bce:	b002      	add	sp, #8
 8000bd0:	bd10      	pop	{r4, pc}
 8000bd2:	bf00      	nop
 8000bd4:	200017b8 	.word	0x200017b8

08000bd8 <wire_read>:

	return data_in & 0x01;
}

uint8_t wire_read(void)
{
 8000bd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000bdc:	b082      	sub	sp, #8
 8000bde:	2508      	movs	r5, #8
  uint8_t value = 0;
 8000be0:	2400      	movs	r4, #0
	if(USARTn -> SR & (1<<5))
 8000be2:	f8df 805c 	ldr.w	r8, [pc, #92]	; 8000c40 <wire_read+0x68>
	HAL_UART_Transmit(&UART, &data_out, 1, HAL_MAX_DELAY);
 8000be6:	4f17      	ldr	r7, [pc, #92]	; (8000c44 <wire_read+0x6c>)
 8000be8:	f04f 36ff 	mov.w	r6, #4294967295
  int i;
  for (i = 0; i < 8; i++)
  {
    value >>= 1;
 8000bec:	0864      	lsrs	r4, r4, #1
	uint8_t data_out = 0xff;
 8000bee:	23ff      	movs	r3, #255	; 0xff
 8000bf0:	f88d 3006 	strb.w	r3, [sp, #6]
	uint8_t data_in = 0x0;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	f88d 3007 	strb.w	r3, [sp, #7]
	if(USARTn -> SR & (1<<5))
 8000bfa:	f8d8 3000 	ldr.w	r3, [r8]
 8000bfe:	f013 0f20 	tst.w	r3, #32
		USARTn -> DR;
 8000c02:	bf18      	it	ne
 8000c04:	f8d8 3004 	ldrne.w	r3, [r8, #4]
	HAL_UART_Transmit(&UART, &data_out, 1, HAL_MAX_DELAY);
 8000c08:	4633      	mov	r3, r6
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	f10d 0106 	add.w	r1, sp, #6
 8000c10:	4638      	mov	r0, r7
 8000c12:	f003 fcaf 	bl	8004574 <HAL_UART_Transmit>
	HAL_UART_Receive(&UART, &data_in, 1, HAL_MAX_DELAY);
 8000c16:	4633      	mov	r3, r6
 8000c18:	2201      	movs	r2, #1
 8000c1a:	f10d 0107 	add.w	r1, sp, #7
 8000c1e:	4638      	mov	r0, r7
 8000c20:	f003 fd1a 	bl	8004658 <HAL_UART_Receive>
	return data_in & 0x01;
 8000c24:	f89d 3007 	ldrb.w	r3, [sp, #7]
    if (read_bit())
 8000c28:	f013 0f01 	tst.w	r3, #1
      value |= 0x80;
 8000c2c:	bf18      	it	ne
 8000c2e:	f044 0480 	orrne.w	r4, r4, #128	; 0x80
  for (i = 0; i < 8; i++)
 8000c32:	3d01      	subs	r5, #1
 8000c34:	d1da      	bne.n	8000bec <wire_read+0x14>
  }
  return value;
}
 8000c36:	4620      	mov	r0, r4
 8000c38:	b002      	add	sp, #8
 8000c3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000c3e:	bf00      	nop
 8000c40:	40004400 	.word	0x40004400
 8000c44:	200017b8 	.word	0x200017b8

08000c48 <wire_write>:
    HAL_UART_Transmit(&UART, &data_out, 1, HAL_MAX_DELAY);
  }
}

void wire_write(uint8_t byte)
{
 8000c48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	4604      	mov	r4, r0
 8000c4e:	2508      	movs	r5, #8
    uint8_t data_out = 0x0;
 8000c50:	2700      	movs	r7, #0
    HAL_UART_Transmit(&UART, &data_out, 1, HAL_MAX_DELAY);
 8000c52:	4e0b      	ldr	r6, [pc, #44]	; (8000c80 <wire_write+0x38>)
  if (value)
 8000c54:	f014 0f01 	tst.w	r4, #1
    uint8_t data_out = 0xff;
 8000c58:	bf1a      	itte	ne
 8000c5a:	23ff      	movne	r3, #255	; 0xff
 8000c5c:	f88d 3007 	strbne.w	r3, [sp, #7]
    uint8_t data_out = 0x0;
 8000c60:	f88d 7007 	strbeq.w	r7, [sp, #7]
    HAL_UART_Transmit(&UART, &data_out, 1, HAL_MAX_DELAY);
 8000c64:	f04f 33ff 	mov.w	r3, #4294967295
 8000c68:	2201      	movs	r2, #1
 8000c6a:	f10d 0107 	add.w	r1, sp, #7
 8000c6e:	4630      	mov	r0, r6
 8000c70:	f003 fc80 	bl	8004574 <HAL_UART_Transmit>
  int i;
  for (i = 0; i < 8; i++) {
    write_bit(byte & 0x01);
    byte >>= 1;
 8000c74:	0864      	lsrs	r4, r4, #1
  for (i = 0; i < 8; i++) {
 8000c76:	3d01      	subs	r5, #1
 8000c78:	d1ec      	bne.n	8000c54 <wire_write+0xc>
  }
}
 8000c7a:	b003      	add	sp, #12
 8000c7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	200017b8 	.word	0x200017b8

08000c84 <wire_crc>:
uint8_t wire_crc(const uint8_t* data, int len)
{
  int i;
    uint8_t crc = 0;

    for (i = 0; i < len; i++)
 8000c84:	2900      	cmp	r1, #0
 8000c86:	dd19      	ble.n	8000cbc <wire_crc+0x38>
{
 8000c88:	b500      	push	{lr}
 8000c8a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c8e:	eb0c 0e01 	add.w	lr, ip, r1
    uint8_t crc = 0;
 8000c92:	2000      	movs	r0, #0
 8000c94:	e001      	b.n	8000c9a <wire_crc+0x16>
    for (i = 0; i < len; i++)
 8000c96:	45f4      	cmp	ip, lr
 8000c98:	d012      	beq.n	8000cc0 <wire_crc+0x3c>
      crc = byte_crc(crc, data[i]);
 8000c9a:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
 8000c9e:	2208      	movs	r2, #8
    uint8_t b = crc ^ byte;
 8000ca0:	ea80 0301 	eor.w	r3, r0, r1
    if (b & 0x01)
 8000ca4:	f013 0f01 	tst.w	r3, #1
 8000ca8:	ea4f 0050 	mov.w	r0, r0, lsr #1
      crc ^= 0x8c;
 8000cac:	bf1c      	itt	ne
 8000cae:	f080 008c 	eorne.w	r0, r0, #140	; 0x8c
 8000cb2:	b2c0      	uxtbne	r0, r0
    byte >>= 1;
 8000cb4:	0849      	lsrs	r1, r1, #1
  for (i = 0; i < 8; i++) {
 8000cb6:	3a01      	subs	r2, #1
 8000cb8:	d1f2      	bne.n	8000ca0 <wire_crc+0x1c>
 8000cba:	e7ec      	b.n	8000c96 <wire_crc+0x12>
    uint8_t crc = 0;
 8000cbc:	2000      	movs	r0, #0

    return crc;
}
 8000cbe:	4770      	bx	lr
 8000cc0:	f85d fb04 	ldr.w	pc, [sp], #4

08000cc4 <GetPage>:
 * Some STM32F103C8 have 64 KB FLASH Memory, so I guess they have Page 0 to Page 63 only.
 */

/* FLASH_PAGE_SIZE should be able to get the size of the Page according to the controller */
static uint32_t GetPage(uint32_t Address)
{
 8000cc4:	4602      	mov	r2, r0
 8000cc6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
  for (int indx=0; indx<128; indx++)
 8000cca:	4907      	ldr	r1, [pc, #28]	; (8000ce8 <GetPage+0x24>)
 8000ccc:	e001      	b.n	8000cd2 <GetPage+0xe>
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d007      	beq.n	8000ce2 <GetPage+0x1e>
  {
	  if((Address < (0x08000000 + (FLASH_PAGE_SIZE *(indx+1))) ) && (Address >= (0x08000000 + FLASH_PAGE_SIZE*indx)))
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	d2f8      	bcs.n	8000cce <GetPage+0xa>
 8000cdc:	4282      	cmp	r2, r0
 8000cde:	d3f6      	bcc.n	8000cce <GetPage+0xa>
		  return (0x08000000 + FLASH_PAGE_SIZE*indx);
	  }
  }

  return 0;
}
 8000ce0:	4770      	bx	lr
  return 0;
 8000ce2:	2000      	movs	r0, #0
 8000ce4:	e7fc      	b.n	8000ce0 <GetPage+0x1c>
 8000ce6:	bf00      	nop
 8000ce8:	08020000 	.word	0x08020000

08000cec <Flash_Write_Data>:
   float float_variable =  thing.a;
   return float_variable;
}

uint32_t Flash_Write_Data (uint32_t StartPageAddress, uint32_t *Data, uint16_t numberofwords)
{
 8000cec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000cf0:	b083      	sub	sp, #12
 8000cf2:	4680      	mov	r8, r0
 8000cf4:	460e      	mov	r6, r1
 8000cf6:	4617      	mov	r7, r2
	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t PAGEError;
	int sofar=0;

	  /* Unlock the Flash to enable the flash control register access *************/
	   HAL_FLASH_Unlock();
 8000cf8:	f001 fab6 	bl	8002268 <HAL_FLASH_Unlock>

	   /* Erase the user Flash area*/

	  uint32_t StartPage = GetPage(StartPageAddress);
 8000cfc:	4640      	mov	r0, r8
 8000cfe:	f7ff ffe1 	bl	8000cc4 <GetPage>
 8000d02:	4604      	mov	r4, r0
	  uint32_t EndPageAdress = StartPageAddress + numberofwords*4;
	  uint32_t EndPage = GetPage(EndPageAdress);
 8000d04:	eb08 0087 	add.w	r0, r8, r7, lsl #2
 8000d08:	f7ff ffdc 	bl	8000cc4 <GetPage>
 8000d0c:	4603      	mov	r3, r0

	   /* Fill EraseInit structure*/
	   EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 8000d0e:	4816      	ldr	r0, [pc, #88]	; (8000d68 <Flash_Write_Data+0x7c>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	6002      	str	r2, [r0, #0]
	   EraseInitStruct.PageAddress = StartPage;
 8000d14:	6084      	str	r4, [r0, #8]
	   EraseInitStruct.NbPages     = ((EndPage - StartPage)/FLASH_PAGE_SIZE) +1;
 8000d16:	1b1b      	subs	r3, r3, r4
 8000d18:	0a9b      	lsrs	r3, r3, #10
 8000d1a:	3301      	adds	r3, #1
 8000d1c:	60c3      	str	r3, [r0, #12]

	   if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)
 8000d1e:	a901      	add	r1, sp, #4
 8000d20:	f001 fb64 	bl	80023ec <HAL_FLASHEx_Erase>
 8000d24:	b9c8      	cbnz	r0, 8000d5a <Flash_Write_Data+0x6e>
		  return HAL_FLASH_GetError ();
	   }

	   /* Program the user Flash area word by word*/

	   while (sofar<numberofwords)
 8000d26:	b197      	cbz	r7, 8000d4e <Flash_Write_Data+0x62>
 8000d28:	1f34      	subs	r4, r6, #4
	int sofar=0;
 8000d2a:	2500      	movs	r5, #0
 8000d2c:	eba8 0606 	sub.w	r6, r8, r6
 8000d30:	3604      	adds	r6, #4
	   {
	     if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartPageAddress, Data[sofar]) == HAL_OK)
 8000d32:	46a9      	mov	r9, r5
 8000d34:	f04f 0802 	mov.w	r8, #2
 8000d38:	1931      	adds	r1, r6, r4
 8000d3a:	f854 2f04 	ldr.w	r2, [r4, #4]!
 8000d3e:	464b      	mov	r3, r9
 8000d40:	4640      	mov	r0, r8
 8000d42:	f001 faed 	bl	8002320 <HAL_FLASH_Program>
 8000d46:	b958      	cbnz	r0, 8000d60 <Flash_Write_Data+0x74>
	     {
	    	 StartPageAddress += 4;  // use StartPageAddress += 2 for half word and 8 for double word
	    	 sofar++;
 8000d48:	3501      	adds	r5, #1
	   while (sofar<numberofwords)
 8000d4a:	42af      	cmp	r7, r5
 8000d4c:	d1f4      	bne.n	8000d38 <Flash_Write_Data+0x4c>
	     }
	   }

	   /* Lock the Flash to disable the flash control register access (recommended
	      to protect the FLASH memory against possible unwanted operation) *********/
	   HAL_FLASH_Lock();
 8000d4e:	f001 faa1 	bl	8002294 <HAL_FLASH_Lock>

	   return 0;
 8000d52:	2000      	movs	r0, #0
}
 8000d54:	b003      	add	sp, #12
 8000d56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		  return HAL_FLASH_GetError ();
 8000d5a:	f001 faa5 	bl	80022a8 <HAL_FLASH_GetError>
 8000d5e:	e7f9      	b.n	8000d54 <Flash_Write_Data+0x68>
	    	 return HAL_FLASH_GetError ();
 8000d60:	f001 faa2 	bl	80022a8 <HAL_FLASH_GetError>
 8000d64:	e7f6      	b.n	8000d54 <Flash_Write_Data+0x68>
 8000d66:	bf00      	nop
 8000d68:	20000384 	.word	0x20000384

08000d6c <send_cmd>:
  else
    return HAL_ERROR;
}

static HAL_StatusTypeDef send_cmd(const uint8_t* rom_code, uint8_t cmd)
{
 8000d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d6e:	4605      	mov	r5, r0
 8000d70:	460e      	mov	r6, r1
  int i;

  if (wire_reset() != HAL_OK)
 8000d72:	f7ff ff05 	bl	8000b80 <wire_reset>
 8000d76:	b9a8      	cbnz	r0, 8000da4 <send_cmd+0x38>
 8000d78:	4607      	mov	r7, r0
    return HAL_ERROR;

  if (!rom_code) {
 8000d7a:	b17d      	cbz	r5, 8000d9c <send_cmd+0x30>
    wire_write(DS18B20_SKIP_ROM);
  } else {
    wire_write(DS18B20_MATCH_ROM);
 8000d7c:	2055      	movs	r0, #85	; 0x55
 8000d7e:	f7ff ff63 	bl	8000c48 <wire_write>
    for (i = 0; i < DS18B20_ROM_CODE_SIZE; i++)
 8000d82:	1e6c      	subs	r4, r5, #1
 8000d84:	3507      	adds	r5, #7
      wire_write(rom_code[i]);
 8000d86:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8000d8a:	f7ff ff5d 	bl	8000c48 <wire_write>
    for (i = 0; i < DS18B20_ROM_CODE_SIZE; i++)
 8000d8e:	42ac      	cmp	r4, r5
 8000d90:	d1f9      	bne.n	8000d86 <send_cmd+0x1a>
  }
  wire_write(cmd);
 8000d92:	4630      	mov	r0, r6
 8000d94:	f7ff ff58 	bl	8000c48 <wire_write>
  return HAL_OK;
}
 8000d98:	4638      	mov	r0, r7
 8000d9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    wire_write(DS18B20_SKIP_ROM);
 8000d9c:	20cc      	movs	r0, #204	; 0xcc
 8000d9e:	f7ff ff53 	bl	8000c48 <wire_write>
 8000da2:	e7f6      	b.n	8000d92 <send_cmd+0x26>
    return HAL_ERROR;
 8000da4:	2701      	movs	r7, #1
 8000da6:	e7f7      	b.n	8000d98 <send_cmd+0x2c>

08000da8 <ds18b20_read_scratchpad>:
{
  return send_cmd(rom_code, DS18B20_CONVERT_T);
}

static HAL_StatusTypeDef ds18b20_read_scratchpad(const uint8_t* rom_code, uint8_t* scratchpad)
{
 8000da8:	b570      	push	{r4, r5, r6, lr}
 8000daa:	460e      	mov	r6, r1
  int i;
  uint8_t crc;

  if (send_cmd(rom_code, DS18B20_READ_SCRATCHPAD) != HAL_OK)
 8000dac:	21be      	movs	r1, #190	; 0xbe
 8000dae:	f7ff ffdd 	bl	8000d6c <send_cmd>
 8000db2:	b988      	cbnz	r0, 8000dd8 <ds18b20_read_scratchpad+0x30>
 8000db4:	1e74      	subs	r4, r6, #1
 8000db6:	f106 0508 	add.w	r5, r6, #8
    return HAL_ERROR;

  for (i = 0; i < DS18B20_SCRATCHPAD_SIZE; i++)
    scratchpad[i] = wire_read();
 8000dba:	f7ff ff0d 	bl	8000bd8 <wire_read>
 8000dbe:	f804 0f01 	strb.w	r0, [r4, #1]!
  for (i = 0; i < DS18B20_SCRATCHPAD_SIZE; i++)
 8000dc2:	42ac      	cmp	r4, r5
 8000dc4:	d1f9      	bne.n	8000dba <ds18b20_read_scratchpad+0x12>

  crc = wire_crc(scratchpad, DS18B20_SCRATCHPAD_SIZE - 1);
 8000dc6:	2108      	movs	r1, #8
 8000dc8:	4630      	mov	r0, r6
 8000dca:	f7ff ff5b 	bl	8000c84 <wire_crc>
  if (scratchpad[DS18B20_SCRATCHPAD_SIZE - 1] == crc)
 8000dce:	7a33      	ldrb	r3, [r6, #8]
    return HAL_ERROR;
 8000dd0:	1a18      	subs	r0, r3, r0
 8000dd2:	bf18      	it	ne
 8000dd4:	2001      	movne	r0, #1
    return HAL_OK;
  else
    return HAL_ERROR;
}
 8000dd6:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8000dd8:	2001      	movs	r0, #1
 8000dda:	e7fc      	b.n	8000dd6 <ds18b20_read_scratchpad+0x2e>

08000ddc <ds18b20_read_address>:
{
 8000ddc:	b570      	push	{r4, r5, r6, lr}
 8000dde:	4605      	mov	r5, r0
  if (wire_reset() != HAL_OK)
 8000de0:	f7ff fece 	bl	8000b80 <wire_reset>
 8000de4:	b108      	cbz	r0, 8000dea <ds18b20_read_address+0xe>
    return HAL_ERROR;
 8000de6:	2001      	movs	r0, #1
}
 8000de8:	bd70      	pop	{r4, r5, r6, pc}
  wire_write(DS18B20_READ_ROM);
 8000dea:	2033      	movs	r0, #51	; 0x33
 8000dec:	f7ff ff2c 	bl	8000c48 <wire_write>
  for (i = 0; i < DS18B20_ROM_CODE_SIZE; i++)
 8000df0:	1e6c      	subs	r4, r5, #1
 8000df2:	1dee      	adds	r6, r5, #7
    rom_code[i] = wire_read();
 8000df4:	f7ff fef0 	bl	8000bd8 <wire_read>
 8000df8:	f804 0f01 	strb.w	r0, [r4, #1]!
  for (i = 0; i < DS18B20_ROM_CODE_SIZE; i++)
 8000dfc:	42b4      	cmp	r4, r6
 8000dfe:	d1f9      	bne.n	8000df4 <ds18b20_read_address+0x18>
  crc = wire_crc(rom_code, DS18B20_ROM_CODE_SIZE - 1);
 8000e00:	2107      	movs	r1, #7
 8000e02:	4628      	mov	r0, r5
 8000e04:	f7ff ff3e 	bl	8000c84 <wire_crc>
  if (rom_code[DS18B20_ROM_CODE_SIZE - 1] == crc)
 8000e08:	79eb      	ldrb	r3, [r5, #7]
    return HAL_ERROR;
 8000e0a:	1a18      	subs	r0, r3, r0
 8000e0c:	bf18      	it	ne
 8000e0e:	2001      	movne	r0, #1
 8000e10:	e7ea      	b.n	8000de8 <ds18b20_read_address+0xc>

08000e12 <ds18b20_start_measure>:
{
 8000e12:	b508      	push	{r3, lr}
  return send_cmd(rom_code, DS18B20_CONVERT_T);
 8000e14:	2144      	movs	r1, #68	; 0x44
 8000e16:	f7ff ffa9 	bl	8000d6c <send_cmd>
}
 8000e1a:	bd08      	pop	{r3, pc}

08000e1c <ds18b20_get_temp_wo_fp>:

  return temp / 16.0f;
}

int32_t ds18b20_get_temp_wo_fp(const uint8_t* rom_code)
{
 8000e1c:	b500      	push	{lr}
 8000e1e:	b085      	sub	sp, #20
  uint8_t scratchpad[DS18B20_SCRATCHPAD_SIZE];
  int16_t temp;

  if (ds18b20_read_scratchpad(rom_code, scratchpad) != HAL_OK)
 8000e20:	a901      	add	r1, sp, #4
 8000e22:	f7ff ffc1 	bl	8000da8 <ds18b20_read_scratchpad>
 8000e26:	b958      	cbnz	r0, 8000e40 <ds18b20_get_temp_wo_fp+0x24>
    return 8500;

  memcpy(&temp, &scratchpad[0], sizeof(temp));

  return (temp * 100) / 16;
 8000e28:	f9bd 0004 	ldrsh.w	r0, [sp, #4]
 8000e2c:	2364      	movs	r3, #100	; 0x64
 8000e2e:	fb03 f000 	mul.w	r0, r3, r0
 8000e32:	2800      	cmp	r0, #0
 8000e34:	bfb8      	it	lt
 8000e36:	300f      	addlt	r0, #15
 8000e38:	1100      	asrs	r0, r0, #4
}
 8000e3a:	b005      	add	sp, #20
 8000e3c:	f85d fb04 	ldr.w	pc, [sp], #4
    return 8500;
 8000e40:	f242 1034 	movw	r0, #8500	; 0x2134
 8000e44:	e7f9      	b.n	8000e3a <ds18b20_get_temp_wo_fp+0x1e>
	...

08000e48 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e4c:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e4e:	2400      	movs	r4, #0
 8000e50:	9404      	str	r4, [sp, #16]
 8000e52:	9405      	str	r4, [sp, #20]
 8000e54:	9406      	str	r4, [sp, #24]
 8000e56:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e58:	4b2e      	ldr	r3, [pc, #184]	; (8000f14 <MX_GPIO_Init+0xcc>)
 8000e5a:	699a      	ldr	r2, [r3, #24]
 8000e5c:	f042 0210 	orr.w	r2, r2, #16
 8000e60:	619a      	str	r2, [r3, #24]
 8000e62:	699a      	ldr	r2, [r3, #24]
 8000e64:	f002 0210 	and.w	r2, r2, #16
 8000e68:	9200      	str	r2, [sp, #0]
 8000e6a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e6c:	699a      	ldr	r2, [r3, #24]
 8000e6e:	f042 0220 	orr.w	r2, r2, #32
 8000e72:	619a      	str	r2, [r3, #24]
 8000e74:	699a      	ldr	r2, [r3, #24]
 8000e76:	f002 0220 	and.w	r2, r2, #32
 8000e7a:	9201      	str	r2, [sp, #4]
 8000e7c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e7e:	699a      	ldr	r2, [r3, #24]
 8000e80:	f042 0204 	orr.w	r2, r2, #4
 8000e84:	619a      	str	r2, [r3, #24]
 8000e86:	699a      	ldr	r2, [r3, #24]
 8000e88:	f002 0204 	and.w	r2, r2, #4
 8000e8c:	9202      	str	r2, [sp, #8]
 8000e8e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e90:	699a      	ldr	r2, [r3, #24]
 8000e92:	f042 0208 	orr.w	r2, r2, #8
 8000e96:	619a      	str	r2, [r3, #24]
 8000e98:	699b      	ldr	r3, [r3, #24]
 8000e9a:	f003 0308 	and.w	r3, r3, #8
 8000e9e:	9303      	str	r3, [sp, #12]
 8000ea0:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000ea2:	f8df 8074 	ldr.w	r8, [pc, #116]	; 8000f18 <MX_GPIO_Init+0xd0>
 8000ea6:	4622      	mov	r2, r4
 8000ea8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000eac:	4640      	mov	r0, r8
 8000eae:	f001 fc3b 	bl	8002728 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GSM_RESET_GPIO_Port, GSM_RESET_Pin, GPIO_PIN_SET);
 8000eb2:	4d1a      	ldr	r5, [pc, #104]	; (8000f1c <MX_GPIO_Init+0xd4>)
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000eba:	4628      	mov	r0, r5
 8000ebc:	f001 fc34 	bl	8002728 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DS18B20_GPIO_Port, DS18B20_Pin, GPIO_PIN_RESET);
 8000ec0:	4622      	mov	r2, r4
 8000ec2:	2180      	movs	r1, #128	; 0x80
 8000ec4:	4628      	mov	r0, r5
 8000ec6:	f001 fc2f 	bl	8002728 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000eca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ece:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed0:	2601      	movs	r6, #1
 8000ed2:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed4:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed6:	2702      	movs	r7, #2
 8000ed8:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000eda:	a904      	add	r1, sp, #16
 8000edc:	4640      	mov	r0, r8
 8000ede:	f001 fae9 	bl	80024b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GSM_RESET_Pin;
 8000ee2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ee6:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000ee8:	2311      	movs	r3, #17
 8000eea:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eec:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eee:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(GSM_RESET_GPIO_Port, &GPIO_InitStruct);
 8000ef0:	a904      	add	r1, sp, #16
 8000ef2:	4628      	mov	r0, r5
 8000ef4:	f001 fade 	bl	80024b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DS18B20_Pin;
 8000ef8:	2380      	movs	r3, #128	; 0x80
 8000efa:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000efc:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efe:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f00:	2303      	movs	r3, #3
 8000f02:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(DS18B20_GPIO_Port, &GPIO_InitStruct);
 8000f04:	a904      	add	r1, sp, #16
 8000f06:	4628      	mov	r0, r5
 8000f08:	f001 fad4 	bl	80024b4 <HAL_GPIO_Init>

}
 8000f0c:	b008      	add	sp, #32
 8000f0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000f12:	bf00      	nop
 8000f14:	40021000 	.word	0x40021000
 8000f18:	40011000 	.word	0x40011000
 8000f1c:	40010c00 	.word	0x40010c00

08000f20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f20:	b500      	push	{lr}
 8000f22:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f24:	2300      	movs	r3, #0
 8000f26:	930c      	str	r3, [sp, #48]	; 0x30
 8000f28:	930d      	str	r3, [sp, #52]	; 0x34
 8000f2a:	930f      	str	r3, [sp, #60]	; 0x3c
 8000f2c:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f2e:	9305      	str	r3, [sp, #20]
 8000f30:	9306      	str	r3, [sp, #24]
 8000f32:	9307      	str	r3, [sp, #28]
 8000f34:	9308      	str	r3, [sp, #32]
 8000f36:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f38:	9301      	str	r3, [sp, #4]
 8000f3a:	9302      	str	r3, [sp, #8]
 8000f3c:	9303      	str	r3, [sp, #12]
 8000f3e:	9304      	str	r3, [sp, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f40:	2201      	movs	r2, #1
 8000f42:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f44:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f48:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f4a:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f4c:	2202      	movs	r2, #2
 8000f4e:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f50:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000f52:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000f56:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f58:	a80a      	add	r0, sp, #40	; 0x28
 8000f5a:	f002 fc07 	bl	800376c <HAL_RCC_OscConfig>
 8000f5e:	b9c0      	cbnz	r0, 8000f92 <SystemClock_Config+0x72>
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f60:	230f      	movs	r3, #15
 8000f62:	9305      	str	r3, [sp, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f64:	2102      	movs	r1, #2
 8000f66:	9106      	str	r1, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f6c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f70:	9208      	str	r2, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f72:	9309      	str	r3, [sp, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f74:	a805      	add	r0, sp, #20
 8000f76:	f002 fe47 	bl	8003c08 <HAL_RCC_ClockConfig>
 8000f7a:	b960      	cbnz	r0, 8000f96 <SystemClock_Config+0x76>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000f7c:	2310      	movs	r3, #16
 8000f7e:	9301      	str	r3, [sp, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000f80:	2300      	movs	r3, #0
 8000f82:	9304      	str	r3, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f84:	a801      	add	r0, sp, #4
 8000f86:	f002 ff17 	bl	8003db8 <HAL_RCCEx_PeriphCLKConfig>
 8000f8a:	b930      	cbnz	r0, 8000f9a <SystemClock_Config+0x7a>
  {
    Error_Handler();
  }
}
 8000f8c:	b015      	add	sp, #84	; 0x54
 8000f8e:	f85d fb04 	ldr.w	pc, [sp], #4
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f92:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f94:	e7fe      	b.n	8000f94 <SystemClock_Config+0x74>
 8000f96:	b672      	cpsid	i
 8000f98:	e7fe      	b.n	8000f98 <SystemClock_Config+0x78>
 8000f9a:	b672      	cpsid	i
 8000f9c:	e7fe      	b.n	8000f9c <SystemClock_Config+0x7c>
	...

08000fa0 <HAL_UART_RxCpltCallback>:
{
 8000fa0:	b508      	push	{r3, lr}
	if(huart->Instance == USART1)
 8000fa2:	6802      	ldr	r2, [r0, #0]
 8000fa4:	4b10      	ldr	r3, [pc, #64]	; (8000fe8 <HAL_UART_RxCpltCallback+0x48>)
 8000fa6:	429a      	cmp	r2, r3
 8000fa8:	d000      	beq.n	8000fac <HAL_UART_RxCpltCallback+0xc>
}
 8000faa:	bd08      	pop	{r3, pc}
		GSM.LastTickReceive = HAL_GetTick();
 8000fac:	f001 f852 	bl	8002054 <HAL_GetTick>
 8000fb0:	4b0e      	ldr	r3, [pc, #56]	; (8000fec <HAL_UART_RxCpltCallback+0x4c>)
 8000fb2:	f8c3 0210 	str.w	r0, [r3, #528]	; 0x210
		if(ReceiveTmp != 0xd)
 8000fb6:	4b0e      	ldr	r3, [pc, #56]	; (8000ff0 <HAL_UART_RxCpltCallback+0x50>)
 8000fb8:	7819      	ldrb	r1, [r3, #0]
 8000fba:	290d      	cmp	r1, #13
 8000fbc:	d105      	bne.n	8000fca <HAL_UART_RxCpltCallback+0x2a>
		HAL_UART_Receive_IT(&huart1, &ReceiveTmp, 1);
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	490b      	ldr	r1, [pc, #44]	; (8000ff0 <HAL_UART_RxCpltCallback+0x50>)
 8000fc2:	480c      	ldr	r0, [pc, #48]	; (8000ff4 <HAL_UART_RxCpltCallback+0x54>)
 8000fc4:	f003 fdaf 	bl	8004b26 <HAL_UART_Receive_IT>
}
 8000fc8:	e7ef      	b.n	8000faa <HAL_UART_RxCpltCallback+0xa>
			if (RB_OK == Ring_Buffer_Write(&ReceiveBuffer, ReceiveTmp))
 8000fca:	480b      	ldr	r0, [pc, #44]	; (8000ff8 <HAL_UART_RxCpltCallback+0x58>)
 8000fcc:	f000 fda3 	bl	8001b16 <Ring_Buffer_Write>
 8000fd0:	2800      	cmp	r0, #0
 8000fd2:	d1f4      	bne.n	8000fbe <HAL_UART_RxCpltCallback+0x1e>
				if(ReceiveTmp == ENDLINE)
 8000fd4:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <HAL_UART_RxCpltCallback+0x50>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	2b0a      	cmp	r3, #10
 8000fda:	d1f0      	bne.n	8000fbe <HAL_UART_RxCpltCallback+0x1e>
					LineCounter++;
 8000fdc:	4a07      	ldr	r2, [pc, #28]	; (8000ffc <HAL_UART_RxCpltCallback+0x5c>)
 8000fde:	7813      	ldrb	r3, [r2, #0]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	7013      	strb	r3, [r2, #0]
 8000fe4:	e7eb      	b.n	8000fbe <HAL_UART_RxCpltCallback+0x1e>
 8000fe6:	bf00      	nop
 8000fe8:	40013800 	.word	0x40013800
 8000fec:	20000f00 	.word	0x20000f00
 8000ff0:	20001328 	.word	0x20001328
 8000ff4:	20001774 	.word	0x20001774
 8000ff8:	20001124 	.word	0x20001124
 8000ffc:	20001120 	.word	0x20001120

08001000 <HAL_UART_TxCpltCallback>:
	*Uart1isBusyPtr = 0;
 8001000:	4b02      	ldr	r3, [pc, #8]	; (800100c <HAL_UART_TxCpltCallback+0xc>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	2200      	movs	r2, #0
 8001006:	701a      	strb	r2, [r3, #0]
}
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	20000004 	.word	0x20000004

08001010 <HAL_TIM_PeriodElapsedCallback>:
	if(htim->Instance == TIM3)
 8001010:	6802      	ldr	r2, [r0, #0]
 8001012:	4b2e      	ldr	r3, [pc, #184]	; (80010cc <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001014:	429a      	cmp	r2, r3
 8001016:	d000      	beq.n	800101a <HAL_TIM_PeriodElapsedCallback+0xa>
 8001018:	4770      	bx	lr
{
 800101a:	b510      	push	{r4, lr}
 800101c:	b090      	sub	sp, #64	; 0x40
		timPeriodCounter++;
 800101e:	4a2c      	ldr	r2, [pc, #176]	; (80010d0 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001020:	7813      	ldrb	r3, [r2, #0]
 8001022:	3301      	adds	r3, #1
 8001024:	7013      	strb	r3, [r2, #0]
		Temperature100ToString(temperature, TemperatureString);
 8001026:	ac06      	add	r4, sp, #24
 8001028:	4621      	mov	r1, r4
 800102a:	4b2a      	ldr	r3, [pc, #168]	; (80010d4 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800102c:	6818      	ldr	r0, [r3, #0]
 800102e:	f000 ff7f 	bl	8001f30 <Temperature100ToString>
		sprintf(OneSample, "%.2u/%.2u/%.2u,%.2u:%.2u:%.2u,%s\n", year, month, day, hour, minute, second, TemperatureString);
 8001032:	9404      	str	r4, [sp, #16]
 8001034:	4b28      	ldr	r3, [pc, #160]	; (80010d8 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	9303      	str	r3, [sp, #12]
 800103a:	4b28      	ldr	r3, [pc, #160]	; (80010dc <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	9302      	str	r3, [sp, #8]
 8001040:	4b27      	ldr	r3, [pc, #156]	; (80010e0 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	9301      	str	r3, [sp, #4]
 8001046:	4b27      	ldr	r3, [pc, #156]	; (80010e4 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	9300      	str	r3, [sp, #0]
 800104c:	4b26      	ldr	r3, [pc, #152]	; (80010e8 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	4a26      	ldr	r2, [pc, #152]	; (80010ec <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001052:	7812      	ldrb	r2, [r2, #0]
 8001054:	4926      	ldr	r1, [pc, #152]	; (80010f0 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001056:	a808      	add	r0, sp, #32
 8001058:	f006 f9e0 	bl	800741c <siprintf>
		if(FTPMessageBoxRecordSwitch == 1)
 800105c:	4b25      	ldr	r3, [pc, #148]	; (80010f4 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	2b01      	cmp	r3, #1
 8001062:	d007      	beq.n	8001074 <HAL_TIM_PeriodElapsedCallback+0x64>
		else if(FTPMessageBoxRecordSwitch == 2)
 8001064:	2b02      	cmp	r3, #2
 8001066:	d017      	beq.n	8001098 <HAL_TIM_PeriodElapsedCallback+0x88>
		if(timPeriodCounter == 42)
 8001068:	4b19      	ldr	r3, [pc, #100]	; (80010d0 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	2b2a      	cmp	r3, #42	; 0x2a
 800106e:	d025      	beq.n	80010bc <HAL_TIM_PeriodElapsedCallback+0xac>
}
 8001070:	b010      	add	sp, #64	; 0x40
 8001072:	bd10      	pop	{r4, pc}
			strcat(FTPMessageBox1, OneSample);
 8001074:	a908      	add	r1, sp, #32
 8001076:	4820      	ldr	r0, [pc, #128]	; (80010f8 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001078:	f006 f9f0 	bl	800745c <strcat>
		if(timPeriodCounter == 42)
 800107c:	4b14      	ldr	r3, [pc, #80]	; (80010d0 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	2b2a      	cmp	r3, #42	; 0x2a
 8001082:	d1f5      	bne.n	8001070 <HAL_TIM_PeriodElapsedCallback+0x60>
			SMSUartTxState = FTPMsgWrite;
 8001084:	4b1d      	ldr	r3, [pc, #116]	; (80010fc <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001086:	2205      	movs	r2, #5
 8001088:	701a      	strb	r2, [r3, #0]
				FTPMessageBox2[0] = '\0';
 800108a:	4b1d      	ldr	r3, [pc, #116]	; (8001100 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800108c:	2200      	movs	r2, #0
 800108e:	701a      	strb	r2, [r3, #0]
				FTPMessageBoxRecordSwitch = 2;
 8001090:	4b18      	ldr	r3, [pc, #96]	; (80010f4 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001092:	2202      	movs	r2, #2
 8001094:	701a      	strb	r2, [r3, #0]
 8001096:	e014      	b.n	80010c2 <HAL_TIM_PeriodElapsedCallback+0xb2>
			strcat(FTPMessageBox2, OneSample);
 8001098:	a908      	add	r1, sp, #32
 800109a:	4819      	ldr	r0, [pc, #100]	; (8001100 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800109c:	f006 f9de 	bl	800745c <strcat>
		if(timPeriodCounter == 42)
 80010a0:	4b0b      	ldr	r3, [pc, #44]	; (80010d0 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	2b2a      	cmp	r3, #42	; 0x2a
 80010a6:	d1e3      	bne.n	8001070 <HAL_TIM_PeriodElapsedCallback+0x60>
			SMSUartTxState = FTPMsgWrite;
 80010a8:	4b14      	ldr	r3, [pc, #80]	; (80010fc <HAL_TIM_PeriodElapsedCallback+0xec>)
 80010aa:	2205      	movs	r2, #5
 80010ac:	701a      	strb	r2, [r3, #0]
				FTPMessageBox1[0] = '\0';
 80010ae:	4b12      	ldr	r3, [pc, #72]	; (80010f8 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	701a      	strb	r2, [r3, #0]
				FTPMessageBoxRecordSwitch = 1;
 80010b4:	4b0f      	ldr	r3, [pc, #60]	; (80010f4 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80010b6:	2201      	movs	r2, #1
 80010b8:	701a      	strb	r2, [r3, #0]
 80010ba:	e002      	b.n	80010c2 <HAL_TIM_PeriodElapsedCallback+0xb2>
			SMSUartTxState = FTPMsgWrite;
 80010bc:	4b0f      	ldr	r3, [pc, #60]	; (80010fc <HAL_TIM_PeriodElapsedCallback+0xec>)
 80010be:	2205      	movs	r2, #5
 80010c0:	701a      	strb	r2, [r3, #0]
			timPeriodCounter = 0;
 80010c2:	4b03      	ldr	r3, [pc, #12]	; (80010d0 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	701a      	strb	r2, [r3, #0]
}
 80010c8:	e7d2      	b.n	8001070 <HAL_TIM_PeriodElapsedCallback+0x60>
 80010ca:	bf00      	nop
 80010cc:	40000400 	.word	0x40000400
 80010d0:	200016dc 	.word	0x200016dc
 80010d4:	200016d8 	.word	0x200016d8
 80010d8:	200016d3 	.word	0x200016d3
 80010dc:	200016d1 	.word	0x200016d1
 80010e0:	200016d0 	.word	0x200016d0
 80010e4:	200016c6 	.word	0x200016c6
 80010e8:	200016d2 	.word	0x200016d2
 80010ec:	200016dd 	.word	0x200016dd
 80010f0:	0800b098 	.word	0x0800b098
 80010f4:	20000000 	.word	0x20000000
 80010f8:	20000494 	.word	0x20000494
 80010fc:	200014b8 	.word	0x200014b8
 8001100:	200009c8 	.word	0x200009c8

08001104 <CommStateMachineTask>:
	  if(Uart1isBusy == 0 && HAL_GetTick() - LastTickForSim800 >= inquiryTimeVar)
 8001104:	4b99      	ldr	r3, [pc, #612]	; (800136c <CommStateMachineTask+0x268>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	b103      	cbz	r3, 800110c <CommStateMachineTask+0x8>
 800110a:	4770      	bx	lr
{
 800110c:	b530      	push	{r4, r5, lr}
 800110e:	b087      	sub	sp, #28
 8001110:	2400      	movs	r4, #0
	  if(Uart1isBusy == 0 && HAL_GetTick() - LastTickForSim800 >= inquiryTimeVar)
 8001112:	f000 ff9f 	bl	8002054 <HAL_GetTick>
 8001116:	4b96      	ldr	r3, [pc, #600]	; (8001370 <CommStateMachineTask+0x26c>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	1ac0      	subs	r0, r0, r3
 800111c:	4b95      	ldr	r3, [pc, #596]	; (8001374 <CommStateMachineTask+0x270>)
 800111e:	881b      	ldrh	r3, [r3, #0]
 8001120:	4298      	cmp	r0, r3
 8001122:	d201      	bcs.n	8001128 <CommStateMachineTask+0x24>
}
 8001124:	b007      	add	sp, #28
 8001126:	bd30      	pop	{r4, r5, pc}
	  	{LastTickForSim800 = HAL_GetTick();
 8001128:	f000 ff94 	bl	8002054 <HAL_GetTick>
 800112c:	4b90      	ldr	r3, [pc, #576]	; (8001370 <CommStateMachineTask+0x26c>)
 800112e:	6018      	str	r0, [r3, #0]
	  		if(SMSUartTxState == Control)
 8001130:	4b91      	ldr	r3, [pc, #580]	; (8001378 <CommStateMachineTask+0x274>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	2b03      	cmp	r3, #3
 8001136:	d016      	beq.n	8001166 <CommStateMachineTask+0x62>
	  		else if(SMSUartTxState == Reset)
 8001138:	2b00      	cmp	r3, #0
 800113a:	d152      	bne.n	80011e2 <CommStateMachineTask+0xde>
	  			switch(TaskState)
 800113c:	4b8f      	ldr	r3, [pc, #572]	; (800137c <CommStateMachineTask+0x278>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	2b01      	cmp	r3, #1
 8001142:	d037      	beq.n	80011b4 <CommStateMachineTask+0xb0>
 8001144:	2b02      	cmp	r3, #2
 8001146:	d043      	beq.n	80011d0 <CommStateMachineTask+0xcc>
 8001148:	2b00      	cmp	r3, #0
 800114a:	d1eb      	bne.n	8001124 <CommStateMachineTask+0x20>
	  				inquiryTimeVar = 100;
 800114c:	4b89      	ldr	r3, [pc, #548]	; (8001374 <CommStateMachineTask+0x270>)
 800114e:	2264      	movs	r2, #100	; 0x64
 8001150:	801a      	strh	r2, [r3, #0]
	  				HAL_GPIO_WritePin(GSM_RESET_GPIO_Port, GSM_RESET_Pin, RESET);
 8001152:	2200      	movs	r2, #0
 8001154:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001158:	4889      	ldr	r0, [pc, #548]	; (8001380 <CommStateMachineTask+0x27c>)
 800115a:	f001 fae5 	bl	8002728 <HAL_GPIO_WritePin>
	  				TaskState = 1;
 800115e:	4b87      	ldr	r3, [pc, #540]	; (800137c <CommStateMachineTask+0x278>)
 8001160:	2201      	movs	r2, #1
 8001162:	701a      	strb	r2, [r3, #0]
	  				break;
 8001164:	e7de      	b.n	8001124 <CommStateMachineTask+0x20>
	  			switch(TaskState)
 8001166:	4b87      	ldr	r3, [pc, #540]	; (8001384 <CommStateMachineTask+0x280>)
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	2b03      	cmp	r3, #3
 800116c:	d8da      	bhi.n	8001124 <CommStateMachineTask+0x20>
 800116e:	e8df f003 	tbb	[pc, r3]
 8001172:	0902      	.short	0x0902
 8001174:	1710      	.short	0x1710
	  				UartSend("AT+CSQ\r\n");
 8001176:	4884      	ldr	r0, [pc, #528]	; (8001388 <CommStateMachineTask+0x284>)
 8001178:	f000 feb0 	bl	8001edc <UartSend>
	  				TaskState = 1;
 800117c:	4b81      	ldr	r3, [pc, #516]	; (8001384 <CommStateMachineTask+0x280>)
 800117e:	2201      	movs	r2, #1
 8001180:	701a      	strb	r2, [r3, #0]
	  				break;
 8001182:	e7cf      	b.n	8001124 <CommStateMachineTask+0x20>
	  				UartSend("AT+CREG?\r\n");
 8001184:	4881      	ldr	r0, [pc, #516]	; (800138c <CommStateMachineTask+0x288>)
 8001186:	f000 fea9 	bl	8001edc <UartSend>
	  				TaskState = 2;
 800118a:	4b7e      	ldr	r3, [pc, #504]	; (8001384 <CommStateMachineTask+0x280>)
 800118c:	2202      	movs	r2, #2
 800118e:	701a      	strb	r2, [r3, #0]
	  				break;
 8001190:	e7c8      	b.n	8001124 <CommStateMachineTask+0x20>
	  				 UartSend("AT+CMGL=\"REC UNREAD\",0\r\n");
 8001192:	487f      	ldr	r0, [pc, #508]	; (8001390 <CommStateMachineTask+0x28c>)
 8001194:	f000 fea2 	bl	8001edc <UartSend>
	  				 TaskState = 3;
 8001198:	4b7a      	ldr	r3, [pc, #488]	; (8001384 <CommStateMachineTask+0x280>)
 800119a:	2203      	movs	r2, #3
 800119c:	701a      	strb	r2, [r3, #0]
	  				 break;
 800119e:	e7c1      	b.n	8001124 <CommStateMachineTask+0x20>
	  				UartSend("AT+CCLK?\r\n");
 80011a0:	487c      	ldr	r0, [pc, #496]	; (8001394 <CommStateMachineTask+0x290>)
 80011a2:	f000 fe9b 	bl	8001edc <UartSend>
	  				TaskState = 0;
 80011a6:	4b77      	ldr	r3, [pc, #476]	; (8001384 <CommStateMachineTask+0x280>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	701a      	strb	r2, [r3, #0]
	  				SMSUartTxState = Control;
 80011ac:	4b72      	ldr	r3, [pc, #456]	; (8001378 <CommStateMachineTask+0x274>)
 80011ae:	2203      	movs	r2, #3
 80011b0:	701a      	strb	r2, [r3, #0]
	  				break;
 80011b2:	e7b7      	b.n	8001124 <CommStateMachineTask+0x20>
	  				inquiryTimeVar = 5000;
 80011b4:	4b6f      	ldr	r3, [pc, #444]	; (8001374 <CommStateMachineTask+0x270>)
 80011b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80011ba:	801a      	strh	r2, [r3, #0]
	  				HAL_GPIO_WritePin(GSM_RESET_GPIO_Port, GSM_RESET_Pin, SET);
 80011bc:	2201      	movs	r2, #1
 80011be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011c2:	486f      	ldr	r0, [pc, #444]	; (8001380 <CommStateMachineTask+0x27c>)
 80011c4:	f001 fab0 	bl	8002728 <HAL_GPIO_WritePin>
	  				TaskState = 2;
 80011c8:	4b6c      	ldr	r3, [pc, #432]	; (800137c <CommStateMachineTask+0x278>)
 80011ca:	2202      	movs	r2, #2
 80011cc:	701a      	strb	r2, [r3, #0]
	  				break;
 80011ce:	e7a9      	b.n	8001124 <CommStateMachineTask+0x20>
	  				inquiryTimeVar = INQUIRY_TIME;
 80011d0:	4b68      	ldr	r3, [pc, #416]	; (8001374 <CommStateMachineTask+0x270>)
 80011d2:	22fa      	movs	r2, #250	; 0xfa
 80011d4:	801a      	strh	r2, [r3, #0]
	  				TaskState = 2;
 80011d6:	2302      	movs	r3, #2
 80011d8:	4a68      	ldr	r2, [pc, #416]	; (800137c <CommStateMachineTask+0x278>)
 80011da:	7013      	strb	r3, [r2, #0]
	  				SMSUartTxState = Config;
 80011dc:	4a66      	ldr	r2, [pc, #408]	; (8001378 <CommStateMachineTask+0x274>)
 80011de:	7013      	strb	r3, [r2, #0]
	  				break;
 80011e0:	e7a0      	b.n	8001124 <CommStateMachineTask+0x20>
	  		else if(SMSUartTxState == Start)
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	d01e      	beq.n	8001224 <CommStateMachineTask+0x120>
	  		else if(SMSUartTxState == SMSMsgWrite)
 80011e6:	2b04      	cmp	r3, #4
 80011e8:	d03f      	beq.n	800126a <CommStateMachineTask+0x166>
	  		else if(SMSUartTxState == Config)
 80011ea:	2b02      	cmp	r3, #2
 80011ec:	d07f      	beq.n	80012ee <CommStateMachineTask+0x1ea>
	  		else if(SMSUartTxState == FTPMsgWrite)
 80011ee:	2b05      	cmp	r3, #5
 80011f0:	d198      	bne.n	8001124 <CommStateMachineTask+0x20>
	  			inquiryTimeVar = INQUIRY_TIME;
 80011f2:	4b60      	ldr	r3, [pc, #384]	; (8001374 <CommStateMachineTask+0x270>)
 80011f4:	22fa      	movs	r2, #250	; 0xfa
 80011f6:	801a      	strh	r2, [r3, #0]
	  			switch(TaskState)
 80011f8:	4b67      	ldr	r3, [pc, #412]	; (8001398 <CommStateMachineTask+0x294>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	2b0f      	cmp	r3, #15
 80011fe:	d891      	bhi.n	8001124 <CommStateMachineTask+0x20>
 8001200:	e8df f013 	tbh	[pc, r3, lsl #1]
 8001204:	00f000ac 	.word	0x00f000ac
 8001208:	010200f7 	.word	0x010200f7
 800120c:	011b0111 	.word	0x011b0111
 8001210:	012f0122 	.word	0x012f0122
 8001214:	0149013c 	.word	0x0149013c
 8001218:	01740167 	.word	0x01740167
 800121c:	019c017f 	.word	0x019c017f
 8001220:	01b501ae 	.word	0x01b501ae
	  			inquiryTimeVar = 2000;
 8001224:	4b53      	ldr	r3, [pc, #332]	; (8001374 <CommStateMachineTask+0x270>)
 8001226:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800122a:	801a      	strh	r2, [r3, #0]
	  			switch(TaskState)
 800122c:	4b5b      	ldr	r3, [pc, #364]	; (800139c <CommStateMachineTask+0x298>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	b153      	cbz	r3, 8001248 <CommStateMachineTask+0x144>
 8001232:	2b01      	cmp	r3, #1
 8001234:	f47f af76 	bne.w	8001124 <CommStateMachineTask+0x20>
	  				if(GSM.CRegStat == 1)
 8001238:	4b59      	ldr	r3, [pc, #356]	; (80013a0 <CommStateMachineTask+0x29c>)
 800123a:	7a9b      	ldrb	r3, [r3, #10]
 800123c:	2b01      	cmp	r3, #1
 800123e:	d00a      	beq.n	8001256 <CommStateMachineTask+0x152>
	  					TaskState = 0;
 8001240:	4b56      	ldr	r3, [pc, #344]	; (800139c <CommStateMachineTask+0x298>)
 8001242:	2200      	movs	r2, #0
 8001244:	701a      	strb	r2, [r3, #0]
 8001246:	e76d      	b.n	8001124 <CommStateMachineTask+0x20>
	  				UartSend("AT+CREG?\r\n");
 8001248:	4850      	ldr	r0, [pc, #320]	; (800138c <CommStateMachineTask+0x288>)
 800124a:	f000 fe47 	bl	8001edc <UartSend>
	  				TaskState = 1;
 800124e:	4b53      	ldr	r3, [pc, #332]	; (800139c <CommStateMachineTask+0x298>)
 8001250:	2201      	movs	r2, #1
 8001252:	701a      	strb	r2, [r3, #0]
	  				break;
 8001254:	e766      	b.n	8001124 <CommStateMachineTask+0x20>
	  					inquiryTimeVar = INQUIRY_TIME;
 8001256:	4b47      	ldr	r3, [pc, #284]	; (8001374 <CommStateMachineTask+0x270>)
 8001258:	22fa      	movs	r2, #250	; 0xfa
 800125a:	801a      	strh	r2, [r3, #0]
	  					TaskState = 0;
 800125c:	4b4f      	ldr	r3, [pc, #316]	; (800139c <CommStateMachineTask+0x298>)
 800125e:	2200      	movs	r2, #0
 8001260:	701a      	strb	r2, [r3, #0]
	  					SMSUartTxState = Control;
 8001262:	4b45      	ldr	r3, [pc, #276]	; (8001378 <CommStateMachineTask+0x274>)
 8001264:	2203      	movs	r2, #3
 8001266:	701a      	strb	r2, [r3, #0]
 8001268:	e75c      	b.n	8001124 <CommStateMachineTask+0x20>
	  			switch(TaskState)
 800126a:	4b4e      	ldr	r3, [pc, #312]	; (80013a4 <CommStateMachineTask+0x2a0>)
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	2b03      	cmp	r3, #3
 8001270:	f63f af58 	bhi.w	8001124 <CommStateMachineTask+0x20>
 8001274:	e8df f003 	tbb	[pc, r3]
 8001278:	31241302 	.word	0x31241302
	  				sprintf(ATcmdSMS, "AT+CMGS=\"%s\"\r\n", GSM.ConfigFlash.number2);
 800127c:	4c4a      	ldr	r4, [pc, #296]	; (80013a8 <CommStateMachineTask+0x2a4>)
 800127e:	4a4b      	ldr	r2, [pc, #300]	; (80013ac <CommStateMachineTask+0x2a8>)
 8001280:	494b      	ldr	r1, [pc, #300]	; (80013b0 <CommStateMachineTask+0x2ac>)
 8001282:	4620      	mov	r0, r4
 8001284:	f006 f8ca 	bl	800741c <siprintf>
	  				UartSendWoRxCtrl(ATcmdSMS);
 8001288:	4620      	mov	r0, r4
 800128a:	f000 fe3f 	bl	8001f0c <UartSendWoRxCtrl>
	  				inquiryTimeVar = 2000;
 800128e:	4b39      	ldr	r3, [pc, #228]	; (8001374 <CommStateMachineTask+0x270>)
 8001290:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001294:	801a      	strh	r2, [r3, #0]
	  				TaskState = 1;
 8001296:	4b43      	ldr	r3, [pc, #268]	; (80013a4 <CommStateMachineTask+0x2a0>)
 8001298:	2201      	movs	r2, #1
 800129a:	701a      	strb	r2, [r3, #0]
	  				break;
 800129c:	e742      	b.n	8001124 <CommStateMachineTask+0x20>
	  				HAL_UART_Transmit_IT(&huart1, (uint8_t*) SMSMessage, strlen(SMSMessage));
 800129e:	4c45      	ldr	r4, [pc, #276]	; (80013b4 <CommStateMachineTask+0x2b0>)
 80012a0:	4620      	mov	r0, r4
 80012a2:	f7fe ff5f 	bl	8000164 <strlen>
 80012a6:	b282      	uxth	r2, r0
 80012a8:	4621      	mov	r1, r4
 80012aa:	4843      	ldr	r0, [pc, #268]	; (80013b8 <CommStateMachineTask+0x2b4>)
 80012ac:	f003 fa4d 	bl	800474a <HAL_UART_Transmit_IT>
	  				*Uart1isBusyPtr = 1;
 80012b0:	4b42      	ldr	r3, [pc, #264]	; (80013bc <CommStateMachineTask+0x2b8>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	2201      	movs	r2, #1
 80012b6:	701a      	strb	r2, [r3, #0]
	  				TaskState = 2;
 80012b8:	4b3a      	ldr	r3, [pc, #232]	; (80013a4 <CommStateMachineTask+0x2a0>)
 80012ba:	2202      	movs	r2, #2
 80012bc:	701a      	strb	r2, [r3, #0]
	  				break;
 80012be:	e731      	b.n	8001124 <CommStateMachineTask+0x20>
	  				HAL_UART_Transmit_IT(&huart1, (uint8_t*) &ctrlZ, 1);
 80012c0:	2201      	movs	r2, #1
 80012c2:	493f      	ldr	r1, [pc, #252]	; (80013c0 <CommStateMachineTask+0x2bc>)
 80012c4:	483c      	ldr	r0, [pc, #240]	; (80013b8 <CommStateMachineTask+0x2b4>)
 80012c6:	f003 fa40 	bl	800474a <HAL_UART_Transmit_IT>
	  				*Uart1isBusyPtr = 1;
 80012ca:	4b3c      	ldr	r3, [pc, #240]	; (80013bc <CommStateMachineTask+0x2b8>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	2201      	movs	r2, #1
 80012d0:	701a      	strb	r2, [r3, #0]
	  				TaskState = 3;
 80012d2:	4b34      	ldr	r3, [pc, #208]	; (80013a4 <CommStateMachineTask+0x2a0>)
 80012d4:	2203      	movs	r2, #3
 80012d6:	701a      	strb	r2, [r3, #0]
	  				break;
 80012d8:	e724      	b.n	8001124 <CommStateMachineTask+0x20>
	  				inquiryTimeVar = INQUIRY_TIME;
 80012da:	4b26      	ldr	r3, [pc, #152]	; (8001374 <CommStateMachineTask+0x270>)
 80012dc:	22fa      	movs	r2, #250	; 0xfa
 80012de:	801a      	strh	r2, [r3, #0]
	  				TaskState = 0;
 80012e0:	4b30      	ldr	r3, [pc, #192]	; (80013a4 <CommStateMachineTask+0x2a0>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	701a      	strb	r2, [r3, #0]
	  				SMSUartTxState = Control;
 80012e6:	4b24      	ldr	r3, [pc, #144]	; (8001378 <CommStateMachineTask+0x274>)
 80012e8:	2203      	movs	r2, #3
 80012ea:	701a      	strb	r2, [r3, #0]
	  				break;
 80012ec:	e71a      	b.n	8001124 <CommStateMachineTask+0x20>
	  			switch(TaskState)
 80012ee:	4b35      	ldr	r3, [pc, #212]	; (80013c4 <CommStateMachineTask+0x2c0>)
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	2b05      	cmp	r3, #5
 80012f4:	f63f af16 	bhi.w	8001124 <CommStateMachineTask+0x20>
 80012f8:	e8df f003 	tbb	[pc, r3]
 80012fc:	18110a03 	.word	0x18110a03
 8001300:	261f      	.short	0x261f
	  				UartSend("ATE0\r\n");
 8001302:	4831      	ldr	r0, [pc, #196]	; (80013c8 <CommStateMachineTask+0x2c4>)
 8001304:	f000 fdea 	bl	8001edc <UartSend>
	  				TaskState = 1;
 8001308:	4b2e      	ldr	r3, [pc, #184]	; (80013c4 <CommStateMachineTask+0x2c0>)
 800130a:	2201      	movs	r2, #1
 800130c:	701a      	strb	r2, [r3, #0]
	  				break;
 800130e:	e709      	b.n	8001124 <CommStateMachineTask+0x20>
	  				UartSend("AT+CMGF=1\r\n");
 8001310:	482e      	ldr	r0, [pc, #184]	; (80013cc <CommStateMachineTask+0x2c8>)
 8001312:	f000 fde3 	bl	8001edc <UartSend>
	  				TaskState = 2;
 8001316:	4b2b      	ldr	r3, [pc, #172]	; (80013c4 <CommStateMachineTask+0x2c0>)
 8001318:	2202      	movs	r2, #2
 800131a:	701a      	strb	r2, [r3, #0]
	  				break;
 800131c:	e702      	b.n	8001124 <CommStateMachineTask+0x20>
	  				UartSend("AT+CLTS=1\r\n");
 800131e:	482c      	ldr	r0, [pc, #176]	; (80013d0 <CommStateMachineTask+0x2cc>)
 8001320:	f000 fddc 	bl	8001edc <UartSend>
	  				TaskState = 3;
 8001324:	4b27      	ldr	r3, [pc, #156]	; (80013c4 <CommStateMachineTask+0x2c0>)
 8001326:	2203      	movs	r2, #3
 8001328:	701a      	strb	r2, [r3, #0]
	  				break;
 800132a:	e6fb      	b.n	8001124 <CommStateMachineTask+0x20>
	  				UartSend("AT+CNMI=2,2,0,0,0\r\n");
 800132c:	4829      	ldr	r0, [pc, #164]	; (80013d4 <CommStateMachineTask+0x2d0>)
 800132e:	f000 fdd5 	bl	8001edc <UartSend>
	  				TaskState = 4;
 8001332:	4b24      	ldr	r3, [pc, #144]	; (80013c4 <CommStateMachineTask+0x2c0>)
 8001334:	2204      	movs	r2, #4
 8001336:	701a      	strb	r2, [r3, #0]
	  				break;
 8001338:	e6f4      	b.n	8001124 <CommStateMachineTask+0x20>
	  				UartSend("AT+CIURC=0\r\n");
 800133a:	4827      	ldr	r0, [pc, #156]	; (80013d8 <CommStateMachineTask+0x2d4>)
 800133c:	f000 fdce 	bl	8001edc <UartSend>
	  				TaskState = 5;
 8001340:	4b20      	ldr	r3, [pc, #128]	; (80013c4 <CommStateMachineTask+0x2c0>)
 8001342:	2205      	movs	r2, #5
 8001344:	701a      	strb	r2, [r3, #0]
	  				break;
 8001346:	e6ed      	b.n	8001124 <CommStateMachineTask+0x20>
	  				UartSend("AT&W\r\n");
 8001348:	4824      	ldr	r0, [pc, #144]	; (80013dc <CommStateMachineTask+0x2d8>)
 800134a:	f000 fdc7 	bl	8001edc <UartSend>
	  				TaskState = 0;
 800134e:	4b1d      	ldr	r3, [pc, #116]	; (80013c4 <CommStateMachineTask+0x2c0>)
 8001350:	2200      	movs	r2, #0
 8001352:	701a      	strb	r2, [r3, #0]
	  				SMSUartTxState = Start;
 8001354:	4b08      	ldr	r3, [pc, #32]	; (8001378 <CommStateMachineTask+0x274>)
 8001356:	2201      	movs	r2, #1
 8001358:	701a      	strb	r2, [r3, #0]
	  				break;
 800135a:	e6e3      	b.n	8001124 <CommStateMachineTask+0x20>
	  				UartSend("AT+SAPBR=3,1,\"Contype\",\"GPRS\"\r\n");
 800135c:	4820      	ldr	r0, [pc, #128]	; (80013e0 <CommStateMachineTask+0x2dc>)
 800135e:	f000 fdbd 	bl	8001edc <UartSend>
	  				TaskState = 1;
 8001362:	4b0d      	ldr	r3, [pc, #52]	; (8001398 <CommStateMachineTask+0x294>)
 8001364:	2201      	movs	r2, #1
 8001366:	701a      	strb	r2, [r3, #0]
	  				break;
 8001368:	e6dc      	b.n	8001124 <CommStateMachineTask+0x20>
 800136a:	bf00      	nop
 800136c:	200016c5 	.word	0x200016c5
 8001370:	20001118 	.word	0x20001118
 8001374:	20000008 	.word	0x20000008
 8001378:	200014b8 	.word	0x200014b8
 800137c:	200014bd 	.word	0x200014bd
 8001380:	40010c00 	.word	0x40010c00
 8001384:	200014be 	.word	0x200014be
 8001388:	0800b0bc 	.word	0x0800b0bc
 800138c:	0800b0c8 	.word	0x0800b0c8
 8001390:	0800b0d4 	.word	0x0800b0d4
 8001394:	0800b0f0 	.word	0x0800b0f0
 8001398:	200014b9 	.word	0x200014b9
 800139c:	200014bc 	.word	0x200014bc
 80013a0:	20000f00 	.word	0x20000f00
 80013a4:	200014bb 	.word	0x200014bb
 80013a8:	20000414 	.word	0x20000414
 80013ac:	20000fbc 	.word	0x20000fbc
 80013b0:	0800b0fc 	.word	0x0800b0fc
 80013b4:	2000142c 	.word	0x2000142c
 80013b8:	20001774 	.word	0x20001774
 80013bc:	20000004 	.word	0x20000004
 80013c0:	0800b288 	.word	0x0800b288
 80013c4:	200014ba 	.word	0x200014ba
 80013c8:	0800b10c 	.word	0x0800b10c
 80013cc:	0800b114 	.word	0x0800b114
 80013d0:	0800b120 	.word	0x0800b120
 80013d4:	0800b12c 	.word	0x0800b12c
 80013d8:	0800b140 	.word	0x0800b140
 80013dc:	0800b150 	.word	0x0800b150
 80013e0:	0800b158 	.word	0x0800b158
	  				UartSend("AT+SAPBR=3,1,\"APN\",\"plus\"\r\n");
 80013e4:	4868      	ldr	r0, [pc, #416]	; (8001588 <CommStateMachineTask+0x484>)
 80013e6:	f000 fd79 	bl	8001edc <UartSend>
	  				TaskState = 2;
 80013ea:	4b68      	ldr	r3, [pc, #416]	; (800158c <CommStateMachineTask+0x488>)
 80013ec:	2202      	movs	r2, #2
 80013ee:	701a      	strb	r2, [r3, #0]
	  				break;
 80013f0:	e698      	b.n	8001124 <CommStateMachineTask+0x20>
	  				UartSend("AT+SAPBR=1,1\r\n");
 80013f2:	4867      	ldr	r0, [pc, #412]	; (8001590 <CommStateMachineTask+0x48c>)
 80013f4:	f000 fd72 	bl	8001edc <UartSend>
	  				inquiryTimeVar = 5000;
 80013f8:	4b66      	ldr	r3, [pc, #408]	; (8001594 <CommStateMachineTask+0x490>)
 80013fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80013fe:	801a      	strh	r2, [r3, #0]
	  				TaskState = 3;
 8001400:	4b62      	ldr	r3, [pc, #392]	; (800158c <CommStateMachineTask+0x488>)
 8001402:	2203      	movs	r2, #3
 8001404:	701a      	strb	r2, [r3, #0]
	  				break;
 8001406:	e68d      	b.n	8001124 <CommStateMachineTask+0x20>
	  				if(GSM.ReceivedState == 1)
 8001408:	4b63      	ldr	r3, [pc, #396]	; (8001598 <CommStateMachineTask+0x494>)
 800140a:	7a1b      	ldrb	r3, [r3, #8]
 800140c:	2b01      	cmp	r3, #1
 800140e:	d103      	bne.n	8001418 <CommStateMachineTask+0x314>
	  					TaskState = 4;
 8001410:	4b5e      	ldr	r3, [pc, #376]	; (800158c <CommStateMachineTask+0x488>)
 8001412:	2204      	movs	r2, #4
 8001414:	701a      	strb	r2, [r3, #0]
 8001416:	e685      	b.n	8001124 <CommStateMachineTask+0x20>
	  					TaskState = 0;
 8001418:	4b5c      	ldr	r3, [pc, #368]	; (800158c <CommStateMachineTask+0x488>)
 800141a:	2200      	movs	r2, #0
 800141c:	701a      	strb	r2, [r3, #0]
	  					UartSend("AT+SAPBR=0,1\r\n");
 800141e:	485f      	ldr	r0, [pc, #380]	; (800159c <CommStateMachineTask+0x498>)
 8001420:	f000 fd5c 	bl	8001edc <UartSend>
 8001424:	e67e      	b.n	8001124 <CommStateMachineTask+0x20>
	  				UartSend("AT+SAPBR=2,1\r\n");
 8001426:	485e      	ldr	r0, [pc, #376]	; (80015a0 <CommStateMachineTask+0x49c>)
 8001428:	f000 fd58 	bl	8001edc <UartSend>
	  				inquiryTimeVar = INQUIRY_TIME;
 800142c:	4b59      	ldr	r3, [pc, #356]	; (8001594 <CommStateMachineTask+0x490>)
 800142e:	22fa      	movs	r2, #250	; 0xfa
 8001430:	801a      	strh	r2, [r3, #0]
	  				TaskState = 5;
 8001432:	4b56      	ldr	r3, [pc, #344]	; (800158c <CommStateMachineTask+0x488>)
 8001434:	2205      	movs	r2, #5
 8001436:	701a      	strb	r2, [r3, #0]
	  				break;
 8001438:	e674      	b.n	8001124 <CommStateMachineTask+0x20>
	  				UartSend("AT+FTPCID=1\r\n");
 800143a:	485a      	ldr	r0, [pc, #360]	; (80015a4 <CommStateMachineTask+0x4a0>)
 800143c:	f000 fd4e 	bl	8001edc <UartSend>
	  				TaskState = 6;
 8001440:	4b52      	ldr	r3, [pc, #328]	; (800158c <CommStateMachineTask+0x488>)
 8001442:	2206      	movs	r2, #6
 8001444:	701a      	strb	r2, [r3, #0]
	  				break;
 8001446:	e66d      	b.n	8001124 <CommStateMachineTask+0x20>
	  				sprintf(ATcmdFtp, "AT+FTPSERV=\"%s\"\r\n", GSM.ConfigFlash.server);
 8001448:	4c57      	ldr	r4, [pc, #348]	; (80015a8 <CommStateMachineTask+0x4a4>)
 800144a:	4a58      	ldr	r2, [pc, #352]	; (80015ac <CommStateMachineTask+0x4a8>)
 800144c:	4958      	ldr	r1, [pc, #352]	; (80015b0 <CommStateMachineTask+0x4ac>)
 800144e:	4620      	mov	r0, r4
 8001450:	f005 ffe4 	bl	800741c <siprintf>
	  				UartSend(ATcmdFtp);
 8001454:	4620      	mov	r0, r4
 8001456:	f000 fd41 	bl	8001edc <UartSend>
	  				TaskState = 7;
 800145a:	4b4c      	ldr	r3, [pc, #304]	; (800158c <CommStateMachineTask+0x488>)
 800145c:	2207      	movs	r2, #7
 800145e:	701a      	strb	r2, [r3, #0]
	  				break;
 8001460:	e660      	b.n	8001124 <CommStateMachineTask+0x20>
	  				sprintf(ATcmdFtp, "AT+FTPUN=\"%s\"\r\n", GSM.ConfigFlash.login);
 8001462:	4c51      	ldr	r4, [pc, #324]	; (80015a8 <CommStateMachineTask+0x4a4>)
 8001464:	4a53      	ldr	r2, [pc, #332]	; (80015b4 <CommStateMachineTask+0x4b0>)
 8001466:	4954      	ldr	r1, [pc, #336]	; (80015b8 <CommStateMachineTask+0x4b4>)
 8001468:	4620      	mov	r0, r4
 800146a:	f005 ffd7 	bl	800741c <siprintf>
	  				UartSend(ATcmdFtp);
 800146e:	4620      	mov	r0, r4
 8001470:	f000 fd34 	bl	8001edc <UartSend>
	  				TaskState = 8;
 8001474:	4b45      	ldr	r3, [pc, #276]	; (800158c <CommStateMachineTask+0x488>)
 8001476:	2208      	movs	r2, #8
 8001478:	701a      	strb	r2, [r3, #0]
	  				break;
 800147a:	e653      	b.n	8001124 <CommStateMachineTask+0x20>
	  				sprintf(ATcmdFtp, "AT+FTPPW=\"%s\"\r\n", GSM.ConfigFlash.password);
 800147c:	4c4a      	ldr	r4, [pc, #296]	; (80015a8 <CommStateMachineTask+0x4a4>)
 800147e:	4a4f      	ldr	r2, [pc, #316]	; (80015bc <CommStateMachineTask+0x4b8>)
 8001480:	494f      	ldr	r1, [pc, #316]	; (80015c0 <CommStateMachineTask+0x4bc>)
 8001482:	4620      	mov	r0, r4
 8001484:	f005 ffca 	bl	800741c <siprintf>
	  				UartSend(ATcmdFtp);
 8001488:	4620      	mov	r0, r4
 800148a:	f000 fd27 	bl	8001edc <UartSend>
	  				TaskState = 9;
 800148e:	4b3f      	ldr	r3, [pc, #252]	; (800158c <CommStateMachineTask+0x488>)
 8001490:	2209      	movs	r2, #9
 8001492:	701a      	strb	r2, [r3, #0]
	  				break;
 8001494:	e646      	b.n	8001124 <CommStateMachineTask+0x20>
	  				sprintf(ATcmdFtp, "AT+FTPPUTNAME=\"%s%.2u%.2u%.2u%.2u%.2u%.2u.txt\"\r\n",GSM.ConfigFlash.deviceNumber, year, month, day, hour, minute, second);
 8001496:	4c44      	ldr	r4, [pc, #272]	; (80015a8 <CommStateMachineTask+0x4a4>)
 8001498:	4b4a      	ldr	r3, [pc, #296]	; (80015c4 <CommStateMachineTask+0x4c0>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	9304      	str	r3, [sp, #16]
 800149e:	4b4a      	ldr	r3, [pc, #296]	; (80015c8 <CommStateMachineTask+0x4c4>)
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	9303      	str	r3, [sp, #12]
 80014a4:	4b49      	ldr	r3, [pc, #292]	; (80015cc <CommStateMachineTask+0x4c8>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	9302      	str	r3, [sp, #8]
 80014aa:	4b49      	ldr	r3, [pc, #292]	; (80015d0 <CommStateMachineTask+0x4cc>)
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	9301      	str	r3, [sp, #4]
 80014b0:	4b48      	ldr	r3, [pc, #288]	; (80015d4 <CommStateMachineTask+0x4d0>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	9300      	str	r3, [sp, #0]
 80014b6:	4b48      	ldr	r3, [pc, #288]	; (80015d8 <CommStateMachineTask+0x4d4>)
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	4a48      	ldr	r2, [pc, #288]	; (80015dc <CommStateMachineTask+0x4d8>)
 80014bc:	4948      	ldr	r1, [pc, #288]	; (80015e0 <CommStateMachineTask+0x4dc>)
 80014be:	4620      	mov	r0, r4
 80014c0:	f005 ffac 	bl	800741c <siprintf>
	  				UartSend(ATcmdFtp);
 80014c4:	4620      	mov	r0, r4
 80014c6:	f000 fd09 	bl	8001edc <UartSend>
	  				TaskState = 10;
 80014ca:	4b30      	ldr	r3, [pc, #192]	; (800158c <CommStateMachineTask+0x488>)
 80014cc:	220a      	movs	r2, #10
 80014ce:	701a      	strb	r2, [r3, #0]
	  				break;
 80014d0:	e628      	b.n	8001124 <CommStateMachineTask+0x20>
	  				sprintf(ATcmdFtp, "AT+FTPPUTPATH=\"%s\"\r\n", GSM.ConfigFlash.path);
 80014d2:	4c35      	ldr	r4, [pc, #212]	; (80015a8 <CommStateMachineTask+0x4a4>)
 80014d4:	4a43      	ldr	r2, [pc, #268]	; (80015e4 <CommStateMachineTask+0x4e0>)
 80014d6:	4944      	ldr	r1, [pc, #272]	; (80015e8 <CommStateMachineTask+0x4e4>)
 80014d8:	4620      	mov	r0, r4
 80014da:	f005 ff9f 	bl	800741c <siprintf>
	  				UartSend(ATcmdFtp);
 80014de:	4620      	mov	r0, r4
 80014e0:	f000 fcfc 	bl	8001edc <UartSend>
	  				TaskState = 11;
 80014e4:	4b29      	ldr	r3, [pc, #164]	; (800158c <CommStateMachineTask+0x488>)
 80014e6:	220b      	movs	r2, #11
 80014e8:	701a      	strb	r2, [r3, #0]
	  				break;
 80014ea:	e61b      	b.n	8001124 <CommStateMachineTask+0x20>
	  				UartSend("AT+FTPPUT=1\r\n");
 80014ec:	483f      	ldr	r0, [pc, #252]	; (80015ec <CommStateMachineTask+0x4e8>)
 80014ee:	f000 fcf5 	bl	8001edc <UartSend>
	  				inquiryTimeVar = 4000;
 80014f2:	4b28      	ldr	r3, [pc, #160]	; (8001594 <CommStateMachineTask+0x490>)
 80014f4:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80014f8:	801a      	strh	r2, [r3, #0]
	  				TaskState = 12;
 80014fa:	4b24      	ldr	r3, [pc, #144]	; (800158c <CommStateMachineTask+0x488>)
 80014fc:	220c      	movs	r2, #12
 80014fe:	701a      	strb	r2, [r3, #0]
	  				break;
 8001500:	e610      	b.n	8001124 <CommStateMachineTask+0x20>
	  				if(FTPMessageBoxRecordSwitch == 2)
 8001502:	4b3b      	ldr	r3, [pc, #236]	; (80015f0 <CommStateMachineTask+0x4ec>)
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	2b02      	cmp	r3, #2
 8001508:	d00e      	beq.n	8001528 <CommStateMachineTask+0x424>
	  				else if(FTPMessageBoxRecordSwitch == 1)
 800150a:	2b01      	cmp	r3, #1
 800150c:	d011      	beq.n	8001532 <CommStateMachineTask+0x42e>
	  				sprintf(ATcmdFtp,"AT+FTPPUT=2,%u\r\n", MsgLen);
 800150e:	4d26      	ldr	r5, [pc, #152]	; (80015a8 <CommStateMachineTask+0x4a4>)
 8001510:	4622      	mov	r2, r4
 8001512:	4938      	ldr	r1, [pc, #224]	; (80015f4 <CommStateMachineTask+0x4f0>)
 8001514:	4628      	mov	r0, r5
 8001516:	f005 ff81 	bl	800741c <siprintf>
	  				UartSendWoRxCtrl(ATcmdFtp);
 800151a:	4628      	mov	r0, r5
 800151c:	f000 fcf6 	bl	8001f0c <UartSendWoRxCtrl>
					TaskState = 13;
 8001520:	4b1a      	ldr	r3, [pc, #104]	; (800158c <CommStateMachineTask+0x488>)
 8001522:	220d      	movs	r2, #13
 8001524:	701a      	strb	r2, [r3, #0]
					break;
 8001526:	e5fd      	b.n	8001124 <CommStateMachineTask+0x20>
	  					MsgLen = strlen(FTPMessageBox1);
 8001528:	4833      	ldr	r0, [pc, #204]	; (80015f8 <CommStateMachineTask+0x4f4>)
 800152a:	f7fe fe1b 	bl	8000164 <strlen>
 800152e:	b284      	uxth	r4, r0
 8001530:	e7ed      	b.n	800150e <CommStateMachineTask+0x40a>
	  					MsgLen = strlen(FTPMessageBox2);
 8001532:	4832      	ldr	r0, [pc, #200]	; (80015fc <CommStateMachineTask+0x4f8>)
 8001534:	f7fe fe16 	bl	8000164 <strlen>
 8001538:	b284      	uxth	r4, r0
 800153a:	e7e8      	b.n	800150e <CommStateMachineTask+0x40a>
	  				if(FTPMessageBoxRecordSwitch == 2)
 800153c:	4b2c      	ldr	r3, [pc, #176]	; (80015f0 <CommStateMachineTask+0x4ec>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	2b02      	cmp	r3, #2
 8001542:	d005      	beq.n	8001550 <CommStateMachineTask+0x44c>
	  				else if(FTPMessageBoxRecordSwitch == 1)
 8001544:	2b01      	cmp	r3, #1
 8001546:	d007      	beq.n	8001558 <CommStateMachineTask+0x454>
	  				TaskState = 14;
 8001548:	4b10      	ldr	r3, [pc, #64]	; (800158c <CommStateMachineTask+0x488>)
 800154a:	220e      	movs	r2, #14
 800154c:	701a      	strb	r2, [r3, #0]
	  				break;
 800154e:	e5e9      	b.n	8001124 <CommStateMachineTask+0x20>
	  					UartSendWoRxCtrl(FTPMessageBox1);
 8001550:	4829      	ldr	r0, [pc, #164]	; (80015f8 <CommStateMachineTask+0x4f4>)
 8001552:	f000 fcdb 	bl	8001f0c <UartSendWoRxCtrl>
 8001556:	e7f7      	b.n	8001548 <CommStateMachineTask+0x444>
	  					UartSendWoRxCtrl(FTPMessageBox2);
 8001558:	4828      	ldr	r0, [pc, #160]	; (80015fc <CommStateMachineTask+0x4f8>)
 800155a:	f000 fcd7 	bl	8001f0c <UartSendWoRxCtrl>
 800155e:	e7f3      	b.n	8001548 <CommStateMachineTask+0x444>
	  				UartSend("AT+FTPPUT=2,0\r\n");
 8001560:	4827      	ldr	r0, [pc, #156]	; (8001600 <CommStateMachineTask+0x4fc>)
 8001562:	f000 fcbb 	bl	8001edc <UartSend>
	  				TaskState = 15;
 8001566:	4b09      	ldr	r3, [pc, #36]	; (800158c <CommStateMachineTask+0x488>)
 8001568:	220f      	movs	r2, #15
 800156a:	701a      	strb	r2, [r3, #0]
	  				break;
 800156c:	e5da      	b.n	8001124 <CommStateMachineTask+0x20>
	  				UartSend("AT+SAPBR=0,1\r\n");
 800156e:	480b      	ldr	r0, [pc, #44]	; (800159c <CommStateMachineTask+0x498>)
 8001570:	f000 fcb4 	bl	8001edc <UartSend>
	  				TaskState = 0;
 8001574:	4b05      	ldr	r3, [pc, #20]	; (800158c <CommStateMachineTask+0x488>)
 8001576:	2200      	movs	r2, #0
 8001578:	701a      	strb	r2, [r3, #0]
	  				SMSUartTxState = Control;
 800157a:	4b22      	ldr	r3, [pc, #136]	; (8001604 <CommStateMachineTask+0x500>)
 800157c:	2203      	movs	r2, #3
 800157e:	701a      	strb	r2, [r3, #0]
	  				inquiryTimeVar = INQUIRY_TIME;
 8001580:	4b04      	ldr	r3, [pc, #16]	; (8001594 <CommStateMachineTask+0x490>)
 8001582:	22fa      	movs	r2, #250	; 0xfa
 8001584:	801a      	strh	r2, [r3, #0]
}
 8001586:	e5cd      	b.n	8001124 <CommStateMachineTask+0x20>
 8001588:	0800b178 	.word	0x0800b178
 800158c:	200014b9 	.word	0x200014b9
 8001590:	0800b194 	.word	0x0800b194
 8001594:	20000008 	.word	0x20000008
 8001598:	20000f00 	.word	0x20000f00
 800159c:	0800b1a4 	.word	0x0800b1a4
 80015a0:	0800b1b4 	.word	0x0800b1b4
 80015a4:	0800b1c4 	.word	0x0800b1c4
 80015a8:	20000394 	.word	0x20000394
 80015ac:	20000f48 	.word	0x20000f48
 80015b0:	0800b1d4 	.word	0x0800b1d4
 80015b4:	20000f0c 	.word	0x20000f0c
 80015b8:	0800b1e8 	.word	0x0800b1e8
 80015bc:	20000f2a 	.word	0x20000f2a
 80015c0:	0800b1f8 	.word	0x0800b1f8
 80015c4:	200016d3 	.word	0x200016d3
 80015c8:	200016d1 	.word	0x200016d1
 80015cc:	200016d0 	.word	0x200016d0
 80015d0:	200016c6 	.word	0x200016c6
 80015d4:	200016d2 	.word	0x200016d2
 80015d8:	200016dd 	.word	0x200016dd
 80015dc:	20000fcc 	.word	0x20000fcc
 80015e0:	0800b208 	.word	0x0800b208
 80015e4:	20000f7a 	.word	0x20000f7a
 80015e8:	0800b23c 	.word	0x0800b23c
 80015ec:	0800b254 	.word	0x0800b254
 80015f0:	20000000 	.word	0x20000000
 80015f4:	0800b264 	.word	0x0800b264
 80015f8:	20000494 	.word	0x20000494
 80015fc:	200009c8 	.word	0x200009c8
 8001600:	0800b278 	.word	0x0800b278
 8001604:	200014b8 	.word	0x200014b8

08001608 <main>:
{
 8001608:	b580      	push	{r7, lr}
  HAL_Init();
 800160a:	f000 fd05 	bl	8002018 <HAL_Init>
  SystemClock_Config();
 800160e:	f7ff fc87 	bl	8000f20 <SystemClock_Config>
  MX_GPIO_Init();
 8001612:	f7ff fc19 	bl	8000e48 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001616:	f000 fbcd 	bl	8001db4 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 800161a:	f000 fb63 	bl	8001ce4 <MX_TIM4_Init>
  MX_TIM3_Init();
 800161e:	f000 fb29 	bl	8001c74 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8001622:	f000 fbe1 	bl	8001de8 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 8001626:	f005 f859 	bl	80066dc <MX_USB_DEVICE_Init>
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800162a:	2200      	movs	r2, #0
 800162c:	4611      	mov	r1, r2
 800162e:	2025      	movs	r0, #37	; 0x25
 8001630:	f000 fd28 	bl	8002084 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001634:	2025      	movs	r0, #37	; 0x25
 8001636:	f000 fd5b 	bl	80020f0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800163a:	2200      	movs	r2, #0
 800163c:	4611      	mov	r1, r2
 800163e:	2014      	movs	r0, #20
 8001640:	f000 fd20 	bl	8002084 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8001644:	2014      	movs	r0, #20
 8001646:	f000 fd53 	bl	80020f0 <HAL_NVIC_EnableIRQ>
  HAL_UART_Receive_IT(&huart1, &ReceiveTmp, 1);
 800164a:	2201      	movs	r2, #1
 800164c:	4943      	ldr	r1, [pc, #268]	; (800175c <main+0x154>)
 800164e:	4844      	ldr	r0, [pc, #272]	; (8001760 <main+0x158>)
 8001650:	f003 fa69 	bl	8004b26 <HAL_UART_Receive_IT>
  if (ds18b20_read_address(ds_address) != HAL_OK)
 8001654:	4843      	ldr	r0, [pc, #268]	; (8001764 <main+0x15c>)
 8001656:	f7ff fbc1 	bl	8000ddc <ds18b20_read_address>
 800165a:	b108      	cbz	r0, 8001660 <main+0x58>
 800165c:	b672      	cpsid	i
  while (1)
 800165e:	e7fe      	b.n	800165e <main+0x56>
  SMSUartTxState = Reset;
 8001660:	4b41      	ldr	r3, [pc, #260]	; (8001768 <main+0x160>)
 8001662:	2200      	movs	r2, #0
 8001664:	701a      	strb	r2, [r3, #0]
  LastTickForSim800 = HAL_GetTick();
 8001666:	f000 fcf5 	bl	8002054 <HAL_GetTick>
 800166a:	4b40      	ldr	r3, [pc, #256]	; (800176c <main+0x164>)
 800166c:	6018      	str	r0, [r3, #0]
  LastTickTempMeasure = HAL_GetTick();
 800166e:	f000 fcf1 	bl	8002054 <HAL_GetTick>
 8001672:	4b3f      	ldr	r3, [pc, #252]	; (8001770 <main+0x168>)
 8001674:	6018      	str	r0, [r3, #0]
  memcpy(GSM.FlashBuff, 0x0801FC00, 128*4);
 8001676:	f44f 7200 	mov.w	r2, #512	; 0x200
 800167a:	493e      	ldr	r1, [pc, #248]	; (8001774 <main+0x16c>)
 800167c:	483e      	ldr	r0, [pc, #248]	; (8001778 <main+0x170>)
 800167e:	f005 fa57 	bl	8006b30 <memcpy>
  HAL_TIM_Base_Start_IT(&htim3);
 8001682:	483e      	ldr	r0, [pc, #248]	; (800177c <main+0x174>)
 8001684:	f002 fc26 	bl	8003ed4 <HAL_TIM_Base_Start_IT>
		  if(!tempMeasureFlag)
 8001688:	4f3d      	ldr	r7, [pc, #244]	; (8001780 <main+0x178>)
	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GSM.ReceivedState);
 800168a:	4e3e      	ldr	r6, [pc, #248]	; (8001784 <main+0x17c>)
			  temperature = ds18b20_get_temp_wo_fp(NULL);
 800168c:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 8001788 <main+0x180>
 8001690:	e060      	b.n	8001754 <main+0x14c>
 8001692:	2000      	movs	r0, #0
 8001694:	f7ff fbc2 	bl	8000e1c <ds18b20_get_temp_wo_fp>
 8001698:	f8c8 0000 	str.w	r0, [r8]
			  tempMeasureFlag = 0;
 800169c:	2300      	movs	r3, #0
 800169e:	703b      	strb	r3, [r7, #0]
 80016a0:	e02e      	b.n	8001700 <main+0xf8>
		  Parser_TakeLine(&ReceiveBuffer, ReceivedData);
 80016a2:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 800178c <main+0x184>
 80016a6:	4649      	mov	r1, r9
 80016a8:	4839      	ldr	r0, [pc, #228]	; (8001790 <main+0x188>)
 80016aa:	f000 f8bf 	bl	800182c <Parser_TakeLine>
		  LineCounter--;
 80016ae:	4a39      	ldr	r2, [pc, #228]	; (8001794 <main+0x18c>)
 80016b0:	7813      	ldrb	r3, [r2, #0]
 80016b2:	3b01      	subs	r3, #1
 80016b4:	7013      	strb	r3, [r2, #0]
		  Parser_parse(ReceivedData);
 80016b6:	4648      	mov	r0, r9
 80016b8:	f000 f8d2 	bl	8001860 <Parser_parse>
 80016bc:	e024      	b.n	8001708 <main+0x100>
		  Parser_TakeLine(&USBConfBuffer, ReceivedData);
 80016be:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 800178c <main+0x184>
 80016c2:	4649      	mov	r1, r9
 80016c4:	4834      	ldr	r0, [pc, #208]	; (8001798 <main+0x190>)
 80016c6:	f000 f8b1 	bl	800182c <Parser_TakeLine>
		  USBLineCounter--;
 80016ca:	4a34      	ldr	r2, [pc, #208]	; (800179c <main+0x194>)
 80016cc:	7813      	ldrb	r3, [r2, #0]
 80016ce:	3b01      	subs	r3, #1
 80016d0:	7013      	strb	r3, [r2, #0]
		  Parser_parse(ReceivedData);
 80016d2:	4648      	mov	r0, r9
 80016d4:	f000 f8c4 	bl	8001860 <Parser_parse>
 80016d8:	e01a      	b.n	8001710 <main+0x108>
	  if(SMSUartTxState != Idle && HAL_GetTick() - GSM.LastTickReceive >= 30000)
 80016da:	4b23      	ldr	r3, [pc, #140]	; (8001768 <main+0x160>)
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	2b06      	cmp	r3, #6
 80016e0:	d127      	bne.n	8001732 <main+0x12a>
	  if(HAL_GetTick() - LastTickTempMeasure >= 800)
 80016e2:	f000 fcb7 	bl	8002054 <HAL_GetTick>
 80016e6:	682b      	ldr	r3, [r5, #0]
 80016e8:	1ac0      	subs	r0, r0, r3
 80016ea:	f5b0 7f48 	cmp.w	r0, #800	; 0x320
 80016ee:	d307      	bcc.n	8001700 <main+0xf8>
		  if(!tempMeasureFlag)
 80016f0:	783b      	ldrb	r3, [r7, #0]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d1cd      	bne.n	8001692 <main+0x8a>
			  ds18b20_start_measure(NULL);
 80016f6:	2000      	movs	r0, #0
 80016f8:	f7ff fb8b 	bl	8000e12 <ds18b20_start_measure>
			  tempMeasureFlag = 1;
 80016fc:	2301      	movs	r3, #1
 80016fe:	703b      	strb	r3, [r7, #0]
	  if(LineCounter)
 8001700:	4b24      	ldr	r3, [pc, #144]	; (8001794 <main+0x18c>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d1cc      	bne.n	80016a2 <main+0x9a>
	  if(USBLineCounter)
 8001708:	4b24      	ldr	r3, [pc, #144]	; (800179c <main+0x194>)
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d1d6      	bne.n	80016be <main+0xb6>
	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GSM.ReceivedState);
 8001710:	7a22      	ldrb	r2, [r4, #8]
 8001712:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001716:	4630      	mov	r0, r6
 8001718:	f001 f806 	bl	8002728 <HAL_GPIO_WritePin>
	  CommStateMachineTask();
 800171c:	f7ff fcf2 	bl	8001104 <CommStateMachineTask>
	  if(GSM.ErrorCounter > 10)
 8001720:	f894 320c 	ldrb.w	r3, [r4, #524]	; 0x20c
 8001724:	2b0a      	cmp	r3, #10
 8001726:	d9d8      	bls.n	80016da <main+0xd2>
		  SMSUartTxState = Reset;
 8001728:	2300      	movs	r3, #0
 800172a:	4a0f      	ldr	r2, [pc, #60]	; (8001768 <main+0x160>)
 800172c:	7013      	strb	r3, [r2, #0]
		  GSM.ErrorCounter = 0;
 800172e:	f884 320c 	strb.w	r3, [r4, #524]	; 0x20c
	  if(SMSUartTxState != Idle && HAL_GetTick() - GSM.LastTickReceive >= 30000)
 8001732:	f000 fc8f 	bl	8002054 <HAL_GetTick>
 8001736:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
 800173a:	1ac0      	subs	r0, r0, r3
 800173c:	f247 532f 	movw	r3, #29999	; 0x752f
 8001740:	4298      	cmp	r0, r3
 8001742:	d9ce      	bls.n	80016e2 <main+0xda>
		  SMSUartTxState = Reset;
 8001744:	4b08      	ldr	r3, [pc, #32]	; (8001768 <main+0x160>)
 8001746:	2200      	movs	r2, #0
 8001748:	701a      	strb	r2, [r3, #0]
		  GSM.LastTickReceive = HAL_GetTick();
 800174a:	f000 fc83 	bl	8002054 <HAL_GetTick>
 800174e:	4b14      	ldr	r3, [pc, #80]	; (80017a0 <main+0x198>)
 8001750:	f8c3 0210 	str.w	r0, [r3, #528]	; 0x210
	  if(HAL_GetTick() - LastTickTempMeasure >= 800)
 8001754:	4d06      	ldr	r5, [pc, #24]	; (8001770 <main+0x168>)
	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GSM.ReceivedState);
 8001756:	4c12      	ldr	r4, [pc, #72]	; (80017a0 <main+0x198>)
 8001758:	e7c3      	b.n	80016e2 <main+0xda>
 800175a:	bf00      	nop
 800175c:	20001328 	.word	0x20001328
 8001760:	20001774 	.word	0x20001774
 8001764:	200016c8 	.word	0x200016c8
 8001768:	200014b8 	.word	0x200014b8
 800176c:	20001118 	.word	0x20001118
 8001770:	2000111c 	.word	0x2000111c
 8001774:	0801fc00 	.word	0x0801fc00
 8001778:	20000f0c 	.word	0x20000f0c
 800177c:	200016e4 	.word	0x200016e4
 8001780:	200016d4 	.word	0x200016d4
 8001784:	40011000 	.word	0x40011000
 8001788:	200016d8 	.word	0x200016d8
 800178c:	2000132c 	.word	0x2000132c
 8001790:	20001124 	.word	0x20001124
 8001794:	20001120 	.word	0x20001120
 8001798:	200014c0 	.word	0x200014c0
 800179c:	200016c4 	.word	0x200016c4
 80017a0:	20000f00 	.word	0x20000f00

080017a4 <CDC_ReveiveCallback>:
	if(Length > 0)
 80017a4:	2900      	cmp	r1, #0
 80017a6:	d03a      	beq.n	800181e <CDC_ReveiveCallback+0x7a>
{
 80017a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017aa:	b083      	sub	sp, #12
 80017ac:	4604      	mov	r4, r0
 80017ae:	460d      	mov	r5, r1
			volatile uint8_t i = 0;
 80017b0:	2300      	movs	r3, #0
 80017b2:	f88d 3007 	strb.w	r3, [sp, #7]
			while(i < Length)
 80017b6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80017ba:	b2db      	uxtb	r3, r3
 80017bc:	4299      	cmp	r1, r3
 80017be:	d92c      	bls.n	800181a <CDC_ReveiveCallback+0x76>
					if (RB_OK == Ring_Buffer_Write(&USBConfBuffer, Buffer[i]))
 80017c0:	4e17      	ldr	r6, [pc, #92]	; (8001820 <CDC_ReveiveCallback+0x7c>)
							USBLineCounter++;
 80017c2:	4f18      	ldr	r7, [pc, #96]	; (8001824 <CDC_ReveiveCallback+0x80>)
 80017c4:	e018      	b.n	80017f8 <CDC_ReveiveCallback+0x54>
					if (RB_OK == Ring_Buffer_Write(&USBConfBuffer, Buffer[i]))
 80017c6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	5ce1      	ldrb	r1, [r4, r3]
 80017ce:	4630      	mov	r0, r6
 80017d0:	f000 f9a1 	bl	8001b16 <Ring_Buffer_Write>
 80017d4:	b958      	cbnz	r0, 80017ee <CDC_ReveiveCallback+0x4a>
						if(Buffer[i] == ENDLINE)
 80017d6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	5ce3      	ldrb	r3, [r4, r3]
 80017de:	2b0a      	cmp	r3, #10
 80017e0:	d017      	beq.n	8001812 <CDC_ReveiveCallback+0x6e>
						i++;
 80017e2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80017e6:	3301      	adds	r3, #1
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	f88d 3007 	strb.w	r3, [sp, #7]
			while(i < Length)
 80017ee:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80017f2:	b2db      	uxtb	r3, r3
 80017f4:	42ab      	cmp	r3, r5
 80017f6:	d210      	bcs.n	800181a <CDC_ReveiveCallback+0x76>
				if(Buffer[i] != '\r')
 80017f8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	5ce3      	ldrb	r3, [r4, r3]
 8001800:	2b0d      	cmp	r3, #13
 8001802:	d1e0      	bne.n	80017c6 <CDC_ReveiveCallback+0x22>
				else i++;
 8001804:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001808:	3301      	adds	r3, #1
 800180a:	b2db      	uxtb	r3, r3
 800180c:	f88d 3007 	strb.w	r3, [sp, #7]
 8001810:	e7ed      	b.n	80017ee <CDC_ReveiveCallback+0x4a>
							USBLineCounter++;
 8001812:	783b      	ldrb	r3, [r7, #0]
 8001814:	3301      	adds	r3, #1
 8001816:	703b      	strb	r3, [r7, #0]
 8001818:	e7e3      	b.n	80017e2 <CDC_ReveiveCallback+0x3e>
}
 800181a:	b003      	add	sp, #12
 800181c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800181e:	4770      	bx	lr
 8001820:	200014c0 	.word	0x200014c0
 8001824:	200016c4 	.word	0x200016c4

08001828 <Error_Handler>:
 8001828:	b672      	cpsid	i
  while (1)
 800182a:	e7fe      	b.n	800182a <Error_Handler+0x2>

0800182c <Parser_TakeLine>:
#include "stdlib.h"
#include "FLASH_PAGE_F1.h"


void Parser_TakeLine(RingBuffer_t *Buff, uint8_t *Destination)
{
 800182c:	b570      	push	{r4, r5, r6, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	4606      	mov	r6, r0
 8001832:	460d      	mov	r5, r1
	  uint8_t i = 0;
	  uint8_t tmp = 0;
 8001834:	2400      	movs	r4, #0
 8001836:	f88d 4007 	strb.w	r4, [sp, #7]
 800183a:	e002      	b.n	8001842 <Parser_TakeLine+0x16>
			{
			 Destination[i] = 0;
			}
		else
			{
			Destination[i] = tmp;
 800183c:	b2e4      	uxtb	r4, r4
 800183e:	552b      	strb	r3, [r5, r4]
 8001840:	4614      	mov	r4, r2
		 Ring_Buffer_Read(Buff, &tmp);
 8001842:	f10d 0107 	add.w	r1, sp, #7
 8001846:	4630      	mov	r0, r6
 8001848:	f000 f950 	bl	8001aec <Ring_Buffer_Read>
		 if(tmp == ENDLINE)
 800184c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001850:	1c62      	adds	r2, r4, #1
 8001852:	2b0a      	cmp	r3, #10
 8001854:	d1f2      	bne.n	800183c <Parser_TakeLine+0x10>
			 Destination[i] = 0;
 8001856:	b2e4      	uxtb	r4, r4
 8001858:	2300      	movs	r3, #0
 800185a:	552b      	strb	r3, [r5, r4]
			}

			i++;

	} while(tmp != ENDLINE);
}
 800185c:	b002      	add	sp, #8
 800185e:	bd70      	pop	{r4, r5, r6, pc}

08001860 <Parser_parse>:
	second = atoi(ParsePointer);
}


void Parser_parse(uint8_t * DataToParse)
{
 8001860:	b538      	push	{r3, r4, r5, lr}
 8001862:	4604      	mov	r4, r0

	if(strcmp("OK", (char*)DataToParse) == 0)
 8001864:	4601      	mov	r1, r0
 8001866:	487b      	ldr	r0, [pc, #492]	; (8001a54 <Parser_parse+0x1f4>)
 8001868:	f7fe fc72 	bl	8000150 <strcmp>
 800186c:	b918      	cbnz	r0, 8001876 <Parser_parse+0x16>
	{
		GSM.ReceivedState = 1;
 800186e:	4b7a      	ldr	r3, [pc, #488]	; (8001a58 <Parser_parse+0x1f8>)
 8001870:	2201      	movs	r2, #1
 8001872:	721a      	strb	r2, [r3, #8]
//	  	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
//	  	UartLog("led_off\n\r");
//	  }


}
 8001874:	bd38      	pop	{r3, r4, r5, pc}
	else if(strcmp("save", (char*)DataToParse) == 0)
 8001876:	4621      	mov	r1, r4
 8001878:	4878      	ldr	r0, [pc, #480]	; (8001a5c <Parser_parse+0x1fc>)
 800187a:	f7fe fc69 	bl	8000150 <strcmp>
 800187e:	b180      	cbz	r0, 80018a2 <Parser_parse+0x42>
	else if(strcmp("log", (char*)DataToParse) == 0)
 8001880:	4621      	mov	r1, r4
 8001882:	4877      	ldr	r0, [pc, #476]	; (8001a60 <Parser_parse+0x200>)
 8001884:	f7fe fc64 	bl	8000150 <strcmp>
 8001888:	b188      	cbz	r0, 80018ae <Parser_parse+0x4e>
	else if(strcmp("ERROR", (char*)DataToParse) == 0)
 800188a:	4621      	mov	r1, r4
 800188c:	4875      	ldr	r0, [pc, #468]	; (8001a64 <Parser_parse+0x204>)
 800188e:	f7fe fc5f 	bl	8000150 <strcmp>
 8001892:	b9b8      	cbnz	r0, 80018c4 <Parser_parse+0x64>
		GSM.ErrorCounter++;
 8001894:	4a70      	ldr	r2, [pc, #448]	; (8001a58 <Parser_parse+0x1f8>)
 8001896:	f892 320c 	ldrb.w	r3, [r2, #524]	; 0x20c
 800189a:	3301      	adds	r3, #1
 800189c:	f882 320c 	strb.w	r3, [r2, #524]	; 0x20c
 80018a0:	e7e8      	b.n	8001874 <Parser_parse+0x14>
		Flash_Write_Data(0x0801FC00, GSM.FlashBuff, 128);
 80018a2:	2280      	movs	r2, #128	; 0x80
 80018a4:	4970      	ldr	r1, [pc, #448]	; (8001a68 <Parser_parse+0x208>)
 80018a6:	4871      	ldr	r0, [pc, #452]	; (8001a6c <Parser_parse+0x20c>)
 80018a8:	f7ff fa20 	bl	8000cec <Flash_Write_Data>
 80018ac:	e7e2      	b.n	8001874 <Parser_parse+0x14>
		sprintf(SMSMessage, "CSQ: %.1f", GSM.SignalQuality);
 80018ae:	4b6a      	ldr	r3, [pc, #424]	; (8001a58 <Parser_parse+0x1f8>)
 80018b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018b4:	496e      	ldr	r1, [pc, #440]	; (8001a70 <Parser_parse+0x210>)
 80018b6:	486f      	ldr	r0, [pc, #444]	; (8001a74 <Parser_parse+0x214>)
 80018b8:	f005 fdb0 	bl	800741c <siprintf>
		SMSUartTxState = SMSMsgWrite;
 80018bc:	4b6e      	ldr	r3, [pc, #440]	; (8001a78 <Parser_parse+0x218>)
 80018be:	2204      	movs	r2, #4
 80018c0:	701a      	strb	r2, [r3, #0]
 80018c2:	e7d7      	b.n	8001874 <Parser_parse+0x14>
		char * ParsePointer = strtok((char*)DataToParse, " ");
 80018c4:	496d      	ldr	r1, [pc, #436]	; (8001a7c <Parser_parse+0x21c>)
 80018c6:	4620      	mov	r0, r4
 80018c8:	f006 fbf6 	bl	80080b8 <strtok>
 80018cc:	4604      	mov	r4, r0
		if(strcmp("+CSQ:", ParsePointer) == 0)
 80018ce:	4601      	mov	r1, r0
 80018d0:	486b      	ldr	r0, [pc, #428]	; (8001a80 <Parser_parse+0x220>)
 80018d2:	f7fe fc3d 	bl	8000150 <strcmp>
 80018d6:	2800      	cmp	r0, #0
 80018d8:	d03f      	beq.n	800195a <Parser_parse+0xfa>
		else if(strcmp("+CREG:", ParsePointer) == 0)
 80018da:	4621      	mov	r1, r4
 80018dc:	4869      	ldr	r0, [pc, #420]	; (8001a84 <Parser_parse+0x224>)
 80018de:	f7fe fc37 	bl	8000150 <strcmp>
 80018e2:	2800      	cmp	r0, #0
 80018e4:	d042      	beq.n	800196c <Parser_parse+0x10c>
		else if(strcmp("+CCLK:", ParsePointer) == 0)
 80018e6:	4621      	mov	r1, r4
 80018e8:	4867      	ldr	r0, [pc, #412]	; (8001a88 <Parser_parse+0x228>)
 80018ea:	f7fe fc31 	bl	8000150 <strcmp>
 80018ee:	2800      	cmp	r0, #0
 80018f0:	d04c      	beq.n	800198c <Parser_parse+0x12c>
		else if(strcmp("login:", ParsePointer) == 0)
 80018f2:	4621      	mov	r1, r4
 80018f4:	4865      	ldr	r0, [pc, #404]	; (8001a8c <Parser_parse+0x22c>)
 80018f6:	f7fe fc2b 	bl	8000150 <strcmp>
 80018fa:	2800      	cmp	r0, #0
 80018fc:	d079      	beq.n	80019f2 <Parser_parse+0x192>
		else if(strcmp("password:", ParsePointer) == 0)
 80018fe:	4621      	mov	r1, r4
 8001900:	4863      	ldr	r0, [pc, #396]	; (8001a90 <Parser_parse+0x230>)
 8001902:	f7fe fc25 	bl	8000150 <strcmp>
 8001906:	2800      	cmp	r0, #0
 8001908:	d07b      	beq.n	8001a02 <Parser_parse+0x1a2>
		else if(strcmp("server:", ParsePointer) == 0)
 800190a:	4621      	mov	r1, r4
 800190c:	4861      	ldr	r0, [pc, #388]	; (8001a94 <Parser_parse+0x234>)
 800190e:	f7fe fc1f 	bl	8000150 <strcmp>
 8001912:	2800      	cmp	r0, #0
 8001914:	d07d      	beq.n	8001a12 <Parser_parse+0x1b2>
		else if(strcmp("path:", ParsePointer) == 0)
 8001916:	4621      	mov	r1, r4
 8001918:	485f      	ldr	r0, [pc, #380]	; (8001a98 <Parser_parse+0x238>)
 800191a:	f7fe fc19 	bl	8000150 <strcmp>
 800191e:	2800      	cmp	r0, #0
 8001920:	d07f      	beq.n	8001a22 <Parser_parse+0x1c2>
		else if(strcmp("device:", ParsePointer) == 0)
 8001922:	4621      	mov	r1, r4
 8001924:	485d      	ldr	r0, [pc, #372]	; (8001a9c <Parser_parse+0x23c>)
 8001926:	f7fe fc13 	bl	8000150 <strcmp>
 800192a:	2800      	cmp	r0, #0
 800192c:	f000 8081 	beq.w	8001a32 <Parser_parse+0x1d2>
		else if(strcmp("number1:", ParsePointer) == 0)
 8001930:	4621      	mov	r1, r4
 8001932:	485b      	ldr	r0, [pc, #364]	; (8001aa0 <Parser_parse+0x240>)
 8001934:	f7fe fc0c 	bl	8000150 <strcmp>
 8001938:	2800      	cmp	r0, #0
 800193a:	f000 8082 	beq.w	8001a42 <Parser_parse+0x1e2>
		else if(strcmp("number2:", ParsePointer) == 0)
 800193e:	4621      	mov	r1, r4
 8001940:	4858      	ldr	r0, [pc, #352]	; (8001aa4 <Parser_parse+0x244>)
 8001942:	f7fe fc05 	bl	8000150 <strcmp>
 8001946:	2800      	cmp	r0, #0
 8001948:	d194      	bne.n	8001874 <Parser_parse+0x14>
			ParsePointer = strtok(NULL, "\r");
 800194a:	4957      	ldr	r1, [pc, #348]	; (8001aa8 <Parser_parse+0x248>)
 800194c:	f006 fbb4 	bl	80080b8 <strtok>
 8001950:	4601      	mov	r1, r0
			strcpy(GSM.ConfigFlash.number2, ParsePointer);
 8001952:	4856      	ldr	r0, [pc, #344]	; (8001aac <Parser_parse+0x24c>)
 8001954:	f005 fd91 	bl	800747a <strcpy>
}
 8001958:	e78c      	b.n	8001874 <Parser_parse+0x14>
	char * ParsePointer = strtok(NULL, ",");
 800195a:	4955      	ldr	r1, [pc, #340]	; (8001ab0 <Parser_parse+0x250>)
 800195c:	f006 fbac 	bl	80080b8 <strtok>
	GSM.SignalQuality = atof(ParsePointer);
 8001960:	f005 f8b4 	bl	8006acc <atof>
 8001964:	4b3c      	ldr	r3, [pc, #240]	; (8001a58 <Parser_parse+0x1f8>)
 8001966:	e9c3 0100 	strd	r0, r1, [r3]
}
 800196a:	e783      	b.n	8001874 <Parser_parse+0x14>
	char * ParsePointer = strtok(NULL, ",");
 800196c:	4d50      	ldr	r5, [pc, #320]	; (8001ab0 <Parser_parse+0x250>)
 800196e:	4629      	mov	r1, r5
 8001970:	f006 fba2 	bl	80080b8 <strtok>
	GSM.CRegN = atoi(ParsePointer);
 8001974:	f005 f8ad 	bl	8006ad2 <atoi>
 8001978:	4c37      	ldr	r4, [pc, #220]	; (8001a58 <Parser_parse+0x1f8>)
 800197a:	7260      	strb	r0, [r4, #9]
	ParsePointer = strtok(NULL, ",");
 800197c:	4629      	mov	r1, r5
 800197e:	2000      	movs	r0, #0
 8001980:	f006 fb9a 	bl	80080b8 <strtok>
	GSM.CRegStat = atoi(ParsePointer);
 8001984:	f005 f8a5 	bl	8006ad2 <atoi>
 8001988:	72a0      	strb	r0, [r4, #10]
}
 800198a:	e773      	b.n	8001874 <Parser_parse+0x14>
	char * ParsePointer = strtok(NULL, "/");
 800198c:	4c49      	ldr	r4, [pc, #292]	; (8001ab4 <Parser_parse+0x254>)
 800198e:	4621      	mov	r1, r4
 8001990:	f006 fb92 	bl	80080b8 <strtok>
	year = atoi(ParsePointer+1);
 8001994:	3001      	adds	r0, #1
 8001996:	f005 f89c 	bl	8006ad2 <atoi>
 800199a:	4b47      	ldr	r3, [pc, #284]	; (8001ab8 <Parser_parse+0x258>)
 800199c:	7018      	strb	r0, [r3, #0]
	ParsePointer = strtok(NULL, "/");
 800199e:	4621      	mov	r1, r4
 80019a0:	2000      	movs	r0, #0
 80019a2:	f006 fb89 	bl	80080b8 <strtok>
	month = atoi(ParsePointer);
 80019a6:	f005 f894 	bl	8006ad2 <atoi>
 80019aa:	4b44      	ldr	r3, [pc, #272]	; (8001abc <Parser_parse+0x25c>)
 80019ac:	7018      	strb	r0, [r3, #0]
	ParsePointer = strtok(NULL, ",");
 80019ae:	4940      	ldr	r1, [pc, #256]	; (8001ab0 <Parser_parse+0x250>)
 80019b0:	2000      	movs	r0, #0
 80019b2:	f006 fb81 	bl	80080b8 <strtok>
	day = atoi(ParsePointer);
 80019b6:	f005 f88c 	bl	8006ad2 <atoi>
 80019ba:	4b41      	ldr	r3, [pc, #260]	; (8001ac0 <Parser_parse+0x260>)
 80019bc:	7018      	strb	r0, [r3, #0]
	ParsePointer = strtok(NULL, ":");
 80019be:	4c41      	ldr	r4, [pc, #260]	; (8001ac4 <Parser_parse+0x264>)
 80019c0:	4621      	mov	r1, r4
 80019c2:	2000      	movs	r0, #0
 80019c4:	f006 fb78 	bl	80080b8 <strtok>
	hour = atoi(ParsePointer);
 80019c8:	f005 f883 	bl	8006ad2 <atoi>
 80019cc:	4b3e      	ldr	r3, [pc, #248]	; (8001ac8 <Parser_parse+0x268>)
 80019ce:	7018      	strb	r0, [r3, #0]
	ParsePointer = strtok(NULL, ":");
 80019d0:	4621      	mov	r1, r4
 80019d2:	2000      	movs	r0, #0
 80019d4:	f006 fb70 	bl	80080b8 <strtok>
	minute = atoi(ParsePointer);
 80019d8:	f005 f87b 	bl	8006ad2 <atoi>
 80019dc:	4b3b      	ldr	r3, [pc, #236]	; (8001acc <Parser_parse+0x26c>)
 80019de:	7018      	strb	r0, [r3, #0]
	ParsePointer = strtok(NULL, "+");
 80019e0:	493b      	ldr	r1, [pc, #236]	; (8001ad0 <Parser_parse+0x270>)
 80019e2:	2000      	movs	r0, #0
 80019e4:	f006 fb68 	bl	80080b8 <strtok>
	second = atoi(ParsePointer);
 80019e8:	f005 f873 	bl	8006ad2 <atoi>
 80019ec:	4b39      	ldr	r3, [pc, #228]	; (8001ad4 <Parser_parse+0x274>)
 80019ee:	7018      	strb	r0, [r3, #0]
}
 80019f0:	e740      	b.n	8001874 <Parser_parse+0x14>
			ParsePointer = strtok(NULL, "\r");
 80019f2:	492d      	ldr	r1, [pc, #180]	; (8001aa8 <Parser_parse+0x248>)
 80019f4:	f006 fb60 	bl	80080b8 <strtok>
 80019f8:	4601      	mov	r1, r0
			strcpy(GSM.ConfigFlash.login, ParsePointer);
 80019fa:	481b      	ldr	r0, [pc, #108]	; (8001a68 <Parser_parse+0x208>)
 80019fc:	f005 fd3d 	bl	800747a <strcpy>
 8001a00:	e738      	b.n	8001874 <Parser_parse+0x14>
			ParsePointer = strtok(NULL, "\r");
 8001a02:	4929      	ldr	r1, [pc, #164]	; (8001aa8 <Parser_parse+0x248>)
 8001a04:	f006 fb58 	bl	80080b8 <strtok>
 8001a08:	4601      	mov	r1, r0
			strcpy(GSM.ConfigFlash.password, ParsePointer);
 8001a0a:	4833      	ldr	r0, [pc, #204]	; (8001ad8 <Parser_parse+0x278>)
 8001a0c:	f005 fd35 	bl	800747a <strcpy>
 8001a10:	e730      	b.n	8001874 <Parser_parse+0x14>
			ParsePointer = strtok(NULL, "\r");
 8001a12:	4925      	ldr	r1, [pc, #148]	; (8001aa8 <Parser_parse+0x248>)
 8001a14:	f006 fb50 	bl	80080b8 <strtok>
 8001a18:	4601      	mov	r1, r0
			strcpy(GSM.ConfigFlash.server, ParsePointer);
 8001a1a:	4830      	ldr	r0, [pc, #192]	; (8001adc <Parser_parse+0x27c>)
 8001a1c:	f005 fd2d 	bl	800747a <strcpy>
 8001a20:	e728      	b.n	8001874 <Parser_parse+0x14>
			ParsePointer = strtok(NULL, "\r");
 8001a22:	4921      	ldr	r1, [pc, #132]	; (8001aa8 <Parser_parse+0x248>)
 8001a24:	f006 fb48 	bl	80080b8 <strtok>
 8001a28:	4601      	mov	r1, r0
			strcpy(GSM.ConfigFlash.path, ParsePointer);
 8001a2a:	482d      	ldr	r0, [pc, #180]	; (8001ae0 <Parser_parse+0x280>)
 8001a2c:	f005 fd25 	bl	800747a <strcpy>
 8001a30:	e720      	b.n	8001874 <Parser_parse+0x14>
			ParsePointer = strtok(NULL, "\r");
 8001a32:	491d      	ldr	r1, [pc, #116]	; (8001aa8 <Parser_parse+0x248>)
 8001a34:	f006 fb40 	bl	80080b8 <strtok>
 8001a38:	4601      	mov	r1, r0
			strcpy(GSM.ConfigFlash.deviceNumber, ParsePointer);
 8001a3a:	482a      	ldr	r0, [pc, #168]	; (8001ae4 <Parser_parse+0x284>)
 8001a3c:	f005 fd1d 	bl	800747a <strcpy>
 8001a40:	e718      	b.n	8001874 <Parser_parse+0x14>
			ParsePointer = strtok(NULL, "\r");
 8001a42:	4919      	ldr	r1, [pc, #100]	; (8001aa8 <Parser_parse+0x248>)
 8001a44:	f006 fb38 	bl	80080b8 <strtok>
 8001a48:	4601      	mov	r1, r0
			strcpy(GSM.ConfigFlash.number1, ParsePointer);
 8001a4a:	4827      	ldr	r0, [pc, #156]	; (8001ae8 <Parser_parse+0x288>)
 8001a4c:	f005 fd15 	bl	800747a <strcpy>
 8001a50:	e710      	b.n	8001874 <Parser_parse+0x14>
 8001a52:	bf00      	nop
 8001a54:	0800b28c 	.word	0x0800b28c
 8001a58:	20000f00 	.word	0x20000f00
 8001a5c:	0800b290 	.word	0x0800b290
 8001a60:	0800b298 	.word	0x0800b298
 8001a64:	0800b2a8 	.word	0x0800b2a8
 8001a68:	20000f0c 	.word	0x20000f0c
 8001a6c:	0801fc00 	.word	0x0801fc00
 8001a70:	0800b29c 	.word	0x0800b29c
 8001a74:	2000142c 	.word	0x2000142c
 8001a78:	200014b8 	.word	0x200014b8
 8001a7c:	0800b2b0 	.word	0x0800b2b0
 8001a80:	0800b2b4 	.word	0x0800b2b4
 8001a84:	0800b2c0 	.word	0x0800b2c0
 8001a88:	0800b2c8 	.word	0x0800b2c8
 8001a8c:	0800b2d8 	.word	0x0800b2d8
 8001a90:	0800b2e4 	.word	0x0800b2e4
 8001a94:	0800b2f0 	.word	0x0800b2f0
 8001a98:	0800b2f8 	.word	0x0800b2f8
 8001a9c:	0800b300 	.word	0x0800b300
 8001aa0:	0800b308 	.word	0x0800b308
 8001aa4:	0800b314 	.word	0x0800b314
 8001aa8:	0800b2e0 	.word	0x0800b2e0
 8001aac:	20000fbc 	.word	0x20000fbc
 8001ab0:	0800b2bc 	.word	0x0800b2bc
 8001ab4:	0800b2d0 	.word	0x0800b2d0
 8001ab8:	200016dd 	.word	0x200016dd
 8001abc:	200016d2 	.word	0x200016d2
 8001ac0:	200016c6 	.word	0x200016c6
 8001ac4:	0800b2b8 	.word	0x0800b2b8
 8001ac8:	200016d0 	.word	0x200016d0
 8001acc:	200016d1 	.word	0x200016d1
 8001ad0:	0800b2d4 	.word	0x0800b2d4
 8001ad4:	200016d3 	.word	0x200016d3
 8001ad8:	20000f2a 	.word	0x20000f2a
 8001adc:	20000f48 	.word	0x20000f48
 8001ae0:	20000f7a 	.word	0x20000f7a
 8001ae4:	20000fcc 	.word	0x20000fcc
 8001ae8:	20000fac 	.word	0x20000fac

08001aec <Ring_Buffer_Read>:
#include "main.h"
#include "ring_buffer.h"

RbStatus_t Ring_Buffer_Read(RingBuffer_t * Buff, uint8_t *value)
{
	if(Buff->Head == Buff->Tail)
 8001aec:	8843      	ldrh	r3, [r0, #2]
 8001aee:	8802      	ldrh	r2, [r0, #0]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d00e      	beq.n	8001b12 <Ring_Buffer_Read+0x26>
	{
		return RB_ERROR;
	}
	*value = Buff->Buffer[Buff->Tail];
 8001af4:	4403      	add	r3, r0
 8001af6:	791b      	ldrb	r3, [r3, #4]
 8001af8:	700b      	strb	r3, [r1, #0]

	Buff->Tail = (Buff->Tail + 1) % RING_BUFFER_SIZE;
 8001afa:	8843      	ldrh	r3, [r0, #2]
 8001afc:	3301      	adds	r3, #1
 8001afe:	425a      	negs	r2, r3
 8001b00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001b08:	bf58      	it	pl
 8001b0a:	4253      	negpl	r3, r2
 8001b0c:	8043      	strh	r3, [r0, #2]

	return RB_OK;
 8001b0e:	2000      	movs	r0, #0
 8001b10:	4770      	bx	lr
		return RB_ERROR;
 8001b12:	2001      	movs	r0, #1
}
 8001b14:	4770      	bx	lr

08001b16 <Ring_Buffer_Write>:

RbStatus_t Ring_Buffer_Write(RingBuffer_t * Buff, uint8_t value)
{
	uint16_t Head_tmp = (Buff->Head + 1) % RING_BUFFER_SIZE;
 8001b16:	8802      	ldrh	r2, [r0, #0]
 8001b18:	1c53      	adds	r3, r2, #1
 8001b1a:	f1d3 0c00 	rsbs	ip, r3, #0
 8001b1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b22:	f3cc 0c08 	ubfx	ip, ip, #0, #9
 8001b26:	bf58      	it	pl
 8001b28:	f1cc 0300 	rsbpl	r3, ip, #0
 8001b2c:	b29b      	uxth	r3, r3

	if(Head_tmp == Buff->Tail)
 8001b2e:	f8b0 c002 	ldrh.w	ip, [r0, #2]
 8001b32:	459c      	cmp	ip, r3
 8001b34:	d004      	beq.n	8001b40 <Ring_Buffer_Write+0x2a>
	{
		return RB_ERROR;
	}
	Buff->Buffer[Buff->Head] = value;
 8001b36:	4402      	add	r2, r0
 8001b38:	7111      	strb	r1, [r2, #4]
	Buff->Head = Head_tmp;
 8001b3a:	8003      	strh	r3, [r0, #0]

	return RB_OK;
 8001b3c:	2000      	movs	r0, #0
 8001b3e:	4770      	bx	lr
		return RB_ERROR;
 8001b40:	2001      	movs	r0, #1
}
 8001b42:	4770      	bx	lr

08001b44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b44:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b46:	4b0a      	ldr	r3, [pc, #40]	; (8001b70 <HAL_MspInit+0x2c>)
 8001b48:	699a      	ldr	r2, [r3, #24]
 8001b4a:	f042 0201 	orr.w	r2, r2, #1
 8001b4e:	619a      	str	r2, [r3, #24]
 8001b50:	699a      	ldr	r2, [r3, #24]
 8001b52:	f002 0201 	and.w	r2, r2, #1
 8001b56:	9200      	str	r2, [sp, #0]
 8001b58:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b5a:	69da      	ldr	r2, [r3, #28]
 8001b5c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001b60:	61da      	str	r2, [r3, #28]
 8001b62:	69db      	ldr	r3, [r3, #28]
 8001b64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b68:	9301      	str	r3, [sp, #4]
 8001b6a:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b6c:	b002      	add	sp, #8
 8001b6e:	4770      	bx	lr
 8001b70:	40021000 	.word	0x40021000

08001b74 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b74:	e7fe      	b.n	8001b74 <NMI_Handler>

08001b76 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b76:	e7fe      	b.n	8001b76 <HardFault_Handler>

08001b78 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b78:	e7fe      	b.n	8001b78 <MemManage_Handler>

08001b7a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b7a:	e7fe      	b.n	8001b7a <BusFault_Handler>

08001b7c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b7c:	e7fe      	b.n	8001b7c <UsageFault_Handler>

08001b7e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b7e:	4770      	bx	lr

08001b80 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b80:	4770      	bx	lr

08001b82 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b82:	4770      	bx	lr

08001b84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b84:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b86:	f000 fa59 	bl	800203c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b8a:	bd08      	pop	{r3, pc}

08001b8c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001b8c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001b8e:	4802      	ldr	r0, [pc, #8]	; (8001b98 <USB_LP_CAN1_RX0_IRQHandler+0xc>)
 8001b90:	f000 fe83 	bl	800289a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001b94:	bd08      	pop	{r3, pc}
 8001b96:	bf00      	nop
 8001b98:	200020e8 	.word	0x200020e8

08001b9c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001b9c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001b9e:	4802      	ldr	r0, [pc, #8]	; (8001ba8 <TIM3_IRQHandler+0xc>)
 8001ba0:	f002 f9d0 	bl	8003f44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001ba4:	bd08      	pop	{r3, pc}
 8001ba6:	bf00      	nop
 8001ba8:	200016e4 	.word	0x200016e4

08001bac <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001bac:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001bae:	4802      	ldr	r0, [pc, #8]	; (8001bb8 <USART1_IRQHandler+0xc>)
 8001bb0:	f002 fe60 	bl	8004874 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001bb4:	bd08      	pop	{r3, pc}
 8001bb6:	bf00      	nop
 8001bb8:	20001774 	.word	0x20001774

08001bbc <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8001bbc:	2001      	movs	r0, #1
 8001bbe:	4770      	bx	lr

08001bc0 <_kill>:

int _kill(int pid, int sig)
{
 8001bc0:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001bc2:	f004 ff8b 	bl	8006adc <__errno>
 8001bc6:	2316      	movs	r3, #22
 8001bc8:	6003      	str	r3, [r0, #0]
  return -1;
}
 8001bca:	f04f 30ff 	mov.w	r0, #4294967295
 8001bce:	bd08      	pop	{r3, pc}

08001bd0 <_exit>:

void _exit (int status)
{
 8001bd0:	b508      	push	{r3, lr}
  errno = EINVAL;
 8001bd2:	f004 ff83 	bl	8006adc <__errno>
 8001bd6:	2316      	movs	r3, #22
 8001bd8:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 8001bda:	e7fe      	b.n	8001bda <_exit+0xa>

08001bdc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bdc:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bde:	1e16      	subs	r6, r2, #0
 8001be0:	dd07      	ble.n	8001bf2 <_read+0x16>
 8001be2:	460c      	mov	r4, r1
 8001be4:	198d      	adds	r5, r1, r6
  {
    *ptr++ = __io_getchar();
 8001be6:	f3af 8000 	nop.w
 8001bea:	f804 0b01 	strb.w	r0, [r4], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bee:	42a5      	cmp	r5, r4
 8001bf0:	d1f9      	bne.n	8001be6 <_read+0xa>
  }

  return len;
}
 8001bf2:	4630      	mov	r0, r6
 8001bf4:	bd70      	pop	{r4, r5, r6, pc}

08001bf6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bf6:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bf8:	1e16      	subs	r6, r2, #0
 8001bfa:	dd07      	ble.n	8001c0c <_write+0x16>
 8001bfc:	460c      	mov	r4, r1
 8001bfe:	198d      	adds	r5, r1, r6
  {
    __io_putchar(*ptr++);
 8001c00:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001c04:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c08:	42a5      	cmp	r5, r4
 8001c0a:	d1f9      	bne.n	8001c00 <_write+0xa>
  }
  return len;
}
 8001c0c:	4630      	mov	r0, r6
 8001c0e:	bd70      	pop	{r4, r5, r6, pc}

08001c10 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8001c10:	f04f 30ff 	mov.w	r0, #4294967295
 8001c14:	4770      	bx	lr

08001c16 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8001c16:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c1a:	604b      	str	r3, [r1, #4]
  return 0;
}
 8001c1c:	2000      	movs	r0, #0
 8001c1e:	4770      	bx	lr

08001c20 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8001c20:	2001      	movs	r0, #1
 8001c22:	4770      	bx	lr

08001c24 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8001c24:	2000      	movs	r0, #0
 8001c26:	4770      	bx	lr

08001c28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c28:	b508      	push	{r3, lr}
 8001c2a:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c2c:	4a0c      	ldr	r2, [pc, #48]	; (8001c60 <_sbrk+0x38>)
 8001c2e:	6812      	ldr	r2, [r2, #0]
 8001c30:	b152      	cbz	r2, 8001c48 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c32:	4a0b      	ldr	r2, [pc, #44]	; (8001c60 <_sbrk+0x38>)
 8001c34:	6810      	ldr	r0, [r2, #0]
 8001c36:	4403      	add	r3, r0
 8001c38:	4a0a      	ldr	r2, [pc, #40]	; (8001c64 <_sbrk+0x3c>)
 8001c3a:	490b      	ldr	r1, [pc, #44]	; (8001c68 <_sbrk+0x40>)
 8001c3c:	1a52      	subs	r2, r2, r1
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d806      	bhi.n	8001c50 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001c42:	4a07      	ldr	r2, [pc, #28]	; (8001c60 <_sbrk+0x38>)
 8001c44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8001c46:	bd08      	pop	{r3, pc}
    __sbrk_heap_end = &_end;
 8001c48:	4a05      	ldr	r2, [pc, #20]	; (8001c60 <_sbrk+0x38>)
 8001c4a:	4908      	ldr	r1, [pc, #32]	; (8001c6c <_sbrk+0x44>)
 8001c4c:	6011      	str	r1, [r2, #0]
 8001c4e:	e7f0      	b.n	8001c32 <_sbrk+0xa>
    errno = ENOMEM;
 8001c50:	f004 ff44 	bl	8006adc <__errno>
 8001c54:	230c      	movs	r3, #12
 8001c56:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001c58:	f04f 30ff 	mov.w	r0, #4294967295
 8001c5c:	e7f3      	b.n	8001c46 <_sbrk+0x1e>
 8001c5e:	bf00      	nop
 8001c60:	200016e0 	.word	0x200016e0
 8001c64:	20005000 	.word	0x20005000
 8001c68:	00001000 	.word	0x00001000
 8001c6c:	20002608 	.word	0x20002608

08001c70 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c70:	4770      	bx	lr
	...

08001c74 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001c74:	b500      	push	{lr}
 8001c76:	b087      	sub	sp, #28

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c78:	2300      	movs	r3, #0
 8001c7a:	9302      	str	r3, [sp, #8]
 8001c7c:	9303      	str	r3, [sp, #12]
 8001c7e:	9304      	str	r3, [sp, #16]
 8001c80:	9305      	str	r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c82:	9300      	str	r3, [sp, #0]
 8001c84:	9301      	str	r3, [sp, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c86:	4815      	ldr	r0, [pc, #84]	; (8001cdc <MX_TIM3_Init+0x68>)
 8001c88:	4a15      	ldr	r2, [pc, #84]	; (8001ce0 <MX_TIM3_Init+0x6c>)
 8001c8a:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 10659;
 8001c8c:	f642 12a3 	movw	r2, #10659	; 0x29a3
 8001c90:	6042      	str	r2, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c92:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 65000;
 8001c94:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8001c98:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c9a:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c9c:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001c9e:	f002 fa5d 	bl	800415c <HAL_TIM_Base_Init>
 8001ca2:	b990      	cbnz	r0, 8001cca <MX_TIM3_Init+0x56>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ca4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ca8:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001caa:	a902      	add	r1, sp, #8
 8001cac:	480b      	ldr	r0, [pc, #44]	; (8001cdc <MX_TIM3_Init+0x68>)
 8001cae:	f002 fa8d 	bl	80041cc <HAL_TIM_ConfigClockSource>
 8001cb2:	b968      	cbnz	r0, 8001cd0 <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cb8:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001cba:	4669      	mov	r1, sp
 8001cbc:	4807      	ldr	r0, [pc, #28]	; (8001cdc <MX_TIM3_Init+0x68>)
 8001cbe:	f002 fb29 	bl	8004314 <HAL_TIMEx_MasterConfigSynchronization>
 8001cc2:	b940      	cbnz	r0, 8001cd6 <MX_TIM3_Init+0x62>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001cc4:	b007      	add	sp, #28
 8001cc6:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001cca:	f7ff fdad 	bl	8001828 <Error_Handler>
 8001cce:	e7e9      	b.n	8001ca4 <MX_TIM3_Init+0x30>
    Error_Handler();
 8001cd0:	f7ff fdaa 	bl	8001828 <Error_Handler>
 8001cd4:	e7ee      	b.n	8001cb4 <MX_TIM3_Init+0x40>
    Error_Handler();
 8001cd6:	f7ff fda7 	bl	8001828 <Error_Handler>
}
 8001cda:	e7f3      	b.n	8001cc4 <MX_TIM3_Init+0x50>
 8001cdc:	200016e4 	.word	0x200016e4
 8001ce0:	40000400 	.word	0x40000400

08001ce4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001ce4:	b500      	push	{lr}
 8001ce6:	b087      	sub	sp, #28

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ce8:	2300      	movs	r3, #0
 8001cea:	9302      	str	r3, [sp, #8]
 8001cec:	9303      	str	r3, [sp, #12]
 8001cee:	9304      	str	r3, [sp, #16]
 8001cf0:	9305      	str	r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cf2:	9300      	str	r3, [sp, #0]
 8001cf4:	9301      	str	r3, [sp, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001cf6:	4815      	ldr	r0, [pc, #84]	; (8001d4c <MX_TIM4_Init+0x68>)
 8001cf8:	4a15      	ldr	r2, [pc, #84]	; (8001d50 <MX_TIM4_Init+0x6c>)
 8001cfa:	6002      	str	r2, [r0, #0]
  htim4.Init.Prescaler = 32-1;
 8001cfc:	221f      	movs	r2, #31
 8001cfe:	6042      	str	r2, [r0, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d00:	6083      	str	r3, [r0, #8]
  htim4.Init.Period = 0xffff;
 8001d02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d06:	60c2      	str	r2, [r0, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d08:	6103      	str	r3, [r0, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d0a:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001d0c:	f002 fa26 	bl	800415c <HAL_TIM_Base_Init>
 8001d10:	b990      	cbnz	r0, 8001d38 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d16:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001d18:	a902      	add	r1, sp, #8
 8001d1a:	480c      	ldr	r0, [pc, #48]	; (8001d4c <MX_TIM4_Init+0x68>)
 8001d1c:	f002 fa56 	bl	80041cc <HAL_TIM_ConfigClockSource>
 8001d20:	b968      	cbnz	r0, 8001d3e <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d22:	2300      	movs	r3, #0
 8001d24:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d26:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001d28:	4669      	mov	r1, sp
 8001d2a:	4808      	ldr	r0, [pc, #32]	; (8001d4c <MX_TIM4_Init+0x68>)
 8001d2c:	f002 faf2 	bl	8004314 <HAL_TIMEx_MasterConfigSynchronization>
 8001d30:	b940      	cbnz	r0, 8001d44 <MX_TIM4_Init+0x60>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001d32:	b007      	add	sp, #28
 8001d34:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001d38:	f7ff fd76 	bl	8001828 <Error_Handler>
 8001d3c:	e7e9      	b.n	8001d12 <MX_TIM4_Init+0x2e>
    Error_Handler();
 8001d3e:	f7ff fd73 	bl	8001828 <Error_Handler>
 8001d42:	e7ee      	b.n	8001d22 <MX_TIM4_Init+0x3e>
    Error_Handler();
 8001d44:	f7ff fd70 	bl	8001828 <Error_Handler>
}
 8001d48:	e7f3      	b.n	8001d32 <MX_TIM4_Init+0x4e>
 8001d4a:	bf00      	nop
 8001d4c:	2000172c 	.word	0x2000172c
 8001d50:	40000800 	.word	0x40000800

08001d54 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001d54:	b500      	push	{lr}
 8001d56:	b083      	sub	sp, #12

  if(tim_baseHandle->Instance==TIM3)
 8001d58:	6803      	ldr	r3, [r0, #0]
 8001d5a:	4a13      	ldr	r2, [pc, #76]	; (8001da8 <HAL_TIM_Base_MspInit+0x54>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d005      	beq.n	8001d6c <HAL_TIM_Base_MspInit+0x18>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM4)
 8001d60:	4a12      	ldr	r2, [pc, #72]	; (8001dac <HAL_TIM_Base_MspInit+0x58>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d015      	beq.n	8001d92 <HAL_TIM_Base_MspInit+0x3e>
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001d66:	b003      	add	sp, #12
 8001d68:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d6c:	4b10      	ldr	r3, [pc, #64]	; (8001db0 <HAL_TIM_Base_MspInit+0x5c>)
 8001d6e:	69da      	ldr	r2, [r3, #28]
 8001d70:	f042 0202 	orr.w	r2, r2, #2
 8001d74:	61da      	str	r2, [r3, #28]
 8001d76:	69db      	ldr	r3, [r3, #28]
 8001d78:	f003 0302 	and.w	r3, r3, #2
 8001d7c:	9300      	str	r3, [sp, #0]
 8001d7e:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001d80:	2200      	movs	r2, #0
 8001d82:	4611      	mov	r1, r2
 8001d84:	201d      	movs	r0, #29
 8001d86:	f000 f97d 	bl	8002084 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001d8a:	201d      	movs	r0, #29
 8001d8c:	f000 f9b0 	bl	80020f0 <HAL_NVIC_EnableIRQ>
 8001d90:	e7e9      	b.n	8001d66 <HAL_TIM_Base_MspInit+0x12>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001d92:	4b07      	ldr	r3, [pc, #28]	; (8001db0 <HAL_TIM_Base_MspInit+0x5c>)
 8001d94:	69da      	ldr	r2, [r3, #28]
 8001d96:	f042 0204 	orr.w	r2, r2, #4
 8001d9a:	61da      	str	r2, [r3, #28]
 8001d9c:	69db      	ldr	r3, [r3, #28]
 8001d9e:	f003 0304 	and.w	r3, r3, #4
 8001da2:	9301      	str	r3, [sp, #4]
 8001da4:	9b01      	ldr	r3, [sp, #4]
}
 8001da6:	e7de      	b.n	8001d66 <HAL_TIM_Base_MspInit+0x12>
 8001da8:	40000400 	.word	0x40000400
 8001dac:	40000800 	.word	0x40000800
 8001db0:	40021000 	.word	0x40021000

08001db4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001db4:	b508      	push	{r3, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001db6:	480a      	ldr	r0, [pc, #40]	; (8001de0 <MX_USART1_UART_Init+0x2c>)
 8001db8:	4b0a      	ldr	r3, [pc, #40]	; (8001de4 <MX_USART1_UART_Init+0x30>)
 8001dba:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 9600;
 8001dbc:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8001dc0:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001dc6:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001dc8:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001dca:	220c      	movs	r2, #12
 8001dcc:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dce:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dd0:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001dd2:	f002 fb6b 	bl	80044ac <HAL_UART_Init>
 8001dd6:	b900      	cbnz	r0, 8001dda <MX_USART1_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001dd8:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001dda:	f7ff fd25 	bl	8001828 <Error_Handler>
}
 8001dde:	e7fb      	b.n	8001dd8 <MX_USART1_UART_Init+0x24>
 8001de0:	20001774 	.word	0x20001774
 8001de4:	40013800 	.word	0x40013800

08001de8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001de8:	b508      	push	{r3, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001dea:	480a      	ldr	r0, [pc, #40]	; (8001e14 <MX_USART2_UART_Init+0x2c>)
 8001dec:	4b0a      	ldr	r3, [pc, #40]	; (8001e18 <MX_USART2_UART_Init+0x30>)
 8001dee:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 9600;
 8001df0:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8001df4:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001df6:	2300      	movs	r3, #0
 8001df8:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001dfa:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001dfc:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001dfe:	220c      	movs	r2, #12
 8001e00:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e02:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e04:	61c3      	str	r3, [r0, #28]
  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 8001e06:	f002 fb80 	bl	800450a <HAL_HalfDuplex_Init>
 8001e0a:	b900      	cbnz	r0, 8001e0e <MX_USART2_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e0c:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001e0e:	f7ff fd0b 	bl	8001828 <Error_Handler>
}
 8001e12:	e7fb      	b.n	8001e0c <MX_USART2_UART_Init+0x24>
 8001e14:	200017b8 	.word	0x200017b8
 8001e18:	40004400 	.word	0x40004400

08001e1c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e1c:	b510      	push	{r4, lr}
 8001e1e:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e20:	2300      	movs	r3, #0
 8001e22:	9304      	str	r3, [sp, #16]
 8001e24:	9305      	str	r3, [sp, #20]
 8001e26:	9306      	str	r3, [sp, #24]
 8001e28:	9307      	str	r3, [sp, #28]
  if(uartHandle->Instance==USART1)
 8001e2a:	6803      	ldr	r3, [r0, #0]
 8001e2c:	4a27      	ldr	r2, [pc, #156]	; (8001ecc <HAL_UART_MspInit+0xb0>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d004      	beq.n	8001e3c <HAL_UART_MspInit+0x20>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(uartHandle->Instance==USART2)
 8001e32:	4a27      	ldr	r2, [pc, #156]	; (8001ed0 <HAL_UART_MspInit+0xb4>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d02b      	beq.n	8001e90 <HAL_UART_MspInit+0x74>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001e38:	b008      	add	sp, #32
 8001e3a:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e3c:	4b25      	ldr	r3, [pc, #148]	; (8001ed4 <HAL_UART_MspInit+0xb8>)
 8001e3e:	699a      	ldr	r2, [r3, #24]
 8001e40:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001e44:	619a      	str	r2, [r3, #24]
 8001e46:	699a      	ldr	r2, [r3, #24]
 8001e48:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001e4c:	9200      	str	r2, [sp, #0]
 8001e4e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e50:	699a      	ldr	r2, [r3, #24]
 8001e52:	f042 0204 	orr.w	r2, r2, #4
 8001e56:	619a      	str	r2, [r3, #24]
 8001e58:	699b      	ldr	r3, [r3, #24]
 8001e5a:	f003 0304 	and.w	r3, r3, #4
 8001e5e:	9301      	str	r3, [sp, #4]
 8001e60:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001e62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e66:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e68:	2302      	movs	r3, #2
 8001e6a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e70:	4c19      	ldr	r4, [pc, #100]	; (8001ed8 <HAL_UART_MspInit+0xbc>)
 8001e72:	a904      	add	r1, sp, #16
 8001e74:	4620      	mov	r0, r4
 8001e76:	f000 fb1d 	bl	80024b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001e7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e7e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e80:	2300      	movs	r3, #0
 8001e82:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e84:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e86:	a904      	add	r1, sp, #16
 8001e88:	4620      	mov	r0, r4
 8001e8a:	f000 fb13 	bl	80024b4 <HAL_GPIO_Init>
 8001e8e:	e7d3      	b.n	8001e38 <HAL_UART_MspInit+0x1c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e90:	4b10      	ldr	r3, [pc, #64]	; (8001ed4 <HAL_UART_MspInit+0xb8>)
 8001e92:	69da      	ldr	r2, [r3, #28]
 8001e94:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001e98:	61da      	str	r2, [r3, #28]
 8001e9a:	69da      	ldr	r2, [r3, #28]
 8001e9c:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001ea0:	9202      	str	r2, [sp, #8]
 8001ea2:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ea4:	699a      	ldr	r2, [r3, #24]
 8001ea6:	f042 0204 	orr.w	r2, r2, #4
 8001eaa:	619a      	str	r2, [r3, #24]
 8001eac:	699b      	ldr	r3, [r3, #24]
 8001eae:	f003 0304 	and.w	r3, r3, #4
 8001eb2:	9303      	str	r3, [sp, #12]
 8001eb4:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001eb6:	2304      	movs	r3, #4
 8001eb8:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001eba:	2312      	movs	r3, #18
 8001ebc:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ec2:	a904      	add	r1, sp, #16
 8001ec4:	4804      	ldr	r0, [pc, #16]	; (8001ed8 <HAL_UART_MspInit+0xbc>)
 8001ec6:	f000 faf5 	bl	80024b4 <HAL_GPIO_Init>
}
 8001eca:	e7b5      	b.n	8001e38 <HAL_UART_MspInit+0x1c>
 8001ecc:	40013800 	.word	0x40013800
 8001ed0:	40004400 	.word	0x40004400
 8001ed4:	40021000 	.word	0x40021000
 8001ed8:	40010800 	.word	0x40010800

08001edc <UartSend>:
{
	HAL_UART_Transmit(&huart1, (uint8_t*) Message, strlen(Message), 20);
}

void UartSend(char * Message)
{
 8001edc:	b510      	push	{r4, lr}
 8001ede:	4604      	mov	r4, r0
	GSM.ReceivedState = 0;
 8001ee0:	4b07      	ldr	r3, [pc, #28]	; (8001f00 <UartSend+0x24>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	721a      	strb	r2, [r3, #8]
	HAL_UART_Transmit_IT(&huart1, (uint8_t*) Message, strlen(Message));
 8001ee6:	f7fe f93d 	bl	8000164 <strlen>
 8001eea:	b282      	uxth	r2, r0
 8001eec:	4621      	mov	r1, r4
 8001eee:	4805      	ldr	r0, [pc, #20]	; (8001f04 <UartSend+0x28>)
 8001ef0:	f002 fc2b 	bl	800474a <HAL_UART_Transmit_IT>
	*Uart1isBusyPtr = 1;
 8001ef4:	4b04      	ldr	r3, [pc, #16]	; (8001f08 <UartSend+0x2c>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	2201      	movs	r2, #1
 8001efa:	701a      	strb	r2, [r3, #0]
}
 8001efc:	bd10      	pop	{r4, pc}
 8001efe:	bf00      	nop
 8001f00:	20000f00 	.word	0x20000f00
 8001f04:	20001774 	.word	0x20001774
 8001f08:	20000004 	.word	0x20000004

08001f0c <UartSendWoRxCtrl>:

void UartSendWoRxCtrl(char * Message)
{
 8001f0c:	b510      	push	{r4, lr}
 8001f0e:	4604      	mov	r4, r0
	HAL_UART_Transmit_IT(&huart1, (uint8_t*) Message, strlen(Message));
 8001f10:	f7fe f928 	bl	8000164 <strlen>
 8001f14:	b282      	uxth	r2, r0
 8001f16:	4621      	mov	r1, r4
 8001f18:	4803      	ldr	r0, [pc, #12]	; (8001f28 <UartSendWoRxCtrl+0x1c>)
 8001f1a:	f002 fc16 	bl	800474a <HAL_UART_Transmit_IT>
	*Uart1isBusyPtr = 1;
 8001f1e:	4b03      	ldr	r3, [pc, #12]	; (8001f2c <UartSendWoRxCtrl+0x20>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	2201      	movs	r2, #1
 8001f24:	701a      	strb	r2, [r3, #0]
}
 8001f26:	bd10      	pop	{r4, pc}
 8001f28:	20001774 	.word	0x20001774
 8001f2c:	20000004 	.word	0x20000004

08001f30 <Temperature100ToString>:

void Temperature100ToString(int32_t temp, char *StringBuf)
{
 8001f30:	b508      	push	{r3, lr}
 8001f32:	4603      	mov	r3, r0
 8001f34:	4608      	mov	r0, r1
	int16_t Decimal;
	uint16_t Fractial;

	Decimal = temp/100;
 8001f36:	4a10      	ldr	r2, [pc, #64]	; (8001f78 <Temperature100ToString+0x48>)
 8001f38:	fb82 1203 	smull	r1, r2, r2, r3
 8001f3c:	ea4f 7ce3 	mov.w	ip, r3, asr #31
 8001f40:	ebcc 1c62 	rsb	ip, ip, r2, asr #5
 8001f44:	fa0f f28c 	sxth.w	r2, ip

	if(temp>=0)
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	db0c      	blt.n	8001f66 <Temperature100ToString+0x36>
	{
		Fractial = temp - Decimal * 100;
 8001f4c:	ebcc 214c 	rsb	r1, ip, ip, lsl #9
 8001f50:	eb0c 0181 	add.w	r1, ip, r1, lsl #2
 8001f54:	ebcc 0cc1 	rsb	ip, ip, r1, lsl #3
 8001f58:	eb03 038c 	add.w	r3, r3, ip, lsl #2
 8001f5c:	b29b      	uxth	r3, r3
	else
	{
		Fractial = (temp * -1) - ((Decimal * -1) * 100);
	}

	sprintf(StringBuf, "%.2i.%.2u", Decimal, Fractial);
 8001f5e:	4907      	ldr	r1, [pc, #28]	; (8001f7c <Temperature100ToString+0x4c>)
 8001f60:	f005 fa5c 	bl	800741c <siprintf>
}
 8001f64:	bd08      	pop	{r3, pc}
		Fractial = (temp * -1) - ((Decimal * -1) * 100);
 8001f66:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8001f6a:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8001f6e:	ebc3 038c 	rsb	r3, r3, ip, lsl #2
 8001f72:	b29b      	uxth	r3, r3
 8001f74:	e7f3      	b.n	8001f5e <Temperature100ToString+0x2e>
 8001f76:	bf00      	nop
 8001f78:	51eb851f 	.word	0x51eb851f
 8001f7c:	0800b338 	.word	0x0800b338

08001f80 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f80:	480c      	ldr	r0, [pc, #48]	; (8001fb4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f82:	490d      	ldr	r1, [pc, #52]	; (8001fb8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f84:	4a0d      	ldr	r2, [pc, #52]	; (8001fbc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f88:	e002      	b.n	8001f90 <LoopCopyDataInit>

08001f8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f8e:	3304      	adds	r3, #4

08001f90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f94:	d3f9      	bcc.n	8001f8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f96:	4a0a      	ldr	r2, [pc, #40]	; (8001fc0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f98:	4c0a      	ldr	r4, [pc, #40]	; (8001fc4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f9c:	e001      	b.n	8001fa2 <LoopFillZerobss>

08001f9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fa0:	3204      	adds	r2, #4

08001fa2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fa2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fa4:	d3fb      	bcc.n	8001f9e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001fa6:	f7ff fe63 	bl	8001c70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001faa:	f004 fd9d 	bl	8006ae8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001fae:	f7ff fb2b 	bl	8001608 <main>
  bx lr
 8001fb2:	4770      	bx	lr
  ldr r0, =_sdata
 8001fb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fb8:	20000364 	.word	0x20000364
  ldr r2, =_sidata
 8001fbc:	0800b890 	.word	0x0800b890
  ldr r2, =_sbss
 8001fc0:	20000368 	.word	0x20000368
  ldr r4, =_ebss
 8001fc4:	20002604 	.word	0x20002604

08001fc8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001fc8:	e7fe      	b.n	8001fc8 <ADC1_2_IRQHandler>
	...

08001fcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fcc:	b510      	push	{r4, lr}
 8001fce:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fd0:	4b0e      	ldr	r3, [pc, #56]	; (800200c <HAL_InitTick+0x40>)
 8001fd2:	7818      	ldrb	r0, [r3, #0]
 8001fd4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fd8:	fbb3 f3f0 	udiv	r3, r3, r0
 8001fdc:	4a0c      	ldr	r2, [pc, #48]	; (8002010 <HAL_InitTick+0x44>)
 8001fde:	6810      	ldr	r0, [r2, #0]
 8001fe0:	fbb0 f0f3 	udiv	r0, r0, r3
 8001fe4:	f000 f892 	bl	800210c <HAL_SYSTICK_Config>
 8001fe8:	b968      	cbnz	r0, 8002006 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fea:	2c0f      	cmp	r4, #15
 8001fec:	d901      	bls.n	8001ff2 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8001fee:	2001      	movs	r0, #1
 8001ff0:	e00a      	b.n	8002008 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	4621      	mov	r1, r4
 8001ff6:	f04f 30ff 	mov.w	r0, #4294967295
 8001ffa:	f000 f843 	bl	8002084 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ffe:	4b05      	ldr	r3, [pc, #20]	; (8002014 <HAL_InitTick+0x48>)
 8002000:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002002:	2000      	movs	r0, #0
 8002004:	e000      	b.n	8002008 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8002006:	2001      	movs	r0, #1
}
 8002008:	bd10      	pop	{r4, pc}
 800200a:	bf00      	nop
 800200c:	20000010 	.word	0x20000010
 8002010:	2000000c 	.word	0x2000000c
 8002014:	20000014 	.word	0x20000014

08002018 <HAL_Init>:
{
 8002018:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800201a:	4a07      	ldr	r2, [pc, #28]	; (8002038 <HAL_Init+0x20>)
 800201c:	6813      	ldr	r3, [r2, #0]
 800201e:	f043 0310 	orr.w	r3, r3, #16
 8002022:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002024:	2003      	movs	r0, #3
 8002026:	f000 f81b 	bl	8002060 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800202a:	200f      	movs	r0, #15
 800202c:	f7ff ffce 	bl	8001fcc <HAL_InitTick>
  HAL_MspInit();
 8002030:	f7ff fd88 	bl	8001b44 <HAL_MspInit>
}
 8002034:	2000      	movs	r0, #0
 8002036:	bd08      	pop	{r3, pc}
 8002038:	40022000 	.word	0x40022000

0800203c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800203c:	4a03      	ldr	r2, [pc, #12]	; (800204c <HAL_IncTick+0x10>)
 800203e:	6811      	ldr	r1, [r2, #0]
 8002040:	4b03      	ldr	r3, [pc, #12]	; (8002050 <HAL_IncTick+0x14>)
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	440b      	add	r3, r1
 8002046:	6013      	str	r3, [r2, #0]
}
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	200017fc 	.word	0x200017fc
 8002050:	20000010 	.word	0x20000010

08002054 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002054:	4b01      	ldr	r3, [pc, #4]	; (800205c <HAL_GetTick+0x8>)
 8002056:	6818      	ldr	r0, [r3, #0]
}
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	200017fc 	.word	0x200017fc

08002060 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002060:	4907      	ldr	r1, [pc, #28]	; (8002080 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002062:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002064:	0203      	lsls	r3, r0, #8
 8002066:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800206a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800206e:	0412      	lsls	r2, r2, #16
 8002070:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002072:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002074:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002078:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800207c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800207e:	4770      	bx	lr
 8002080:	e000ed00 	.word	0xe000ed00

08002084 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002084:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002086:	4b18      	ldr	r3, [pc, #96]	; (80020e8 <HAL_NVIC_SetPriority+0x64>)
 8002088:	68db      	ldr	r3, [r3, #12]
 800208a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800208e:	f1c3 0c07 	rsb	ip, r3, #7
 8002092:	f1bc 0f04 	cmp.w	ip, #4
 8002096:	bf28      	it	cs
 8002098:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800209c:	f103 0e04 	add.w	lr, r3, #4
 80020a0:	f1be 0f06 	cmp.w	lr, #6
 80020a4:	bf8c      	ite	hi
 80020a6:	3b03      	subhi	r3, #3
 80020a8:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020aa:	f04f 3eff 	mov.w	lr, #4294967295
 80020ae:	fa0e fc0c 	lsl.w	ip, lr, ip
 80020b2:	ea21 010c 	bic.w	r1, r1, ip
 80020b6:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020b8:	fa0e f303 	lsl.w	r3, lr, r3
 80020bc:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020c0:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 80020c2:	2800      	cmp	r0, #0
 80020c4:	db09      	blt.n	80020da <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020c6:	0109      	lsls	r1, r1, #4
 80020c8:	b2c9      	uxtb	r1, r1
 80020ca:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80020ce:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80020d2:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80020d6:	f85d fb04 	ldr.w	pc, [sp], #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020da:	f000 000f 	and.w	r0, r0, #15
 80020de:	0109      	lsls	r1, r1, #4
 80020e0:	b2c9      	uxtb	r1, r1
 80020e2:	4b02      	ldr	r3, [pc, #8]	; (80020ec <HAL_NVIC_SetPriority+0x68>)
 80020e4:	5419      	strb	r1, [r3, r0]
 80020e6:	e7f6      	b.n	80020d6 <HAL_NVIC_SetPriority+0x52>
 80020e8:	e000ed00 	.word	0xe000ed00
 80020ec:	e000ed14 	.word	0xe000ed14

080020f0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80020f0:	2800      	cmp	r0, #0
 80020f2:	db08      	blt.n	8002106 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020f4:	0942      	lsrs	r2, r0, #5
 80020f6:	f000 001f 	and.w	r0, r0, #31
 80020fa:	2301      	movs	r3, #1
 80020fc:	fa03 f000 	lsl.w	r0, r3, r0
 8002100:	4b01      	ldr	r3, [pc, #4]	; (8002108 <HAL_NVIC_EnableIRQ+0x18>)
 8002102:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002106:	4770      	bx	lr
 8002108:	e000e100 	.word	0xe000e100

0800210c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800210c:	3801      	subs	r0, #1
 800210e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002112:	d20b      	bcs.n	800212c <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002114:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002118:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800211a:	4a05      	ldr	r2, [pc, #20]	; (8002130 <HAL_SYSTICK_Config+0x24>)
 800211c:	21f0      	movs	r1, #240	; 0xf0
 800211e:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002122:	2000      	movs	r0, #0
 8002124:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002126:	2207      	movs	r2, #7
 8002128:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800212a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800212c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800212e:	4770      	bx	lr
 8002130:	e000ed00 	.word	0xe000ed00

08002134 <HAL_DMA_Abort>:
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002134:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8002138:	2b02      	cmp	r3, #2
 800213a:	d006      	beq.n	800214a <HAL_DMA_Abort+0x16>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800213c:	2304      	movs	r3, #4
 800213e:	6383      	str	r3, [r0, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002140:	2300      	movs	r3, #0
 8002142:	f880 3020 	strb.w	r3, [r0, #32]
    
    return HAL_ERROR;
 8002146:	2001      	movs	r0, #1
 8002148:	4770      	bx	lr
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800214a:	6802      	ldr	r2, [r0, #0]
 800214c:	6813      	ldr	r3, [r2, #0]
 800214e:	f023 030e 	bic.w	r3, r3, #14
 8002152:	6013      	str	r3, [r2, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002154:	6802      	ldr	r2, [r0, #0]
 8002156:	6813      	ldr	r3, [r2, #0]
 8002158:	f023 0301 	bic.w	r3, r3, #1
 800215c:	6013      	str	r3, [r2, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800215e:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8002160:	2201      	movs	r2, #1
 8002162:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002164:	fa02 f303 	lsl.w	r3, r2, r3
 8002168:	604b      	str	r3, [r1, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800216a:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800216e:	2300      	movs	r3, #0
 8002170:	f880 3020 	strb.w	r3, [r0, #32]
  
  return status; 
 8002174:	4618      	mov	r0, r3
}
 8002176:	4770      	bx	lr

08002178 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002178:	b508      	push	{r3, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800217a:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800217e:	2b02      	cmp	r3, #2
 8002180:	d003      	beq.n	800218a <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002182:	2304      	movs	r3, #4
 8002184:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 8002186:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 8002188:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800218a:	6802      	ldr	r2, [r0, #0]
 800218c:	6813      	ldr	r3, [r2, #0]
 800218e:	f023 030e 	bic.w	r3, r3, #14
 8002192:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8002194:	6802      	ldr	r2, [r0, #0]
 8002196:	6813      	ldr	r3, [r2, #0]
 8002198:	f023 0301 	bic.w	r3, r3, #1
 800219c:	6013      	str	r3, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800219e:	6803      	ldr	r3, [r0, #0]
 80021a0:	4a18      	ldr	r2, [pc, #96]	; (8002204 <HAL_DMA_Abort_IT+0x8c>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d013      	beq.n	80021ce <HAL_DMA_Abort_IT+0x56>
 80021a6:	3214      	adds	r2, #20
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d01e      	beq.n	80021ea <HAL_DMA_Abort_IT+0x72>
 80021ac:	3214      	adds	r2, #20
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d01d      	beq.n	80021ee <HAL_DMA_Abort_IT+0x76>
 80021b2:	3214      	adds	r2, #20
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d01d      	beq.n	80021f4 <HAL_DMA_Abort_IT+0x7c>
 80021b8:	3214      	adds	r2, #20
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d01d      	beq.n	80021fa <HAL_DMA_Abort_IT+0x82>
 80021be:	3214      	adds	r2, #20
 80021c0:	4293      	cmp	r3, r2
 80021c2:	bf0c      	ite	eq
 80021c4:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 80021c8:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 80021cc:	e000      	b.n	80021d0 <HAL_DMA_Abort_IT+0x58>
 80021ce:	2301      	movs	r3, #1
 80021d0:	4a0d      	ldr	r2, [pc, #52]	; (8002208 <HAL_DMA_Abort_IT+0x90>)
 80021d2:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80021d4:	2301      	movs	r3, #1
 80021d6:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 80021da:	2300      	movs	r3, #0
 80021dc:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 80021e0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80021e2:	b16b      	cbz	r3, 8002200 <HAL_DMA_Abort_IT+0x88>
      hdma->XferAbortCallback(hdma);
 80021e4:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80021e6:	2000      	movs	r0, #0
 80021e8:	e7ce      	b.n	8002188 <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80021ea:	2310      	movs	r3, #16
 80021ec:	e7f0      	b.n	80021d0 <HAL_DMA_Abort_IT+0x58>
 80021ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021f2:	e7ed      	b.n	80021d0 <HAL_DMA_Abort_IT+0x58>
 80021f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021f8:	e7ea      	b.n	80021d0 <HAL_DMA_Abort_IT+0x58>
 80021fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021fe:	e7e7      	b.n	80021d0 <HAL_DMA_Abort_IT+0x58>
  HAL_StatusTypeDef status = HAL_OK;
 8002200:	2000      	movs	r0, #0
 8002202:	e7c1      	b.n	8002188 <HAL_DMA_Abort_IT+0x10>
 8002204:	40020008 	.word	0x40020008
 8002208:	40020000 	.word	0x40020000

0800220c <FLASH_SetErrorCode>:
  uint32_t flags = 0U;
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800220c:	4b14      	ldr	r3, [pc, #80]	; (8002260 <FLASH_SetErrorCode+0x54>)
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	f013 0310 	ands.w	r3, r3, #16
 8002214:	d005      	beq.n	8002222 <FLASH_SetErrorCode+0x16>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002216:	4a13      	ldr	r2, [pc, #76]	; (8002264 <FLASH_SetErrorCode+0x58>)
 8002218:	69d3      	ldr	r3, [r2, #28]
 800221a:	f043 0302 	orr.w	r3, r3, #2
 800221e:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8002220:	2310      	movs	r3, #16
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002222:	4a0f      	ldr	r2, [pc, #60]	; (8002260 <FLASH_SetErrorCode+0x54>)
 8002224:	68d2      	ldr	r2, [r2, #12]
 8002226:	f012 0f04 	tst.w	r2, #4
 800222a:	d006      	beq.n	800223a <FLASH_SetErrorCode+0x2e>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800222c:	490d      	ldr	r1, [pc, #52]	; (8002264 <FLASH_SetErrorCode+0x58>)
 800222e:	69ca      	ldr	r2, [r1, #28]
 8002230:	f042 0201 	orr.w	r2, r2, #1
 8002234:	61ca      	str	r2, [r1, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8002236:	f043 0304 	orr.w	r3, r3, #4
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800223a:	4a09      	ldr	r2, [pc, #36]	; (8002260 <FLASH_SetErrorCode+0x54>)
 800223c:	69d2      	ldr	r2, [r2, #28]
 800223e:	f012 0f01 	tst.w	r2, #1
 8002242:	d009      	beq.n	8002258 <FLASH_SetErrorCode+0x4c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8002244:	4907      	ldr	r1, [pc, #28]	; (8002264 <FLASH_SetErrorCode+0x58>)
 8002246:	69ca      	ldr	r2, [r1, #28]
 8002248:	f042 0204 	orr.w	r2, r2, #4
 800224c:	61ca      	str	r2, [r1, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800224e:	4904      	ldr	r1, [pc, #16]	; (8002260 <FLASH_SetErrorCode+0x54>)
 8002250:	69ca      	ldr	r2, [r1, #28]
 8002252:	f022 0201 	bic.w	r2, r2, #1
 8002256:	61ca      	str	r2, [r1, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002258:	4a01      	ldr	r2, [pc, #4]	; (8002260 <FLASH_SetErrorCode+0x54>)
 800225a:	60d3      	str	r3, [r2, #12]
}  
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	40022000 	.word	0x40022000
 8002264:	20001800 	.word	0x20001800

08002268 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002268:	4b08      	ldr	r3, [pc, #32]	; (800228c <HAL_FLASH_Unlock+0x24>)
 800226a:	691b      	ldr	r3, [r3, #16]
 800226c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002270:	d009      	beq.n	8002286 <HAL_FLASH_Unlock+0x1e>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002272:	4b06      	ldr	r3, [pc, #24]	; (800228c <HAL_FLASH_Unlock+0x24>)
 8002274:	4a06      	ldr	r2, [pc, #24]	; (8002290 <HAL_FLASH_Unlock+0x28>)
 8002276:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002278:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 800227c:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800227e:	6918      	ldr	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
 8002280:	f3c0 10c0 	ubfx	r0, r0, #7, #1
 8002284:	4770      	bx	lr
 8002286:	2000      	movs	r0, #0
}
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	40022000 	.word	0x40022000
 8002290:	45670123 	.word	0x45670123

08002294 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002294:	4a03      	ldr	r2, [pc, #12]	; (80022a4 <HAL_FLASH_Lock+0x10>)
 8002296:	6913      	ldr	r3, [r2, #16]
 8002298:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800229c:	6113      	str	r3, [r2, #16]
}
 800229e:	2000      	movs	r0, #0
 80022a0:	4770      	bx	lr
 80022a2:	bf00      	nop
 80022a4:	40022000 	.word	0x40022000

080022a8 <HAL_FLASH_GetError>:
   return pFlash.ErrorCode;
 80022a8:	4b01      	ldr	r3, [pc, #4]	; (80022b0 <HAL_FLASH_GetError+0x8>)
 80022aa:	69d8      	ldr	r0, [r3, #28]
}
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop
 80022b0:	20001800 	.word	0x20001800

080022b4 <FLASH_WaitForLastOperation>:
{
 80022b4:	b570      	push	{r4, r5, r6, lr}
 80022b6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80022b8:	f7ff fecc 	bl	8002054 <HAL_GetTick>
 80022bc:	4606      	mov	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80022be:	4d17      	ldr	r5, [pc, #92]	; (800231c <FLASH_WaitForLastOperation+0x68>)
 80022c0:	68eb      	ldr	r3, [r5, #12]
 80022c2:	f013 0f01 	tst.w	r3, #1
 80022c6:	d00a      	beq.n	80022de <FLASH_WaitForLastOperation+0x2a>
    if (Timeout != HAL_MAX_DELAY)
 80022c8:	f1b4 3fff 	cmp.w	r4, #4294967295
 80022cc:	d0f8      	beq.n	80022c0 <FLASH_WaitForLastOperation+0xc>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80022ce:	b31c      	cbz	r4, 8002318 <FLASH_WaitForLastOperation+0x64>
 80022d0:	f7ff fec0 	bl	8002054 <HAL_GetTick>
 80022d4:	1b80      	subs	r0, r0, r6
 80022d6:	42a0      	cmp	r0, r4
 80022d8:	d9f2      	bls.n	80022c0 <FLASH_WaitForLastOperation+0xc>
        return HAL_TIMEOUT;
 80022da:	2003      	movs	r0, #3
 80022dc:	e01b      	b.n	8002316 <FLASH_WaitForLastOperation+0x62>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80022de:	4b0f      	ldr	r3, [pc, #60]	; (800231c <FLASH_WaitForLastOperation+0x68>)
 80022e0:	68db      	ldr	r3, [r3, #12]
 80022e2:	f013 0f20 	tst.w	r3, #32
 80022e6:	d002      	beq.n	80022ee <FLASH_WaitForLastOperation+0x3a>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80022e8:	4b0c      	ldr	r3, [pc, #48]	; (800231c <FLASH_WaitForLastOperation+0x68>)
 80022ea:	2220      	movs	r2, #32
 80022ec:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80022ee:	4b0b      	ldr	r3, [pc, #44]	; (800231c <FLASH_WaitForLastOperation+0x68>)
 80022f0:	68db      	ldr	r3, [r3, #12]
 80022f2:	f013 0f10 	tst.w	r3, #16
 80022f6:	d10b      	bne.n	8002310 <FLASH_WaitForLastOperation+0x5c>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80022f8:	4b08      	ldr	r3, [pc, #32]	; (800231c <FLASH_WaitForLastOperation+0x68>)
 80022fa:	69db      	ldr	r3, [r3, #28]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80022fc:	f013 0f01 	tst.w	r3, #1
 8002300:	d106      	bne.n	8002310 <FLASH_WaitForLastOperation+0x5c>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002302:	4b06      	ldr	r3, [pc, #24]	; (800231c <FLASH_WaitForLastOperation+0x68>)
 8002304:	68db      	ldr	r3, [r3, #12]
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002306:	f013 0f04 	tst.w	r3, #4
 800230a:	d101      	bne.n	8002310 <FLASH_WaitForLastOperation+0x5c>
  return HAL_OK;
 800230c:	2000      	movs	r0, #0
 800230e:	e002      	b.n	8002316 <FLASH_WaitForLastOperation+0x62>
    FLASH_SetErrorCode();
 8002310:	f7ff ff7c 	bl	800220c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002314:	2001      	movs	r0, #1
}
 8002316:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_TIMEOUT;
 8002318:	2003      	movs	r0, #3
 800231a:	e7fc      	b.n	8002316 <FLASH_WaitForLastOperation+0x62>
 800231c:	40022000 	.word	0x40022000

08002320 <HAL_FLASH_Program>:
{
 8002320:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002324:	461f      	mov	r7, r3
  __HAL_LOCK(&pFlash);
 8002326:	4b26      	ldr	r3, [pc, #152]	; (80023c0 <HAL_FLASH_Program+0xa0>)
 8002328:	7e1b      	ldrb	r3, [r3, #24]
 800232a:	2b01      	cmp	r3, #1
 800232c:	d045      	beq.n	80023ba <HAL_FLASH_Program+0x9a>
 800232e:	4604      	mov	r4, r0
 8002330:	460d      	mov	r5, r1
 8002332:	4690      	mov	r8, r2
 8002334:	4b22      	ldr	r3, [pc, #136]	; (80023c0 <HAL_FLASH_Program+0xa0>)
 8002336:	2201      	movs	r2, #1
 8002338:	761a      	strb	r2, [r3, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800233a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800233e:	f7ff ffb9 	bl	80022b4 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8002342:	4603      	mov	r3, r0
 8002344:	bb80      	cbnz	r0, 80023a8 <HAL_FLASH_Program+0x88>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002346:	2c01      	cmp	r4, #1
 8002348:	d034      	beq.n	80023b4 <HAL_FLASH_Program+0x94>
      nbiterations = 4U;
 800234a:	2c02      	cmp	r4, #2
 800234c:	bf0c      	ite	eq
 800234e:	f04f 0902 	moveq.w	r9, #2
 8002352:	f04f 0904 	movne.w	r9, #4
    for (index = 0U; index < nbiterations; index++)
 8002356:	eb05 0949 	add.w	r9, r5, r9, lsl #1
      nbiterations = 4U;
 800235a:	2400      	movs	r4, #0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800235c:	f8df b060 	ldr.w	fp, [pc, #96]	; 80023c0 <HAL_FLASH_Program+0xa0>
 8002360:	46a2      	mov	sl, r4
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002362:	4e18      	ldr	r6, [pc, #96]	; (80023c4 <HAL_FLASH_Program+0xa4>)
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8002364:	f1c4 0120 	rsb	r1, r4, #32
 8002368:	f1a4 0220 	sub.w	r2, r4, #32
 800236c:	fa28 f304 	lsr.w	r3, r8, r4
 8002370:	fa07 f101 	lsl.w	r1, r7, r1
 8002374:	430b      	orrs	r3, r1
 8002376:	fa27 f202 	lsr.w	r2, r7, r2
 800237a:	4313      	orrs	r3, r2
 800237c:	b29b      	uxth	r3, r3
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800237e:	f8cb a01c 	str.w	sl, [fp, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002382:	6932      	ldr	r2, [r6, #16]
 8002384:	f042 0201 	orr.w	r2, r2, #1
 8002388:	6132      	str	r2, [r6, #16]
  *(__IO uint16_t*)Address = Data;
 800238a:	802b      	strh	r3, [r5, #0]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800238c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002390:	f7ff ff90 	bl	80022b4 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8002394:	6933      	ldr	r3, [r6, #16]
 8002396:	f023 0301 	bic.w	r3, r3, #1
 800239a:	6133      	str	r3, [r6, #16]
      if (status != HAL_OK)
 800239c:	4603      	mov	r3, r0
 800239e:	b918      	cbnz	r0, 80023a8 <HAL_FLASH_Program+0x88>
    for (index = 0U; index < nbiterations; index++)
 80023a0:	3410      	adds	r4, #16
 80023a2:	3502      	adds	r5, #2
 80023a4:	454d      	cmp	r5, r9
 80023a6:	d1dd      	bne.n	8002364 <HAL_FLASH_Program+0x44>
  __HAL_UNLOCK(&pFlash);
 80023a8:	4a05      	ldr	r2, [pc, #20]	; (80023c0 <HAL_FLASH_Program+0xa0>)
 80023aa:	2100      	movs	r1, #0
 80023ac:	7611      	strb	r1, [r2, #24]
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      nbiterations = 1U;
 80023b4:	f04f 0901 	mov.w	r9, #1
 80023b8:	e7cd      	b.n	8002356 <HAL_FLASH_Program+0x36>
  __HAL_LOCK(&pFlash);
 80023ba:	2302      	movs	r3, #2
 80023bc:	e7f7      	b.n	80023ae <HAL_FLASH_Program+0x8e>
 80023be:	bf00      	nop
 80023c0:	20001800 	.word	0x20001800
 80023c4:	40022000 	.word	0x40022000

080023c8 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80023c8:	4b06      	ldr	r3, [pc, #24]	; (80023e4 <FLASH_PageErase+0x1c>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80023ce:	4b06      	ldr	r3, [pc, #24]	; (80023e8 <FLASH_PageErase+0x20>)
 80023d0:	691a      	ldr	r2, [r3, #16]
 80023d2:	f042 0202 	orr.w	r2, r2, #2
 80023d6:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80023d8:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80023da:	691a      	ldr	r2, [r3, #16]
 80023dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023e0:	611a      	str	r2, [r3, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80023e2:	4770      	bx	lr
 80023e4:	20001800 	.word	0x20001800
 80023e8:	40022000 	.word	0x40022000

080023ec <HAL_FLASHEx_Erase>:
  __HAL_LOCK(&pFlash);
 80023ec:	4b2f      	ldr	r3, [pc, #188]	; (80024ac <HAL_FLASHEx_Erase+0xc0>)
 80023ee:	7e1b      	ldrb	r3, [r3, #24]
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d058      	beq.n	80024a6 <HAL_FLASHEx_Erase+0xba>
{
 80023f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80023f8:	4605      	mov	r5, r0
 80023fa:	460f      	mov	r7, r1
  __HAL_LOCK(&pFlash);
 80023fc:	4b2b      	ldr	r3, [pc, #172]	; (80024ac <HAL_FLASHEx_Erase+0xc0>)
 80023fe:	2201      	movs	r2, #1
 8002400:	761a      	strb	r2, [r3, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002402:	6803      	ldr	r3, [r0, #0]
 8002404:	2b02      	cmp	r3, #2
 8002406:	d026      	beq.n	8002456 <HAL_FLASHEx_Erase+0x6a>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002408:	f24c 3050 	movw	r0, #50000	; 0xc350
 800240c:	f7ff ff52 	bl	80022b4 <FLASH_WaitForLastOperation>
 8002410:	2800      	cmp	r0, #0
 8002412:	d13f      	bne.n	8002494 <HAL_FLASHEx_Erase+0xa8>
        *PageError = 0xFFFFFFFFU;
 8002414:	f04f 33ff 	mov.w	r3, #4294967295
 8002418:	603b      	str	r3, [r7, #0]
        for(address = pEraseInit->PageAddress;
 800241a:	68ac      	ldr	r4, [r5, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 800241c:	68eb      	ldr	r3, [r5, #12]
 800241e:	eb04 2383 	add.w	r3, r4, r3, lsl #10
        for(address = pEraseInit->PageAddress;
 8002422:	429c      	cmp	r4, r3
 8002424:	d23d      	bcs.n	80024a2 <HAL_FLASHEx_Erase+0xb6>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002426:	f24c 3850 	movw	r8, #50000	; 0xc350
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800242a:	4e21      	ldr	r6, [pc, #132]	; (80024b0 <HAL_FLASHEx_Erase+0xc4>)
          FLASH_PageErase(address);
 800242c:	4620      	mov	r0, r4
 800242e:	f7ff ffcb 	bl	80023c8 <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002432:	4640      	mov	r0, r8
 8002434:	f7ff ff3e 	bl	80022b4 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8002438:	6933      	ldr	r3, [r6, #16]
 800243a:	f023 0302 	bic.w	r3, r3, #2
 800243e:	6133      	str	r3, [r6, #16]
          if (status != HAL_OK)
 8002440:	4601      	mov	r1, r0
 8002442:	bb28      	cbnz	r0, 8002490 <HAL_FLASHEx_Erase+0xa4>
            address += FLASH_PAGE_SIZE)
 8002444:	f504 6480 	add.w	r4, r4, #1024	; 0x400
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8002448:	68ea      	ldr	r2, [r5, #12]
 800244a:	68ab      	ldr	r3, [r5, #8]
 800244c:	eb03 2382 	add.w	r3, r3, r2, lsl #10
        for(address = pEraseInit->PageAddress;
 8002450:	42a3      	cmp	r3, r4
 8002452:	d8eb      	bhi.n	800242c <HAL_FLASHEx_Erase+0x40>
 8002454:	e01f      	b.n	8002496 <HAL_FLASHEx_Erase+0xaa>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002456:	f24c 3050 	movw	r0, #50000	; 0xc350
 800245a:	f7ff ff2b 	bl	80022b4 <FLASH_WaitForLastOperation>
 800245e:	b108      	cbz	r0, 8002464 <HAL_FLASHEx_Erase+0x78>
  HAL_StatusTypeDef status = HAL_ERROR;
 8002460:	2101      	movs	r1, #1
 8002462:	e018      	b.n	8002496 <HAL_FLASHEx_Erase+0xaa>
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002464:	4b11      	ldr	r3, [pc, #68]	; (80024ac <HAL_FLASHEx_Erase+0xc0>)
 8002466:	2200      	movs	r2, #0
 8002468:	61da      	str	r2, [r3, #28]
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800246a:	4c11      	ldr	r4, [pc, #68]	; (80024b0 <HAL_FLASHEx_Erase+0xc4>)
 800246c:	6923      	ldr	r3, [r4, #16]
 800246e:	f043 0304 	orr.w	r3, r3, #4
 8002472:	6123      	str	r3, [r4, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002474:	6923      	ldr	r3, [r4, #16]
 8002476:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800247a:	6123      	str	r3, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800247c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002480:	f7ff ff18 	bl	80022b4 <FLASH_WaitForLastOperation>
 8002484:	4601      	mov	r1, r0
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8002486:	6923      	ldr	r3, [r4, #16]
 8002488:	f023 0304 	bic.w	r3, r3, #4
 800248c:	6123      	str	r3, [r4, #16]
 800248e:	e002      	b.n	8002496 <HAL_FLASHEx_Erase+0xaa>
            *PageError = address;
 8002490:	603c      	str	r4, [r7, #0]
            break;
 8002492:	e000      	b.n	8002496 <HAL_FLASHEx_Erase+0xaa>
  HAL_StatusTypeDef status = HAL_ERROR;
 8002494:	2101      	movs	r1, #1
  __HAL_UNLOCK(&pFlash);
 8002496:	4b05      	ldr	r3, [pc, #20]	; (80024ac <HAL_FLASHEx_Erase+0xc0>)
 8002498:	2200      	movs	r2, #0
 800249a:	761a      	strb	r2, [r3, #24]
}
 800249c:	4608      	mov	r0, r1
 800249e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  HAL_StatusTypeDef status = HAL_ERROR;
 80024a2:	2101      	movs	r1, #1
 80024a4:	e7f7      	b.n	8002496 <HAL_FLASHEx_Erase+0xaa>
  __HAL_LOCK(&pFlash);
 80024a6:	2102      	movs	r1, #2
}
 80024a8:	4608      	mov	r0, r1
 80024aa:	4770      	bx	lr
 80024ac:	20001800 	.word	0x20001800
 80024b0:	40022000 	.word	0x40022000

080024b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024b8:	b083      	sub	sp, #12
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024ba:	f8d1 9000 	ldr.w	r9, [r1]
 80024be:	f1b9 0f00 	cmp.w	r9, #0
 80024c2:	f000 811f 	beq.w	8002704 <HAL_GPIO_Init+0x250>
 80024c6:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 80024c8:	4613      	mov	r3, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80024ca:	4e90      	ldr	r6, [pc, #576]	; (800270c <HAL_GPIO_Init+0x258>)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80024cc:	4c90      	ldr	r4, [pc, #576]	; (8002710 <HAL_GPIO_Init+0x25c>)
      switch (GPIO_Init->Mode)
 80024ce:	4d91      	ldr	r5, [pc, #580]	; (8002714 <HAL_GPIO_Init+0x260>)
 80024d0:	f8df e244 	ldr.w	lr, [pc, #580]	; 8002718 <HAL_GPIO_Init+0x264>
 80024d4:	4694      	mov	ip, r2
 80024d6:	e0ba      	b.n	800264e <HAL_GPIO_Init+0x19a>
 80024d8:	f04f 0c00 	mov.w	ip, #0
 80024dc:	e025      	b.n	800252a <HAL_GPIO_Init+0x76>
 80024de:	45a9      	cmp	r9, r5
 80024e0:	d00f      	beq.n	8002502 <HAL_GPIO_Init+0x4e>
 80024e2:	d906      	bls.n	80024f2 <HAL_GPIO_Init+0x3e>
 80024e4:	45f1      	cmp	r9, lr
 80024e6:	d00c      	beq.n	8002502 <HAL_GPIO_Init+0x4e>
 80024e8:	f8df a230 	ldr.w	sl, [pc, #560]	; 800271c <HAL_GPIO_Init+0x268>
 80024ec:	45d1      	cmp	r9, sl
 80024ee:	d008      	beq.n	8002502 <HAL_GPIO_Init+0x4e>
 80024f0:	e01b      	b.n	800252a <HAL_GPIO_Init+0x76>
 80024f2:	f8df a22c 	ldr.w	sl, [pc, #556]	; 8002720 <HAL_GPIO_Init+0x26c>
 80024f6:	45d1      	cmp	r9, sl
 80024f8:	d003      	beq.n	8002502 <HAL_GPIO_Init+0x4e>
 80024fa:	f50a 2a70 	add.w	sl, sl, #983040	; 0xf0000
 80024fe:	45d1      	cmp	r9, sl
 8002500:	d10f      	bne.n	8002522 <HAL_GPIO_Init+0x6e>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002502:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8002506:	f1bc 0f00 	cmp.w	ip, #0
 800250a:	f000 80ef 	beq.w	80026ec <HAL_GPIO_Init+0x238>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800250e:	f1bc 0f01 	cmp.w	ip, #1
            GPIOx->BSRR = ioposition;
 8002512:	bf0c      	ite	eq
 8002514:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8002518:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800251c:	f04f 0c08 	mov.w	ip, #8
 8002520:	e003      	b.n	800252a <HAL_GPIO_Init+0x76>
      switch (GPIO_Init->Mode)
 8002522:	f5aa 1a80 	sub.w	sl, sl, #1048576	; 0x100000
 8002526:	45d1      	cmp	r9, sl
 8002528:	d0eb      	beq.n	8002502 <HAL_GPIO_Init+0x4e>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800252a:	2fff      	cmp	r7, #255	; 0xff
 800252c:	bf99      	ittee	ls
 800252e:	4681      	movls	r9, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002530:	4692      	movls	sl, r2
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002532:	f100 0904 	addhi.w	r9, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002536:	f1a2 0a20 	subhi.w	sl, r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800253a:	f8d9 8000 	ldr.w	r8, [r9]
 800253e:	f04f 0b0f 	mov.w	fp, #15
 8002542:	fa0b fb0a 	lsl.w	fp, fp, sl
 8002546:	ea28 080b 	bic.w	r8, r8, fp
 800254a:	fa0c fa0a 	lsl.w	sl, ip, sl
 800254e:	ea48 080a 	orr.w	r8, r8, sl
 8002552:	f8c9 8000 	str.w	r8, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002556:	f8d1 8004 	ldr.w	r8, [r1, #4]
 800255a:	f018 5f80 	tst.w	r8, #268435456	; 0x10000000
 800255e:	d06f      	beq.n	8002640 <HAL_GPIO_Init+0x18c>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002560:	f8d6 8018 	ldr.w	r8, [r6, #24]
 8002564:	f048 0801 	orr.w	r8, r8, #1
 8002568:	f8c6 8018 	str.w	r8, [r6, #24]
 800256c:	f8d6 8018 	ldr.w	r8, [r6, #24]
 8002570:	f008 0801 	and.w	r8, r8, #1
 8002574:	f8cd 8004 	str.w	r8, [sp, #4]
 8002578:	f8dd 8004 	ldr.w	r8, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 800257c:	f023 0803 	bic.w	r8, r3, #3
 8002580:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8002584:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
 8002588:	f8d8 a008 	ldr.w	sl, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800258c:	f003 0903 	and.w	r9, r3, #3
 8002590:	ea4f 0b89 	mov.w	fp, r9, lsl #2
 8002594:	f04f 090f 	mov.w	r9, #15
 8002598:	fa09 f90b 	lsl.w	r9, r9, fp
 800259c:	ea2a 0a09 	bic.w	sl, sl, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80025a0:	f8df 9180 	ldr.w	r9, [pc, #384]	; 8002724 <HAL_GPIO_Init+0x270>
 80025a4:	4548      	cmp	r0, r9
 80025a6:	f000 80a4 	beq.w	80026f2 <HAL_GPIO_Init+0x23e>
 80025aa:	f509 6980 	add.w	r9, r9, #1024	; 0x400
 80025ae:	4548      	cmp	r0, r9
 80025b0:	f000 80a2 	beq.w	80026f8 <HAL_GPIO_Init+0x244>
 80025b4:	f509 6980 	add.w	r9, r9, #1024	; 0x400
 80025b8:	4548      	cmp	r0, r9
 80025ba:	f000 80a0 	beq.w	80026fe <HAL_GPIO_Init+0x24a>
 80025be:	f509 6980 	add.w	r9, r9, #1024	; 0x400
 80025c2:	4548      	cmp	r0, r9
 80025c4:	bf0c      	ite	eq
 80025c6:	f04f 0903 	moveq.w	r9, #3
 80025ca:	f04f 0904 	movne.w	r9, #4
 80025ce:	fa09 f90b 	lsl.w	r9, r9, fp
 80025d2:	ea49 090a 	orr.w	r9, r9, sl
        AFIO->EXTICR[position >> 2u] = temp;
 80025d6:	f8c8 9008 	str.w	r9, [r8, #8]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80025da:	f8d1 8004 	ldr.w	r8, [r1, #4]
 80025de:	f418 3f80 	tst.w	r8, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80025e2:	f8d4 8000 	ldr.w	r8, [r4]
 80025e6:	bf14      	ite	ne
 80025e8:	ea48 0807 	orrne.w	r8, r8, r7
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80025ec:	ea28 0807 	biceq.w	r8, r8, r7
 80025f0:	f8c4 8000 	str.w	r8, [r4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80025f4:	f8d1 8004 	ldr.w	r8, [r1, #4]
 80025f8:	f418 3f00 	tst.w	r8, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80025fc:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8002600:	bf14      	ite	ne
 8002602:	ea48 0807 	orrne.w	r8, r8, r7
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002606:	ea28 0807 	biceq.w	r8, r8, r7
 800260a:	f8c4 8004 	str.w	r8, [r4, #4]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800260e:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8002612:	f418 1f80 	tst.w	r8, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8002616:	f8d4 8008 	ldr.w	r8, [r4, #8]
 800261a:	bf14      	ite	ne
 800261c:	ea48 0807 	orrne.w	r8, r8, r7
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002620:	ea28 0807 	biceq.w	r8, r8, r7
 8002624:	f8c4 8008 	str.w	r8, [r4, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002628:	f8d1 8004 	ldr.w	r8, [r1, #4]
 800262c:	f418 1f00 	tst.w	r8, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8002630:	f8d4 800c 	ldr.w	r8, [r4, #12]
 8002634:	bf14      	ite	ne
 8002636:	ea48 0707 	orrne.w	r7, r8, r7
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800263a:	ea28 0707 	biceq.w	r7, r8, r7
 800263e:	60e7      	str	r7, [r4, #12]
        }
      }
    }

	position++;
 8002640:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002642:	f8d1 9000 	ldr.w	r9, [r1]
 8002646:	3204      	adds	r2, #4
 8002648:	fa39 f703 	lsrs.w	r7, r9, r3
 800264c:	d05a      	beq.n	8002704 <HAL_GPIO_Init+0x250>
    ioposition = (0x01uL << position);
 800264e:	f04f 0801 	mov.w	r8, #1
 8002652:	fa08 f803 	lsl.w	r8, r8, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002656:	ea08 0709 	and.w	r7, r8, r9
    if (iocurrent == ioposition)
 800265a:	ea38 0909 	bics.w	r9, r8, r9
 800265e:	d1ef      	bne.n	8002640 <HAL_GPIO_Init+0x18c>
      switch (GPIO_Init->Mode)
 8002660:	f8d1 9004 	ldr.w	r9, [r1, #4]
 8002664:	f1b9 0f12 	cmp.w	r9, #18
 8002668:	f63f af39 	bhi.w	80024de <HAL_GPIO_Init+0x2a>
 800266c:	f1b9 0f12 	cmp.w	r9, #18
 8002670:	f63f af5b 	bhi.w	800252a <HAL_GPIO_Init+0x76>
 8002674:	f20f 0a04 	addw	sl, pc, #4
 8002678:	f85a f029 	ldr.w	pc, [sl, r9, lsl #2]
 800267c:	08002503 	.word	0x08002503
 8002680:	080026c9 	.word	0x080026c9
 8002684:	080026d9 	.word	0x080026d9
 8002688:	080024d9 	.word	0x080024d9
 800268c:	0800252b 	.word	0x0800252b
 8002690:	0800252b 	.word	0x0800252b
 8002694:	0800252b 	.word	0x0800252b
 8002698:	0800252b 	.word	0x0800252b
 800269c:	0800252b 	.word	0x0800252b
 80026a0:	0800252b 	.word	0x0800252b
 80026a4:	0800252b 	.word	0x0800252b
 80026a8:	0800252b 	.word	0x0800252b
 80026ac:	0800252b 	.word	0x0800252b
 80026b0:	0800252b 	.word	0x0800252b
 80026b4:	0800252b 	.word	0x0800252b
 80026b8:	0800252b 	.word	0x0800252b
 80026bc:	0800252b 	.word	0x0800252b
 80026c0:	080026cf 	.word	0x080026cf
 80026c4:	080026e3 	.word	0x080026e3
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80026c8:	f8d1 c00c 	ldr.w	ip, [r1, #12]
          break;
 80026cc:	e72d      	b.n	800252a <HAL_GPIO_Init+0x76>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80026ce:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 80026d2:	f10c 0c04 	add.w	ip, ip, #4
          break;
 80026d6:	e728      	b.n	800252a <HAL_GPIO_Init+0x76>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80026d8:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 80026dc:	f10c 0c08 	add.w	ip, ip, #8
          break;
 80026e0:	e723      	b.n	800252a <HAL_GPIO_Init+0x76>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80026e2:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 80026e6:	f10c 0c0c 	add.w	ip, ip, #12
          break;
 80026ea:	e71e      	b.n	800252a <HAL_GPIO_Init+0x76>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80026ec:	f04f 0c04 	mov.w	ip, #4
 80026f0:	e71b      	b.n	800252a <HAL_GPIO_Init+0x76>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80026f2:	f04f 0900 	mov.w	r9, #0
 80026f6:	e76a      	b.n	80025ce <HAL_GPIO_Init+0x11a>
 80026f8:	f04f 0901 	mov.w	r9, #1
 80026fc:	e767      	b.n	80025ce <HAL_GPIO_Init+0x11a>
 80026fe:	f04f 0902 	mov.w	r9, #2
 8002702:	e764      	b.n	80025ce <HAL_GPIO_Init+0x11a>
  }
}
 8002704:	b003      	add	sp, #12
 8002706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800270a:	bf00      	nop
 800270c:	40021000 	.word	0x40021000
 8002710:	40010400 	.word	0x40010400
 8002714:	10220000 	.word	0x10220000
 8002718:	10310000 	.word	0x10310000
 800271c:	10320000 	.word	0x10320000
 8002720:	10120000 	.word	0x10120000
 8002724:	40010800 	.word	0x40010800

08002728 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002728:	b10a      	cbz	r2, 800272e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 800272a:	6101      	str	r1, [r0, #16]
 800272c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800272e:	0409      	lsls	r1, r1, #16
 8002730:	6101      	str	r1, [r0, #16]
  }
}
 8002732:	4770      	bx	lr

08002734 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002734:	b570      	push	{r4, r5, r6, lr}
 8002736:	b086      	sub	sp, #24
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002738:	2800      	cmp	r0, #0
 800273a:	d07f      	beq.n	800283c <HAL_PCD_Init+0x108>
 800273c:	4605      	mov	r5, r0

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800273e:	f890 32a9 	ldrb.w	r3, [r0, #681]	; 0x2a9
 8002742:	b1eb      	cbz	r3, 8002780 <HAL_PCD_Init+0x4c>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002744:	2303      	movs	r3, #3
 8002746:	f885 32a9 	strb.w	r3, [r5, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800274a:	6828      	ldr	r0, [r5, #0]
 800274c:	f002 fa17 	bl	8004b7e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002750:	462c      	mov	r4, r5
 8002752:	f854 6b10 	ldr.w	r6, [r4], #16
 8002756:	46ec      	mov	ip, sp
 8002758:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800275a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800275e:	6823      	ldr	r3, [r4, #0]
 8002760:	f8cc 3000 	str.w	r3, [ip]
 8002764:	1d2b      	adds	r3, r5, #4
 8002766:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002768:	4630      	mov	r0, r6
 800276a:	f002 f9f8 	bl	8004b5e <USB_CoreInit>
 800276e:	4604      	mov	r4, r0
 8002770:	b158      	cbz	r0, 800278a <HAL_PCD_Init+0x56>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002772:	2302      	movs	r3, #2
 8002774:	f885 32a9 	strb.w	r3, [r5, #681]	; 0x2a9
    return HAL_ERROR;
 8002778:	2401      	movs	r4, #1
  hpcd->USB_Address = 0U;
  hpcd->State = HAL_PCD_STATE_READY;
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 800277a:	4620      	mov	r0, r4
 800277c:	b006      	add	sp, #24
 800277e:	bd70      	pop	{r4, r5, r6, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8002780:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
    HAL_PCD_MspInit(hpcd);
 8002784:	f004 f896 	bl	80068b4 <HAL_PCD_MspInit>
 8002788:	e7dc      	b.n	8002744 <HAL_PCD_Init+0x10>
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800278a:	2100      	movs	r1, #0
 800278c:	6828      	ldr	r0, [r5, #0]
 800278e:	f002 fa00 	bl	8004b92 <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002792:	6868      	ldr	r0, [r5, #4]
 8002794:	b390      	cbz	r0, 80027fc <HAL_PCD_Init+0xc8>
 8002796:	4623      	mov	r3, r4
    hpcd->IN_ep[i].is_in = 1U;
 8002798:	f04f 0c01 	mov.w	ip, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800279c:	2100      	movs	r1, #0
    hpcd->IN_ep[i].is_in = 1U;
 800279e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80027a2:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 80027a6:	f882 c029 	strb.w	ip, [r2, #41]	; 0x29
    hpcd->IN_ep[i].num = i;
 80027aa:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    hpcd->IN_ep[i].tx_fifo_num = i;
 80027ae:	86d3      	strh	r3, [r2, #54]	; 0x36
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80027b0:	f882 102b 	strb.w	r1, [r2, #43]	; 0x2b
    hpcd->IN_ep[i].maxpacket = 0U;
 80027b4:	6391      	str	r1, [r2, #56]	; 0x38
    hpcd->IN_ep[i].xfer_buff = 0U;
 80027b6:	63d1      	str	r1, [r2, #60]	; 0x3c
    hpcd->IN_ep[i].xfer_len = 0U;
 80027b8:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80027bc:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 80027c0:	6411      	str	r1, [r2, #64]	; 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027c2:	3301      	adds	r3, #1
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	4283      	cmp	r3, r0
 80027c8:	d3e9      	bcc.n	800279e <HAL_PCD_Init+0x6a>
    hpcd->OUT_ep[i].is_in = 0U;
 80027ca:	2200      	movs	r2, #0
 80027cc:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80027d0:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 80027d4:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169
    hpcd->OUT_ep[i].num = i;
 80027d8:	f883 4168 	strb.w	r4, [r3, #360]	; 0x168
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80027dc:	f883 216b 	strb.w	r2, [r3, #363]	; 0x16b
    hpcd->OUT_ep[i].maxpacket = 0U;
 80027e0:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80027e4:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    hpcd->OUT_ep[i].xfer_len = 0U;
 80027e8:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80027ec:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 80027f0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027f4:	3401      	adds	r4, #1
 80027f6:	b2e4      	uxtb	r4, r4
 80027f8:	4284      	cmp	r4, r0
 80027fa:	d3e7      	bcc.n	80027cc <HAL_PCD_Init+0x98>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80027fc:	462c      	mov	r4, r5
 80027fe:	f854 6b10 	ldr.w	r6, [r4], #16
 8002802:	46ec      	mov	ip, sp
 8002804:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002806:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800280a:	6823      	ldr	r3, [r4, #0]
 800280c:	f8cc 3000 	str.w	r3, [ip]
 8002810:	1d2b      	adds	r3, r5, #4
 8002812:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002814:	4630      	mov	r0, r6
 8002816:	f002 f9be 	bl	8004b96 <USB_DevInit>
 800281a:	4604      	mov	r4, r0
 800281c:	b120      	cbz	r0, 8002828 <HAL_PCD_Init+0xf4>
    hpcd->State = HAL_PCD_STATE_ERROR;
 800281e:	2302      	movs	r3, #2
 8002820:	f885 32a9 	strb.w	r3, [r5, #681]	; 0x2a9
    return HAL_ERROR;
 8002824:	2401      	movs	r4, #1
 8002826:	e7a8      	b.n	800277a <HAL_PCD_Init+0x46>
  hpcd->USB_Address = 0U;
 8002828:	2300      	movs	r3, #0
 800282a:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800282e:	2301      	movs	r3, #1
 8002830:	f885 32a9 	strb.w	r3, [r5, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8002834:	6828      	ldr	r0, [r5, #0]
 8002836:	f002 fccd 	bl	80051d4 <USB_DevDisconnect>
  return HAL_OK;
 800283a:	e79e      	b.n	800277a <HAL_PCD_Init+0x46>
    return HAL_ERROR;
 800283c:	2401      	movs	r4, #1
 800283e:	e79c      	b.n	800277a <HAL_PCD_Init+0x46>

08002840 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002840:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hpcd);
 8002842:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 8002846:	2b01      	cmp	r3, #1
 8002848:	d011      	beq.n	800286e <HAL_PCD_Start+0x2e>
 800284a:	4604      	mov	r4, r0
 800284c:	2501      	movs	r5, #1
 800284e:	f880 52a8 	strb.w	r5, [r0, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002852:	6800      	ldr	r0, [r0, #0]
 8002854:	f002 f98a 	bl	8004b6c <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002858:	4629      	mov	r1, r5
 800285a:	4620      	mov	r0, r4
 800285c:	f004 f935 	bl	8006aca <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8002860:	6820      	ldr	r0, [r4, #0]
 8002862:	f002 fcb5 	bl	80051d0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002866:	2000      	movs	r0, #0
 8002868:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8

  return HAL_OK;
}
 800286c:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 800286e:	2002      	movs	r0, #2
 8002870:	e7fc      	b.n	800286c <HAL_PCD_Start+0x2c>

08002872 <HAL_PCD_SetAddress>:
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 8002872:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 8002876:	2b01      	cmp	r3, #1
 8002878:	d00d      	beq.n	8002896 <HAL_PCD_SetAddress+0x24>
{
 800287a:	b510      	push	{r4, lr}
 800287c:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 800287e:	2301      	movs	r3, #1
 8002880:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002884:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002888:	6800      	ldr	r0, [r0, #0]
 800288a:	f002 fc9b 	bl	80051c4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800288e:	2000      	movs	r0, #0
 8002890:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8

  return HAL_OK;
}
 8002894:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8002896:	2002      	movs	r0, #2
}
 8002898:	4770      	bx	lr

0800289a <HAL_PCD_IRQHandler>:
{
 800289a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80028a2:	6800      	ldr	r0, [r0, #0]
 80028a4:	f002 fc98 	bl	80051d8 <USB_ReadInterrupts>
 80028a8:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 80028ac:	f040 809a 	bne.w	80029e4 <HAL_PCD_IRQHandler+0x14a>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80028b0:	6820      	ldr	r0, [r4, #0]
 80028b2:	f002 fc91 	bl	80051d8 <USB_ReadInterrupts>
 80028b6:	f410 6f80 	tst.w	r0, #1024	; 0x400
 80028ba:	f040 84f5 	bne.w	80032a8 <HAL_PCD_IRQHandler+0xa0e>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80028be:	6820      	ldr	r0, [r4, #0]
 80028c0:	f002 fc8a 	bl	80051d8 <USB_ReadInterrupts>
 80028c4:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 80028c8:	d008      	beq.n	80028dc <HAL_PCD_IRQHandler+0x42>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80028ca:	6822      	ldr	r2, [r4, #0]
 80028cc:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80028d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80028d4:	041b      	lsls	r3, r3, #16
 80028d6:	0c1b      	lsrs	r3, r3, #16
 80028d8:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80028dc:	6820      	ldr	r0, [r4, #0]
 80028de:	f002 fc7b 	bl	80051d8 <USB_ReadInterrupts>
 80028e2:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 80028e6:	d008      	beq.n	80028fa <HAL_PCD_IRQHandler+0x60>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80028e8:	6822      	ldr	r2, [r4, #0]
 80028ea:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80028ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80028f2:	041b      	lsls	r3, r3, #16
 80028f4:	0c1b      	lsrs	r3, r3, #16
 80028f6:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80028fa:	6820      	ldr	r0, [r4, #0]
 80028fc:	f002 fc6c 	bl	80051d8 <USB_ReadInterrupts>
 8002900:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 8002904:	f040 84e2 	bne.w	80032cc <HAL_PCD_IRQHandler+0xa32>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002908:	6820      	ldr	r0, [r4, #0]
 800290a:	f002 fc65 	bl	80051d8 <USB_ReadInterrupts>
 800290e:	f410 6f00 	tst.w	r0, #2048	; 0x800
 8002912:	d04e      	beq.n	80029b2 <HAL_PCD_IRQHandler+0x118>
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002914:	6826      	ldr	r6, [r4, #0]
 8002916:	4631      	mov	r1, r6
 8002918:	f1ad 0202 	sub.w	r2, sp, #2
 800291c:	f10d 050e 	add.w	r5, sp, #14
 8002920:	4613      	mov	r3, r2
 8002922:	f831 0b04 	ldrh.w	r0, [r1], #4
 8002926:	f823 0f02 	strh.w	r0, [r3, #2]!
    for (i = 0U; i < 8U; i++)
 800292a:	42ab      	cmp	r3, r5
 800292c:	d1f9      	bne.n	8002922 <HAL_PCD_IRQHandler+0x88>
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800292e:	f8b6 3040 	ldrh.w	r3, [r6, #64]	; 0x40
 8002932:	b29b      	uxth	r3, r3
 8002934:	f043 0301 	orr.w	r3, r3, #1
 8002938:	f8a6 3040 	strh.w	r3, [r6, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800293c:	6821      	ldr	r1, [r4, #0]
 800293e:	f8b1 3040 	ldrh.w	r3, [r1, #64]	; 0x40
 8002942:	f023 0301 	bic.w	r3, r3, #1
 8002946:	041b      	lsls	r3, r3, #16
 8002948:	0c1b      	lsrs	r3, r3, #16
 800294a:	f8a1 3040 	strh.w	r3, [r1, #64]	; 0x40
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800294e:	6821      	ldr	r1, [r4, #0]
 8002950:	f8b1 3044 	ldrh.w	r3, [r1, #68]	; 0x44
 8002954:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002958:	d0fa      	beq.n	8002950 <HAL_PCD_IRQHandler+0xb6>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800295a:	f8b1 3044 	ldrh.w	r3, [r1, #68]	; 0x44
 800295e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002962:	041b      	lsls	r3, r3, #16
 8002964:	0c1b      	lsrs	r3, r3, #16
 8002966:	f8a1 3044 	strh.w	r3, [r1, #68]	; 0x44
 800296a:	2300      	movs	r3, #0
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800296c:	6821      	ldr	r1, [r4, #0]
 800296e:	f832 0f02 	ldrh.w	r0, [r2, #2]!
 8002972:	52c8      	strh	r0, [r1, r3]
    for (i = 0U; i < 8U; i++)
 8002974:	3304      	adds	r3, #4
 8002976:	2b20      	cmp	r3, #32
 8002978:	d1f8      	bne.n	800296c <HAL_PCD_IRQHandler+0xd2>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800297a:	6822      	ldr	r2, [r4, #0]
 800297c:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8002980:	b29b      	uxth	r3, r3
 8002982:	f043 0308 	orr.w	r3, r3, #8
 8002986:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800298a:	6822      	ldr	r2, [r4, #0]
 800298c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8002990:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002994:	041b      	lsls	r3, r3, #16
 8002996:	0c1b      	lsrs	r3, r3, #16
 8002998:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800299c:	6822      	ldr	r2, [r4, #0]
 800299e:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80029a2:	b29b      	uxth	r3, r3
 80029a4:	f043 0304 	orr.w	r3, r3, #4
 80029a8:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 80029ac:	4620      	mov	r0, r4
 80029ae:	f003 ffcf 	bl	8006950 <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80029b2:	6820      	ldr	r0, [r4, #0]
 80029b4:	f002 fc10 	bl	80051d8 <USB_ReadInterrupts>
 80029b8:	f410 7f00 	tst.w	r0, #512	; 0x200
 80029bc:	f040 84a6 	bne.w	800330c <HAL_PCD_IRQHandler+0xa72>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80029c0:	6820      	ldr	r0, [r4, #0]
 80029c2:	f002 fc09 	bl	80051d8 <USB_ReadInterrupts>
 80029c6:	f410 7f80 	tst.w	r0, #256	; 0x100
 80029ca:	d008      	beq.n	80029de <HAL_PCD_IRQHandler+0x144>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80029cc:	6822      	ldr	r2, [r4, #0]
 80029ce:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80029d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80029d6:	041b      	lsls	r3, r3, #16
 80029d8:	0c1b      	lsrs	r3, r3, #16
 80029da:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 80029de:	b004      	add	sp, #16
 80029e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80029e4:	6820      	ldr	r0, [r4, #0]
 80029e6:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 80029ea:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80029ee:	f43f af5f 	beq.w	80028b0 <HAL_PCD_IRQHandler+0x16>
 80029f2:	2600      	movs	r6, #0
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80029f4:	f248 0780 	movw	r7, #32896	; 0x8080
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80029f8:	f24c 0880 	movw	r8, #49280	; 0xc080
 80029fc:	e058      	b.n	8002ab0 <HAL_PCD_IRQHandler+0x216>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80029fe:	8803      	ldrh	r3, [r0, #0]
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002a06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002a16:	6822      	ldr	r2, [r4, #0]
 8002a18:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 8002a22:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8002a26:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8002a2a:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8002a2e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a32:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8002a34:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002a36:	4413      	add	r3, r2
 8002a38:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002a3a:	4631      	mov	r1, r6
 8002a3c:	4620      	mov	r0, r4
 8002a3e:	f003 ff63 	bl	8006908 <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002a42:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8002a46:	b363      	cbz	r3, 8002aa2 <HAL_PCD_IRQHandler+0x208>
 8002a48:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002a4a:	bb53      	cbnz	r3, 8002aa2 <HAL_PCD_IRQHandler+0x208>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002a4c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8002a50:	6822      	ldr	r2, [r4, #0]
 8002a52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a56:	f8a2 304c 	strh.w	r3, [r2, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002a5a:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
 8002a5e:	e020      	b.n	8002aa2 <HAL_PCD_IRQHandler+0x208>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002a60:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 8002a6a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002a6e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002a72:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 8002a76:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a7a:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002a7e:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 8002a82:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 8002a86:	f002 ffea 	bl	8005a5e <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002a8a:	6822      	ldr	r2, [r4, #0]
 8002a8c:	8813      	ldrh	r3, [r2, #0]
 8002a8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a92:	051b      	lsls	r3, r3, #20
 8002a94:	0d1b      	lsrs	r3, r3, #20
 8002a96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a9a:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8002a9c:	4620      	mov	r0, r4
 8002a9e:	f003 ff1f 	bl	80068e0 <HAL_PCD_SetupStageCallback>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002aa2:	6820      	ldr	r0, [r4, #0]
 8002aa4:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8002aa8:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8002aac:	f43f af00 	beq.w	80028b0 <HAL_PCD_IRQHandler+0x16>
    wIstr = hpcd->Instance->ISTR;
 8002ab0:	f8b0 5044 	ldrh.w	r5, [r0, #68]	; 0x44
 8002ab4:	b2ab      	uxth	r3, r5
    if (epindex == 0U)
 8002ab6:	f015 050f 	ands.w	r5, r5, #15
 8002aba:	d173      	bne.n	8002ba4 <HAL_PCD_IRQHandler+0x30a>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002abc:	f013 0f10 	tst.w	r3, #16
 8002ac0:	d09d      	beq.n	80029fe <HAL_PCD_IRQHandler+0x164>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002ac2:	8803      	ldrh	r3, [r0, #0]
 8002ac4:	b29a      	uxth	r2, r3
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002ac6:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8002aca:	d1c9      	bne.n	8002a60 <HAL_PCD_IRQHandler+0x1c6>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002acc:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8002ad0:	d0e7      	beq.n	8002aa2 <HAL_PCD_IRQHandler+0x208>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002ad2:	8803      	ldrh	r3, [r0, #0]
 8002ad4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ad8:	051b      	lsls	r3, r3, #20
 8002ada:	0d1b      	lsrs	r3, r3, #20
 8002adc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ae0:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002ae2:	6820      	ldr	r0, [r4, #0]
 8002ae4:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002ae8:	b29b      	uxth	r3, r3
 8002aea:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 8002aee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002af2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002af6:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 8002afa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002afe:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002b02:	b18b      	cbz	r3, 8002b28 <HAL_PCD_IRQHandler+0x28e>
 8002b04:	f8d4 117c 	ldr.w	r1, [r4, #380]	; 0x17c
 8002b08:	b171      	cbz	r1, 8002b28 <HAL_PCD_IRQHandler+0x28e>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002b0a:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 8002b0e:	f002 ffa6 	bl	8005a5e <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8002b12:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8002b16:	f8d4 2184 	ldr.w	r2, [r4, #388]	; 0x184
 8002b1a:	4413      	add	r3, r2
 8002b1c:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002b20:	4631      	mov	r1, r6
 8002b22:	4620      	mov	r0, r4
 8002b24:	f003 fee4 	bl	80068f0 <HAL_PCD_DataOutStageCallback>
          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8002b28:	6823      	ldr	r3, [r4, #0]
 8002b2a:	881a      	ldrh	r2, [r3, #0]
 8002b2c:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8002b30:	d1b7      	bne.n	8002aa2 <HAL_PCD_IRQHandler+0x208>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002b32:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8002b36:	b292      	uxth	r2, r2
 8002b38:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002b3c:	f8d4 1178 	ldr.w	r1, [r4, #376]	; 0x178
 8002b40:	b9c1      	cbnz	r1, 8002b74 <HAL_PCD_IRQHandler+0x2da>
 8002b42:	5a99      	ldrh	r1, [r3, r2]
 8002b44:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8002b48:	0409      	lsls	r1, r1, #16
 8002b4a:	0c09      	lsrs	r1, r1, #16
 8002b4c:	5299      	strh	r1, [r3, r2]
 8002b4e:	5a99      	ldrh	r1, [r3, r2]
 8002b50:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8002b54:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8002b58:	b289      	uxth	r1, r1
 8002b5a:	5299      	strh	r1, [r3, r2]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002b5c:	6822      	ldr	r2, [r4, #0]
 8002b5e:	8813      	ldrh	r3, [r2, #0]
 8002b60:	b29b      	uxth	r3, r3
 8002b62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b6a:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002b6e:	433b      	orrs	r3, r7
 8002b70:	8013      	strh	r3, [r2, #0]
 8002b72:	e796      	b.n	8002aa2 <HAL_PCD_IRQHandler+0x208>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002b74:	293e      	cmp	r1, #62	; 0x3e
 8002b76:	d808      	bhi.n	8002b8a <HAL_PCD_IRQHandler+0x2f0>
 8002b78:	0848      	lsrs	r0, r1, #1
 8002b7a:	f011 0f01 	tst.w	r1, #1
 8002b7e:	bf18      	it	ne
 8002b80:	3001      	addne	r0, #1
 8002b82:	0281      	lsls	r1, r0, #10
 8002b84:	b289      	uxth	r1, r1
 8002b86:	5299      	strh	r1, [r3, r2]
 8002b88:	e7e8      	b.n	8002b5c <HAL_PCD_IRQHandler+0x2c2>
 8002b8a:	0948      	lsrs	r0, r1, #5
 8002b8c:	f011 0f1f 	tst.w	r1, #31
 8002b90:	bf08      	it	eq
 8002b92:	f100 30ff 	addeq.w	r0, r0, #4294967295
 8002b96:	ea6f 61c0 	mvn.w	r1, r0, lsl #27
 8002b9a:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8002b9e:	b289      	uxth	r1, r1
 8002ba0:	5299      	strh	r1, [r3, r2]
 8002ba2:	e7db      	b.n	8002b5c <HAL_PCD_IRQHandler+0x2c2>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002ba4:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
 8002ba8:	fa1f f983 	uxth.w	r9, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002bac:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8002bb0:	d155      	bne.n	8002c5e <HAL_PCD_IRQHandler+0x3c4>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002bb2:	f019 0f80 	tst.w	r9, #128	; 0x80
 8002bb6:	f43f af74 	beq.w	8002aa2 <HAL_PCD_IRQHandler+0x208>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002bba:	6822      	ldr	r2, [r4, #0]
 8002bbc:	f832 3025 	ldrh.w	r3, [r2, r5, lsl #2]
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002bc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002bce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	f822 3025 	strh.w	r3, [r2, r5, lsl #2]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002bd8:	eb05 0a85 	add.w	sl, r5, r5, lsl #2
 8002bdc:	eb04 0aca 	add.w	sl, r4, sl, lsl #3
 8002be0:	f89a 302b 	ldrb.w	r3, [sl, #43]	; 0x2b
 8002be4:	2b03      	cmp	r3, #3
 8002be6:	d007      	beq.n	8002bf8 <HAL_PCD_IRQHandler+0x35e>
 8002be8:	b133      	cbz	r3, 8002bf8 <HAL_PCD_IRQHandler+0x35e>
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	f040 818e 	bne.w	8002f0c <HAL_PCD_IRQHandler+0x672>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002bf0:	f419 7f80 	tst.w	r9, #256	; 0x100
 8002bf4:	f040 818a 	bne.w	8002f0c <HAL_PCD_IRQHandler+0x672>
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002bf8:	6820      	ldr	r0, [r4, #0]
 8002bfa:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002bfe:	b29b      	uxth	r3, r3
 8002c00:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
          if (ep->xfer_len > TxByteNbre)
 8002c04:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8002c08:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8002c0c:	6c12      	ldr	r2, [r2, #64]	; 0x40
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002c0e:	3302      	adds	r3, #2
 8002c10:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8002c14:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002c18:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
          if (ep->xfer_len > TxByteNbre)
 8002c1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c20:	429a      	cmp	r2, r3
 8002c22:	f240 8381 	bls.w	8003328 <HAL_PCD_IRQHandler+0xa8e>
            ep->xfer_len -= TxByteNbre;
 8002c26:	1ad2      	subs	r2, r2, r3
 8002c28:	eb05 0c85 	add.w	ip, r5, r5, lsl #2
 8002c2c:	eb04 0ccc 	add.w	ip, r4, ip, lsl #3
 8002c30:	f8cc 2040 	str.w	r2, [ip, #64]	; 0x40
          if (ep->xfer_len == 0U)
 8002c34:	2a00      	cmp	r2, #0
 8002c36:	f000 837c 	beq.w	8003332 <HAL_PCD_IRQHandler+0xa98>
            ep->xfer_buff += TxByteNbre;
 8002c3a:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8002c3e:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8002c42:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002c44:	4419      	add	r1, r3
 8002c46:	63d1      	str	r1, [r2, #60]	; 0x3c
            ep->xfer_count += TxByteNbre;
 8002c48:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002c4a:	440b      	add	r3, r1
 8002c4c:	6453      	str	r3, [r2, #68]	; 0x44
        ep = &hpcd->IN_ep[epindex];
 8002c4e:	3501      	adds	r5, #1
 8002c50:	eb05 0585 	add.w	r5, r5, r5, lsl #2
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002c54:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8002c58:	f002 fadb 	bl	8005212 <USB_EPStartXfer>
 8002c5c:	e721      	b.n	8002aa2 <HAL_PCD_IRQHandler+0x208>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002c5e:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
 8002c62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c66:	051b      	lsls	r3, r3, #20
 8002c68:	0d1b      	lsrs	r3, r3, #20
 8002c6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c6e:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8002c72:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8002c76:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8002c7a:	f893 3174 	ldrb.w	r3, [r3, #372]	; 0x174
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d145      	bne.n	8002d0e <HAL_PCD_IRQHandler+0x474>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002c82:	6820      	ldr	r0, [r4, #0]
 8002c84:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8002c8e:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8002c92:	f892 2168 	ldrb.w	r2, [r2, #360]	; 0x168
 8002c96:	3306      	adds	r3, #6
 8002c98:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002c9c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002ca0:	f8b3 a400 	ldrh.w	sl, [r3, #1024]	; 0x400
 8002ca4:	f3ca 0a09 	ubfx	sl, sl, #0, #10
          if (count != 0U)
 8002ca8:	f1ba 0f00 	cmp.w	sl, #0
 8002cac:	d123      	bne.n	8002cf6 <HAL_PCD_IRQHandler+0x45c>
        ep->xfer_count += count;
 8002cae:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8002cb2:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8002cb6:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 8002cba:	4452      	add	r2, sl
 8002cbc:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
        ep->xfer_buff += count;
 8002cc0:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 8002cc4:	4452      	add	r2, sl
 8002cc6:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002cca:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8002cce:	b143      	cbz	r3, 8002ce2 <HAL_PCD_IRQHandler+0x448>
 8002cd0:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8002cd4:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8002cd8:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8002cdc:	459a      	cmp	sl, r3
 8002cde:	f080 810b 	bcs.w	8002ef8 <HAL_PCD_IRQHandler+0x65e>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002ce2:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8002ce6:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8002cea:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 8002cee:	4620      	mov	r0, r4
 8002cf0:	f003 fdfe 	bl	80068f0 <HAL_PCD_DataOutStageCallback>
 8002cf4:	e75d      	b.n	8002bb2 <HAL_PCD_IRQHandler+0x318>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002cf6:	eb05 0185 	add.w	r1, r5, r5, lsl #2
 8002cfa:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8002cfe:	4653      	mov	r3, sl
 8002d00:	f8b1 216e 	ldrh.w	r2, [r1, #366]	; 0x16e
 8002d04:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8002d08:	f002 fea9 	bl	8005a5e <USB_ReadPMA>
 8002d0c:	e7cf      	b.n	8002cae <HAL_PCD_IRQHandler+0x414>
          if (ep->type == EP_TYPE_BULK)
 8002d0e:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8002d12:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8002d16:	f893 316b 	ldrb.w	r3, [r3, #363]	; 0x16b
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d037      	beq.n	8002d8e <HAL_PCD_IRQHandler+0x4f4>
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002d1e:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8002d22:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8002d26:	f892 0168 	ldrb.w	r0, [r2, #360]	; 0x168
 8002d2a:	6821      	ldr	r1, [r4, #0]
 8002d2c:	f831 3020 	ldrh.w	r3, [r1, r0, lsl #2]
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d3e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002d42:	f821 3020 	strh.w	r3, [r1, r0, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002d46:	6820      	ldr	r0, [r4, #0]
 8002d48:	f892 2168 	ldrb.w	r2, [r2, #360]	; 0x168
 8002d4c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002d50:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8002d54:	f000 80b4 	beq.w	8002ec0 <HAL_PCD_IRQHandler+0x626>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002d58:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	3302      	adds	r3, #2
 8002d60:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002d64:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002d68:	f8b3 a400 	ldrh.w	sl, [r3, #1024]	; 0x400
 8002d6c:	f3ca 0a09 	ubfx	sl, sl, #0, #10
              if (count != 0U)
 8002d70:	f1ba 0f00 	cmp.w	sl, #0
 8002d74:	d09b      	beq.n	8002cae <HAL_PCD_IRQHandler+0x414>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002d76:	eb05 0185 	add.w	r1, r5, r5, lsl #2
 8002d7a:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8002d7e:	4653      	mov	r3, sl
 8002d80:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 8002d84:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8002d88:	f002 fe69 	bl	8005a5e <USB_ReadPMA>
 8002d8c:	e78f      	b.n	8002cae <HAL_PCD_IRQHandler+0x414>
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002d8e:	f419 4f80 	tst.w	r9, #16384	; 0x4000
 8002d92:	d04a      	beq.n	8002e2a <HAL_PCD_IRQHandler+0x590>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002d94:	6822      	ldr	r2, [r4, #0]
 8002d96:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	eb05 0085 	add.w	r0, r5, r5, lsl #2
 8002da0:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8002da4:	f890 1168 	ldrb.w	r1, [r0, #360]	; 0x168
 8002da8:	3302      	adds	r3, #2
 8002daa:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8002dae:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8002db2:	f8b3 a400 	ldrh.w	sl, [r3, #1024]	; 0x400
 8002db6:	f3ca 0a09 	ubfx	sl, sl, #0, #10
    if (ep->xfer_len >= count)
 8002dba:	f8d0 3180 	ldr.w	r3, [r0, #384]	; 0x180
 8002dbe:	4553      	cmp	r3, sl
 8002dc0:	f0c0 8365 	bcc.w	800348e <HAL_PCD_IRQHandler+0xbf4>
      ep->xfer_len -= count;
 8002dc4:	eba3 030a 	sub.w	r3, r3, sl
 8002dc8:	eb05 0085 	add.w	r0, r5, r5, lsl #2
 8002dcc:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8002dd0:	f8c0 3180 	str.w	r3, [r0, #384]	; 0x180
    if (ep->xfer_len == 0U)
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	f000 8360 	beq.w	800349a <HAL_PCD_IRQHandler+0xc00>
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002dda:	f019 0f40 	tst.w	r9, #64	; 0x40
 8002dde:	d013      	beq.n	8002e08 <HAL_PCD_IRQHandler+0x56e>
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002de0:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8002de4:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8002de8:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 8002dec:	6822      	ldr	r2, [r4, #0]
 8002dee:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002df8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dfc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e00:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002e04:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
    if (count != 0U)
 8002e08:	f1ba 0f00 	cmp.w	sl, #0
 8002e0c:	f43f af4f 	beq.w	8002cae <HAL_PCD_IRQHandler+0x414>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002e10:	eb05 0185 	add.w	r1, r5, r5, lsl #2
 8002e14:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8002e18:	4653      	mov	r3, sl
 8002e1a:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 8002e1e:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8002e22:	6820      	ldr	r0, [r4, #0]
 8002e24:	f002 fe1b 	bl	8005a5e <USB_ReadPMA>
 8002e28:	e741      	b.n	8002cae <HAL_PCD_IRQHandler+0x414>
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002e2a:	6822      	ldr	r2, [r4, #0]
 8002e2c:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	eb05 0085 	add.w	r0, r5, r5, lsl #2
 8002e36:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8002e3a:	f890 1168 	ldrb.w	r1, [r0, #360]	; 0x168
 8002e3e:	3306      	adds	r3, #6
 8002e40:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8002e44:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8002e48:	f8b3 a400 	ldrh.w	sl, [r3, #1024]	; 0x400
 8002e4c:	f3ca 0a09 	ubfx	sl, sl, #0, #10
    if (ep->xfer_len >= count)
 8002e50:	f8d0 3180 	ldr.w	r3, [r0, #384]	; 0x180
 8002e54:	4553      	cmp	r3, sl
 8002e56:	f0c0 832d 	bcc.w	80034b4 <HAL_PCD_IRQHandler+0xc1a>
      ep->xfer_len -= count;
 8002e5a:	eba3 030a 	sub.w	r3, r3, sl
 8002e5e:	eb05 0085 	add.w	r0, r5, r5, lsl #2
 8002e62:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8002e66:	f8c0 3180 	str.w	r3, [r0, #384]	; 0x180
    if (ep->xfer_len == 0U)
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	f000 8328 	beq.w	80034c0 <HAL_PCD_IRQHandler+0xc26>
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002e70:	f019 0f40 	tst.w	r9, #64	; 0x40
 8002e74:	d113      	bne.n	8002e9e <HAL_PCD_IRQHandler+0x604>
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002e76:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8002e7a:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8002e7e:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 8002e82:	6822      	ldr	r2, [r4, #0]
 8002e84:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8002e88:	b29b      	uxth	r3, r3
 8002e8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e96:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002e9a:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
    if (count != 0U)
 8002e9e:	f1ba 0f00 	cmp.w	sl, #0
 8002ea2:	f43f af04 	beq.w	8002cae <HAL_PCD_IRQHandler+0x414>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002ea6:	eb05 0185 	add.w	r1, r5, r5, lsl #2
 8002eaa:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8002eae:	4653      	mov	r3, sl
 8002eb0:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 8002eb4:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8002eb8:	6820      	ldr	r0, [r4, #0]
 8002eba:	f002 fdd0 	bl	8005a5e <USB_ReadPMA>
 8002ebe:	e6f6      	b.n	8002cae <HAL_PCD_IRQHandler+0x414>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002ec0:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002ec4:	b29b      	uxth	r3, r3
 8002ec6:	3306      	adds	r3, #6
 8002ec8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002ecc:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002ed0:	f8b3 a400 	ldrh.w	sl, [r3, #1024]	; 0x400
 8002ed4:	f3ca 0a09 	ubfx	sl, sl, #0, #10
              if (count != 0U)
 8002ed8:	f1ba 0f00 	cmp.w	sl, #0
 8002edc:	f43f aee7 	beq.w	8002cae <HAL_PCD_IRQHandler+0x414>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002ee0:	eb05 0185 	add.w	r1, r5, r5, lsl #2
 8002ee4:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8002ee8:	4653      	mov	r3, sl
 8002eea:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 8002eee:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8002ef2:	f002 fdb4 	bl	8005a5e <USB_ReadPMA>
 8002ef6:	e6da      	b.n	8002cae <HAL_PCD_IRQHandler+0x414>
        ep = &hpcd->OUT_ep[epindex];
 8002ef8:	eb05 0185 	add.w	r1, r5, r5, lsl #2
 8002efc:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002f00:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 8002f04:	6820      	ldr	r0, [r4, #0]
 8002f06:	f002 f984 	bl	8005212 <USB_EPStartXfer>
 8002f0a:	e652      	b.n	8002bb2 <HAL_PCD_IRQHandler+0x318>
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002f0c:	f019 0f40 	tst.w	r9, #64	; 0x40
 8002f10:	f000 80ea 	beq.w	80030e8 <HAL_PCD_IRQHandler+0x84e>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002f14:	6822      	ldr	r2, [r4, #0]
 8002f16:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	f89a 0028 	ldrb.w	r0, [sl, #40]	; 0x28
    if (ep->xfer_len > TxByteNbre)
 8002f20:	eb05 0185 	add.w	r1, r5, r5, lsl #2
 8002f24:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8002f28:	6c09      	ldr	r1, [r1, #64]	; 0x40
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002f2a:	3302      	adds	r3, #2
 8002f2c:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8002f30:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8002f34:	f8b3 c400 	ldrh.w	ip, [r3, #1024]	; 0x400
    if (ep->xfer_len > TxByteNbre)
 8002f38:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8002f3c:	4561      	cmp	r1, ip
 8002f3e:	f240 81fd 	bls.w	800333c <HAL_PCD_IRQHandler+0xaa2>
      ep->xfer_len -= TxByteNbre;
 8002f42:	eba1 010c 	sub.w	r1, r1, ip
 8002f46:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8002f4a:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8002f4e:	6419      	str	r1, [r3, #64]	; 0x40
    if (ep->xfer_len == 0U)
 8002f50:	2900      	cmp	r1, #0
 8002f52:	f000 81f8 	beq.w	8003346 <HAL_PCD_IRQHandler+0xaac>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002f56:	f419 4f80 	tst.w	r9, #16384	; 0x4000
 8002f5a:	d00a      	beq.n	8002f72 <HAL_PCD_IRQHandler+0x6d8>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002f5c:	f832 3020 	ldrh.w	r3, [r2, r0, lsl #2]
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f6a:	ea48 0303 	orr.w	r3, r8, r3
 8002f6e:	f822 3020 	strh.w	r3, [r2, r0, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8002f72:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8002f76:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8002f7a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d029      	beq.n	8002fd6 <HAL_PCD_IRQHandler+0x73c>
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002f82:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 8002f86:	6822      	ldr	r2, [r4, #0]
 8002f88:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f96:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8002f9a:	433b      	orrs	r3, r7
 8002f9c:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 8002fa0:	e57f      	b.n	8002aa2 <HAL_PCD_IRQHandler+0x208>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	f040 8204 	bne.w	80033b0 <HAL_PCD_IRQHandler+0xb16>
 8002fa8:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8002fac:	b299      	uxth	r1, r3
 8002fae:	f202 4304 	addw	r3, r2, #1028	; 0x404
 8002fb2:	440b      	add	r3, r1
 8002fb4:	0100      	lsls	r0, r0, #4
 8002fb6:	521e      	strh	r6, [r3, r0]
 8002fb8:	e1de      	b.n	8003378 <HAL_PCD_IRQHandler+0xade>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002fba:	2a01      	cmp	r2, #1
 8002fbc:	f040 81f8 	bne.w	80033b0 <HAL_PCD_IRQHandler+0xb16>
 8002fc0:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8002fc4:	b292      	uxth	r2, r2
 8002fc6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002fca:	4413      	add	r3, r2
 8002fcc:	f89a 2028 	ldrb.w	r2, [sl, #40]	; 0x28
 8002fd0:	0112      	lsls	r2, r2, #4
 8002fd2:	529e      	strh	r6, [r3, r2]
 8002fd4:	e1ec      	b.n	80033b0 <HAL_PCD_IRQHandler+0xb16>
        ep->xfer_buff += TxByteNbre;
 8002fd6:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8002fda:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8002fde:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002fe0:	4462      	add	r2, ip
 8002fe2:	63da      	str	r2, [r3, #60]	; 0x3c
        ep->xfer_count += TxByteNbre;
 8002fe4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002fe6:	4462      	add	r2, ip
 8002fe8:	645a      	str	r2, [r3, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 8002fea:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8002fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fee:	4299      	cmp	r1, r3
 8002ff0:	d317      	bcc.n	8003022 <HAL_PCD_IRQHandler+0x788>
          ep->xfer_len_db -= len;
 8002ff2:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8002ff6:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8002ffa:	1ac9      	subs	r1, r1, r3
 8002ffc:	6491      	str	r1, [r2, #72]	; 0x48
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002ffe:	f89a 2029 	ldrb.w	r2, [sl, #41]	; 0x29
 8003002:	2a00      	cmp	r2, #0
 8003004:	d039      	beq.n	800307a <HAL_PCD_IRQHandler+0x7e0>
 8003006:	2a01      	cmp	r2, #1
 8003008:	d061      	beq.n	80030ce <HAL_PCD_IRQHandler+0x834>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800300a:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 800300e:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8003012:	4611      	mov	r1, r2
 8003014:	b29b      	uxth	r3, r3
 8003016:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 8003018:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 800301a:	6820      	ldr	r0, [r4, #0]
 800301c:	f002 f8e2 	bl	80051e4 <USB_WritePMA>
 8003020:	e7af      	b.n	8002f82 <HAL_PCD_IRQHandler+0x6e8>
        else if (ep->xfer_len_db == 0U)
 8003022:	b939      	cbnz	r1, 8003034 <HAL_PCD_IRQHandler+0x79a>
          ep->xfer_fill_db = 0U;
 8003024:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8003028:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 800302c:	f883 604c 	strb.w	r6, [r3, #76]	; 0x4c
          len = TxByteNbre;
 8003030:	4663      	mov	r3, ip
 8003032:	e7e4      	b.n	8002ffe <HAL_PCD_IRQHandler+0x764>
          ep->xfer_fill_db = 0U;
 8003034:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8003038:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 800303c:	f883 604c 	strb.w	r6, [r3, #76]	; 0x4c
          ep->xfer_len_db = 0U;
 8003040:	649e      	str	r6, [r3, #72]	; 0x48
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003042:	f89a 2029 	ldrb.w	r2, [sl, #41]	; 0x29
 8003046:	b9b2      	cbnz	r2, 8003076 <HAL_PCD_IRQHandler+0x7dc>
 8003048:	6823      	ldr	r3, [r4, #0]
 800304a:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 800304e:	b290      	uxth	r0, r2
 8003050:	f89a c028 	ldrb.w	ip, [sl, #40]	; 0x28
 8003054:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8003058:	4402      	add	r2, r0
 800305a:	eb02 120c 	add.w	r2, r2, ip, lsl #4
          len = ep->xfer_len_db;
 800305e:	460b      	mov	r3, r1
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003060:	2b3e      	cmp	r3, #62	; 0x3e
 8003062:	d827      	bhi.n	80030b4 <HAL_PCD_IRQHandler+0x81a>
 8003064:	0859      	lsrs	r1, r3, #1
 8003066:	f013 0f01 	tst.w	r3, #1
 800306a:	bf18      	it	ne
 800306c:	3101      	addne	r1, #1
 800306e:	0289      	lsls	r1, r1, #10
 8003070:	b289      	uxth	r1, r1
 8003072:	8011      	strh	r1, [r2, #0]
 8003074:	e7c9      	b.n	800300a <HAL_PCD_IRQHandler+0x770>
          len = ep->xfer_len_db;
 8003076:	460b      	mov	r3, r1
 8003078:	e7c5      	b.n	8003006 <HAL_PCD_IRQHandler+0x76c>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800307a:	6821      	ldr	r1, [r4, #0]
 800307c:	f8b1 c050 	ldrh.w	ip, [r1, #80]	; 0x50
 8003080:	fa1f fc8c 	uxth.w	ip, ip
 8003084:	f89a 2028 	ldrb.w	r2, [sl, #40]	; 0x28
 8003088:	0110      	lsls	r0, r2, #4
 800308a:	f201 4104 	addw	r1, r1, #1028	; 0x404
 800308e:	4461      	add	r1, ip
 8003090:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 8003094:	2b00      	cmp	r3, #0
 8003096:	d1e3      	bne.n	8003060 <HAL_PCD_IRQHandler+0x7c6>
 8003098:	5a42      	ldrh	r2, [r0, r1]
 800309a:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800309e:	0412      	lsls	r2, r2, #16
 80030a0:	0c12      	lsrs	r2, r2, #16
 80030a2:	5242      	strh	r2, [r0, r1]
 80030a4:	5a42      	ldrh	r2, [r0, r1]
 80030a6:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80030aa:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80030ae:	b292      	uxth	r2, r2
 80030b0:	5242      	strh	r2, [r0, r1]
 80030b2:	e7aa      	b.n	800300a <HAL_PCD_IRQHandler+0x770>
 80030b4:	0959      	lsrs	r1, r3, #5
 80030b6:	f013 0f1f 	tst.w	r3, #31
 80030ba:	bf08      	it	eq
 80030bc:	f101 31ff 	addeq.w	r1, r1, #4294967295
 80030c0:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 80030c4:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80030c8:	b289      	uxth	r1, r1
 80030ca:	8011      	strh	r1, [r2, #0]
 80030cc:	e79d      	b.n	800300a <HAL_PCD_IRQHandler+0x770>
 80030ce:	6822      	ldr	r2, [r4, #0]
 80030d0:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 80030d4:	b280      	uxth	r0, r0
 80030d6:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 80030da:	0109      	lsls	r1, r1, #4
 80030dc:	f202 4204 	addw	r2, r2, #1028	; 0x404
 80030e0:	4402      	add	r2, r0
 80030e2:	b298      	uxth	r0, r3
 80030e4:	5288      	strh	r0, [r1, r2]
 80030e6:	e790      	b.n	800300a <HAL_PCD_IRQHandler+0x770>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80030e8:	6822      	ldr	r2, [r4, #0]
 80030ea:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	f89a c028 	ldrb.w	ip, [sl, #40]	; 0x28
    if (ep->xfer_len >= TxByteNbre)
 80030f4:	eb05 0185 	add.w	r1, r5, r5, lsl #2
 80030f8:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 80030fc:	6c08      	ldr	r0, [r1, #64]	; 0x40
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80030fe:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 8003102:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8003106:	f8b3 140c 	ldrh.w	r1, [r3, #1036]	; 0x40c
    if (ep->xfer_len >= TxByteNbre)
 800310a:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800310e:	4288      	cmp	r0, r1
 8003110:	f0c0 8166 	bcc.w	80033e0 <HAL_PCD_IRQHandler+0xb46>
      ep->xfer_len -= TxByteNbre;
 8003114:	1a40      	subs	r0, r0, r1
 8003116:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 800311a:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 800311e:	6418      	str	r0, [r3, #64]	; 0x40
    if (ep->xfer_len == 0U)
 8003120:	2800      	cmp	r0, #0
 8003122:	f000 8162 	beq.w	80033ea <HAL_PCD_IRQHandler+0xb50>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003126:	f419 4f80 	tst.w	r9, #16384	; 0x4000
 800312a:	d10a      	bne.n	8003142 <HAL_PCD_IRQHandler+0x8a8>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800312c:	f832 302c 	ldrh.w	r3, [r2, ip, lsl #2]
 8003130:	b29b      	uxth	r3, r3
 8003132:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003136:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800313a:	ea48 0303 	orr.w	r3, r8, r3
 800313e:	f822 302c 	strh.w	r3, [r2, ip, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8003142:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8003146:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 800314a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800314e:	2b01      	cmp	r3, #1
 8003150:	f47f af17 	bne.w	8002f82 <HAL_PCD_IRQHandler+0x6e8>
        ep->xfer_buff += TxByteNbre;
 8003154:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8003158:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 800315c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800315e:	440a      	add	r2, r1
 8003160:	63da      	str	r2, [r3, #60]	; 0x3c
        ep->xfer_count += TxByteNbre;
 8003162:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003164:	440a      	add	r2, r1
 8003166:	645a      	str	r2, [r3, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 8003168:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800316a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800316c:	4298      	cmp	r0, r3
 800316e:	d337      	bcc.n	80031e0 <HAL_PCD_IRQHandler+0x946>
          ep->xfer_len_db -= len;
 8003170:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8003174:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8003178:	1ac0      	subs	r0, r0, r3
 800317a:	6490      	str	r0, [r2, #72]	; 0x48
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800317c:	6822      	ldr	r2, [r4, #0]
 800317e:	4611      	mov	r1, r2
 8003180:	f89a c029 	ldrb.w	ip, [sl, #41]	; 0x29
 8003184:	f1bc 0f00 	cmp.w	ip, #0
 8003188:	d05a      	beq.n	8003240 <HAL_PCD_IRQHandler+0x9a6>
 800318a:	f1bc 0f01 	cmp.w	ip, #1
 800318e:	d07f      	beq.n	8003290 <HAL_PCD_IRQHandler+0x9f6>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003190:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8003194:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8003198:	4611      	mov	r1, r2
 800319a:	b29b      	uxth	r3, r3
 800319c:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800319e:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 80031a0:	6820      	ldr	r0, [r4, #0]
 80031a2:	f002 f81f 	bl	80051e4 <USB_WritePMA>
 80031a6:	e6ec      	b.n	8002f82 <HAL_PCD_IRQHandler+0x6e8>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	f040 8158 	bne.w	800345e <HAL_PCD_IRQHandler+0xbc4>
 80031ae:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 80031b2:	b299      	uxth	r1, r3
 80031b4:	f202 4304 	addw	r3, r2, #1028	; 0x404
 80031b8:	440b      	add	r3, r1
 80031ba:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 80031be:	f823 600c 	strh.w	r6, [r3, ip]
 80031c2:	e130      	b.n	8003426 <HAL_PCD_IRQHandler+0xb8c>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80031c4:	2a01      	cmp	r2, #1
 80031c6:	f040 814a 	bne.w	800345e <HAL_PCD_IRQHandler+0xbc4>
 80031ca:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 80031ce:	b289      	uxth	r1, r1
 80031d0:	f89a 2028 	ldrb.w	r2, [sl, #40]	; 0x28
 80031d4:	0112      	lsls	r2, r2, #4
 80031d6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80031da:	440b      	add	r3, r1
 80031dc:	52d6      	strh	r6, [r2, r3]
 80031de:	e13e      	b.n	800345e <HAL_PCD_IRQHandler+0xbc4>
        else if (ep->xfer_len_db == 0U)
 80031e0:	b938      	cbnz	r0, 80031f2 <HAL_PCD_IRQHandler+0x958>
          ep->xfer_fill_db = 0U;
 80031e2:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 80031e6:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 80031ea:	f883 604c 	strb.w	r6, [r3, #76]	; 0x4c
          len = TxByteNbre;
 80031ee:	460b      	mov	r3, r1
 80031f0:	e7c4      	b.n	800317c <HAL_PCD_IRQHandler+0x8e2>
          ep->xfer_len_db = 0U;
 80031f2:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 80031f6:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 80031fa:	649e      	str	r6, [r3, #72]	; 0x48
          ep->xfer_fill_db = 0;
 80031fc:	f883 604c 	strb.w	r6, [r3, #76]	; 0x4c
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003200:	6822      	ldr	r2, [r4, #0]
 8003202:	4611      	mov	r1, r2
 8003204:	f89a c029 	ldrb.w	ip, [sl, #41]	; 0x29
 8003208:	f1bc 0f00 	cmp.w	ip, #0
 800320c:	d116      	bne.n	800323c <HAL_PCD_IRQHandler+0x9a2>
 800320e:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8003212:	fa1f fc83 	uxth.w	ip, r3
 8003216:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 800321a:	f202 430c 	addw	r3, r2, #1036	; 0x40c
 800321e:	4463      	add	r3, ip
 8003220:	eb03 1101 	add.w	r1, r3, r1, lsl #4
          len = ep->xfer_len_db;
 8003224:	4603      	mov	r3, r0
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003226:	2b3e      	cmp	r3, #62	; 0x3e
 8003228:	d825      	bhi.n	8003276 <HAL_PCD_IRQHandler+0x9dc>
 800322a:	085a      	lsrs	r2, r3, #1
 800322c:	f013 0f01 	tst.w	r3, #1
 8003230:	bf18      	it	ne
 8003232:	3201      	addne	r2, #1
 8003234:	0292      	lsls	r2, r2, #10
 8003236:	b292      	uxth	r2, r2
 8003238:	800a      	strh	r2, [r1, #0]
 800323a:	e7a9      	b.n	8003190 <HAL_PCD_IRQHandler+0x8f6>
          len = ep->xfer_len_db;
 800323c:	4603      	mov	r3, r0
 800323e:	e7a4      	b.n	800318a <HAL_PCD_IRQHandler+0x8f0>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003240:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 8003244:	b289      	uxth	r1, r1
 8003246:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 800324a:	440a      	add	r2, r1
 800324c:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 8003250:	0108      	lsls	r0, r1, #4
 8003252:	eb02 1101 	add.w	r1, r2, r1, lsl #4
 8003256:	2b00      	cmp	r3, #0
 8003258:	d1e5      	bne.n	8003226 <HAL_PCD_IRQHandler+0x98c>
 800325a:	5a11      	ldrh	r1, [r2, r0]
 800325c:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8003260:	0409      	lsls	r1, r1, #16
 8003262:	0c09      	lsrs	r1, r1, #16
 8003264:	5211      	strh	r1, [r2, r0]
 8003266:	5a11      	ldrh	r1, [r2, r0]
 8003268:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 800326c:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8003270:	b289      	uxth	r1, r1
 8003272:	5211      	strh	r1, [r2, r0]
 8003274:	e78c      	b.n	8003190 <HAL_PCD_IRQHandler+0x8f6>
 8003276:	095a      	lsrs	r2, r3, #5
 8003278:	f013 0f1f 	tst.w	r3, #31
 800327c:	bf08      	it	eq
 800327e:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8003282:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8003286:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800328a:	b292      	uxth	r2, r2
 800328c:	800a      	strh	r2, [r1, #0]
 800328e:	e77f      	b.n	8003190 <HAL_PCD_IRQHandler+0x8f6>
 8003290:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 8003294:	b280      	uxth	r0, r0
 8003296:	f89a 2028 	ldrb.w	r2, [sl, #40]	; 0x28
 800329a:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 800329e:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 80032a2:	b299      	uxth	r1, r3
 80032a4:	5211      	strh	r1, [r2, r0]
 80032a6:	e773      	b.n	8003190 <HAL_PCD_IRQHandler+0x8f6>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80032a8:	6822      	ldr	r2, [r4, #0]
 80032aa:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80032ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80032b2:	041b      	lsls	r3, r3, #16
 80032b4:	0c1b      	lsrs	r3, r3, #16
 80032b6:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 80032ba:	4620      	mov	r0, r4
 80032bc:	f003 fb35 	bl	800692a <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80032c0:	2100      	movs	r1, #0
 80032c2:	4620      	mov	r0, r4
 80032c4:	f7ff fad5 	bl	8002872 <HAL_PCD_SetAddress>
 80032c8:	f7ff baf9 	b.w	80028be <HAL_PCD_IRQHandler+0x24>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80032cc:	6822      	ldr	r2, [r4, #0]
 80032ce:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80032d2:	f023 0304 	bic.w	r3, r3, #4
 80032d6:	041b      	lsls	r3, r3, #16
 80032d8:	0c1b      	lsrs	r3, r3, #16
 80032da:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80032de:	6822      	ldr	r2, [r4, #0]
 80032e0:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80032e4:	f023 0308 	bic.w	r3, r3, #8
 80032e8:	041b      	lsls	r3, r3, #16
 80032ea:	0c1b      	lsrs	r3, r3, #16
 80032ec:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 80032f0:	4620      	mov	r0, r4
 80032f2:	f003 fb3d 	bl	8006970 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80032f6:	6822      	ldr	r2, [r4, #0]
 80032f8:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80032fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003300:	041b      	lsls	r3, r3, #16
 8003302:	0c1b      	lsrs	r3, r3, #16
 8003304:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
 8003308:	f7ff bafe 	b.w	8002908 <HAL_PCD_IRQHandler+0x6e>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800330c:	6822      	ldr	r2, [r4, #0]
 800330e:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8003312:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003316:	041b      	lsls	r3, r3, #16
 8003318:	0c1b      	lsrs	r3, r3, #16
 800331a:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 800331e:	4620      	mov	r0, r4
 8003320:	f003 fafd 	bl	800691e <HAL_PCD_SOFCallback>
 8003324:	f7ff bb4c 	b.w	80029c0 <HAL_PCD_IRQHandler+0x126>
 8003328:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800332c:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8003330:	642e      	str	r6, [r5, #64]	; 0x40
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003332:	4620      	mov	r0, r4
 8003334:	f003 fae8 	bl	8006908 <HAL_PCD_DataInStageCallback>
 8003338:	f7ff bbb3 	b.w	8002aa2 <HAL_PCD_IRQHandler+0x208>
 800333c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8003340:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 8003344:	641e      	str	r6, [r3, #64]	; 0x40
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003346:	f89a 3029 	ldrb.w	r3, [sl, #41]	; 0x29
 800334a:	2b00      	cmp	r3, #0
 800334c:	f47f ae29 	bne.w	8002fa2 <HAL_PCD_IRQHandler+0x708>
 8003350:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8003354:	b29b      	uxth	r3, r3
 8003356:	f202 4204 	addw	r2, r2, #1028	; 0x404
 800335a:	441a      	add	r2, r3
 800335c:	0100      	lsls	r0, r0, #4
 800335e:	5a13      	ldrh	r3, [r2, r0]
 8003360:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003364:	041b      	lsls	r3, r3, #16
 8003366:	0c1b      	lsrs	r3, r3, #16
 8003368:	5213      	strh	r3, [r2, r0]
 800336a:	5a13      	ldrh	r3, [r2, r0]
 800336c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003370:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003374:	b29b      	uxth	r3, r3
 8003376:	5213      	strh	r3, [r2, r0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003378:	6823      	ldr	r3, [r4, #0]
 800337a:	f89a 2029 	ldrb.w	r2, [sl, #41]	; 0x29
 800337e:	2a00      	cmp	r2, #0
 8003380:	f47f ae1b 	bne.w	8002fba <HAL_PCD_IRQHandler+0x720>
 8003384:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8003388:	b292      	uxth	r2, r2
 800338a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800338e:	4413      	add	r3, r2
 8003390:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 8003394:	0109      	lsls	r1, r1, #4
 8003396:	5a5a      	ldrh	r2, [r3, r1]
 8003398:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800339c:	0412      	lsls	r2, r2, #16
 800339e:	0c12      	lsrs	r2, r2, #16
 80033a0:	525a      	strh	r2, [r3, r1]
 80033a2:	5a5a      	ldrh	r2, [r3, r1]
 80033a4:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80033a8:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80033ac:	b292      	uxth	r2, r2
 80033ae:	525a      	strh	r2, [r3, r1]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80033b0:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 80033b4:	4620      	mov	r0, r4
 80033b6:	f003 faa7 	bl	8006908 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80033ba:	f419 4f80 	tst.w	r9, #16384	; 0x4000
 80033be:	f43f ade0 	beq.w	8002f82 <HAL_PCD_IRQHandler+0x6e8>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80033c2:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 80033c6:	6822      	ldr	r2, [r4, #0]
 80033c8:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80033cc:	b29b      	uxth	r3, r3
 80033ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033d6:	ea48 0303 	orr.w	r3, r8, r3
 80033da:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 80033de:	e5d0      	b.n	8002f82 <HAL_PCD_IRQHandler+0x6e8>
 80033e0:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80033e4:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 80033e8:	641e      	str	r6, [r3, #64]	; 0x40
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80033ea:	f89a 3029 	ldrb.w	r3, [sl, #41]	; 0x29
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	f47f aeda 	bne.w	80031a8 <HAL_PCD_IRQHandler+0x90e>
 80033f4:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	f202 4204 	addw	r2, r2, #1028	; 0x404
 80033fe:	441a      	add	r2, r3
 8003400:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8003404:	f832 300c 	ldrh.w	r3, [r2, ip]
 8003408:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800340c:	041b      	lsls	r3, r3, #16
 800340e:	0c1b      	lsrs	r3, r3, #16
 8003410:	f822 300c 	strh.w	r3, [r2, ip]
 8003414:	f832 300c 	ldrh.w	r3, [r2, ip]
 8003418:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800341c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003420:	b29b      	uxth	r3, r3
 8003422:	f822 300c 	strh.w	r3, [r2, ip]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003426:	6823      	ldr	r3, [r4, #0]
 8003428:	f89a 2029 	ldrb.w	r2, [sl, #41]	; 0x29
 800342c:	2a00      	cmp	r2, #0
 800342e:	f47f aec9 	bne.w	80031c4 <HAL_PCD_IRQHandler+0x92a>
 8003432:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8003436:	b292      	uxth	r2, r2
 8003438:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 800343c:	0109      	lsls	r1, r1, #4
 800343e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003442:	441a      	add	r2, r3
 8003444:	5a8b      	ldrh	r3, [r1, r2]
 8003446:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800344a:	041b      	lsls	r3, r3, #16
 800344c:	0c1b      	lsrs	r3, r3, #16
 800344e:	528b      	strh	r3, [r1, r2]
 8003450:	5a8b      	ldrh	r3, [r1, r2]
 8003452:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003456:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800345a:	b29b      	uxth	r3, r3
 800345c:	528b      	strh	r3, [r1, r2]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800345e:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 8003462:	4620      	mov	r0, r4
 8003464:	f003 fa50 	bl	8006908 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003468:	f419 4f80 	tst.w	r9, #16384	; 0x4000
 800346c:	f47f ad89 	bne.w	8002f82 <HAL_PCD_IRQHandler+0x6e8>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003470:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 8003474:	6822      	ldr	r2, [r4, #0]
 8003476:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800347a:	b29b      	uxth	r3, r3
 800347c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003480:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003484:	ea48 0303 	orr.w	r3, r8, r3
 8003488:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 800348c:	e579      	b.n	8002f82 <HAL_PCD_IRQHandler+0x6e8>
 800348e:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8003492:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8003496:	f8c3 6180 	str.w	r6, [r3, #384]	; 0x180
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800349a:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800349e:	b29b      	uxth	r3, r3
 80034a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80034a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034a8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80034ac:	433b      	orrs	r3, r7
 80034ae:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 80034b2:	e492      	b.n	8002dda <HAL_PCD_IRQHandler+0x540>
 80034b4:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 80034b8:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 80034bc:	f8c3 6180 	str.w	r6, [r3, #384]	; 0x180
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80034c0:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80034ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034ce:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80034d2:	433b      	orrs	r3, r7
 80034d4:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 80034d8:	e4ca      	b.n	8002e70 <HAL_PCD_IRQHandler+0x5d6>

080034da <HAL_PCD_EP_Open>:
{
 80034da:	b510      	push	{r4, lr}
 80034dc:	4604      	mov	r4, r0
 80034de:	468c      	mov	ip, r1
  if ((ep_addr & 0x80U) == 0x80U)
 80034e0:	f011 0f80 	tst.w	r1, #128	; 0x80
 80034e4:	d12a      	bne.n	800353c <HAL_PCD_EP_Open+0x62>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034e6:	f001 0e07 	and.w	lr, r1, #7
 80034ea:	eb0e 018e 	add.w	r1, lr, lr, lsl #2
 80034ee:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 80034f2:	f501 71b4 	add.w	r1, r1, #360	; 0x168
    ep->is_in = 0U;
 80034f6:	eb0e 0e8e 	add.w	lr, lr, lr, lsl #2
 80034fa:	eb00 0ece 	add.w	lr, r0, lr, lsl #3
 80034fe:	2000      	movs	r0, #0
 8003500:	f88e 0169 	strb.w	r0, [lr, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 8003504:	f00c 0c07 	and.w	ip, ip, #7
 8003508:	f881 c000 	strb.w	ip, [r1]
  ep->maxpacket = ep_mps;
 800350c:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;
 800350e:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 8003510:	784a      	ldrb	r2, [r1, #1]
 8003512:	b10a      	cbz	r2, 8003518 <HAL_PCD_EP_Open+0x3e>
    ep->tx_fifo_num = ep->num;
 8003514:	f8a1 c00e 	strh.w	ip, [r1, #14]
  if (ep_type == EP_TYPE_BULK)
 8003518:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 800351a:	bf04      	itt	eq
 800351c:	2300      	moveq	r3, #0
 800351e:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 8003520:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8003524:	2b01      	cmp	r3, #1
 8003526:	d016      	beq.n	8003556 <HAL_PCD_EP_Open+0x7c>
 8003528:	2301      	movs	r3, #1
 800352a:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800352e:	6820      	ldr	r0, [r4, #0]
 8003530:	f001 fb42 	bl	8004bb8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003534:	2000      	movs	r0, #0
 8003536:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 800353a:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800353c:	f001 0e07 	and.w	lr, r1, #7
 8003540:	f10e 0001 	add.w	r0, lr, #1
 8003544:	eb00 0e80 	add.w	lr, r0, r0, lsl #2
 8003548:	eb04 01ce 	add.w	r1, r4, lr, lsl #3
    ep->is_in = 1U;
 800354c:	f04f 0e01 	mov.w	lr, #1
 8003550:	f881 e001 	strb.w	lr, [r1, #1]
 8003554:	e7d6      	b.n	8003504 <HAL_PCD_EP_Open+0x2a>
  __HAL_LOCK(hpcd);
 8003556:	2002      	movs	r0, #2
 8003558:	e7ef      	b.n	800353a <HAL_PCD_EP_Open+0x60>

0800355a <HAL_PCD_EP_Close>:
{
 800355a:	b510      	push	{r4, lr}
 800355c:	4604      	mov	r4, r0
 800355e:	460a      	mov	r2, r1
  if ((ep_addr & 0x80U) == 0x80U)
 8003560:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003564:	d11c      	bne.n	80035a0 <HAL_PCD_EP_Close+0x46>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003566:	f001 0007 	and.w	r0, r1, #7
 800356a:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 800356e:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8003572:	f503 71b4 	add.w	r1, r3, #360	; 0x168
    ep->is_in = 0U;
 8003576:	4618      	mov	r0, r3
 8003578:	2300      	movs	r3, #0
 800357a:	f880 3169 	strb.w	r3, [r0, #361]	; 0x169
  ep->num   = ep_addr & EP_ADDR_MSK;
 800357e:	f002 0207 	and.w	r2, r2, #7
 8003582:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8003584:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8003588:	2b01      	cmp	r3, #1
 800358a:	d013      	beq.n	80035b4 <HAL_PCD_EP_Close+0x5a>
 800358c:	2301      	movs	r3, #1
 800358e:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003592:	6820      	ldr	r0, [r4, #0]
 8003594:	f001 fcb7 	bl	8004f06 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003598:	2000      	movs	r0, #0
 800359a:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 800359e:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035a0:	f001 0307 	and.w	r3, r1, #7
 80035a4:	1c58      	adds	r0, r3, #1
 80035a6:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 80035aa:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
    ep->is_in = 1U;
 80035ae:	2301      	movs	r3, #1
 80035b0:	704b      	strb	r3, [r1, #1]
 80035b2:	e7e4      	b.n	800357e <HAL_PCD_EP_Close+0x24>
  __HAL_LOCK(hpcd);
 80035b4:	2002      	movs	r0, #2
 80035b6:	e7f2      	b.n	800359e <HAL_PCD_EP_Close+0x44>

080035b8 <HAL_PCD_EP_Receive>:
{
 80035b8:	b510      	push	{r4, lr}
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80035ba:	f001 0407 	and.w	r4, r1, #7
 80035be:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 80035c2:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 80035c6:	f501 71b4 	add.w	r1, r1, #360	; 0x168
  ep->xfer_buff = pBuf;
 80035ca:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
 80035ce:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
 80035d2:	f8cc 217c 	str.w	r2, [ip, #380]	; 0x17c
  ep->xfer_len = len;
 80035d6:	f8cc 3180 	str.w	r3, [ip, #384]	; 0x180
  ep->xfer_count = 0U;
 80035da:	2300      	movs	r3, #0
 80035dc:	f8cc 3184 	str.w	r3, [ip, #388]	; 0x184
  ep->is_in = 0U;
 80035e0:	f88c 3169 	strb.w	r3, [ip, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 80035e4:	f88c 4168 	strb.w	r4, [ip, #360]	; 0x168
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80035e8:	6800      	ldr	r0, [r0, #0]
 80035ea:	f001 fe12 	bl	8005212 <USB_EPStartXfer>
}
 80035ee:	2000      	movs	r0, #0
 80035f0:	bd10      	pop	{r4, pc}

080035f2 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80035f2:	f001 0107 	and.w	r1, r1, #7
 80035f6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80035fa:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
}
 80035fe:	f8d1 0184 	ldr.w	r0, [r1, #388]	; 0x184
 8003602:	4770      	bx	lr

08003604 <HAL_PCD_EP_Transmit>:
{
 8003604:	b510      	push	{r4, lr}
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003606:	f001 0407 	and.w	r4, r1, #7
 800360a:	1c61      	adds	r1, r4, #1
 800360c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8003610:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
  ep->xfer_buff = pBuf;
 8003614:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
 8003618:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
 800361c:	f8cc 203c 	str.w	r2, [ip, #60]	; 0x3c
  ep->xfer_len = len;
 8003620:	f8cc 3040 	str.w	r3, [ip, #64]	; 0x40
  ep->xfer_fill_db = 1U;
 8003624:	2201      	movs	r2, #1
 8003626:	f88c 204c 	strb.w	r2, [ip, #76]	; 0x4c
  ep->xfer_len_db = len;
 800362a:	f8cc 3048 	str.w	r3, [ip, #72]	; 0x48
  ep->xfer_count = 0U;
 800362e:	2300      	movs	r3, #0
 8003630:	f8cc 3044 	str.w	r3, [ip, #68]	; 0x44
  ep->is_in = 1U;
 8003634:	f88c 2029 	strb.w	r2, [ip, #41]	; 0x29
  ep->num = ep_addr & EP_ADDR_MSK;
 8003638:	f88c 4028 	strb.w	r4, [ip, #40]	; 0x28
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800363c:	6800      	ldr	r0, [r0, #0]
 800363e:	f001 fde8 	bl	8005212 <USB_EPStartXfer>
}
 8003642:	2000      	movs	r0, #0
 8003644:	bd10      	pop	{r4, pc}

08003646 <HAL_PCD_EP_SetStall>:
{
 8003646:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003648:	f001 0507 	and.w	r5, r1, #7
 800364c:	6842      	ldr	r2, [r0, #4]
 800364e:	4295      	cmp	r5, r2
 8003650:	d831      	bhi.n	80036b6 <HAL_PCD_EP_SetStall+0x70>
 8003652:	4604      	mov	r4, r0
 8003654:	460b      	mov	r3, r1
  if ((0x80U & ep_addr) == 0x80U)
 8003656:	f011 0f80 	tst.w	r1, #128	; 0x80
 800365a:	d11e      	bne.n	800369a <HAL_PCD_EP_SetStall+0x54>
    ep = &hpcd->OUT_ep[ep_addr];
 800365c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8003660:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8003664:	f501 71b4 	add.w	r1, r1, #360	; 0x168
    ep->is_in = 0U;
 8003668:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800366c:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8003670:	2200      	movs	r2, #0
 8003672:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169
  ep->is_stall = 1U;
 8003676:	2301      	movs	r3, #1
 8003678:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800367a:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 800367c:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8003680:	2b01      	cmp	r3, #1
 8003682:	d01a      	beq.n	80036ba <HAL_PCD_EP_SetStall+0x74>
 8003684:	2301      	movs	r3, #1
 8003686:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800368a:	6820      	ldr	r0, [r4, #0]
 800368c:	f001 fd24 	bl	80050d8 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003690:	b15d      	cbz	r5, 80036aa <HAL_PCD_EP_SetStall+0x64>
  __HAL_UNLOCK(hpcd);
 8003692:	2000      	movs	r0, #0
 8003694:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8003698:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800369a:	1c69      	adds	r1, r5, #1
 800369c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80036a0:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 80036a4:	2201      	movs	r2, #1
 80036a6:	704a      	strb	r2, [r1, #1]
 80036a8:	e7e5      	b.n	8003676 <HAL_PCD_EP_SetStall+0x30>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80036aa:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 80036ae:	6820      	ldr	r0, [r4, #0]
 80036b0:	f001 fd96 	bl	80051e0 <USB_EP0_OutStart>
 80036b4:	e7ed      	b.n	8003692 <HAL_PCD_EP_SetStall+0x4c>
    return HAL_ERROR;
 80036b6:	2001      	movs	r0, #1
 80036b8:	e7ee      	b.n	8003698 <HAL_PCD_EP_SetStall+0x52>
  __HAL_LOCK(hpcd);
 80036ba:	2002      	movs	r0, #2
 80036bc:	e7ec      	b.n	8003698 <HAL_PCD_EP_SetStall+0x52>

080036be <HAL_PCD_EP_ClrStall>:
{
 80036be:	460b      	mov	r3, r1
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80036c0:	f001 010f 	and.w	r1, r1, #15
 80036c4:	6842      	ldr	r2, [r0, #4]
 80036c6:	4291      	cmp	r1, r2
 80036c8:	d830      	bhi.n	800372c <HAL_PCD_EP_ClrStall+0x6e>
{
 80036ca:	b510      	push	{r4, lr}
 80036cc:	4604      	mov	r4, r0
  if ((0x80U & ep_addr) == 0x80U)
 80036ce:	f013 0f80 	tst.w	r3, #128	; 0x80
 80036d2:	d121      	bne.n	8003718 <HAL_PCD_EP_ClrStall+0x5a>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80036d4:	f003 0207 	and.w	r2, r3, #7
 80036d8:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 80036dc:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 80036e0:	f501 71b4 	add.w	r1, r1, #360	; 0x168
    ep->is_in = 0U;
 80036e4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80036e8:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 80036ec:	2000      	movs	r0, #0
 80036ee:	f882 0169 	strb.w	r0, [r2, #361]	; 0x169
  ep->is_stall = 0U;
 80036f2:	2200      	movs	r2, #0
 80036f4:	708a      	strb	r2, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80036f6:	f003 0307 	and.w	r3, r3, #7
 80036fa:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 80036fc:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8003700:	2b01      	cmp	r3, #1
 8003702:	d015      	beq.n	8003730 <HAL_PCD_EP_ClrStall+0x72>
 8003704:	2301      	movs	r3, #1
 8003706:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800370a:	6820      	ldr	r0, [r4, #0]
 800370c:	f001 fd09 	bl	8005122 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003710:	2000      	movs	r0, #0
 8003712:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8003716:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003718:	f003 0107 	and.w	r1, r3, #7
 800371c:	1c4a      	adds	r2, r1, #1
 800371e:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8003722:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 8003726:	2001      	movs	r0, #1
 8003728:	7048      	strb	r0, [r1, #1]
 800372a:	e7e2      	b.n	80036f2 <HAL_PCD_EP_ClrStall+0x34>
    return HAL_ERROR;
 800372c:	2001      	movs	r0, #1
}
 800372e:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 8003730:	2002      	movs	r0, #2
 8003732:	e7f0      	b.n	8003716 <HAL_PCD_EP_ClrStall+0x58>

08003734 <HAL_PCDEx_PMAConfig>:
                                       uint16_t ep_kind, uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003734:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003738:	d00b      	beq.n	8003752 <HAL_PCDEx_PMAConfig+0x1e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800373a:	f001 0107 	and.w	r1, r1, #7
 800373e:	3101      	adds	r1, #1
 8003740:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8003744:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003748:	b952      	cbnz	r2, 8003760 <HAL_PCDEx_PMAConfig+0x2c>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800374a:	730a      	strb	r2, [r1, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800374c:	80cb      	strh	r3, [r1, #6]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }

  return HAL_OK;
}
 800374e:	2000      	movs	r0, #0
 8003750:	4770      	bx	lr
    ep = &hpcd->OUT_ep[ep_addr];
 8003752:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8003756:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800375a:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 800375e:	e7f3      	b.n	8003748 <HAL_PCDEx_PMAConfig+0x14>
    ep->doublebuffer = 1U;
 8003760:	2201      	movs	r2, #1
 8003762:	730a      	strb	r2, [r1, #12]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003764:	810b      	strh	r3, [r1, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003766:	0c1b      	lsrs	r3, r3, #16
 8003768:	814b      	strh	r3, [r1, #10]
 800376a:	e7f0      	b.n	800374e <HAL_PCDEx_PMAConfig+0x1a>

0800376c <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800376c:	2800      	cmp	r0, #0
 800376e:	f000 8201 	beq.w	8003b74 <HAL_RCC_OscConfig+0x408>
{
 8003772:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003776:	b082      	sub	sp, #8
 8003778:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800377a:	6803      	ldr	r3, [r0, #0]
 800377c:	f013 0f01 	tst.w	r3, #1
 8003780:	d02c      	beq.n	80037dc <HAL_RCC_OscConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003782:	4b9f      	ldr	r3, [pc, #636]	; (8003a00 <HAL_RCC_OscConfig+0x294>)
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	f003 030c 	and.w	r3, r3, #12
 800378a:	2b04      	cmp	r3, #4
 800378c:	d01d      	beq.n	80037ca <HAL_RCC_OscConfig+0x5e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800378e:	4b9c      	ldr	r3, [pc, #624]	; (8003a00 <HAL_RCC_OscConfig+0x294>)
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	f003 030c 	and.w	r3, r3, #12
 8003796:	2b08      	cmp	r3, #8
 8003798:	d012      	beq.n	80037c0 <HAL_RCC_OscConfig+0x54>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800379a:	6863      	ldr	r3, [r4, #4]
 800379c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037a0:	d041      	beq.n	8003826 <HAL_RCC_OscConfig+0xba>
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d155      	bne.n	8003852 <HAL_RCC_OscConfig+0xe6>
 80037a6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80037aa:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80037b4:	601a      	str	r2, [r3, #0]
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80037bc:	601a      	str	r2, [r3, #0]
 80037be:	e037      	b.n	8003830 <HAL_RCC_OscConfig+0xc4>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80037c0:	4b8f      	ldr	r3, [pc, #572]	; (8003a00 <HAL_RCC_OscConfig+0x294>)
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80037c8:	d0e7      	beq.n	800379a <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037ca:	4b8d      	ldr	r3, [pc, #564]	; (8003a00 <HAL_RCC_OscConfig+0x294>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80037d2:	d003      	beq.n	80037dc <HAL_RCC_OscConfig+0x70>
 80037d4:	6863      	ldr	r3, [r4, #4]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	f000 81ce 	beq.w	8003b78 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037dc:	6823      	ldr	r3, [r4, #0]
 80037de:	f013 0f02 	tst.w	r3, #2
 80037e2:	d075      	beq.n	80038d0 <HAL_RCC_OscConfig+0x164>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80037e4:	4b86      	ldr	r3, [pc, #536]	; (8003a00 <HAL_RCC_OscConfig+0x294>)
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	f013 0f0c 	tst.w	r3, #12
 80037ec:	d05f      	beq.n	80038ae <HAL_RCC_OscConfig+0x142>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80037ee:	4b84      	ldr	r3, [pc, #528]	; (8003a00 <HAL_RCC_OscConfig+0x294>)
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	f003 030c 	and.w	r3, r3, #12
 80037f6:	2b08      	cmp	r3, #8
 80037f8:	d054      	beq.n	80038a4 <HAL_RCC_OscConfig+0x138>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80037fa:	6923      	ldr	r3, [r4, #16]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	f000 808a 	beq.w	8003916 <HAL_RCC_OscConfig+0x1aa>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003802:	4b80      	ldr	r3, [pc, #512]	; (8003a04 <HAL_RCC_OscConfig+0x298>)
 8003804:	2201      	movs	r2, #1
 8003806:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003808:	f7fe fc24 	bl	8002054 <HAL_GetTick>
 800380c:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800380e:	4e7c      	ldr	r6, [pc, #496]	; (8003a00 <HAL_RCC_OscConfig+0x294>)
 8003810:	6833      	ldr	r3, [r6, #0]
 8003812:	f013 0f02 	tst.w	r3, #2
 8003816:	d175      	bne.n	8003904 <HAL_RCC_OscConfig+0x198>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003818:	f7fe fc1c 	bl	8002054 <HAL_GetTick>
 800381c:	1b40      	subs	r0, r0, r5
 800381e:	2802      	cmp	r0, #2
 8003820:	d9f6      	bls.n	8003810 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_TIMEOUT;
 8003822:	2003      	movs	r0, #3
 8003824:	e1ad      	b.n	8003b82 <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003826:	4a76      	ldr	r2, [pc, #472]	; (8003a00 <HAL_RCC_OscConfig+0x294>)
 8003828:	6813      	ldr	r3, [r2, #0]
 800382a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800382e:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003830:	6863      	ldr	r3, [r4, #4]
 8003832:	b343      	cbz	r3, 8003886 <HAL_RCC_OscConfig+0x11a>
        tickstart = HAL_GetTick();
 8003834:	f7fe fc0e 	bl	8002054 <HAL_GetTick>
 8003838:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800383a:	4e71      	ldr	r6, [pc, #452]	; (8003a00 <HAL_RCC_OscConfig+0x294>)
 800383c:	6833      	ldr	r3, [r6, #0]
 800383e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003842:	d1cb      	bne.n	80037dc <HAL_RCC_OscConfig+0x70>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003844:	f7fe fc06 	bl	8002054 <HAL_GetTick>
 8003848:	1b40      	subs	r0, r0, r5
 800384a:	2864      	cmp	r0, #100	; 0x64
 800384c:	d9f6      	bls.n	800383c <HAL_RCC_OscConfig+0xd0>
            return HAL_TIMEOUT;
 800384e:	2003      	movs	r0, #3
 8003850:	e197      	b.n	8003b82 <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003852:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003856:	d009      	beq.n	800386c <HAL_RCC_OscConfig+0x100>
 8003858:	4b69      	ldr	r3, [pc, #420]	; (8003a00 <HAL_RCC_OscConfig+0x294>)
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003860:	601a      	str	r2, [r3, #0]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003868:	601a      	str	r2, [r3, #0]
 800386a:	e7e1      	b.n	8003830 <HAL_RCC_OscConfig+0xc4>
 800386c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003870:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800387a:	601a      	str	r2, [r3, #0]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003882:	601a      	str	r2, [r3, #0]
 8003884:	e7d4      	b.n	8003830 <HAL_RCC_OscConfig+0xc4>
        tickstart = HAL_GetTick();
 8003886:	f7fe fbe5 	bl	8002054 <HAL_GetTick>
 800388a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800388c:	4e5c      	ldr	r6, [pc, #368]	; (8003a00 <HAL_RCC_OscConfig+0x294>)
 800388e:	6833      	ldr	r3, [r6, #0]
 8003890:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003894:	d0a2      	beq.n	80037dc <HAL_RCC_OscConfig+0x70>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003896:	f7fe fbdd 	bl	8002054 <HAL_GetTick>
 800389a:	1b40      	subs	r0, r0, r5
 800389c:	2864      	cmp	r0, #100	; 0x64
 800389e:	d9f6      	bls.n	800388e <HAL_RCC_OscConfig+0x122>
            return HAL_TIMEOUT;
 80038a0:	2003      	movs	r0, #3
 80038a2:	e16e      	b.n	8003b82 <HAL_RCC_OscConfig+0x416>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80038a4:	4b56      	ldr	r3, [pc, #344]	; (8003a00 <HAL_RCC_OscConfig+0x294>)
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80038ac:	d1a5      	bne.n	80037fa <HAL_RCC_OscConfig+0x8e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038ae:	4b54      	ldr	r3, [pc, #336]	; (8003a00 <HAL_RCC_OscConfig+0x294>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f013 0f02 	tst.w	r3, #2
 80038b6:	d003      	beq.n	80038c0 <HAL_RCC_OscConfig+0x154>
 80038b8:	6923      	ldr	r3, [r4, #16]
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	f040 815e 	bne.w	8003b7c <HAL_RCC_OscConfig+0x410>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038c0:	4a4f      	ldr	r2, [pc, #316]	; (8003a00 <HAL_RCC_OscConfig+0x294>)
 80038c2:	6813      	ldr	r3, [r2, #0]
 80038c4:	6961      	ldr	r1, [r4, #20]
 80038c6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80038ca:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80038ce:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038d0:	6823      	ldr	r3, [r4, #0]
 80038d2:	f013 0f08 	tst.w	r3, #8
 80038d6:	d03d      	beq.n	8003954 <HAL_RCC_OscConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80038d8:	69a3      	ldr	r3, [r4, #24]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d066      	beq.n	80039ac <HAL_RCC_OscConfig+0x240>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038de:	4b49      	ldr	r3, [pc, #292]	; (8003a04 <HAL_RCC_OscConfig+0x298>)
 80038e0:	2201      	movs	r2, #1
 80038e2:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038e6:	f7fe fbb5 	bl	8002054 <HAL_GetTick>
 80038ea:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038ec:	4e44      	ldr	r6, [pc, #272]	; (8003a00 <HAL_RCC_OscConfig+0x294>)
 80038ee:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80038f0:	f013 0f02 	tst.w	r3, #2
 80038f4:	d121      	bne.n	800393a <HAL_RCC_OscConfig+0x1ce>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038f6:	f7fe fbad 	bl	8002054 <HAL_GetTick>
 80038fa:	1b40      	subs	r0, r0, r5
 80038fc:	2802      	cmp	r0, #2
 80038fe:	d9f6      	bls.n	80038ee <HAL_RCC_OscConfig+0x182>
        {
          return HAL_TIMEOUT;
 8003900:	2003      	movs	r0, #3
 8003902:	e13e      	b.n	8003b82 <HAL_RCC_OscConfig+0x416>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003904:	4a3e      	ldr	r2, [pc, #248]	; (8003a00 <HAL_RCC_OscConfig+0x294>)
 8003906:	6813      	ldr	r3, [r2, #0]
 8003908:	6961      	ldr	r1, [r4, #20]
 800390a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800390e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003912:	6013      	str	r3, [r2, #0]
 8003914:	e7dc      	b.n	80038d0 <HAL_RCC_OscConfig+0x164>
        __HAL_RCC_HSI_DISABLE();
 8003916:	4b3b      	ldr	r3, [pc, #236]	; (8003a04 <HAL_RCC_OscConfig+0x298>)
 8003918:	2200      	movs	r2, #0
 800391a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800391c:	f7fe fb9a 	bl	8002054 <HAL_GetTick>
 8003920:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003922:	4e37      	ldr	r6, [pc, #220]	; (8003a00 <HAL_RCC_OscConfig+0x294>)
 8003924:	6833      	ldr	r3, [r6, #0]
 8003926:	f013 0f02 	tst.w	r3, #2
 800392a:	d0d1      	beq.n	80038d0 <HAL_RCC_OscConfig+0x164>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800392c:	f7fe fb92 	bl	8002054 <HAL_GetTick>
 8003930:	1b40      	subs	r0, r0, r5
 8003932:	2802      	cmp	r0, #2
 8003934:	d9f6      	bls.n	8003924 <HAL_RCC_OscConfig+0x1b8>
            return HAL_TIMEOUT;
 8003936:	2003      	movs	r0, #3
 8003938:	e123      	b.n	8003b82 <HAL_RCC_OscConfig+0x416>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800393a:	4b33      	ldr	r3, [pc, #204]	; (8003a08 <HAL_RCC_OscConfig+0x29c>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a33      	ldr	r2, [pc, #204]	; (8003a0c <HAL_RCC_OscConfig+0x2a0>)
 8003940:	fba2 2303 	umull	r2, r3, r2, r3
 8003944:	0a5b      	lsrs	r3, r3, #9
 8003946:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8003948:	bf00      	nop
  }
  while (Delay --);
 800394a:	9b01      	ldr	r3, [sp, #4]
 800394c:	1e5a      	subs	r2, r3, #1
 800394e:	9201      	str	r2, [sp, #4]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d1f9      	bne.n	8003948 <HAL_RCC_OscConfig+0x1dc>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003954:	6823      	ldr	r3, [r4, #0]
 8003956:	f013 0f04 	tst.w	r3, #4
 800395a:	f000 809b 	beq.w	8003a94 <HAL_RCC_OscConfig+0x328>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800395e:	4b28      	ldr	r3, [pc, #160]	; (8003a00 <HAL_RCC_OscConfig+0x294>)
 8003960:	69db      	ldr	r3, [r3, #28]
 8003962:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003966:	d134      	bne.n	80039d2 <HAL_RCC_OscConfig+0x266>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003968:	4b25      	ldr	r3, [pc, #148]	; (8003a00 <HAL_RCC_OscConfig+0x294>)
 800396a:	69da      	ldr	r2, [r3, #28]
 800396c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003970:	61da      	str	r2, [r3, #28]
 8003972:	69db      	ldr	r3, [r3, #28]
 8003974:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003978:	9300      	str	r3, [sp, #0]
 800397a:	9b00      	ldr	r3, [sp, #0]
      pwrclkchanged = SET;
 800397c:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800397e:	4b24      	ldr	r3, [pc, #144]	; (8003a10 <HAL_RCC_OscConfig+0x2a4>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003986:	d026      	beq.n	80039d6 <HAL_RCC_OscConfig+0x26a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003988:	68e3      	ldr	r3, [r4, #12]
 800398a:	2b01      	cmp	r3, #1
 800398c:	d042      	beq.n	8003a14 <HAL_RCC_OscConfig+0x2a8>
 800398e:	2b00      	cmp	r3, #0
 8003990:	d158      	bne.n	8003a44 <HAL_RCC_OscConfig+0x2d8>
 8003992:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003996:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800399a:	6a1a      	ldr	r2, [r3, #32]
 800399c:	f022 0201 	bic.w	r2, r2, #1
 80039a0:	621a      	str	r2, [r3, #32]
 80039a2:	6a1a      	ldr	r2, [r3, #32]
 80039a4:	f022 0204 	bic.w	r2, r2, #4
 80039a8:	621a      	str	r2, [r3, #32]
 80039aa:	e038      	b.n	8003a1e <HAL_RCC_OscConfig+0x2b2>
      __HAL_RCC_LSI_DISABLE();
 80039ac:	4b15      	ldr	r3, [pc, #84]	; (8003a04 <HAL_RCC_OscConfig+0x298>)
 80039ae:	2200      	movs	r2, #0
 80039b0:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 80039b4:	f7fe fb4e 	bl	8002054 <HAL_GetTick>
 80039b8:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039ba:	4e11      	ldr	r6, [pc, #68]	; (8003a00 <HAL_RCC_OscConfig+0x294>)
 80039bc:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80039be:	f013 0f02 	tst.w	r3, #2
 80039c2:	d0c7      	beq.n	8003954 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039c4:	f7fe fb46 	bl	8002054 <HAL_GetTick>
 80039c8:	1b40      	subs	r0, r0, r5
 80039ca:	2802      	cmp	r0, #2
 80039cc:	d9f6      	bls.n	80039bc <HAL_RCC_OscConfig+0x250>
          return HAL_TIMEOUT;
 80039ce:	2003      	movs	r0, #3
 80039d0:	e0d7      	b.n	8003b82 <HAL_RCC_OscConfig+0x416>
    FlagStatus       pwrclkchanged = RESET;
 80039d2:	2500      	movs	r5, #0
 80039d4:	e7d3      	b.n	800397e <HAL_RCC_OscConfig+0x212>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039d6:	4a0e      	ldr	r2, [pc, #56]	; (8003a10 <HAL_RCC_OscConfig+0x2a4>)
 80039d8:	6813      	ldr	r3, [r2, #0]
 80039da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039de:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80039e0:	f7fe fb38 	bl	8002054 <HAL_GetTick>
 80039e4:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039e6:	4f0a      	ldr	r7, [pc, #40]	; (8003a10 <HAL_RCC_OscConfig+0x2a4>)
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	f413 7f80 	tst.w	r3, #256	; 0x100
 80039ee:	d1cb      	bne.n	8003988 <HAL_RCC_OscConfig+0x21c>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039f0:	f7fe fb30 	bl	8002054 <HAL_GetTick>
 80039f4:	1b80      	subs	r0, r0, r6
 80039f6:	2864      	cmp	r0, #100	; 0x64
 80039f8:	d9f6      	bls.n	80039e8 <HAL_RCC_OscConfig+0x27c>
          return HAL_TIMEOUT;
 80039fa:	2003      	movs	r0, #3
 80039fc:	e0c1      	b.n	8003b82 <HAL_RCC_OscConfig+0x416>
 80039fe:	bf00      	nop
 8003a00:	40021000 	.word	0x40021000
 8003a04:	42420000 	.word	0x42420000
 8003a08:	2000000c 	.word	0x2000000c
 8003a0c:	10624dd3 	.word	0x10624dd3
 8003a10:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a14:	4a5e      	ldr	r2, [pc, #376]	; (8003b90 <HAL_RCC_OscConfig+0x424>)
 8003a16:	6a13      	ldr	r3, [r2, #32]
 8003a18:	f043 0301 	orr.w	r3, r3, #1
 8003a1c:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a1e:	68e3      	ldr	r3, [r4, #12]
 8003a20:	b333      	cbz	r3, 8003a70 <HAL_RCC_OscConfig+0x304>
      tickstart = HAL_GetTick();
 8003a22:	f7fe fb17 	bl	8002054 <HAL_GetTick>
 8003a26:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a28:	4f59      	ldr	r7, [pc, #356]	; (8003b90 <HAL_RCC_OscConfig+0x424>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a2a:	f241 3888 	movw	r8, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a2e:	6a3b      	ldr	r3, [r7, #32]
 8003a30:	f013 0f02 	tst.w	r3, #2
 8003a34:	d12d      	bne.n	8003a92 <HAL_RCC_OscConfig+0x326>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a36:	f7fe fb0d 	bl	8002054 <HAL_GetTick>
 8003a3a:	1b80      	subs	r0, r0, r6
 8003a3c:	4540      	cmp	r0, r8
 8003a3e:	d9f6      	bls.n	8003a2e <HAL_RCC_OscConfig+0x2c2>
          return HAL_TIMEOUT;
 8003a40:	2003      	movs	r0, #3
 8003a42:	e09e      	b.n	8003b82 <HAL_RCC_OscConfig+0x416>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a44:	2b05      	cmp	r3, #5
 8003a46:	d009      	beq.n	8003a5c <HAL_RCC_OscConfig+0x2f0>
 8003a48:	4b51      	ldr	r3, [pc, #324]	; (8003b90 <HAL_RCC_OscConfig+0x424>)
 8003a4a:	6a1a      	ldr	r2, [r3, #32]
 8003a4c:	f022 0201 	bic.w	r2, r2, #1
 8003a50:	621a      	str	r2, [r3, #32]
 8003a52:	6a1a      	ldr	r2, [r3, #32]
 8003a54:	f022 0204 	bic.w	r2, r2, #4
 8003a58:	621a      	str	r2, [r3, #32]
 8003a5a:	e7e0      	b.n	8003a1e <HAL_RCC_OscConfig+0x2b2>
 8003a5c:	4b4c      	ldr	r3, [pc, #304]	; (8003b90 <HAL_RCC_OscConfig+0x424>)
 8003a5e:	6a1a      	ldr	r2, [r3, #32]
 8003a60:	f042 0204 	orr.w	r2, r2, #4
 8003a64:	621a      	str	r2, [r3, #32]
 8003a66:	6a1a      	ldr	r2, [r3, #32]
 8003a68:	f042 0201 	orr.w	r2, r2, #1
 8003a6c:	621a      	str	r2, [r3, #32]
 8003a6e:	e7d6      	b.n	8003a1e <HAL_RCC_OscConfig+0x2b2>
      tickstart = HAL_GetTick();
 8003a70:	f7fe faf0 	bl	8002054 <HAL_GetTick>
 8003a74:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a76:	4f46      	ldr	r7, [pc, #280]	; (8003b90 <HAL_RCC_OscConfig+0x424>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a78:	f241 3888 	movw	r8, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a7c:	6a3b      	ldr	r3, [r7, #32]
 8003a7e:	f013 0f02 	tst.w	r3, #2
 8003a82:	d006      	beq.n	8003a92 <HAL_RCC_OscConfig+0x326>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a84:	f7fe fae6 	bl	8002054 <HAL_GetTick>
 8003a88:	1b80      	subs	r0, r0, r6
 8003a8a:	4540      	cmp	r0, r8
 8003a8c:	d9f6      	bls.n	8003a7c <HAL_RCC_OscConfig+0x310>
          return HAL_TIMEOUT;
 8003a8e:	2003      	movs	r0, #3
 8003a90:	e077      	b.n	8003b82 <HAL_RCC_OscConfig+0x416>
    if (pwrclkchanged == SET)
 8003a92:	b9e5      	cbnz	r5, 8003ace <HAL_RCC_OscConfig+0x362>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a94:	69e3      	ldr	r3, [r4, #28]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d072      	beq.n	8003b80 <HAL_RCC_OscConfig+0x414>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a9a:	4a3d      	ldr	r2, [pc, #244]	; (8003b90 <HAL_RCC_OscConfig+0x424>)
 8003a9c:	6852      	ldr	r2, [r2, #4]
 8003a9e:	f002 020c 	and.w	r2, r2, #12
 8003aa2:	2a08      	cmp	r2, #8
 8003aa4:	d056      	beq.n	8003b54 <HAL_RCC_OscConfig+0x3e8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003aa6:	2b02      	cmp	r3, #2
 8003aa8:	d017      	beq.n	8003ada <HAL_RCC_OscConfig+0x36e>
        __HAL_RCC_PLL_DISABLE();
 8003aaa:	4b3a      	ldr	r3, [pc, #232]	; (8003b94 <HAL_RCC_OscConfig+0x428>)
 8003aac:	2200      	movs	r2, #0
 8003aae:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8003ab0:	f7fe fad0 	bl	8002054 <HAL_GetTick>
 8003ab4:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ab6:	4d36      	ldr	r5, [pc, #216]	; (8003b90 <HAL_RCC_OscConfig+0x424>)
 8003ab8:	682b      	ldr	r3, [r5, #0]
 8003aba:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003abe:	d047      	beq.n	8003b50 <HAL_RCC_OscConfig+0x3e4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ac0:	f7fe fac8 	bl	8002054 <HAL_GetTick>
 8003ac4:	1b00      	subs	r0, r0, r4
 8003ac6:	2802      	cmp	r0, #2
 8003ac8:	d9f6      	bls.n	8003ab8 <HAL_RCC_OscConfig+0x34c>
            return HAL_TIMEOUT;
 8003aca:	2003      	movs	r0, #3
 8003acc:	e059      	b.n	8003b82 <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ace:	4a30      	ldr	r2, [pc, #192]	; (8003b90 <HAL_RCC_OscConfig+0x424>)
 8003ad0:	69d3      	ldr	r3, [r2, #28]
 8003ad2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ad6:	61d3      	str	r3, [r2, #28]
 8003ad8:	e7dc      	b.n	8003a94 <HAL_RCC_OscConfig+0x328>
        __HAL_RCC_PLL_DISABLE();
 8003ada:	4b2e      	ldr	r3, [pc, #184]	; (8003b94 <HAL_RCC_OscConfig+0x428>)
 8003adc:	2200      	movs	r2, #0
 8003ade:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8003ae0:	f7fe fab8 	bl	8002054 <HAL_GetTick>
 8003ae4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ae6:	4e2a      	ldr	r6, [pc, #168]	; (8003b90 <HAL_RCC_OscConfig+0x424>)
 8003ae8:	6833      	ldr	r3, [r6, #0]
 8003aea:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003aee:	d006      	beq.n	8003afe <HAL_RCC_OscConfig+0x392>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003af0:	f7fe fab0 	bl	8002054 <HAL_GetTick>
 8003af4:	1b40      	subs	r0, r0, r5
 8003af6:	2802      	cmp	r0, #2
 8003af8:	d9f6      	bls.n	8003ae8 <HAL_RCC_OscConfig+0x37c>
            return HAL_TIMEOUT;
 8003afa:	2003      	movs	r0, #3
 8003afc:	e041      	b.n	8003b82 <HAL_RCC_OscConfig+0x416>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003afe:	6a23      	ldr	r3, [r4, #32]
 8003b00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b04:	d01a      	beq.n	8003b3c <HAL_RCC_OscConfig+0x3d0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b06:	4922      	ldr	r1, [pc, #136]	; (8003b90 <HAL_RCC_OscConfig+0x424>)
 8003b08:	684a      	ldr	r2, [r1, #4]
 8003b0a:	6a23      	ldr	r3, [r4, #32]
 8003b0c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003b0e:	4303      	orrs	r3, r0
 8003b10:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8003b14:	4313      	orrs	r3, r2
 8003b16:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8003b18:	4b1e      	ldr	r3, [pc, #120]	; (8003b94 <HAL_RCC_OscConfig+0x428>)
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8003b1e:	f7fe fa99 	bl	8002054 <HAL_GetTick>
 8003b22:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b24:	4d1a      	ldr	r5, [pc, #104]	; (8003b90 <HAL_RCC_OscConfig+0x424>)
 8003b26:	682b      	ldr	r3, [r5, #0]
 8003b28:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003b2c:	d10e      	bne.n	8003b4c <HAL_RCC_OscConfig+0x3e0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b2e:	f7fe fa91 	bl	8002054 <HAL_GetTick>
 8003b32:	1b00      	subs	r0, r0, r4
 8003b34:	2802      	cmp	r0, #2
 8003b36:	d9f6      	bls.n	8003b26 <HAL_RCC_OscConfig+0x3ba>
            return HAL_TIMEOUT;
 8003b38:	2003      	movs	r0, #3
 8003b3a:	e022      	b.n	8003b82 <HAL_RCC_OscConfig+0x416>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003b3c:	4a14      	ldr	r2, [pc, #80]	; (8003b90 <HAL_RCC_OscConfig+0x424>)
 8003b3e:	6853      	ldr	r3, [r2, #4]
 8003b40:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003b44:	68a1      	ldr	r1, [r4, #8]
 8003b46:	430b      	orrs	r3, r1
 8003b48:	6053      	str	r3, [r2, #4]
 8003b4a:	e7dc      	b.n	8003b06 <HAL_RCC_OscConfig+0x39a>
  return HAL_OK;
 8003b4c:	2000      	movs	r0, #0
 8003b4e:	e018      	b.n	8003b82 <HAL_RCC_OscConfig+0x416>
 8003b50:	2000      	movs	r0, #0
 8003b52:	e016      	b.n	8003b82 <HAL_RCC_OscConfig+0x416>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d017      	beq.n	8003b88 <HAL_RCC_OscConfig+0x41c>
        pll_config = RCC->CFGR;
 8003b58:	4b0d      	ldr	r3, [pc, #52]	; (8003b90 <HAL_RCC_OscConfig+0x424>)
 8003b5a:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b5c:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8003b60:	6a22      	ldr	r2, [r4, #32]
 8003b62:	4291      	cmp	r1, r2
 8003b64:	d112      	bne.n	8003b8c <HAL_RCC_OscConfig+0x420>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003b66:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b6a:	6a60      	ldr	r0, [r4, #36]	; 0x24
        return HAL_ERROR;
 8003b6c:	1a18      	subs	r0, r3, r0
 8003b6e:	bf18      	it	ne
 8003b70:	2001      	movne	r0, #1
 8003b72:	e006      	b.n	8003b82 <HAL_RCC_OscConfig+0x416>
    return HAL_ERROR;
 8003b74:	2001      	movs	r0, #1
}
 8003b76:	4770      	bx	lr
        return HAL_ERROR;
 8003b78:	2001      	movs	r0, #1
 8003b7a:	e002      	b.n	8003b82 <HAL_RCC_OscConfig+0x416>
        return HAL_ERROR;
 8003b7c:	2001      	movs	r0, #1
 8003b7e:	e000      	b.n	8003b82 <HAL_RCC_OscConfig+0x416>
  return HAL_OK;
 8003b80:	2000      	movs	r0, #0
}
 8003b82:	b002      	add	sp, #8
 8003b84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_ERROR;
 8003b88:	2001      	movs	r0, #1
 8003b8a:	e7fa      	b.n	8003b82 <HAL_RCC_OscConfig+0x416>
          return HAL_ERROR;
 8003b8c:	2001      	movs	r0, #1
 8003b8e:	e7f8      	b.n	8003b82 <HAL_RCC_OscConfig+0x416>
 8003b90:	40021000 	.word	0x40021000
 8003b94:	42420000 	.word	0x42420000

08003b98 <HAL_RCC_GetSysClockFreq>:
{
 8003b98:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003b9a:	4b17      	ldr	r3, [pc, #92]	; (8003bf8 <HAL_RCC_GetSysClockFreq+0x60>)
 8003b9c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003b9e:	f10d 0c18 	add.w	ip, sp, #24
 8003ba2:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003ba6:	f240 2301 	movw	r3, #513	; 0x201
 8003baa:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8003bae:	4b13      	ldr	r3, [pc, #76]	; (8003bfc <HAL_RCC_GetSysClockFreq+0x64>)
 8003bb0:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8003bb2:	f003 020c 	and.w	r2, r3, #12
 8003bb6:	2a08      	cmp	r2, #8
 8003bb8:	d002      	beq.n	8003bc0 <HAL_RCC_GetSysClockFreq+0x28>
      sysclockfreq = HSE_VALUE;
 8003bba:	4811      	ldr	r0, [pc, #68]	; (8003c00 <HAL_RCC_GetSysClockFreq+0x68>)
}
 8003bbc:	b006      	add	sp, #24
 8003bbe:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003bc0:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8003bc4:	3218      	adds	r2, #24
 8003bc6:	446a      	add	r2, sp
 8003bc8:	f812 0c10 	ldrb.w	r0, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003bcc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003bd0:	d00d      	beq.n	8003bee <HAL_RCC_GetSysClockFreq+0x56>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003bd2:	4b0a      	ldr	r3, [pc, #40]	; (8003bfc <HAL_RCC_GetSysClockFreq+0x64>)
 8003bd4:	685b      	ldr	r3, [r3, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003bd6:	4a0a      	ldr	r2, [pc, #40]	; (8003c00 <HAL_RCC_GetSysClockFreq+0x68>)
 8003bd8:	fb02 f000 	mul.w	r0, r2, r0
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003bdc:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8003be0:	3318      	adds	r3, #24
 8003be2:	446b      	add	r3, sp
 8003be4:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003be8:	fbb0 f0f3 	udiv	r0, r0, r3
 8003bec:	e7e6      	b.n	8003bbc <HAL_RCC_GetSysClockFreq+0x24>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003bee:	4b05      	ldr	r3, [pc, #20]	; (8003c04 <HAL_RCC_GetSysClockFreq+0x6c>)
 8003bf0:	fb03 f000 	mul.w	r0, r3, r0
 8003bf4:	e7e2      	b.n	8003bbc <HAL_RCC_GetSysClockFreq+0x24>
 8003bf6:	bf00      	nop
 8003bf8:	0800b344 	.word	0x0800b344
 8003bfc:	40021000 	.word	0x40021000
 8003c00:	007a1200 	.word	0x007a1200
 8003c04:	003d0900 	.word	0x003d0900

08003c08 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8003c08:	2800      	cmp	r0, #0
 8003c0a:	f000 80a2 	beq.w	8003d52 <HAL_RCC_ClockConfig+0x14a>
{
 8003c0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c12:	460d      	mov	r5, r1
 8003c14:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c16:	4b53      	ldr	r3, [pc, #332]	; (8003d64 <HAL_RCC_ClockConfig+0x15c>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 0307 	and.w	r3, r3, #7
 8003c1e:	428b      	cmp	r3, r1
 8003c20:	d20b      	bcs.n	8003c3a <HAL_RCC_ClockConfig+0x32>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c22:	4a50      	ldr	r2, [pc, #320]	; (8003d64 <HAL_RCC_ClockConfig+0x15c>)
 8003c24:	6813      	ldr	r3, [r2, #0]
 8003c26:	f023 0307 	bic.w	r3, r3, #7
 8003c2a:	430b      	orrs	r3, r1
 8003c2c:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c2e:	6813      	ldr	r3, [r2, #0]
 8003c30:	f003 0307 	and.w	r3, r3, #7
 8003c34:	428b      	cmp	r3, r1
 8003c36:	f040 808e 	bne.w	8003d56 <HAL_RCC_ClockConfig+0x14e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c3a:	6823      	ldr	r3, [r4, #0]
 8003c3c:	f013 0f02 	tst.w	r3, #2
 8003c40:	d017      	beq.n	8003c72 <HAL_RCC_ClockConfig+0x6a>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c42:	f013 0f04 	tst.w	r3, #4
 8003c46:	d004      	beq.n	8003c52 <HAL_RCC_ClockConfig+0x4a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c48:	4a47      	ldr	r2, [pc, #284]	; (8003d68 <HAL_RCC_ClockConfig+0x160>)
 8003c4a:	6853      	ldr	r3, [r2, #4]
 8003c4c:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003c50:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c52:	6823      	ldr	r3, [r4, #0]
 8003c54:	f013 0f08 	tst.w	r3, #8
 8003c58:	d004      	beq.n	8003c64 <HAL_RCC_ClockConfig+0x5c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c5a:	4a43      	ldr	r2, [pc, #268]	; (8003d68 <HAL_RCC_ClockConfig+0x160>)
 8003c5c:	6853      	ldr	r3, [r2, #4]
 8003c5e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003c62:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c64:	4a40      	ldr	r2, [pc, #256]	; (8003d68 <HAL_RCC_ClockConfig+0x160>)
 8003c66:	6853      	ldr	r3, [r2, #4]
 8003c68:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c6c:	68a1      	ldr	r1, [r4, #8]
 8003c6e:	430b      	orrs	r3, r1
 8003c70:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c72:	6823      	ldr	r3, [r4, #0]
 8003c74:	f013 0f01 	tst.w	r3, #1
 8003c78:	d031      	beq.n	8003cde <HAL_RCC_ClockConfig+0xd6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c7a:	6862      	ldr	r2, [r4, #4]
 8003c7c:	2a01      	cmp	r2, #1
 8003c7e:	d020      	beq.n	8003cc2 <HAL_RCC_ClockConfig+0xba>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c80:	2a02      	cmp	r2, #2
 8003c82:	d025      	beq.n	8003cd0 <HAL_RCC_ClockConfig+0xc8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c84:	4b38      	ldr	r3, [pc, #224]	; (8003d68 <HAL_RCC_ClockConfig+0x160>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f013 0f02 	tst.w	r3, #2
 8003c8c:	d065      	beq.n	8003d5a <HAL_RCC_ClockConfig+0x152>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c8e:	4936      	ldr	r1, [pc, #216]	; (8003d68 <HAL_RCC_ClockConfig+0x160>)
 8003c90:	684b      	ldr	r3, [r1, #4]
 8003c92:	f023 0303 	bic.w	r3, r3, #3
 8003c96:	4313      	orrs	r3, r2
 8003c98:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8003c9a:	f7fe f9db 	bl	8002054 <HAL_GetTick>
 8003c9e:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ca0:	4f31      	ldr	r7, [pc, #196]	; (8003d68 <HAL_RCC_ClockConfig+0x160>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ca2:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f003 030c 	and.w	r3, r3, #12
 8003cac:	6862      	ldr	r2, [r4, #4]
 8003cae:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003cb2:	d014      	beq.n	8003cde <HAL_RCC_ClockConfig+0xd6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cb4:	f7fe f9ce 	bl	8002054 <HAL_GetTick>
 8003cb8:	1b80      	subs	r0, r0, r6
 8003cba:	4540      	cmp	r0, r8
 8003cbc:	d9f3      	bls.n	8003ca6 <HAL_RCC_ClockConfig+0x9e>
        return HAL_TIMEOUT;
 8003cbe:	2003      	movs	r0, #3
 8003cc0:	e045      	b.n	8003d4e <HAL_RCC_ClockConfig+0x146>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cc2:	4b29      	ldr	r3, [pc, #164]	; (8003d68 <HAL_RCC_ClockConfig+0x160>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003cca:	d1e0      	bne.n	8003c8e <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8003ccc:	2001      	movs	r0, #1
 8003cce:	e03e      	b.n	8003d4e <HAL_RCC_ClockConfig+0x146>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cd0:	4b25      	ldr	r3, [pc, #148]	; (8003d68 <HAL_RCC_ClockConfig+0x160>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003cd8:	d1d9      	bne.n	8003c8e <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8003cda:	2001      	movs	r0, #1
 8003cdc:	e037      	b.n	8003d4e <HAL_RCC_ClockConfig+0x146>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003cde:	4b21      	ldr	r3, [pc, #132]	; (8003d64 <HAL_RCC_ClockConfig+0x15c>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 0307 	and.w	r3, r3, #7
 8003ce6:	42ab      	cmp	r3, r5
 8003ce8:	d90a      	bls.n	8003d00 <HAL_RCC_ClockConfig+0xf8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cea:	4a1e      	ldr	r2, [pc, #120]	; (8003d64 <HAL_RCC_ClockConfig+0x15c>)
 8003cec:	6813      	ldr	r3, [r2, #0]
 8003cee:	f023 0307 	bic.w	r3, r3, #7
 8003cf2:	432b      	orrs	r3, r5
 8003cf4:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cf6:	6813      	ldr	r3, [r2, #0]
 8003cf8:	f003 0307 	and.w	r3, r3, #7
 8003cfc:	42ab      	cmp	r3, r5
 8003cfe:	d12e      	bne.n	8003d5e <HAL_RCC_ClockConfig+0x156>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d00:	6823      	ldr	r3, [r4, #0]
 8003d02:	f013 0f04 	tst.w	r3, #4
 8003d06:	d006      	beq.n	8003d16 <HAL_RCC_ClockConfig+0x10e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d08:	4a17      	ldr	r2, [pc, #92]	; (8003d68 <HAL_RCC_ClockConfig+0x160>)
 8003d0a:	6853      	ldr	r3, [r2, #4]
 8003d0c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003d10:	68e1      	ldr	r1, [r4, #12]
 8003d12:	430b      	orrs	r3, r1
 8003d14:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d16:	6823      	ldr	r3, [r4, #0]
 8003d18:	f013 0f08 	tst.w	r3, #8
 8003d1c:	d007      	beq.n	8003d2e <HAL_RCC_ClockConfig+0x126>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003d1e:	4a12      	ldr	r2, [pc, #72]	; (8003d68 <HAL_RCC_ClockConfig+0x160>)
 8003d20:	6853      	ldr	r3, [r2, #4]
 8003d22:	6921      	ldr	r1, [r4, #16]
 8003d24:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8003d28:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003d2c:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003d2e:	f7ff ff33 	bl	8003b98 <HAL_RCC_GetSysClockFreq>
 8003d32:	4b0d      	ldr	r3, [pc, #52]	; (8003d68 <HAL_RCC_ClockConfig+0x160>)
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003d3a:	4a0c      	ldr	r2, [pc, #48]	; (8003d6c <HAL_RCC_ClockConfig+0x164>)
 8003d3c:	5cd3      	ldrb	r3, [r2, r3]
 8003d3e:	40d8      	lsrs	r0, r3
 8003d40:	4b0b      	ldr	r3, [pc, #44]	; (8003d70 <HAL_RCC_ClockConfig+0x168>)
 8003d42:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8003d44:	4b0b      	ldr	r3, [pc, #44]	; (8003d74 <HAL_RCC_ClockConfig+0x16c>)
 8003d46:	6818      	ldr	r0, [r3, #0]
 8003d48:	f7fe f940 	bl	8001fcc <HAL_InitTick>
  return HAL_OK;
 8003d4c:	2000      	movs	r0, #0
}
 8003d4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8003d52:	2001      	movs	r0, #1
}
 8003d54:	4770      	bx	lr
    return HAL_ERROR;
 8003d56:	2001      	movs	r0, #1
 8003d58:	e7f9      	b.n	8003d4e <HAL_RCC_ClockConfig+0x146>
        return HAL_ERROR;
 8003d5a:	2001      	movs	r0, #1
 8003d5c:	e7f7      	b.n	8003d4e <HAL_RCC_ClockConfig+0x146>
    return HAL_ERROR;
 8003d5e:	2001      	movs	r0, #1
 8003d60:	e7f5      	b.n	8003d4e <HAL_RCC_ClockConfig+0x146>
 8003d62:	bf00      	nop
 8003d64:	40022000 	.word	0x40022000
 8003d68:	40021000 	.word	0x40021000
 8003d6c:	0800b320 	.word	0x0800b320
 8003d70:	2000000c 	.word	0x2000000c
 8003d74:	20000014 	.word	0x20000014

08003d78 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003d78:	4b04      	ldr	r3, [pc, #16]	; (8003d8c <HAL_RCC_GetPCLK1Freq+0x14>)
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8003d80:	4a03      	ldr	r2, [pc, #12]	; (8003d90 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003d82:	5cd3      	ldrb	r3, [r2, r3]
 8003d84:	4a03      	ldr	r2, [pc, #12]	; (8003d94 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003d86:	6810      	ldr	r0, [r2, #0]
}
 8003d88:	40d8      	lsrs	r0, r3
 8003d8a:	4770      	bx	lr
 8003d8c:	40021000 	.word	0x40021000
 8003d90:	0800b330 	.word	0x0800b330
 8003d94:	2000000c 	.word	0x2000000c

08003d98 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003d98:	4b04      	ldr	r3, [pc, #16]	; (8003dac <HAL_RCC_GetPCLK2Freq+0x14>)
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8003da0:	4a03      	ldr	r2, [pc, #12]	; (8003db0 <HAL_RCC_GetPCLK2Freq+0x18>)
 8003da2:	5cd3      	ldrb	r3, [r2, r3]
 8003da4:	4a03      	ldr	r2, [pc, #12]	; (8003db4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003da6:	6810      	ldr	r0, [r2, #0]
}
 8003da8:	40d8      	lsrs	r0, r3
 8003daa:	4770      	bx	lr
 8003dac:	40021000 	.word	0x40021000
 8003db0:	0800b330 	.word	0x0800b330
 8003db4:	2000000c 	.word	0x2000000c

08003db8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003db8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003dbc:	b082      	sub	sp, #8
 8003dbe:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003dc0:	6803      	ldr	r3, [r0, #0]
 8003dc2:	f013 0f01 	tst.w	r3, #1
 8003dc6:	d036      	beq.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dc8:	4b3f      	ldr	r3, [pc, #252]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8003dca:	69db      	ldr	r3, [r3, #28]
 8003dcc:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003dd0:	d149      	bne.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0xae>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dd2:	4b3d      	ldr	r3, [pc, #244]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8003dd4:	69da      	ldr	r2, [r3, #28]
 8003dd6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003dda:	61da      	str	r2, [r3, #28]
 8003ddc:	69db      	ldr	r3, [r3, #28]
 8003dde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003de2:	9301      	str	r3, [sp, #4]
 8003de4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003de6:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003de8:	4b38      	ldr	r3, [pc, #224]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003df0:	d03b      	beq.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003df2:	4b35      	ldr	r3, [pc, #212]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8003df4:	6a1b      	ldr	r3, [r3, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003df6:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8003dfa:	d013      	beq.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8003dfc:	6862      	ldr	r2, [r4, #4]
 8003dfe:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d00e      	beq.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x6c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e06:	4a30      	ldr	r2, [pc, #192]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8003e08:	6a13      	ldr	r3, [r2, #32]
 8003e0a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e0e:	4930      	ldr	r1, [pc, #192]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8003e10:	2601      	movs	r6, #1
 8003e12:	f8c1 6440 	str.w	r6, [r1, #1088]	; 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e16:	2600      	movs	r6, #0
 8003e18:	f8c1 6440 	str.w	r6, [r1, #1088]	; 0x440
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003e1c:	6210      	str	r0, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003e1e:	f013 0f01 	tst.w	r3, #1
 8003e22:	d136      	bne.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0xda>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e24:	4a28      	ldr	r2, [pc, #160]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8003e26:	6a13      	ldr	r3, [r2, #32]
 8003e28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e2c:	6861      	ldr	r1, [r4, #4]
 8003e2e:	430b      	orrs	r3, r1
 8003e30:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003e32:	2d00      	cmp	r5, #0
 8003e34:	d13e      	bne.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003e36:	6823      	ldr	r3, [r4, #0]
 8003e38:	f013 0f02 	tst.w	r3, #2
 8003e3c:	d006      	beq.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x94>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e3e:	4a22      	ldr	r2, [pc, #136]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8003e40:	6853      	ldr	r3, [r2, #4]
 8003e42:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003e46:	68a1      	ldr	r1, [r4, #8]
 8003e48:	430b      	orrs	r3, r1
 8003e4a:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003e4c:	6823      	ldr	r3, [r4, #0]
 8003e4e:	f013 0f10 	tst.w	r3, #16
 8003e52:	d034      	beq.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x106>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e54:	4a1c      	ldr	r2, [pc, #112]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8003e56:	6853      	ldr	r3, [r2, #4]
 8003e58:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003e5c:	68e1      	ldr	r1, [r4, #12]
 8003e5e:	430b      	orrs	r3, r1
 8003e60:	6053      	str	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003e62:	2000      	movs	r0, #0
 8003e64:	e02c      	b.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x108>
    FlagStatus pwrclkchanged = RESET;
 8003e66:	2500      	movs	r5, #0
 8003e68:	e7be      	b.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x30>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e6a:	4a18      	ldr	r2, [pc, #96]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8003e6c:	6813      	ldr	r3, [r2, #0]
 8003e6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e72:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8003e74:	f7fe f8ee 	bl	8002054 <HAL_GetTick>
 8003e78:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e7a:	4f14      	ldr	r7, [pc, #80]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003e82:	d1b6      	bne.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e84:	f7fe f8e6 	bl	8002054 <HAL_GetTick>
 8003e88:	1b80      	subs	r0, r0, r6
 8003e8a:	2864      	cmp	r0, #100	; 0x64
 8003e8c:	d9f6      	bls.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0xc4>
          return HAL_TIMEOUT;
 8003e8e:	2003      	movs	r0, #3
 8003e90:	e016      	b.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x108>
        tickstart = HAL_GetTick();
 8003e92:	f7fe f8df 	bl	8002054 <HAL_GetTick>
 8003e96:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e98:	4f0b      	ldr	r7, [pc, #44]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x110>)
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e9a:	f241 3888 	movw	r8, #5000	; 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e9e:	6a3b      	ldr	r3, [r7, #32]
 8003ea0:	f013 0f02 	tst.w	r3, #2
 8003ea4:	d1be      	bne.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x6c>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ea6:	f7fe f8d5 	bl	8002054 <HAL_GetTick>
 8003eaa:	1b80      	subs	r0, r0, r6
 8003eac:	4540      	cmp	r0, r8
 8003eae:	d9f6      	bls.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0xe6>
            return HAL_TIMEOUT;
 8003eb0:	2003      	movs	r0, #3
 8003eb2:	e005      	b.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x108>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003eb4:	69d3      	ldr	r3, [r2, #28]
 8003eb6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003eba:	61d3      	str	r3, [r2, #28]
 8003ebc:	e7bb      	b.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x7e>
  return HAL_OK;
 8003ebe:	2000      	movs	r0, #0
}
 8003ec0:	b002      	add	sp, #8
 8003ec2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ec6:	bf00      	nop
 8003ec8:	40021000 	.word	0x40021000
 8003ecc:	40007000 	.word	0x40007000
 8003ed0:	42420000 	.word	0x42420000

08003ed4 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ed4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d127      	bne.n	8003f2e <HAL_TIM_Base_Start_IT+0x5a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ede:	2302      	movs	r3, #2
 8003ee0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ee4:	6802      	ldr	r2, [r0, #0]
 8003ee6:	68d3      	ldr	r3, [r2, #12]
 8003ee8:	f043 0301 	orr.w	r3, r3, #1
 8003eec:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003eee:	6803      	ldr	r3, [r0, #0]
 8003ef0:	4a11      	ldr	r2, [pc, #68]	; (8003f38 <HAL_TIM_Base_Start_IT+0x64>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d010      	beq.n	8003f18 <HAL_TIM_Base_Start_IT+0x44>
 8003ef6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003efa:	d00d      	beq.n	8003f18 <HAL_TIM_Base_Start_IT+0x44>
 8003efc:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d009      	beq.n	8003f18 <HAL_TIM_Base_Start_IT+0x44>
 8003f04:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d005      	beq.n	8003f18 <HAL_TIM_Base_Start_IT+0x44>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	f042 0201 	orr.w	r2, r2, #1
 8003f12:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f14:	2000      	movs	r0, #0
 8003f16:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f18:	689a      	ldr	r2, [r3, #8]
 8003f1a:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f1e:	2a06      	cmp	r2, #6
 8003f20:	d007      	beq.n	8003f32 <HAL_TIM_Base_Start_IT+0x5e>
      __HAL_TIM_ENABLE(htim);
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	f042 0201 	orr.w	r2, r2, #1
 8003f28:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003f2a:	2000      	movs	r0, #0
 8003f2c:	4770      	bx	lr
    return HAL_ERROR;
 8003f2e:	2001      	movs	r0, #1
 8003f30:	4770      	bx	lr
  return HAL_OK;
 8003f32:	2000      	movs	r0, #0
}
 8003f34:	4770      	bx	lr
 8003f36:	bf00      	nop
 8003f38:	40012c00 	.word	0x40012c00

08003f3c <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f3c:	4770      	bx	lr

08003f3e <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f3e:	4770      	bx	lr

08003f40 <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f40:	4770      	bx	lr

08003f42 <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f42:	4770      	bx	lr

08003f44 <HAL_TIM_IRQHandler>:
{
 8003f44:	b510      	push	{r4, lr}
 8003f46:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f48:	6803      	ldr	r3, [r0, #0]
 8003f4a:	691a      	ldr	r2, [r3, #16]
 8003f4c:	f012 0f02 	tst.w	r2, #2
 8003f50:	d011      	beq.n	8003f76 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f52:	68da      	ldr	r2, [r3, #12]
 8003f54:	f012 0f02 	tst.w	r2, #2
 8003f58:	d00d      	beq.n	8003f76 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f5a:	f06f 0202 	mvn.w	r2, #2
 8003f5e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f60:	2301      	movs	r3, #1
 8003f62:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f64:	6803      	ldr	r3, [r0, #0]
 8003f66:	699b      	ldr	r3, [r3, #24]
 8003f68:	f013 0f03 	tst.w	r3, #3
 8003f6c:	d070      	beq.n	8004050 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 8003f6e:	f7ff ffe6 	bl	8003f3e <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f72:	2300      	movs	r3, #0
 8003f74:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003f76:	6823      	ldr	r3, [r4, #0]
 8003f78:	691a      	ldr	r2, [r3, #16]
 8003f7a:	f012 0f04 	tst.w	r2, #4
 8003f7e:	d012      	beq.n	8003fa6 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003f80:	68da      	ldr	r2, [r3, #12]
 8003f82:	f012 0f04 	tst.w	r2, #4
 8003f86:	d00e      	beq.n	8003fa6 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003f88:	f06f 0204 	mvn.w	r2, #4
 8003f8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f8e:	2302      	movs	r3, #2
 8003f90:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f92:	6823      	ldr	r3, [r4, #0]
 8003f94:	699b      	ldr	r3, [r3, #24]
 8003f96:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003f9a:	d05f      	beq.n	800405c <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 8003f9c:	4620      	mov	r0, r4
 8003f9e:	f7ff ffce 	bl	8003f3e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003fa6:	6823      	ldr	r3, [r4, #0]
 8003fa8:	691a      	ldr	r2, [r3, #16]
 8003faa:	f012 0f08 	tst.w	r2, #8
 8003fae:	d012      	beq.n	8003fd6 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003fb0:	68da      	ldr	r2, [r3, #12]
 8003fb2:	f012 0f08 	tst.w	r2, #8
 8003fb6:	d00e      	beq.n	8003fd6 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003fb8:	f06f 0208 	mvn.w	r2, #8
 8003fbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003fbe:	2304      	movs	r3, #4
 8003fc0:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003fc2:	6823      	ldr	r3, [r4, #0]
 8003fc4:	69db      	ldr	r3, [r3, #28]
 8003fc6:	f013 0f03 	tst.w	r3, #3
 8003fca:	d04e      	beq.n	800406a <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 8003fcc:	4620      	mov	r0, r4
 8003fce:	f7ff ffb6 	bl	8003f3e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003fd6:	6823      	ldr	r3, [r4, #0]
 8003fd8:	691a      	ldr	r2, [r3, #16]
 8003fda:	f012 0f10 	tst.w	r2, #16
 8003fde:	d012      	beq.n	8004006 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003fe0:	68da      	ldr	r2, [r3, #12]
 8003fe2:	f012 0f10 	tst.w	r2, #16
 8003fe6:	d00e      	beq.n	8004006 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003fe8:	f06f 0210 	mvn.w	r2, #16
 8003fec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003fee:	2308      	movs	r3, #8
 8003ff0:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ff2:	6823      	ldr	r3, [r4, #0]
 8003ff4:	69db      	ldr	r3, [r3, #28]
 8003ff6:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003ffa:	d03d      	beq.n	8004078 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 8003ffc:	4620      	mov	r0, r4
 8003ffe:	f7ff ff9e 	bl	8003f3e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004002:	2300      	movs	r3, #0
 8004004:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004006:	6823      	ldr	r3, [r4, #0]
 8004008:	691a      	ldr	r2, [r3, #16]
 800400a:	f012 0f01 	tst.w	r2, #1
 800400e:	d003      	beq.n	8004018 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004010:	68da      	ldr	r2, [r3, #12]
 8004012:	f012 0f01 	tst.w	r2, #1
 8004016:	d136      	bne.n	8004086 <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004018:	6823      	ldr	r3, [r4, #0]
 800401a:	691a      	ldr	r2, [r3, #16]
 800401c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004020:	d003      	beq.n	800402a <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004022:	68da      	ldr	r2, [r3, #12]
 8004024:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004028:	d134      	bne.n	8004094 <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800402a:	6823      	ldr	r3, [r4, #0]
 800402c:	691a      	ldr	r2, [r3, #16]
 800402e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004032:	d003      	beq.n	800403c <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004034:	68da      	ldr	r2, [r3, #12]
 8004036:	f012 0f40 	tst.w	r2, #64	; 0x40
 800403a:	d132      	bne.n	80040a2 <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800403c:	6823      	ldr	r3, [r4, #0]
 800403e:	691a      	ldr	r2, [r3, #16]
 8004040:	f012 0f20 	tst.w	r2, #32
 8004044:	d003      	beq.n	800404e <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004046:	68da      	ldr	r2, [r3, #12]
 8004048:	f012 0f20 	tst.w	r2, #32
 800404c:	d130      	bne.n	80040b0 <HAL_TIM_IRQHandler+0x16c>
}
 800404e:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004050:	f7ff ff74 	bl	8003f3c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004054:	4620      	mov	r0, r4
 8004056:	f7ff ff73 	bl	8003f40 <HAL_TIM_PWM_PulseFinishedCallback>
 800405a:	e78a      	b.n	8003f72 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800405c:	4620      	mov	r0, r4
 800405e:	f7ff ff6d 	bl	8003f3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004062:	4620      	mov	r0, r4
 8004064:	f7ff ff6c 	bl	8003f40 <HAL_TIM_PWM_PulseFinishedCallback>
 8004068:	e79b      	b.n	8003fa2 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800406a:	4620      	mov	r0, r4
 800406c:	f7ff ff66 	bl	8003f3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004070:	4620      	mov	r0, r4
 8004072:	f7ff ff65 	bl	8003f40 <HAL_TIM_PWM_PulseFinishedCallback>
 8004076:	e7ac      	b.n	8003fd2 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004078:	4620      	mov	r0, r4
 800407a:	f7ff ff5f 	bl	8003f3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800407e:	4620      	mov	r0, r4
 8004080:	f7ff ff5e 	bl	8003f40 <HAL_TIM_PWM_PulseFinishedCallback>
 8004084:	e7bd      	b.n	8004002 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004086:	f06f 0201 	mvn.w	r2, #1
 800408a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800408c:	4620      	mov	r0, r4
 800408e:	f7fc ffbf 	bl	8001010 <HAL_TIM_PeriodElapsedCallback>
 8004092:	e7c1      	b.n	8004018 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004094:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004098:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800409a:	4620      	mov	r0, r4
 800409c:	f000 f96f 	bl	800437e <HAL_TIMEx_BreakCallback>
 80040a0:	e7c3      	b.n	800402a <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80040a2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80040a6:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80040a8:	4620      	mov	r0, r4
 80040aa:	f7ff ff4a 	bl	8003f42 <HAL_TIM_TriggerCallback>
 80040ae:	e7c5      	b.n	800403c <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80040b0:	f06f 0220 	mvn.w	r2, #32
 80040b4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80040b6:	4620      	mov	r0, r4
 80040b8:	f000 f960 	bl	800437c <HAL_TIMEx_CommutCallback>
}
 80040bc:	e7c7      	b.n	800404e <HAL_TIM_IRQHandler+0x10a>
	...

080040c0 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040c0:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040c2:	4a25      	ldr	r2, [pc, #148]	; (8004158 <TIM_Base_SetConfig+0x98>)
 80040c4:	4290      	cmp	r0, r2
 80040c6:	d014      	beq.n	80040f2 <TIM_Base_SetConfig+0x32>
 80040c8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80040cc:	d02b      	beq.n	8004126 <TIM_Base_SetConfig+0x66>
 80040ce:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80040d2:	4290      	cmp	r0, r2
 80040d4:	d022      	beq.n	800411c <TIM_Base_SetConfig+0x5c>
 80040d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80040da:	4290      	cmp	r0, r2
 80040dc:	d037      	beq.n	800414e <TIM_Base_SetConfig+0x8e>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040e2:	694a      	ldr	r2, [r1, #20]
 80040e4:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80040e6:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040e8:	688b      	ldr	r3, [r1, #8]
 80040ea:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040ec:	680b      	ldr	r3, [r1, #0]
 80040ee:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040f0:	e02a      	b.n	8004148 <TIM_Base_SetConfig+0x88>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80040f6:	684a      	ldr	r2, [r1, #4]
 80040f8:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 80040fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040fe:	68ca      	ldr	r2, [r1, #12]
 8004100:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004102:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004106:	694a      	ldr	r2, [r1, #20]
 8004108:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800410a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800410c:	688b      	ldr	r3, [r1, #8]
 800410e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004110:	680b      	ldr	r3, [r1, #0]
 8004112:	6283      	str	r3, [r0, #40]	; 0x28
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004114:	690a      	ldr	r2, [r1, #16]
 8004116:	4b10      	ldr	r3, [pc, #64]	; (8004158 <TIM_Base_SetConfig+0x98>)
 8004118:	631a      	str	r2, [r3, #48]	; 0x30
 800411a:	e015      	b.n	8004148 <TIM_Base_SetConfig+0x88>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800411c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004120:	684a      	ldr	r2, [r1, #4]
 8004122:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004124:	e003      	b.n	800412e <TIM_Base_SetConfig+0x6e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004126:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800412a:	684a      	ldr	r2, [r1, #4]
 800412c:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 800412e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004132:	68ca      	ldr	r2, [r1, #12]
 8004134:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004136:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800413a:	694a      	ldr	r2, [r1, #20]
 800413c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800413e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004140:	688b      	ldr	r3, [r1, #8]
 8004142:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004144:	680b      	ldr	r3, [r1, #0]
 8004146:	6283      	str	r3, [r0, #40]	; 0x28
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004148:	2301      	movs	r3, #1
 800414a:	6143      	str	r3, [r0, #20]
}
 800414c:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800414e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004152:	684a      	ldr	r2, [r1, #4]
 8004154:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004156:	e7ea      	b.n	800412e <TIM_Base_SetConfig+0x6e>
 8004158:	40012c00 	.word	0x40012c00

0800415c <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800415c:	b340      	cbz	r0, 80041b0 <HAL_TIM_Base_Init+0x54>
{
 800415e:	b510      	push	{r4, lr}
 8004160:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8004162:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004166:	b1f3      	cbz	r3, 80041a6 <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8004168:	2302      	movs	r3, #2
 800416a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800416e:	4621      	mov	r1, r4
 8004170:	f851 0b04 	ldr.w	r0, [r1], #4
 8004174:	f7ff ffa4 	bl	80040c0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004178:	2301      	movs	r3, #1
 800417a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800417e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8004182:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8004186:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800418a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800418e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004192:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004196:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800419a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 800419e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80041a2:	2000      	movs	r0, #0
}
 80041a4:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80041a6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80041aa:	f7fd fdd3 	bl	8001d54 <HAL_TIM_Base_MspInit>
 80041ae:	e7db      	b.n	8004168 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 80041b0:	2001      	movs	r0, #1
}
 80041b2:	4770      	bx	lr

080041b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80041b4:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80041b6:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041b8:	f424 4c7f 	bic.w	ip, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80041bc:	430a      	orrs	r2, r1
 80041be:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 80041c2:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041c6:	6082      	str	r2, [r0, #8]
}
 80041c8:	bc10      	pop	{r4}
 80041ca:	4770      	bx	lr

080041cc <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80041cc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	f000 809c 	beq.w	800430e <HAL_TIM_ConfigClockSource+0x142>
{
 80041d6:	b570      	push	{r4, r5, r6, lr}
 80041d8:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80041da:	2301      	movs	r3, #1
 80041dc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80041e0:	2302      	movs	r3, #2
 80041e2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80041e6:	6802      	ldr	r2, [r0, #0]
 80041e8:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80041ee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 80041f2:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80041f4:	680b      	ldr	r3, [r1, #0]
 80041f6:	2b60      	cmp	r3, #96	; 0x60
 80041f8:	d054      	beq.n	80042a4 <HAL_TIM_ConfigClockSource+0xd8>
 80041fa:	d836      	bhi.n	800426a <HAL_TIM_ConfigClockSource+0x9e>
 80041fc:	2b40      	cmp	r3, #64	; 0x40
 80041fe:	d06c      	beq.n	80042da <HAL_TIM_ConfigClockSource+0x10e>
 8004200:	d91b      	bls.n	800423a <HAL_TIM_ConfigClockSource+0x6e>
 8004202:	2b50      	cmp	r3, #80	; 0x50
 8004204:	d12a      	bne.n	800425c <HAL_TIM_ConfigClockSource+0x90>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004206:	6803      	ldr	r3, [r0, #0]
 8004208:	6848      	ldr	r0, [r1, #4]
 800420a:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 800420c:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800420e:	6a1a      	ldr	r2, [r3, #32]
 8004210:	f022 0201 	bic.w	r2, r2, #1
 8004214:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004216:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004218:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800421c:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004220:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8004224:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 8004226:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004228:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800422a:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 800422c:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800422e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004232:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8004236:	6093      	str	r3, [r2, #8]
}
 8004238:	e010      	b.n	800425c <HAL_TIM_ConfigClockSource+0x90>
  switch (sClockSourceConfig->ClockSource)
 800423a:	2b20      	cmp	r3, #32
 800423c:	d002      	beq.n	8004244 <HAL_TIM_ConfigClockSource+0x78>
 800423e:	d90a      	bls.n	8004256 <HAL_TIM_ConfigClockSource+0x8a>
 8004240:	2b30      	cmp	r3, #48	; 0x30
 8004242:	d10b      	bne.n	800425c <HAL_TIM_ConfigClockSource+0x90>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004244:	6821      	ldr	r1, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8004246:	688a      	ldr	r2, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004248:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800424c:	4313      	orrs	r3, r2
 800424e:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 8004252:	608b      	str	r3, [r1, #8]
}
 8004254:	e002      	b.n	800425c <HAL_TIM_ConfigClockSource+0x90>
  switch (sClockSourceConfig->ClockSource)
 8004256:	f033 0210 	bics.w	r2, r3, #16
 800425a:	d0f3      	beq.n	8004244 <HAL_TIM_ConfigClockSource+0x78>
  htim->State = HAL_TIM_STATE_READY;
 800425c:	2301      	movs	r3, #1
 800425e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004262:	2000      	movs	r0, #0
 8004264:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8004268:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 800426a:	2b70      	cmp	r3, #112	; 0x70
 800426c:	d00e      	beq.n	800428c <HAL_TIM_ConfigClockSource+0xc0>
 800426e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004272:	d1f3      	bne.n	800425c <HAL_TIM_ConfigClockSource+0x90>
      TIM_ETR_SetConfig(htim->Instance,
 8004274:	68cb      	ldr	r3, [r1, #12]
 8004276:	684a      	ldr	r2, [r1, #4]
 8004278:	6889      	ldr	r1, [r1, #8]
 800427a:	6800      	ldr	r0, [r0, #0]
 800427c:	f7ff ff9a 	bl	80041b4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004280:	6822      	ldr	r2, [r4, #0]
 8004282:	6893      	ldr	r3, [r2, #8]
 8004284:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004288:	6093      	str	r3, [r2, #8]
      break;
 800428a:	e7e7      	b.n	800425c <HAL_TIM_ConfigClockSource+0x90>
      TIM_ETR_SetConfig(htim->Instance,
 800428c:	68cb      	ldr	r3, [r1, #12]
 800428e:	684a      	ldr	r2, [r1, #4]
 8004290:	6889      	ldr	r1, [r1, #8]
 8004292:	6800      	ldr	r0, [r0, #0]
 8004294:	f7ff ff8e 	bl	80041b4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004298:	6822      	ldr	r2, [r4, #0]
 800429a:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800429c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 80042a0:	6093      	str	r3, [r2, #8]
      break;
 80042a2:	e7db      	b.n	800425c <HAL_TIM_ConfigClockSource+0x90>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80042a4:	6803      	ldr	r3, [r0, #0]
 80042a6:	684d      	ldr	r5, [r1, #4]
 80042a8:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042aa:	6a18      	ldr	r0, [r3, #32]
 80042ac:	f020 0010 	bic.w	r0, r0, #16
 80042b0:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042b2:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 80042b4:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80042b6:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80042ba:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80042be:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80042c2:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 80042c6:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 80042c8:	621a      	str	r2, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80042ca:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 80042cc:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80042ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80042d2:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 80042d6:	6093      	str	r3, [r2, #8]
}
 80042d8:	e7c0      	b.n	800425c <HAL_TIM_ConfigClockSource+0x90>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042da:	6803      	ldr	r3, [r0, #0]
 80042dc:	6848      	ldr	r0, [r1, #4]
 80042de:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 80042e0:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042e2:	6a1a      	ldr	r2, [r3, #32]
 80042e4:	f022 0201 	bic.w	r2, r2, #1
 80042e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042ea:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80042ec:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80042f0:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80042f4:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 80042f8:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 80042fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042fc:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80042fe:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8004300:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004302:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004306:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 800430a:	6093      	str	r3, [r2, #8]
}
 800430c:	e7a6      	b.n	800425c <HAL_TIM_ConfigClockSource+0x90>
  __HAL_LOCK(htim);
 800430e:	2002      	movs	r0, #2
}
 8004310:	4770      	bx	lr
	...

08004314 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004314:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004318:	2b01      	cmp	r3, #1
 800431a:	d02b      	beq.n	8004374 <HAL_TIMEx_MasterConfigSynchronization+0x60>
{
 800431c:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 800431e:	2301      	movs	r3, #1
 8004320:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004324:	2302      	movs	r3, #2
 8004326:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800432a:	6804      	ldr	r4, [r0, #0]
 800432c:	6863      	ldr	r3, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800432e:	68a2      	ldr	r2, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004330:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004334:	680d      	ldr	r5, [r1, #0]
 8004336:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004338:	6063      	str	r3, [r4, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800433a:	6803      	ldr	r3, [r0, #0]
 800433c:	4c0e      	ldr	r4, [pc, #56]	; (8004378 <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 800433e:	42a3      	cmp	r3, r4
 8004340:	d00a      	beq.n	8004358 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8004342:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004346:	d007      	beq.n	8004358 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8004348:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 800434c:	42a3      	cmp	r3, r4
 800434e:	d003      	beq.n	8004358 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8004350:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004354:	42a3      	cmp	r3, r4
 8004356:	d104      	bne.n	8004362 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004358:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800435c:	6849      	ldr	r1, [r1, #4]
 800435e:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004360:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004362:	2301      	movs	r3, #1
 8004364:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004368:	2300      	movs	r3, #0
 800436a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 800436e:	4618      	mov	r0, r3
}
 8004370:	bc30      	pop	{r4, r5}
 8004372:	4770      	bx	lr
  __HAL_LOCK(htim);
 8004374:	2002      	movs	r0, #2
}
 8004376:	4770      	bx	lr
 8004378:	40012c00 	.word	0x40012c00

0800437c <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800437c:	4770      	bx	lr

0800437e <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800437e:	4770      	bx	lr

08004380 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004380:	6802      	ldr	r2, [r0, #0]
 8004382:	68d3      	ldr	r3, [r2, #12]
 8004384:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004388:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800438a:	6802      	ldr	r2, [r0, #0]
 800438c:	6953      	ldr	r3, [r2, #20]
 800438e:	f023 0301 	bic.w	r3, r3, #1
 8004392:	6153      	str	r3, [r2, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004394:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8004396:	2b01      	cmp	r3, #1
 8004398:	d005      	beq.n	80043a6 <UART_EndRxTransfer+0x26>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800439a:	2320      	movs	r3, #32
 800439c:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043a0:	2300      	movs	r3, #0
 80043a2:	6303      	str	r3, [r0, #48]	; 0x30
}
 80043a4:	4770      	bx	lr
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043a6:	6802      	ldr	r2, [r0, #0]
 80043a8:	68d3      	ldr	r3, [r2, #12]
 80043aa:	f023 0310 	bic.w	r3, r3, #16
 80043ae:	60d3      	str	r3, [r2, #12]
 80043b0:	e7f3      	b.n	800439a <UART_EndRxTransfer+0x1a>
	...

080043b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043b4:	b510      	push	{r4, lr}
 80043b6:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043b8:	6802      	ldr	r2, [r0, #0]
 80043ba:	6913      	ldr	r3, [r2, #16]
 80043bc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80043c0:	68c1      	ldr	r1, [r0, #12]
 80043c2:	430b      	orrs	r3, r1
 80043c4:	6113      	str	r3, [r2, #16]
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
  MODIFY_REG(huart->Instance->CR1,
 80043c6:	6801      	ldr	r1, [r0, #0]
 80043c8:	68ca      	ldr	r2, [r1, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80043ca:	6883      	ldr	r3, [r0, #8]
 80043cc:	6900      	ldr	r0, [r0, #16]
 80043ce:	4303      	orrs	r3, r0
 80043d0:	6960      	ldr	r0, [r4, #20]
 80043d2:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 80043d4:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 80043d8:	f022 020c 	bic.w	r2, r2, #12
 80043dc:	4313      	orrs	r3, r2
 80043de:	60cb      	str	r3, [r1, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80043e0:	6822      	ldr	r2, [r4, #0]
 80043e2:	6953      	ldr	r3, [r2, #20]
 80043e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043e8:	69a1      	ldr	r1, [r4, #24]
 80043ea:	430b      	orrs	r3, r1
 80043ec:	6153      	str	r3, [r2, #20]


  if(huart->Instance == USART1)
 80043ee:	6822      	ldr	r2, [r4, #0]
 80043f0:	4b11      	ldr	r3, [pc, #68]	; (8004438 <UART_SetConfig+0x84>)
 80043f2:	429a      	cmp	r2, r3
 80043f4:	d01b      	beq.n	800442e <UART_SetConfig+0x7a>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80043f6:	f7ff fcbf 	bl	8003d78 <HAL_RCC_GetPCLK1Freq>
 80043fa:	4603      	mov	r3, r0
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80043fc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004400:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004404:	6862      	ldr	r2, [r4, #4]
 8004406:	0092      	lsls	r2, r2, #2
 8004408:	fbb3 f3f2 	udiv	r3, r3, r2
 800440c:	6820      	ldr	r0, [r4, #0]
 800440e:	490b      	ldr	r1, [pc, #44]	; (800443c <UART_SetConfig+0x88>)
 8004410:	fba1 4203 	umull	r4, r2, r1, r3
 8004414:	0952      	lsrs	r2, r2, #5
 8004416:	2464      	movs	r4, #100	; 0x64
 8004418:	fb04 3312 	mls	r3, r4, r2, r3
 800441c:	011b      	lsls	r3, r3, #4
 800441e:	3332      	adds	r3, #50	; 0x32
 8004420:	fba1 1303 	umull	r1, r3, r1, r3
 8004424:	0112      	lsls	r2, r2, #4
 8004426:	eb02 1353 	add.w	r3, r2, r3, lsr #5
 800442a:	6083      	str	r3, [r0, #8]
#endif /* USART_CR1_OVER8 */
}
 800442c:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 800442e:	f7ff fcb3 	bl	8003d98 <HAL_RCC_GetPCLK2Freq>
 8004432:	4603      	mov	r3, r0
 8004434:	e7e2      	b.n	80043fc <UART_SetConfig+0x48>
 8004436:	bf00      	nop
 8004438:	40013800 	.word	0x40013800
 800443c:	51eb851f 	.word	0x51eb851f

08004440 <UART_WaitOnFlagUntilTimeout>:
{
 8004440:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004444:	4680      	mov	r8, r0
 8004446:	460e      	mov	r6, r1
 8004448:	4615      	mov	r5, r2
 800444a:	4699      	mov	r9, r3
 800444c:	9f08      	ldr	r7, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800444e:	f8d8 2000 	ldr.w	r2, [r8]
 8004452:	6814      	ldr	r4, [r2, #0]
 8004454:	ea36 0304 	bics.w	r3, r6, r4
 8004458:	bf0c      	ite	eq
 800445a:	f04f 0c01 	moveq.w	ip, #1
 800445e:	f04f 0c00 	movne.w	ip, #0
 8004462:	45ac      	cmp	ip, r5
 8004464:	d11f      	bne.n	80044a6 <UART_WaitOnFlagUntilTimeout+0x66>
    if (Timeout != HAL_MAX_DELAY)
 8004466:	f1b7 3fff 	cmp.w	r7, #4294967295
 800446a:	d0f2      	beq.n	8004452 <UART_WaitOnFlagUntilTimeout+0x12>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800446c:	b12f      	cbz	r7, 800447a <UART_WaitOnFlagUntilTimeout+0x3a>
 800446e:	f7fd fdf1 	bl	8002054 <HAL_GetTick>
 8004472:	eba0 0009 	sub.w	r0, r0, r9
 8004476:	42b8      	cmp	r0, r7
 8004478:	d9e9      	bls.n	800444e <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800447a:	f8d8 2000 	ldr.w	r2, [r8]
 800447e:	68d3      	ldr	r3, [r2, #12]
 8004480:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004484:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004486:	f8d8 2000 	ldr.w	r2, [r8]
 800448a:	6953      	ldr	r3, [r2, #20]
 800448c:	f023 0301 	bic.w	r3, r3, #1
 8004490:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8004492:	2320      	movs	r3, #32
 8004494:	f888 303d 	strb.w	r3, [r8, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004498:	f888 303e 	strb.w	r3, [r8, #62]	; 0x3e
        __HAL_UNLOCK(huart);
 800449c:	2300      	movs	r3, #0
 800449e:	f888 303c 	strb.w	r3, [r8, #60]	; 0x3c
        return HAL_TIMEOUT;
 80044a2:	2003      	movs	r0, #3
 80044a4:	e000      	b.n	80044a8 <UART_WaitOnFlagUntilTimeout+0x68>
  return HAL_OK;
 80044a6:	2000      	movs	r0, #0
}
 80044a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080044ac <HAL_UART_Init>:
  if (huart == NULL)
 80044ac:	b358      	cbz	r0, 8004506 <HAL_UART_Init+0x5a>
{
 80044ae:	b510      	push	{r4, lr}
 80044b0:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80044b2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80044b6:	b30b      	cbz	r3, 80044fc <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 80044b8:	2324      	movs	r3, #36	; 0x24
 80044ba:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 80044be:	6822      	ldr	r2, [r4, #0]
 80044c0:	68d3      	ldr	r3, [r2, #12]
 80044c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80044c6:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80044c8:	4620      	mov	r0, r4
 80044ca:	f7ff ff73 	bl	80043b4 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044ce:	6822      	ldr	r2, [r4, #0]
 80044d0:	6913      	ldr	r3, [r2, #16]
 80044d2:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80044d6:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044d8:	6822      	ldr	r2, [r4, #0]
 80044da:	6953      	ldr	r3, [r2, #20]
 80044dc:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80044e0:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 80044e2:	6822      	ldr	r2, [r4, #0]
 80044e4:	68d3      	ldr	r3, [r2, #12]
 80044e6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80044ea:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044ec:	2000      	movs	r0, #0
 80044ee:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80044f0:	2320      	movs	r3, #32
 80044f2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80044f6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 80044fa:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80044fc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8004500:	f7fd fc8c 	bl	8001e1c <HAL_UART_MspInit>
 8004504:	e7d8      	b.n	80044b8 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8004506:	2001      	movs	r0, #1
}
 8004508:	4770      	bx	lr

0800450a <HAL_HalfDuplex_Init>:
  if (huart == NULL)
 800450a:	2800      	cmp	r0, #0
 800450c:	d030      	beq.n	8004570 <HAL_HalfDuplex_Init+0x66>
{
 800450e:	b510      	push	{r4, lr}
 8004510:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8004512:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004516:	b333      	cbz	r3, 8004566 <HAL_HalfDuplex_Init+0x5c>
  huart->gState = HAL_UART_STATE_BUSY;
 8004518:	2324      	movs	r3, #36	; 0x24
 800451a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 800451e:	6822      	ldr	r2, [r4, #0]
 8004520:	68d3      	ldr	r3, [r2, #12]
 8004522:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004526:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8004528:	4620      	mov	r0, r4
 800452a:	f7ff ff43 	bl	80043b4 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800452e:	6822      	ldr	r2, [r4, #0]
 8004530:	6913      	ldr	r3, [r2, #16]
 8004532:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8004536:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8004538:	6822      	ldr	r2, [r4, #0]
 800453a:	6953      	ldr	r3, [r2, #20]
 800453c:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004540:	6153      	str	r3, [r2, #20]
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8004542:	6822      	ldr	r2, [r4, #0]
 8004544:	6953      	ldr	r3, [r2, #20]
 8004546:	f043 0308 	orr.w	r3, r3, #8
 800454a:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 800454c:	6822      	ldr	r2, [r4, #0]
 800454e:	68d3      	ldr	r3, [r2, #12]
 8004550:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004554:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004556:	2000      	movs	r0, #0
 8004558:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800455a:	2320      	movs	r3, #32
 800455c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004560:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8004564:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8004566:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 800456a:	f7fd fc57 	bl	8001e1c <HAL_UART_MspInit>
 800456e:	e7d3      	b.n	8004518 <HAL_HalfDuplex_Init+0xe>
    return HAL_ERROR;
 8004570:	2001      	movs	r0, #1
}
 8004572:	4770      	bx	lr

08004574 <HAL_UART_Transmit>:
{
 8004574:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004578:	b082      	sub	sp, #8
 800457a:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800457c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004580:	b2db      	uxtb	r3, r3
 8004582:	2b20      	cmp	r3, #32
 8004584:	d15a      	bne.n	800463c <HAL_UART_Transmit+0xc8>
 8004586:	4604      	mov	r4, r0
 8004588:	460d      	mov	r5, r1
 800458a:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 800458c:	2900      	cmp	r1, #0
 800458e:	d059      	beq.n	8004644 <HAL_UART_Transmit+0xd0>
 8004590:	2a00      	cmp	r2, #0
 8004592:	d059      	beq.n	8004648 <HAL_UART_Transmit+0xd4>
    __HAL_LOCK(huart);
 8004594:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004598:	2b01      	cmp	r3, #1
 800459a:	d057      	beq.n	800464c <HAL_UART_Transmit+0xd8>
 800459c:	2301      	movs	r3, #1
 800459e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045a2:	2300      	movs	r3, #0
 80045a4:	6403      	str	r3, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80045a6:	2321      	movs	r3, #33	; 0x21
 80045a8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    tickstart = HAL_GetTick();
 80045ac:	f7fd fd52 	bl	8002054 <HAL_GetTick>
 80045b0:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 80045b2:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 80045b6:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045ba:	68a3      	ldr	r3, [r4, #8]
 80045bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045c0:	d00c      	beq.n	80045dc <HAL_UART_Transmit+0x68>
      pdata16bits = NULL;
 80045c2:	f04f 0a00 	mov.w	sl, #0
    __HAL_UNLOCK(huart);
 80045c6:	2300      	movs	r3, #0
 80045c8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 80045cc:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	b343      	cbz	r3, 8004624 <HAL_UART_Transmit+0xb0>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80045d2:	f04f 0900 	mov.w	r9, #0
 80045d6:	f04f 0880 	mov.w	r8, #128	; 0x80
 80045da:	e014      	b.n	8004606 <HAL_UART_Transmit+0x92>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045dc:	6923      	ldr	r3, [r4, #16]
 80045de:	b913      	cbnz	r3, 80045e6 <HAL_UART_Transmit+0x72>
      pdata16bits = (uint16_t *) pData;
 80045e0:	46aa      	mov	sl, r5
      pdata8bits  = NULL;
 80045e2:	2500      	movs	r5, #0
 80045e4:	e7ef      	b.n	80045c6 <HAL_UART_Transmit+0x52>
      pdata16bits = NULL;
 80045e6:	f04f 0a00 	mov.w	sl, #0
 80045ea:	e7ec      	b.n	80045c6 <HAL_UART_Transmit+0x52>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80045ec:	6822      	ldr	r2, [r4, #0]
 80045ee:	f83a 3b02 	ldrh.w	r3, [sl], #2
 80045f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045f6:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 80045f8:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80045fa:	3a01      	subs	r2, #1
 80045fc:	b292      	uxth	r2, r2
 80045fe:	84e2      	strh	r2, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004600:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8004602:	b29b      	uxth	r3, r3
 8004604:	b173      	cbz	r3, 8004624 <HAL_UART_Transmit+0xb0>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004606:	9600      	str	r6, [sp, #0]
 8004608:	463b      	mov	r3, r7
 800460a:	464a      	mov	r2, r9
 800460c:	4641      	mov	r1, r8
 800460e:	4620      	mov	r0, r4
 8004610:	f7ff ff16 	bl	8004440 <UART_WaitOnFlagUntilTimeout>
 8004614:	b9e0      	cbnz	r0, 8004650 <HAL_UART_Transmit+0xdc>
      if (pdata8bits == NULL)
 8004616:	2d00      	cmp	r5, #0
 8004618:	d0e8      	beq.n	80045ec <HAL_UART_Transmit+0x78>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800461a:	6823      	ldr	r3, [r4, #0]
 800461c:	f815 2b01 	ldrb.w	r2, [r5], #1
 8004620:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004622:	e7e9      	b.n	80045f8 <HAL_UART_Transmit+0x84>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004624:	9600      	str	r6, [sp, #0]
 8004626:	463b      	mov	r3, r7
 8004628:	2200      	movs	r2, #0
 800462a:	2140      	movs	r1, #64	; 0x40
 800462c:	4620      	mov	r0, r4
 800462e:	f7ff ff07 	bl	8004440 <UART_WaitOnFlagUntilTimeout>
 8004632:	b978      	cbnz	r0, 8004654 <HAL_UART_Transmit+0xe0>
    huart->gState = HAL_UART_STATE_READY;
 8004634:	2320      	movs	r3, #32
 8004636:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_OK;
 800463a:	e000      	b.n	800463e <HAL_UART_Transmit+0xca>
    return HAL_BUSY;
 800463c:	2002      	movs	r0, #2
}
 800463e:	b002      	add	sp, #8
 8004640:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      return  HAL_ERROR;
 8004644:	2001      	movs	r0, #1
 8004646:	e7fa      	b.n	800463e <HAL_UART_Transmit+0xca>
 8004648:	2001      	movs	r0, #1
 800464a:	e7f8      	b.n	800463e <HAL_UART_Transmit+0xca>
    __HAL_LOCK(huart);
 800464c:	2002      	movs	r0, #2
 800464e:	e7f6      	b.n	800463e <HAL_UART_Transmit+0xca>
        return HAL_TIMEOUT;
 8004650:	2003      	movs	r0, #3
 8004652:	e7f4      	b.n	800463e <HAL_UART_Transmit+0xca>
      return HAL_TIMEOUT;
 8004654:	2003      	movs	r0, #3
 8004656:	e7f2      	b.n	800463e <HAL_UART_Transmit+0xca>

08004658 <HAL_UART_Receive>:
{
 8004658:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800465c:	b082      	sub	sp, #8
 800465e:	461e      	mov	r6, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 8004660:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8004664:	b2db      	uxtb	r3, r3
 8004666:	2b20      	cmp	r3, #32
 8004668:	d163      	bne.n	8004732 <HAL_UART_Receive+0xda>
 800466a:	4604      	mov	r4, r0
 800466c:	460d      	mov	r5, r1
 800466e:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8004670:	2900      	cmp	r1, #0
 8004672:	d062      	beq.n	800473a <HAL_UART_Receive+0xe2>
 8004674:	2a00      	cmp	r2, #0
 8004676:	d062      	beq.n	800473e <HAL_UART_Receive+0xe6>
    __HAL_LOCK(huart);
 8004678:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800467c:	2b01      	cmp	r3, #1
 800467e:	d060      	beq.n	8004742 <HAL_UART_Receive+0xea>
 8004680:	2301      	movs	r3, #1
 8004682:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004686:	2300      	movs	r3, #0
 8004688:	6403      	str	r3, [r0, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800468a:	2222      	movs	r2, #34	; 0x22
 800468c:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004690:	6303      	str	r3, [r0, #48]	; 0x30
    tickstart = HAL_GetTick();
 8004692:	f7fd fcdf 	bl	8002054 <HAL_GetTick>
 8004696:	4607      	mov	r7, r0
    huart->RxXferSize = Size;
 8004698:	f8a4 802c 	strh.w	r8, [r4, #44]	; 0x2c
    huart->RxXferCount = Size;
 800469c:	f8a4 802e 	strh.w	r8, [r4, #46]	; 0x2e
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046a0:	68a3      	ldr	r3, [r4, #8]
 80046a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046a6:	d00d      	beq.n	80046c4 <HAL_UART_Receive+0x6c>
      pdata16bits = NULL;
 80046a8:	f04f 0a00 	mov.w	sl, #0
    __HAL_UNLOCK(huart);
 80046ac:	2300      	movs	r3, #0
 80046ae:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    while (huart->RxXferCount > 0U)
 80046b2:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80046b4:	b29b      	uxth	r3, r3
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d036      	beq.n	8004728 <HAL_UART_Receive+0xd0>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80046ba:	f04f 0900 	mov.w	r9, #0
 80046be:	f04f 0820 	mov.w	r8, #32
 80046c2:	e01a      	b.n	80046fa <HAL_UART_Receive+0xa2>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046c4:	6923      	ldr	r3, [r4, #16]
 80046c6:	b913      	cbnz	r3, 80046ce <HAL_UART_Receive+0x76>
      pdata16bits = (uint16_t *) pData;
 80046c8:	46aa      	mov	sl, r5
      pdata8bits  = NULL;
 80046ca:	2500      	movs	r5, #0
 80046cc:	e7ee      	b.n	80046ac <HAL_UART_Receive+0x54>
      pdata16bits = NULL;
 80046ce:	f04f 0a00 	mov.w	sl, #0
 80046d2:	e7eb      	b.n	80046ac <HAL_UART_Receive+0x54>
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80046d4:	6823      	ldr	r3, [r4, #0]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046dc:	f82a 3b02 	strh.w	r3, [sl], #2
        pdata16bits++;
 80046e0:	e004      	b.n	80046ec <HAL_UART_Receive+0x94>
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80046e2:	6823      	ldr	r3, [r4, #0]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	b2db      	uxtb	r3, r3
 80046e8:	f805 3b01 	strb.w	r3, [r5], #1
      huart->RxXferCount--;
 80046ec:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 80046ee:	3a01      	subs	r2, #1
 80046f0:	b292      	uxth	r2, r2
 80046f2:	85e2      	strh	r2, [r4, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80046f4:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80046f6:	b29b      	uxth	r3, r3
 80046f8:	b1b3      	cbz	r3, 8004728 <HAL_UART_Receive+0xd0>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80046fa:	9600      	str	r6, [sp, #0]
 80046fc:	463b      	mov	r3, r7
 80046fe:	464a      	mov	r2, r9
 8004700:	4641      	mov	r1, r8
 8004702:	4620      	mov	r0, r4
 8004704:	f7ff fe9c 	bl	8004440 <UART_WaitOnFlagUntilTimeout>
 8004708:	b9e8      	cbnz	r0, 8004746 <HAL_UART_Receive+0xee>
      if (pdata8bits == NULL)
 800470a:	2d00      	cmp	r5, #0
 800470c:	d0e2      	beq.n	80046d4 <HAL_UART_Receive+0x7c>
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800470e:	68a3      	ldr	r3, [r4, #8]
 8004710:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004714:	d0e5      	beq.n	80046e2 <HAL_UART_Receive+0x8a>
 8004716:	b913      	cbnz	r3, 800471e <HAL_UART_Receive+0xc6>
 8004718:	6923      	ldr	r3, [r4, #16]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d0e1      	beq.n	80046e2 <HAL_UART_Receive+0x8a>
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800471e:	6823      	ldr	r3, [r4, #0]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004726:	e7df      	b.n	80046e8 <HAL_UART_Receive+0x90>
    huart->RxState = HAL_UART_STATE_READY;
 8004728:	2320      	movs	r3, #32
 800472a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 800472e:	2000      	movs	r0, #0
 8004730:	e000      	b.n	8004734 <HAL_UART_Receive+0xdc>
    return HAL_BUSY;
 8004732:	2002      	movs	r0, #2
}
 8004734:	b002      	add	sp, #8
 8004736:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      return  HAL_ERROR;
 800473a:	2001      	movs	r0, #1
 800473c:	e7fa      	b.n	8004734 <HAL_UART_Receive+0xdc>
 800473e:	2001      	movs	r0, #1
 8004740:	e7f8      	b.n	8004734 <HAL_UART_Receive+0xdc>
    __HAL_LOCK(huart);
 8004742:	2002      	movs	r0, #2
 8004744:	e7f6      	b.n	8004734 <HAL_UART_Receive+0xdc>
        return HAL_TIMEOUT;
 8004746:	2003      	movs	r0, #3
 8004748:	e7f4      	b.n	8004734 <HAL_UART_Receive+0xdc>

0800474a <HAL_UART_Transmit_IT>:
  if (huart->gState == HAL_UART_STATE_READY)
 800474a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800474e:	b2db      	uxtb	r3, r3
 8004750:	2b20      	cmp	r3, #32
 8004752:	d116      	bne.n	8004782 <HAL_UART_Transmit_IT+0x38>
    if ((pData == NULL) || (Size == 0U))
 8004754:	b1b9      	cbz	r1, 8004786 <HAL_UART_Transmit_IT+0x3c>
 8004756:	b1c2      	cbz	r2, 800478a <HAL_UART_Transmit_IT+0x40>
    __HAL_LOCK(huart);
 8004758:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800475c:	2b01      	cmp	r3, #1
 800475e:	d016      	beq.n	800478e <HAL_UART_Transmit_IT+0x44>
    huart->pTxBuffPtr = pData;
 8004760:	6201      	str	r1, [r0, #32]
    huart->TxXferSize = Size;
 8004762:	8482      	strh	r2, [r0, #36]	; 0x24
    huart->TxXferCount = Size;
 8004764:	84c2      	strh	r2, [r0, #38]	; 0x26
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004766:	2300      	movs	r3, #0
 8004768:	6403      	str	r3, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800476a:	2221      	movs	r2, #33	; 0x21
 800476c:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    __HAL_UNLOCK(huart);
 8004770:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8004774:	6801      	ldr	r1, [r0, #0]
 8004776:	68ca      	ldr	r2, [r1, #12]
 8004778:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800477c:	60ca      	str	r2, [r1, #12]
    return HAL_OK;
 800477e:	4618      	mov	r0, r3
 8004780:	4770      	bx	lr
    return HAL_BUSY;
 8004782:	2002      	movs	r0, #2
 8004784:	4770      	bx	lr
      return HAL_ERROR;
 8004786:	2001      	movs	r0, #1
 8004788:	4770      	bx	lr
 800478a:	2001      	movs	r0, #1
 800478c:	4770      	bx	lr
    __HAL_LOCK(huart);
 800478e:	2002      	movs	r0, #2
}
 8004790:	4770      	bx	lr

08004792 <HAL_UART_ErrorCallback>:
}
 8004792:	4770      	bx	lr

08004794 <UART_DMAAbortOnError>:
{
 8004794:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004796:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8004798:	2300      	movs	r3, #0
 800479a:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800479c:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 800479e:	f7ff fff8 	bl	8004792 <HAL_UART_ErrorCallback>
}
 80047a2:	bd08      	pop	{r3, pc}

080047a4 <HAL_UARTEx_RxEventCallback>:
}
 80047a4:	4770      	bx	lr

080047a6 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80047a6:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	2b22      	cmp	r3, #34	; 0x22
 80047ae:	d11e      	bne.n	80047ee <UART_Receive_IT+0x48>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047b0:	6883      	ldr	r3, [r0, #8]
 80047b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047b6:	d006      	beq.n	80047c6 <UART_Receive_IT+0x20>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80047b8:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80047ba:	b183      	cbz	r3, 80047de <UART_Receive_IT+0x38>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80047bc:	6803      	ldr	r3, [r0, #0]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047c4:	e01b      	b.n	80047fe <UART_Receive_IT+0x58>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047c6:	6903      	ldr	r3, [r0, #16]
 80047c8:	b9ab      	cbnz	r3, 80047f6 <UART_Receive_IT+0x50>
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80047ca:	6a82      	ldr	r2, [r0, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80047cc:	6803      	ldr	r3, [r0, #0]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047d4:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 80047d6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80047d8:	3302      	adds	r3, #2
 80047da:	6283      	str	r3, [r0, #40]	; 0x28
 80047dc:	e013      	b.n	8004806 <UART_Receive_IT+0x60>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80047de:	6903      	ldr	r3, [r0, #16]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d1eb      	bne.n	80047bc <UART_Receive_IT+0x16>
 80047e4:	e008      	b.n	80047f8 <UART_Receive_IT+0x52>
       HAL_UART_RxCpltCallback(huart);
 80047e6:	f7fc fbdb 	bl	8000fa0 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 80047ea:	2000      	movs	r0, #0
 80047ec:	e03f      	b.n	800486e <UART_Receive_IT+0xc8>
    return HAL_BUSY;
 80047ee:	2002      	movs	r0, #2
 80047f0:	4770      	bx	lr
    return HAL_OK;
 80047f2:	2000      	movs	r0, #0
}
 80047f4:	4770      	bx	lr
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80047f6:	6a82      	ldr	r2, [r0, #40]	; 0x28
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80047f8:	6803      	ldr	r3, [r0, #0]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 8004800:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004802:	3301      	adds	r3, #1
 8004804:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8004806:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8004808:	3b01      	subs	r3, #1
 800480a:	b29b      	uxth	r3, r3
 800480c:	85c3      	strh	r3, [r0, #46]	; 0x2e
 800480e:	2b00      	cmp	r3, #0
 8004810:	d1ef      	bne.n	80047f2 <UART_Receive_IT+0x4c>
{
 8004812:	b500      	push	{lr}
 8004814:	b083      	sub	sp, #12
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004816:	6802      	ldr	r2, [r0, #0]
 8004818:	68d3      	ldr	r3, [r2, #12]
 800481a:	f023 0320 	bic.w	r3, r3, #32
 800481e:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004820:	6802      	ldr	r2, [r0, #0]
 8004822:	68d3      	ldr	r3, [r2, #12]
 8004824:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004828:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800482a:	6802      	ldr	r2, [r0, #0]
 800482c:	6953      	ldr	r3, [r2, #20]
 800482e:	f023 0301 	bic.w	r3, r3, #1
 8004832:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8004834:	2320      	movs	r3, #32
 8004836:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800483a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800483c:	2b01      	cmp	r3, #1
 800483e:	d1d2      	bne.n	80047e6 <UART_Receive_IT+0x40>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004840:	2300      	movs	r3, #0
 8004842:	6303      	str	r3, [r0, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004844:	6802      	ldr	r2, [r0, #0]
 8004846:	68d3      	ldr	r3, [r2, #12]
 8004848:	f023 0310 	bic.w	r3, r3, #16
 800484c:	60d3      	str	r3, [r2, #12]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800484e:	6803      	ldr	r3, [r0, #0]
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	f012 0f10 	tst.w	r2, #16
 8004856:	d006      	beq.n	8004866 <UART_Receive_IT+0xc0>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004858:	2200      	movs	r2, #0
 800485a:	9201      	str	r2, [sp, #4]
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	9201      	str	r2, [sp, #4]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	9301      	str	r3, [sp, #4]
 8004864:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004866:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8004868:	f7ff ff9c 	bl	80047a4 <HAL_UARTEx_RxEventCallback>
      return HAL_OK;
 800486c:	2000      	movs	r0, #0
}
 800486e:	b003      	add	sp, #12
 8004870:	f85d fb04 	ldr.w	pc, [sp], #4

08004874 <HAL_UART_IRQHandler>:
{
 8004874:	b510      	push	{r4, lr}
 8004876:	b082      	sub	sp, #8
 8004878:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800487a:	6802      	ldr	r2, [r0, #0]
 800487c:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800487e:	68d1      	ldr	r1, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004880:	6950      	ldr	r0, [r2, #20]
  if (errorflags == RESET)
 8004882:	f013 0f0f 	tst.w	r3, #15
 8004886:	d109      	bne.n	800489c <HAL_UART_IRQHandler+0x28>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004888:	f013 0f20 	tst.w	r3, #32
 800488c:	d00d      	beq.n	80048aa <HAL_UART_IRQHandler+0x36>
 800488e:	f011 0f20 	tst.w	r1, #32
 8004892:	d00a      	beq.n	80048aa <HAL_UART_IRQHandler+0x36>
      UART_Receive_IT(huart);
 8004894:	4620      	mov	r0, r4
 8004896:	f7ff ff86 	bl	80047a6 <UART_Receive_IT>
      return;
 800489a:	e017      	b.n	80048cc <HAL_UART_IRQHandler+0x58>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800489c:	f000 0001 	and.w	r0, r0, #1
 80048a0:	f401 7c90 	and.w	ip, r1, #288	; 0x120
 80048a4:	ea5c 0c00 	orrs.w	ip, ip, r0
 80048a8:	d112      	bne.n	80048d0 <HAL_UART_IRQHandler+0x5c>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048aa:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80048ac:	2801      	cmp	r0, #1
 80048ae:	d077      	beq.n	80049a0 <HAL_UART_IRQHandler+0x12c>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80048b0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80048b4:	d003      	beq.n	80048be <HAL_UART_IRQHandler+0x4a>
 80048b6:	f011 0f80 	tst.w	r1, #128	; 0x80
 80048ba:	f040 80d9 	bne.w	8004a70 <HAL_UART_IRQHandler+0x1fc>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80048be:	f013 0f40 	tst.w	r3, #64	; 0x40
 80048c2:	d003      	beq.n	80048cc <HAL_UART_IRQHandler+0x58>
 80048c4:	f011 0f40 	tst.w	r1, #64	; 0x40
 80048c8:	f040 80ff 	bne.w	8004aca <HAL_UART_IRQHandler+0x256>
}
 80048cc:	b002      	add	sp, #8
 80048ce:	bd10      	pop	{r4, pc}
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80048d0:	f013 0f01 	tst.w	r3, #1
 80048d4:	d006      	beq.n	80048e4 <HAL_UART_IRQHandler+0x70>
 80048d6:	f411 7f80 	tst.w	r1, #256	; 0x100
 80048da:	d003      	beq.n	80048e4 <HAL_UART_IRQHandler+0x70>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80048dc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80048de:	f042 0201 	orr.w	r2, r2, #1
 80048e2:	6422      	str	r2, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80048e4:	f013 0f04 	tst.w	r3, #4
 80048e8:	d02f      	beq.n	800494a <HAL_UART_IRQHandler+0xd6>
 80048ea:	b158      	cbz	r0, 8004904 <HAL_UART_IRQHandler+0x90>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80048ec:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80048ee:	f042 0202 	orr.w	r2, r2, #2
 80048f2:	6422      	str	r2, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80048f4:	f013 0f02 	tst.w	r3, #2
 80048f8:	f000 80f2 	beq.w	8004ae0 <HAL_UART_IRQHandler+0x26c>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80048fc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80048fe:	f042 0204 	orr.w	r2, r2, #4
 8004902:	6422      	str	r2, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004904:	f013 0f08 	tst.w	r3, #8
 8004908:	d007      	beq.n	800491a <HAL_UART_IRQHandler+0xa6>
 800490a:	f001 0220 	and.w	r2, r1, #32
 800490e:	4302      	orrs	r2, r0
 8004910:	d003      	beq.n	800491a <HAL_UART_IRQHandler+0xa6>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004912:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004914:	f042 0208 	orr.w	r2, r2, #8
 8004918:	6422      	str	r2, [r4, #64]	; 0x40
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800491a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800491c:	2a00      	cmp	r2, #0
 800491e:	d0d5      	beq.n	80048cc <HAL_UART_IRQHandler+0x58>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004920:	f013 0f20 	tst.w	r3, #32
 8004924:	d002      	beq.n	800492c <HAL_UART_IRQHandler+0xb8>
 8004926:	f011 0f20 	tst.w	r1, #32
 800492a:	d114      	bne.n	8004956 <HAL_UART_IRQHandler+0xe2>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800492c:	6823      	ldr	r3, [r4, #0]
 800492e:	695a      	ldr	r2, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004930:	6c23      	ldr	r3, [r4, #64]	; 0x40
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004932:	f002 0240 	and.w	r2, r2, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004936:	f003 0308 	and.w	r3, r3, #8
 800493a:	4313      	orrs	r3, r2
 800493c:	d10f      	bne.n	800495e <HAL_UART_IRQHandler+0xea>
        HAL_UART_ErrorCallback(huart);
 800493e:	4620      	mov	r0, r4
 8004940:	f7ff ff27 	bl	8004792 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004944:	2300      	movs	r3, #0
 8004946:	6423      	str	r3, [r4, #64]	; 0x40
 8004948:	e7c0      	b.n	80048cc <HAL_UART_IRQHandler+0x58>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800494a:	f013 0f02 	tst.w	r3, #2
 800494e:	d0d9      	beq.n	8004904 <HAL_UART_IRQHandler+0x90>
 8004950:	2800      	cmp	r0, #0
 8004952:	d0d7      	beq.n	8004904 <HAL_UART_IRQHandler+0x90>
 8004954:	e7d2      	b.n	80048fc <HAL_UART_IRQHandler+0x88>
        UART_Receive_IT(huart);
 8004956:	4620      	mov	r0, r4
 8004958:	f7ff ff25 	bl	80047a6 <UART_Receive_IT>
 800495c:	e7e6      	b.n	800492c <HAL_UART_IRQHandler+0xb8>
        UART_EndRxTransfer(huart);
 800495e:	4620      	mov	r0, r4
 8004960:	f7ff fd0e 	bl	8004380 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004964:	6823      	ldr	r3, [r4, #0]
 8004966:	695a      	ldr	r2, [r3, #20]
 8004968:	f012 0f40 	tst.w	r2, #64	; 0x40
 800496c:	d014      	beq.n	8004998 <HAL_UART_IRQHandler+0x124>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800496e:	695a      	ldr	r2, [r3, #20]
 8004970:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004974:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8004976:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004978:	b153      	cbz	r3, 8004990 <HAL_UART_IRQHandler+0x11c>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800497a:	4a5c      	ldr	r2, [pc, #368]	; (8004aec <HAL_UART_IRQHandler+0x278>)
 800497c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800497e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004980:	f7fd fbfa 	bl	8002178 <HAL_DMA_Abort_IT>
 8004984:	2800      	cmp	r0, #0
 8004986:	d0a1      	beq.n	80048cc <HAL_UART_IRQHandler+0x58>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004988:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800498a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800498c:	4798      	blx	r3
 800498e:	e79d      	b.n	80048cc <HAL_UART_IRQHandler+0x58>
            HAL_UART_ErrorCallback(huart);
 8004990:	4620      	mov	r0, r4
 8004992:	f7ff fefe 	bl	8004792 <HAL_UART_ErrorCallback>
 8004996:	e799      	b.n	80048cc <HAL_UART_IRQHandler+0x58>
          HAL_UART_ErrorCallback(huart);
 8004998:	4620      	mov	r0, r4
 800499a:	f7ff fefa 	bl	8004792 <HAL_UART_ErrorCallback>
 800499e:	e795      	b.n	80048cc <HAL_UART_IRQHandler+0x58>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80049a0:	f013 0f10 	tst.w	r3, #16
 80049a4:	d084      	beq.n	80048b0 <HAL_UART_IRQHandler+0x3c>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80049a6:	f011 0f10 	tst.w	r1, #16
 80049aa:	d081      	beq.n	80048b0 <HAL_UART_IRQHandler+0x3c>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80049ac:	2300      	movs	r3, #0
 80049ae:	9301      	str	r3, [sp, #4]
 80049b0:	6813      	ldr	r3, [r2, #0]
 80049b2:	9301      	str	r3, [sp, #4]
 80049b4:	6853      	ldr	r3, [r2, #4]
 80049b6:	9301      	str	r3, [sp, #4]
 80049b8:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049ba:	6953      	ldr	r3, [r2, #20]
 80049bc:	f013 0f40 	tst.w	r3, #64	; 0x40
 80049c0:	d032      	beq.n	8004a28 <HAL_UART_IRQHandler+0x1b4>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80049c2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80049c4:	680b      	ldr	r3, [r1, #0]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	b29b      	uxth	r3, r3
      if (  (nb_remaining_rx_data > 0U)
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	f43f af7e 	beq.w	80048cc <HAL_UART_IRQHandler+0x58>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80049d0:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
 80049d2:	4298      	cmp	r0, r3
 80049d4:	f67f af7a 	bls.w	80048cc <HAL_UART_IRQHandler+0x58>
        huart->RxXferCount = nb_remaining_rx_data;
 80049d8:	85e3      	strh	r3, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80049da:	698b      	ldr	r3, [r1, #24]
 80049dc:	2b20      	cmp	r3, #32
 80049de:	d107      	bne.n	80049f0 <HAL_UART_IRQHandler+0x17c>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80049e0:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80049e2:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80049e4:	1ac9      	subs	r1, r1, r3
 80049e6:	b289      	uxth	r1, r1
 80049e8:	4620      	mov	r0, r4
 80049ea:	f7ff fedb 	bl	80047a4 <HAL_UARTEx_RxEventCallback>
 80049ee:	e76d      	b.n	80048cc <HAL_UART_IRQHandler+0x58>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80049f0:	68d3      	ldr	r3, [r2, #12]
 80049f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049f6:	60d3      	str	r3, [r2, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049f8:	6822      	ldr	r2, [r4, #0]
 80049fa:	6953      	ldr	r3, [r2, #20]
 80049fc:	f023 0301 	bic.w	r3, r3, #1
 8004a00:	6153      	str	r3, [r2, #20]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a02:	6822      	ldr	r2, [r4, #0]
 8004a04:	6953      	ldr	r3, [r2, #20]
 8004a06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a0a:	6153      	str	r3, [r2, #20]
          huart->RxState = HAL_UART_STATE_READY;
 8004a0c:	2320      	movs	r3, #32
 8004a0e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a12:	2300      	movs	r3, #0
 8004a14:	6323      	str	r3, [r4, #48]	; 0x30
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a16:	6822      	ldr	r2, [r4, #0]
 8004a18:	68d3      	ldr	r3, [r2, #12]
 8004a1a:	f023 0310 	bic.w	r3, r3, #16
 8004a1e:	60d3      	str	r3, [r2, #12]
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004a20:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004a22:	f7fd fb87 	bl	8002134 <HAL_DMA_Abort>
 8004a26:	e7db      	b.n	80049e0 <HAL_UART_IRQHandler+0x16c>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004a28:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8004a2a:	b299      	uxth	r1, r3
      if (  (huart->RxXferCount > 0U)
 8004a2c:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	f43f af4b 	beq.w	80048cc <HAL_UART_IRQHandler+0x58>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004a36:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 8004a38:	1a59      	subs	r1, r3, r1
 8004a3a:	b289      	uxth	r1, r1
          &&(nb_rx_data > 0U) )
 8004a3c:	2900      	cmp	r1, #0
 8004a3e:	f43f af45 	beq.w	80048cc <HAL_UART_IRQHandler+0x58>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a42:	68d3      	ldr	r3, [r2, #12]
 8004a44:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a48:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a4a:	6822      	ldr	r2, [r4, #0]
 8004a4c:	6953      	ldr	r3, [r2, #20]
 8004a4e:	f023 0301 	bic.w	r3, r3, #1
 8004a52:	6153      	str	r3, [r2, #20]
        huart->RxState = HAL_UART_STATE_READY;
 8004a54:	2320      	movs	r3, #32
 8004a56:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	6323      	str	r3, [r4, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a5e:	6822      	ldr	r2, [r4, #0]
 8004a60:	68d3      	ldr	r3, [r2, #12]
 8004a62:	f023 0310 	bic.w	r3, r3, #16
 8004a66:	60d3      	str	r3, [r2, #12]
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004a68:	4620      	mov	r0, r4
 8004a6a:	f7ff fe9b 	bl	80047a4 <HAL_UARTEx_RxEventCallback>
 8004a6e:	e72d      	b.n	80048cc <HAL_UART_IRQHandler+0x58>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004a70:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	2b21      	cmp	r3, #33	; 0x21
 8004a78:	f47f af28 	bne.w	80048cc <HAL_UART_IRQHandler+0x58>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a7c:	68a3      	ldr	r3, [r4, #8]
 8004a7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a82:	d016      	beq.n	8004ab2 <HAL_UART_IRQHandler+0x23e>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004a84:	6a23      	ldr	r3, [r4, #32]
 8004a86:	1c59      	adds	r1, r3, #1
 8004a88:	6221      	str	r1, [r4, #32]
 8004a8a:	781b      	ldrb	r3, [r3, #0]
 8004a8c:	6053      	str	r3, [r2, #4]
    if (--huart->TxXferCount == 0U)
 8004a8e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8004a90:	3b01      	subs	r3, #1
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	84e3      	strh	r3, [r4, #38]	; 0x26
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	f47f af18 	bne.w	80048cc <HAL_UART_IRQHandler+0x58>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004a9c:	6822      	ldr	r2, [r4, #0]
 8004a9e:	68d3      	ldr	r3, [r2, #12]
 8004aa0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004aa4:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004aa6:	6822      	ldr	r2, [r4, #0]
 8004aa8:	68d3      	ldr	r3, [r2, #12]
 8004aaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004aae:	60d3      	str	r3, [r2, #12]
 8004ab0:	e70c      	b.n	80048cc <HAL_UART_IRQHandler+0x58>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ab2:	6923      	ldr	r3, [r4, #16]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d1e5      	bne.n	8004a84 <HAL_UART_IRQHandler+0x210>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004ab8:	6a23      	ldr	r3, [r4, #32]
 8004aba:	881b      	ldrh	r3, [r3, #0]
 8004abc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ac0:	6053      	str	r3, [r2, #4]
      huart->pTxBuffPtr += 2U;
 8004ac2:	6a23      	ldr	r3, [r4, #32]
 8004ac4:	3302      	adds	r3, #2
 8004ac6:	6223      	str	r3, [r4, #32]
 8004ac8:	e7e1      	b.n	8004a8e <HAL_UART_IRQHandler+0x21a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004aca:	68d3      	ldr	r3, [r2, #12]
 8004acc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ad0:	60d3      	str	r3, [r2, #12]
  huart->gState = HAL_UART_STATE_READY;
 8004ad2:	2320      	movs	r3, #32
 8004ad4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  HAL_UART_TxCpltCallback(huart);
 8004ad8:	4620      	mov	r0, r4
 8004ada:	f7fc fa91 	bl	8001000 <HAL_UART_TxCpltCallback>
  return HAL_OK;
 8004ade:	e6f5      	b.n	80048cc <HAL_UART_IRQHandler+0x58>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004ae0:	f013 0f08 	tst.w	r3, #8
 8004ae4:	f47f af15 	bne.w	8004912 <HAL_UART_IRQHandler+0x9e>
 8004ae8:	e717      	b.n	800491a <HAL_UART_IRQHandler+0xa6>
 8004aea:	bf00      	nop
 8004aec:	08004795 	.word	0x08004795

08004af0 <UART_Start_Receive_IT>:
{
 8004af0:	4603      	mov	r3, r0
  huart->pRxBuffPtr = pData;
 8004af2:	6281      	str	r1, [r0, #40]	; 0x28
  huart->RxXferSize = Size;
 8004af4:	8582      	strh	r2, [r0, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004af6:	85c2      	strh	r2, [r0, #46]	; 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004af8:	2000      	movs	r0, #0
 8004afa:	6418      	str	r0, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004afc:	2222      	movs	r2, #34	; 0x22
 8004afe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  __HAL_UNLOCK(huart);
 8004b02:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004b06:	6819      	ldr	r1, [r3, #0]
 8004b08:	68ca      	ldr	r2, [r1, #12]
 8004b0a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b0e:	60ca      	str	r2, [r1, #12]
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004b10:	6819      	ldr	r1, [r3, #0]
 8004b12:	694a      	ldr	r2, [r1, #20]
 8004b14:	f042 0201 	orr.w	r2, r2, #1
 8004b18:	614a      	str	r2, [r1, #20]
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	68d3      	ldr	r3, [r2, #12]
 8004b1e:	f043 0320 	orr.w	r3, r3, #32
 8004b22:	60d3      	str	r3, [r2, #12]
}
 8004b24:	4770      	bx	lr

08004b26 <HAL_UART_Receive_IT>:
{
 8004b26:	b508      	push	{r3, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8004b28:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	2b20      	cmp	r3, #32
 8004b30:	d10d      	bne.n	8004b4e <HAL_UART_Receive_IT+0x28>
    if ((pData == NULL) || (Size == 0U))
 8004b32:	b171      	cbz	r1, 8004b52 <HAL_UART_Receive_IT+0x2c>
 8004b34:	b17a      	cbz	r2, 8004b56 <HAL_UART_Receive_IT+0x30>
    __HAL_LOCK(huart);
 8004b36:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d00d      	beq.n	8004b5a <HAL_UART_Receive_IT+0x34>
 8004b3e:	2301      	movs	r3, #1
 8004b40:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b44:	2300      	movs	r3, #0
 8004b46:	6303      	str	r3, [r0, #48]	; 0x30
    return(UART_Start_Receive_IT(huart, pData, Size));
 8004b48:	f7ff ffd2 	bl	8004af0 <UART_Start_Receive_IT>
 8004b4c:	e000      	b.n	8004b50 <HAL_UART_Receive_IT+0x2a>
    return HAL_BUSY;
 8004b4e:	2002      	movs	r0, #2
}
 8004b50:	bd08      	pop	{r3, pc}
      return HAL_ERROR;
 8004b52:	2001      	movs	r0, #1
 8004b54:	e7fc      	b.n	8004b50 <HAL_UART_Receive_IT+0x2a>
 8004b56:	2001      	movs	r0, #1
 8004b58:	e7fa      	b.n	8004b50 <HAL_UART_Receive_IT+0x2a>
    __HAL_LOCK(huart);
 8004b5a:	2002      	movs	r0, #2
 8004b5c:	e7f8      	b.n	8004b50 <HAL_UART_Receive_IT+0x2a>

08004b5e <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004b5e:	b084      	sub	sp, #16
 8004b60:	a801      	add	r0, sp, #4
 8004b62:	e880 000e 	stmia.w	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8004b66:	2000      	movs	r0, #0
 8004b68:	b004      	add	sp, #16
 8004b6a:	4770      	bx	lr

08004b6c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004b6c:	4603      	mov	r3, r0
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004b6e:	2000      	movs	r0, #0
 8004b70:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004b74:	f44f 423f 	mov.w	r2, #48896	; 0xbf00
 8004b78:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
}
 8004b7c:	4770      	bx	lr

08004b7e <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004b7e:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8004b82:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004b86:	045b      	lsls	r3, r3, #17
 8004b88:	0c5b      	lsrs	r3, r3, #17
 8004b8a:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 8004b8e:	2000      	movs	r0, #0
 8004b90:	4770      	bx	lr

08004b92 <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8004b92:	2000      	movs	r0, #0
 8004b94:	4770      	bx	lr

08004b96 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004b96:	b084      	sub	sp, #16
 8004b98:	4684      	mov	ip, r0
 8004b9a:	a801      	add	r0, sp, #4
 8004b9c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	f8ac 3040 	strh.w	r3, [ip, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004ba6:	2000      	movs	r0, #0
 8004ba8:	f8ac 0040 	strh.w	r0, [ip, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004bac:	f8ac 0044 	strh.w	r0, [ip, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004bb0:	f8ac 0050 	strh.w	r0, [ip, #80]	; 0x50

  return HAL_OK;
}
 8004bb4:	b004      	add	sp, #16
 8004bb6:	4770      	bx	lr

08004bb8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004bb8:	b510      	push	{r4, lr}
 8004bba:	4603      	mov	r3, r0
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004bbc:	f891 e000 	ldrb.w	lr, [r1]
 8004bc0:	f830 202e 	ldrh.w	r2, [r0, lr, lsl #2]
 8004bc4:	b292      	uxth	r2, r2
 8004bc6:	f422 42ec 	bic.w	r2, r2, #30208	; 0x7600
 8004bca:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004bce:	b292      	uxth	r2, r2

  /* initialize Endpoint */
  switch (ep->type)
 8004bd0:	78c8      	ldrb	r0, [r1, #3]
 8004bd2:	2803      	cmp	r0, #3
 8004bd4:	d863      	bhi.n	8004c9e <USB_ActivateEndpoint+0xe6>
 8004bd6:	e8df f000 	tbb	[pc, r0]
 8004bda:	5e57      	.short	0x5e57
 8004bdc:	5a02      	.short	0x5a02
 8004bde:	2000      	movs	r0, #0
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004be0:	f248 0c80 	movw	ip, #32896	; 0x8080
 8004be4:	ea42 020c 	orr.w	r2, r2, ip
 8004be8:	f823 202e 	strh.w	r2, [r3, lr, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004bec:	f891 e000 	ldrb.w	lr, [r1]
 8004bf0:	f833 202e 	ldrh.w	r2, [r3, lr, lsl #2]
 8004bf4:	b292      	uxth	r2, r2
 8004bf6:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004bfa:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004bfe:	ea42 020e 	orr.w	r2, r2, lr
 8004c02:	ea4c 0202 	orr.w	r2, ip, r2
 8004c06:	f823 202e 	strh.w	r2, [r3, lr, lsl #2]

  if (ep->doublebuffer == 0U)
 8004c0a:	7b0a      	ldrb	r2, [r1, #12]
 8004c0c:	2a00      	cmp	r2, #0
 8004c0e:	f040 80bb 	bne.w	8004d88 <USB_ActivateEndpoint+0x1d0>
  {
    if (ep->is_in != 0U)
 8004c12:	784a      	ldrb	r2, [r1, #1]
 8004c14:	2a00      	cmp	r2, #0
 8004c16:	d044      	beq.n	8004ca2 <USB_ActivateEndpoint+0xea>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004c18:	f8b3 e050 	ldrh.w	lr, [r3, #80]	; 0x50
 8004c1c:	fa1f fe8e 	uxth.w	lr, lr
 8004c20:	780a      	ldrb	r2, [r1, #0]
 8004c22:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8004c26:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004c2a:	f8b1 c006 	ldrh.w	ip, [r1, #6]
 8004c2e:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8004c32:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8004c36:	f822 c00e 	strh.w	ip, [r2, lr]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c3a:	780c      	ldrb	r4, [r1, #0]
 8004c3c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8004c40:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004c44:	d00c      	beq.n	8004c60 <USB_ActivateEndpoint+0xa8>
 8004c46:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8004c4a:	b292      	uxth	r2, r2
 8004c4c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004c50:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004c54:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c58:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8004c5c:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8004c60:	78ca      	ldrb	r2, [r1, #3]
 8004c62:	2a01      	cmp	r2, #1
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004c64:	7809      	ldrb	r1, [r1, #0]
 8004c66:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8004c6a:	b292      	uxth	r2, r2
 8004c6c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004c70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c74:	bf18      	it	ne
 8004c76:	f082 0220 	eorne.w	r2, r2, #32
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004c7a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c7e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004c82:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return ret;
}
 8004c86:	bd10      	pop	{r4, pc}
      wEpRegVal |= USB_EP_CONTROL;
 8004c88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
      break;
 8004c8c:	e7a8      	b.n	8004be0 <USB_ActivateEndpoint+0x28>
      wEpRegVal |= USB_EP_INTERRUPT;
 8004c8e:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
  HAL_StatusTypeDef ret = HAL_OK;
 8004c92:	2000      	movs	r0, #0
      break;
 8004c94:	e7a4      	b.n	8004be0 <USB_ActivateEndpoint+0x28>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004c96:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
  HAL_StatusTypeDef ret = HAL_OK;
 8004c9a:	2000      	movs	r0, #0
      break;
 8004c9c:	e7a0      	b.n	8004be0 <USB_ActivateEndpoint+0x28>
      ret = HAL_ERROR;
 8004c9e:	2001      	movs	r0, #1
 8004ca0:	e79e      	b.n	8004be0 <USB_ActivateEndpoint+0x28>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004ca2:	f8b3 e050 	ldrh.w	lr, [r3, #80]	; 0x50
 8004ca6:	fa1f fe8e 	uxth.w	lr, lr
 8004caa:	780a      	ldrb	r2, [r1, #0]
 8004cac:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8004cb0:	f502 6281 	add.w	r2, r2, #1032	; 0x408
 8004cb4:	f8b1 c006 	ldrh.w	ip, [r1, #6]
 8004cb8:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8004cbc:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8004cc0:	f822 c00e 	strh.w	ip, [r2, lr]
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004cc4:	f8b3 e050 	ldrh.w	lr, [r3, #80]	; 0x50
 8004cc8:	fa1f fe8e 	uxth.w	lr, lr
 8004ccc:	780a      	ldrb	r2, [r1, #0]
 8004cce:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8004cd2:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 8004cd6:	690c      	ldr	r4, [r1, #16]
 8004cd8:	bbbc      	cbnz	r4, 8004d4a <USB_ActivateEndpoint+0x192>
 8004cda:	f832 c00e 	ldrh.w	ip, [r2, lr]
 8004cde:	f42c 4cf8 	bic.w	ip, ip, #31744	; 0x7c00
 8004ce2:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 8004ce6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8004cea:	f822 c00e 	strh.w	ip, [r2, lr]
 8004cee:	f832 c00e 	ldrh.w	ip, [r2, lr]
 8004cf2:	ea6f 4c4c 	mvn.w	ip, ip, lsl #17
 8004cf6:	ea6f 4c5c 	mvn.w	ip, ip, lsr #17
 8004cfa:	fa1f fc8c 	uxth.w	ip, ip
 8004cfe:	f822 c00e 	strh.w	ip, [r2, lr]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004d02:	780c      	ldrb	r4, [r1, #0]
 8004d04:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8004d08:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8004d0c:	d00c      	beq.n	8004d28 <USB_ActivateEndpoint+0x170>
 8004d0e:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8004d12:	b292      	uxth	r2, r2
 8004d14:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004d18:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004d1c:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8004d20:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004d24:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004d28:	7809      	ldrb	r1, [r1, #0]
 8004d2a:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8004d2e:	b292      	uxth	r2, r2
 8004d30:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004d34:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004d38:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8004d3c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d40:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004d44:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8004d48:	e79d      	b.n	8004c86 <USB_ActivateEndpoint+0xce>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004d4a:	2c3e      	cmp	r4, #62	; 0x3e
 8004d4c:	d80d      	bhi.n	8004d6a <USB_ActivateEndpoint+0x1b2>
 8004d4e:	ea4f 0c54 	mov.w	ip, r4, lsr #1
 8004d52:	f014 0f01 	tst.w	r4, #1
 8004d56:	bf18      	it	ne
 8004d58:	f10c 0c01 	addne.w	ip, ip, #1
 8004d5c:	ea4f 2c8c 	mov.w	ip, ip, lsl #10
 8004d60:	fa1f fc8c 	uxth.w	ip, ip
 8004d64:	f822 c00e 	strh.w	ip, [r2, lr]
 8004d68:	e7cb      	b.n	8004d02 <USB_ActivateEndpoint+0x14a>
 8004d6a:	ea4f 1c54 	mov.w	ip, r4, lsr #5
 8004d6e:	f014 0f1f 	tst.w	r4, #31
 8004d72:	bf08      	it	eq
 8004d74:	f10c 3cff 	addeq.w	ip, ip, #4294967295
 8004d78:	ea6f 64cc 	mvn.w	r4, ip, lsl #27
 8004d7c:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8004d80:	b2a4      	uxth	r4, r4
 8004d82:	f822 400e 	strh.w	r4, [r2, lr]
 8004d86:	e7bc      	b.n	8004d02 <USB_ActivateEndpoint+0x14a>
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004d88:	f891 c000 	ldrb.w	ip, [r1]
 8004d8c:	f833 202c 	ldrh.w	r2, [r3, ip, lsl #2]
 8004d90:	b292      	uxth	r2, r2
 8004d92:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004d96:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004d9a:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 8004d9e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004da2:	f823 202c 	strh.w	r2, [r3, ip, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004da6:	f8b3 e050 	ldrh.w	lr, [r3, #80]	; 0x50
 8004daa:	fa1f fe8e 	uxth.w	lr, lr
 8004dae:	780a      	ldrb	r2, [r1, #0]
 8004db0:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8004db4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004db8:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 8004dbc:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8004dc0:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8004dc4:	f822 c00e 	strh.w	ip, [r2, lr]
 8004dc8:	f8b3 e050 	ldrh.w	lr, [r3, #80]	; 0x50
 8004dcc:	fa1f fe8e 	uxth.w	lr, lr
 8004dd0:	780a      	ldrb	r2, [r1, #0]
 8004dd2:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8004dd6:	f502 6281 	add.w	r2, r2, #1032	; 0x408
 8004dda:	f8b1 c00a 	ldrh.w	ip, [r1, #10]
 8004dde:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8004de2:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8004de6:	f822 c00e 	strh.w	ip, [r2, lr]
    if (ep->is_in == 0U)
 8004dea:	784a      	ldrb	r2, [r1, #1]
 8004dec:	2a00      	cmp	r2, #0
 8004dee:	d142      	bne.n	8004e76 <USB_ActivateEndpoint+0x2be>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004df0:	780c      	ldrb	r4, [r1, #0]
 8004df2:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8004df6:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8004dfa:	d00c      	beq.n	8004e16 <USB_ActivateEndpoint+0x25e>
 8004dfc:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8004e00:	b292      	uxth	r2, r2
 8004e02:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004e06:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004e0a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8004e0e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004e12:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004e16:	780c      	ldrb	r4, [r1, #0]
 8004e18:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8004e1c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004e20:	d00c      	beq.n	8004e3c <USB_ActivateEndpoint+0x284>
 8004e22:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8004e26:	b292      	uxth	r2, r2
 8004e28:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004e2c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004e30:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e34:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8004e38:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004e3c:	780c      	ldrb	r4, [r1, #0]
 8004e3e:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8004e42:	b292      	uxth	r2, r2
 8004e44:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004e48:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004e4c:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8004e50:	f248 0c80 	movw	ip, #32896	; 0x8080
 8004e54:	ea4c 0202 	orr.w	r2, ip, r2
 8004e58:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004e5c:	7809      	ldrb	r1, [r1, #0]
 8004e5e:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8004e62:	b292      	uxth	r2, r2
 8004e64:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004e68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e6c:	ea4c 0202 	orr.w	r2, ip, r2
 8004e70:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8004e74:	e707      	b.n	8004c86 <USB_ActivateEndpoint+0xce>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004e76:	780c      	ldrb	r4, [r1, #0]
 8004e78:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8004e7c:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8004e80:	d00c      	beq.n	8004e9c <USB_ActivateEndpoint+0x2e4>
 8004e82:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8004e86:	b292      	uxth	r2, r2
 8004e88:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004e8c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004e90:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8004e94:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004e98:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004e9c:	780c      	ldrb	r4, [r1, #0]
 8004e9e:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8004ea2:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004ea6:	d00c      	beq.n	8004ec2 <USB_ActivateEndpoint+0x30a>
 8004ea8:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8004eac:	b292      	uxth	r2, r2
 8004eae:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004eb2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004eb6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004eba:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8004ebe:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 8004ec2:	78ca      	ldrb	r2, [r1, #3]
 8004ec4:	2a01      	cmp	r2, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004ec6:	780c      	ldrb	r4, [r1, #0]
 8004ec8:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8004ecc:	b292      	uxth	r2, r2
 8004ece:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004ed2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ed6:	bf18      	it	ne
 8004ed8:	f082 0220 	eorne.w	r2, r2, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004edc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ee0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004ee4:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004ee8:	7809      	ldrb	r1, [r1, #0]
 8004eea:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8004eee:	b292      	uxth	r2, r2
 8004ef0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004ef4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004ef8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004efc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004f00:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8004f04:	e6bf      	b.n	8004c86 <USB_ActivateEndpoint+0xce>

08004f06 <USB_DeactivateEndpoint>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8004f06:	7b0b      	ldrb	r3, [r1, #12]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d146      	bne.n	8004f9a <USB_DeactivateEndpoint+0x94>
  {
    if (ep->is_in != 0U)
 8004f0c:	784b      	ldrb	r3, [r1, #1]
 8004f0e:	b313      	cbz	r3, 8004f56 <USB_DeactivateEndpoint+0x50>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004f10:	780a      	ldrb	r2, [r1, #0]
 8004f12:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004f16:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004f1a:	d00c      	beq.n	8004f36 <USB_DeactivateEndpoint+0x30>
 8004f1c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004f20:	b29b      	uxth	r3, r3
 8004f22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f2e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004f32:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004f36:	780a      	ldrb	r2, [r1, #0]
 8004f38:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004f3c:	b29b      	uxth	r3, r3
 8004f3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f4e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return HAL_OK;
}
 8004f52:	2000      	movs	r0, #0
 8004f54:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f56:	780a      	ldrb	r2, [r1, #0]
 8004f58:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004f5c:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8004f60:	d00c      	beq.n	8004f7c <USB_DeactivateEndpoint+0x76>
 8004f62:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f70:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f78:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004f7c:	780a      	ldrb	r2, [r1, #0]
 8004f7e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004f82:	b29b      	uxth	r3, r3
 8004f84:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f94:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8004f98:	e7db      	b.n	8004f52 <USB_DeactivateEndpoint+0x4c>
    if (ep->is_in == 0U)
 8004f9a:	784b      	ldrb	r3, [r1, #1]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d14d      	bne.n	800503c <USB_DeactivateEndpoint+0x136>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004fa0:	780a      	ldrb	r2, [r1, #0]
 8004fa2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004fa6:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8004faa:	d00c      	beq.n	8004fc6 <USB_DeactivateEndpoint+0xc0>
 8004fac:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004fb0:	b29b      	uxth	r3, r3
 8004fb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004fbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fc2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004fc6:	780a      	ldrb	r2, [r1, #0]
 8004fc8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004fcc:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004fd0:	d00c      	beq.n	8004fec <USB_DeactivateEndpoint+0xe6>
 8004fd2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004fd6:	b29b      	uxth	r3, r3
 8004fd8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fe0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fe4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004fe8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8004fec:	780a      	ldrb	r2, [r1, #0]
 8004fee:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004ff2:	b29b      	uxth	r3, r3
 8004ff4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ff8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ffc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005000:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005004:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005008:	f891 c000 	ldrb.w	ip, [r1]
 800500c:	f830 302c 	ldrh.w	r3, [r0, ip, lsl #2]
 8005010:	b29b      	uxth	r3, r3
 8005012:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005016:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800501a:	f248 0280 	movw	r2, #32896	; 0x8080
 800501e:	4313      	orrs	r3, r2
 8005020:	f820 302c 	strh.w	r3, [r0, ip, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005024:	7809      	ldrb	r1, [r1, #0]
 8005026:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 800502a:	b29b      	uxth	r3, r3
 800502c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005030:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005034:	4313      	orrs	r3, r2
 8005036:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
 800503a:	e78a      	b.n	8004f52 <USB_DeactivateEndpoint+0x4c>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800503c:	780a      	ldrb	r2, [r1, #0]
 800503e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005042:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8005046:	d00c      	beq.n	8005062 <USB_DeactivateEndpoint+0x15c>
 8005048:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800504c:	b29b      	uxth	r3, r3
 800504e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005052:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005056:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800505a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800505e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005062:	780a      	ldrb	r2, [r1, #0]
 8005064:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005068:	f013 0f40 	tst.w	r3, #64	; 0x40
 800506c:	d00c      	beq.n	8005088 <USB_DeactivateEndpoint+0x182>
 800506e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005072:	b29b      	uxth	r3, r3
 8005074:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005078:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800507c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005080:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005084:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8005088:	780a      	ldrb	r2, [r1, #0]
 800508a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800508e:	b29b      	uxth	r3, r3
 8005090:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005094:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005098:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800509c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050a0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80050a4:	f891 c000 	ldrb.w	ip, [r1]
 80050a8:	f830 302c 	ldrh.w	r3, [r0, ip, lsl #2]
 80050ac:	b29b      	uxth	r3, r3
 80050ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050b6:	f248 0280 	movw	r2, #32896	; 0x8080
 80050ba:	4313      	orrs	r3, r2
 80050bc:	f820 302c 	strh.w	r3, [r0, ip, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80050c0:	7809      	ldrb	r1, [r1, #0]
 80050c2:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 80050c6:	b29b      	uxth	r3, r3
 80050c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050d0:	4313      	orrs	r3, r2
 80050d2:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
 80050d6:	e73c      	b.n	8004f52 <USB_DeactivateEndpoint+0x4c>

080050d8 <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 80050d8:	784b      	ldrb	r3, [r1, #1]
 80050da:	b18b      	cbz	r3, 8005100 <USB_EPSetStall+0x28>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80050dc:	780a      	ldrb	r2, [r1, #0]
 80050de:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050ec:	f083 0310 	eor.w	r3, r3, #16
 80050f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050f8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
  }

  return HAL_OK;
}
 80050fc:	2000      	movs	r0, #0
 80050fe:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005100:	780a      	ldrb	r2, [r1, #0]
 8005102:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005106:	b29b      	uxth	r3, r3
 8005108:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800510c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005110:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005114:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005118:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800511c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8005120:	e7ec      	b.n	80050fc <USB_EPSetStall+0x24>

08005122 <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8005122:	7b0b      	ldrb	r3, [r1, #12]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d14b      	bne.n	80051c0 <USB_EPClearStall+0x9e>
  {
    if (ep->is_in != 0U)
 8005128:	784b      	ldrb	r3, [r1, #1]
 800512a:	b333      	cbz	r3, 800517a <USB_EPClearStall+0x58>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800512c:	780a      	ldrb	r2, [r1, #0]
 800512e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005132:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005136:	d00c      	beq.n	8005152 <USB_EPClearStall+0x30>
 8005138:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800513c:	b29b      	uxth	r3, r3
 800513e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005142:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005146:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800514a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800514e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8005152:	78cb      	ldrb	r3, [r1, #3]
 8005154:	2b01      	cmp	r3, #1
 8005156:	d033      	beq.n	80051c0 <USB_EPClearStall+0x9e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005158:	780a      	ldrb	r2, [r1, #0]
 800515a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800515e:	b29b      	uxth	r3, r3
 8005160:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005164:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005168:	f083 0320 	eor.w	r3, r3, #32
 800516c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005170:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005174:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8005178:	e022      	b.n	80051c0 <USB_EPClearStall+0x9e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800517a:	780a      	ldrb	r2, [r1, #0]
 800517c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005180:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8005184:	d00c      	beq.n	80051a0 <USB_EPClearStall+0x7e>
 8005186:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800518a:	b29b      	uxth	r3, r3
 800518c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005190:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005194:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005198:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800519c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80051a0:	780a      	ldrb	r2, [r1, #0]
 80051a2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80051ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051b0:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80051b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051bc:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 80051c0:	2000      	movs	r0, #0
 80051c2:	4770      	bx	lr

080051c4 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 80051c4:	b911      	cbnz	r1, 80051cc <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80051c6:	2380      	movs	r3, #128	; 0x80
 80051c8:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 80051cc:	2000      	movs	r0, #0
 80051ce:	4770      	bx	lr

080051d0 <USB_DevConnect>:
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 80051d0:	2000      	movs	r0, #0
 80051d2:	4770      	bx	lr

080051d4 <USB_DevDisconnect>:
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 80051d4:	2000      	movs	r0, #0
 80051d6:	4770      	bx	lr

080051d8 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80051d8:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 80051dc:	b280      	uxth	r0, r0
 80051de:	4770      	bx	lr

080051e0 <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 80051e0:	2000      	movs	r0, #0
 80051e2:	4770      	bx	lr

080051e4 <USB_WritePMA>:
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80051e4:	3301      	adds	r3, #1
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80051e6:	eb00 0c42 	add.w	ip, r0, r2, lsl #1
 80051ea:	f50c 6c80 	add.w	ip, ip, #1024	; 0x400
 80051ee:	4662      	mov	r2, ip

  for (i = n; i != 0U; i--)
 80051f0:	085b      	lsrs	r3, r3, #1
 80051f2:	d00d      	beq.n	8005210 <USB_WritePMA+0x2c>
 80051f4:	3102      	adds	r1, #2
 80051f6:	eb0c 0c83 	add.w	ip, ip, r3, lsl #2
  {
    temp1 = *pBuf;
    pBuf++;
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80051fa:	f811 0c01 	ldrb.w	r0, [r1, #-1]
    temp1 = *pBuf;
 80051fe:	f811 3c02 	ldrb.w	r3, [r1, #-2]
    *pdwVal = (uint16_t)temp2;
 8005202:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8005206:	f822 3b04 	strh.w	r3, [r2], #4
  for (i = n; i != 0U; i--)
 800520a:	3102      	adds	r1, #2
 800520c:	4594      	cmp	ip, r2
 800520e:	d1f4      	bne.n	80051fa <USB_WritePMA+0x16>
    pdwVal++;
#endif

    pBuf++;
  }
}
 8005210:	4770      	bx	lr

08005212 <USB_EPStartXfer>:
{
 8005212:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005214:	4605      	mov	r5, r0
 8005216:	460c      	mov	r4, r1
  if (ep->is_in == 1U)
 8005218:	784b      	ldrb	r3, [r1, #1]
 800521a:	2b01      	cmp	r3, #1
 800521c:	d035      	beq.n	800528a <USB_EPStartXfer+0x78>
    if (ep->doublebuffer == 0U)
 800521e:	7b0a      	ldrb	r2, [r1, #12]
 8005220:	2a00      	cmp	r2, #0
 8005222:	f040 82fe 	bne.w	8005822 <USB_EPStartXfer+0x610>
      if (ep->xfer_len > ep->maxpacket)
 8005226:	6989      	ldr	r1, [r1, #24]
 8005228:	6923      	ldr	r3, [r4, #16]
 800522a:	4299      	cmp	r1, r3
        ep->xfer_len -= len;
 800522c:	bf86      	itte	hi
 800522e:	1aca      	subhi	r2, r1, r3
        len = ep->maxpacket;
 8005230:	4619      	movhi	r1, r3
        ep->xfer_len = 0U;
 8005232:	2200      	movls	r2, #0
 8005234:	61a2      	str	r2, [r4, #24]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005236:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800523a:	b29b      	uxth	r3, r3
 800523c:	7822      	ldrb	r2, [r4, #0]
 800523e:	0112      	lsls	r2, r2, #4
 8005240:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 8005244:	4403      	add	r3, r0
 8005246:	2900      	cmp	r1, #0
 8005248:	f040 82d3 	bne.w	80057f2 <USB_EPStartXfer+0x5e0>
 800524c:	5ad1      	ldrh	r1, [r2, r3]
 800524e:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8005252:	0409      	lsls	r1, r1, #16
 8005254:	0c09      	lsrs	r1, r1, #16
 8005256:	52d1      	strh	r1, [r2, r3]
 8005258:	5ad1      	ldrh	r1, [r2, r3]
 800525a:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 800525e:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8005262:	b289      	uxth	r1, r1
 8005264:	52d1      	strh	r1, [r2, r3]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005266:	7822      	ldrb	r2, [r4, #0]
 8005268:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 800526c:	b29b      	uxth	r3, r3
 800526e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005272:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005276:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800527a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800527e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005282:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
  return HAL_OK;
 8005286:	2000      	movs	r0, #0
}
 8005288:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (ep->xfer_len > ep->maxpacket)
 800528a:	690a      	ldr	r2, [r1, #16]
 800528c:	698e      	ldr	r6, [r1, #24]
 800528e:	4296      	cmp	r6, r2
 8005290:	bf28      	it	cs
 8005292:	4616      	movcs	r6, r2
    if (ep->doublebuffer == 0U)
 8005294:	7b0b      	ldrb	r3, [r1, #12]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d036      	beq.n	8005308 <USB_EPStartXfer+0xf6>
      if (ep->type == EP_TYPE_BULK)
 800529a:	78cb      	ldrb	r3, [r1, #3]
 800529c:	2b02      	cmp	r3, #2
 800529e:	d054      	beq.n	800534a <USB_EPStartXfer+0x138>
        PCD_SET_EP_DBUF(USBx, ep->num);
 80052a0:	780a      	ldrb	r2, [r1, #0]
 80052a2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80052a6:	b29b      	uxth	r3, r3
 80052a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052b0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80052b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052b8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
        ep->xfer_len_db -= len;
 80052bc:	6a0b      	ldr	r3, [r1, #32]
 80052be:	1b9b      	subs	r3, r3, r6
 80052c0:	620b      	str	r3, [r1, #32]
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80052c2:	780b      	ldrb	r3, [r1, #0]
 80052c4:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80052c8:	f012 0f40 	tst.w	r2, #64	; 0x40
 80052cc:	f000 820b 	beq.w	80056e6 <USB_EPStartXfer+0x4d4>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80052d0:	784a      	ldrb	r2, [r1, #1]
 80052d2:	2a00      	cmp	r2, #0
 80052d4:	f040 81b1 	bne.w	800563a <USB_EPStartXfer+0x428>
 80052d8:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80052dc:	b292      	uxth	r2, r2
 80052de:	f200 410c 	addw	r1, r0, #1036	; 0x40c
 80052e2:	440a      	add	r2, r1
 80052e4:	011b      	lsls	r3, r3, #4
 80052e6:	2e00      	cmp	r6, #0
 80052e8:	f040 818f 	bne.w	800560a <USB_EPStartXfer+0x3f8>
 80052ec:	5ad1      	ldrh	r1, [r2, r3]
 80052ee:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 80052f2:	0409      	lsls	r1, r1, #16
 80052f4:	0c09      	lsrs	r1, r1, #16
 80052f6:	52d1      	strh	r1, [r2, r3]
 80052f8:	5ad1      	ldrh	r1, [r2, r3]
 80052fa:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 80052fe:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8005302:	b289      	uxth	r1, r1
 8005304:	52d1      	strh	r1, [r2, r3]
 8005306:	e19a      	b.n	800563e <USB_EPStartXfer+0x42c>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005308:	b2b6      	uxth	r6, r6
 800530a:	4633      	mov	r3, r6
 800530c:	88ca      	ldrh	r2, [r1, #6]
 800530e:	6949      	ldr	r1, [r1, #20]
 8005310:	f7ff ff68 	bl	80051e4 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005314:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8005318:	b299      	uxth	r1, r3
 800531a:	7822      	ldrb	r2, [r4, #0]
 800531c:	0112      	lsls	r2, r2, #4
 800531e:	f205 4304 	addw	r3, r5, #1028	; 0x404
 8005322:	440b      	add	r3, r1
 8005324:	52d6      	strh	r6, [r2, r3]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005326:	7822      	ldrb	r2, [r4, #0]
 8005328:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 800532c:	b29b      	uxth	r3, r3
 800532e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005332:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005336:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 800533a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800533e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005342:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
  return HAL_OK;
 8005346:	2000      	movs	r0, #0
 8005348:	e79e      	b.n	8005288 <USB_EPStartXfer+0x76>
        if (ep->xfer_len_db > ep->maxpacket)
 800534a:	6a0b      	ldr	r3, [r1, #32]
 800534c:	429a      	cmp	r2, r3
 800534e:	f080 813e 	bcs.w	80055ce <USB_EPStartXfer+0x3bc>
          PCD_SET_EP_DBUF(USBx, ep->num);
 8005352:	780a      	ldrb	r2, [r1, #0]
 8005354:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005358:	b29b      	uxth	r3, r3
 800535a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800535e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005362:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005366:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800536a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
          ep->xfer_len_db -= len;
 800536e:	6a0b      	ldr	r3, [r1, #32]
 8005370:	1b9b      	subs	r3, r3, r6
 8005372:	620b      	str	r3, [r1, #32]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005374:	780b      	ldrb	r3, [r1, #0]
 8005376:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800537a:	f012 0f40 	tst.w	r2, #64	; 0x40
 800537e:	f000 8093 	beq.w	80054a8 <USB_EPStartXfer+0x296>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005382:	784a      	ldrb	r2, [r1, #1]
 8005384:	bb6a      	cbnz	r2, 80053e2 <USB_EPStartXfer+0x1d0>
 8005386:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800538a:	b292      	uxth	r2, r2
 800538c:	f200 410c 	addw	r1, r0, #1036	; 0x40c
 8005390:	4411      	add	r1, r2
 8005392:	011b      	lsls	r3, r3, #4
 8005394:	b96e      	cbnz	r6, 80053b2 <USB_EPStartXfer+0x1a0>
 8005396:	5aca      	ldrh	r2, [r1, r3]
 8005398:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800539c:	0412      	lsls	r2, r2, #16
 800539e:	0c12      	lsrs	r2, r2, #16
 80053a0:	52ca      	strh	r2, [r1, r3]
 80053a2:	5aca      	ldrh	r2, [r1, r3]
 80053a4:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80053a8:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80053ac:	b292      	uxth	r2, r2
 80053ae:	52ca      	strh	r2, [r1, r3]
 80053b0:	e019      	b.n	80053e6 <USB_EPStartXfer+0x1d4>
 80053b2:	2e3e      	cmp	r6, #62	; 0x3e
 80053b4:	d808      	bhi.n	80053c8 <USB_EPStartXfer+0x1b6>
 80053b6:	0872      	lsrs	r2, r6, #1
 80053b8:	f016 0f01 	tst.w	r6, #1
 80053bc:	bf18      	it	ne
 80053be:	3201      	addne	r2, #1
 80053c0:	0292      	lsls	r2, r2, #10
 80053c2:	b292      	uxth	r2, r2
 80053c4:	52ca      	strh	r2, [r1, r3]
 80053c6:	e00e      	b.n	80053e6 <USB_EPStartXfer+0x1d4>
 80053c8:	0972      	lsrs	r2, r6, #5
 80053ca:	f016 0f1f 	tst.w	r6, #31
 80053ce:	bf08      	it	eq
 80053d0:	f102 32ff 	addeq.w	r2, r2, #4294967295
 80053d4:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 80053d8:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80053dc:	b292      	uxth	r2, r2
 80053de:	52ca      	strh	r2, [r1, r3]
 80053e0:	e001      	b.n	80053e6 <USB_EPStartXfer+0x1d4>
 80053e2:	2a01      	cmp	r2, #1
 80053e4:	d02a      	beq.n	800543c <USB_EPStartXfer+0x22a>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80053e6:	b2b3      	uxth	r3, r6
 80053e8:	8962      	ldrh	r2, [r4, #10]
 80053ea:	6961      	ldr	r1, [r4, #20]
 80053ec:	4628      	mov	r0, r5
 80053ee:	f7ff fef9 	bl	80051e4 <USB_WritePMA>
            ep->xfer_buff += len;
 80053f2:	6963      	ldr	r3, [r4, #20]
 80053f4:	4433      	add	r3, r6
 80053f6:	6163      	str	r3, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 80053f8:	6a23      	ldr	r3, [r4, #32]
 80053fa:	6922      	ldr	r2, [r4, #16]
 80053fc:	4293      	cmp	r3, r2
              ep->xfer_len_db -= len;
 80053fe:	bf86      	itte	hi
 8005400:	1b9a      	subhi	r2, r3, r6
 8005402:	4633      	movhi	r3, r6
              ep->xfer_len_db = 0U;
 8005404:	2200      	movls	r2, #0
 8005406:	6222      	str	r2, [r4, #32]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005408:	7862      	ldrb	r2, [r4, #1]
 800540a:	2a00      	cmp	r2, #0
 800540c:	d138      	bne.n	8005480 <USB_EPStartXfer+0x26e>
 800540e:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8005412:	b292      	uxth	r2, r2
 8005414:	7820      	ldrb	r0, [r4, #0]
 8005416:	0100      	lsls	r0, r0, #4
 8005418:	f205 4104 	addw	r1, r5, #1028	; 0x404
 800541c:	440a      	add	r2, r1
 800541e:	b9bb      	cbnz	r3, 8005450 <USB_EPStartXfer+0x23e>
 8005420:	5a81      	ldrh	r1, [r0, r2]
 8005422:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8005426:	0409      	lsls	r1, r1, #16
 8005428:	0c09      	lsrs	r1, r1, #16
 800542a:	5281      	strh	r1, [r0, r2]
 800542c:	5a81      	ldrh	r1, [r0, r2]
 800542e:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8005432:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8005436:	b289      	uxth	r1, r1
 8005438:	5281      	strh	r1, [r0, r2]
 800543a:	e023      	b.n	8005484 <USB_EPStartXfer+0x272>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800543c:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8005440:	b291      	uxth	r1, r2
 8005442:	f200 420c 	addw	r2, r0, #1036	; 0x40c
 8005446:	440a      	add	r2, r1
 8005448:	011b      	lsls	r3, r3, #4
 800544a:	b2b1      	uxth	r1, r6
 800544c:	52d1      	strh	r1, [r2, r3]
 800544e:	e7ca      	b.n	80053e6 <USB_EPStartXfer+0x1d4>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005450:	2b3e      	cmp	r3, #62	; 0x3e
 8005452:	d808      	bhi.n	8005466 <USB_EPStartXfer+0x254>
 8005454:	0859      	lsrs	r1, r3, #1
 8005456:	f013 0f01 	tst.w	r3, #1
 800545a:	bf18      	it	ne
 800545c:	3101      	addne	r1, #1
 800545e:	0289      	lsls	r1, r1, #10
 8005460:	b289      	uxth	r1, r1
 8005462:	5281      	strh	r1, [r0, r2]
 8005464:	e00e      	b.n	8005484 <USB_EPStartXfer+0x272>
 8005466:	0959      	lsrs	r1, r3, #5
 8005468:	f013 0f1f 	tst.w	r3, #31
 800546c:	bf08      	it	eq
 800546e:	f101 31ff 	addeq.w	r1, r1, #4294967295
 8005472:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 8005476:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 800547a:	b289      	uxth	r1, r1
 800547c:	5281      	strh	r1, [r0, r2]
 800547e:	e001      	b.n	8005484 <USB_EPStartXfer+0x272>
 8005480:	2a01      	cmp	r2, #1
 8005482:	d006      	beq.n	8005492 <USB_EPStartXfer+0x280>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005484:	b29b      	uxth	r3, r3
 8005486:	8922      	ldrh	r2, [r4, #8]
 8005488:	6961      	ldr	r1, [r4, #20]
 800548a:	4628      	mov	r0, r5
 800548c:	f7ff feaa 	bl	80051e4 <USB_WritePMA>
 8005490:	e749      	b.n	8005326 <USB_EPStartXfer+0x114>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005492:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8005496:	b290      	uxth	r0, r2
 8005498:	7821      	ldrb	r1, [r4, #0]
 800549a:	0109      	lsls	r1, r1, #4
 800549c:	f205 4204 	addw	r2, r5, #1028	; 0x404
 80054a0:	4402      	add	r2, r0
 80054a2:	b298      	uxth	r0, r3
 80054a4:	5288      	strh	r0, [r1, r2]
 80054a6:	e7ed      	b.n	8005484 <USB_EPStartXfer+0x272>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80054a8:	784a      	ldrb	r2, [r1, #1]
 80054aa:	bb6a      	cbnz	r2, 8005508 <USB_EPStartXfer+0x2f6>
 80054ac:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80054b0:	b292      	uxth	r2, r2
 80054b2:	f200 4104 	addw	r1, r0, #1028	; 0x404
 80054b6:	4411      	add	r1, r2
 80054b8:	011b      	lsls	r3, r3, #4
 80054ba:	b96e      	cbnz	r6, 80054d8 <USB_EPStartXfer+0x2c6>
 80054bc:	5aca      	ldrh	r2, [r1, r3]
 80054be:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80054c2:	0412      	lsls	r2, r2, #16
 80054c4:	0c12      	lsrs	r2, r2, #16
 80054c6:	52ca      	strh	r2, [r1, r3]
 80054c8:	5aca      	ldrh	r2, [r1, r3]
 80054ca:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80054ce:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80054d2:	b292      	uxth	r2, r2
 80054d4:	52ca      	strh	r2, [r1, r3]
 80054d6:	e019      	b.n	800550c <USB_EPStartXfer+0x2fa>
 80054d8:	2e3e      	cmp	r6, #62	; 0x3e
 80054da:	d808      	bhi.n	80054ee <USB_EPStartXfer+0x2dc>
 80054dc:	0872      	lsrs	r2, r6, #1
 80054de:	f016 0f01 	tst.w	r6, #1
 80054e2:	bf18      	it	ne
 80054e4:	3201      	addne	r2, #1
 80054e6:	0292      	lsls	r2, r2, #10
 80054e8:	b292      	uxth	r2, r2
 80054ea:	52ca      	strh	r2, [r1, r3]
 80054ec:	e00e      	b.n	800550c <USB_EPStartXfer+0x2fa>
 80054ee:	0972      	lsrs	r2, r6, #5
 80054f0:	f016 0f1f 	tst.w	r6, #31
 80054f4:	bf08      	it	eq
 80054f6:	f102 32ff 	addeq.w	r2, r2, #4294967295
 80054fa:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 80054fe:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8005502:	b292      	uxth	r2, r2
 8005504:	52ca      	strh	r2, [r1, r3]
 8005506:	e001      	b.n	800550c <USB_EPStartXfer+0x2fa>
 8005508:	2a01      	cmp	r2, #1
 800550a:	d02a      	beq.n	8005562 <USB_EPStartXfer+0x350>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800550c:	b2b3      	uxth	r3, r6
 800550e:	8922      	ldrh	r2, [r4, #8]
 8005510:	6961      	ldr	r1, [r4, #20]
 8005512:	4628      	mov	r0, r5
 8005514:	f7ff fe66 	bl	80051e4 <USB_WritePMA>
            ep->xfer_buff += len;
 8005518:	6963      	ldr	r3, [r4, #20]
 800551a:	4433      	add	r3, r6
 800551c:	6163      	str	r3, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 800551e:	6a23      	ldr	r3, [r4, #32]
 8005520:	6922      	ldr	r2, [r4, #16]
 8005522:	4293      	cmp	r3, r2
              ep->xfer_len_db -= len;
 8005524:	bf86      	itte	hi
 8005526:	1b9a      	subhi	r2, r3, r6
 8005528:	4633      	movhi	r3, r6
              ep->xfer_len_db = 0U;
 800552a:	2200      	movls	r2, #0
 800552c:	6222      	str	r2, [r4, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800552e:	7862      	ldrb	r2, [r4, #1]
 8005530:	2a00      	cmp	r2, #0
 8005532:	d138      	bne.n	80055a6 <USB_EPStartXfer+0x394>
 8005534:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8005538:	b292      	uxth	r2, r2
 800553a:	7820      	ldrb	r0, [r4, #0]
 800553c:	0100      	lsls	r0, r0, #4
 800553e:	f205 410c 	addw	r1, r5, #1036	; 0x40c
 8005542:	440a      	add	r2, r1
 8005544:	b9bb      	cbnz	r3, 8005576 <USB_EPStartXfer+0x364>
 8005546:	5a81      	ldrh	r1, [r0, r2]
 8005548:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 800554c:	0409      	lsls	r1, r1, #16
 800554e:	0c09      	lsrs	r1, r1, #16
 8005550:	5281      	strh	r1, [r0, r2]
 8005552:	5a81      	ldrh	r1, [r0, r2]
 8005554:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8005558:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 800555c:	b289      	uxth	r1, r1
 800555e:	5281      	strh	r1, [r0, r2]
 8005560:	e023      	b.n	80055aa <USB_EPStartXfer+0x398>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005562:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8005566:	b291      	uxth	r1, r2
 8005568:	f200 4204 	addw	r2, r0, #1028	; 0x404
 800556c:	440a      	add	r2, r1
 800556e:	011b      	lsls	r3, r3, #4
 8005570:	b2b1      	uxth	r1, r6
 8005572:	52d1      	strh	r1, [r2, r3]
 8005574:	e7ca      	b.n	800550c <USB_EPStartXfer+0x2fa>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005576:	2b3e      	cmp	r3, #62	; 0x3e
 8005578:	d808      	bhi.n	800558c <USB_EPStartXfer+0x37a>
 800557a:	0859      	lsrs	r1, r3, #1
 800557c:	f013 0f01 	tst.w	r3, #1
 8005580:	bf18      	it	ne
 8005582:	3101      	addne	r1, #1
 8005584:	0289      	lsls	r1, r1, #10
 8005586:	b289      	uxth	r1, r1
 8005588:	5281      	strh	r1, [r0, r2]
 800558a:	e00e      	b.n	80055aa <USB_EPStartXfer+0x398>
 800558c:	0959      	lsrs	r1, r3, #5
 800558e:	f013 0f1f 	tst.w	r3, #31
 8005592:	bf08      	it	eq
 8005594:	f101 31ff 	addeq.w	r1, r1, #4294967295
 8005598:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 800559c:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80055a0:	b289      	uxth	r1, r1
 80055a2:	5281      	strh	r1, [r0, r2]
 80055a4:	e001      	b.n	80055aa <USB_EPStartXfer+0x398>
 80055a6:	2a01      	cmp	r2, #1
 80055a8:	d006      	beq.n	80055b8 <USB_EPStartXfer+0x3a6>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	8962      	ldrh	r2, [r4, #10]
 80055ae:	6961      	ldr	r1, [r4, #20]
 80055b0:	4628      	mov	r0, r5
 80055b2:	f7ff fe17 	bl	80051e4 <USB_WritePMA>
 80055b6:	e6b6      	b.n	8005326 <USB_EPStartXfer+0x114>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80055b8:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 80055bc:	b290      	uxth	r0, r2
 80055be:	7821      	ldrb	r1, [r4, #0]
 80055c0:	0109      	lsls	r1, r1, #4
 80055c2:	f205 420c 	addw	r2, r5, #1036	; 0x40c
 80055c6:	4402      	add	r2, r0
 80055c8:	b298      	uxth	r0, r3
 80055ca:	5288      	strh	r0, [r1, r2]
 80055cc:	e7ed      	b.n	80055aa <USB_EPStartXfer+0x398>
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80055ce:	7809      	ldrb	r1, [r1, #0]
 80055d0:	f830 2021 	ldrh.w	r2, [r0, r1, lsl #2]
 80055d4:	b292      	uxth	r2, r2
 80055d6:	f422 42e2 	bic.w	r2, r2, #28928	; 0x7100
 80055da:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80055de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80055e2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80055e6:	f820 2021 	strh.w	r2, [r0, r1, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80055ea:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80055ee:	b290      	uxth	r0, r2
 80055f0:	7821      	ldrb	r1, [r4, #0]
 80055f2:	0109      	lsls	r1, r1, #4
 80055f4:	f205 4204 	addw	r2, r5, #1028	; 0x404
 80055f8:	4402      	add	r2, r0
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	528b      	strh	r3, [r1, r2]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80055fe:	8922      	ldrh	r2, [r4, #8]
 8005600:	6961      	ldr	r1, [r4, #20]
 8005602:	4628      	mov	r0, r5
 8005604:	f7ff fdee 	bl	80051e4 <USB_WritePMA>
 8005608:	e68d      	b.n	8005326 <USB_EPStartXfer+0x114>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800560a:	2e3e      	cmp	r6, #62	; 0x3e
 800560c:	d808      	bhi.n	8005620 <USB_EPStartXfer+0x40e>
 800560e:	0871      	lsrs	r1, r6, #1
 8005610:	f016 0f01 	tst.w	r6, #1
 8005614:	bf18      	it	ne
 8005616:	3101      	addne	r1, #1
 8005618:	0289      	lsls	r1, r1, #10
 800561a:	b289      	uxth	r1, r1
 800561c:	52d1      	strh	r1, [r2, r3]
 800561e:	e00e      	b.n	800563e <USB_EPStartXfer+0x42c>
 8005620:	0971      	lsrs	r1, r6, #5
 8005622:	f016 0f1f 	tst.w	r6, #31
 8005626:	bf08      	it	eq
 8005628:	f101 31ff 	addeq.w	r1, r1, #4294967295
 800562c:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 8005630:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8005634:	b289      	uxth	r1, r1
 8005636:	52d1      	strh	r1, [r2, r3]
 8005638:	e001      	b.n	800563e <USB_EPStartXfer+0x42c>
 800563a:	2a01      	cmp	r2, #1
 800563c:	d028      	beq.n	8005690 <USB_EPStartXfer+0x47e>
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800563e:	b2b3      	uxth	r3, r6
 8005640:	8962      	ldrh	r2, [r4, #10]
 8005642:	6961      	ldr	r1, [r4, #20]
 8005644:	4628      	mov	r0, r5
 8005646:	f7ff fdcd 	bl	80051e4 <USB_WritePMA>
          ep->xfer_buff += len;
 800564a:	6963      	ldr	r3, [r4, #20]
 800564c:	4433      	add	r3, r6
 800564e:	6163      	str	r3, [r4, #20]
          if (ep->xfer_len_db > ep->maxpacket)
 8005650:	6a23      	ldr	r3, [r4, #32]
 8005652:	6922      	ldr	r2, [r4, #16]
 8005654:	4293      	cmp	r3, r2
            ep->xfer_len_db -= len;
 8005656:	bf86      	itte	hi
 8005658:	1b9a      	subhi	r2, r3, r6
 800565a:	4633      	movhi	r3, r6
            ep->xfer_len_db = 0U;
 800565c:	2200      	movls	r2, #0
 800565e:	6222      	str	r2, [r4, #32]
          if (len > 0U)
 8005660:	2b00      	cmp	r3, #0
 8005662:	f43f ae60 	beq.w	8005326 <USB_EPStartXfer+0x114>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005666:	7862      	ldrb	r2, [r4, #1]
 8005668:	bb4a      	cbnz	r2, 80056be <USB_EPStartXfer+0x4ac>
 800566a:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 800566e:	b28a      	uxth	r2, r1
 8005670:	7820      	ldrb	r0, [r4, #0]
 8005672:	0100      	lsls	r0, r0, #4
 8005674:	f205 4104 	addw	r1, r5, #1028	; 0x404
 8005678:	4411      	add	r1, r2
 800567a:	2b3e      	cmp	r3, #62	; 0x3e
 800567c:	d812      	bhi.n	80056a4 <USB_EPStartXfer+0x492>
 800567e:	085a      	lsrs	r2, r3, #1
 8005680:	f013 0f01 	tst.w	r3, #1
 8005684:	bf18      	it	ne
 8005686:	3201      	addne	r2, #1
 8005688:	0292      	lsls	r2, r2, #10
 800568a:	b292      	uxth	r2, r2
 800568c:	5242      	strh	r2, [r0, r1]
 800568e:	e018      	b.n	80056c2 <USB_EPStartXfer+0x4b0>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005690:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8005694:	b291      	uxth	r1, r2
 8005696:	f200 420c 	addw	r2, r0, #1036	; 0x40c
 800569a:	440a      	add	r2, r1
 800569c:	011b      	lsls	r3, r3, #4
 800569e:	b2b1      	uxth	r1, r6
 80056a0:	52d1      	strh	r1, [r2, r3]
 80056a2:	e7cc      	b.n	800563e <USB_EPStartXfer+0x42c>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80056a4:	095a      	lsrs	r2, r3, #5
 80056a6:	f013 0f1f 	tst.w	r3, #31
 80056aa:	bf08      	it	eq
 80056ac:	f102 32ff 	addeq.w	r2, r2, #4294967295
 80056b0:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 80056b4:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80056b8:	b292      	uxth	r2, r2
 80056ba:	5242      	strh	r2, [r0, r1]
 80056bc:	e001      	b.n	80056c2 <USB_EPStartXfer+0x4b0>
 80056be:	2a01      	cmp	r2, #1
 80056c0:	d006      	beq.n	80056d0 <USB_EPStartXfer+0x4be>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	8922      	ldrh	r2, [r4, #8]
 80056c6:	6961      	ldr	r1, [r4, #20]
 80056c8:	4628      	mov	r0, r5
 80056ca:	f7ff fd8b 	bl	80051e4 <USB_WritePMA>
 80056ce:	e62a      	b.n	8005326 <USB_EPStartXfer+0x114>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80056d0:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 80056d4:	b290      	uxth	r0, r2
 80056d6:	7821      	ldrb	r1, [r4, #0]
 80056d8:	0109      	lsls	r1, r1, #4
 80056da:	f205 4204 	addw	r2, r5, #1028	; 0x404
 80056de:	4402      	add	r2, r0
 80056e0:	b298      	uxth	r0, r3
 80056e2:	5288      	strh	r0, [r1, r2]
 80056e4:	e7ed      	b.n	80056c2 <USB_EPStartXfer+0x4b0>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80056e6:	784a      	ldrb	r2, [r1, #1]
 80056e8:	bb6a      	cbnz	r2, 8005746 <USB_EPStartXfer+0x534>
 80056ea:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80056ee:	b292      	uxth	r2, r2
 80056f0:	f200 4104 	addw	r1, r0, #1028	; 0x404
 80056f4:	440a      	add	r2, r1
 80056f6:	011b      	lsls	r3, r3, #4
 80056f8:	b96e      	cbnz	r6, 8005716 <USB_EPStartXfer+0x504>
 80056fa:	5ad1      	ldrh	r1, [r2, r3]
 80056fc:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8005700:	0409      	lsls	r1, r1, #16
 8005702:	0c09      	lsrs	r1, r1, #16
 8005704:	52d1      	strh	r1, [r2, r3]
 8005706:	5ad1      	ldrh	r1, [r2, r3]
 8005708:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 800570c:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8005710:	b289      	uxth	r1, r1
 8005712:	52d1      	strh	r1, [r2, r3]
 8005714:	e019      	b.n	800574a <USB_EPStartXfer+0x538>
 8005716:	2e3e      	cmp	r6, #62	; 0x3e
 8005718:	d808      	bhi.n	800572c <USB_EPStartXfer+0x51a>
 800571a:	0871      	lsrs	r1, r6, #1
 800571c:	f016 0f01 	tst.w	r6, #1
 8005720:	bf18      	it	ne
 8005722:	3101      	addne	r1, #1
 8005724:	0289      	lsls	r1, r1, #10
 8005726:	b289      	uxth	r1, r1
 8005728:	52d1      	strh	r1, [r2, r3]
 800572a:	e00e      	b.n	800574a <USB_EPStartXfer+0x538>
 800572c:	0971      	lsrs	r1, r6, #5
 800572e:	f016 0f1f 	tst.w	r6, #31
 8005732:	bf08      	it	eq
 8005734:	f101 31ff 	addeq.w	r1, r1, #4294967295
 8005738:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 800573c:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8005740:	b289      	uxth	r1, r1
 8005742:	52d1      	strh	r1, [r2, r3]
 8005744:	e001      	b.n	800574a <USB_EPStartXfer+0x538>
 8005746:	2a01      	cmp	r2, #1
 8005748:	d028      	beq.n	800579c <USB_EPStartXfer+0x58a>
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800574a:	b2b3      	uxth	r3, r6
 800574c:	8922      	ldrh	r2, [r4, #8]
 800574e:	6961      	ldr	r1, [r4, #20]
 8005750:	4628      	mov	r0, r5
 8005752:	f7ff fd47 	bl	80051e4 <USB_WritePMA>
          ep->xfer_buff += len;
 8005756:	6963      	ldr	r3, [r4, #20]
 8005758:	4433      	add	r3, r6
 800575a:	6163      	str	r3, [r4, #20]
          if (ep->xfer_len_db > ep->maxpacket)
 800575c:	6a23      	ldr	r3, [r4, #32]
 800575e:	6922      	ldr	r2, [r4, #16]
 8005760:	4293      	cmp	r3, r2
            ep->xfer_len_db -= len;
 8005762:	bf86      	itte	hi
 8005764:	1b9a      	subhi	r2, r3, r6
 8005766:	4633      	movhi	r3, r6
            ep->xfer_len_db = 0U;
 8005768:	2200      	movls	r2, #0
 800576a:	6222      	str	r2, [r4, #32]
          if (len > 0U)
 800576c:	2b00      	cmp	r3, #0
 800576e:	f43f adda 	beq.w	8005326 <USB_EPStartXfer+0x114>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005772:	7862      	ldrb	r2, [r4, #1]
 8005774:	bb4a      	cbnz	r2, 80057ca <USB_EPStartXfer+0x5b8>
 8005776:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 800577a:	b28a      	uxth	r2, r1
 800577c:	7820      	ldrb	r0, [r4, #0]
 800577e:	0100      	lsls	r0, r0, #4
 8005780:	f205 410c 	addw	r1, r5, #1036	; 0x40c
 8005784:	4411      	add	r1, r2
 8005786:	2b3e      	cmp	r3, #62	; 0x3e
 8005788:	d812      	bhi.n	80057b0 <USB_EPStartXfer+0x59e>
 800578a:	085a      	lsrs	r2, r3, #1
 800578c:	f013 0f01 	tst.w	r3, #1
 8005790:	bf18      	it	ne
 8005792:	3201      	addne	r2, #1
 8005794:	0292      	lsls	r2, r2, #10
 8005796:	b292      	uxth	r2, r2
 8005798:	5242      	strh	r2, [r0, r1]
 800579a:	e018      	b.n	80057ce <USB_EPStartXfer+0x5bc>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800579c:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80057a0:	b291      	uxth	r1, r2
 80057a2:	f200 4204 	addw	r2, r0, #1028	; 0x404
 80057a6:	440a      	add	r2, r1
 80057a8:	011b      	lsls	r3, r3, #4
 80057aa:	b2b1      	uxth	r1, r6
 80057ac:	52d1      	strh	r1, [r2, r3]
 80057ae:	e7cc      	b.n	800574a <USB_EPStartXfer+0x538>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80057b0:	095a      	lsrs	r2, r3, #5
 80057b2:	f013 0f1f 	tst.w	r3, #31
 80057b6:	bf08      	it	eq
 80057b8:	f102 32ff 	addeq.w	r2, r2, #4294967295
 80057bc:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 80057c0:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80057c4:	b292      	uxth	r2, r2
 80057c6:	5242      	strh	r2, [r0, r1]
 80057c8:	e001      	b.n	80057ce <USB_EPStartXfer+0x5bc>
 80057ca:	2a01      	cmp	r2, #1
 80057cc:	d006      	beq.n	80057dc <USB_EPStartXfer+0x5ca>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80057ce:	b29b      	uxth	r3, r3
 80057d0:	8962      	ldrh	r2, [r4, #10]
 80057d2:	6961      	ldr	r1, [r4, #20]
 80057d4:	4628      	mov	r0, r5
 80057d6:	f7ff fd05 	bl	80051e4 <USB_WritePMA>
 80057da:	e5a4      	b.n	8005326 <USB_EPStartXfer+0x114>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80057dc:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 80057e0:	b290      	uxth	r0, r2
 80057e2:	7821      	ldrb	r1, [r4, #0]
 80057e4:	0109      	lsls	r1, r1, #4
 80057e6:	f205 420c 	addw	r2, r5, #1036	; 0x40c
 80057ea:	4402      	add	r2, r0
 80057ec:	b298      	uxth	r0, r3
 80057ee:	5288      	strh	r0, [r1, r2]
 80057f0:	e7ed      	b.n	80057ce <USB_EPStartXfer+0x5bc>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80057f2:	293e      	cmp	r1, #62	; 0x3e
 80057f4:	d808      	bhi.n	8005808 <USB_EPStartXfer+0x5f6>
 80057f6:	0848      	lsrs	r0, r1, #1
 80057f8:	f011 0f01 	tst.w	r1, #1
 80057fc:	bf18      	it	ne
 80057fe:	3001      	addne	r0, #1
 8005800:	0280      	lsls	r0, r0, #10
 8005802:	b280      	uxth	r0, r0
 8005804:	52d0      	strh	r0, [r2, r3]
 8005806:	e52e      	b.n	8005266 <USB_EPStartXfer+0x54>
 8005808:	0948      	lsrs	r0, r1, #5
 800580a:	f011 0f1f 	tst.w	r1, #31
 800580e:	bf08      	it	eq
 8005810:	f100 30ff 	addeq.w	r0, r0, #4294967295
 8005814:	ea6f 60c0 	mvn.w	r0, r0, lsl #27
 8005818:	ea6f 4050 	mvn.w	r0, r0, lsr #17
 800581c:	b280      	uxth	r0, r0
 800581e:	52d0      	strh	r0, [r2, r3]
 8005820:	e521      	b.n	8005266 <USB_EPStartXfer+0x54>
      if (ep->type == EP_TYPE_BULK)
 8005822:	78ca      	ldrb	r2, [r1, #3]
 8005824:	2a02      	cmp	r2, #2
 8005826:	d03f      	beq.n	80058a8 <USB_EPStartXfer+0x696>
      else if (ep->type == EP_TYPE_ISOC)
 8005828:	2a01      	cmp	r2, #1
 800582a:	f040 8116 	bne.w	8005a5a <USB_EPStartXfer+0x848>
        if (ep->xfer_len > ep->maxpacket)
 800582e:	698a      	ldr	r2, [r1, #24]
 8005830:	6909      	ldr	r1, [r1, #16]
 8005832:	428a      	cmp	r2, r1
          ep->xfer_len -= len;
 8005834:	bf86      	itte	hi
 8005836:	1a50      	subhi	r0, r2, r1
          len = ep->maxpacket;
 8005838:	460a      	movhi	r2, r1
          ep->xfer_len = 0U;
 800583a:	2000      	movls	r0, #0
 800583c:	61a0      	str	r0, [r4, #24]
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800583e:	2b00      	cmp	r3, #0
 8005840:	f47f ad11 	bne.w	8005266 <USB_EPStartXfer+0x54>
 8005844:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8005848:	b29b      	uxth	r3, r3
 800584a:	7826      	ldrb	r6, [r4, #0]
 800584c:	0136      	lsls	r6, r6, #4
 800584e:	f205 4004 	addw	r0, r5, #1028	; 0x404
 8005852:	4418      	add	r0, r3
 8005854:	2a00      	cmp	r2, #0
 8005856:	f040 80b7 	bne.w	80059c8 <USB_EPStartXfer+0x7b6>
 800585a:	5a33      	ldrh	r3, [r6, r0]
 800585c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005860:	041b      	lsls	r3, r3, #16
 8005862:	0c1b      	lsrs	r3, r3, #16
 8005864:	5233      	strh	r3, [r6, r0]
 8005866:	5a33      	ldrh	r3, [r6, r0]
 8005868:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800586c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005870:	b29b      	uxth	r3, r3
 8005872:	5233      	strh	r3, [r6, r0]
 8005874:	7863      	ldrb	r3, [r4, #1]
 8005876:	2b00      	cmp	r3, #0
 8005878:	f040 80e1 	bne.w	8005a3e <USB_EPStartXfer+0x82c>
 800587c:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8005880:	b293      	uxth	r3, r2
 8005882:	7821      	ldrb	r1, [r4, #0]
 8005884:	0109      	lsls	r1, r1, #4
 8005886:	f205 420c 	addw	r2, r5, #1036	; 0x40c
 800588a:	441a      	add	r2, r3
 800588c:	5a8b      	ldrh	r3, [r1, r2]
 800588e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005892:	041b      	lsls	r3, r3, #16
 8005894:	0c1b      	lsrs	r3, r3, #16
 8005896:	528b      	strh	r3, [r1, r2]
 8005898:	5a8b      	ldrh	r3, [r1, r2]
 800589a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800589e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058a2:	b29b      	uxth	r3, r3
 80058a4:	528b      	strh	r3, [r1, r2]
 80058a6:	e4de      	b.n	8005266 <USB_EPStartXfer+0x54>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d132      	bne.n	8005912 <USB_EPStartXfer+0x700>
 80058ac:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80058b0:	b29b      	uxth	r3, r3
 80058b2:	780a      	ldrb	r2, [r1, #0]
 80058b4:	0112      	lsls	r2, r2, #4
 80058b6:	f200 4104 	addw	r1, r0, #1028	; 0x404
 80058ba:	440b      	add	r3, r1
 80058bc:	6921      	ldr	r1, [r4, #16]
 80058be:	2900      	cmp	r1, #0
 80058c0:	d145      	bne.n	800594e <USB_EPStartXfer+0x73c>
 80058c2:	5ad1      	ldrh	r1, [r2, r3]
 80058c4:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 80058c8:	0409      	lsls	r1, r1, #16
 80058ca:	0c09      	lsrs	r1, r1, #16
 80058cc:	52d1      	strh	r1, [r2, r3]
 80058ce:	5ad1      	ldrh	r1, [r2, r3]
 80058d0:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 80058d4:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80058d8:	b289      	uxth	r1, r1
 80058da:	52d1      	strh	r1, [r2, r3]
 80058dc:	7863      	ldrb	r3, [r4, #1]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d165      	bne.n	80059ae <USB_EPStartXfer+0x79c>
 80058e2:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 80058e6:	b29b      	uxth	r3, r3
 80058e8:	7822      	ldrb	r2, [r4, #0]
 80058ea:	0112      	lsls	r2, r2, #4
 80058ec:	f205 410c 	addw	r1, r5, #1036	; 0x40c
 80058f0:	440b      	add	r3, r1
 80058f2:	6921      	ldr	r1, [r4, #16]
 80058f4:	2900      	cmp	r1, #0
 80058f6:	d142      	bne.n	800597e <USB_EPStartXfer+0x76c>
 80058f8:	5ad1      	ldrh	r1, [r2, r3]
 80058fa:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 80058fe:	0409      	lsls	r1, r1, #16
 8005900:	0c09      	lsrs	r1, r1, #16
 8005902:	52d1      	strh	r1, [r2, r3]
 8005904:	5ad1      	ldrh	r1, [r2, r3]
 8005906:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 800590a:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 800590e:	b289      	uxth	r1, r1
 8005910:	52d1      	strh	r1, [r2, r3]
        if (ep->xfer_count != 0U)
 8005912:	69e3      	ldr	r3, [r4, #28]
 8005914:	2b00      	cmp	r3, #0
 8005916:	f43f aca6 	beq.w	8005266 <USB_EPStartXfer+0x54>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800591a:	7822      	ldrb	r2, [r4, #0]
 800591c:	f835 1022 	ldrh.w	r1, [r5, r2, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005920:	f244 0340 	movw	r3, #16448	; 0x4040
 8005924:	ea03 0001 	and.w	r0, r3, r1
 8005928:	438b      	bics	r3, r1
 800592a:	d002      	beq.n	8005932 <USB_EPStartXfer+0x720>
 800592c:	2800      	cmp	r0, #0
 800592e:	f47f ac9a 	bne.w	8005266 <USB_EPStartXfer+0x54>
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8005932:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8005936:	b29b      	uxth	r3, r3
 8005938:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800593c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005940:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005944:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005948:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 800594c:	e48b      	b.n	8005266 <USB_EPStartXfer+0x54>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800594e:	293e      	cmp	r1, #62	; 0x3e
 8005950:	d808      	bhi.n	8005964 <USB_EPStartXfer+0x752>
 8005952:	0848      	lsrs	r0, r1, #1
 8005954:	f011 0f01 	tst.w	r1, #1
 8005958:	bf18      	it	ne
 800595a:	3001      	addne	r0, #1
 800595c:	0281      	lsls	r1, r0, #10
 800595e:	b289      	uxth	r1, r1
 8005960:	52d1      	strh	r1, [r2, r3]
 8005962:	e7bb      	b.n	80058dc <USB_EPStartXfer+0x6ca>
 8005964:	0948      	lsrs	r0, r1, #5
 8005966:	f011 0f1f 	tst.w	r1, #31
 800596a:	bf08      	it	eq
 800596c:	f100 30ff 	addeq.w	r0, r0, #4294967295
 8005970:	ea6f 61c0 	mvn.w	r1, r0, lsl #27
 8005974:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8005978:	b289      	uxth	r1, r1
 800597a:	52d1      	strh	r1, [r2, r3]
 800597c:	e7ae      	b.n	80058dc <USB_EPStartXfer+0x6ca>
 800597e:	293e      	cmp	r1, #62	; 0x3e
 8005980:	d808      	bhi.n	8005994 <USB_EPStartXfer+0x782>
 8005982:	0848      	lsrs	r0, r1, #1
 8005984:	f011 0f01 	tst.w	r1, #1
 8005988:	bf18      	it	ne
 800598a:	3001      	addne	r0, #1
 800598c:	0281      	lsls	r1, r0, #10
 800598e:	b289      	uxth	r1, r1
 8005990:	52d1      	strh	r1, [r2, r3]
 8005992:	e7be      	b.n	8005912 <USB_EPStartXfer+0x700>
 8005994:	0948      	lsrs	r0, r1, #5
 8005996:	f011 0f1f 	tst.w	r1, #31
 800599a:	bf08      	it	eq
 800599c:	f100 30ff 	addeq.w	r0, r0, #4294967295
 80059a0:	ea6f 61c0 	mvn.w	r1, r0, lsl #27
 80059a4:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80059a8:	b289      	uxth	r1, r1
 80059aa:	52d1      	strh	r1, [r2, r3]
 80059ac:	e7b1      	b.n	8005912 <USB_EPStartXfer+0x700>
 80059ae:	2b01      	cmp	r3, #1
 80059b0:	d1af      	bne.n	8005912 <USB_EPStartXfer+0x700>
 80059b2:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 80059b6:	b299      	uxth	r1, r3
 80059b8:	7822      	ldrb	r2, [r4, #0]
 80059ba:	0112      	lsls	r2, r2, #4
 80059bc:	f205 430c 	addw	r3, r5, #1036	; 0x40c
 80059c0:	440b      	add	r3, r1
 80059c2:	8a21      	ldrh	r1, [r4, #16]
 80059c4:	52d1      	strh	r1, [r2, r3]
 80059c6:	e7a4      	b.n	8005912 <USB_EPStartXfer+0x700>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80059c8:	2a3e      	cmp	r2, #62	; 0x3e
 80059ca:	d818      	bhi.n	80059fe <USB_EPStartXfer+0x7ec>
 80059cc:	0851      	lsrs	r1, r2, #1
 80059ce:	f012 0701 	ands.w	r7, r2, #1
 80059d2:	bf14      	ite	ne
 80059d4:	1c4b      	addne	r3, r1, #1
 80059d6:	460b      	moveq	r3, r1
 80059d8:	029b      	lsls	r3, r3, #10
 80059da:	b29b      	uxth	r3, r3
 80059dc:	5233      	strh	r3, [r6, r0]
 80059de:	7863      	ldrb	r3, [r4, #1]
 80059e0:	bb6b      	cbnz	r3, 8005a3e <USB_EPStartXfer+0x82c>
 80059e2:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 80059e6:	b29a      	uxth	r2, r3
 80059e8:	f205 430c 	addw	r3, r5, #1036	; 0x40c
 80059ec:	4413      	add	r3, r2
 80059ee:	7822      	ldrb	r2, [r4, #0]
 80059f0:	0112      	lsls	r2, r2, #4
 80059f2:	b107      	cbz	r7, 80059f6 <USB_EPStartXfer+0x7e4>
 80059f4:	3101      	adds	r1, #1
 80059f6:	0289      	lsls	r1, r1, #10
 80059f8:	b289      	uxth	r1, r1
 80059fa:	5299      	strh	r1, [r3, r2]
 80059fc:	e433      	b.n	8005266 <USB_EPStartXfer+0x54>
 80059fe:	0951      	lsrs	r1, r2, #5
 8005a00:	f012 071f 	ands.w	r7, r2, #31
 8005a04:	bf0c      	ite	eq
 8005a06:	f101 33ff 	addeq.w	r3, r1, #4294967295
 8005a0a:	460b      	movne	r3, r1
 8005a0c:	ea6f 63c3 	mvn.w	r3, r3, lsl #27
 8005a10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	5233      	strh	r3, [r6, r0]
 8005a18:	7863      	ldrb	r3, [r4, #1]
 8005a1a:	b983      	cbnz	r3, 8005a3e <USB_EPStartXfer+0x82c>
 8005a1c:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8005a20:	b29b      	uxth	r3, r3
 8005a22:	7822      	ldrb	r2, [r4, #0]
 8005a24:	0112      	lsls	r2, r2, #4
 8005a26:	f205 400c 	addw	r0, r5, #1036	; 0x40c
 8005a2a:	4418      	add	r0, r3
 8005a2c:	b907      	cbnz	r7, 8005a30 <USB_EPStartXfer+0x81e>
 8005a2e:	3901      	subs	r1, #1
 8005a30:	ea6f 63c1 	mvn.w	r3, r1, lsl #27
 8005a34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a38:	b29b      	uxth	r3, r3
 8005a3a:	5213      	strh	r3, [r2, r0]
 8005a3c:	e413      	b.n	8005266 <USB_EPStartXfer+0x54>
 8005a3e:	2b01      	cmp	r3, #1
 8005a40:	f47f ac11 	bne.w	8005266 <USB_EPStartXfer+0x54>
 8005a44:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 8005a48:	b289      	uxth	r1, r1
 8005a4a:	7823      	ldrb	r3, [r4, #0]
 8005a4c:	f201 410c 	addw	r1, r1, #1036	; 0x40c
 8005a50:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 8005a54:	b293      	uxth	r3, r2
 8005a56:	526b      	strh	r3, [r5, r1]
 8005a58:	e405      	b.n	8005266 <USB_EPStartXfer+0x54>
        return HAL_ERROR;
 8005a5a:	2001      	movs	r0, #1
 8005a5c:	e414      	b.n	8005288 <USB_EPStartXfer+0x76>

08005a5e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005a5e:	b530      	push	{r4, r5, lr}
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005a60:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8005a64:	f500 6480 	add.w	r4, r0, #1024	; 0x400

  for (i = n; i != 0U; i--)
 8005a68:	085d      	lsrs	r5, r3, #1
 8005a6a:	d012      	beq.n	8005a92 <USB_ReadPMA+0x34>
 8005a6c:	1c88      	adds	r0, r1, #2
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005a6e:	46a6      	mov	lr, r4
  for (i = n; i != 0U; i--)
 8005a70:	46ac      	mov	ip, r5
  {
    temp = *(__IO uint16_t *)pdwVal;
 8005a72:	f83e 2b04 	ldrh.w	r2, [lr], #4
 8005a76:	b292      	uxth	r2, r2
    pdwVal++;
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005a78:	f800 2c02 	strb.w	r2, [r0, #-2]
    pBuf++;
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8005a7c:	0a12      	lsrs	r2, r2, #8
 8005a7e:	f800 2c01 	strb.w	r2, [r0, #-1]
  for (i = n; i != 0U; i--)
 8005a82:	3002      	adds	r0, #2
 8005a84:	f1bc 0c01 	subs.w	ip, ip, #1
 8005a88:	d1f3      	bne.n	8005a72 <USB_ReadPMA+0x14>
    pBuf++;
 8005a8a:	eb01 0145 	add.w	r1, r1, r5, lsl #1

#if PMA_ACCESS > 1U
    pdwVal++;
 8005a8e:	eb04 0485 	add.w	r4, r4, r5, lsl #2
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8005a92:	f013 0f01 	tst.w	r3, #1
  {
    temp = *pdwVal;
 8005a96:	bf1c      	itt	ne
 8005a98:	8823      	ldrhne	r3, [r4, #0]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005a9a:	700b      	strbne	r3, [r1, #0]
  }
}
 8005a9c:	bd30      	pop	{r4, r5, pc}

08005a9e <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005a9e:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 8005aa2:	b183      	cbz	r3, 8005ac6 <USBD_CDC_EP0_RxReady+0x28>
{
 8005aa4:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005aa6:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005aaa:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8005aae:	28ff      	cmp	r0, #255	; 0xff
 8005ab0:	d007      	beq.n	8005ac2 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005ab2:	689b      	ldr	r3, [r3, #8]
 8005ab4:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8005ab8:	4621      	mov	r1, r4
 8005aba:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8005abc:	23ff      	movs	r3, #255	; 0xff
 8005abe:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 8005ac2:	2000      	movs	r0, #0
 8005ac4:	bd10      	pop	{r4, pc}
 8005ac6:	2000      	movs	r0, #0
 8005ac8:	4770      	bx	lr
	...

08005acc <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8005acc:	2343      	movs	r3, #67	; 0x43
 8005ace:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8005ad0:	4800      	ldr	r0, [pc, #0]	; (8005ad4 <USBD_CDC_GetFSCfgDesc+0x8>)
 8005ad2:	4770      	bx	lr
 8005ad4:	20000050 	.word	0x20000050

08005ad8 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8005ad8:	2343      	movs	r3, #67	; 0x43
 8005ada:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8005adc:	4800      	ldr	r0, [pc, #0]	; (8005ae0 <USBD_CDC_GetHSCfgDesc+0x8>)
 8005ade:	4770      	bx	lr
 8005ae0:	20000094 	.word	0x20000094

08005ae4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005ae4:	2343      	movs	r3, #67	; 0x43
 8005ae6:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8005ae8:	4800      	ldr	r0, [pc, #0]	; (8005aec <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8005aea:	4770      	bx	lr
 8005aec:	200000e4 	.word	0x200000e4

08005af0 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8005af0:	230a      	movs	r3, #10
 8005af2:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8005af4:	4800      	ldr	r0, [pc, #0]	; (8005af8 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8005af6:	4770      	bx	lr
 8005af8:	200000d8 	.word	0x200000d8

08005afc <USBD_CDC_DataOut>:
{
 8005afc:	b538      	push	{r3, r4, r5, lr}
 8005afe:	4604      	mov	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005b00:	f8d0 52b8 	ldr.w	r5, [r0, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005b04:	f000 ffd6 	bl	8006ab4 <USBD_LL_GetRxDataSize>
 8005b08:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  if (pdev->pClassData != NULL)
 8005b0c:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8005b10:	b14b      	cbz	r3, 8005b26 <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005b12:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8005b16:	68db      	ldr	r3, [r3, #12]
 8005b18:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 8005b1c:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 8005b20:	4798      	blx	r3
    return USBD_OK;
 8005b22:	2000      	movs	r0, #0
}
 8005b24:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8005b26:	2002      	movs	r0, #2
 8005b28:	e7fc      	b.n	8005b24 <USBD_CDC_DataOut+0x28>

08005b2a <USBD_CDC_DataIn>:
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005b2a:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
  if (pdev->pClassData != NULL)
 8005b2e:	b312      	cbz	r2, 8005b76 <USBD_CDC_DataIn+0x4c>
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005b30:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8005b34:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8005b38:	69db      	ldr	r3, [r3, #28]
 8005b3a:	b1f3      	cbz	r3, 8005b7a <USBD_CDC_DataIn+0x50>
{
 8005b3c:	b510      	push	{r4, lr}
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005b3e:	f8d0 42c0 	ldr.w	r4, [r0, #704]	; 0x2c0
 8005b42:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
 8005b46:	eb04 04cc 	add.w	r4, r4, ip, lsl #3
 8005b4a:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8005b4c:	fbb3 fcf4 	udiv	ip, r3, r4
 8005b50:	fb04 331c 	mls	r3, r4, ip, r3
 8005b54:	b11b      	cbz	r3, 8005b5e <USBD_CDC_DataIn+0x34>
      hcdc->TxState = 0U;
 8005b56:	2000      	movs	r0, #0
 8005b58:	f8c2 0214 	str.w	r0, [r2, #532]	; 0x214
}
 8005b5c:	bd10      	pop	{r4, pc}
      pdev->ep_in[epnum].total_length = 0U;
 8005b5e:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8005b62:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8005b66:	2400      	movs	r4, #0
 8005b68:	61dc      	str	r4, [r3, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005b6a:	4623      	mov	r3, r4
 8005b6c:	4622      	mov	r2, r4
 8005b6e:	f000 ff91 	bl	8006a94 <USBD_LL_Transmit>
    return USBD_OK;
 8005b72:	4620      	mov	r0, r4
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005b74:	e7f2      	b.n	8005b5c <USBD_CDC_DataIn+0x32>
    return USBD_FAIL;
 8005b76:	2002      	movs	r0, #2
 8005b78:	4770      	bx	lr
      hcdc->TxState = 0U;
 8005b7a:	2000      	movs	r0, #0
 8005b7c:	f8c2 0214 	str.w	r0, [r2, #532]	; 0x214
}
 8005b80:	4770      	bx	lr

08005b82 <USBD_CDC_Setup>:
{
 8005b82:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b84:	b083      	sub	sp, #12
 8005b86:	4606      	mov	r6, r0
 8005b88:	460c      	mov	r4, r1
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005b8a:	f8d0 72b8 	ldr.w	r7, [r0, #696]	; 0x2b8
  uint8_t ifalt = 0U;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	f88d 3007 	strb.w	r3, [sp, #7]
  uint16_t status_info = 0U;
 8005b94:	f8ad 3004 	strh.w	r3, [sp, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005b98:	780b      	ldrb	r3, [r1, #0]
 8005b9a:	f013 0560 	ands.w	r5, r3, #96	; 0x60
 8005b9e:	d027      	beq.n	8005bf0 <USBD_CDC_Setup+0x6e>
 8005ba0:	2d20      	cmp	r5, #32
 8005ba2:	d153      	bne.n	8005c4c <USBD_CDC_Setup+0xca>
      if (req->wLength)
 8005ba4:	88ca      	ldrh	r2, [r1, #6]
 8005ba6:	b1da      	cbz	r2, 8005be0 <USBD_CDC_Setup+0x5e>
        if (req->bmRequest & 0x80U)
 8005ba8:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005bac:	d00c      	beq.n	8005bc8 <USBD_CDC_Setup+0x46>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005bae:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	4639      	mov	r1, r7
 8005bb6:	7860      	ldrb	r0, [r4, #1]
 8005bb8:	4798      	blx	r3
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005bba:	88e2      	ldrh	r2, [r4, #6]
 8005bbc:	4639      	mov	r1, r7
 8005bbe:	4630      	mov	r0, r6
 8005bc0:	f000 fd4a 	bl	8006658 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8005bc4:	2500      	movs	r5, #0
 8005bc6:	e044      	b.n	8005c52 <USBD_CDC_Setup+0xd0>
          hcdc->CmdOpCode = req->bRequest;
 8005bc8:	784b      	ldrb	r3, [r1, #1]
 8005bca:	f887 3200 	strb.w	r3, [r7, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005bce:	88cb      	ldrh	r3, [r1, #6]
 8005bd0:	f887 3201 	strb.w	r3, [r7, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005bd4:	88ca      	ldrh	r2, [r1, #6]
 8005bd6:	4639      	mov	r1, r7
 8005bd8:	f000 fd53 	bl	8006682 <USBD_CtlPrepareRx>
  uint8_t ret = USBD_OK;
 8005bdc:	2500      	movs	r5, #0
 8005bde:	e038      	b.n	8005c52 <USBD_CDC_Setup+0xd0>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005be0:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	2200      	movs	r2, #0
 8005be8:	7848      	ldrb	r0, [r1, #1]
 8005bea:	4798      	blx	r3
  uint8_t ret = USBD_OK;
 8005bec:	2500      	movs	r5, #0
 8005bee:	e030      	b.n	8005c52 <USBD_CDC_Setup+0xd0>
      switch (req->bRequest)
 8005bf0:	784f      	ldrb	r7, [r1, #1]
 8005bf2:	2f0a      	cmp	r7, #10
 8005bf4:	d014      	beq.n	8005c20 <USBD_CDC_Setup+0x9e>
 8005bf6:	2f0b      	cmp	r7, #11
 8005bf8:	d020      	beq.n	8005c3c <USBD_CDC_Setup+0xba>
 8005bfa:	b11f      	cbz	r7, 8005c04 <USBD_CDC_Setup+0x82>
          USBD_CtlError(pdev, req);
 8005bfc:	f000 fa3e 	bl	800607c <USBD_CtlError>
          ret = USBD_FAIL;
 8005c00:	2502      	movs	r5, #2
          break;
 8005c02:	e026      	b.n	8005c52 <USBD_CDC_Setup+0xd0>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c04:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005c08:	2b03      	cmp	r3, #3
 8005c0a:	d003      	beq.n	8005c14 <USBD_CDC_Setup+0x92>
            USBD_CtlError(pdev, req);
 8005c0c:	f000 fa36 	bl	800607c <USBD_CtlError>
            ret = USBD_FAIL;
 8005c10:	2502      	movs	r5, #2
 8005c12:	e01e      	b.n	8005c52 <USBD_CDC_Setup+0xd0>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8005c14:	2202      	movs	r2, #2
 8005c16:	a901      	add	r1, sp, #4
 8005c18:	f000 fd1e 	bl	8006658 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8005c1c:	463d      	mov	r5, r7
 8005c1e:	e018      	b.n	8005c52 <USBD_CDC_Setup+0xd0>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c20:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005c24:	2b03      	cmp	r3, #3
 8005c26:	d003      	beq.n	8005c30 <USBD_CDC_Setup+0xae>
            USBD_CtlError(pdev, req);
 8005c28:	f000 fa28 	bl	800607c <USBD_CtlError>
            ret = USBD_FAIL;
 8005c2c:	2502      	movs	r5, #2
 8005c2e:	e010      	b.n	8005c52 <USBD_CDC_Setup+0xd0>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8005c30:	2201      	movs	r2, #1
 8005c32:	f10d 0107 	add.w	r1, sp, #7
 8005c36:	f000 fd0f 	bl	8006658 <USBD_CtlSendData>
 8005c3a:	e00a      	b.n	8005c52 <USBD_CDC_Setup+0xd0>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005c3c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005c40:	2b03      	cmp	r3, #3
 8005c42:	d006      	beq.n	8005c52 <USBD_CDC_Setup+0xd0>
            USBD_CtlError(pdev, req);
 8005c44:	f000 fa1a 	bl	800607c <USBD_CtlError>
            ret = USBD_FAIL;
 8005c48:	2502      	movs	r5, #2
 8005c4a:	e002      	b.n	8005c52 <USBD_CDC_Setup+0xd0>
      USBD_CtlError(pdev, req);
 8005c4c:	f000 fa16 	bl	800607c <USBD_CtlError>
      ret = USBD_FAIL;
 8005c50:	2502      	movs	r5, #2
}
 8005c52:	4628      	mov	r0, r5
 8005c54:	b003      	add	sp, #12
 8005c56:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005c58 <USBD_CDC_DeInit>:
{
 8005c58:	b538      	push	{r3, r4, r5, lr}
 8005c5a:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005c5c:	2181      	movs	r1, #129	; 0x81
 8005c5e:	f000 fee2 	bl	8006a26 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005c62:	2500      	movs	r5, #0
 8005c64:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005c66:	2101      	movs	r1, #1
 8005c68:	4620      	mov	r0, r4
 8005c6a:	f000 fedc 	bl	8006a26 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005c6e:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005c72:	2182      	movs	r1, #130	; 0x82
 8005c74:	4620      	mov	r0, r4
 8005c76:	f000 fed6 	bl	8006a26 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005c7a:	6425      	str	r5, [r4, #64]	; 0x40
  if (pdev->pClassData != NULL)
 8005c7c:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8005c80:	b14b      	cbz	r3, 8005c96 <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005c82:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8005c8a:	f8d4 02b8 	ldr.w	r0, [r4, #696]	; 0x2b8
 8005c8e:	f000 ff1b 	bl	8006ac8 <USBD_static_free>
    pdev->pClassData = NULL;
 8005c92:	f8c4 52b8 	str.w	r5, [r4, #696]	; 0x2b8
}
 8005c96:	2000      	movs	r0, #0
 8005c98:	bd38      	pop	{r3, r4, r5, pc}

08005c9a <USBD_CDC_Init>:
{
 8005c9a:	b570      	push	{r4, r5, r6, lr}
 8005c9c:	4604      	mov	r4, r0
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c9e:	7c03      	ldrb	r3, [r0, #16]
 8005ca0:	bbab      	cbnz	r3, 8005d0e <USBD_CDC_Init+0x74>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005ca2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ca6:	2202      	movs	r2, #2
 8005ca8:	2181      	movs	r1, #129	; 0x81
 8005caa:	f000 feb1 	bl	8006a10 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005cae:	2501      	movs	r5, #1
 8005cb0:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005cb2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005cb6:	2202      	movs	r2, #2
 8005cb8:	4629      	mov	r1, r5
 8005cba:	4620      	mov	r0, r4
 8005cbc:	f000 fea8 	bl	8006a10 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005cc0:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005cc4:	2308      	movs	r3, #8
 8005cc6:	2203      	movs	r2, #3
 8005cc8:	2182      	movs	r1, #130	; 0x82
 8005cca:	4620      	mov	r0, r4
 8005ccc:	f000 fea0 	bl	8006a10 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	6423      	str	r3, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005cd4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005cd8:	f000 fef2 	bl	8006ac0 <USBD_static_malloc>
 8005cdc:	4605      	mov	r5, r0
 8005cde:	f8c4 02b8 	str.w	r0, [r4, #696]	; 0x2b8
  if (pdev->pClassData == NULL)
 8005ce2:	b368      	cbz	r0, 8005d40 <USBD_CDC_Init+0xa6>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005ce4:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4798      	blx	r3
    hcdc->TxState = 0U;
 8005cec:	2300      	movs	r3, #0
 8005cee:	f8c5 3214 	str.w	r3, [r5, #532]	; 0x214
    hcdc->RxState = 0U;
 8005cf2:	f8c5 3218 	str.w	r3, [r5, #536]	; 0x218
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005cf6:	7c26      	ldrb	r6, [r4, #16]
 8005cf8:	b9ce      	cbnz	r6, 8005d2e <USBD_CDC_Init+0x94>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005cfa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005cfe:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 8005d02:	2101      	movs	r1, #1
 8005d04:	4620      	mov	r0, r4
 8005d06:	f000 fecd 	bl	8006aa4 <USBD_LL_PrepareReceive>
}
 8005d0a:	4630      	mov	r0, r6
 8005d0c:	bd70      	pop	{r4, r5, r6, pc}
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005d0e:	2340      	movs	r3, #64	; 0x40
 8005d10:	2202      	movs	r2, #2
 8005d12:	2181      	movs	r1, #129	; 0x81
 8005d14:	f000 fe7c 	bl	8006a10 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005d18:	2501      	movs	r5, #1
 8005d1a:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005d1c:	2340      	movs	r3, #64	; 0x40
 8005d1e:	2202      	movs	r2, #2
 8005d20:	4629      	mov	r1, r5
 8005d22:	4620      	mov	r0, r4
 8005d24:	f000 fe74 	bl	8006a10 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005d28:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
 8005d2c:	e7ca      	b.n	8005cc4 <USBD_CDC_Init+0x2a>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005d2e:	2340      	movs	r3, #64	; 0x40
 8005d30:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 8005d34:	2101      	movs	r1, #1
 8005d36:	4620      	mov	r0, r4
 8005d38:	f000 feb4 	bl	8006aa4 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8005d3c:	2600      	movs	r6, #0
 8005d3e:	e7e4      	b.n	8005d0a <USBD_CDC_Init+0x70>
    ret = 1U;
 8005d40:	2601      	movs	r6, #1
 8005d42:	e7e2      	b.n	8005d0a <USBD_CDC_Init+0x70>

08005d44 <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if (fops != NULL)
 8005d44:	b119      	cbz	r1, 8005d4e <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData = fops;
 8005d46:	f8c0 12bc 	str.w	r1, [r0, #700]	; 0x2bc
    ret = USBD_OK;
 8005d4a:	2000      	movs	r0, #0
 8005d4c:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8005d4e:	2002      	movs	r0, #2
  }

  return ret;
}
 8005d50:	4770      	bx	lr

08005d52 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005d52:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  hcdc->TxBuffer = pbuff;
 8005d56:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005d5a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
}
 8005d5e:	2000      	movs	r0, #0
 8005d60:	4770      	bx	lr

08005d62 <USBD_CDC_SetRxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005d62:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  hcdc->RxBuffer = pbuff;
 8005d66:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204

  return USBD_OK;
}
 8005d6a:	2000      	movs	r0, #0
 8005d6c:	4770      	bx	lr

08005d6e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005d6e:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005d70:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8005d74:	b192      	cbz	r2, 8005d9c <USBD_CDC_ReceivePacket+0x2e>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005d76:	7c04      	ldrb	r4, [r0, #16]
 8005d78:	b944      	cbnz	r4, 8005d8c <USBD_CDC_ReceivePacket+0x1e>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005d7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d7e:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8005d82:	2101      	movs	r1, #1
 8005d84:	f000 fe8e 	bl	8006aa4 <USBD_LL_PrepareReceive>
  }
  else
  {
    return USBD_FAIL;
  }
}
 8005d88:	4620      	mov	r0, r4
 8005d8a:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 8005d8c:	2340      	movs	r3, #64	; 0x40
 8005d8e:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8005d92:	2101      	movs	r1, #1
 8005d94:	f000 fe86 	bl	8006aa4 <USBD_LL_PrepareReceive>
    return USBD_OK;
 8005d98:	2400      	movs	r4, #0
 8005d9a:	e7f5      	b.n	8005d88 <USBD_CDC_ReceivePacket+0x1a>
    return USBD_FAIL;
 8005d9c:	2402      	movs	r4, #2
 8005d9e:	e7f3      	b.n	8005d88 <USBD_CDC_ReceivePacket+0x1a>

08005da0 <USBD_Init>:
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005da0:	b198      	cbz	r0, 8005dca <USBD_Init+0x2a>
{
 8005da2:	b508      	push	{r3, lr}
 8005da4:	4603      	mov	r3, r0
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8005da6:	f8d0 02b4 	ldr.w	r0, [r0, #692]	; 0x2b4
 8005daa:	b110      	cbz	r0, 8005db2 <USBD_Init+0x12>
  {
    pdev->pClass = NULL;
 8005dac:	2000      	movs	r0, #0
 8005dae:	f8c3 02b4 	str.w	r0, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005db2:	b109      	cbz	r1, 8005db8 <USBD_Init+0x18>
  {
    pdev->pDesc = pdesc;
 8005db4:	f8c3 12b0 	str.w	r1, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005db8:	2101      	movs	r1, #1
 8005dba:	f883 129c 	strb.w	r1, [r3, #668]	; 0x29c
  pdev->id = id;
 8005dbe:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	f000 fddb 	bl	800697c <USBD_LL_Init>

  return USBD_OK;
 8005dc6:	2000      	movs	r0, #0
}
 8005dc8:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8005dca:	2002      	movs	r0, #2
}
 8005dcc:	4770      	bx	lr

08005dce <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 8005dce:	b119      	cbz	r1, 8005dd8 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005dd0:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
    status = USBD_OK;
 8005dd4:	2000      	movs	r0, #0
 8005dd6:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8005dd8:	2002      	movs	r0, #2
  }

  return status;
}
 8005dda:	4770      	bx	lr

08005ddc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005ddc:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8005dde:	f000 fe0f 	bl	8006a00 <USBD_LL_Start>

  return USBD_OK;
}
 8005de2:	2000      	movs	r0, #0
 8005de4:	bd08      	pop	{r3, pc}

08005de6 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005de6:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8005de8:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8005dec:	b12b      	cbz	r3, 8005dfa <USBD_SetClassConfig+0x14>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4798      	blx	r3
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005df2:	2800      	cmp	r0, #0
 8005df4:	bf18      	it	ne
 8005df6:	2002      	movne	r0, #2
      ret = USBD_OK;
    }
  }

  return ret;
}
 8005df8:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005dfa:	2002      	movs	r0, #2
 8005dfc:	e7fc      	b.n	8005df8 <USBD_SetClassConfig+0x12>

08005dfe <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005dfe:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8005e00:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	4798      	blx	r3

  return USBD_OK;
}
 8005e08:	2000      	movs	r0, #0
 8005e0a:	bd08      	pop	{r3, pc}

08005e0c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005e0c:	b538      	push	{r3, r4, r5, lr}
 8005e0e:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005e10:	f500 752a 	add.w	r5, r0, #680	; 0x2a8
 8005e14:	4628      	mov	r0, r5
 8005e16:	f000 f91d 	bl	8006054 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005e20:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	; 0x2ae
 8005e24:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005e28:	f894 12a8 	ldrb.w	r1, [r4, #680]	; 0x2a8
 8005e2c:	f001 031f 	and.w	r3, r1, #31
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d00e      	beq.n	8005e52 <USBD_LL_SetupStage+0x46>
 8005e34:	2b02      	cmp	r3, #2
 8005e36:	d011      	beq.n	8005e5c <USBD_LL_SetupStage+0x50>
 8005e38:	b12b      	cbz	r3, 8005e46 <USBD_LL_SetupStage+0x3a>
    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005e3a:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8005e3e:	4620      	mov	r0, r4
 8005e40:	f000 fdf9 	bl	8006a36 <USBD_LL_StallEP>
      break;
 8005e44:	e003      	b.n	8005e4e <USBD_LL_SetupStage+0x42>
      USBD_StdDevReq(pdev, &pdev->request);
 8005e46:	4629      	mov	r1, r5
 8005e48:	4620      	mov	r0, r4
 8005e4a:	f000 f921 	bl	8006090 <USBD_StdDevReq>
  }

  return USBD_OK;
}
 8005e4e:	2000      	movs	r0, #0
 8005e50:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 8005e52:	4629      	mov	r1, r5
 8005e54:	4620      	mov	r0, r4
 8005e56:	f000 fad5 	bl	8006404 <USBD_StdItfReq>
      break;
 8005e5a:	e7f8      	b.n	8005e4e <USBD_LL_SetupStage+0x42>
      USBD_StdEPReq(pdev, &pdev->request);
 8005e5c:	4629      	mov	r1, r5
 8005e5e:	4620      	mov	r0, r4
 8005e60:	f000 fb00 	bl	8006464 <USBD_StdEPReq>
      break;
 8005e64:	e7f3      	b.n	8005e4e <USBD_LL_SetupStage+0x42>

08005e66 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005e66:	b538      	push	{r3, r4, r5, lr}
 8005e68:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005e6a:	460d      	mov	r5, r1
 8005e6c:	bb81      	cbnz	r1, 8005ed0 <USBD_LL_DataOutStage+0x6a>
 8005e6e:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005e70:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8005e74:	2a03      	cmp	r2, #3
 8005e76:	d003      	beq.n	8005e80 <USBD_LL_DataOutStage+0x1a>
        USBD_CtlSendStatus(pdev);
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8005e78:	2a05      	cmp	r2, #5
 8005e7a:	d022      	beq.n	8005ec2 <USBD_LL_DataOutStage+0x5c>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8005e7c:	4608      	mov	r0, r1
 8005e7e:	e031      	b.n	8005ee4 <USBD_LL_DataOutStage+0x7e>
      if (pep->rem_length > pep->maxpacket)
 8005e80:	f8d0 1160 	ldr.w	r1, [r0, #352]	; 0x160
 8005e84:	f8d0 2164 	ldr.w	r2, [r0, #356]	; 0x164
 8005e88:	4291      	cmp	r1, r2
 8005e8a:	d90b      	bls.n	8005ea4 <USBD_LL_DataOutStage+0x3e>
        pep->rem_length -= pep->maxpacket;
 8005e8c:	1a89      	subs	r1, r1, r2
 8005e8e:	f8c0 1160 	str.w	r1, [r0, #352]	; 0x160
        USBD_CtlContinueRx(pdev, pdata,
 8005e92:	428a      	cmp	r2, r1
 8005e94:	bf8c      	ite	hi
 8005e96:	b28a      	uxthhi	r2, r1
 8005e98:	b292      	uxthls	r2, r2
 8005e9a:	4619      	mov	r1, r3
 8005e9c:	f000 fc00 	bl	80066a0 <USBD_CtlContinueRx>
  return USBD_OK;
 8005ea0:	4628      	mov	r0, r5
 8005ea2:	e01f      	b.n	8005ee4 <USBD_LL_DataOutStage+0x7e>
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005ea4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8005ea8:	691b      	ldr	r3, [r3, #16]
 8005eaa:	b11b      	cbz	r3, 8005eb4 <USBD_LL_DataOutStage+0x4e>
 8005eac:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8005eb0:	2a03      	cmp	r2, #3
 8005eb2:	d004      	beq.n	8005ebe <USBD_LL_DataOutStage+0x58>
        USBD_CtlSendStatus(pdev);
 8005eb4:	4620      	mov	r0, r4
 8005eb6:	f000 fbfb 	bl	80066b0 <USBD_CtlSendStatus>
  return USBD_OK;
 8005eba:	4628      	mov	r0, r5
 8005ebc:	e012      	b.n	8005ee4 <USBD_LL_DataOutStage+0x7e>
          pdev->pClass->EP0_RxReady(pdev);
 8005ebe:	4798      	blx	r3
 8005ec0:	e7f8      	b.n	8005eb4 <USBD_LL_DataOutStage+0x4e>
        pdev->ep0_state = USBD_EP0_IDLE;
 8005ec2:	2100      	movs	r1, #0
 8005ec4:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8005ec8:	f000 fdb5 	bl	8006a36 <USBD_LL_StallEP>
  return USBD_OK;
 8005ecc:	4628      	mov	r0, r5
 8005ece:	e009      	b.n	8005ee4 <USBD_LL_DataOutStage+0x7e>
  else if ((pdev->pClass->DataOut != NULL) &&
 8005ed0:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8005ed4:	699b      	ldr	r3, [r3, #24]
 8005ed6:	b133      	cbz	r3, 8005ee6 <USBD_LL_DataOutStage+0x80>
 8005ed8:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8005edc:	2a03      	cmp	r2, #3
 8005ede:	d104      	bne.n	8005eea <USBD_LL_DataOutStage+0x84>
    pdev->pClass->DataOut(pdev, epnum);
 8005ee0:	4798      	blx	r3
  return USBD_OK;
 8005ee2:	2000      	movs	r0, #0
}
 8005ee4:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8005ee6:	2002      	movs	r0, #2
 8005ee8:	e7fc      	b.n	8005ee4 <USBD_LL_DataOutStage+0x7e>
 8005eea:	2002      	movs	r0, #2
 8005eec:	e7fa      	b.n	8005ee4 <USBD_LL_DataOutStage+0x7e>

08005eee <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005eee:	b538      	push	{r3, r4, r5, lr}
 8005ef0:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005ef2:	460d      	mov	r5, r1
 8005ef4:	2900      	cmp	r1, #0
 8005ef6:	d152      	bne.n	8005f9e <USBD_LL_DataInStage+0xb0>
 8005ef8:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005efa:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8005efe:	2a02      	cmp	r2, #2
 8005f00:	d00b      	beq.n	8005f1a <USBD_LL_DataInStage+0x2c>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005f02:	f032 0304 	bics.w	r3, r2, #4
 8005f06:	d102      	bne.n	8005f0e <USBD_LL_DataInStage+0x20>
          (pdev->ep0_state == USBD_EP0_IDLE))
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8005f08:	2180      	movs	r1, #128	; 0x80
 8005f0a:	f000 fd94 	bl	8006a36 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8005f0e:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8005f12:	2b01      	cmp	r3, #1
 8005f14:	d03e      	beq.n	8005f94 <USBD_LL_DataInStage+0xa6>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8005f16:	4628      	mov	r0, r5
}
 8005f18:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 8005f1a:	6a01      	ldr	r1, [r0, #32]
 8005f1c:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8005f1e:	4291      	cmp	r1, r2
 8005f20:	d81b      	bhi.n	8005f5a <USBD_LL_DataInStage+0x6c>
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005f22:	69c1      	ldr	r1, [r0, #28]
 8005f24:	fbb1 f3f2 	udiv	r3, r1, r2
 8005f28:	fb02 1313 	mls	r3, r2, r3, r1
 8005f2c:	b92b      	cbnz	r3, 8005f3a <USBD_LL_DataInStage+0x4c>
 8005f2e:	428a      	cmp	r2, r1
 8005f30:	d803      	bhi.n	8005f3a <USBD_LL_DataInStage+0x4c>
            (pep->total_length >= pep->maxpacket) &&
 8005f32:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
 8005f36:	4299      	cmp	r1, r3
 8005f38:	d31c      	bcc.n	8005f74 <USBD_LL_DataInStage+0x86>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005f3a:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8005f3e:	68db      	ldr	r3, [r3, #12]
 8005f40:	b11b      	cbz	r3, 8005f4a <USBD_LL_DataInStage+0x5c>
 8005f42:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 8005f46:	2a03      	cmp	r2, #3
 8005f48:	d021      	beq.n	8005f8e <USBD_LL_DataInStage+0xa0>
          USBD_LL_StallEP(pdev, 0x80U);
 8005f4a:	2180      	movs	r1, #128	; 0x80
 8005f4c:	4620      	mov	r0, r4
 8005f4e:	f000 fd72 	bl	8006a36 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8005f52:	4620      	mov	r0, r4
 8005f54:	f000 fbb7 	bl	80066c6 <USBD_CtlReceiveStatus>
 8005f58:	e7d9      	b.n	8005f0e <USBD_LL_DataInStage+0x20>
        pep->rem_length -= pep->maxpacket;
 8005f5a:	1a8a      	subs	r2, r1, r2
 8005f5c:	6202      	str	r2, [r0, #32]
        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8005f5e:	b292      	uxth	r2, r2
 8005f60:	4619      	mov	r1, r3
 8005f62:	f000 fb86 	bl	8006672 <USBD_CtlContinueSendData>
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005f66:	2300      	movs	r3, #0
 8005f68:	461a      	mov	r2, r3
 8005f6a:	4619      	mov	r1, r3
 8005f6c:	4620      	mov	r0, r4
 8005f6e:	f000 fd99 	bl	8006aa4 <USBD_LL_PrepareReceive>
 8005f72:	e7cc      	b.n	8005f0e <USBD_LL_DataInStage+0x20>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005f74:	2200      	movs	r2, #0
 8005f76:	4611      	mov	r1, r2
 8005f78:	f000 fb7b 	bl	8006672 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005f7c:	2100      	movs	r1, #0
 8005f7e:	f8c4 1298 	str.w	r1, [r4, #664]	; 0x298
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005f82:	460b      	mov	r3, r1
 8005f84:	460a      	mov	r2, r1
 8005f86:	4620      	mov	r0, r4
 8005f88:	f000 fd8c 	bl	8006aa4 <USBD_LL_PrepareReceive>
 8005f8c:	e7bf      	b.n	8005f0e <USBD_LL_DataInStage+0x20>
            pdev->pClass->EP0_TxSent(pdev);
 8005f8e:	4620      	mov	r0, r4
 8005f90:	4798      	blx	r3
 8005f92:	e7da      	b.n	8005f4a <USBD_LL_DataInStage+0x5c>
      pdev->dev_test_mode = 0U;
 8005f94:	2300      	movs	r3, #0
 8005f96:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
  return USBD_OK;
 8005f9a:	4628      	mov	r0, r5
 8005f9c:	e7bc      	b.n	8005f18 <USBD_LL_DataInStage+0x2a>
  else if ((pdev->pClass->DataIn != NULL) &&
 8005f9e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8005fa2:	695b      	ldr	r3, [r3, #20]
 8005fa4:	b133      	cbz	r3, 8005fb4 <USBD_LL_DataInStage+0xc6>
 8005fa6:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8005faa:	2a03      	cmp	r2, #3
 8005fac:	d104      	bne.n	8005fb8 <USBD_LL_DataInStage+0xca>
    pdev->pClass->DataIn(pdev, epnum);
 8005fae:	4798      	blx	r3
  return USBD_OK;
 8005fb0:	2000      	movs	r0, #0
    pdev->pClass->DataIn(pdev, epnum);
 8005fb2:	e7b1      	b.n	8005f18 <USBD_LL_DataInStage+0x2a>
    return USBD_FAIL;
 8005fb4:	2002      	movs	r0, #2
 8005fb6:	e7af      	b.n	8005f18 <USBD_LL_DataInStage+0x2a>
 8005fb8:	2002      	movs	r0, #2
 8005fba:	e7ad      	b.n	8005f18 <USBD_LL_DataInStage+0x2a>

08005fbc <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005fbc:	b570      	push	{r4, r5, r6, lr}
 8005fbe:	4604      	mov	r4, r0
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005fc0:	2340      	movs	r3, #64	; 0x40
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	4611      	mov	r1, r2
 8005fc6:	f000 fd23 	bl	8006a10 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005fca:	2501      	movs	r5, #1
 8005fcc:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005fd0:	2640      	movs	r6, #64	; 0x40
 8005fd2:	f8c4 6164 	str.w	r6, [r4, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005fd6:	4633      	mov	r3, r6
 8005fd8:	2200      	movs	r2, #0
 8005fda:	2180      	movs	r1, #128	; 0x80
 8005fdc:	4620      	mov	r0, r4
 8005fde:	f000 fd17 	bl	8006a10 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005fe2:	61a5      	str	r5, [r4, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005fe4:	6266      	str	r6, [r4, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005fe6:	f884 529c 	strb.w	r5, [r4, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005fea:	2300      	movs	r3, #0
 8005fec:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  pdev->dev_config = 0U;
 8005ff0:	6063      	str	r3, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 8005ff2:	f8c4 32a4 	str.w	r3, [r4, #676]	; 0x2a4

  if (pdev->pClassData)
 8005ff6:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8005ffa:	b12b      	cbz	r3, 8006008 <USBD_LL_Reset+0x4c>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005ffc:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8006000:	685b      	ldr	r3, [r3, #4]
 8006002:	2100      	movs	r1, #0
 8006004:	4620      	mov	r0, r4
 8006006:	4798      	blx	r3
  }

  return USBD_OK;
}
 8006008:	2000      	movs	r0, #0
 800600a:	bd70      	pop	{r4, r5, r6, pc}

0800600c <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800600c:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 800600e:	2000      	movs	r0, #0
 8006010:	4770      	bx	lr

08006012 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8006012:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006016:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800601a:	2304      	movs	r3, #4
 800601c:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 8006020:	2000      	movs	r0, #0
 8006022:	4770      	bx	lr

08006024 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006024:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006028:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 800602a:	bf04      	itt	eq
 800602c:	f890 329d 	ldrbeq.w	r3, [r0, #669]	; 0x29d
 8006030:	f880 329c 	strbeq.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 8006034:	2000      	movs	r0, #0
 8006036:	4770      	bx	lr

08006038 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006038:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800603a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800603e:	2b03      	cmp	r3, #3
 8006040:	d001      	beq.n	8006046 <USBD_LL_SOF+0xe>
      pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
}
 8006042:	2000      	movs	r0, #0
 8006044:	bd08      	pop	{r3, pc}
    if (pdev->pClass->SOF != NULL)
 8006046:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800604a:	69db      	ldr	r3, [r3, #28]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d0f8      	beq.n	8006042 <USBD_LL_SOF+0xa>
      pdev->pClass->SOF(pdev);
 8006050:	4798      	blx	r3
 8006052:	e7f6      	b.n	8006042 <USBD_LL_SOF+0xa>

08006054 <USBD_ParseSetupRequest>:
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
  req->bmRequest = *(uint8_t *)(pdata);
 8006054:	780b      	ldrb	r3, [r1, #0]
 8006056:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8006058:	784b      	ldrb	r3, [r1, #1]
 800605a:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800605c:	78ca      	ldrb	r2, [r1, #3]
 800605e:	788b      	ldrb	r3, [r1, #2]
 8006060:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8006064:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8006066:	794a      	ldrb	r2, [r1, #5]
 8006068:	790b      	ldrb	r3, [r1, #4]
 800606a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800606e:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8006070:	79ca      	ldrb	r2, [r1, #7]
 8006072:	798b      	ldrb	r3, [r1, #6]
 8006074:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8006078:	80c3      	strh	r3, [r0, #6]

}
 800607a:	4770      	bx	lr

0800607c <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800607c:	b510      	push	{r4, lr}
 800607e:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 8006080:	2180      	movs	r1, #128	; 0x80
 8006082:	f000 fcd8 	bl	8006a36 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8006086:	2100      	movs	r1, #0
 8006088:	4620      	mov	r0, r4
 800608a:	f000 fcd4 	bl	8006a36 <USBD_LL_StallEP>
}
 800608e:	bd10      	pop	{r4, pc}

08006090 <USBD_StdDevReq>:
{
 8006090:	b530      	push	{r4, r5, lr}
 8006092:	b083      	sub	sp, #12
 8006094:	4605      	mov	r5, r0
 8006096:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006098:	780b      	ldrb	r3, [r1, #0]
 800609a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800609e:	2b20      	cmp	r3, #32
 80060a0:	d005      	beq.n	80060ae <USBD_StdDevReq+0x1e>
 80060a2:	2b40      	cmp	r3, #64	; 0x40
 80060a4:	d003      	beq.n	80060ae <USBD_StdDevReq+0x1e>
 80060a6:	b15b      	cbz	r3, 80060c0 <USBD_StdDevReq+0x30>
      USBD_CtlError(pdev, req);
 80060a8:	f7ff ffe8 	bl	800607c <USBD_CtlError>
      break;
 80060ac:	e005      	b.n	80060ba <USBD_StdDevReq+0x2a>
      pdev->pClass->Setup(pdev, req);
 80060ae:	f8d5 32b4 	ldr.w	r3, [r5, #692]	; 0x2b4
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	4621      	mov	r1, r4
 80060b6:	4628      	mov	r0, r5
 80060b8:	4798      	blx	r3
}
 80060ba:	2000      	movs	r0, #0
 80060bc:	b003      	add	sp, #12
 80060be:	bd30      	pop	{r4, r5, pc}
      switch (req->bRequest)
 80060c0:	784b      	ldrb	r3, [r1, #1]
 80060c2:	2b09      	cmp	r3, #9
 80060c4:	f200 8198 	bhi.w	80063f8 <USBD_StdDevReq+0x368>
 80060c8:	e8df f013 	tbh	[pc, r3, lsl #1]
 80060cc:	0184015f 	.word	0x0184015f
 80060d0:	017b0196 	.word	0x017b0196
 80060d4:	00c90196 	.word	0x00c90196
 80060d8:	0196000a 	.word	0x0196000a
 80060dc:	00ee0140 	.word	0x00ee0140
  uint16_t len = 0U;
 80060e0:	2300      	movs	r3, #0
 80060e2:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 80060e6:	884a      	ldrh	r2, [r1, #2]
 80060e8:	0a13      	lsrs	r3, r2, #8
 80060ea:	3b01      	subs	r3, #1
 80060ec:	2b06      	cmp	r3, #6
 80060ee:	f200 80a4 	bhi.w	800623a <USBD_StdDevReq+0x1aa>
 80060f2:	e8df f003 	tbb	[pc, r3]
 80060f6:	1804      	.short	0x1804
 80060f8:	86a2a22c 	.word	0x86a2a22c
 80060fc:	93          	.byte	0x93
 80060fd:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80060fe:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f10d 0106 	add.w	r1, sp, #6
 8006108:	7c00      	ldrb	r0, [r0, #16]
 800610a:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 800610c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8006110:	2a00      	cmp	r2, #0
 8006112:	f000 809f 	beq.w	8006254 <USBD_StdDevReq+0x1c4>
 8006116:	88e3      	ldrh	r3, [r4, #6]
 8006118:	2b00      	cmp	r3, #0
 800611a:	f040 8092 	bne.w	8006242 <USBD_StdDevReq+0x1b2>
      (void)USBD_CtlSendStatus(pdev);
 800611e:	4628      	mov	r0, r5
 8006120:	f000 fac6 	bl	80066b0 <USBD_CtlSendStatus>
 8006124:	e7c9      	b.n	80060ba <USBD_StdDevReq+0x2a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006126:	7c03      	ldrb	r3, [r0, #16]
 8006128:	b943      	cbnz	r3, 800613c <USBD_StdDevReq+0xac>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800612a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800612e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006130:	f10d 0006 	add.w	r0, sp, #6
 8006134:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006136:	2302      	movs	r3, #2
 8006138:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800613a:	e7e7      	b.n	800610c <USBD_StdDevReq+0x7c>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800613c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8006140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006142:	f10d 0006 	add.w	r0, sp, #6
 8006146:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006148:	2302      	movs	r3, #2
 800614a:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800614c:	e7de      	b.n	800610c <USBD_StdDevReq+0x7c>
      switch ((uint8_t)(req->wValue))
 800614e:	b2d2      	uxtb	r2, r2
 8006150:	2a05      	cmp	r2, #5
 8006152:	d852      	bhi.n	80061fa <USBD_StdDevReq+0x16a>
 8006154:	e8df f002 	tbb	[pc, r2]
 8006158:	2a1d1003 	.word	0x2a1d1003
 800615c:	4437      	.short	0x4437
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800615e:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	b123      	cbz	r3, 8006170 <USBD_StdDevReq+0xe0>
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006166:	f10d 0106 	add.w	r1, sp, #6
 800616a:	7c00      	ldrb	r0, [r0, #16]
 800616c:	4798      	blx	r3
  if (err != 0U)
 800616e:	e7cd      	b.n	800610c <USBD_StdDevReq+0x7c>
            USBD_CtlError(pdev, req);
 8006170:	4621      	mov	r1, r4
 8006172:	f7ff ff83 	bl	800607c <USBD_CtlError>
  if (err != 0U)
 8006176:	e7a0      	b.n	80060ba <USBD_StdDevReq+0x2a>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006178:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800617c:	689b      	ldr	r3, [r3, #8]
 800617e:	b123      	cbz	r3, 800618a <USBD_StdDevReq+0xfa>
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006180:	f10d 0106 	add.w	r1, sp, #6
 8006184:	7c00      	ldrb	r0, [r0, #16]
 8006186:	4798      	blx	r3
  if (err != 0U)
 8006188:	e7c0      	b.n	800610c <USBD_StdDevReq+0x7c>
            USBD_CtlError(pdev, req);
 800618a:	4621      	mov	r1, r4
 800618c:	f7ff ff76 	bl	800607c <USBD_CtlError>
  if (err != 0U)
 8006190:	e793      	b.n	80060ba <USBD_StdDevReq+0x2a>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006192:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8006196:	68db      	ldr	r3, [r3, #12]
 8006198:	b123      	cbz	r3, 80061a4 <USBD_StdDevReq+0x114>
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800619a:	f10d 0106 	add.w	r1, sp, #6
 800619e:	7c00      	ldrb	r0, [r0, #16]
 80061a0:	4798      	blx	r3
  if (err != 0U)
 80061a2:	e7b3      	b.n	800610c <USBD_StdDevReq+0x7c>
            USBD_CtlError(pdev, req);
 80061a4:	4621      	mov	r1, r4
 80061a6:	f7ff ff69 	bl	800607c <USBD_CtlError>
  if (err != 0U)
 80061aa:	e786      	b.n	80060ba <USBD_StdDevReq+0x2a>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80061ac:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80061b0:	691b      	ldr	r3, [r3, #16]
 80061b2:	b123      	cbz	r3, 80061be <USBD_StdDevReq+0x12e>
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80061b4:	f10d 0106 	add.w	r1, sp, #6
 80061b8:	7c00      	ldrb	r0, [r0, #16]
 80061ba:	4798      	blx	r3
  if (err != 0U)
 80061bc:	e7a6      	b.n	800610c <USBD_StdDevReq+0x7c>
            USBD_CtlError(pdev, req);
 80061be:	4621      	mov	r1, r4
 80061c0:	f7ff ff5c 	bl	800607c <USBD_CtlError>
  if (err != 0U)
 80061c4:	e779      	b.n	80060ba <USBD_StdDevReq+0x2a>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80061c6:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80061ca:	695b      	ldr	r3, [r3, #20]
 80061cc:	b123      	cbz	r3, 80061d8 <USBD_StdDevReq+0x148>
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80061ce:	f10d 0106 	add.w	r1, sp, #6
 80061d2:	7c00      	ldrb	r0, [r0, #16]
 80061d4:	4798      	blx	r3
  if (err != 0U)
 80061d6:	e799      	b.n	800610c <USBD_StdDevReq+0x7c>
            USBD_CtlError(pdev, req);
 80061d8:	4621      	mov	r1, r4
 80061da:	f7ff ff4f 	bl	800607c <USBD_CtlError>
  if (err != 0U)
 80061de:	e76c      	b.n	80060ba <USBD_StdDevReq+0x2a>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80061e0:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80061e4:	699b      	ldr	r3, [r3, #24]
 80061e6:	b123      	cbz	r3, 80061f2 <USBD_StdDevReq+0x162>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80061e8:	f10d 0106 	add.w	r1, sp, #6
 80061ec:	7c00      	ldrb	r0, [r0, #16]
 80061ee:	4798      	blx	r3
  if (err != 0U)
 80061f0:	e78c      	b.n	800610c <USBD_StdDevReq+0x7c>
            USBD_CtlError(pdev, req);
 80061f2:	4621      	mov	r1, r4
 80061f4:	f7ff ff42 	bl	800607c <USBD_CtlError>
  if (err != 0U)
 80061f8:	e75f      	b.n	80060ba <USBD_StdDevReq+0x2a>
          USBD_CtlError(pdev, req);
 80061fa:	4621      	mov	r1, r4
 80061fc:	f7ff ff3e 	bl	800607c <USBD_CtlError>
  if (err != 0U)
 8006200:	e75b      	b.n	80060ba <USBD_StdDevReq+0x2a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006202:	7c03      	ldrb	r3, [r0, #16]
 8006204:	b933      	cbnz	r3, 8006214 <USBD_StdDevReq+0x184>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006206:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800620a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800620c:	f10d 0006 	add.w	r0, sp, #6
 8006210:	4798      	blx	r3
  if (err != 0U)
 8006212:	e77b      	b.n	800610c <USBD_StdDevReq+0x7c>
        USBD_CtlError(pdev, req);
 8006214:	4621      	mov	r1, r4
 8006216:	f7ff ff31 	bl	800607c <USBD_CtlError>
  if (err != 0U)
 800621a:	e74e      	b.n	80060ba <USBD_StdDevReq+0x2a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800621c:	7c03      	ldrb	r3, [r0, #16]
 800621e:	b943      	cbnz	r3, 8006232 <USBD_StdDevReq+0x1a2>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006220:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8006224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006226:	f10d 0006 	add.w	r0, sp, #6
 800622a:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800622c:	2307      	movs	r3, #7
 800622e:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8006230:	e76c      	b.n	800610c <USBD_StdDevReq+0x7c>
        USBD_CtlError(pdev, req);
 8006232:	4621      	mov	r1, r4
 8006234:	f7ff ff22 	bl	800607c <USBD_CtlError>
  if (err != 0U)
 8006238:	e73f      	b.n	80060ba <USBD_StdDevReq+0x2a>
      USBD_CtlError(pdev, req);
 800623a:	4621      	mov	r1, r4
 800623c:	f7ff ff1e 	bl	800607c <USBD_CtlError>
    return;
 8006240:	e73b      	b.n	80060ba <USBD_StdDevReq+0x2a>
      len = MIN(len, req->wLength);
 8006242:	429a      	cmp	r2, r3
 8006244:	bf28      	it	cs
 8006246:	461a      	movcs	r2, r3
 8006248:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800624c:	4601      	mov	r1, r0
 800624e:	4628      	mov	r0, r5
 8006250:	f000 fa02 	bl	8006658 <USBD_CtlSendData>
    if (req->wLength == 0U)
 8006254:	88e3      	ldrh	r3, [r4, #6]
 8006256:	2b00      	cmp	r3, #0
 8006258:	f47f af2f 	bne.w	80060ba <USBD_StdDevReq+0x2a>
 800625c:	e75f      	b.n	800611e <USBD_StdDevReq+0x8e>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800625e:	888b      	ldrh	r3, [r1, #4]
 8006260:	b9eb      	cbnz	r3, 800629e <USBD_StdDevReq+0x20e>
 8006262:	88cb      	ldrh	r3, [r1, #6]
 8006264:	b9db      	cbnz	r3, 800629e <USBD_StdDevReq+0x20e>
 8006266:	884b      	ldrh	r3, [r1, #2]
 8006268:	2b7f      	cmp	r3, #127	; 0x7f
 800626a:	d818      	bhi.n	800629e <USBD_StdDevReq+0x20e>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800626c:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8006270:	2a03      	cmp	r2, #3
 8006272:	d00d      	beq.n	8006290 <USBD_StdDevReq+0x200>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006274:	b2dc      	uxtb	r4, r3
      pdev->dev_address = dev_addr;
 8006276:	f880 429e 	strb.w	r4, [r0, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800627a:	4621      	mov	r1, r4
 800627c:	f000 fc02 	bl	8006a84 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8006280:	4628      	mov	r0, r5
 8006282:	f000 fa15 	bl	80066b0 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8006286:	b134      	cbz	r4, 8006296 <USBD_StdDevReq+0x206>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006288:	2302      	movs	r3, #2
 800628a:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 800628e:	e714      	b.n	80060ba <USBD_StdDevReq+0x2a>
      USBD_CtlError(pdev, req);
 8006290:	f7ff fef4 	bl	800607c <USBD_CtlError>
 8006294:	e711      	b.n	80060ba <USBD_StdDevReq+0x2a>
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006296:	2301      	movs	r3, #1
 8006298:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 800629c:	e70d      	b.n	80060ba <USBD_StdDevReq+0x2a>
    USBD_CtlError(pdev, req);
 800629e:	4621      	mov	r1, r4
 80062a0:	4628      	mov	r0, r5
 80062a2:	f7ff feeb 	bl	800607c <USBD_CtlError>
 80062a6:	e708      	b.n	80060ba <USBD_StdDevReq+0x2a>
  cfgidx = (uint8_t)(req->wValue);
 80062a8:	788b      	ldrb	r3, [r1, #2]
 80062aa:	4a55      	ldr	r2, [pc, #340]	; (8006400 <USBD_StdDevReq+0x370>)
 80062ac:	7013      	strb	r3, [r2, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80062ae:	2b01      	cmp	r3, #1
 80062b0:	d80d      	bhi.n	80062ce <USBD_StdDevReq+0x23e>
    switch (pdev->dev_state)
 80062b2:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80062b6:	2a02      	cmp	r2, #2
 80062b8:	d00c      	beq.n	80062d4 <USBD_StdDevReq+0x244>
 80062ba:	2a03      	cmp	r2, #3
 80062bc:	d020      	beq.n	8006300 <USBD_StdDevReq+0x270>
        USBD_CtlError(pdev, req);
 80062be:	f7ff fedd 	bl	800607c <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80062c2:	4b4f      	ldr	r3, [pc, #316]	; (8006400 <USBD_StdDevReq+0x370>)
 80062c4:	7819      	ldrb	r1, [r3, #0]
 80062c6:	4628      	mov	r0, r5
 80062c8:	f7ff fd99 	bl	8005dfe <USBD_ClrClassConfig>
        break;
 80062cc:	e6f5      	b.n	80060ba <USBD_StdDevReq+0x2a>
    USBD_CtlError(pdev, req);
 80062ce:	f7ff fed5 	bl	800607c <USBD_CtlError>
 80062d2:	e6f2      	b.n	80060ba <USBD_StdDevReq+0x2a>
        if (cfgidx)
 80062d4:	b18b      	cbz	r3, 80062fa <USBD_StdDevReq+0x26a>
          pdev->dev_config = cfgidx;
 80062d6:	2101      	movs	r1, #1
 80062d8:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80062da:	2303      	movs	r3, #3
 80062dc:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80062e0:	f7ff fd81 	bl	8005de6 <USBD_SetClassConfig>
 80062e4:	2802      	cmp	r0, #2
 80062e6:	d003      	beq.n	80062f0 <USBD_StdDevReq+0x260>
          USBD_CtlSendStatus(pdev);
 80062e8:	4628      	mov	r0, r5
 80062ea:	f000 f9e1 	bl	80066b0 <USBD_CtlSendStatus>
 80062ee:	e6e4      	b.n	80060ba <USBD_StdDevReq+0x2a>
            USBD_CtlError(pdev, req);
 80062f0:	4621      	mov	r1, r4
 80062f2:	4628      	mov	r0, r5
 80062f4:	f7ff fec2 	bl	800607c <USBD_CtlError>
            return;
 80062f8:	e6df      	b.n	80060ba <USBD_StdDevReq+0x2a>
          USBD_CtlSendStatus(pdev);
 80062fa:	f000 f9d9 	bl	80066b0 <USBD_CtlSendStatus>
 80062fe:	e6dc      	b.n	80060ba <USBD_StdDevReq+0x2a>
        if (cfgidx == 0U)
 8006300:	b18b      	cbz	r3, 8006326 <USBD_StdDevReq+0x296>
        else if (cfgidx != pdev->dev_config)
 8006302:	6841      	ldr	r1, [r0, #4]
 8006304:	2901      	cmp	r1, #1
 8006306:	d01e      	beq.n	8006346 <USBD_StdDevReq+0x2b6>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006308:	b2c9      	uxtb	r1, r1
 800630a:	f7ff fd78 	bl	8005dfe <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800630e:	4b3c      	ldr	r3, [pc, #240]	; (8006400 <USBD_StdDevReq+0x370>)
 8006310:	7819      	ldrb	r1, [r3, #0]
 8006312:	6069      	str	r1, [r5, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006314:	4628      	mov	r0, r5
 8006316:	f7ff fd66 	bl	8005de6 <USBD_SetClassConfig>
 800631a:	2802      	cmp	r0, #2
 800631c:	d00e      	beq.n	800633c <USBD_StdDevReq+0x2ac>
          USBD_CtlSendStatus(pdev);
 800631e:	4628      	mov	r0, r5
 8006320:	f000 f9c6 	bl	80066b0 <USBD_CtlSendStatus>
 8006324:	e6c9      	b.n	80060ba <USBD_StdDevReq+0x2a>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006326:	2302      	movs	r3, #2
 8006328:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800632c:	2100      	movs	r1, #0
 800632e:	6041      	str	r1, [r0, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8006330:	f7ff fd65 	bl	8005dfe <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8006334:	4628      	mov	r0, r5
 8006336:	f000 f9bb 	bl	80066b0 <USBD_CtlSendStatus>
 800633a:	e6be      	b.n	80060ba <USBD_StdDevReq+0x2a>
            USBD_CtlError(pdev, req);
 800633c:	4621      	mov	r1, r4
 800633e:	4628      	mov	r0, r5
 8006340:	f7ff fe9c 	bl	800607c <USBD_CtlError>
            return;
 8006344:	e6b9      	b.n	80060ba <USBD_StdDevReq+0x2a>
          USBD_CtlSendStatus(pdev);
 8006346:	f000 f9b3 	bl	80066b0 <USBD_CtlSendStatus>
 800634a:	e6b6      	b.n	80060ba <USBD_StdDevReq+0x2a>
  if (req->wLength != 1U)
 800634c:	88cb      	ldrh	r3, [r1, #6]
 800634e:	2b01      	cmp	r3, #1
 8006350:	d10a      	bne.n	8006368 <USBD_StdDevReq+0x2d8>
    switch (pdev->dev_state)
 8006352:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006356:	2b02      	cmp	r3, #2
 8006358:	d909      	bls.n	800636e <USBD_StdDevReq+0x2de>
 800635a:	2b03      	cmp	r3, #3
 800635c:	d108      	bne.n	8006370 <USBD_StdDevReq+0x2e0>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800635e:	2201      	movs	r2, #1
 8006360:	1d01      	adds	r1, r0, #4
 8006362:	f000 f979 	bl	8006658 <USBD_CtlSendData>
        break;
 8006366:	e6a8      	b.n	80060ba <USBD_StdDevReq+0x2a>
    USBD_CtlError(pdev, req);
 8006368:	f7ff fe88 	bl	800607c <USBD_CtlError>
 800636c:	e6a5      	b.n	80060ba <USBD_StdDevReq+0x2a>
    switch (pdev->dev_state)
 800636e:	b923      	cbnz	r3, 800637a <USBD_StdDevReq+0x2ea>
        USBD_CtlError(pdev, req);
 8006370:	4621      	mov	r1, r4
 8006372:	4628      	mov	r0, r5
 8006374:	f7ff fe82 	bl	800607c <USBD_CtlError>
        break;
 8006378:	e69f      	b.n	80060ba <USBD_StdDevReq+0x2a>
        pdev->dev_default_config = 0U;
 800637a:	4601      	mov	r1, r0
 800637c:	2300      	movs	r3, #0
 800637e:	f841 3f08 	str.w	r3, [r1, #8]!
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8006382:	2201      	movs	r2, #1
 8006384:	f000 f968 	bl	8006658 <USBD_CtlSendData>
        break;
 8006388:	e697      	b.n	80060ba <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 800638a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800638e:	3b01      	subs	r3, #1
 8006390:	2b02      	cmp	r3, #2
 8006392:	d813      	bhi.n	80063bc <USBD_StdDevReq+0x32c>
      if (req->wLength != 0x2U)
 8006394:	88cb      	ldrh	r3, [r1, #6]
 8006396:	2b02      	cmp	r3, #2
 8006398:	d10d      	bne.n	80063b6 <USBD_StdDevReq+0x326>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800639a:	2301      	movs	r3, #1
 800639c:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup)
 800639e:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 80063a2:	b10b      	cbz	r3, 80063a8 <USBD_StdDevReq+0x318>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80063a4:	2303      	movs	r3, #3
 80063a6:	60c3      	str	r3, [r0, #12]
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80063a8:	2202      	movs	r2, #2
 80063aa:	f105 010c 	add.w	r1, r5, #12
 80063ae:	4628      	mov	r0, r5
 80063b0:	f000 f952 	bl	8006658 <USBD_CtlSendData>
      break;
 80063b4:	e681      	b.n	80060ba <USBD_StdDevReq+0x2a>
        USBD_CtlError(pdev, req);
 80063b6:	f7ff fe61 	bl	800607c <USBD_CtlError>
        break;
 80063ba:	e67e      	b.n	80060ba <USBD_StdDevReq+0x2a>
      USBD_CtlError(pdev, req);
 80063bc:	f7ff fe5e 	bl	800607c <USBD_CtlError>
      break;
 80063c0:	e67b      	b.n	80060ba <USBD_StdDevReq+0x2a>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80063c2:	884b      	ldrh	r3, [r1, #2]
 80063c4:	2b01      	cmp	r3, #1
 80063c6:	f47f ae78 	bne.w	80060ba <USBD_StdDevReq+0x2a>
    pdev->dev_remote_wakeup = 1U;
 80063ca:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80063ce:	f000 f96f 	bl	80066b0 <USBD_CtlSendStatus>
 80063d2:	e672      	b.n	80060ba <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 80063d4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80063d8:	3b01      	subs	r3, #1
 80063da:	2b02      	cmp	r3, #2
 80063dc:	d809      	bhi.n	80063f2 <USBD_StdDevReq+0x362>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80063de:	884b      	ldrh	r3, [r1, #2]
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	f47f ae6a 	bne.w	80060ba <USBD_StdDevReq+0x2a>
        pdev->dev_remote_wakeup = 0U;
 80063e6:	2300      	movs	r3, #0
 80063e8:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80063ec:	f000 f960 	bl	80066b0 <USBD_CtlSendStatus>
 80063f0:	e663      	b.n	80060ba <USBD_StdDevReq+0x2a>
      USBD_CtlError(pdev, req);
 80063f2:	f7ff fe43 	bl	800607c <USBD_CtlError>
      break;
 80063f6:	e660      	b.n	80060ba <USBD_StdDevReq+0x2a>
          USBD_CtlError(pdev, req);
 80063f8:	f7ff fe40 	bl	800607c <USBD_CtlError>
          break;
 80063fc:	e65d      	b.n	80060ba <USBD_StdDevReq+0x2a>
 80063fe:	bf00      	nop
 8006400:	20001820 	.word	0x20001820

08006404 <USBD_StdItfReq>:
{
 8006404:	b538      	push	{r3, r4, r5, lr}
 8006406:	4605      	mov	r5, r0
 8006408:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800640a:	780b      	ldrb	r3, [r1, #0]
 800640c:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8006410:	2a40      	cmp	r2, #64	; 0x40
 8006412:	d006      	beq.n	8006422 <USBD_StdItfReq+0x1e>
 8006414:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006418:	d003      	beq.n	8006422 <USBD_StdItfReq+0x1e>
      USBD_CtlError(pdev, req);
 800641a:	f7ff fe2f 	bl	800607c <USBD_CtlError>
}
 800641e:	2000      	movs	r0, #0
 8006420:	bd38      	pop	{r3, r4, r5, pc}
      switch (pdev->dev_state)
 8006422:	f895 329c 	ldrb.w	r3, [r5, #668]	; 0x29c
 8006426:	3b01      	subs	r3, #1
 8006428:	2b02      	cmp	r3, #2
 800642a:	d816      	bhi.n	800645a <USBD_StdItfReq+0x56>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800642c:	7923      	ldrb	r3, [r4, #4]
 800642e:	2b01      	cmp	r3, #1
 8006430:	d80e      	bhi.n	8006450 <USBD_StdItfReq+0x4c>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006432:	f8d5 32b4 	ldr.w	r3, [r5, #692]	; 0x2b4
 8006436:	689b      	ldr	r3, [r3, #8]
 8006438:	4621      	mov	r1, r4
 800643a:	4628      	mov	r0, r5
 800643c:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 800643e:	88e3      	ldrh	r3, [r4, #6]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d1ec      	bne.n	800641e <USBD_StdItfReq+0x1a>
 8006444:	2800      	cmp	r0, #0
 8006446:	d1ea      	bne.n	800641e <USBD_StdItfReq+0x1a>
              USBD_CtlSendStatus(pdev);
 8006448:	4628      	mov	r0, r5
 800644a:	f000 f931 	bl	80066b0 <USBD_CtlSendStatus>
 800644e:	e7e6      	b.n	800641e <USBD_StdItfReq+0x1a>
            USBD_CtlError(pdev, req);
 8006450:	4621      	mov	r1, r4
 8006452:	4628      	mov	r0, r5
 8006454:	f7ff fe12 	bl	800607c <USBD_CtlError>
 8006458:	e7e1      	b.n	800641e <USBD_StdItfReq+0x1a>
          USBD_CtlError(pdev, req);
 800645a:	4621      	mov	r1, r4
 800645c:	4628      	mov	r0, r5
 800645e:	f7ff fe0d 	bl	800607c <USBD_CtlError>
          break;
 8006462:	e7dc      	b.n	800641e <USBD_StdItfReq+0x1a>

08006464 <USBD_StdEPReq>:
{
 8006464:	b538      	push	{r3, r4, r5, lr}
 8006466:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006468:	780b      	ldrb	r3, [r1, #0]
 800646a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800646e:	2b20      	cmp	r3, #32
 8006470:	d005      	beq.n	800647e <USBD_StdEPReq+0x1a>
 8006472:	2b40      	cmp	r3, #64	; 0x40
 8006474:	d003      	beq.n	800647e <USBD_StdEPReq+0x1a>
 8006476:	b14b      	cbz	r3, 800648c <USBD_StdEPReq+0x28>
      USBD_CtlError(pdev, req);
 8006478:	f7ff fe00 	bl	800607c <USBD_CtlError>
      break;
 800647c:	e004      	b.n	8006488 <USBD_StdEPReq+0x24>
      pdev->pClass->Setup(pdev, req);
 800647e:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8006482:	689b      	ldr	r3, [r3, #8]
 8006484:	4620      	mov	r0, r4
 8006486:	4798      	blx	r3
}
 8006488:	2000      	movs	r0, #0
 800648a:	bd38      	pop	{r3, r4, r5, pc}
  ep_addr  = LOBYTE(req->wIndex);
 800648c:	888a      	ldrh	r2, [r1, #4]
 800648e:	b2d0      	uxtb	r0, r2
      switch (req->bRequest)
 8006490:	784b      	ldrb	r3, [r1, #1]
 8006492:	2b01      	cmp	r3, #1
 8006494:	d031      	beq.n	80064fa <USBD_StdEPReq+0x96>
 8006496:	2b03      	cmp	r3, #3
 8006498:	d005      	beq.n	80064a6 <USBD_StdEPReq+0x42>
 800649a:	2b00      	cmp	r3, #0
 800649c:	d056      	beq.n	800654c <USBD_StdEPReq+0xe8>
          USBD_CtlError(pdev, req);
 800649e:	4620      	mov	r0, r4
 80064a0:	f7ff fdec 	bl	800607c <USBD_CtlError>
          break;
 80064a4:	e7f0      	b.n	8006488 <USBD_StdEPReq+0x24>
          switch (pdev->dev_state)
 80064a6:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 80064aa:	2b02      	cmp	r3, #2
 80064ac:	d005      	beq.n	80064ba <USBD_StdEPReq+0x56>
 80064ae:	2b03      	cmp	r3, #3
 80064b0:	d013      	beq.n	80064da <USBD_StdEPReq+0x76>
              USBD_CtlError(pdev, req);
 80064b2:	4620      	mov	r0, r4
 80064b4:	f7ff fde2 	bl	800607c <USBD_CtlError>
              break;
 80064b8:	e7e6      	b.n	8006488 <USBD_StdEPReq+0x24>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80064ba:	f010 0f7f 	tst.w	r0, #127	; 0x7f
 80064be:	d008      	beq.n	80064d2 <USBD_StdEPReq+0x6e>
                USBD_LL_StallEP(pdev, ep_addr);
 80064c0:	4601      	mov	r1, r0
 80064c2:	4620      	mov	r0, r4
 80064c4:	f000 fab7 	bl	8006a36 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80064c8:	2180      	movs	r1, #128	; 0x80
 80064ca:	4620      	mov	r0, r4
 80064cc:	f000 fab3 	bl	8006a36 <USBD_LL_StallEP>
 80064d0:	e7da      	b.n	8006488 <USBD_StdEPReq+0x24>
                USBD_CtlError(pdev, req);
 80064d2:	4620      	mov	r0, r4
 80064d4:	f7ff fdd2 	bl	800607c <USBD_CtlError>
 80064d8:	e7d6      	b.n	8006488 <USBD_StdEPReq+0x24>
              if (req->wValue == USB_FEATURE_EP_HALT)
 80064da:	884b      	ldrh	r3, [r1, #2]
 80064dc:	b923      	cbnz	r3, 80064e8 <USBD_StdEPReq+0x84>
                if ((ep_addr != 0x00U) &&
 80064de:	f010 0f7f 	tst.w	r0, #127	; 0x7f
 80064e2:	d001      	beq.n	80064e8 <USBD_StdEPReq+0x84>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80064e4:	88cb      	ldrh	r3, [r1, #6]
 80064e6:	b11b      	cbz	r3, 80064f0 <USBD_StdEPReq+0x8c>
              USBD_CtlSendStatus(pdev);
 80064e8:	4620      	mov	r0, r4
 80064ea:	f000 f8e1 	bl	80066b0 <USBD_CtlSendStatus>
              break;
 80064ee:	e7cb      	b.n	8006488 <USBD_StdEPReq+0x24>
                  USBD_LL_StallEP(pdev, ep_addr);
 80064f0:	4601      	mov	r1, r0
 80064f2:	4620      	mov	r0, r4
 80064f4:	f000 fa9f 	bl	8006a36 <USBD_LL_StallEP>
 80064f8:	e7f6      	b.n	80064e8 <USBD_StdEPReq+0x84>
          switch (pdev->dev_state)
 80064fa:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 80064fe:	2b02      	cmp	r3, #2
 8006500:	d005      	beq.n	800650e <USBD_StdEPReq+0xaa>
 8006502:	2b03      	cmp	r3, #3
 8006504:	d013      	beq.n	800652e <USBD_StdEPReq+0xca>
              USBD_CtlError(pdev, req);
 8006506:	4620      	mov	r0, r4
 8006508:	f7ff fdb8 	bl	800607c <USBD_CtlError>
              break;
 800650c:	e7bc      	b.n	8006488 <USBD_StdEPReq+0x24>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800650e:	f010 0f7f 	tst.w	r0, #127	; 0x7f
 8006512:	d008      	beq.n	8006526 <USBD_StdEPReq+0xc2>
                USBD_LL_StallEP(pdev, ep_addr);
 8006514:	4601      	mov	r1, r0
 8006516:	4620      	mov	r0, r4
 8006518:	f000 fa8d 	bl	8006a36 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800651c:	2180      	movs	r1, #128	; 0x80
 800651e:	4620      	mov	r0, r4
 8006520:	f000 fa89 	bl	8006a36 <USBD_LL_StallEP>
 8006524:	e7b0      	b.n	8006488 <USBD_StdEPReq+0x24>
                USBD_CtlError(pdev, req);
 8006526:	4620      	mov	r0, r4
 8006528:	f7ff fda8 	bl	800607c <USBD_CtlError>
 800652c:	e7ac      	b.n	8006488 <USBD_StdEPReq+0x24>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800652e:	884b      	ldrh	r3, [r1, #2]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d1a9      	bne.n	8006488 <USBD_StdEPReq+0x24>
                if ((ep_addr & 0x7FU) != 0x00U)
 8006534:	f010 0f7f 	tst.w	r0, #127	; 0x7f
 8006538:	d103      	bne.n	8006542 <USBD_StdEPReq+0xde>
                USBD_CtlSendStatus(pdev);
 800653a:	4620      	mov	r0, r4
 800653c:	f000 f8b8 	bl	80066b0 <USBD_CtlSendStatus>
 8006540:	e7a2      	b.n	8006488 <USBD_StdEPReq+0x24>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8006542:	4601      	mov	r1, r0
 8006544:	4620      	mov	r0, r4
 8006546:	f000 fa7e 	bl	8006a46 <USBD_LL_ClearStallEP>
 800654a:	e7f6      	b.n	800653a <USBD_StdEPReq+0xd6>
          switch (pdev->dev_state)
 800654c:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8006550:	2b02      	cmp	r3, #2
 8006552:	d005      	beq.n	8006560 <USBD_StdEPReq+0xfc>
 8006554:	2b03      	cmp	r3, #3
 8006556:	d018      	beq.n	800658a <USBD_StdEPReq+0x126>
              USBD_CtlError(pdev, req);
 8006558:	4620      	mov	r0, r4
 800655a:	f7ff fd8f 	bl	800607c <USBD_CtlError>
              break;
 800655e:	e793      	b.n	8006488 <USBD_StdEPReq+0x24>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006560:	f010 0f7f 	tst.w	r0, #127	; 0x7f
 8006564:	d003      	beq.n	800656e <USBD_StdEPReq+0x10a>
                USBD_CtlError(pdev, req);
 8006566:	4620      	mov	r0, r4
 8006568:	f7ff fd88 	bl	800607c <USBD_CtlError>
                break;
 800656c:	e78c      	b.n	8006488 <USBD_StdEPReq+0x24>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800656e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8006572:	bf14      	ite	ne
 8006574:	f104 0114 	addne.w	r1, r4, #20
 8006578:	f504 71aa 	addeq.w	r1, r4, #340	; 0x154
              pep->status = 0x0000U;
 800657c:	2300      	movs	r3, #0
 800657e:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006580:	2202      	movs	r2, #2
 8006582:	4620      	mov	r0, r4
 8006584:	f000 f868 	bl	8006658 <USBD_CtlSendData>
              break;
 8006588:	e77e      	b.n	8006488 <USBD_StdEPReq+0x24>
              if ((ep_addr & 0x80U) == 0x80U)
 800658a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800658e:	d11b      	bne.n	80065c8 <USBD_StdEPReq+0x164>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006590:	f000 030f 	and.w	r3, r0, #15
 8006594:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006598:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800659c:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 80065a0:	b333      	cbz	r3, 80065f0 <USBD_StdEPReq+0x18c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80065a2:	f000 037f 	and.w	r3, r0, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80065a6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80065aa:	eb04 0583 	add.w	r5, r4, r3, lsl #2
 80065ae:	f505 75aa 	add.w	r5, r5, #340	; 0x154
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80065b2:	f010 0f7f 	tst.w	r0, #127	; 0x7f
 80065b6:	d11f      	bne.n	80065f8 <USBD_StdEPReq+0x194>
                pep->status = 0x0000U;
 80065b8:	2300      	movs	r3, #0
 80065ba:	602b      	str	r3, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80065bc:	2202      	movs	r2, #2
 80065be:	4629      	mov	r1, r5
 80065c0:	4620      	mov	r0, r4
 80065c2:	f000 f849 	bl	8006658 <USBD_CtlSendData>
              break;
 80065c6:	e75f      	b.n	8006488 <USBD_StdEPReq+0x24>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80065c8:	f000 030f 	and.w	r3, r0, #15
 80065cc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80065d0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80065d4:	699b      	ldr	r3, [r3, #24]
 80065d6:	b13b      	cbz	r3, 80065e8 <USBD_StdEPReq+0x184>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80065d8:	f000 057f 	and.w	r5, r0, #127	; 0x7f
 80065dc:	3501      	adds	r5, #1
 80065de:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80065e2:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80065e6:	e7e4      	b.n	80065b2 <USBD_StdEPReq+0x14e>
                  USBD_CtlError(pdev, req);
 80065e8:	4620      	mov	r0, r4
 80065ea:	f7ff fd47 	bl	800607c <USBD_CtlError>
                  break;
 80065ee:	e74b      	b.n	8006488 <USBD_StdEPReq+0x24>
                  USBD_CtlError(pdev, req);
 80065f0:	4620      	mov	r0, r4
 80065f2:	f7ff fd43 	bl	800607c <USBD_CtlError>
                  break;
 80065f6:	e747      	b.n	8006488 <USBD_StdEPReq+0x24>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80065f8:	4601      	mov	r1, r0
 80065fa:	4620      	mov	r0, r4
 80065fc:	f000 fa2b 	bl	8006a56 <USBD_LL_IsStallEP>
 8006600:	b110      	cbz	r0, 8006608 <USBD_StdEPReq+0x1a4>
                pep->status = 0x0001U;
 8006602:	2301      	movs	r3, #1
 8006604:	602b      	str	r3, [r5, #0]
 8006606:	e7d9      	b.n	80065bc <USBD_StdEPReq+0x158>
                pep->status = 0x0000U;
 8006608:	2300      	movs	r3, #0
 800660a:	602b      	str	r3, [r5, #0]
 800660c:	e7d6      	b.n	80065bc <USBD_StdEPReq+0x158>

0800660e <USBD_GetString>:
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;

  if (desc != NULL)
 800660e:	b310      	cbz	r0, 8006656 <USBD_GetString+0x48>
{
 8006610:	b510      	push	{r4, lr}
 8006612:	4684      	mov	ip, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 8006614:	7803      	ldrb	r3, [r0, #0]
 8006616:	b143      	cbz	r3, 800662a <USBD_GetString+0x1c>
 8006618:	f1c0 0e01 	rsb	lr, r0, #1
  {
    len++;
 800661c:	eb00 030e 	add.w	r3, r0, lr
 8006620:	b2db      	uxtb	r3, r3
  while (*buf != '\0')
 8006622:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 8006626:	2c00      	cmp	r4, #0
 8006628:	d1f8      	bne.n	800661c <USBD_GetString+0xe>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800662a:	005b      	lsls	r3, r3, #1
 800662c:	3302      	adds	r3, #2
 800662e:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8006630:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006632:	2303      	movs	r3, #3
 8006634:	704b      	strb	r3, [r1, #1]
    while (*desc != '\0')
 8006636:	f89c 0000 	ldrb.w	r0, [ip]
 800663a:	b158      	cbz	r0, 8006654 <USBD_GetString+0x46>
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800663c:	2302      	movs	r3, #2
      unicode[idx++] =  0U;
 800663e:	2400      	movs	r4, #0
      unicode[idx++] = *desc++;
 8006640:	1c5a      	adds	r2, r3, #1
 8006642:	b2d2      	uxtb	r2, r2
 8006644:	54c8      	strb	r0, [r1, r3]
      unicode[idx++] =  0U;
 8006646:	3302      	adds	r3, #2
 8006648:	b2db      	uxtb	r3, r3
 800664a:	548c      	strb	r4, [r1, r2]
    while (*desc != '\0')
 800664c:	f81c 0f01 	ldrb.w	r0, [ip, #1]!
 8006650:	2800      	cmp	r0, #0
 8006652:	d1f5      	bne.n	8006640 <USBD_GetString+0x32>
}
 8006654:	bd10      	pop	{r4, pc}
 8006656:	4770      	bx	lr

08006658 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8006658:	b508      	push	{r3, lr}
 800665a:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800665c:	2202      	movs	r2, #2
 800665e:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006662:	61c3      	str	r3, [r0, #28]
  pdev->ep_in[0].rem_length   = len;
 8006664:	6203      	str	r3, [r0, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006666:	460a      	mov	r2, r1
 8006668:	2100      	movs	r1, #0
 800666a:	f000 fa13 	bl	8006a94 <USBD_LL_Transmit>

  return USBD_OK;
}
 800666e:	2000      	movs	r0, #0
 8006670:	bd08      	pop	{r3, pc}

08006672 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8006672:	b508      	push	{r3, lr}
 8006674:	4613      	mov	r3, r2
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006676:	460a      	mov	r2, r1
 8006678:	2100      	movs	r1, #0
 800667a:	f000 fa0b 	bl	8006a94 <USBD_LL_Transmit>

  return USBD_OK;
}
 800667e:	2000      	movs	r0, #0
 8006680:	bd08      	pop	{r3, pc}

08006682 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8006682:	b508      	push	{r3, lr}
 8006684:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006686:	2203      	movs	r2, #3
 8006688:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800668c:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8006690:	f8c0 3160 	str.w	r3, [r0, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006694:	460a      	mov	r2, r1
 8006696:	2100      	movs	r1, #0
 8006698:	f000 fa04 	bl	8006aa4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800669c:	2000      	movs	r0, #0
 800669e:	bd08      	pop	{r3, pc}

080066a0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80066a0:	b508      	push	{r3, lr}
 80066a2:	4613      	mov	r3, r2
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80066a4:	460a      	mov	r2, r1
 80066a6:	2100      	movs	r1, #0
 80066a8:	f000 f9fc 	bl	8006aa4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80066ac:	2000      	movs	r0, #0
 80066ae:	bd08      	pop	{r3, pc}

080066b0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80066b0:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80066b2:	2304      	movs	r3, #4
 80066b4:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80066b8:	2300      	movs	r3, #0
 80066ba:	461a      	mov	r2, r3
 80066bc:	4619      	mov	r1, r3
 80066be:	f000 f9e9 	bl	8006a94 <USBD_LL_Transmit>

  return USBD_OK;
}
 80066c2:	2000      	movs	r0, #0
 80066c4:	bd08      	pop	{r3, pc}

080066c6 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80066c6:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80066c8:	2305      	movs	r3, #5
 80066ca:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80066ce:	2300      	movs	r3, #0
 80066d0:	461a      	mov	r2, r3
 80066d2:	4619      	mov	r1, r3
 80066d4:	f000 f9e6 	bl	8006aa4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80066d8:	2000      	movs	r0, #0
 80066da:	bd08      	pop	{r3, pc}

080066dc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80066dc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80066de:	2200      	movs	r2, #0
 80066e0:	490f      	ldr	r1, [pc, #60]	; (8006720 <MX_USB_DEVICE_Init+0x44>)
 80066e2:	4810      	ldr	r0, [pc, #64]	; (8006724 <MX_USB_DEVICE_Init+0x48>)
 80066e4:	f7ff fb5c 	bl	8005da0 <USBD_Init>
 80066e8:	b970      	cbnz	r0, 8006708 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80066ea:	490f      	ldr	r1, [pc, #60]	; (8006728 <MX_USB_DEVICE_Init+0x4c>)
 80066ec:	480d      	ldr	r0, [pc, #52]	; (8006724 <MX_USB_DEVICE_Init+0x48>)
 80066ee:	f7ff fb6e 	bl	8005dce <USBD_RegisterClass>
 80066f2:	b960      	cbnz	r0, 800670e <MX_USB_DEVICE_Init+0x32>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80066f4:	490d      	ldr	r1, [pc, #52]	; (800672c <MX_USB_DEVICE_Init+0x50>)
 80066f6:	480b      	ldr	r0, [pc, #44]	; (8006724 <MX_USB_DEVICE_Init+0x48>)
 80066f8:	f7ff fb24 	bl	8005d44 <USBD_CDC_RegisterInterface>
 80066fc:	b950      	cbnz	r0, 8006714 <MX_USB_DEVICE_Init+0x38>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80066fe:	4809      	ldr	r0, [pc, #36]	; (8006724 <MX_USB_DEVICE_Init+0x48>)
 8006700:	f7ff fb6c 	bl	8005ddc <USBD_Start>
 8006704:	b948      	cbnz	r0, 800671a <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006706:	bd08      	pop	{r3, pc}
    Error_Handler();
 8006708:	f7fb f88e 	bl	8001828 <Error_Handler>
 800670c:	e7ed      	b.n	80066ea <MX_USB_DEVICE_Init+0xe>
    Error_Handler();
 800670e:	f7fb f88b 	bl	8001828 <Error_Handler>
 8006712:	e7ef      	b.n	80066f4 <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 8006714:	f7fb f888 	bl	8001828 <Error_Handler>
 8006718:	e7f1      	b.n	80066fe <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 800671a:	f7fb f885 	bl	8001828 <Error_Handler>
}
 800671e:	e7f2      	b.n	8006706 <MX_USB_DEVICE_Init+0x2a>
 8006720:	20000140 	.word	0x20000140
 8006724:	20001824 	.word	0x20001824
 8006728:	20000018 	.word	0x20000018
 800672c:	20000128 	.word	0x20000128

08006730 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8006730:	2000      	movs	r0, #0
 8006732:	4770      	bx	lr

08006734 <CDC_Control_FS>:
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006734:	2820      	cmp	r0, #32
 8006736:	d003      	beq.n	8006740 <CDC_Control_FS+0xc>
 8006738:	2821      	cmp	r0, #33	; 0x21
 800673a:	d009      	beq.n	8006750 <CDC_Control_FS+0x1c>
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 800673c:	2000      	movs	r0, #0
 800673e:	4770      	bx	lr
    	memcpy(lineCoding, pbuf, sizeof(lineCoding));
 8006740:	4b07      	ldr	r3, [pc, #28]	; (8006760 <CDC_Control_FS+0x2c>)
 8006742:	6808      	ldr	r0, [r1, #0]
 8006744:	6018      	str	r0, [r3, #0]
 8006746:	8888      	ldrh	r0, [r1, #4]
 8006748:	798a      	ldrb	r2, [r1, #6]
 800674a:	8098      	strh	r0, [r3, #4]
 800674c:	719a      	strb	r2, [r3, #6]
    break;
 800674e:	e7f5      	b.n	800673c <CDC_Control_FS+0x8>
    	memcpy(pbuf, lineCoding, sizeof(lineCoding));
 8006750:	4b03      	ldr	r3, [pc, #12]	; (8006760 <CDC_Control_FS+0x2c>)
 8006752:	6818      	ldr	r0, [r3, #0]
 8006754:	6008      	str	r0, [r1, #0]
 8006756:	889a      	ldrh	r2, [r3, #4]
 8006758:	799b      	ldrb	r3, [r3, #6]
 800675a:	808a      	strh	r2, [r1, #4]
 800675c:	718b      	strb	r3, [r1, #6]
    break;
 800675e:	e7ed      	b.n	800673c <CDC_Control_FS+0x8>
 8006760:	20000138 	.word	0x20000138

08006764 <CDC_Init_FS>:
{
 8006764:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006766:	4c06      	ldr	r4, [pc, #24]	; (8006780 <CDC_Init_FS+0x1c>)
 8006768:	2200      	movs	r2, #0
 800676a:	4906      	ldr	r1, [pc, #24]	; (8006784 <CDC_Init_FS+0x20>)
 800676c:	4620      	mov	r0, r4
 800676e:	f7ff faf0 	bl	8005d52 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006772:	4905      	ldr	r1, [pc, #20]	; (8006788 <CDC_Init_FS+0x24>)
 8006774:	4620      	mov	r0, r4
 8006776:	f7ff faf4 	bl	8005d62 <USBD_CDC_SetRxBuffer>
}
 800677a:	2000      	movs	r0, #0
 800677c:	bd10      	pop	{r4, pc}
 800677e:	bf00      	nop
 8006780:	20001824 	.word	0x20001824
 8006784:	20001ce8 	.word	0x20001ce8
 8006788:	20001ae8 	.word	0x20001ae8

0800678c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800678c:	b570      	push	{r4, r5, r6, lr}
 800678e:	4604      	mov	r4, r0
 8006790:	460d      	mov	r5, r1
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006792:	4e07      	ldr	r6, [pc, #28]	; (80067b0 <CDC_Receive_FS+0x24>)
 8006794:	4601      	mov	r1, r0
 8006796:	4630      	mov	r0, r6
 8006798:	f7ff fae3 	bl	8005d62 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800679c:	4630      	mov	r0, r6
 800679e:	f7ff fae6 	bl	8005d6e <USBD_CDC_ReceivePacket>
  CDC_ReveiveCallback(Buf, Len[0]); // My callback function
 80067a2:	7829      	ldrb	r1, [r5, #0]
 80067a4:	4620      	mov	r0, r4
 80067a6:	f7fa fffd 	bl	80017a4 <CDC_ReveiveCallback>
  return (USBD_OK);
  /* USER CODE END 6 */
}
 80067aa:	2000      	movs	r0, #0
 80067ac:	bd70      	pop	{r4, r5, r6, pc}
 80067ae:	bf00      	nop
 80067b0:	20001824 	.word	0x20001824

080067b4 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80067b4:	2312      	movs	r3, #18
 80067b6:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 80067b8:	4800      	ldr	r0, [pc, #0]	; (80067bc <USBD_FS_DeviceDescriptor+0x8>)
 80067ba:	4770      	bx	lr
 80067bc:	2000015c 	.word	0x2000015c

080067c0 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80067c0:	2304      	movs	r3, #4
 80067c2:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 80067c4:	4800      	ldr	r0, [pc, #0]	; (80067c8 <USBD_FS_LangIDStrDescriptor+0x8>)
 80067c6:	4770      	bx	lr
 80067c8:	20000170 	.word	0x20000170

080067cc <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 80067cc:	b1b2      	cbz	r2, 80067fc <IntToUnicode+0x30>
 80067ce:	1c4b      	adds	r3, r1, #1
 80067d0:	f102 3cff 	add.w	ip, r2, #4294967295
 80067d4:	fa5f fc8c 	uxtb.w	ip, ip
 80067d8:	3103      	adds	r1, #3
 80067da:	eb01 014c 	add.w	r1, r1, ip, lsl #1
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 80067de:	f04f 0c00 	mov.w	ip, #0
    if (((value >> 28)) < 0xA)
 80067e2:	0f02      	lsrs	r2, r0, #28
 80067e4:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
      pbuf[2 * idx] = (value >> 28) + '0';
 80067e8:	bf34      	ite	cc
 80067ea:	3230      	addcc	r2, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80067ec:	3237      	addcs	r2, #55	; 0x37
 80067ee:	f803 2c01 	strb.w	r2, [r3, #-1]
    value = value << 4;
 80067f2:	0100      	lsls	r0, r0, #4
    pbuf[2 * idx + 1] = 0;
 80067f4:	f803 cb02 	strb.w	ip, [r3], #2
  for (idx = 0; idx < len; idx++)
 80067f8:	428b      	cmp	r3, r1
 80067fa:	d1f2      	bne.n	80067e2 <IntToUnicode+0x16>
  }
}
 80067fc:	4770      	bx	lr
	...

08006800 <USBD_FS_SerialStrDescriptor>:
{
 8006800:	b538      	push	{r3, r4, r5, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8006802:	231a      	movs	r3, #26
 8006804:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006806:	4b0c      	ldr	r3, [pc, #48]	; (8006838 <USBD_FS_SerialStrDescriptor+0x38>)
 8006808:	f8d3 07e8 	ldr.w	r0, [r3, #2024]	; 0x7e8
  deviceserial0 += deviceserial2;
 800680c:	f8d3 37f0 	ldr.w	r3, [r3, #2032]	; 0x7f0
  if (deviceserial0 != 0)
 8006810:	18c0      	adds	r0, r0, r3
 8006812:	d101      	bne.n	8006818 <USBD_FS_SerialStrDescriptor+0x18>
}
 8006814:	4809      	ldr	r0, [pc, #36]	; (800683c <USBD_FS_SerialStrDescriptor+0x3c>)
 8006816:	bd38      	pop	{r3, r4, r5, pc}
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006818:	4b07      	ldr	r3, [pc, #28]	; (8006838 <USBD_FS_SerialStrDescriptor+0x38>)
 800681a:	f8d3 57ec 	ldr.w	r5, [r3, #2028]	; 0x7ec
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800681e:	4c07      	ldr	r4, [pc, #28]	; (800683c <USBD_FS_SerialStrDescriptor+0x3c>)
 8006820:	2208      	movs	r2, #8
 8006822:	1ca1      	adds	r1, r4, #2
 8006824:	f7ff ffd2 	bl	80067cc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006828:	2204      	movs	r2, #4
 800682a:	f104 0112 	add.w	r1, r4, #18
 800682e:	4628      	mov	r0, r5
 8006830:	f7ff ffcc 	bl	80067cc <IntToUnicode>
 8006834:	e7ee      	b.n	8006814 <USBD_FS_SerialStrDescriptor+0x14>
 8006836:	bf00      	nop
 8006838:	1ffff000 	.word	0x1ffff000
 800683c:	20000174 	.word	0x20000174

08006840 <USBD_FS_ProductStrDescriptor>:
{
 8006840:	b508      	push	{r3, lr}
 8006842:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006844:	4902      	ldr	r1, [pc, #8]	; (8006850 <USBD_FS_ProductStrDescriptor+0x10>)
 8006846:	4803      	ldr	r0, [pc, #12]	; (8006854 <USBD_FS_ProductStrDescriptor+0x14>)
 8006848:	f7ff fee1 	bl	800660e <USBD_GetString>
}
 800684c:	4800      	ldr	r0, [pc, #0]	; (8006850 <USBD_FS_ProductStrDescriptor+0x10>)
 800684e:	bd08      	pop	{r3, pc}
 8006850:	20001ee8 	.word	0x20001ee8
 8006854:	0800b358 	.word	0x0800b358

08006858 <USBD_FS_ManufacturerStrDescriptor>:
{
 8006858:	b510      	push	{r4, lr}
 800685a:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800685c:	4c03      	ldr	r4, [pc, #12]	; (800686c <USBD_FS_ManufacturerStrDescriptor+0x14>)
 800685e:	4621      	mov	r1, r4
 8006860:	4803      	ldr	r0, [pc, #12]	; (8006870 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8006862:	f7ff fed4 	bl	800660e <USBD_GetString>
}
 8006866:	4620      	mov	r0, r4
 8006868:	bd10      	pop	{r4, pc}
 800686a:	bf00      	nop
 800686c:	20001ee8 	.word	0x20001ee8
 8006870:	0800b368 	.word	0x0800b368

08006874 <USBD_FS_ConfigStrDescriptor>:
{
 8006874:	b508      	push	{r3, lr}
 8006876:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006878:	4902      	ldr	r1, [pc, #8]	; (8006884 <USBD_FS_ConfigStrDescriptor+0x10>)
 800687a:	4803      	ldr	r0, [pc, #12]	; (8006888 <USBD_FS_ConfigStrDescriptor+0x14>)
 800687c:	f7ff fec7 	bl	800660e <USBD_GetString>
}
 8006880:	4800      	ldr	r0, [pc, #0]	; (8006884 <USBD_FS_ConfigStrDescriptor+0x10>)
 8006882:	bd08      	pop	{r3, pc}
 8006884:	20001ee8 	.word	0x20001ee8
 8006888:	0800b370 	.word	0x0800b370

0800688c <USBD_FS_InterfaceStrDescriptor>:
{
 800688c:	b508      	push	{r3, lr}
 800688e:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006890:	4902      	ldr	r1, [pc, #8]	; (800689c <USBD_FS_InterfaceStrDescriptor+0x10>)
 8006892:	4803      	ldr	r0, [pc, #12]	; (80068a0 <USBD_FS_InterfaceStrDescriptor+0x14>)
 8006894:	f7ff febb 	bl	800660e <USBD_GetString>
}
 8006898:	4800      	ldr	r0, [pc, #0]	; (800689c <USBD_FS_InterfaceStrDescriptor+0x10>)
 800689a:	bd08      	pop	{r3, pc}
 800689c:	20001ee8 	.word	0x20001ee8
 80068a0:	0800b37c 	.word	0x0800b37c

080068a4 <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 80068a4:	b120      	cbz	r0, 80068b0 <USBD_Get_USB_Status+0xc>
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
    break;
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80068a6:	2802      	cmp	r0, #2
 80068a8:	bf14      	ite	ne
 80068aa:	2002      	movne	r0, #2
 80068ac:	2001      	moveq	r0, #1
 80068ae:	4770      	bx	lr
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 80068b0:	4770      	bx	lr
	...

080068b4 <HAL_PCD_MspInit>:
  if(pcdHandle->Instance==USB)
 80068b4:	6802      	ldr	r2, [r0, #0]
 80068b6:	4b09      	ldr	r3, [pc, #36]	; (80068dc <HAL_PCD_MspInit+0x28>)
 80068b8:	429a      	cmp	r2, r3
 80068ba:	d000      	beq.n	80068be <HAL_PCD_MspInit+0xa>
 80068bc:	4770      	bx	lr
{
 80068be:	b082      	sub	sp, #8
    __HAL_RCC_USB_CLK_ENABLE();
 80068c0:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 80068c4:	69da      	ldr	r2, [r3, #28]
 80068c6:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80068ca:	61da      	str	r2, [r3, #28]
 80068cc:	69db      	ldr	r3, [r3, #28]
 80068ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80068d2:	9301      	str	r3, [sp, #4]
 80068d4:	9b01      	ldr	r3, [sp, #4]
}
 80068d6:	b002      	add	sp, #8
 80068d8:	4770      	bx	lr
 80068da:	bf00      	nop
 80068dc:	40005c00 	.word	0x40005c00

080068e0 <HAL_PCD_SetupStageCallback>:
{
 80068e0:	b508      	push	{r3, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80068e2:	f500 712c 	add.w	r1, r0, #688	; 0x2b0
 80068e6:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 80068ea:	f7ff fa8f 	bl	8005e0c <USBD_LL_SetupStage>
}
 80068ee:	bd08      	pop	{r3, pc}

080068f0 <HAL_PCD_DataOutStageCallback>:
{
 80068f0:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80068f2:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 80068f6:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 80068fa:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 80068fe:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8006902:	f7ff fab0 	bl	8005e66 <USBD_LL_DataOutStage>
}
 8006906:	bd08      	pop	{r3, pc}

08006908 <HAL_PCD_DataInStageCallback>:
{
 8006908:	b508      	push	{r3, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800690a:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800690e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8006912:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006914:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8006918:	f7ff fae9 	bl	8005eee <USBD_LL_DataInStage>
}
 800691c:	bd08      	pop	{r3, pc}

0800691e <HAL_PCD_SOFCallback>:
{
 800691e:	b508      	push	{r3, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006920:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8006924:	f7ff fb88 	bl	8006038 <USBD_LL_SOF>
}
 8006928:	bd08      	pop	{r3, pc}

0800692a <HAL_PCD_ResetCallback>:
{
 800692a:	b510      	push	{r4, lr}
 800692c:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800692e:	6883      	ldr	r3, [r0, #8]
 8006930:	2b02      	cmp	r3, #2
 8006932:	d109      	bne.n	8006948 <HAL_PCD_ResetCallback+0x1e>
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006934:	2101      	movs	r1, #1
 8006936:	f8d4 02e8 	ldr.w	r0, [r4, #744]	; 0x2e8
 800693a:	f7ff fb67 	bl	800600c <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800693e:	f8d4 02e8 	ldr.w	r0, [r4, #744]	; 0x2e8
 8006942:	f7ff fb3b 	bl	8005fbc <USBD_LL_Reset>
}
 8006946:	bd10      	pop	{r4, pc}
    Error_Handler();
 8006948:	f7fa ff6e 	bl	8001828 <Error_Handler>
 800694c:	e7f2      	b.n	8006934 <HAL_PCD_ResetCallback+0xa>
	...

08006950 <HAL_PCD_SuspendCallback>:
{
 8006950:	b510      	push	{r4, lr}
 8006952:	4604      	mov	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006954:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8006958:	f7ff fb5b 	bl	8006012 <USBD_LL_Suspend>
  if (hpcd->Init.low_power_enable)
 800695c:	69a3      	ldr	r3, [r4, #24]
 800695e:	b123      	cbz	r3, 800696a <HAL_PCD_SuspendCallback+0x1a>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006960:	4a02      	ldr	r2, [pc, #8]	; (800696c <HAL_PCD_SuspendCallback+0x1c>)
 8006962:	6913      	ldr	r3, [r2, #16]
 8006964:	f043 0306 	orr.w	r3, r3, #6
 8006968:	6113      	str	r3, [r2, #16]
}
 800696a:	bd10      	pop	{r4, pc}
 800696c:	e000ed00 	.word	0xe000ed00

08006970 <HAL_PCD_ResumeCallback>:
{
 8006970:	b508      	push	{r3, lr}
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006972:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8006976:	f7ff fb55 	bl	8006024 <USBD_LL_Resume>
}
 800697a:	bd08      	pop	{r3, pc}

0800697c <USBD_LL_Init>:
{
 800697c:	b510      	push	{r4, lr}
 800697e:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 8006980:	481d      	ldr	r0, [pc, #116]	; (80069f8 <USBD_LL_Init+0x7c>)
 8006982:	f8c0 42e8 	str.w	r4, [r0, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8006986:	f8c4 02c0 	str.w	r0, [r4, #704]	; 0x2c0
  hpcd_USB_FS.Instance = USB;
 800698a:	4b1c      	ldr	r3, [pc, #112]	; (80069fc <USBD_LL_Init+0x80>)
 800698c:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800698e:	2308      	movs	r3, #8
 8006990:	6043      	str	r3, [r0, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8006992:	2302      	movs	r3, #2
 8006994:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8006996:	2300      	movs	r3, #0
 8006998:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800699a:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800699c:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800699e:	f7fb fec9 	bl	8002734 <HAL_PCD_Init>
 80069a2:	bb30      	cbnz	r0, 80069f2 <USBD_LL_Init+0x76>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80069a4:	2318      	movs	r3, #24
 80069a6:	2200      	movs	r2, #0
 80069a8:	4611      	mov	r1, r2
 80069aa:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 80069ae:	f7fc fec1 	bl	8003734 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80069b2:	2358      	movs	r3, #88	; 0x58
 80069b4:	2200      	movs	r2, #0
 80069b6:	2180      	movs	r1, #128	; 0x80
 80069b8:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 80069bc:	f7fc feba 	bl	8003734 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80069c0:	23c0      	movs	r3, #192	; 0xc0
 80069c2:	2200      	movs	r2, #0
 80069c4:	2181      	movs	r1, #129	; 0x81
 80069c6:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 80069ca:	f7fc feb3 	bl	8003734 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80069ce:	f44f 7388 	mov.w	r3, #272	; 0x110
 80069d2:	2200      	movs	r2, #0
 80069d4:	2101      	movs	r1, #1
 80069d6:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 80069da:	f7fc feab 	bl	8003734 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80069de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80069e2:	2200      	movs	r2, #0
 80069e4:	2182      	movs	r1, #130	; 0x82
 80069e6:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 80069ea:	f7fc fea3 	bl	8003734 <HAL_PCDEx_PMAConfig>
}
 80069ee:	2000      	movs	r0, #0
 80069f0:	bd10      	pop	{r4, pc}
    Error_Handler( );
 80069f2:	f7fa ff19 	bl	8001828 <Error_Handler>
 80069f6:	e7d5      	b.n	80069a4 <USBD_LL_Init+0x28>
 80069f8:	200020e8 	.word	0x200020e8
 80069fc:	40005c00 	.word	0x40005c00

08006a00 <USBD_LL_Start>:
{
 8006a00:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8006a02:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8006a06:	f7fb ff1b 	bl	8002840 <HAL_PCD_Start>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006a0a:	f7ff ff4b 	bl	80068a4 <USBD_Get_USB_Status>
}
 8006a0e:	bd08      	pop	{r3, pc}

08006a10 <USBD_LL_OpenEP>:
{
 8006a10:	b508      	push	{r3, lr}
 8006a12:	4694      	mov	ip, r2
 8006a14:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006a16:	4663      	mov	r3, ip
 8006a18:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8006a1c:	f7fc fd5d 	bl	80034da <HAL_PCD_EP_Open>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006a20:	f7ff ff40 	bl	80068a4 <USBD_Get_USB_Status>
}
 8006a24:	bd08      	pop	{r3, pc}

08006a26 <USBD_LL_CloseEP>:
{
 8006a26:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006a28:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8006a2c:	f7fc fd95 	bl	800355a <HAL_PCD_EP_Close>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006a30:	f7ff ff38 	bl	80068a4 <USBD_Get_USB_Status>
}
 8006a34:	bd08      	pop	{r3, pc}

08006a36 <USBD_LL_StallEP>:
{
 8006a36:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006a38:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8006a3c:	f7fc fe03 	bl	8003646 <HAL_PCD_EP_SetStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006a40:	f7ff ff30 	bl	80068a4 <USBD_Get_USB_Status>
}
 8006a44:	bd08      	pop	{r3, pc}

08006a46 <USBD_LL_ClearStallEP>:
{
 8006a46:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006a48:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8006a4c:	f7fc fe37 	bl	80036be <HAL_PCD_EP_ClrStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006a50:	f7ff ff28 	bl	80068a4 <USBD_Get_USB_Status>
}
 8006a54:	bd08      	pop	{r3, pc}

08006a56 <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006a56:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
  if((ep_addr & 0x80) == 0x80)
 8006a5a:	f011 0f80 	tst.w	r1, #128	; 0x80
 8006a5e:	d108      	bne.n	8006a72 <USBD_LL_IsStallEP+0x1c>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006a60:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8006a64:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8006a68:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8006a6c:	f891 016a 	ldrb.w	r0, [r1, #362]	; 0x16a
}
 8006a70:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006a72:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8006a76:	3101      	adds	r1, #1
 8006a78:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8006a7c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8006a80:	7888      	ldrb	r0, [r1, #2]
 8006a82:	4770      	bx	lr

08006a84 <USBD_LL_SetUSBAddress>:
{
 8006a84:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006a86:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8006a8a:	f7fb fef2 	bl	8002872 <HAL_PCD_SetAddress>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006a8e:	f7ff ff09 	bl	80068a4 <USBD_Get_USB_Status>
}
 8006a92:	bd08      	pop	{r3, pc}

08006a94 <USBD_LL_Transmit>:
{
 8006a94:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006a96:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8006a9a:	f7fc fdb3 	bl	8003604 <HAL_PCD_EP_Transmit>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006a9e:	f7ff ff01 	bl	80068a4 <USBD_Get_USB_Status>
}
 8006aa2:	bd08      	pop	{r3, pc}

08006aa4 <USBD_LL_PrepareReceive>:
{
 8006aa4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006aa6:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8006aaa:	f7fc fd85 	bl	80035b8 <HAL_PCD_EP_Receive>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006aae:	f7ff fef9 	bl	80068a4 <USBD_Get_USB_Status>
}
 8006ab2:	bd08      	pop	{r3, pc}

08006ab4 <USBD_LL_GetRxDataSize>:
{
 8006ab4:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006ab6:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8006aba:	f7fc fd9a 	bl	80035f2 <HAL_PCD_EP_GetRxCount>
}
 8006abe:	bd08      	pop	{r3, pc}

08006ac0 <USBD_static_malloc>:
}
 8006ac0:	4800      	ldr	r0, [pc, #0]	; (8006ac4 <USBD_static_malloc+0x4>)
 8006ac2:	4770      	bx	lr
 8006ac4:	200023d4 	.word	0x200023d4

08006ac8 <USBD_static_free>:
}
 8006ac8:	4770      	bx	lr

08006aca <HAL_PCDEx_SetConnectionState>:
}
 8006aca:	4770      	bx	lr

08006acc <atof>:
 8006acc:	2100      	movs	r1, #0
 8006ace:	f001 bae7 	b.w	80080a0 <strtod>

08006ad2 <atoi>:
 8006ad2:	220a      	movs	r2, #10
 8006ad4:	2100      	movs	r1, #0
 8006ad6:	f001 bbc7 	b.w	8008268 <strtol>
	...

08006adc <__errno>:
 8006adc:	4b01      	ldr	r3, [pc, #4]	; (8006ae4 <__errno+0x8>)
 8006ade:	6818      	ldr	r0, [r3, #0]
 8006ae0:	4770      	bx	lr
 8006ae2:	bf00      	nop
 8006ae4:	20000190 	.word	0x20000190

08006ae8 <__libc_init_array>:
 8006ae8:	b570      	push	{r4, r5, r6, lr}
 8006aea:	2600      	movs	r6, #0
 8006aec:	4d0c      	ldr	r5, [pc, #48]	; (8006b20 <__libc_init_array+0x38>)
 8006aee:	4c0d      	ldr	r4, [pc, #52]	; (8006b24 <__libc_init_array+0x3c>)
 8006af0:	1b64      	subs	r4, r4, r5
 8006af2:	10a4      	asrs	r4, r4, #2
 8006af4:	42a6      	cmp	r6, r4
 8006af6:	d109      	bne.n	8006b0c <__libc_init_array+0x24>
 8006af8:	f004 fac2 	bl	800b080 <_init>
 8006afc:	2600      	movs	r6, #0
 8006afe:	4d0a      	ldr	r5, [pc, #40]	; (8006b28 <__libc_init_array+0x40>)
 8006b00:	4c0a      	ldr	r4, [pc, #40]	; (8006b2c <__libc_init_array+0x44>)
 8006b02:	1b64      	subs	r4, r4, r5
 8006b04:	10a4      	asrs	r4, r4, #2
 8006b06:	42a6      	cmp	r6, r4
 8006b08:	d105      	bne.n	8006b16 <__libc_init_array+0x2e>
 8006b0a:	bd70      	pop	{r4, r5, r6, pc}
 8006b0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b10:	4798      	blx	r3
 8006b12:	3601      	adds	r6, #1
 8006b14:	e7ee      	b.n	8006af4 <__libc_init_array+0xc>
 8006b16:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b1a:	4798      	blx	r3
 8006b1c:	3601      	adds	r6, #1
 8006b1e:	e7f2      	b.n	8006b06 <__libc_init_array+0x1e>
 8006b20:	0800b888 	.word	0x0800b888
 8006b24:	0800b888 	.word	0x0800b888
 8006b28:	0800b888 	.word	0x0800b888
 8006b2c:	0800b88c 	.word	0x0800b88c

08006b30 <memcpy>:
 8006b30:	440a      	add	r2, r1
 8006b32:	4291      	cmp	r1, r2
 8006b34:	f100 33ff 	add.w	r3, r0, #4294967295
 8006b38:	d100      	bne.n	8006b3c <memcpy+0xc>
 8006b3a:	4770      	bx	lr
 8006b3c:	b510      	push	{r4, lr}
 8006b3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b42:	4291      	cmp	r1, r2
 8006b44:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b48:	d1f9      	bne.n	8006b3e <memcpy+0xe>
 8006b4a:	bd10      	pop	{r4, pc}

08006b4c <memset>:
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	4402      	add	r2, r0
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d100      	bne.n	8006b56 <memset+0xa>
 8006b54:	4770      	bx	lr
 8006b56:	f803 1b01 	strb.w	r1, [r3], #1
 8006b5a:	e7f9      	b.n	8006b50 <memset+0x4>

08006b5c <__cvt>:
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b62:	461f      	mov	r7, r3
 8006b64:	bfbb      	ittet	lt
 8006b66:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8006b6a:	461f      	movlt	r7, r3
 8006b6c:	2300      	movge	r3, #0
 8006b6e:	232d      	movlt	r3, #45	; 0x2d
 8006b70:	b088      	sub	sp, #32
 8006b72:	4614      	mov	r4, r2
 8006b74:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006b76:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006b78:	7013      	strb	r3, [r2, #0]
 8006b7a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006b7c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8006b80:	f023 0820 	bic.w	r8, r3, #32
 8006b84:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006b88:	d005      	beq.n	8006b96 <__cvt+0x3a>
 8006b8a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006b8e:	d100      	bne.n	8006b92 <__cvt+0x36>
 8006b90:	3501      	adds	r5, #1
 8006b92:	2302      	movs	r3, #2
 8006b94:	e000      	b.n	8006b98 <__cvt+0x3c>
 8006b96:	2303      	movs	r3, #3
 8006b98:	aa07      	add	r2, sp, #28
 8006b9a:	9204      	str	r2, [sp, #16]
 8006b9c:	aa06      	add	r2, sp, #24
 8006b9e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006ba2:	e9cd 3500 	strd	r3, r5, [sp]
 8006ba6:	4622      	mov	r2, r4
 8006ba8:	463b      	mov	r3, r7
 8006baa:	f001 fc11 	bl	80083d0 <_dtoa_r>
 8006bae:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006bb2:	4606      	mov	r6, r0
 8006bb4:	d102      	bne.n	8006bbc <__cvt+0x60>
 8006bb6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006bb8:	07db      	lsls	r3, r3, #31
 8006bba:	d522      	bpl.n	8006c02 <__cvt+0xa6>
 8006bbc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006bc0:	eb06 0905 	add.w	r9, r6, r5
 8006bc4:	d110      	bne.n	8006be8 <__cvt+0x8c>
 8006bc6:	7833      	ldrb	r3, [r6, #0]
 8006bc8:	2b30      	cmp	r3, #48	; 0x30
 8006bca:	d10a      	bne.n	8006be2 <__cvt+0x86>
 8006bcc:	2200      	movs	r2, #0
 8006bce:	2300      	movs	r3, #0
 8006bd0:	4620      	mov	r0, r4
 8006bd2:	4639      	mov	r1, r7
 8006bd4:	f7f9 fef2 	bl	80009bc <__aeabi_dcmpeq>
 8006bd8:	b918      	cbnz	r0, 8006be2 <__cvt+0x86>
 8006bda:	f1c5 0501 	rsb	r5, r5, #1
 8006bde:	f8ca 5000 	str.w	r5, [sl]
 8006be2:	f8da 3000 	ldr.w	r3, [sl]
 8006be6:	4499      	add	r9, r3
 8006be8:	2200      	movs	r2, #0
 8006bea:	2300      	movs	r3, #0
 8006bec:	4620      	mov	r0, r4
 8006bee:	4639      	mov	r1, r7
 8006bf0:	f7f9 fee4 	bl	80009bc <__aeabi_dcmpeq>
 8006bf4:	b108      	cbz	r0, 8006bfa <__cvt+0x9e>
 8006bf6:	f8cd 901c 	str.w	r9, [sp, #28]
 8006bfa:	2230      	movs	r2, #48	; 0x30
 8006bfc:	9b07      	ldr	r3, [sp, #28]
 8006bfe:	454b      	cmp	r3, r9
 8006c00:	d307      	bcc.n	8006c12 <__cvt+0xb6>
 8006c02:	4630      	mov	r0, r6
 8006c04:	9b07      	ldr	r3, [sp, #28]
 8006c06:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006c08:	1b9b      	subs	r3, r3, r6
 8006c0a:	6013      	str	r3, [r2, #0]
 8006c0c:	b008      	add	sp, #32
 8006c0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c12:	1c59      	adds	r1, r3, #1
 8006c14:	9107      	str	r1, [sp, #28]
 8006c16:	701a      	strb	r2, [r3, #0]
 8006c18:	e7f0      	b.n	8006bfc <__cvt+0xa0>

08006c1a <__exponent>:
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006c1e:	2900      	cmp	r1, #0
 8006c20:	f803 2b02 	strb.w	r2, [r3], #2
 8006c24:	bfb6      	itet	lt
 8006c26:	222d      	movlt	r2, #45	; 0x2d
 8006c28:	222b      	movge	r2, #43	; 0x2b
 8006c2a:	4249      	neglt	r1, r1
 8006c2c:	2909      	cmp	r1, #9
 8006c2e:	7042      	strb	r2, [r0, #1]
 8006c30:	dd2b      	ble.n	8006c8a <__exponent+0x70>
 8006c32:	f10d 0407 	add.w	r4, sp, #7
 8006c36:	46a4      	mov	ip, r4
 8006c38:	270a      	movs	r7, #10
 8006c3a:	fb91 f6f7 	sdiv	r6, r1, r7
 8006c3e:	460a      	mov	r2, r1
 8006c40:	46a6      	mov	lr, r4
 8006c42:	fb07 1516 	mls	r5, r7, r6, r1
 8006c46:	2a63      	cmp	r2, #99	; 0x63
 8006c48:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8006c4c:	4631      	mov	r1, r6
 8006c4e:	f104 34ff 	add.w	r4, r4, #4294967295
 8006c52:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006c56:	dcf0      	bgt.n	8006c3a <__exponent+0x20>
 8006c58:	3130      	adds	r1, #48	; 0x30
 8006c5a:	f1ae 0502 	sub.w	r5, lr, #2
 8006c5e:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006c62:	4629      	mov	r1, r5
 8006c64:	1c44      	adds	r4, r0, #1
 8006c66:	4561      	cmp	r1, ip
 8006c68:	d30a      	bcc.n	8006c80 <__exponent+0x66>
 8006c6a:	f10d 0209 	add.w	r2, sp, #9
 8006c6e:	eba2 020e 	sub.w	r2, r2, lr
 8006c72:	4565      	cmp	r5, ip
 8006c74:	bf88      	it	hi
 8006c76:	2200      	movhi	r2, #0
 8006c78:	4413      	add	r3, r2
 8006c7a:	1a18      	subs	r0, r3, r0
 8006c7c:	b003      	add	sp, #12
 8006c7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c80:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006c84:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006c88:	e7ed      	b.n	8006c66 <__exponent+0x4c>
 8006c8a:	2330      	movs	r3, #48	; 0x30
 8006c8c:	3130      	adds	r1, #48	; 0x30
 8006c8e:	7083      	strb	r3, [r0, #2]
 8006c90:	70c1      	strb	r1, [r0, #3]
 8006c92:	1d03      	adds	r3, r0, #4
 8006c94:	e7f1      	b.n	8006c7a <__exponent+0x60>
	...

08006c98 <_printf_float>:
 8006c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c9c:	b091      	sub	sp, #68	; 0x44
 8006c9e:	460c      	mov	r4, r1
 8006ca0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8006ca4:	4616      	mov	r6, r2
 8006ca6:	461f      	mov	r7, r3
 8006ca8:	4605      	mov	r5, r0
 8006caa:	f002 fcf7 	bl	800969c <_localeconv_r>
 8006cae:	6803      	ldr	r3, [r0, #0]
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	9309      	str	r3, [sp, #36]	; 0x24
 8006cb4:	f7f9 fa56 	bl	8000164 <strlen>
 8006cb8:	2300      	movs	r3, #0
 8006cba:	930e      	str	r3, [sp, #56]	; 0x38
 8006cbc:	f8d8 3000 	ldr.w	r3, [r8]
 8006cc0:	900a      	str	r0, [sp, #40]	; 0x28
 8006cc2:	3307      	adds	r3, #7
 8006cc4:	f023 0307 	bic.w	r3, r3, #7
 8006cc8:	f103 0208 	add.w	r2, r3, #8
 8006ccc:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006cd0:	f8d4 b000 	ldr.w	fp, [r4]
 8006cd4:	f8c8 2000 	str.w	r2, [r8]
 8006cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cdc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006ce0:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8006ce4:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8006ce8:	930b      	str	r3, [sp, #44]	; 0x2c
 8006cea:	f04f 32ff 	mov.w	r2, #4294967295
 8006cee:	4640      	mov	r0, r8
 8006cf0:	4b9c      	ldr	r3, [pc, #624]	; (8006f64 <_printf_float+0x2cc>)
 8006cf2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006cf4:	f7f9 fe94 	bl	8000a20 <__aeabi_dcmpun>
 8006cf8:	bb70      	cbnz	r0, 8006d58 <_printf_float+0xc0>
 8006cfa:	f04f 32ff 	mov.w	r2, #4294967295
 8006cfe:	4640      	mov	r0, r8
 8006d00:	4b98      	ldr	r3, [pc, #608]	; (8006f64 <_printf_float+0x2cc>)
 8006d02:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006d04:	f7f9 fe6e 	bl	80009e4 <__aeabi_dcmple>
 8006d08:	bb30      	cbnz	r0, 8006d58 <_printf_float+0xc0>
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	4640      	mov	r0, r8
 8006d10:	4651      	mov	r1, sl
 8006d12:	f7f9 fe5d 	bl	80009d0 <__aeabi_dcmplt>
 8006d16:	b110      	cbz	r0, 8006d1e <_printf_float+0x86>
 8006d18:	232d      	movs	r3, #45	; 0x2d
 8006d1a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d1e:	4b92      	ldr	r3, [pc, #584]	; (8006f68 <_printf_float+0x2d0>)
 8006d20:	4892      	ldr	r0, [pc, #584]	; (8006f6c <_printf_float+0x2d4>)
 8006d22:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006d26:	bf94      	ite	ls
 8006d28:	4698      	movls	r8, r3
 8006d2a:	4680      	movhi	r8, r0
 8006d2c:	2303      	movs	r3, #3
 8006d2e:	f04f 0a00 	mov.w	sl, #0
 8006d32:	6123      	str	r3, [r4, #16]
 8006d34:	f02b 0304 	bic.w	r3, fp, #4
 8006d38:	6023      	str	r3, [r4, #0]
 8006d3a:	4633      	mov	r3, r6
 8006d3c:	4621      	mov	r1, r4
 8006d3e:	4628      	mov	r0, r5
 8006d40:	9700      	str	r7, [sp, #0]
 8006d42:	aa0f      	add	r2, sp, #60	; 0x3c
 8006d44:	f000 f9d4 	bl	80070f0 <_printf_common>
 8006d48:	3001      	adds	r0, #1
 8006d4a:	f040 8090 	bne.w	8006e6e <_printf_float+0x1d6>
 8006d4e:	f04f 30ff 	mov.w	r0, #4294967295
 8006d52:	b011      	add	sp, #68	; 0x44
 8006d54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d58:	4642      	mov	r2, r8
 8006d5a:	4653      	mov	r3, sl
 8006d5c:	4640      	mov	r0, r8
 8006d5e:	4651      	mov	r1, sl
 8006d60:	f7f9 fe5e 	bl	8000a20 <__aeabi_dcmpun>
 8006d64:	b148      	cbz	r0, 8006d7a <_printf_float+0xe2>
 8006d66:	f1ba 0f00 	cmp.w	sl, #0
 8006d6a:	bfb8      	it	lt
 8006d6c:	232d      	movlt	r3, #45	; 0x2d
 8006d6e:	4880      	ldr	r0, [pc, #512]	; (8006f70 <_printf_float+0x2d8>)
 8006d70:	bfb8      	it	lt
 8006d72:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006d76:	4b7f      	ldr	r3, [pc, #508]	; (8006f74 <_printf_float+0x2dc>)
 8006d78:	e7d3      	b.n	8006d22 <_printf_float+0x8a>
 8006d7a:	6863      	ldr	r3, [r4, #4]
 8006d7c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006d80:	1c5a      	adds	r2, r3, #1
 8006d82:	d142      	bne.n	8006e0a <_printf_float+0x172>
 8006d84:	2306      	movs	r3, #6
 8006d86:	6063      	str	r3, [r4, #4]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	9206      	str	r2, [sp, #24]
 8006d8c:	aa0e      	add	r2, sp, #56	; 0x38
 8006d8e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8006d92:	aa0d      	add	r2, sp, #52	; 0x34
 8006d94:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8006d98:	9203      	str	r2, [sp, #12]
 8006d9a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8006d9e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006da2:	6023      	str	r3, [r4, #0]
 8006da4:	6863      	ldr	r3, [r4, #4]
 8006da6:	4642      	mov	r2, r8
 8006da8:	9300      	str	r3, [sp, #0]
 8006daa:	4628      	mov	r0, r5
 8006dac:	4653      	mov	r3, sl
 8006dae:	910b      	str	r1, [sp, #44]	; 0x2c
 8006db0:	f7ff fed4 	bl	8006b5c <__cvt>
 8006db4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006db6:	4680      	mov	r8, r0
 8006db8:	2947      	cmp	r1, #71	; 0x47
 8006dba:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006dbc:	d108      	bne.n	8006dd0 <_printf_float+0x138>
 8006dbe:	1cc8      	adds	r0, r1, #3
 8006dc0:	db02      	blt.n	8006dc8 <_printf_float+0x130>
 8006dc2:	6863      	ldr	r3, [r4, #4]
 8006dc4:	4299      	cmp	r1, r3
 8006dc6:	dd40      	ble.n	8006e4a <_printf_float+0x1b2>
 8006dc8:	f1a9 0902 	sub.w	r9, r9, #2
 8006dcc:	fa5f f989 	uxtb.w	r9, r9
 8006dd0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006dd4:	d81f      	bhi.n	8006e16 <_printf_float+0x17e>
 8006dd6:	464a      	mov	r2, r9
 8006dd8:	3901      	subs	r1, #1
 8006dda:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006dde:	910d      	str	r1, [sp, #52]	; 0x34
 8006de0:	f7ff ff1b 	bl	8006c1a <__exponent>
 8006de4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006de6:	4682      	mov	sl, r0
 8006de8:	1813      	adds	r3, r2, r0
 8006dea:	2a01      	cmp	r2, #1
 8006dec:	6123      	str	r3, [r4, #16]
 8006dee:	dc02      	bgt.n	8006df6 <_printf_float+0x15e>
 8006df0:	6822      	ldr	r2, [r4, #0]
 8006df2:	07d2      	lsls	r2, r2, #31
 8006df4:	d501      	bpl.n	8006dfa <_printf_float+0x162>
 8006df6:	3301      	adds	r3, #1
 8006df8:	6123      	str	r3, [r4, #16]
 8006dfa:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d09b      	beq.n	8006d3a <_printf_float+0xa2>
 8006e02:	232d      	movs	r3, #45	; 0x2d
 8006e04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e08:	e797      	b.n	8006d3a <_printf_float+0xa2>
 8006e0a:	2947      	cmp	r1, #71	; 0x47
 8006e0c:	d1bc      	bne.n	8006d88 <_printf_float+0xf0>
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d1ba      	bne.n	8006d88 <_printf_float+0xf0>
 8006e12:	2301      	movs	r3, #1
 8006e14:	e7b7      	b.n	8006d86 <_printf_float+0xee>
 8006e16:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8006e1a:	d118      	bne.n	8006e4e <_printf_float+0x1b6>
 8006e1c:	2900      	cmp	r1, #0
 8006e1e:	6863      	ldr	r3, [r4, #4]
 8006e20:	dd0b      	ble.n	8006e3a <_printf_float+0x1a2>
 8006e22:	6121      	str	r1, [r4, #16]
 8006e24:	b913      	cbnz	r3, 8006e2c <_printf_float+0x194>
 8006e26:	6822      	ldr	r2, [r4, #0]
 8006e28:	07d0      	lsls	r0, r2, #31
 8006e2a:	d502      	bpl.n	8006e32 <_printf_float+0x19a>
 8006e2c:	3301      	adds	r3, #1
 8006e2e:	440b      	add	r3, r1
 8006e30:	6123      	str	r3, [r4, #16]
 8006e32:	f04f 0a00 	mov.w	sl, #0
 8006e36:	65a1      	str	r1, [r4, #88]	; 0x58
 8006e38:	e7df      	b.n	8006dfa <_printf_float+0x162>
 8006e3a:	b913      	cbnz	r3, 8006e42 <_printf_float+0x1aa>
 8006e3c:	6822      	ldr	r2, [r4, #0]
 8006e3e:	07d2      	lsls	r2, r2, #31
 8006e40:	d501      	bpl.n	8006e46 <_printf_float+0x1ae>
 8006e42:	3302      	adds	r3, #2
 8006e44:	e7f4      	b.n	8006e30 <_printf_float+0x198>
 8006e46:	2301      	movs	r3, #1
 8006e48:	e7f2      	b.n	8006e30 <_printf_float+0x198>
 8006e4a:	f04f 0967 	mov.w	r9, #103	; 0x67
 8006e4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006e50:	4299      	cmp	r1, r3
 8006e52:	db05      	blt.n	8006e60 <_printf_float+0x1c8>
 8006e54:	6823      	ldr	r3, [r4, #0]
 8006e56:	6121      	str	r1, [r4, #16]
 8006e58:	07d8      	lsls	r0, r3, #31
 8006e5a:	d5ea      	bpl.n	8006e32 <_printf_float+0x19a>
 8006e5c:	1c4b      	adds	r3, r1, #1
 8006e5e:	e7e7      	b.n	8006e30 <_printf_float+0x198>
 8006e60:	2900      	cmp	r1, #0
 8006e62:	bfcc      	ite	gt
 8006e64:	2201      	movgt	r2, #1
 8006e66:	f1c1 0202 	rsble	r2, r1, #2
 8006e6a:	4413      	add	r3, r2
 8006e6c:	e7e0      	b.n	8006e30 <_printf_float+0x198>
 8006e6e:	6823      	ldr	r3, [r4, #0]
 8006e70:	055a      	lsls	r2, r3, #21
 8006e72:	d407      	bmi.n	8006e84 <_printf_float+0x1ec>
 8006e74:	6923      	ldr	r3, [r4, #16]
 8006e76:	4642      	mov	r2, r8
 8006e78:	4631      	mov	r1, r6
 8006e7a:	4628      	mov	r0, r5
 8006e7c:	47b8      	blx	r7
 8006e7e:	3001      	adds	r0, #1
 8006e80:	d12b      	bne.n	8006eda <_printf_float+0x242>
 8006e82:	e764      	b.n	8006d4e <_printf_float+0xb6>
 8006e84:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006e88:	f240 80dd 	bls.w	8007046 <_printf_float+0x3ae>
 8006e8c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006e90:	2200      	movs	r2, #0
 8006e92:	2300      	movs	r3, #0
 8006e94:	f7f9 fd92 	bl	80009bc <__aeabi_dcmpeq>
 8006e98:	2800      	cmp	r0, #0
 8006e9a:	d033      	beq.n	8006f04 <_printf_float+0x26c>
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	4631      	mov	r1, r6
 8006ea0:	4628      	mov	r0, r5
 8006ea2:	4a35      	ldr	r2, [pc, #212]	; (8006f78 <_printf_float+0x2e0>)
 8006ea4:	47b8      	blx	r7
 8006ea6:	3001      	adds	r0, #1
 8006ea8:	f43f af51 	beq.w	8006d4e <_printf_float+0xb6>
 8006eac:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006eb0:	429a      	cmp	r2, r3
 8006eb2:	db02      	blt.n	8006eba <_printf_float+0x222>
 8006eb4:	6823      	ldr	r3, [r4, #0]
 8006eb6:	07d8      	lsls	r0, r3, #31
 8006eb8:	d50f      	bpl.n	8006eda <_printf_float+0x242>
 8006eba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006ebe:	4631      	mov	r1, r6
 8006ec0:	4628      	mov	r0, r5
 8006ec2:	47b8      	blx	r7
 8006ec4:	3001      	adds	r0, #1
 8006ec6:	f43f af42 	beq.w	8006d4e <_printf_float+0xb6>
 8006eca:	f04f 0800 	mov.w	r8, #0
 8006ece:	f104 091a 	add.w	r9, r4, #26
 8006ed2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006ed4:	3b01      	subs	r3, #1
 8006ed6:	4543      	cmp	r3, r8
 8006ed8:	dc09      	bgt.n	8006eee <_printf_float+0x256>
 8006eda:	6823      	ldr	r3, [r4, #0]
 8006edc:	079b      	lsls	r3, r3, #30
 8006ede:	f100 8102 	bmi.w	80070e6 <_printf_float+0x44e>
 8006ee2:	68e0      	ldr	r0, [r4, #12]
 8006ee4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006ee6:	4298      	cmp	r0, r3
 8006ee8:	bfb8      	it	lt
 8006eea:	4618      	movlt	r0, r3
 8006eec:	e731      	b.n	8006d52 <_printf_float+0xba>
 8006eee:	2301      	movs	r3, #1
 8006ef0:	464a      	mov	r2, r9
 8006ef2:	4631      	mov	r1, r6
 8006ef4:	4628      	mov	r0, r5
 8006ef6:	47b8      	blx	r7
 8006ef8:	3001      	adds	r0, #1
 8006efa:	f43f af28 	beq.w	8006d4e <_printf_float+0xb6>
 8006efe:	f108 0801 	add.w	r8, r8, #1
 8006f02:	e7e6      	b.n	8006ed2 <_printf_float+0x23a>
 8006f04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	dc38      	bgt.n	8006f7c <_printf_float+0x2e4>
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	4631      	mov	r1, r6
 8006f0e:	4628      	mov	r0, r5
 8006f10:	4a19      	ldr	r2, [pc, #100]	; (8006f78 <_printf_float+0x2e0>)
 8006f12:	47b8      	blx	r7
 8006f14:	3001      	adds	r0, #1
 8006f16:	f43f af1a 	beq.w	8006d4e <_printf_float+0xb6>
 8006f1a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006f1e:	4313      	orrs	r3, r2
 8006f20:	d102      	bne.n	8006f28 <_printf_float+0x290>
 8006f22:	6823      	ldr	r3, [r4, #0]
 8006f24:	07d9      	lsls	r1, r3, #31
 8006f26:	d5d8      	bpl.n	8006eda <_printf_float+0x242>
 8006f28:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006f2c:	4631      	mov	r1, r6
 8006f2e:	4628      	mov	r0, r5
 8006f30:	47b8      	blx	r7
 8006f32:	3001      	adds	r0, #1
 8006f34:	f43f af0b 	beq.w	8006d4e <_printf_float+0xb6>
 8006f38:	f04f 0900 	mov.w	r9, #0
 8006f3c:	f104 0a1a 	add.w	sl, r4, #26
 8006f40:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f42:	425b      	negs	r3, r3
 8006f44:	454b      	cmp	r3, r9
 8006f46:	dc01      	bgt.n	8006f4c <_printf_float+0x2b4>
 8006f48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006f4a:	e794      	b.n	8006e76 <_printf_float+0x1de>
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	4652      	mov	r2, sl
 8006f50:	4631      	mov	r1, r6
 8006f52:	4628      	mov	r0, r5
 8006f54:	47b8      	blx	r7
 8006f56:	3001      	adds	r0, #1
 8006f58:	f43f aef9 	beq.w	8006d4e <_printf_float+0xb6>
 8006f5c:	f109 0901 	add.w	r9, r9, #1
 8006f60:	e7ee      	b.n	8006f40 <_printf_float+0x2a8>
 8006f62:	bf00      	nop
 8006f64:	7fefffff 	.word	0x7fefffff
 8006f68:	0800b390 	.word	0x0800b390
 8006f6c:	0800b394 	.word	0x0800b394
 8006f70:	0800b39c 	.word	0x0800b39c
 8006f74:	0800b398 	.word	0x0800b398
 8006f78:	0800b3a0 	.word	0x0800b3a0
 8006f7c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006f7e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006f80:	429a      	cmp	r2, r3
 8006f82:	bfa8      	it	ge
 8006f84:	461a      	movge	r2, r3
 8006f86:	2a00      	cmp	r2, #0
 8006f88:	4691      	mov	r9, r2
 8006f8a:	dc37      	bgt.n	8006ffc <_printf_float+0x364>
 8006f8c:	f04f 0b00 	mov.w	fp, #0
 8006f90:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006f94:	f104 021a 	add.w	r2, r4, #26
 8006f98:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006f9c:	ebaa 0309 	sub.w	r3, sl, r9
 8006fa0:	455b      	cmp	r3, fp
 8006fa2:	dc33      	bgt.n	800700c <_printf_float+0x374>
 8006fa4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006fa8:	429a      	cmp	r2, r3
 8006faa:	db3b      	blt.n	8007024 <_printf_float+0x38c>
 8006fac:	6823      	ldr	r3, [r4, #0]
 8006fae:	07da      	lsls	r2, r3, #31
 8006fb0:	d438      	bmi.n	8007024 <_printf_float+0x38c>
 8006fb2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006fb4:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006fb6:	eba3 020a 	sub.w	r2, r3, sl
 8006fba:	eba3 0901 	sub.w	r9, r3, r1
 8006fbe:	4591      	cmp	r9, r2
 8006fc0:	bfa8      	it	ge
 8006fc2:	4691      	movge	r9, r2
 8006fc4:	f1b9 0f00 	cmp.w	r9, #0
 8006fc8:	dc34      	bgt.n	8007034 <_printf_float+0x39c>
 8006fca:	f04f 0800 	mov.w	r8, #0
 8006fce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006fd2:	f104 0a1a 	add.w	sl, r4, #26
 8006fd6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006fda:	1a9b      	subs	r3, r3, r2
 8006fdc:	eba3 0309 	sub.w	r3, r3, r9
 8006fe0:	4543      	cmp	r3, r8
 8006fe2:	f77f af7a 	ble.w	8006eda <_printf_float+0x242>
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	4652      	mov	r2, sl
 8006fea:	4631      	mov	r1, r6
 8006fec:	4628      	mov	r0, r5
 8006fee:	47b8      	blx	r7
 8006ff0:	3001      	adds	r0, #1
 8006ff2:	f43f aeac 	beq.w	8006d4e <_printf_float+0xb6>
 8006ff6:	f108 0801 	add.w	r8, r8, #1
 8006ffa:	e7ec      	b.n	8006fd6 <_printf_float+0x33e>
 8006ffc:	4613      	mov	r3, r2
 8006ffe:	4631      	mov	r1, r6
 8007000:	4642      	mov	r2, r8
 8007002:	4628      	mov	r0, r5
 8007004:	47b8      	blx	r7
 8007006:	3001      	adds	r0, #1
 8007008:	d1c0      	bne.n	8006f8c <_printf_float+0x2f4>
 800700a:	e6a0      	b.n	8006d4e <_printf_float+0xb6>
 800700c:	2301      	movs	r3, #1
 800700e:	4631      	mov	r1, r6
 8007010:	4628      	mov	r0, r5
 8007012:	920b      	str	r2, [sp, #44]	; 0x2c
 8007014:	47b8      	blx	r7
 8007016:	3001      	adds	r0, #1
 8007018:	f43f ae99 	beq.w	8006d4e <_printf_float+0xb6>
 800701c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800701e:	f10b 0b01 	add.w	fp, fp, #1
 8007022:	e7b9      	b.n	8006f98 <_printf_float+0x300>
 8007024:	4631      	mov	r1, r6
 8007026:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800702a:	4628      	mov	r0, r5
 800702c:	47b8      	blx	r7
 800702e:	3001      	adds	r0, #1
 8007030:	d1bf      	bne.n	8006fb2 <_printf_float+0x31a>
 8007032:	e68c      	b.n	8006d4e <_printf_float+0xb6>
 8007034:	464b      	mov	r3, r9
 8007036:	4631      	mov	r1, r6
 8007038:	4628      	mov	r0, r5
 800703a:	eb08 020a 	add.w	r2, r8, sl
 800703e:	47b8      	blx	r7
 8007040:	3001      	adds	r0, #1
 8007042:	d1c2      	bne.n	8006fca <_printf_float+0x332>
 8007044:	e683      	b.n	8006d4e <_printf_float+0xb6>
 8007046:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007048:	2a01      	cmp	r2, #1
 800704a:	dc01      	bgt.n	8007050 <_printf_float+0x3b8>
 800704c:	07db      	lsls	r3, r3, #31
 800704e:	d537      	bpl.n	80070c0 <_printf_float+0x428>
 8007050:	2301      	movs	r3, #1
 8007052:	4642      	mov	r2, r8
 8007054:	4631      	mov	r1, r6
 8007056:	4628      	mov	r0, r5
 8007058:	47b8      	blx	r7
 800705a:	3001      	adds	r0, #1
 800705c:	f43f ae77 	beq.w	8006d4e <_printf_float+0xb6>
 8007060:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007064:	4631      	mov	r1, r6
 8007066:	4628      	mov	r0, r5
 8007068:	47b8      	blx	r7
 800706a:	3001      	adds	r0, #1
 800706c:	f43f ae6f 	beq.w	8006d4e <_printf_float+0xb6>
 8007070:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007074:	2200      	movs	r2, #0
 8007076:	2300      	movs	r3, #0
 8007078:	f7f9 fca0 	bl	80009bc <__aeabi_dcmpeq>
 800707c:	b9d8      	cbnz	r0, 80070b6 <_printf_float+0x41e>
 800707e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007080:	f108 0201 	add.w	r2, r8, #1
 8007084:	3b01      	subs	r3, #1
 8007086:	4631      	mov	r1, r6
 8007088:	4628      	mov	r0, r5
 800708a:	47b8      	blx	r7
 800708c:	3001      	adds	r0, #1
 800708e:	d10e      	bne.n	80070ae <_printf_float+0x416>
 8007090:	e65d      	b.n	8006d4e <_printf_float+0xb6>
 8007092:	2301      	movs	r3, #1
 8007094:	464a      	mov	r2, r9
 8007096:	4631      	mov	r1, r6
 8007098:	4628      	mov	r0, r5
 800709a:	47b8      	blx	r7
 800709c:	3001      	adds	r0, #1
 800709e:	f43f ae56 	beq.w	8006d4e <_printf_float+0xb6>
 80070a2:	f108 0801 	add.w	r8, r8, #1
 80070a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80070a8:	3b01      	subs	r3, #1
 80070aa:	4543      	cmp	r3, r8
 80070ac:	dcf1      	bgt.n	8007092 <_printf_float+0x3fa>
 80070ae:	4653      	mov	r3, sl
 80070b0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80070b4:	e6e0      	b.n	8006e78 <_printf_float+0x1e0>
 80070b6:	f04f 0800 	mov.w	r8, #0
 80070ba:	f104 091a 	add.w	r9, r4, #26
 80070be:	e7f2      	b.n	80070a6 <_printf_float+0x40e>
 80070c0:	2301      	movs	r3, #1
 80070c2:	4642      	mov	r2, r8
 80070c4:	e7df      	b.n	8007086 <_printf_float+0x3ee>
 80070c6:	2301      	movs	r3, #1
 80070c8:	464a      	mov	r2, r9
 80070ca:	4631      	mov	r1, r6
 80070cc:	4628      	mov	r0, r5
 80070ce:	47b8      	blx	r7
 80070d0:	3001      	adds	r0, #1
 80070d2:	f43f ae3c 	beq.w	8006d4e <_printf_float+0xb6>
 80070d6:	f108 0801 	add.w	r8, r8, #1
 80070da:	68e3      	ldr	r3, [r4, #12]
 80070dc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80070de:	1a5b      	subs	r3, r3, r1
 80070e0:	4543      	cmp	r3, r8
 80070e2:	dcf0      	bgt.n	80070c6 <_printf_float+0x42e>
 80070e4:	e6fd      	b.n	8006ee2 <_printf_float+0x24a>
 80070e6:	f04f 0800 	mov.w	r8, #0
 80070ea:	f104 0919 	add.w	r9, r4, #25
 80070ee:	e7f4      	b.n	80070da <_printf_float+0x442>

080070f0 <_printf_common>:
 80070f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070f4:	4616      	mov	r6, r2
 80070f6:	4699      	mov	r9, r3
 80070f8:	688a      	ldr	r2, [r1, #8]
 80070fa:	690b      	ldr	r3, [r1, #16]
 80070fc:	4607      	mov	r7, r0
 80070fe:	4293      	cmp	r3, r2
 8007100:	bfb8      	it	lt
 8007102:	4613      	movlt	r3, r2
 8007104:	6033      	str	r3, [r6, #0]
 8007106:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800710a:	460c      	mov	r4, r1
 800710c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007110:	b10a      	cbz	r2, 8007116 <_printf_common+0x26>
 8007112:	3301      	adds	r3, #1
 8007114:	6033      	str	r3, [r6, #0]
 8007116:	6823      	ldr	r3, [r4, #0]
 8007118:	0699      	lsls	r1, r3, #26
 800711a:	bf42      	ittt	mi
 800711c:	6833      	ldrmi	r3, [r6, #0]
 800711e:	3302      	addmi	r3, #2
 8007120:	6033      	strmi	r3, [r6, #0]
 8007122:	6825      	ldr	r5, [r4, #0]
 8007124:	f015 0506 	ands.w	r5, r5, #6
 8007128:	d106      	bne.n	8007138 <_printf_common+0x48>
 800712a:	f104 0a19 	add.w	sl, r4, #25
 800712e:	68e3      	ldr	r3, [r4, #12]
 8007130:	6832      	ldr	r2, [r6, #0]
 8007132:	1a9b      	subs	r3, r3, r2
 8007134:	42ab      	cmp	r3, r5
 8007136:	dc28      	bgt.n	800718a <_printf_common+0x9a>
 8007138:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800713c:	1e13      	subs	r3, r2, #0
 800713e:	6822      	ldr	r2, [r4, #0]
 8007140:	bf18      	it	ne
 8007142:	2301      	movne	r3, #1
 8007144:	0692      	lsls	r2, r2, #26
 8007146:	d42d      	bmi.n	80071a4 <_printf_common+0xb4>
 8007148:	4649      	mov	r1, r9
 800714a:	4638      	mov	r0, r7
 800714c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007150:	47c0      	blx	r8
 8007152:	3001      	adds	r0, #1
 8007154:	d020      	beq.n	8007198 <_printf_common+0xa8>
 8007156:	6823      	ldr	r3, [r4, #0]
 8007158:	68e5      	ldr	r5, [r4, #12]
 800715a:	f003 0306 	and.w	r3, r3, #6
 800715e:	2b04      	cmp	r3, #4
 8007160:	bf18      	it	ne
 8007162:	2500      	movne	r5, #0
 8007164:	6832      	ldr	r2, [r6, #0]
 8007166:	f04f 0600 	mov.w	r6, #0
 800716a:	68a3      	ldr	r3, [r4, #8]
 800716c:	bf08      	it	eq
 800716e:	1aad      	subeq	r5, r5, r2
 8007170:	6922      	ldr	r2, [r4, #16]
 8007172:	bf08      	it	eq
 8007174:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007178:	4293      	cmp	r3, r2
 800717a:	bfc4      	itt	gt
 800717c:	1a9b      	subgt	r3, r3, r2
 800717e:	18ed      	addgt	r5, r5, r3
 8007180:	341a      	adds	r4, #26
 8007182:	42b5      	cmp	r5, r6
 8007184:	d11a      	bne.n	80071bc <_printf_common+0xcc>
 8007186:	2000      	movs	r0, #0
 8007188:	e008      	b.n	800719c <_printf_common+0xac>
 800718a:	2301      	movs	r3, #1
 800718c:	4652      	mov	r2, sl
 800718e:	4649      	mov	r1, r9
 8007190:	4638      	mov	r0, r7
 8007192:	47c0      	blx	r8
 8007194:	3001      	adds	r0, #1
 8007196:	d103      	bne.n	80071a0 <_printf_common+0xb0>
 8007198:	f04f 30ff 	mov.w	r0, #4294967295
 800719c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071a0:	3501      	adds	r5, #1
 80071a2:	e7c4      	b.n	800712e <_printf_common+0x3e>
 80071a4:	2030      	movs	r0, #48	; 0x30
 80071a6:	18e1      	adds	r1, r4, r3
 80071a8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80071ac:	1c5a      	adds	r2, r3, #1
 80071ae:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80071b2:	4422      	add	r2, r4
 80071b4:	3302      	adds	r3, #2
 80071b6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80071ba:	e7c5      	b.n	8007148 <_printf_common+0x58>
 80071bc:	2301      	movs	r3, #1
 80071be:	4622      	mov	r2, r4
 80071c0:	4649      	mov	r1, r9
 80071c2:	4638      	mov	r0, r7
 80071c4:	47c0      	blx	r8
 80071c6:	3001      	adds	r0, #1
 80071c8:	d0e6      	beq.n	8007198 <_printf_common+0xa8>
 80071ca:	3601      	adds	r6, #1
 80071cc:	e7d9      	b.n	8007182 <_printf_common+0x92>
	...

080071d0 <_printf_i>:
 80071d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80071d4:	7e0f      	ldrb	r7, [r1, #24]
 80071d6:	4691      	mov	r9, r2
 80071d8:	2f78      	cmp	r7, #120	; 0x78
 80071da:	4680      	mov	r8, r0
 80071dc:	460c      	mov	r4, r1
 80071de:	469a      	mov	sl, r3
 80071e0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80071e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80071e6:	d807      	bhi.n	80071f8 <_printf_i+0x28>
 80071e8:	2f62      	cmp	r7, #98	; 0x62
 80071ea:	d80a      	bhi.n	8007202 <_printf_i+0x32>
 80071ec:	2f00      	cmp	r7, #0
 80071ee:	f000 80d9 	beq.w	80073a4 <_printf_i+0x1d4>
 80071f2:	2f58      	cmp	r7, #88	; 0x58
 80071f4:	f000 80a4 	beq.w	8007340 <_printf_i+0x170>
 80071f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80071fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007200:	e03a      	b.n	8007278 <_printf_i+0xa8>
 8007202:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007206:	2b15      	cmp	r3, #21
 8007208:	d8f6      	bhi.n	80071f8 <_printf_i+0x28>
 800720a:	a101      	add	r1, pc, #4	; (adr r1, 8007210 <_printf_i+0x40>)
 800720c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007210:	08007269 	.word	0x08007269
 8007214:	0800727d 	.word	0x0800727d
 8007218:	080071f9 	.word	0x080071f9
 800721c:	080071f9 	.word	0x080071f9
 8007220:	080071f9 	.word	0x080071f9
 8007224:	080071f9 	.word	0x080071f9
 8007228:	0800727d 	.word	0x0800727d
 800722c:	080071f9 	.word	0x080071f9
 8007230:	080071f9 	.word	0x080071f9
 8007234:	080071f9 	.word	0x080071f9
 8007238:	080071f9 	.word	0x080071f9
 800723c:	0800738b 	.word	0x0800738b
 8007240:	080072ad 	.word	0x080072ad
 8007244:	0800736d 	.word	0x0800736d
 8007248:	080071f9 	.word	0x080071f9
 800724c:	080071f9 	.word	0x080071f9
 8007250:	080073ad 	.word	0x080073ad
 8007254:	080071f9 	.word	0x080071f9
 8007258:	080072ad 	.word	0x080072ad
 800725c:	080071f9 	.word	0x080071f9
 8007260:	080071f9 	.word	0x080071f9
 8007264:	08007375 	.word	0x08007375
 8007268:	682b      	ldr	r3, [r5, #0]
 800726a:	1d1a      	adds	r2, r3, #4
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	602a      	str	r2, [r5, #0]
 8007270:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007274:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007278:	2301      	movs	r3, #1
 800727a:	e0a4      	b.n	80073c6 <_printf_i+0x1f6>
 800727c:	6820      	ldr	r0, [r4, #0]
 800727e:	6829      	ldr	r1, [r5, #0]
 8007280:	0606      	lsls	r6, r0, #24
 8007282:	f101 0304 	add.w	r3, r1, #4
 8007286:	d50a      	bpl.n	800729e <_printf_i+0xce>
 8007288:	680e      	ldr	r6, [r1, #0]
 800728a:	602b      	str	r3, [r5, #0]
 800728c:	2e00      	cmp	r6, #0
 800728e:	da03      	bge.n	8007298 <_printf_i+0xc8>
 8007290:	232d      	movs	r3, #45	; 0x2d
 8007292:	4276      	negs	r6, r6
 8007294:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007298:	230a      	movs	r3, #10
 800729a:	485e      	ldr	r0, [pc, #376]	; (8007414 <_printf_i+0x244>)
 800729c:	e019      	b.n	80072d2 <_printf_i+0x102>
 800729e:	680e      	ldr	r6, [r1, #0]
 80072a0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80072a4:	602b      	str	r3, [r5, #0]
 80072a6:	bf18      	it	ne
 80072a8:	b236      	sxthne	r6, r6
 80072aa:	e7ef      	b.n	800728c <_printf_i+0xbc>
 80072ac:	682b      	ldr	r3, [r5, #0]
 80072ae:	6820      	ldr	r0, [r4, #0]
 80072b0:	1d19      	adds	r1, r3, #4
 80072b2:	6029      	str	r1, [r5, #0]
 80072b4:	0601      	lsls	r1, r0, #24
 80072b6:	d501      	bpl.n	80072bc <_printf_i+0xec>
 80072b8:	681e      	ldr	r6, [r3, #0]
 80072ba:	e002      	b.n	80072c2 <_printf_i+0xf2>
 80072bc:	0646      	lsls	r6, r0, #25
 80072be:	d5fb      	bpl.n	80072b8 <_printf_i+0xe8>
 80072c0:	881e      	ldrh	r6, [r3, #0]
 80072c2:	2f6f      	cmp	r7, #111	; 0x6f
 80072c4:	bf0c      	ite	eq
 80072c6:	2308      	moveq	r3, #8
 80072c8:	230a      	movne	r3, #10
 80072ca:	4852      	ldr	r0, [pc, #328]	; (8007414 <_printf_i+0x244>)
 80072cc:	2100      	movs	r1, #0
 80072ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80072d2:	6865      	ldr	r5, [r4, #4]
 80072d4:	2d00      	cmp	r5, #0
 80072d6:	bfa8      	it	ge
 80072d8:	6821      	ldrge	r1, [r4, #0]
 80072da:	60a5      	str	r5, [r4, #8]
 80072dc:	bfa4      	itt	ge
 80072de:	f021 0104 	bicge.w	r1, r1, #4
 80072e2:	6021      	strge	r1, [r4, #0]
 80072e4:	b90e      	cbnz	r6, 80072ea <_printf_i+0x11a>
 80072e6:	2d00      	cmp	r5, #0
 80072e8:	d04d      	beq.n	8007386 <_printf_i+0x1b6>
 80072ea:	4615      	mov	r5, r2
 80072ec:	fbb6 f1f3 	udiv	r1, r6, r3
 80072f0:	fb03 6711 	mls	r7, r3, r1, r6
 80072f4:	5dc7      	ldrb	r7, [r0, r7]
 80072f6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80072fa:	4637      	mov	r7, r6
 80072fc:	42bb      	cmp	r3, r7
 80072fe:	460e      	mov	r6, r1
 8007300:	d9f4      	bls.n	80072ec <_printf_i+0x11c>
 8007302:	2b08      	cmp	r3, #8
 8007304:	d10b      	bne.n	800731e <_printf_i+0x14e>
 8007306:	6823      	ldr	r3, [r4, #0]
 8007308:	07de      	lsls	r6, r3, #31
 800730a:	d508      	bpl.n	800731e <_printf_i+0x14e>
 800730c:	6923      	ldr	r3, [r4, #16]
 800730e:	6861      	ldr	r1, [r4, #4]
 8007310:	4299      	cmp	r1, r3
 8007312:	bfde      	ittt	le
 8007314:	2330      	movle	r3, #48	; 0x30
 8007316:	f805 3c01 	strble.w	r3, [r5, #-1]
 800731a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800731e:	1b52      	subs	r2, r2, r5
 8007320:	6122      	str	r2, [r4, #16]
 8007322:	464b      	mov	r3, r9
 8007324:	4621      	mov	r1, r4
 8007326:	4640      	mov	r0, r8
 8007328:	f8cd a000 	str.w	sl, [sp]
 800732c:	aa03      	add	r2, sp, #12
 800732e:	f7ff fedf 	bl	80070f0 <_printf_common>
 8007332:	3001      	adds	r0, #1
 8007334:	d14c      	bne.n	80073d0 <_printf_i+0x200>
 8007336:	f04f 30ff 	mov.w	r0, #4294967295
 800733a:	b004      	add	sp, #16
 800733c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007340:	4834      	ldr	r0, [pc, #208]	; (8007414 <_printf_i+0x244>)
 8007342:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007346:	6829      	ldr	r1, [r5, #0]
 8007348:	6823      	ldr	r3, [r4, #0]
 800734a:	f851 6b04 	ldr.w	r6, [r1], #4
 800734e:	6029      	str	r1, [r5, #0]
 8007350:	061d      	lsls	r5, r3, #24
 8007352:	d514      	bpl.n	800737e <_printf_i+0x1ae>
 8007354:	07df      	lsls	r7, r3, #31
 8007356:	bf44      	itt	mi
 8007358:	f043 0320 	orrmi.w	r3, r3, #32
 800735c:	6023      	strmi	r3, [r4, #0]
 800735e:	b91e      	cbnz	r6, 8007368 <_printf_i+0x198>
 8007360:	6823      	ldr	r3, [r4, #0]
 8007362:	f023 0320 	bic.w	r3, r3, #32
 8007366:	6023      	str	r3, [r4, #0]
 8007368:	2310      	movs	r3, #16
 800736a:	e7af      	b.n	80072cc <_printf_i+0xfc>
 800736c:	6823      	ldr	r3, [r4, #0]
 800736e:	f043 0320 	orr.w	r3, r3, #32
 8007372:	6023      	str	r3, [r4, #0]
 8007374:	2378      	movs	r3, #120	; 0x78
 8007376:	4828      	ldr	r0, [pc, #160]	; (8007418 <_printf_i+0x248>)
 8007378:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800737c:	e7e3      	b.n	8007346 <_printf_i+0x176>
 800737e:	0659      	lsls	r1, r3, #25
 8007380:	bf48      	it	mi
 8007382:	b2b6      	uxthmi	r6, r6
 8007384:	e7e6      	b.n	8007354 <_printf_i+0x184>
 8007386:	4615      	mov	r5, r2
 8007388:	e7bb      	b.n	8007302 <_printf_i+0x132>
 800738a:	682b      	ldr	r3, [r5, #0]
 800738c:	6826      	ldr	r6, [r4, #0]
 800738e:	1d18      	adds	r0, r3, #4
 8007390:	6961      	ldr	r1, [r4, #20]
 8007392:	6028      	str	r0, [r5, #0]
 8007394:	0635      	lsls	r5, r6, #24
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	d501      	bpl.n	800739e <_printf_i+0x1ce>
 800739a:	6019      	str	r1, [r3, #0]
 800739c:	e002      	b.n	80073a4 <_printf_i+0x1d4>
 800739e:	0670      	lsls	r0, r6, #25
 80073a0:	d5fb      	bpl.n	800739a <_printf_i+0x1ca>
 80073a2:	8019      	strh	r1, [r3, #0]
 80073a4:	2300      	movs	r3, #0
 80073a6:	4615      	mov	r5, r2
 80073a8:	6123      	str	r3, [r4, #16]
 80073aa:	e7ba      	b.n	8007322 <_printf_i+0x152>
 80073ac:	682b      	ldr	r3, [r5, #0]
 80073ae:	2100      	movs	r1, #0
 80073b0:	1d1a      	adds	r2, r3, #4
 80073b2:	602a      	str	r2, [r5, #0]
 80073b4:	681d      	ldr	r5, [r3, #0]
 80073b6:	6862      	ldr	r2, [r4, #4]
 80073b8:	4628      	mov	r0, r5
 80073ba:	f002 f98d 	bl	80096d8 <memchr>
 80073be:	b108      	cbz	r0, 80073c4 <_printf_i+0x1f4>
 80073c0:	1b40      	subs	r0, r0, r5
 80073c2:	6060      	str	r0, [r4, #4]
 80073c4:	6863      	ldr	r3, [r4, #4]
 80073c6:	6123      	str	r3, [r4, #16]
 80073c8:	2300      	movs	r3, #0
 80073ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073ce:	e7a8      	b.n	8007322 <_printf_i+0x152>
 80073d0:	462a      	mov	r2, r5
 80073d2:	4649      	mov	r1, r9
 80073d4:	4640      	mov	r0, r8
 80073d6:	6923      	ldr	r3, [r4, #16]
 80073d8:	47d0      	blx	sl
 80073da:	3001      	adds	r0, #1
 80073dc:	d0ab      	beq.n	8007336 <_printf_i+0x166>
 80073de:	6823      	ldr	r3, [r4, #0]
 80073e0:	079b      	lsls	r3, r3, #30
 80073e2:	d413      	bmi.n	800740c <_printf_i+0x23c>
 80073e4:	68e0      	ldr	r0, [r4, #12]
 80073e6:	9b03      	ldr	r3, [sp, #12]
 80073e8:	4298      	cmp	r0, r3
 80073ea:	bfb8      	it	lt
 80073ec:	4618      	movlt	r0, r3
 80073ee:	e7a4      	b.n	800733a <_printf_i+0x16a>
 80073f0:	2301      	movs	r3, #1
 80073f2:	4632      	mov	r2, r6
 80073f4:	4649      	mov	r1, r9
 80073f6:	4640      	mov	r0, r8
 80073f8:	47d0      	blx	sl
 80073fa:	3001      	adds	r0, #1
 80073fc:	d09b      	beq.n	8007336 <_printf_i+0x166>
 80073fe:	3501      	adds	r5, #1
 8007400:	68e3      	ldr	r3, [r4, #12]
 8007402:	9903      	ldr	r1, [sp, #12]
 8007404:	1a5b      	subs	r3, r3, r1
 8007406:	42ab      	cmp	r3, r5
 8007408:	dcf2      	bgt.n	80073f0 <_printf_i+0x220>
 800740a:	e7eb      	b.n	80073e4 <_printf_i+0x214>
 800740c:	2500      	movs	r5, #0
 800740e:	f104 0619 	add.w	r6, r4, #25
 8007412:	e7f5      	b.n	8007400 <_printf_i+0x230>
 8007414:	0800b3a2 	.word	0x0800b3a2
 8007418:	0800b3b3 	.word	0x0800b3b3

0800741c <siprintf>:
 800741c:	b40e      	push	{r1, r2, r3}
 800741e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007422:	b500      	push	{lr}
 8007424:	b09c      	sub	sp, #112	; 0x70
 8007426:	ab1d      	add	r3, sp, #116	; 0x74
 8007428:	9002      	str	r0, [sp, #8]
 800742a:	9006      	str	r0, [sp, #24]
 800742c:	9107      	str	r1, [sp, #28]
 800742e:	9104      	str	r1, [sp, #16]
 8007430:	4808      	ldr	r0, [pc, #32]	; (8007454 <siprintf+0x38>)
 8007432:	4909      	ldr	r1, [pc, #36]	; (8007458 <siprintf+0x3c>)
 8007434:	f853 2b04 	ldr.w	r2, [r3], #4
 8007438:	9105      	str	r1, [sp, #20]
 800743a:	6800      	ldr	r0, [r0, #0]
 800743c:	a902      	add	r1, sp, #8
 800743e:	9301      	str	r3, [sp, #4]
 8007440:	f002 ff5c 	bl	800a2fc <_svfiprintf_r>
 8007444:	2200      	movs	r2, #0
 8007446:	9b02      	ldr	r3, [sp, #8]
 8007448:	701a      	strb	r2, [r3, #0]
 800744a:	b01c      	add	sp, #112	; 0x70
 800744c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007450:	b003      	add	sp, #12
 8007452:	4770      	bx	lr
 8007454:	20000190 	.word	0x20000190
 8007458:	ffff0208 	.word	0xffff0208

0800745c <strcat>:
 800745c:	4602      	mov	r2, r0
 800745e:	b510      	push	{r4, lr}
 8007460:	7814      	ldrb	r4, [r2, #0]
 8007462:	4613      	mov	r3, r2
 8007464:	3201      	adds	r2, #1
 8007466:	2c00      	cmp	r4, #0
 8007468:	d1fa      	bne.n	8007460 <strcat+0x4>
 800746a:	3b01      	subs	r3, #1
 800746c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007470:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007474:	2a00      	cmp	r2, #0
 8007476:	d1f9      	bne.n	800746c <strcat+0x10>
 8007478:	bd10      	pop	{r4, pc}

0800747a <strcpy>:
 800747a:	4603      	mov	r3, r0
 800747c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007480:	f803 2b01 	strb.w	r2, [r3], #1
 8007484:	2a00      	cmp	r2, #0
 8007486:	d1f9      	bne.n	800747c <strcpy+0x2>
 8007488:	4770      	bx	lr

0800748a <sulp>:
 800748a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800748e:	460f      	mov	r7, r1
 8007490:	4690      	mov	r8, r2
 8007492:	f002 fc9f 	bl	8009dd4 <__ulp>
 8007496:	4604      	mov	r4, r0
 8007498:	460d      	mov	r5, r1
 800749a:	f1b8 0f00 	cmp.w	r8, #0
 800749e:	d011      	beq.n	80074c4 <sulp+0x3a>
 80074a0:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80074a4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	dd0b      	ble.n	80074c4 <sulp+0x3a>
 80074ac:	2400      	movs	r4, #0
 80074ae:	051b      	lsls	r3, r3, #20
 80074b0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80074b4:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80074b8:	4622      	mov	r2, r4
 80074ba:	462b      	mov	r3, r5
 80074bc:	f7f9 f816 	bl	80004ec <__aeabi_dmul>
 80074c0:	4604      	mov	r4, r0
 80074c2:	460d      	mov	r5, r1
 80074c4:	4620      	mov	r0, r4
 80074c6:	4629      	mov	r1, r5
 80074c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074cc:	0000      	movs	r0, r0
	...

080074d0 <_strtod_l>:
 80074d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074d4:	469b      	mov	fp, r3
 80074d6:	2300      	movs	r3, #0
 80074d8:	b09f      	sub	sp, #124	; 0x7c
 80074da:	931a      	str	r3, [sp, #104]	; 0x68
 80074dc:	4b9e      	ldr	r3, [pc, #632]	; (8007758 <_strtod_l+0x288>)
 80074de:	4682      	mov	sl, r0
 80074e0:	681f      	ldr	r7, [r3, #0]
 80074e2:	460e      	mov	r6, r1
 80074e4:	4638      	mov	r0, r7
 80074e6:	9215      	str	r2, [sp, #84]	; 0x54
 80074e8:	f7f8 fe3c 	bl	8000164 <strlen>
 80074ec:	f04f 0800 	mov.w	r8, #0
 80074f0:	4604      	mov	r4, r0
 80074f2:	f04f 0900 	mov.w	r9, #0
 80074f6:	9619      	str	r6, [sp, #100]	; 0x64
 80074f8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80074fa:	781a      	ldrb	r2, [r3, #0]
 80074fc:	2a2b      	cmp	r2, #43	; 0x2b
 80074fe:	d04c      	beq.n	800759a <_strtod_l+0xca>
 8007500:	d83a      	bhi.n	8007578 <_strtod_l+0xa8>
 8007502:	2a0d      	cmp	r2, #13
 8007504:	d833      	bhi.n	800756e <_strtod_l+0x9e>
 8007506:	2a08      	cmp	r2, #8
 8007508:	d833      	bhi.n	8007572 <_strtod_l+0xa2>
 800750a:	2a00      	cmp	r2, #0
 800750c:	d03d      	beq.n	800758a <_strtod_l+0xba>
 800750e:	2300      	movs	r3, #0
 8007510:	930a      	str	r3, [sp, #40]	; 0x28
 8007512:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8007514:	782b      	ldrb	r3, [r5, #0]
 8007516:	2b30      	cmp	r3, #48	; 0x30
 8007518:	f040 80aa 	bne.w	8007670 <_strtod_l+0x1a0>
 800751c:	786b      	ldrb	r3, [r5, #1]
 800751e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007522:	2b58      	cmp	r3, #88	; 0x58
 8007524:	d166      	bne.n	80075f4 <_strtod_l+0x124>
 8007526:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007528:	4650      	mov	r0, sl
 800752a:	9301      	str	r3, [sp, #4]
 800752c:	ab1a      	add	r3, sp, #104	; 0x68
 800752e:	9300      	str	r3, [sp, #0]
 8007530:	4a8a      	ldr	r2, [pc, #552]	; (800775c <_strtod_l+0x28c>)
 8007532:	f8cd b008 	str.w	fp, [sp, #8]
 8007536:	ab1b      	add	r3, sp, #108	; 0x6c
 8007538:	a919      	add	r1, sp, #100	; 0x64
 800753a:	f001 fdb1 	bl	80090a0 <__gethex>
 800753e:	f010 0607 	ands.w	r6, r0, #7
 8007542:	4604      	mov	r4, r0
 8007544:	d005      	beq.n	8007552 <_strtod_l+0x82>
 8007546:	2e06      	cmp	r6, #6
 8007548:	d129      	bne.n	800759e <_strtod_l+0xce>
 800754a:	2300      	movs	r3, #0
 800754c:	3501      	adds	r5, #1
 800754e:	9519      	str	r5, [sp, #100]	; 0x64
 8007550:	930a      	str	r3, [sp, #40]	; 0x28
 8007552:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007554:	2b00      	cmp	r3, #0
 8007556:	f040 858a 	bne.w	800806e <_strtod_l+0xb9e>
 800755a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800755c:	b1d3      	cbz	r3, 8007594 <_strtod_l+0xc4>
 800755e:	4642      	mov	r2, r8
 8007560:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007564:	4610      	mov	r0, r2
 8007566:	4619      	mov	r1, r3
 8007568:	b01f      	add	sp, #124	; 0x7c
 800756a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800756e:	2a20      	cmp	r2, #32
 8007570:	d1cd      	bne.n	800750e <_strtod_l+0x3e>
 8007572:	3301      	adds	r3, #1
 8007574:	9319      	str	r3, [sp, #100]	; 0x64
 8007576:	e7bf      	b.n	80074f8 <_strtod_l+0x28>
 8007578:	2a2d      	cmp	r2, #45	; 0x2d
 800757a:	d1c8      	bne.n	800750e <_strtod_l+0x3e>
 800757c:	2201      	movs	r2, #1
 800757e:	920a      	str	r2, [sp, #40]	; 0x28
 8007580:	1c5a      	adds	r2, r3, #1
 8007582:	9219      	str	r2, [sp, #100]	; 0x64
 8007584:	785b      	ldrb	r3, [r3, #1]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d1c3      	bne.n	8007512 <_strtod_l+0x42>
 800758a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800758c:	9619      	str	r6, [sp, #100]	; 0x64
 800758e:	2b00      	cmp	r3, #0
 8007590:	f040 856b 	bne.w	800806a <_strtod_l+0xb9a>
 8007594:	4642      	mov	r2, r8
 8007596:	464b      	mov	r3, r9
 8007598:	e7e4      	b.n	8007564 <_strtod_l+0x94>
 800759a:	2200      	movs	r2, #0
 800759c:	e7ef      	b.n	800757e <_strtod_l+0xae>
 800759e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80075a0:	b13a      	cbz	r2, 80075b2 <_strtod_l+0xe2>
 80075a2:	2135      	movs	r1, #53	; 0x35
 80075a4:	a81c      	add	r0, sp, #112	; 0x70
 80075a6:	f002 fd19 	bl	8009fdc <__copybits>
 80075aa:	4650      	mov	r0, sl
 80075ac:	991a      	ldr	r1, [sp, #104]	; 0x68
 80075ae:	f002 f8e1 	bl	8009774 <_Bfree>
 80075b2:	3e01      	subs	r6, #1
 80075b4:	2e04      	cmp	r6, #4
 80075b6:	d806      	bhi.n	80075c6 <_strtod_l+0xf6>
 80075b8:	e8df f006 	tbb	[pc, r6]
 80075bc:	1714030a 	.word	0x1714030a
 80075c0:	0a          	.byte	0x0a
 80075c1:	00          	.byte	0x00
 80075c2:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 80075c6:	0721      	lsls	r1, r4, #28
 80075c8:	d5c3      	bpl.n	8007552 <_strtod_l+0x82>
 80075ca:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 80075ce:	e7c0      	b.n	8007552 <_strtod_l+0x82>
 80075d0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80075d2:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 80075d6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80075da:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80075de:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80075e2:	e7f0      	b.n	80075c6 <_strtod_l+0xf6>
 80075e4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8007760 <_strtod_l+0x290>
 80075e8:	e7ed      	b.n	80075c6 <_strtod_l+0xf6>
 80075ea:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80075ee:	f04f 38ff 	mov.w	r8, #4294967295
 80075f2:	e7e8      	b.n	80075c6 <_strtod_l+0xf6>
 80075f4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80075f6:	1c5a      	adds	r2, r3, #1
 80075f8:	9219      	str	r2, [sp, #100]	; 0x64
 80075fa:	785b      	ldrb	r3, [r3, #1]
 80075fc:	2b30      	cmp	r3, #48	; 0x30
 80075fe:	d0f9      	beq.n	80075f4 <_strtod_l+0x124>
 8007600:	2b00      	cmp	r3, #0
 8007602:	d0a6      	beq.n	8007552 <_strtod_l+0x82>
 8007604:	2301      	movs	r3, #1
 8007606:	9307      	str	r3, [sp, #28]
 8007608:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800760a:	220a      	movs	r2, #10
 800760c:	9308      	str	r3, [sp, #32]
 800760e:	2300      	movs	r3, #0
 8007610:	469b      	mov	fp, r3
 8007612:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8007616:	9819      	ldr	r0, [sp, #100]	; 0x64
 8007618:	7805      	ldrb	r5, [r0, #0]
 800761a:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800761e:	b2d9      	uxtb	r1, r3
 8007620:	2909      	cmp	r1, #9
 8007622:	d927      	bls.n	8007674 <_strtod_l+0x1a4>
 8007624:	4622      	mov	r2, r4
 8007626:	4639      	mov	r1, r7
 8007628:	f003 f8d6 	bl	800a7d8 <strncmp>
 800762c:	2800      	cmp	r0, #0
 800762e:	d033      	beq.n	8007698 <_strtod_l+0x1c8>
 8007630:	2000      	movs	r0, #0
 8007632:	462a      	mov	r2, r5
 8007634:	465c      	mov	r4, fp
 8007636:	4603      	mov	r3, r0
 8007638:	9004      	str	r0, [sp, #16]
 800763a:	2a65      	cmp	r2, #101	; 0x65
 800763c:	d001      	beq.n	8007642 <_strtod_l+0x172>
 800763e:	2a45      	cmp	r2, #69	; 0x45
 8007640:	d114      	bne.n	800766c <_strtod_l+0x19c>
 8007642:	b91c      	cbnz	r4, 800764c <_strtod_l+0x17c>
 8007644:	9a07      	ldr	r2, [sp, #28]
 8007646:	4302      	orrs	r2, r0
 8007648:	d09f      	beq.n	800758a <_strtod_l+0xba>
 800764a:	2400      	movs	r4, #0
 800764c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800764e:	1c72      	adds	r2, r6, #1
 8007650:	9219      	str	r2, [sp, #100]	; 0x64
 8007652:	7872      	ldrb	r2, [r6, #1]
 8007654:	2a2b      	cmp	r2, #43	; 0x2b
 8007656:	d079      	beq.n	800774c <_strtod_l+0x27c>
 8007658:	2a2d      	cmp	r2, #45	; 0x2d
 800765a:	f000 8083 	beq.w	8007764 <_strtod_l+0x294>
 800765e:	2700      	movs	r7, #0
 8007660:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007664:	2909      	cmp	r1, #9
 8007666:	f240 8083 	bls.w	8007770 <_strtod_l+0x2a0>
 800766a:	9619      	str	r6, [sp, #100]	; 0x64
 800766c:	2500      	movs	r5, #0
 800766e:	e09f      	b.n	80077b0 <_strtod_l+0x2e0>
 8007670:	2300      	movs	r3, #0
 8007672:	e7c8      	b.n	8007606 <_strtod_l+0x136>
 8007674:	f1bb 0f08 	cmp.w	fp, #8
 8007678:	bfd5      	itete	le
 800767a:	9906      	ldrle	r1, [sp, #24]
 800767c:	9905      	ldrgt	r1, [sp, #20]
 800767e:	fb02 3301 	mlale	r3, r2, r1, r3
 8007682:	fb02 3301 	mlagt	r3, r2, r1, r3
 8007686:	f100 0001 	add.w	r0, r0, #1
 800768a:	bfd4      	ite	le
 800768c:	9306      	strle	r3, [sp, #24]
 800768e:	9305      	strgt	r3, [sp, #20]
 8007690:	f10b 0b01 	add.w	fp, fp, #1
 8007694:	9019      	str	r0, [sp, #100]	; 0x64
 8007696:	e7be      	b.n	8007616 <_strtod_l+0x146>
 8007698:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800769a:	191a      	adds	r2, r3, r4
 800769c:	9219      	str	r2, [sp, #100]	; 0x64
 800769e:	5d1a      	ldrb	r2, [r3, r4]
 80076a0:	f1bb 0f00 	cmp.w	fp, #0
 80076a4:	d036      	beq.n	8007714 <_strtod_l+0x244>
 80076a6:	465c      	mov	r4, fp
 80076a8:	9004      	str	r0, [sp, #16]
 80076aa:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80076ae:	2b09      	cmp	r3, #9
 80076b0:	d912      	bls.n	80076d8 <_strtod_l+0x208>
 80076b2:	2301      	movs	r3, #1
 80076b4:	e7c1      	b.n	800763a <_strtod_l+0x16a>
 80076b6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80076b8:	3001      	adds	r0, #1
 80076ba:	1c5a      	adds	r2, r3, #1
 80076bc:	9219      	str	r2, [sp, #100]	; 0x64
 80076be:	785a      	ldrb	r2, [r3, #1]
 80076c0:	2a30      	cmp	r2, #48	; 0x30
 80076c2:	d0f8      	beq.n	80076b6 <_strtod_l+0x1e6>
 80076c4:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80076c8:	2b08      	cmp	r3, #8
 80076ca:	f200 84d5 	bhi.w	8008078 <_strtod_l+0xba8>
 80076ce:	9004      	str	r0, [sp, #16]
 80076d0:	2000      	movs	r0, #0
 80076d2:	4604      	mov	r4, r0
 80076d4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80076d6:	9308      	str	r3, [sp, #32]
 80076d8:	3a30      	subs	r2, #48	; 0x30
 80076da:	f100 0301 	add.w	r3, r0, #1
 80076de:	d013      	beq.n	8007708 <_strtod_l+0x238>
 80076e0:	9904      	ldr	r1, [sp, #16]
 80076e2:	1905      	adds	r5, r0, r4
 80076e4:	4419      	add	r1, r3
 80076e6:	9104      	str	r1, [sp, #16]
 80076e8:	4623      	mov	r3, r4
 80076ea:	210a      	movs	r1, #10
 80076ec:	42ab      	cmp	r3, r5
 80076ee:	d113      	bne.n	8007718 <_strtod_l+0x248>
 80076f0:	1823      	adds	r3, r4, r0
 80076f2:	2b08      	cmp	r3, #8
 80076f4:	f104 0401 	add.w	r4, r4, #1
 80076f8:	4404      	add	r4, r0
 80076fa:	dc1b      	bgt.n	8007734 <_strtod_l+0x264>
 80076fc:	230a      	movs	r3, #10
 80076fe:	9906      	ldr	r1, [sp, #24]
 8007700:	fb03 2301 	mla	r3, r3, r1, r2
 8007704:	9306      	str	r3, [sp, #24]
 8007706:	2300      	movs	r3, #0
 8007708:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800770a:	4618      	mov	r0, r3
 800770c:	1c51      	adds	r1, r2, #1
 800770e:	9119      	str	r1, [sp, #100]	; 0x64
 8007710:	7852      	ldrb	r2, [r2, #1]
 8007712:	e7ca      	b.n	80076aa <_strtod_l+0x1da>
 8007714:	4658      	mov	r0, fp
 8007716:	e7d3      	b.n	80076c0 <_strtod_l+0x1f0>
 8007718:	2b08      	cmp	r3, #8
 800771a:	dc04      	bgt.n	8007726 <_strtod_l+0x256>
 800771c:	9f06      	ldr	r7, [sp, #24]
 800771e:	434f      	muls	r7, r1
 8007720:	9706      	str	r7, [sp, #24]
 8007722:	3301      	adds	r3, #1
 8007724:	e7e2      	b.n	80076ec <_strtod_l+0x21c>
 8007726:	1c5f      	adds	r7, r3, #1
 8007728:	2f10      	cmp	r7, #16
 800772a:	bfde      	ittt	le
 800772c:	9f05      	ldrle	r7, [sp, #20]
 800772e:	434f      	mulle	r7, r1
 8007730:	9705      	strle	r7, [sp, #20]
 8007732:	e7f6      	b.n	8007722 <_strtod_l+0x252>
 8007734:	2c10      	cmp	r4, #16
 8007736:	bfdf      	itttt	le
 8007738:	230a      	movle	r3, #10
 800773a:	9905      	ldrle	r1, [sp, #20]
 800773c:	fb03 2301 	mlale	r3, r3, r1, r2
 8007740:	9305      	strle	r3, [sp, #20]
 8007742:	e7e0      	b.n	8007706 <_strtod_l+0x236>
 8007744:	2300      	movs	r3, #0
 8007746:	9304      	str	r3, [sp, #16]
 8007748:	2301      	movs	r3, #1
 800774a:	e77b      	b.n	8007644 <_strtod_l+0x174>
 800774c:	2700      	movs	r7, #0
 800774e:	1cb2      	adds	r2, r6, #2
 8007750:	9219      	str	r2, [sp, #100]	; 0x64
 8007752:	78b2      	ldrb	r2, [r6, #2]
 8007754:	e784      	b.n	8007660 <_strtod_l+0x190>
 8007756:	bf00      	nop
 8007758:	0800b6a8 	.word	0x0800b6a8
 800775c:	0800b3c4 	.word	0x0800b3c4
 8007760:	7ff00000 	.word	0x7ff00000
 8007764:	2701      	movs	r7, #1
 8007766:	e7f2      	b.n	800774e <_strtod_l+0x27e>
 8007768:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800776a:	1c51      	adds	r1, r2, #1
 800776c:	9119      	str	r1, [sp, #100]	; 0x64
 800776e:	7852      	ldrb	r2, [r2, #1]
 8007770:	2a30      	cmp	r2, #48	; 0x30
 8007772:	d0f9      	beq.n	8007768 <_strtod_l+0x298>
 8007774:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007778:	2908      	cmp	r1, #8
 800777a:	f63f af77 	bhi.w	800766c <_strtod_l+0x19c>
 800777e:	f04f 0e0a 	mov.w	lr, #10
 8007782:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8007786:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007788:	9209      	str	r2, [sp, #36]	; 0x24
 800778a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800778c:	1c51      	adds	r1, r2, #1
 800778e:	9119      	str	r1, [sp, #100]	; 0x64
 8007790:	7852      	ldrb	r2, [r2, #1]
 8007792:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8007796:	2d09      	cmp	r5, #9
 8007798:	d935      	bls.n	8007806 <_strtod_l+0x336>
 800779a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800779c:	1b49      	subs	r1, r1, r5
 800779e:	2908      	cmp	r1, #8
 80077a0:	f644 651f 	movw	r5, #19999	; 0x4e1f
 80077a4:	dc02      	bgt.n	80077ac <_strtod_l+0x2dc>
 80077a6:	4565      	cmp	r5, ip
 80077a8:	bfa8      	it	ge
 80077aa:	4665      	movge	r5, ip
 80077ac:	b107      	cbz	r7, 80077b0 <_strtod_l+0x2e0>
 80077ae:	426d      	negs	r5, r5
 80077b0:	2c00      	cmp	r4, #0
 80077b2:	d14c      	bne.n	800784e <_strtod_l+0x37e>
 80077b4:	9907      	ldr	r1, [sp, #28]
 80077b6:	4301      	orrs	r1, r0
 80077b8:	f47f aecb 	bne.w	8007552 <_strtod_l+0x82>
 80077bc:	2b00      	cmp	r3, #0
 80077be:	f47f aee4 	bne.w	800758a <_strtod_l+0xba>
 80077c2:	2a69      	cmp	r2, #105	; 0x69
 80077c4:	d026      	beq.n	8007814 <_strtod_l+0x344>
 80077c6:	dc23      	bgt.n	8007810 <_strtod_l+0x340>
 80077c8:	2a49      	cmp	r2, #73	; 0x49
 80077ca:	d023      	beq.n	8007814 <_strtod_l+0x344>
 80077cc:	2a4e      	cmp	r2, #78	; 0x4e
 80077ce:	f47f aedc 	bne.w	800758a <_strtod_l+0xba>
 80077d2:	499d      	ldr	r1, [pc, #628]	; (8007a48 <_strtod_l+0x578>)
 80077d4:	a819      	add	r0, sp, #100	; 0x64
 80077d6:	f001 feb1 	bl	800953c <__match>
 80077da:	2800      	cmp	r0, #0
 80077dc:	f43f aed5 	beq.w	800758a <_strtod_l+0xba>
 80077e0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80077e2:	781b      	ldrb	r3, [r3, #0]
 80077e4:	2b28      	cmp	r3, #40	; 0x28
 80077e6:	d12c      	bne.n	8007842 <_strtod_l+0x372>
 80077e8:	4998      	ldr	r1, [pc, #608]	; (8007a4c <_strtod_l+0x57c>)
 80077ea:	aa1c      	add	r2, sp, #112	; 0x70
 80077ec:	a819      	add	r0, sp, #100	; 0x64
 80077ee:	f001 feb9 	bl	8009564 <__hexnan>
 80077f2:	2805      	cmp	r0, #5
 80077f4:	d125      	bne.n	8007842 <_strtod_l+0x372>
 80077f6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80077f8:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 80077fc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007800:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8007804:	e6a5      	b.n	8007552 <_strtod_l+0x82>
 8007806:	fb0e 2c0c 	mla	ip, lr, ip, r2
 800780a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800780e:	e7bc      	b.n	800778a <_strtod_l+0x2ba>
 8007810:	2a6e      	cmp	r2, #110	; 0x6e
 8007812:	e7dc      	b.n	80077ce <_strtod_l+0x2fe>
 8007814:	498e      	ldr	r1, [pc, #568]	; (8007a50 <_strtod_l+0x580>)
 8007816:	a819      	add	r0, sp, #100	; 0x64
 8007818:	f001 fe90 	bl	800953c <__match>
 800781c:	2800      	cmp	r0, #0
 800781e:	f43f aeb4 	beq.w	800758a <_strtod_l+0xba>
 8007822:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007824:	498b      	ldr	r1, [pc, #556]	; (8007a54 <_strtod_l+0x584>)
 8007826:	3b01      	subs	r3, #1
 8007828:	a819      	add	r0, sp, #100	; 0x64
 800782a:	9319      	str	r3, [sp, #100]	; 0x64
 800782c:	f001 fe86 	bl	800953c <__match>
 8007830:	b910      	cbnz	r0, 8007838 <_strtod_l+0x368>
 8007832:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007834:	3301      	adds	r3, #1
 8007836:	9319      	str	r3, [sp, #100]	; 0x64
 8007838:	f04f 0800 	mov.w	r8, #0
 800783c:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8007a58 <_strtod_l+0x588>
 8007840:	e687      	b.n	8007552 <_strtod_l+0x82>
 8007842:	4886      	ldr	r0, [pc, #536]	; (8007a5c <_strtod_l+0x58c>)
 8007844:	f002 ffb2 	bl	800a7ac <nan>
 8007848:	4680      	mov	r8, r0
 800784a:	4689      	mov	r9, r1
 800784c:	e681      	b.n	8007552 <_strtod_l+0x82>
 800784e:	9b04      	ldr	r3, [sp, #16]
 8007850:	f1bb 0f00 	cmp.w	fp, #0
 8007854:	bf08      	it	eq
 8007856:	46a3      	moveq	fp, r4
 8007858:	1aeb      	subs	r3, r5, r3
 800785a:	2c10      	cmp	r4, #16
 800785c:	9806      	ldr	r0, [sp, #24]
 800785e:	4626      	mov	r6, r4
 8007860:	9307      	str	r3, [sp, #28]
 8007862:	bfa8      	it	ge
 8007864:	2610      	movge	r6, #16
 8007866:	f7f8 fdc7 	bl	80003f8 <__aeabi_ui2d>
 800786a:	2c09      	cmp	r4, #9
 800786c:	4680      	mov	r8, r0
 800786e:	4689      	mov	r9, r1
 8007870:	dd13      	ble.n	800789a <_strtod_l+0x3ca>
 8007872:	4b7b      	ldr	r3, [pc, #492]	; (8007a60 <_strtod_l+0x590>)
 8007874:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007878:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800787c:	f7f8 fe36 	bl	80004ec <__aeabi_dmul>
 8007880:	4680      	mov	r8, r0
 8007882:	9805      	ldr	r0, [sp, #20]
 8007884:	4689      	mov	r9, r1
 8007886:	f7f8 fdb7 	bl	80003f8 <__aeabi_ui2d>
 800788a:	4602      	mov	r2, r0
 800788c:	460b      	mov	r3, r1
 800788e:	4640      	mov	r0, r8
 8007890:	4649      	mov	r1, r9
 8007892:	f7f8 fc75 	bl	8000180 <__adddf3>
 8007896:	4680      	mov	r8, r0
 8007898:	4689      	mov	r9, r1
 800789a:	2c0f      	cmp	r4, #15
 800789c:	dc36      	bgt.n	800790c <_strtod_l+0x43c>
 800789e:	9b07      	ldr	r3, [sp, #28]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	f43f ae56 	beq.w	8007552 <_strtod_l+0x82>
 80078a6:	dd22      	ble.n	80078ee <_strtod_l+0x41e>
 80078a8:	2b16      	cmp	r3, #22
 80078aa:	dc09      	bgt.n	80078c0 <_strtod_l+0x3f0>
 80078ac:	496c      	ldr	r1, [pc, #432]	; (8007a60 <_strtod_l+0x590>)
 80078ae:	4642      	mov	r2, r8
 80078b0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80078b4:	464b      	mov	r3, r9
 80078b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80078ba:	f7f8 fe17 	bl	80004ec <__aeabi_dmul>
 80078be:	e7c3      	b.n	8007848 <_strtod_l+0x378>
 80078c0:	9a07      	ldr	r2, [sp, #28]
 80078c2:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80078c6:	4293      	cmp	r3, r2
 80078c8:	db20      	blt.n	800790c <_strtod_l+0x43c>
 80078ca:	4d65      	ldr	r5, [pc, #404]	; (8007a60 <_strtod_l+0x590>)
 80078cc:	f1c4 040f 	rsb	r4, r4, #15
 80078d0:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80078d4:	4642      	mov	r2, r8
 80078d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80078da:	464b      	mov	r3, r9
 80078dc:	f7f8 fe06 	bl	80004ec <__aeabi_dmul>
 80078e0:	9b07      	ldr	r3, [sp, #28]
 80078e2:	1b1c      	subs	r4, r3, r4
 80078e4:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80078e8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80078ec:	e7e5      	b.n	80078ba <_strtod_l+0x3ea>
 80078ee:	9b07      	ldr	r3, [sp, #28]
 80078f0:	3316      	adds	r3, #22
 80078f2:	db0b      	blt.n	800790c <_strtod_l+0x43c>
 80078f4:	9b04      	ldr	r3, [sp, #16]
 80078f6:	4640      	mov	r0, r8
 80078f8:	1b5d      	subs	r5, r3, r5
 80078fa:	4b59      	ldr	r3, [pc, #356]	; (8007a60 <_strtod_l+0x590>)
 80078fc:	4649      	mov	r1, r9
 80078fe:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8007902:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007906:	f7f8 ff1b 	bl	8000740 <__aeabi_ddiv>
 800790a:	e79d      	b.n	8007848 <_strtod_l+0x378>
 800790c:	9b07      	ldr	r3, [sp, #28]
 800790e:	1ba6      	subs	r6, r4, r6
 8007910:	441e      	add	r6, r3
 8007912:	2e00      	cmp	r6, #0
 8007914:	dd74      	ble.n	8007a00 <_strtod_l+0x530>
 8007916:	f016 030f 	ands.w	r3, r6, #15
 800791a:	d00a      	beq.n	8007932 <_strtod_l+0x462>
 800791c:	4950      	ldr	r1, [pc, #320]	; (8007a60 <_strtod_l+0x590>)
 800791e:	4642      	mov	r2, r8
 8007920:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007924:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007928:	464b      	mov	r3, r9
 800792a:	f7f8 fddf 	bl	80004ec <__aeabi_dmul>
 800792e:	4680      	mov	r8, r0
 8007930:	4689      	mov	r9, r1
 8007932:	f036 060f 	bics.w	r6, r6, #15
 8007936:	d052      	beq.n	80079de <_strtod_l+0x50e>
 8007938:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800793c:	dd27      	ble.n	800798e <_strtod_l+0x4be>
 800793e:	f04f 0b00 	mov.w	fp, #0
 8007942:	f8cd b010 	str.w	fp, [sp, #16]
 8007946:	f8cd b020 	str.w	fp, [sp, #32]
 800794a:	f8cd b018 	str.w	fp, [sp, #24]
 800794e:	2322      	movs	r3, #34	; 0x22
 8007950:	f04f 0800 	mov.w	r8, #0
 8007954:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8007a58 <_strtod_l+0x588>
 8007958:	f8ca 3000 	str.w	r3, [sl]
 800795c:	9b08      	ldr	r3, [sp, #32]
 800795e:	2b00      	cmp	r3, #0
 8007960:	f43f adf7 	beq.w	8007552 <_strtod_l+0x82>
 8007964:	4650      	mov	r0, sl
 8007966:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007968:	f001 ff04 	bl	8009774 <_Bfree>
 800796c:	4650      	mov	r0, sl
 800796e:	9906      	ldr	r1, [sp, #24]
 8007970:	f001 ff00 	bl	8009774 <_Bfree>
 8007974:	4650      	mov	r0, sl
 8007976:	9904      	ldr	r1, [sp, #16]
 8007978:	f001 fefc 	bl	8009774 <_Bfree>
 800797c:	4650      	mov	r0, sl
 800797e:	9908      	ldr	r1, [sp, #32]
 8007980:	f001 fef8 	bl	8009774 <_Bfree>
 8007984:	4659      	mov	r1, fp
 8007986:	4650      	mov	r0, sl
 8007988:	f001 fef4 	bl	8009774 <_Bfree>
 800798c:	e5e1      	b.n	8007552 <_strtod_l+0x82>
 800798e:	4b35      	ldr	r3, [pc, #212]	; (8007a64 <_strtod_l+0x594>)
 8007990:	4640      	mov	r0, r8
 8007992:	9305      	str	r3, [sp, #20]
 8007994:	2300      	movs	r3, #0
 8007996:	4649      	mov	r1, r9
 8007998:	461f      	mov	r7, r3
 800799a:	1136      	asrs	r6, r6, #4
 800799c:	2e01      	cmp	r6, #1
 800799e:	dc21      	bgt.n	80079e4 <_strtod_l+0x514>
 80079a0:	b10b      	cbz	r3, 80079a6 <_strtod_l+0x4d6>
 80079a2:	4680      	mov	r8, r0
 80079a4:	4689      	mov	r9, r1
 80079a6:	4b2f      	ldr	r3, [pc, #188]	; (8007a64 <_strtod_l+0x594>)
 80079a8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80079ac:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80079b0:	4642      	mov	r2, r8
 80079b2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80079b6:	464b      	mov	r3, r9
 80079b8:	f7f8 fd98 	bl	80004ec <__aeabi_dmul>
 80079bc:	4b26      	ldr	r3, [pc, #152]	; (8007a58 <_strtod_l+0x588>)
 80079be:	460a      	mov	r2, r1
 80079c0:	400b      	ands	r3, r1
 80079c2:	4929      	ldr	r1, [pc, #164]	; (8007a68 <_strtod_l+0x598>)
 80079c4:	4680      	mov	r8, r0
 80079c6:	428b      	cmp	r3, r1
 80079c8:	d8b9      	bhi.n	800793e <_strtod_l+0x46e>
 80079ca:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80079ce:	428b      	cmp	r3, r1
 80079d0:	bf86      	itte	hi
 80079d2:	f04f 38ff 	movhi.w	r8, #4294967295
 80079d6:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8007a6c <_strtod_l+0x59c>
 80079da:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80079de:	2300      	movs	r3, #0
 80079e0:	9305      	str	r3, [sp, #20]
 80079e2:	e07f      	b.n	8007ae4 <_strtod_l+0x614>
 80079e4:	07f2      	lsls	r2, r6, #31
 80079e6:	d505      	bpl.n	80079f4 <_strtod_l+0x524>
 80079e8:	9b05      	ldr	r3, [sp, #20]
 80079ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ee:	f7f8 fd7d 	bl	80004ec <__aeabi_dmul>
 80079f2:	2301      	movs	r3, #1
 80079f4:	9a05      	ldr	r2, [sp, #20]
 80079f6:	3701      	adds	r7, #1
 80079f8:	3208      	adds	r2, #8
 80079fa:	1076      	asrs	r6, r6, #1
 80079fc:	9205      	str	r2, [sp, #20]
 80079fe:	e7cd      	b.n	800799c <_strtod_l+0x4cc>
 8007a00:	d0ed      	beq.n	80079de <_strtod_l+0x50e>
 8007a02:	4276      	negs	r6, r6
 8007a04:	f016 020f 	ands.w	r2, r6, #15
 8007a08:	d00a      	beq.n	8007a20 <_strtod_l+0x550>
 8007a0a:	4b15      	ldr	r3, [pc, #84]	; (8007a60 <_strtod_l+0x590>)
 8007a0c:	4640      	mov	r0, r8
 8007a0e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a12:	4649      	mov	r1, r9
 8007a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a18:	f7f8 fe92 	bl	8000740 <__aeabi_ddiv>
 8007a1c:	4680      	mov	r8, r0
 8007a1e:	4689      	mov	r9, r1
 8007a20:	1136      	asrs	r6, r6, #4
 8007a22:	d0dc      	beq.n	80079de <_strtod_l+0x50e>
 8007a24:	2e1f      	cmp	r6, #31
 8007a26:	dd23      	ble.n	8007a70 <_strtod_l+0x5a0>
 8007a28:	f04f 0b00 	mov.w	fp, #0
 8007a2c:	f8cd b010 	str.w	fp, [sp, #16]
 8007a30:	f8cd b020 	str.w	fp, [sp, #32]
 8007a34:	f8cd b018 	str.w	fp, [sp, #24]
 8007a38:	2322      	movs	r3, #34	; 0x22
 8007a3a:	f04f 0800 	mov.w	r8, #0
 8007a3e:	f04f 0900 	mov.w	r9, #0
 8007a42:	f8ca 3000 	str.w	r3, [sl]
 8007a46:	e789      	b.n	800795c <_strtod_l+0x48c>
 8007a48:	0800b39d 	.word	0x0800b39d
 8007a4c:	0800b3d8 	.word	0x0800b3d8
 8007a50:	0800b395 	.word	0x0800b395
 8007a54:	0800b5cc 	.word	0x0800b5cc
 8007a58:	7ff00000 	.word	0x7ff00000
 8007a5c:	0800b4c7 	.word	0x0800b4c7
 8007a60:	0800b740 	.word	0x0800b740
 8007a64:	0800b718 	.word	0x0800b718
 8007a68:	7ca00000 	.word	0x7ca00000
 8007a6c:	7fefffff 	.word	0x7fefffff
 8007a70:	f016 0310 	ands.w	r3, r6, #16
 8007a74:	bf18      	it	ne
 8007a76:	236a      	movne	r3, #106	; 0x6a
 8007a78:	4640      	mov	r0, r8
 8007a7a:	9305      	str	r3, [sp, #20]
 8007a7c:	4649      	mov	r1, r9
 8007a7e:	2300      	movs	r3, #0
 8007a80:	4fb0      	ldr	r7, [pc, #704]	; (8007d44 <_strtod_l+0x874>)
 8007a82:	07f2      	lsls	r2, r6, #31
 8007a84:	d504      	bpl.n	8007a90 <_strtod_l+0x5c0>
 8007a86:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a8a:	f7f8 fd2f 	bl	80004ec <__aeabi_dmul>
 8007a8e:	2301      	movs	r3, #1
 8007a90:	1076      	asrs	r6, r6, #1
 8007a92:	f107 0708 	add.w	r7, r7, #8
 8007a96:	d1f4      	bne.n	8007a82 <_strtod_l+0x5b2>
 8007a98:	b10b      	cbz	r3, 8007a9e <_strtod_l+0x5ce>
 8007a9a:	4680      	mov	r8, r0
 8007a9c:	4689      	mov	r9, r1
 8007a9e:	9b05      	ldr	r3, [sp, #20]
 8007aa0:	b1c3      	cbz	r3, 8007ad4 <_strtod_l+0x604>
 8007aa2:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8007aa6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	4649      	mov	r1, r9
 8007aae:	dd11      	ble.n	8007ad4 <_strtod_l+0x604>
 8007ab0:	2b1f      	cmp	r3, #31
 8007ab2:	f340 8127 	ble.w	8007d04 <_strtod_l+0x834>
 8007ab6:	2b34      	cmp	r3, #52	; 0x34
 8007ab8:	bfd8      	it	le
 8007aba:	f04f 33ff 	movle.w	r3, #4294967295
 8007abe:	f04f 0800 	mov.w	r8, #0
 8007ac2:	bfcf      	iteee	gt
 8007ac4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8007ac8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007acc:	fa03 f202 	lslle.w	r2, r3, r2
 8007ad0:	ea02 0901 	andle.w	r9, r2, r1
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	4640      	mov	r0, r8
 8007ada:	4649      	mov	r1, r9
 8007adc:	f7f8 ff6e 	bl	80009bc <__aeabi_dcmpeq>
 8007ae0:	2800      	cmp	r0, #0
 8007ae2:	d1a1      	bne.n	8007a28 <_strtod_l+0x558>
 8007ae4:	9b06      	ldr	r3, [sp, #24]
 8007ae6:	465a      	mov	r2, fp
 8007ae8:	9300      	str	r3, [sp, #0]
 8007aea:	4650      	mov	r0, sl
 8007aec:	4623      	mov	r3, r4
 8007aee:	9908      	ldr	r1, [sp, #32]
 8007af0:	f001 fea8 	bl	8009844 <__s2b>
 8007af4:	9008      	str	r0, [sp, #32]
 8007af6:	2800      	cmp	r0, #0
 8007af8:	f43f af21 	beq.w	800793e <_strtod_l+0x46e>
 8007afc:	9b04      	ldr	r3, [sp, #16]
 8007afe:	f04f 0b00 	mov.w	fp, #0
 8007b02:	1b5d      	subs	r5, r3, r5
 8007b04:	9b07      	ldr	r3, [sp, #28]
 8007b06:	f8cd b010 	str.w	fp, [sp, #16]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	bfb4      	ite	lt
 8007b0e:	462b      	movlt	r3, r5
 8007b10:	2300      	movge	r3, #0
 8007b12:	930e      	str	r3, [sp, #56]	; 0x38
 8007b14:	9b07      	ldr	r3, [sp, #28]
 8007b16:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007b1a:	9314      	str	r3, [sp, #80]	; 0x50
 8007b1c:	9b08      	ldr	r3, [sp, #32]
 8007b1e:	4650      	mov	r0, sl
 8007b20:	6859      	ldr	r1, [r3, #4]
 8007b22:	f001 fde7 	bl	80096f4 <_Balloc>
 8007b26:	9006      	str	r0, [sp, #24]
 8007b28:	2800      	cmp	r0, #0
 8007b2a:	f43f af10 	beq.w	800794e <_strtod_l+0x47e>
 8007b2e:	9b08      	ldr	r3, [sp, #32]
 8007b30:	300c      	adds	r0, #12
 8007b32:	691a      	ldr	r2, [r3, #16]
 8007b34:	f103 010c 	add.w	r1, r3, #12
 8007b38:	3202      	adds	r2, #2
 8007b3a:	0092      	lsls	r2, r2, #2
 8007b3c:	f7fe fff8 	bl	8006b30 <memcpy>
 8007b40:	ab1c      	add	r3, sp, #112	; 0x70
 8007b42:	9301      	str	r3, [sp, #4]
 8007b44:	ab1b      	add	r3, sp, #108	; 0x6c
 8007b46:	9300      	str	r3, [sp, #0]
 8007b48:	4642      	mov	r2, r8
 8007b4a:	464b      	mov	r3, r9
 8007b4c:	4650      	mov	r0, sl
 8007b4e:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8007b52:	f002 f9b9 	bl	8009ec8 <__d2b>
 8007b56:	901a      	str	r0, [sp, #104]	; 0x68
 8007b58:	2800      	cmp	r0, #0
 8007b5a:	f43f aef8 	beq.w	800794e <_strtod_l+0x47e>
 8007b5e:	2101      	movs	r1, #1
 8007b60:	4650      	mov	r0, sl
 8007b62:	f001 ff07 	bl	8009974 <__i2b>
 8007b66:	4603      	mov	r3, r0
 8007b68:	9004      	str	r0, [sp, #16]
 8007b6a:	2800      	cmp	r0, #0
 8007b6c:	f43f aeef 	beq.w	800794e <_strtod_l+0x47e>
 8007b70:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8007b72:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007b74:	2d00      	cmp	r5, #0
 8007b76:	bfab      	itete	ge
 8007b78:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8007b7a:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 8007b7c:	18ee      	addge	r6, r5, r3
 8007b7e:	1b5c      	sublt	r4, r3, r5
 8007b80:	9b05      	ldr	r3, [sp, #20]
 8007b82:	bfa8      	it	ge
 8007b84:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 8007b86:	eba5 0503 	sub.w	r5, r5, r3
 8007b8a:	4415      	add	r5, r2
 8007b8c:	4b6e      	ldr	r3, [pc, #440]	; (8007d48 <_strtod_l+0x878>)
 8007b8e:	f105 35ff 	add.w	r5, r5, #4294967295
 8007b92:	bfb8      	it	lt
 8007b94:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8007b96:	429d      	cmp	r5, r3
 8007b98:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007b9c:	f280 80c4 	bge.w	8007d28 <_strtod_l+0x858>
 8007ba0:	1b5b      	subs	r3, r3, r5
 8007ba2:	2b1f      	cmp	r3, #31
 8007ba4:	f04f 0701 	mov.w	r7, #1
 8007ba8:	eba2 0203 	sub.w	r2, r2, r3
 8007bac:	f300 80b1 	bgt.w	8007d12 <_strtod_l+0x842>
 8007bb0:	2500      	movs	r5, #0
 8007bb2:	fa07 f303 	lsl.w	r3, r7, r3
 8007bb6:	930f      	str	r3, [sp, #60]	; 0x3c
 8007bb8:	18b7      	adds	r7, r6, r2
 8007bba:	9b05      	ldr	r3, [sp, #20]
 8007bbc:	42be      	cmp	r6, r7
 8007bbe:	4414      	add	r4, r2
 8007bc0:	441c      	add	r4, r3
 8007bc2:	4633      	mov	r3, r6
 8007bc4:	bfa8      	it	ge
 8007bc6:	463b      	movge	r3, r7
 8007bc8:	42a3      	cmp	r3, r4
 8007bca:	bfa8      	it	ge
 8007bcc:	4623      	movge	r3, r4
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	bfc2      	ittt	gt
 8007bd2:	1aff      	subgt	r7, r7, r3
 8007bd4:	1ae4      	subgt	r4, r4, r3
 8007bd6:	1af6      	subgt	r6, r6, r3
 8007bd8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	dd17      	ble.n	8007c0e <_strtod_l+0x73e>
 8007bde:	461a      	mov	r2, r3
 8007be0:	4650      	mov	r0, sl
 8007be2:	9904      	ldr	r1, [sp, #16]
 8007be4:	f001 ff84 	bl	8009af0 <__pow5mult>
 8007be8:	9004      	str	r0, [sp, #16]
 8007bea:	2800      	cmp	r0, #0
 8007bec:	f43f aeaf 	beq.w	800794e <_strtod_l+0x47e>
 8007bf0:	4601      	mov	r1, r0
 8007bf2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007bf4:	4650      	mov	r0, sl
 8007bf6:	f001 fed3 	bl	80099a0 <__multiply>
 8007bfa:	9009      	str	r0, [sp, #36]	; 0x24
 8007bfc:	2800      	cmp	r0, #0
 8007bfe:	f43f aea6 	beq.w	800794e <_strtod_l+0x47e>
 8007c02:	4650      	mov	r0, sl
 8007c04:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007c06:	f001 fdb5 	bl	8009774 <_Bfree>
 8007c0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c0c:	931a      	str	r3, [sp, #104]	; 0x68
 8007c0e:	2f00      	cmp	r7, #0
 8007c10:	f300 808e 	bgt.w	8007d30 <_strtod_l+0x860>
 8007c14:	9b07      	ldr	r3, [sp, #28]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	dd08      	ble.n	8007c2c <_strtod_l+0x75c>
 8007c1a:	4650      	mov	r0, sl
 8007c1c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007c1e:	9906      	ldr	r1, [sp, #24]
 8007c20:	f001 ff66 	bl	8009af0 <__pow5mult>
 8007c24:	9006      	str	r0, [sp, #24]
 8007c26:	2800      	cmp	r0, #0
 8007c28:	f43f ae91 	beq.w	800794e <_strtod_l+0x47e>
 8007c2c:	2c00      	cmp	r4, #0
 8007c2e:	dd08      	ble.n	8007c42 <_strtod_l+0x772>
 8007c30:	4622      	mov	r2, r4
 8007c32:	4650      	mov	r0, sl
 8007c34:	9906      	ldr	r1, [sp, #24]
 8007c36:	f001 ffb5 	bl	8009ba4 <__lshift>
 8007c3a:	9006      	str	r0, [sp, #24]
 8007c3c:	2800      	cmp	r0, #0
 8007c3e:	f43f ae86 	beq.w	800794e <_strtod_l+0x47e>
 8007c42:	2e00      	cmp	r6, #0
 8007c44:	dd08      	ble.n	8007c58 <_strtod_l+0x788>
 8007c46:	4632      	mov	r2, r6
 8007c48:	4650      	mov	r0, sl
 8007c4a:	9904      	ldr	r1, [sp, #16]
 8007c4c:	f001 ffaa 	bl	8009ba4 <__lshift>
 8007c50:	9004      	str	r0, [sp, #16]
 8007c52:	2800      	cmp	r0, #0
 8007c54:	f43f ae7b 	beq.w	800794e <_strtod_l+0x47e>
 8007c58:	4650      	mov	r0, sl
 8007c5a:	9a06      	ldr	r2, [sp, #24]
 8007c5c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007c5e:	f002 f82d 	bl	8009cbc <__mdiff>
 8007c62:	4683      	mov	fp, r0
 8007c64:	2800      	cmp	r0, #0
 8007c66:	f43f ae72 	beq.w	800794e <_strtod_l+0x47e>
 8007c6a:	2400      	movs	r4, #0
 8007c6c:	68c3      	ldr	r3, [r0, #12]
 8007c6e:	9904      	ldr	r1, [sp, #16]
 8007c70:	60c4      	str	r4, [r0, #12]
 8007c72:	930b      	str	r3, [sp, #44]	; 0x2c
 8007c74:	f002 f806 	bl	8009c84 <__mcmp>
 8007c78:	42a0      	cmp	r0, r4
 8007c7a:	da6b      	bge.n	8007d54 <_strtod_l+0x884>
 8007c7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c7e:	ea53 0308 	orrs.w	r3, r3, r8
 8007c82:	f040 8091 	bne.w	8007da8 <_strtod_l+0x8d8>
 8007c86:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	f040 808c 	bne.w	8007da8 <_strtod_l+0x8d8>
 8007c90:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007c94:	0d1b      	lsrs	r3, r3, #20
 8007c96:	051b      	lsls	r3, r3, #20
 8007c98:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007c9c:	f240 8084 	bls.w	8007da8 <_strtod_l+0x8d8>
 8007ca0:	f8db 3014 	ldr.w	r3, [fp, #20]
 8007ca4:	b91b      	cbnz	r3, 8007cae <_strtod_l+0x7de>
 8007ca6:	f8db 3010 	ldr.w	r3, [fp, #16]
 8007caa:	2b01      	cmp	r3, #1
 8007cac:	dd7c      	ble.n	8007da8 <_strtod_l+0x8d8>
 8007cae:	4659      	mov	r1, fp
 8007cb0:	2201      	movs	r2, #1
 8007cb2:	4650      	mov	r0, sl
 8007cb4:	f001 ff76 	bl	8009ba4 <__lshift>
 8007cb8:	9904      	ldr	r1, [sp, #16]
 8007cba:	4683      	mov	fp, r0
 8007cbc:	f001 ffe2 	bl	8009c84 <__mcmp>
 8007cc0:	2800      	cmp	r0, #0
 8007cc2:	dd71      	ble.n	8007da8 <_strtod_l+0x8d8>
 8007cc4:	9905      	ldr	r1, [sp, #20]
 8007cc6:	464b      	mov	r3, r9
 8007cc8:	4a20      	ldr	r2, [pc, #128]	; (8007d4c <_strtod_l+0x87c>)
 8007cca:	2900      	cmp	r1, #0
 8007ccc:	f000 808c 	beq.w	8007de8 <_strtod_l+0x918>
 8007cd0:	ea02 0109 	and.w	r1, r2, r9
 8007cd4:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007cd8:	f300 8086 	bgt.w	8007de8 <_strtod_l+0x918>
 8007cdc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007ce0:	f77f aeaa 	ble.w	8007a38 <_strtod_l+0x568>
 8007ce4:	4640      	mov	r0, r8
 8007ce6:	4649      	mov	r1, r9
 8007ce8:	4b19      	ldr	r3, [pc, #100]	; (8007d50 <_strtod_l+0x880>)
 8007cea:	2200      	movs	r2, #0
 8007cec:	f7f8 fbfe 	bl	80004ec <__aeabi_dmul>
 8007cf0:	460b      	mov	r3, r1
 8007cf2:	4303      	orrs	r3, r0
 8007cf4:	bf08      	it	eq
 8007cf6:	2322      	moveq	r3, #34	; 0x22
 8007cf8:	4680      	mov	r8, r0
 8007cfa:	4689      	mov	r9, r1
 8007cfc:	bf08      	it	eq
 8007cfe:	f8ca 3000 	streq.w	r3, [sl]
 8007d02:	e62f      	b.n	8007964 <_strtod_l+0x494>
 8007d04:	f04f 32ff 	mov.w	r2, #4294967295
 8007d08:	fa02 f303 	lsl.w	r3, r2, r3
 8007d0c:	ea03 0808 	and.w	r8, r3, r8
 8007d10:	e6e0      	b.n	8007ad4 <_strtod_l+0x604>
 8007d12:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8007d16:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8007d1a:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8007d1e:	35e2      	adds	r5, #226	; 0xe2
 8007d20:	fa07 f505 	lsl.w	r5, r7, r5
 8007d24:	970f      	str	r7, [sp, #60]	; 0x3c
 8007d26:	e747      	b.n	8007bb8 <_strtod_l+0x6e8>
 8007d28:	2301      	movs	r3, #1
 8007d2a:	2500      	movs	r5, #0
 8007d2c:	930f      	str	r3, [sp, #60]	; 0x3c
 8007d2e:	e743      	b.n	8007bb8 <_strtod_l+0x6e8>
 8007d30:	463a      	mov	r2, r7
 8007d32:	4650      	mov	r0, sl
 8007d34:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007d36:	f001 ff35 	bl	8009ba4 <__lshift>
 8007d3a:	901a      	str	r0, [sp, #104]	; 0x68
 8007d3c:	2800      	cmp	r0, #0
 8007d3e:	f47f af69 	bne.w	8007c14 <_strtod_l+0x744>
 8007d42:	e604      	b.n	800794e <_strtod_l+0x47e>
 8007d44:	0800b3f0 	.word	0x0800b3f0
 8007d48:	fffffc02 	.word	0xfffffc02
 8007d4c:	7ff00000 	.word	0x7ff00000
 8007d50:	39500000 	.word	0x39500000
 8007d54:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007d58:	d165      	bne.n	8007e26 <_strtod_l+0x956>
 8007d5a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007d5c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007d60:	b35a      	cbz	r2, 8007dba <_strtod_l+0x8ea>
 8007d62:	4a99      	ldr	r2, [pc, #612]	; (8007fc8 <_strtod_l+0xaf8>)
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d12b      	bne.n	8007dc0 <_strtod_l+0x8f0>
 8007d68:	9b05      	ldr	r3, [sp, #20]
 8007d6a:	4641      	mov	r1, r8
 8007d6c:	b303      	cbz	r3, 8007db0 <_strtod_l+0x8e0>
 8007d6e:	464a      	mov	r2, r9
 8007d70:	4b96      	ldr	r3, [pc, #600]	; (8007fcc <_strtod_l+0xafc>)
 8007d72:	4013      	ands	r3, r2
 8007d74:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007d78:	f04f 32ff 	mov.w	r2, #4294967295
 8007d7c:	d81b      	bhi.n	8007db6 <_strtod_l+0x8e6>
 8007d7e:	0d1b      	lsrs	r3, r3, #20
 8007d80:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007d84:	fa02 f303 	lsl.w	r3, r2, r3
 8007d88:	4299      	cmp	r1, r3
 8007d8a:	d119      	bne.n	8007dc0 <_strtod_l+0x8f0>
 8007d8c:	4b90      	ldr	r3, [pc, #576]	; (8007fd0 <_strtod_l+0xb00>)
 8007d8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d90:	429a      	cmp	r2, r3
 8007d92:	d102      	bne.n	8007d9a <_strtod_l+0x8ca>
 8007d94:	3101      	adds	r1, #1
 8007d96:	f43f adda 	beq.w	800794e <_strtod_l+0x47e>
 8007d9a:	f04f 0800 	mov.w	r8, #0
 8007d9e:	4b8b      	ldr	r3, [pc, #556]	; (8007fcc <_strtod_l+0xafc>)
 8007da0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007da2:	401a      	ands	r2, r3
 8007da4:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8007da8:	9b05      	ldr	r3, [sp, #20]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d19a      	bne.n	8007ce4 <_strtod_l+0x814>
 8007dae:	e5d9      	b.n	8007964 <_strtod_l+0x494>
 8007db0:	f04f 33ff 	mov.w	r3, #4294967295
 8007db4:	e7e8      	b.n	8007d88 <_strtod_l+0x8b8>
 8007db6:	4613      	mov	r3, r2
 8007db8:	e7e6      	b.n	8007d88 <_strtod_l+0x8b8>
 8007dba:	ea53 0308 	orrs.w	r3, r3, r8
 8007dbe:	d081      	beq.n	8007cc4 <_strtod_l+0x7f4>
 8007dc0:	b1e5      	cbz	r5, 8007dfc <_strtod_l+0x92c>
 8007dc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007dc4:	421d      	tst	r5, r3
 8007dc6:	d0ef      	beq.n	8007da8 <_strtod_l+0x8d8>
 8007dc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007dca:	4640      	mov	r0, r8
 8007dcc:	4649      	mov	r1, r9
 8007dce:	9a05      	ldr	r2, [sp, #20]
 8007dd0:	b1c3      	cbz	r3, 8007e04 <_strtod_l+0x934>
 8007dd2:	f7ff fb5a 	bl	800748a <sulp>
 8007dd6:	4602      	mov	r2, r0
 8007dd8:	460b      	mov	r3, r1
 8007dda:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007dde:	f7f8 f9cf 	bl	8000180 <__adddf3>
 8007de2:	4680      	mov	r8, r0
 8007de4:	4689      	mov	r9, r1
 8007de6:	e7df      	b.n	8007da8 <_strtod_l+0x8d8>
 8007de8:	4013      	ands	r3, r2
 8007dea:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007dee:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8007df2:	f04f 38ff 	mov.w	r8, #4294967295
 8007df6:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8007dfa:	e7d5      	b.n	8007da8 <_strtod_l+0x8d8>
 8007dfc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007dfe:	ea13 0f08 	tst.w	r3, r8
 8007e02:	e7e0      	b.n	8007dc6 <_strtod_l+0x8f6>
 8007e04:	f7ff fb41 	bl	800748a <sulp>
 8007e08:	4602      	mov	r2, r0
 8007e0a:	460b      	mov	r3, r1
 8007e0c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007e10:	f7f8 f9b4 	bl	800017c <__aeabi_dsub>
 8007e14:	2200      	movs	r2, #0
 8007e16:	2300      	movs	r3, #0
 8007e18:	4680      	mov	r8, r0
 8007e1a:	4689      	mov	r9, r1
 8007e1c:	f7f8 fdce 	bl	80009bc <__aeabi_dcmpeq>
 8007e20:	2800      	cmp	r0, #0
 8007e22:	d0c1      	beq.n	8007da8 <_strtod_l+0x8d8>
 8007e24:	e608      	b.n	8007a38 <_strtod_l+0x568>
 8007e26:	4658      	mov	r0, fp
 8007e28:	9904      	ldr	r1, [sp, #16]
 8007e2a:	f002 f8a9 	bl	8009f80 <__ratio>
 8007e2e:	2200      	movs	r2, #0
 8007e30:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007e34:	4606      	mov	r6, r0
 8007e36:	460f      	mov	r7, r1
 8007e38:	f7f8 fdd4 	bl	80009e4 <__aeabi_dcmple>
 8007e3c:	2800      	cmp	r0, #0
 8007e3e:	d070      	beq.n	8007f22 <_strtod_l+0xa52>
 8007e40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d042      	beq.n	8007ecc <_strtod_l+0x9fc>
 8007e46:	2600      	movs	r6, #0
 8007e48:	4f62      	ldr	r7, [pc, #392]	; (8007fd4 <_strtod_l+0xb04>)
 8007e4a:	4d62      	ldr	r5, [pc, #392]	; (8007fd4 <_strtod_l+0xb04>)
 8007e4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e4e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007e52:	0d1b      	lsrs	r3, r3, #20
 8007e54:	051b      	lsls	r3, r3, #20
 8007e56:	930f      	str	r3, [sp, #60]	; 0x3c
 8007e58:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007e5a:	4b5f      	ldr	r3, [pc, #380]	; (8007fd8 <_strtod_l+0xb08>)
 8007e5c:	429a      	cmp	r2, r3
 8007e5e:	f040 80c3 	bne.w	8007fe8 <_strtod_l+0xb18>
 8007e62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e64:	4640      	mov	r0, r8
 8007e66:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8007e6a:	4649      	mov	r1, r9
 8007e6c:	f001 ffb2 	bl	8009dd4 <__ulp>
 8007e70:	4602      	mov	r2, r0
 8007e72:	460b      	mov	r3, r1
 8007e74:	4630      	mov	r0, r6
 8007e76:	4639      	mov	r1, r7
 8007e78:	f7f8 fb38 	bl	80004ec <__aeabi_dmul>
 8007e7c:	4642      	mov	r2, r8
 8007e7e:	464b      	mov	r3, r9
 8007e80:	f7f8 f97e 	bl	8000180 <__adddf3>
 8007e84:	460b      	mov	r3, r1
 8007e86:	4951      	ldr	r1, [pc, #324]	; (8007fcc <_strtod_l+0xafc>)
 8007e88:	4a54      	ldr	r2, [pc, #336]	; (8007fdc <_strtod_l+0xb0c>)
 8007e8a:	4019      	ands	r1, r3
 8007e8c:	4291      	cmp	r1, r2
 8007e8e:	4680      	mov	r8, r0
 8007e90:	d95d      	bls.n	8007f4e <_strtod_l+0xa7e>
 8007e92:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007e94:	4b4e      	ldr	r3, [pc, #312]	; (8007fd0 <_strtod_l+0xb00>)
 8007e96:	429a      	cmp	r2, r3
 8007e98:	d103      	bne.n	8007ea2 <_strtod_l+0x9d2>
 8007e9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007e9c:	3301      	adds	r3, #1
 8007e9e:	f43f ad56 	beq.w	800794e <_strtod_l+0x47e>
 8007ea2:	f04f 38ff 	mov.w	r8, #4294967295
 8007ea6:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8007fd0 <_strtod_l+0xb00>
 8007eaa:	4650      	mov	r0, sl
 8007eac:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007eae:	f001 fc61 	bl	8009774 <_Bfree>
 8007eb2:	4650      	mov	r0, sl
 8007eb4:	9906      	ldr	r1, [sp, #24]
 8007eb6:	f001 fc5d 	bl	8009774 <_Bfree>
 8007eba:	4650      	mov	r0, sl
 8007ebc:	9904      	ldr	r1, [sp, #16]
 8007ebe:	f001 fc59 	bl	8009774 <_Bfree>
 8007ec2:	4659      	mov	r1, fp
 8007ec4:	4650      	mov	r0, sl
 8007ec6:	f001 fc55 	bl	8009774 <_Bfree>
 8007eca:	e627      	b.n	8007b1c <_strtod_l+0x64c>
 8007ecc:	f1b8 0f00 	cmp.w	r8, #0
 8007ed0:	d119      	bne.n	8007f06 <_strtod_l+0xa36>
 8007ed2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ed4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007ed8:	b9e3      	cbnz	r3, 8007f14 <_strtod_l+0xa44>
 8007eda:	2200      	movs	r2, #0
 8007edc:	4630      	mov	r0, r6
 8007ede:	4639      	mov	r1, r7
 8007ee0:	4b3c      	ldr	r3, [pc, #240]	; (8007fd4 <_strtod_l+0xb04>)
 8007ee2:	f7f8 fd75 	bl	80009d0 <__aeabi_dcmplt>
 8007ee6:	b9c8      	cbnz	r0, 8007f1c <_strtod_l+0xa4c>
 8007ee8:	2200      	movs	r2, #0
 8007eea:	4630      	mov	r0, r6
 8007eec:	4639      	mov	r1, r7
 8007eee:	4b3c      	ldr	r3, [pc, #240]	; (8007fe0 <_strtod_l+0xb10>)
 8007ef0:	f7f8 fafc 	bl	80004ec <__aeabi_dmul>
 8007ef4:	4604      	mov	r4, r0
 8007ef6:	460d      	mov	r5, r1
 8007ef8:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8007efc:	9416      	str	r4, [sp, #88]	; 0x58
 8007efe:	9317      	str	r3, [sp, #92]	; 0x5c
 8007f00:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 8007f04:	e7a2      	b.n	8007e4c <_strtod_l+0x97c>
 8007f06:	f1b8 0f01 	cmp.w	r8, #1
 8007f0a:	d103      	bne.n	8007f14 <_strtod_l+0xa44>
 8007f0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	f43f ad92 	beq.w	8007a38 <_strtod_l+0x568>
 8007f14:	2600      	movs	r6, #0
 8007f16:	2400      	movs	r4, #0
 8007f18:	4f32      	ldr	r7, [pc, #200]	; (8007fe4 <_strtod_l+0xb14>)
 8007f1a:	e796      	b.n	8007e4a <_strtod_l+0x97a>
 8007f1c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8007f1e:	4d30      	ldr	r5, [pc, #192]	; (8007fe0 <_strtod_l+0xb10>)
 8007f20:	e7ea      	b.n	8007ef8 <_strtod_l+0xa28>
 8007f22:	4b2f      	ldr	r3, [pc, #188]	; (8007fe0 <_strtod_l+0xb10>)
 8007f24:	2200      	movs	r2, #0
 8007f26:	4630      	mov	r0, r6
 8007f28:	4639      	mov	r1, r7
 8007f2a:	f7f8 fadf 	bl	80004ec <__aeabi_dmul>
 8007f2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f30:	4604      	mov	r4, r0
 8007f32:	460d      	mov	r5, r1
 8007f34:	b933      	cbnz	r3, 8007f44 <_strtod_l+0xa74>
 8007f36:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007f3a:	9010      	str	r0, [sp, #64]	; 0x40
 8007f3c:	9311      	str	r3, [sp, #68]	; 0x44
 8007f3e:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007f42:	e783      	b.n	8007e4c <_strtod_l+0x97c>
 8007f44:	4602      	mov	r2, r0
 8007f46:	460b      	mov	r3, r1
 8007f48:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8007f4c:	e7f7      	b.n	8007f3e <_strtod_l+0xa6e>
 8007f4e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8007f52:	9b05      	ldr	r3, [sp, #20]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d1a8      	bne.n	8007eaa <_strtod_l+0x9da>
 8007f58:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007f5c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007f5e:	0d1b      	lsrs	r3, r3, #20
 8007f60:	051b      	lsls	r3, r3, #20
 8007f62:	429a      	cmp	r2, r3
 8007f64:	d1a1      	bne.n	8007eaa <_strtod_l+0x9da>
 8007f66:	4620      	mov	r0, r4
 8007f68:	4629      	mov	r1, r5
 8007f6a:	f7f8 fdb7 	bl	8000adc <__aeabi_d2lz>
 8007f6e:	f7f8 fa8f 	bl	8000490 <__aeabi_l2d>
 8007f72:	4602      	mov	r2, r0
 8007f74:	460b      	mov	r3, r1
 8007f76:	4620      	mov	r0, r4
 8007f78:	4629      	mov	r1, r5
 8007f7a:	f7f8 f8ff 	bl	800017c <__aeabi_dsub>
 8007f7e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007f80:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007f84:	ea43 0308 	orr.w	r3, r3, r8
 8007f88:	4313      	orrs	r3, r2
 8007f8a:	4604      	mov	r4, r0
 8007f8c:	460d      	mov	r5, r1
 8007f8e:	d066      	beq.n	800805e <_strtod_l+0xb8e>
 8007f90:	a309      	add	r3, pc, #36	; (adr r3, 8007fb8 <_strtod_l+0xae8>)
 8007f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f96:	f7f8 fd1b 	bl	80009d0 <__aeabi_dcmplt>
 8007f9a:	2800      	cmp	r0, #0
 8007f9c:	f47f ace2 	bne.w	8007964 <_strtod_l+0x494>
 8007fa0:	a307      	add	r3, pc, #28	; (adr r3, 8007fc0 <_strtod_l+0xaf0>)
 8007fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fa6:	4620      	mov	r0, r4
 8007fa8:	4629      	mov	r1, r5
 8007faa:	f7f8 fd2f 	bl	8000a0c <__aeabi_dcmpgt>
 8007fae:	2800      	cmp	r0, #0
 8007fb0:	f43f af7b 	beq.w	8007eaa <_strtod_l+0x9da>
 8007fb4:	e4d6      	b.n	8007964 <_strtod_l+0x494>
 8007fb6:	bf00      	nop
 8007fb8:	94a03595 	.word	0x94a03595
 8007fbc:	3fdfffff 	.word	0x3fdfffff
 8007fc0:	35afe535 	.word	0x35afe535
 8007fc4:	3fe00000 	.word	0x3fe00000
 8007fc8:	000fffff 	.word	0x000fffff
 8007fcc:	7ff00000 	.word	0x7ff00000
 8007fd0:	7fefffff 	.word	0x7fefffff
 8007fd4:	3ff00000 	.word	0x3ff00000
 8007fd8:	7fe00000 	.word	0x7fe00000
 8007fdc:	7c9fffff 	.word	0x7c9fffff
 8007fe0:	3fe00000 	.word	0x3fe00000
 8007fe4:	bff00000 	.word	0xbff00000
 8007fe8:	9b05      	ldr	r3, [sp, #20]
 8007fea:	b313      	cbz	r3, 8008032 <_strtod_l+0xb62>
 8007fec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007fee:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007ff2:	d81e      	bhi.n	8008032 <_strtod_l+0xb62>
 8007ff4:	a326      	add	r3, pc, #152	; (adr r3, 8008090 <_strtod_l+0xbc0>)
 8007ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ffa:	4620      	mov	r0, r4
 8007ffc:	4629      	mov	r1, r5
 8007ffe:	f7f8 fcf1 	bl	80009e4 <__aeabi_dcmple>
 8008002:	b190      	cbz	r0, 800802a <_strtod_l+0xb5a>
 8008004:	4629      	mov	r1, r5
 8008006:	4620      	mov	r0, r4
 8008008:	f7f8 fd48 	bl	8000a9c <__aeabi_d2uiz>
 800800c:	2801      	cmp	r0, #1
 800800e:	bf38      	it	cc
 8008010:	2001      	movcc	r0, #1
 8008012:	f7f8 f9f1 	bl	80003f8 <__aeabi_ui2d>
 8008016:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008018:	4604      	mov	r4, r0
 800801a:	460d      	mov	r5, r1
 800801c:	b9d3      	cbnz	r3, 8008054 <_strtod_l+0xb84>
 800801e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008022:	9012      	str	r0, [sp, #72]	; 0x48
 8008024:	9313      	str	r3, [sp, #76]	; 0x4c
 8008026:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800802a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800802c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8008030:	1a9f      	subs	r7, r3, r2
 8008032:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008036:	f001 fecd 	bl	8009dd4 <__ulp>
 800803a:	4602      	mov	r2, r0
 800803c:	460b      	mov	r3, r1
 800803e:	4630      	mov	r0, r6
 8008040:	4639      	mov	r1, r7
 8008042:	f7f8 fa53 	bl	80004ec <__aeabi_dmul>
 8008046:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800804a:	f7f8 f899 	bl	8000180 <__adddf3>
 800804e:	4680      	mov	r8, r0
 8008050:	4689      	mov	r9, r1
 8008052:	e77e      	b.n	8007f52 <_strtod_l+0xa82>
 8008054:	4602      	mov	r2, r0
 8008056:	460b      	mov	r3, r1
 8008058:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800805c:	e7e3      	b.n	8008026 <_strtod_l+0xb56>
 800805e:	a30e      	add	r3, pc, #56	; (adr r3, 8008098 <_strtod_l+0xbc8>)
 8008060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008064:	f7f8 fcb4 	bl	80009d0 <__aeabi_dcmplt>
 8008068:	e7a1      	b.n	8007fae <_strtod_l+0xade>
 800806a:	2300      	movs	r3, #0
 800806c:	930a      	str	r3, [sp, #40]	; 0x28
 800806e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008070:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008072:	6013      	str	r3, [r2, #0]
 8008074:	f7ff ba71 	b.w	800755a <_strtod_l+0x8a>
 8008078:	2a65      	cmp	r2, #101	; 0x65
 800807a:	f43f ab63 	beq.w	8007744 <_strtod_l+0x274>
 800807e:	2a45      	cmp	r2, #69	; 0x45
 8008080:	f43f ab60 	beq.w	8007744 <_strtod_l+0x274>
 8008084:	2301      	movs	r3, #1
 8008086:	f7ff bb95 	b.w	80077b4 <_strtod_l+0x2e4>
 800808a:	bf00      	nop
 800808c:	f3af 8000 	nop.w
 8008090:	ffc00000 	.word	0xffc00000
 8008094:	41dfffff 	.word	0x41dfffff
 8008098:	94a03595 	.word	0x94a03595
 800809c:	3fcfffff 	.word	0x3fcfffff

080080a0 <strtod>:
 80080a0:	460a      	mov	r2, r1
 80080a2:	4601      	mov	r1, r0
 80080a4:	4802      	ldr	r0, [pc, #8]	; (80080b0 <strtod+0x10>)
 80080a6:	4b03      	ldr	r3, [pc, #12]	; (80080b4 <strtod+0x14>)
 80080a8:	6800      	ldr	r0, [r0, #0]
 80080aa:	f7ff ba11 	b.w	80074d0 <_strtod_l>
 80080ae:	bf00      	nop
 80080b0:	20000190 	.word	0x20000190
 80080b4:	200001f8 	.word	0x200001f8

080080b8 <strtok>:
 80080b8:	4b16      	ldr	r3, [pc, #88]	; (8008114 <strtok+0x5c>)
 80080ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080be:	681f      	ldr	r7, [r3, #0]
 80080c0:	4605      	mov	r5, r0
 80080c2:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 80080c4:	460e      	mov	r6, r1
 80080c6:	b9ec      	cbnz	r4, 8008104 <strtok+0x4c>
 80080c8:	2050      	movs	r0, #80	; 0x50
 80080ca:	f001 faeb 	bl	80096a4 <malloc>
 80080ce:	4602      	mov	r2, r0
 80080d0:	65b8      	str	r0, [r7, #88]	; 0x58
 80080d2:	b920      	cbnz	r0, 80080de <strtok+0x26>
 80080d4:	2157      	movs	r1, #87	; 0x57
 80080d6:	4b10      	ldr	r3, [pc, #64]	; (8008118 <strtok+0x60>)
 80080d8:	4810      	ldr	r0, [pc, #64]	; (800811c <strtok+0x64>)
 80080da:	f000 f8cf 	bl	800827c <__assert_func>
 80080de:	e9c0 4400 	strd	r4, r4, [r0]
 80080e2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80080e6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80080ea:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80080ee:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80080f2:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80080f6:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80080fa:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80080fe:	6184      	str	r4, [r0, #24]
 8008100:	7704      	strb	r4, [r0, #28]
 8008102:	6244      	str	r4, [r0, #36]	; 0x24
 8008104:	4631      	mov	r1, r6
 8008106:	4628      	mov	r0, r5
 8008108:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800810a:	2301      	movs	r3, #1
 800810c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008110:	f000 b806 	b.w	8008120 <__strtok_r>
 8008114:	20000190 	.word	0x20000190
 8008118:	0800b418 	.word	0x0800b418
 800811c:	0800b42f 	.word	0x0800b42f

08008120 <__strtok_r>:
 8008120:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008122:	b908      	cbnz	r0, 8008128 <__strtok_r+0x8>
 8008124:	6810      	ldr	r0, [r2, #0]
 8008126:	b188      	cbz	r0, 800814c <__strtok_r+0x2c>
 8008128:	4604      	mov	r4, r0
 800812a:	460f      	mov	r7, r1
 800812c:	4620      	mov	r0, r4
 800812e:	f814 5b01 	ldrb.w	r5, [r4], #1
 8008132:	f817 6b01 	ldrb.w	r6, [r7], #1
 8008136:	b91e      	cbnz	r6, 8008140 <__strtok_r+0x20>
 8008138:	b965      	cbnz	r5, 8008154 <__strtok_r+0x34>
 800813a:	4628      	mov	r0, r5
 800813c:	6015      	str	r5, [r2, #0]
 800813e:	e005      	b.n	800814c <__strtok_r+0x2c>
 8008140:	42b5      	cmp	r5, r6
 8008142:	d1f6      	bne.n	8008132 <__strtok_r+0x12>
 8008144:	2b00      	cmp	r3, #0
 8008146:	d1f0      	bne.n	800812a <__strtok_r+0xa>
 8008148:	6014      	str	r4, [r2, #0]
 800814a:	7003      	strb	r3, [r0, #0]
 800814c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800814e:	461c      	mov	r4, r3
 8008150:	e00c      	b.n	800816c <__strtok_r+0x4c>
 8008152:	b915      	cbnz	r5, 800815a <__strtok_r+0x3a>
 8008154:	460e      	mov	r6, r1
 8008156:	f814 3b01 	ldrb.w	r3, [r4], #1
 800815a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800815e:	42ab      	cmp	r3, r5
 8008160:	d1f7      	bne.n	8008152 <__strtok_r+0x32>
 8008162:	2b00      	cmp	r3, #0
 8008164:	d0f3      	beq.n	800814e <__strtok_r+0x2e>
 8008166:	2300      	movs	r3, #0
 8008168:	f804 3c01 	strb.w	r3, [r4, #-1]
 800816c:	6014      	str	r4, [r2, #0]
 800816e:	e7ed      	b.n	800814c <__strtok_r+0x2c>

08008170 <_strtol_l.constprop.0>:
 8008170:	2b01      	cmp	r3, #1
 8008172:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008176:	4680      	mov	r8, r0
 8008178:	d001      	beq.n	800817e <_strtol_l.constprop.0+0xe>
 800817a:	2b24      	cmp	r3, #36	; 0x24
 800817c:	d906      	bls.n	800818c <_strtol_l.constprop.0+0x1c>
 800817e:	f7fe fcad 	bl	8006adc <__errno>
 8008182:	2316      	movs	r3, #22
 8008184:	6003      	str	r3, [r0, #0]
 8008186:	2000      	movs	r0, #0
 8008188:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800818c:	460d      	mov	r5, r1
 800818e:	4f35      	ldr	r7, [pc, #212]	; (8008264 <_strtol_l.constprop.0+0xf4>)
 8008190:	4628      	mov	r0, r5
 8008192:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008196:	5de6      	ldrb	r6, [r4, r7]
 8008198:	f016 0608 	ands.w	r6, r6, #8
 800819c:	d1f8      	bne.n	8008190 <_strtol_l.constprop.0+0x20>
 800819e:	2c2d      	cmp	r4, #45	; 0x2d
 80081a0:	d12f      	bne.n	8008202 <_strtol_l.constprop.0+0x92>
 80081a2:	2601      	movs	r6, #1
 80081a4:	782c      	ldrb	r4, [r5, #0]
 80081a6:	1c85      	adds	r5, r0, #2
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d057      	beq.n	800825c <_strtol_l.constprop.0+0xec>
 80081ac:	2b10      	cmp	r3, #16
 80081ae:	d109      	bne.n	80081c4 <_strtol_l.constprop.0+0x54>
 80081b0:	2c30      	cmp	r4, #48	; 0x30
 80081b2:	d107      	bne.n	80081c4 <_strtol_l.constprop.0+0x54>
 80081b4:	7828      	ldrb	r0, [r5, #0]
 80081b6:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80081ba:	2858      	cmp	r0, #88	; 0x58
 80081bc:	d149      	bne.n	8008252 <_strtol_l.constprop.0+0xe2>
 80081be:	2310      	movs	r3, #16
 80081c0:	786c      	ldrb	r4, [r5, #1]
 80081c2:	3502      	adds	r5, #2
 80081c4:	2700      	movs	r7, #0
 80081c6:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 80081ca:	f10e 3eff 	add.w	lr, lr, #4294967295
 80081ce:	fbbe f9f3 	udiv	r9, lr, r3
 80081d2:	4638      	mov	r0, r7
 80081d4:	fb03 ea19 	mls	sl, r3, r9, lr
 80081d8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80081dc:	f1bc 0f09 	cmp.w	ip, #9
 80081e0:	d814      	bhi.n	800820c <_strtol_l.constprop.0+0x9c>
 80081e2:	4664      	mov	r4, ip
 80081e4:	42a3      	cmp	r3, r4
 80081e6:	dd22      	ble.n	800822e <_strtol_l.constprop.0+0xbe>
 80081e8:	2f00      	cmp	r7, #0
 80081ea:	db1d      	blt.n	8008228 <_strtol_l.constprop.0+0xb8>
 80081ec:	4581      	cmp	r9, r0
 80081ee:	d31b      	bcc.n	8008228 <_strtol_l.constprop.0+0xb8>
 80081f0:	d101      	bne.n	80081f6 <_strtol_l.constprop.0+0x86>
 80081f2:	45a2      	cmp	sl, r4
 80081f4:	db18      	blt.n	8008228 <_strtol_l.constprop.0+0xb8>
 80081f6:	2701      	movs	r7, #1
 80081f8:	fb00 4003 	mla	r0, r0, r3, r4
 80081fc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008200:	e7ea      	b.n	80081d8 <_strtol_l.constprop.0+0x68>
 8008202:	2c2b      	cmp	r4, #43	; 0x2b
 8008204:	bf04      	itt	eq
 8008206:	782c      	ldrbeq	r4, [r5, #0]
 8008208:	1c85      	addeq	r5, r0, #2
 800820a:	e7cd      	b.n	80081a8 <_strtol_l.constprop.0+0x38>
 800820c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8008210:	f1bc 0f19 	cmp.w	ip, #25
 8008214:	d801      	bhi.n	800821a <_strtol_l.constprop.0+0xaa>
 8008216:	3c37      	subs	r4, #55	; 0x37
 8008218:	e7e4      	b.n	80081e4 <_strtol_l.constprop.0+0x74>
 800821a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800821e:	f1bc 0f19 	cmp.w	ip, #25
 8008222:	d804      	bhi.n	800822e <_strtol_l.constprop.0+0xbe>
 8008224:	3c57      	subs	r4, #87	; 0x57
 8008226:	e7dd      	b.n	80081e4 <_strtol_l.constprop.0+0x74>
 8008228:	f04f 37ff 	mov.w	r7, #4294967295
 800822c:	e7e6      	b.n	80081fc <_strtol_l.constprop.0+0x8c>
 800822e:	2f00      	cmp	r7, #0
 8008230:	da07      	bge.n	8008242 <_strtol_l.constprop.0+0xd2>
 8008232:	2322      	movs	r3, #34	; 0x22
 8008234:	4670      	mov	r0, lr
 8008236:	f8c8 3000 	str.w	r3, [r8]
 800823a:	2a00      	cmp	r2, #0
 800823c:	d0a4      	beq.n	8008188 <_strtol_l.constprop.0+0x18>
 800823e:	1e69      	subs	r1, r5, #1
 8008240:	e005      	b.n	800824e <_strtol_l.constprop.0+0xde>
 8008242:	b106      	cbz	r6, 8008246 <_strtol_l.constprop.0+0xd6>
 8008244:	4240      	negs	r0, r0
 8008246:	2a00      	cmp	r2, #0
 8008248:	d09e      	beq.n	8008188 <_strtol_l.constprop.0+0x18>
 800824a:	2f00      	cmp	r7, #0
 800824c:	d1f7      	bne.n	800823e <_strtol_l.constprop.0+0xce>
 800824e:	6011      	str	r1, [r2, #0]
 8008250:	e79a      	b.n	8008188 <_strtol_l.constprop.0+0x18>
 8008252:	2430      	movs	r4, #48	; 0x30
 8008254:	2b00      	cmp	r3, #0
 8008256:	d1b5      	bne.n	80081c4 <_strtol_l.constprop.0+0x54>
 8008258:	2308      	movs	r3, #8
 800825a:	e7b3      	b.n	80081c4 <_strtol_l.constprop.0+0x54>
 800825c:	2c30      	cmp	r4, #48	; 0x30
 800825e:	d0a9      	beq.n	80081b4 <_strtol_l.constprop.0+0x44>
 8008260:	230a      	movs	r3, #10
 8008262:	e7af      	b.n	80081c4 <_strtol_l.constprop.0+0x54>
 8008264:	0800b4c9 	.word	0x0800b4c9

08008268 <strtol>:
 8008268:	4613      	mov	r3, r2
 800826a:	460a      	mov	r2, r1
 800826c:	4601      	mov	r1, r0
 800826e:	4802      	ldr	r0, [pc, #8]	; (8008278 <strtol+0x10>)
 8008270:	6800      	ldr	r0, [r0, #0]
 8008272:	f7ff bf7d 	b.w	8008170 <_strtol_l.constprop.0>
 8008276:	bf00      	nop
 8008278:	20000190 	.word	0x20000190

0800827c <__assert_func>:
 800827c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800827e:	4614      	mov	r4, r2
 8008280:	461a      	mov	r2, r3
 8008282:	4b09      	ldr	r3, [pc, #36]	; (80082a8 <__assert_func+0x2c>)
 8008284:	4605      	mov	r5, r0
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	68d8      	ldr	r0, [r3, #12]
 800828a:	b14c      	cbz	r4, 80082a0 <__assert_func+0x24>
 800828c:	4b07      	ldr	r3, [pc, #28]	; (80082ac <__assert_func+0x30>)
 800828e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008292:	9100      	str	r1, [sp, #0]
 8008294:	462b      	mov	r3, r5
 8008296:	4906      	ldr	r1, [pc, #24]	; (80082b0 <__assert_func+0x34>)
 8008298:	f000 fe88 	bl	8008fac <fiprintf>
 800829c:	f002 fb7e 	bl	800a99c <abort>
 80082a0:	4b04      	ldr	r3, [pc, #16]	; (80082b4 <__assert_func+0x38>)
 80082a2:	461c      	mov	r4, r3
 80082a4:	e7f3      	b.n	800828e <__assert_func+0x12>
 80082a6:	bf00      	nop
 80082a8:	20000190 	.word	0x20000190
 80082ac:	0800b48c 	.word	0x0800b48c
 80082b0:	0800b499 	.word	0x0800b499
 80082b4:	0800b4c7 	.word	0x0800b4c7

080082b8 <quorem>:
 80082b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082bc:	6903      	ldr	r3, [r0, #16]
 80082be:	690c      	ldr	r4, [r1, #16]
 80082c0:	4607      	mov	r7, r0
 80082c2:	42a3      	cmp	r3, r4
 80082c4:	f2c0 8082 	blt.w	80083cc <quorem+0x114>
 80082c8:	3c01      	subs	r4, #1
 80082ca:	f100 0514 	add.w	r5, r0, #20
 80082ce:	f101 0814 	add.w	r8, r1, #20
 80082d2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80082d6:	9301      	str	r3, [sp, #4]
 80082d8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80082dc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80082e0:	3301      	adds	r3, #1
 80082e2:	429a      	cmp	r2, r3
 80082e4:	fbb2 f6f3 	udiv	r6, r2, r3
 80082e8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80082ec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80082f0:	d331      	bcc.n	8008356 <quorem+0x9e>
 80082f2:	f04f 0e00 	mov.w	lr, #0
 80082f6:	4640      	mov	r0, r8
 80082f8:	46ac      	mov	ip, r5
 80082fa:	46f2      	mov	sl, lr
 80082fc:	f850 2b04 	ldr.w	r2, [r0], #4
 8008300:	b293      	uxth	r3, r2
 8008302:	fb06 e303 	mla	r3, r6, r3, lr
 8008306:	0c12      	lsrs	r2, r2, #16
 8008308:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800830c:	b29b      	uxth	r3, r3
 800830e:	fb06 e202 	mla	r2, r6, r2, lr
 8008312:	ebaa 0303 	sub.w	r3, sl, r3
 8008316:	f8dc a000 	ldr.w	sl, [ip]
 800831a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800831e:	fa1f fa8a 	uxth.w	sl, sl
 8008322:	4453      	add	r3, sl
 8008324:	f8dc a000 	ldr.w	sl, [ip]
 8008328:	b292      	uxth	r2, r2
 800832a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800832e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008332:	b29b      	uxth	r3, r3
 8008334:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008338:	4581      	cmp	r9, r0
 800833a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800833e:	f84c 3b04 	str.w	r3, [ip], #4
 8008342:	d2db      	bcs.n	80082fc <quorem+0x44>
 8008344:	f855 300b 	ldr.w	r3, [r5, fp]
 8008348:	b92b      	cbnz	r3, 8008356 <quorem+0x9e>
 800834a:	9b01      	ldr	r3, [sp, #4]
 800834c:	3b04      	subs	r3, #4
 800834e:	429d      	cmp	r5, r3
 8008350:	461a      	mov	r2, r3
 8008352:	d32f      	bcc.n	80083b4 <quorem+0xfc>
 8008354:	613c      	str	r4, [r7, #16]
 8008356:	4638      	mov	r0, r7
 8008358:	f001 fc94 	bl	8009c84 <__mcmp>
 800835c:	2800      	cmp	r0, #0
 800835e:	db25      	blt.n	80083ac <quorem+0xf4>
 8008360:	4628      	mov	r0, r5
 8008362:	f04f 0c00 	mov.w	ip, #0
 8008366:	3601      	adds	r6, #1
 8008368:	f858 1b04 	ldr.w	r1, [r8], #4
 800836c:	f8d0 e000 	ldr.w	lr, [r0]
 8008370:	b28b      	uxth	r3, r1
 8008372:	ebac 0303 	sub.w	r3, ip, r3
 8008376:	fa1f f28e 	uxth.w	r2, lr
 800837a:	4413      	add	r3, r2
 800837c:	0c0a      	lsrs	r2, r1, #16
 800837e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008382:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008386:	b29b      	uxth	r3, r3
 8008388:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800838c:	45c1      	cmp	r9, r8
 800838e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008392:	f840 3b04 	str.w	r3, [r0], #4
 8008396:	d2e7      	bcs.n	8008368 <quorem+0xb0>
 8008398:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800839c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80083a0:	b922      	cbnz	r2, 80083ac <quorem+0xf4>
 80083a2:	3b04      	subs	r3, #4
 80083a4:	429d      	cmp	r5, r3
 80083a6:	461a      	mov	r2, r3
 80083a8:	d30a      	bcc.n	80083c0 <quorem+0x108>
 80083aa:	613c      	str	r4, [r7, #16]
 80083ac:	4630      	mov	r0, r6
 80083ae:	b003      	add	sp, #12
 80083b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083b4:	6812      	ldr	r2, [r2, #0]
 80083b6:	3b04      	subs	r3, #4
 80083b8:	2a00      	cmp	r2, #0
 80083ba:	d1cb      	bne.n	8008354 <quorem+0x9c>
 80083bc:	3c01      	subs	r4, #1
 80083be:	e7c6      	b.n	800834e <quorem+0x96>
 80083c0:	6812      	ldr	r2, [r2, #0]
 80083c2:	3b04      	subs	r3, #4
 80083c4:	2a00      	cmp	r2, #0
 80083c6:	d1f0      	bne.n	80083aa <quorem+0xf2>
 80083c8:	3c01      	subs	r4, #1
 80083ca:	e7eb      	b.n	80083a4 <quorem+0xec>
 80083cc:	2000      	movs	r0, #0
 80083ce:	e7ee      	b.n	80083ae <quorem+0xf6>

080083d0 <_dtoa_r>:
 80083d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083d4:	4616      	mov	r6, r2
 80083d6:	461f      	mov	r7, r3
 80083d8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80083da:	b099      	sub	sp, #100	; 0x64
 80083dc:	4605      	mov	r5, r0
 80083de:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80083e2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80083e6:	b974      	cbnz	r4, 8008406 <_dtoa_r+0x36>
 80083e8:	2010      	movs	r0, #16
 80083ea:	f001 f95b 	bl	80096a4 <malloc>
 80083ee:	4602      	mov	r2, r0
 80083f0:	6268      	str	r0, [r5, #36]	; 0x24
 80083f2:	b920      	cbnz	r0, 80083fe <_dtoa_r+0x2e>
 80083f4:	21ea      	movs	r1, #234	; 0xea
 80083f6:	4ba8      	ldr	r3, [pc, #672]	; (8008698 <_dtoa_r+0x2c8>)
 80083f8:	48a8      	ldr	r0, [pc, #672]	; (800869c <_dtoa_r+0x2cc>)
 80083fa:	f7ff ff3f 	bl	800827c <__assert_func>
 80083fe:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008402:	6004      	str	r4, [r0, #0]
 8008404:	60c4      	str	r4, [r0, #12]
 8008406:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008408:	6819      	ldr	r1, [r3, #0]
 800840a:	b151      	cbz	r1, 8008422 <_dtoa_r+0x52>
 800840c:	685a      	ldr	r2, [r3, #4]
 800840e:	2301      	movs	r3, #1
 8008410:	4093      	lsls	r3, r2
 8008412:	604a      	str	r2, [r1, #4]
 8008414:	608b      	str	r3, [r1, #8]
 8008416:	4628      	mov	r0, r5
 8008418:	f001 f9ac 	bl	8009774 <_Bfree>
 800841c:	2200      	movs	r2, #0
 800841e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008420:	601a      	str	r2, [r3, #0]
 8008422:	1e3b      	subs	r3, r7, #0
 8008424:	bfaf      	iteee	ge
 8008426:	2300      	movge	r3, #0
 8008428:	2201      	movlt	r2, #1
 800842a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800842e:	9305      	strlt	r3, [sp, #20]
 8008430:	bfa8      	it	ge
 8008432:	f8c8 3000 	strge.w	r3, [r8]
 8008436:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800843a:	4b99      	ldr	r3, [pc, #612]	; (80086a0 <_dtoa_r+0x2d0>)
 800843c:	bfb8      	it	lt
 800843e:	f8c8 2000 	strlt.w	r2, [r8]
 8008442:	ea33 0309 	bics.w	r3, r3, r9
 8008446:	d119      	bne.n	800847c <_dtoa_r+0xac>
 8008448:	f242 730f 	movw	r3, #9999	; 0x270f
 800844c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800844e:	6013      	str	r3, [r2, #0]
 8008450:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008454:	4333      	orrs	r3, r6
 8008456:	f000 857f 	beq.w	8008f58 <_dtoa_r+0xb88>
 800845a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800845c:	b953      	cbnz	r3, 8008474 <_dtoa_r+0xa4>
 800845e:	4b91      	ldr	r3, [pc, #580]	; (80086a4 <_dtoa_r+0x2d4>)
 8008460:	e022      	b.n	80084a8 <_dtoa_r+0xd8>
 8008462:	4b91      	ldr	r3, [pc, #580]	; (80086a8 <_dtoa_r+0x2d8>)
 8008464:	9303      	str	r3, [sp, #12]
 8008466:	3308      	adds	r3, #8
 8008468:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800846a:	6013      	str	r3, [r2, #0]
 800846c:	9803      	ldr	r0, [sp, #12]
 800846e:	b019      	add	sp, #100	; 0x64
 8008470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008474:	4b8b      	ldr	r3, [pc, #556]	; (80086a4 <_dtoa_r+0x2d4>)
 8008476:	9303      	str	r3, [sp, #12]
 8008478:	3303      	adds	r3, #3
 800847a:	e7f5      	b.n	8008468 <_dtoa_r+0x98>
 800847c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008480:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8008484:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008488:	2200      	movs	r2, #0
 800848a:	2300      	movs	r3, #0
 800848c:	f7f8 fa96 	bl	80009bc <__aeabi_dcmpeq>
 8008490:	4680      	mov	r8, r0
 8008492:	b158      	cbz	r0, 80084ac <_dtoa_r+0xdc>
 8008494:	2301      	movs	r3, #1
 8008496:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008498:	6013      	str	r3, [r2, #0]
 800849a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800849c:	2b00      	cmp	r3, #0
 800849e:	f000 8558 	beq.w	8008f52 <_dtoa_r+0xb82>
 80084a2:	4882      	ldr	r0, [pc, #520]	; (80086ac <_dtoa_r+0x2dc>)
 80084a4:	6018      	str	r0, [r3, #0]
 80084a6:	1e43      	subs	r3, r0, #1
 80084a8:	9303      	str	r3, [sp, #12]
 80084aa:	e7df      	b.n	800846c <_dtoa_r+0x9c>
 80084ac:	ab16      	add	r3, sp, #88	; 0x58
 80084ae:	9301      	str	r3, [sp, #4]
 80084b0:	ab17      	add	r3, sp, #92	; 0x5c
 80084b2:	9300      	str	r3, [sp, #0]
 80084b4:	4628      	mov	r0, r5
 80084b6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80084ba:	f001 fd05 	bl	8009ec8 <__d2b>
 80084be:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80084c2:	4683      	mov	fp, r0
 80084c4:	2c00      	cmp	r4, #0
 80084c6:	d07f      	beq.n	80085c8 <_dtoa_r+0x1f8>
 80084c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80084cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80084ce:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80084d2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80084d6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80084da:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80084de:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80084e2:	2200      	movs	r2, #0
 80084e4:	4b72      	ldr	r3, [pc, #456]	; (80086b0 <_dtoa_r+0x2e0>)
 80084e6:	f7f7 fe49 	bl	800017c <__aeabi_dsub>
 80084ea:	a365      	add	r3, pc, #404	; (adr r3, 8008680 <_dtoa_r+0x2b0>)
 80084ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084f0:	f7f7 fffc 	bl	80004ec <__aeabi_dmul>
 80084f4:	a364      	add	r3, pc, #400	; (adr r3, 8008688 <_dtoa_r+0x2b8>)
 80084f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084fa:	f7f7 fe41 	bl	8000180 <__adddf3>
 80084fe:	4606      	mov	r6, r0
 8008500:	4620      	mov	r0, r4
 8008502:	460f      	mov	r7, r1
 8008504:	f7f7 ff88 	bl	8000418 <__aeabi_i2d>
 8008508:	a361      	add	r3, pc, #388	; (adr r3, 8008690 <_dtoa_r+0x2c0>)
 800850a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800850e:	f7f7 ffed 	bl	80004ec <__aeabi_dmul>
 8008512:	4602      	mov	r2, r0
 8008514:	460b      	mov	r3, r1
 8008516:	4630      	mov	r0, r6
 8008518:	4639      	mov	r1, r7
 800851a:	f7f7 fe31 	bl	8000180 <__adddf3>
 800851e:	4606      	mov	r6, r0
 8008520:	460f      	mov	r7, r1
 8008522:	f7f8 fa93 	bl	8000a4c <__aeabi_d2iz>
 8008526:	2200      	movs	r2, #0
 8008528:	4682      	mov	sl, r0
 800852a:	2300      	movs	r3, #0
 800852c:	4630      	mov	r0, r6
 800852e:	4639      	mov	r1, r7
 8008530:	f7f8 fa4e 	bl	80009d0 <__aeabi_dcmplt>
 8008534:	b148      	cbz	r0, 800854a <_dtoa_r+0x17a>
 8008536:	4650      	mov	r0, sl
 8008538:	f7f7 ff6e 	bl	8000418 <__aeabi_i2d>
 800853c:	4632      	mov	r2, r6
 800853e:	463b      	mov	r3, r7
 8008540:	f7f8 fa3c 	bl	80009bc <__aeabi_dcmpeq>
 8008544:	b908      	cbnz	r0, 800854a <_dtoa_r+0x17a>
 8008546:	f10a 3aff 	add.w	sl, sl, #4294967295
 800854a:	f1ba 0f16 	cmp.w	sl, #22
 800854e:	d858      	bhi.n	8008602 <_dtoa_r+0x232>
 8008550:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008554:	4b57      	ldr	r3, [pc, #348]	; (80086b4 <_dtoa_r+0x2e4>)
 8008556:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800855a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800855e:	f7f8 fa37 	bl	80009d0 <__aeabi_dcmplt>
 8008562:	2800      	cmp	r0, #0
 8008564:	d04f      	beq.n	8008606 <_dtoa_r+0x236>
 8008566:	2300      	movs	r3, #0
 8008568:	f10a 3aff 	add.w	sl, sl, #4294967295
 800856c:	930f      	str	r3, [sp, #60]	; 0x3c
 800856e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008570:	1b1c      	subs	r4, r3, r4
 8008572:	1e63      	subs	r3, r4, #1
 8008574:	9309      	str	r3, [sp, #36]	; 0x24
 8008576:	bf49      	itett	mi
 8008578:	f1c4 0301 	rsbmi	r3, r4, #1
 800857c:	2300      	movpl	r3, #0
 800857e:	9306      	strmi	r3, [sp, #24]
 8008580:	2300      	movmi	r3, #0
 8008582:	bf54      	ite	pl
 8008584:	9306      	strpl	r3, [sp, #24]
 8008586:	9309      	strmi	r3, [sp, #36]	; 0x24
 8008588:	f1ba 0f00 	cmp.w	sl, #0
 800858c:	db3d      	blt.n	800860a <_dtoa_r+0x23a>
 800858e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008590:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8008594:	4453      	add	r3, sl
 8008596:	9309      	str	r3, [sp, #36]	; 0x24
 8008598:	2300      	movs	r3, #0
 800859a:	930a      	str	r3, [sp, #40]	; 0x28
 800859c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800859e:	2b09      	cmp	r3, #9
 80085a0:	f200 808c 	bhi.w	80086bc <_dtoa_r+0x2ec>
 80085a4:	2b05      	cmp	r3, #5
 80085a6:	bfc4      	itt	gt
 80085a8:	3b04      	subgt	r3, #4
 80085aa:	9322      	strgt	r3, [sp, #136]	; 0x88
 80085ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80085ae:	bfc8      	it	gt
 80085b0:	2400      	movgt	r4, #0
 80085b2:	f1a3 0302 	sub.w	r3, r3, #2
 80085b6:	bfd8      	it	le
 80085b8:	2401      	movle	r4, #1
 80085ba:	2b03      	cmp	r3, #3
 80085bc:	f200 808a 	bhi.w	80086d4 <_dtoa_r+0x304>
 80085c0:	e8df f003 	tbb	[pc, r3]
 80085c4:	5b4d4f2d 	.word	0x5b4d4f2d
 80085c8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80085cc:	441c      	add	r4, r3
 80085ce:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80085d2:	2b20      	cmp	r3, #32
 80085d4:	bfc3      	ittte	gt
 80085d6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80085da:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80085de:	fa09 f303 	lslgt.w	r3, r9, r3
 80085e2:	f1c3 0320 	rsble	r3, r3, #32
 80085e6:	bfc6      	itte	gt
 80085e8:	fa26 f000 	lsrgt.w	r0, r6, r0
 80085ec:	4318      	orrgt	r0, r3
 80085ee:	fa06 f003 	lslle.w	r0, r6, r3
 80085f2:	f7f7 ff01 	bl	80003f8 <__aeabi_ui2d>
 80085f6:	2301      	movs	r3, #1
 80085f8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80085fc:	3c01      	subs	r4, #1
 80085fe:	9313      	str	r3, [sp, #76]	; 0x4c
 8008600:	e76f      	b.n	80084e2 <_dtoa_r+0x112>
 8008602:	2301      	movs	r3, #1
 8008604:	e7b2      	b.n	800856c <_dtoa_r+0x19c>
 8008606:	900f      	str	r0, [sp, #60]	; 0x3c
 8008608:	e7b1      	b.n	800856e <_dtoa_r+0x19e>
 800860a:	9b06      	ldr	r3, [sp, #24]
 800860c:	eba3 030a 	sub.w	r3, r3, sl
 8008610:	9306      	str	r3, [sp, #24]
 8008612:	f1ca 0300 	rsb	r3, sl, #0
 8008616:	930a      	str	r3, [sp, #40]	; 0x28
 8008618:	2300      	movs	r3, #0
 800861a:	930e      	str	r3, [sp, #56]	; 0x38
 800861c:	e7be      	b.n	800859c <_dtoa_r+0x1cc>
 800861e:	2300      	movs	r3, #0
 8008620:	930b      	str	r3, [sp, #44]	; 0x2c
 8008622:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008624:	2b00      	cmp	r3, #0
 8008626:	dc58      	bgt.n	80086da <_dtoa_r+0x30a>
 8008628:	f04f 0901 	mov.w	r9, #1
 800862c:	464b      	mov	r3, r9
 800862e:	f8cd 9020 	str.w	r9, [sp, #32]
 8008632:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8008636:	2200      	movs	r2, #0
 8008638:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800863a:	6042      	str	r2, [r0, #4]
 800863c:	2204      	movs	r2, #4
 800863e:	f102 0614 	add.w	r6, r2, #20
 8008642:	429e      	cmp	r6, r3
 8008644:	6841      	ldr	r1, [r0, #4]
 8008646:	d94e      	bls.n	80086e6 <_dtoa_r+0x316>
 8008648:	4628      	mov	r0, r5
 800864a:	f001 f853 	bl	80096f4 <_Balloc>
 800864e:	9003      	str	r0, [sp, #12]
 8008650:	2800      	cmp	r0, #0
 8008652:	d14c      	bne.n	80086ee <_dtoa_r+0x31e>
 8008654:	4602      	mov	r2, r0
 8008656:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800865a:	4b17      	ldr	r3, [pc, #92]	; (80086b8 <_dtoa_r+0x2e8>)
 800865c:	e6cc      	b.n	80083f8 <_dtoa_r+0x28>
 800865e:	2301      	movs	r3, #1
 8008660:	e7de      	b.n	8008620 <_dtoa_r+0x250>
 8008662:	2300      	movs	r3, #0
 8008664:	930b      	str	r3, [sp, #44]	; 0x2c
 8008666:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008668:	eb0a 0903 	add.w	r9, sl, r3
 800866c:	f109 0301 	add.w	r3, r9, #1
 8008670:	2b01      	cmp	r3, #1
 8008672:	9308      	str	r3, [sp, #32]
 8008674:	bfb8      	it	lt
 8008676:	2301      	movlt	r3, #1
 8008678:	e7dd      	b.n	8008636 <_dtoa_r+0x266>
 800867a:	2301      	movs	r3, #1
 800867c:	e7f2      	b.n	8008664 <_dtoa_r+0x294>
 800867e:	bf00      	nop
 8008680:	636f4361 	.word	0x636f4361
 8008684:	3fd287a7 	.word	0x3fd287a7
 8008688:	8b60c8b3 	.word	0x8b60c8b3
 800868c:	3fc68a28 	.word	0x3fc68a28
 8008690:	509f79fb 	.word	0x509f79fb
 8008694:	3fd34413 	.word	0x3fd34413
 8008698:	0800b418 	.word	0x0800b418
 800869c:	0800b5d6 	.word	0x0800b5d6
 80086a0:	7ff00000 	.word	0x7ff00000
 80086a4:	0800b5d2 	.word	0x0800b5d2
 80086a8:	0800b5c9 	.word	0x0800b5c9
 80086ac:	0800b3a1 	.word	0x0800b3a1
 80086b0:	3ff80000 	.word	0x3ff80000
 80086b4:	0800b740 	.word	0x0800b740
 80086b8:	0800b631 	.word	0x0800b631
 80086bc:	2401      	movs	r4, #1
 80086be:	2300      	movs	r3, #0
 80086c0:	940b      	str	r4, [sp, #44]	; 0x2c
 80086c2:	9322      	str	r3, [sp, #136]	; 0x88
 80086c4:	f04f 39ff 	mov.w	r9, #4294967295
 80086c8:	2200      	movs	r2, #0
 80086ca:	2312      	movs	r3, #18
 80086cc:	f8cd 9020 	str.w	r9, [sp, #32]
 80086d0:	9223      	str	r2, [sp, #140]	; 0x8c
 80086d2:	e7b0      	b.n	8008636 <_dtoa_r+0x266>
 80086d4:	2301      	movs	r3, #1
 80086d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80086d8:	e7f4      	b.n	80086c4 <_dtoa_r+0x2f4>
 80086da:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 80086de:	464b      	mov	r3, r9
 80086e0:	f8cd 9020 	str.w	r9, [sp, #32]
 80086e4:	e7a7      	b.n	8008636 <_dtoa_r+0x266>
 80086e6:	3101      	adds	r1, #1
 80086e8:	6041      	str	r1, [r0, #4]
 80086ea:	0052      	lsls	r2, r2, #1
 80086ec:	e7a7      	b.n	800863e <_dtoa_r+0x26e>
 80086ee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80086f0:	9a03      	ldr	r2, [sp, #12]
 80086f2:	601a      	str	r2, [r3, #0]
 80086f4:	9b08      	ldr	r3, [sp, #32]
 80086f6:	2b0e      	cmp	r3, #14
 80086f8:	f200 80a8 	bhi.w	800884c <_dtoa_r+0x47c>
 80086fc:	2c00      	cmp	r4, #0
 80086fe:	f000 80a5 	beq.w	800884c <_dtoa_r+0x47c>
 8008702:	f1ba 0f00 	cmp.w	sl, #0
 8008706:	dd34      	ble.n	8008772 <_dtoa_r+0x3a2>
 8008708:	4a9a      	ldr	r2, [pc, #616]	; (8008974 <_dtoa_r+0x5a4>)
 800870a:	f00a 030f 	and.w	r3, sl, #15
 800870e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008712:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008716:	e9d3 3400 	ldrd	r3, r4, [r3]
 800871a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800871e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8008722:	d016      	beq.n	8008752 <_dtoa_r+0x382>
 8008724:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008728:	4b93      	ldr	r3, [pc, #588]	; (8008978 <_dtoa_r+0x5a8>)
 800872a:	2703      	movs	r7, #3
 800872c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008730:	f7f8 f806 	bl	8000740 <__aeabi_ddiv>
 8008734:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008738:	f004 040f 	and.w	r4, r4, #15
 800873c:	4e8e      	ldr	r6, [pc, #568]	; (8008978 <_dtoa_r+0x5a8>)
 800873e:	b954      	cbnz	r4, 8008756 <_dtoa_r+0x386>
 8008740:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008744:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008748:	f7f7 fffa 	bl	8000740 <__aeabi_ddiv>
 800874c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008750:	e029      	b.n	80087a6 <_dtoa_r+0x3d6>
 8008752:	2702      	movs	r7, #2
 8008754:	e7f2      	b.n	800873c <_dtoa_r+0x36c>
 8008756:	07e1      	lsls	r1, r4, #31
 8008758:	d508      	bpl.n	800876c <_dtoa_r+0x39c>
 800875a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800875e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008762:	f7f7 fec3 	bl	80004ec <__aeabi_dmul>
 8008766:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800876a:	3701      	adds	r7, #1
 800876c:	1064      	asrs	r4, r4, #1
 800876e:	3608      	adds	r6, #8
 8008770:	e7e5      	b.n	800873e <_dtoa_r+0x36e>
 8008772:	f000 80a5 	beq.w	80088c0 <_dtoa_r+0x4f0>
 8008776:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800877a:	f1ca 0400 	rsb	r4, sl, #0
 800877e:	4b7d      	ldr	r3, [pc, #500]	; (8008974 <_dtoa_r+0x5a4>)
 8008780:	f004 020f 	and.w	r2, r4, #15
 8008784:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800878c:	f7f7 feae 	bl	80004ec <__aeabi_dmul>
 8008790:	2702      	movs	r7, #2
 8008792:	2300      	movs	r3, #0
 8008794:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008798:	4e77      	ldr	r6, [pc, #476]	; (8008978 <_dtoa_r+0x5a8>)
 800879a:	1124      	asrs	r4, r4, #4
 800879c:	2c00      	cmp	r4, #0
 800879e:	f040 8084 	bne.w	80088aa <_dtoa_r+0x4da>
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d1d2      	bne.n	800874c <_dtoa_r+0x37c>
 80087a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	f000 808b 	beq.w	80088c4 <_dtoa_r+0x4f4>
 80087ae:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80087b2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80087b6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80087ba:	2200      	movs	r2, #0
 80087bc:	4b6f      	ldr	r3, [pc, #444]	; (800897c <_dtoa_r+0x5ac>)
 80087be:	f7f8 f907 	bl	80009d0 <__aeabi_dcmplt>
 80087c2:	2800      	cmp	r0, #0
 80087c4:	d07e      	beq.n	80088c4 <_dtoa_r+0x4f4>
 80087c6:	9b08      	ldr	r3, [sp, #32]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d07b      	beq.n	80088c4 <_dtoa_r+0x4f4>
 80087cc:	f1b9 0f00 	cmp.w	r9, #0
 80087d0:	dd38      	ble.n	8008844 <_dtoa_r+0x474>
 80087d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80087d6:	2200      	movs	r2, #0
 80087d8:	4b69      	ldr	r3, [pc, #420]	; (8008980 <_dtoa_r+0x5b0>)
 80087da:	f7f7 fe87 	bl	80004ec <__aeabi_dmul>
 80087de:	464c      	mov	r4, r9
 80087e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80087e4:	f10a 38ff 	add.w	r8, sl, #4294967295
 80087e8:	3701      	adds	r7, #1
 80087ea:	4638      	mov	r0, r7
 80087ec:	f7f7 fe14 	bl	8000418 <__aeabi_i2d>
 80087f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80087f4:	f7f7 fe7a 	bl	80004ec <__aeabi_dmul>
 80087f8:	2200      	movs	r2, #0
 80087fa:	4b62      	ldr	r3, [pc, #392]	; (8008984 <_dtoa_r+0x5b4>)
 80087fc:	f7f7 fcc0 	bl	8000180 <__adddf3>
 8008800:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8008804:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008808:	9611      	str	r6, [sp, #68]	; 0x44
 800880a:	2c00      	cmp	r4, #0
 800880c:	d15d      	bne.n	80088ca <_dtoa_r+0x4fa>
 800880e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008812:	2200      	movs	r2, #0
 8008814:	4b5c      	ldr	r3, [pc, #368]	; (8008988 <_dtoa_r+0x5b8>)
 8008816:	f7f7 fcb1 	bl	800017c <__aeabi_dsub>
 800881a:	4602      	mov	r2, r0
 800881c:	460b      	mov	r3, r1
 800881e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008822:	4633      	mov	r3, r6
 8008824:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008826:	f7f8 f8f1 	bl	8000a0c <__aeabi_dcmpgt>
 800882a:	2800      	cmp	r0, #0
 800882c:	f040 829c 	bne.w	8008d68 <_dtoa_r+0x998>
 8008830:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008834:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008836:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800883a:	f7f8 f8c9 	bl	80009d0 <__aeabi_dcmplt>
 800883e:	2800      	cmp	r0, #0
 8008840:	f040 8290 	bne.w	8008d64 <_dtoa_r+0x994>
 8008844:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8008848:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800884c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800884e:	2b00      	cmp	r3, #0
 8008850:	f2c0 8152 	blt.w	8008af8 <_dtoa_r+0x728>
 8008854:	f1ba 0f0e 	cmp.w	sl, #14
 8008858:	f300 814e 	bgt.w	8008af8 <_dtoa_r+0x728>
 800885c:	4b45      	ldr	r3, [pc, #276]	; (8008974 <_dtoa_r+0x5a4>)
 800885e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008862:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008866:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800886a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800886c:	2b00      	cmp	r3, #0
 800886e:	f280 80db 	bge.w	8008a28 <_dtoa_r+0x658>
 8008872:	9b08      	ldr	r3, [sp, #32]
 8008874:	2b00      	cmp	r3, #0
 8008876:	f300 80d7 	bgt.w	8008a28 <_dtoa_r+0x658>
 800887a:	f040 8272 	bne.w	8008d62 <_dtoa_r+0x992>
 800887e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008882:	2200      	movs	r2, #0
 8008884:	4b40      	ldr	r3, [pc, #256]	; (8008988 <_dtoa_r+0x5b8>)
 8008886:	f7f7 fe31 	bl	80004ec <__aeabi_dmul>
 800888a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800888e:	f7f8 f8b3 	bl	80009f8 <__aeabi_dcmpge>
 8008892:	9c08      	ldr	r4, [sp, #32]
 8008894:	4626      	mov	r6, r4
 8008896:	2800      	cmp	r0, #0
 8008898:	f040 8248 	bne.w	8008d2c <_dtoa_r+0x95c>
 800889c:	2331      	movs	r3, #49	; 0x31
 800889e:	9f03      	ldr	r7, [sp, #12]
 80088a0:	f10a 0a01 	add.w	sl, sl, #1
 80088a4:	f807 3b01 	strb.w	r3, [r7], #1
 80088a8:	e244      	b.n	8008d34 <_dtoa_r+0x964>
 80088aa:	07e2      	lsls	r2, r4, #31
 80088ac:	d505      	bpl.n	80088ba <_dtoa_r+0x4ea>
 80088ae:	e9d6 2300 	ldrd	r2, r3, [r6]
 80088b2:	f7f7 fe1b 	bl	80004ec <__aeabi_dmul>
 80088b6:	2301      	movs	r3, #1
 80088b8:	3701      	adds	r7, #1
 80088ba:	1064      	asrs	r4, r4, #1
 80088bc:	3608      	adds	r6, #8
 80088be:	e76d      	b.n	800879c <_dtoa_r+0x3cc>
 80088c0:	2702      	movs	r7, #2
 80088c2:	e770      	b.n	80087a6 <_dtoa_r+0x3d6>
 80088c4:	46d0      	mov	r8, sl
 80088c6:	9c08      	ldr	r4, [sp, #32]
 80088c8:	e78f      	b.n	80087ea <_dtoa_r+0x41a>
 80088ca:	9903      	ldr	r1, [sp, #12]
 80088cc:	4b29      	ldr	r3, [pc, #164]	; (8008974 <_dtoa_r+0x5a4>)
 80088ce:	4421      	add	r1, r4
 80088d0:	9112      	str	r1, [sp, #72]	; 0x48
 80088d2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80088d4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80088d8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80088dc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80088e0:	2900      	cmp	r1, #0
 80088e2:	d055      	beq.n	8008990 <_dtoa_r+0x5c0>
 80088e4:	2000      	movs	r0, #0
 80088e6:	4929      	ldr	r1, [pc, #164]	; (800898c <_dtoa_r+0x5bc>)
 80088e8:	f7f7 ff2a 	bl	8000740 <__aeabi_ddiv>
 80088ec:	463b      	mov	r3, r7
 80088ee:	4632      	mov	r2, r6
 80088f0:	f7f7 fc44 	bl	800017c <__aeabi_dsub>
 80088f4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80088f8:	9f03      	ldr	r7, [sp, #12]
 80088fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80088fe:	f7f8 f8a5 	bl	8000a4c <__aeabi_d2iz>
 8008902:	4604      	mov	r4, r0
 8008904:	f7f7 fd88 	bl	8000418 <__aeabi_i2d>
 8008908:	4602      	mov	r2, r0
 800890a:	460b      	mov	r3, r1
 800890c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008910:	f7f7 fc34 	bl	800017c <__aeabi_dsub>
 8008914:	4602      	mov	r2, r0
 8008916:	460b      	mov	r3, r1
 8008918:	3430      	adds	r4, #48	; 0x30
 800891a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800891e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008922:	f807 4b01 	strb.w	r4, [r7], #1
 8008926:	f7f8 f853 	bl	80009d0 <__aeabi_dcmplt>
 800892a:	2800      	cmp	r0, #0
 800892c:	d174      	bne.n	8008a18 <_dtoa_r+0x648>
 800892e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008932:	2000      	movs	r0, #0
 8008934:	4911      	ldr	r1, [pc, #68]	; (800897c <_dtoa_r+0x5ac>)
 8008936:	f7f7 fc21 	bl	800017c <__aeabi_dsub>
 800893a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800893e:	f7f8 f847 	bl	80009d0 <__aeabi_dcmplt>
 8008942:	2800      	cmp	r0, #0
 8008944:	f040 80b7 	bne.w	8008ab6 <_dtoa_r+0x6e6>
 8008948:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800894a:	429f      	cmp	r7, r3
 800894c:	f43f af7a 	beq.w	8008844 <_dtoa_r+0x474>
 8008950:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008954:	2200      	movs	r2, #0
 8008956:	4b0a      	ldr	r3, [pc, #40]	; (8008980 <_dtoa_r+0x5b0>)
 8008958:	f7f7 fdc8 	bl	80004ec <__aeabi_dmul>
 800895c:	2200      	movs	r2, #0
 800895e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008962:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008966:	4b06      	ldr	r3, [pc, #24]	; (8008980 <_dtoa_r+0x5b0>)
 8008968:	f7f7 fdc0 	bl	80004ec <__aeabi_dmul>
 800896c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008970:	e7c3      	b.n	80088fa <_dtoa_r+0x52a>
 8008972:	bf00      	nop
 8008974:	0800b740 	.word	0x0800b740
 8008978:	0800b718 	.word	0x0800b718
 800897c:	3ff00000 	.word	0x3ff00000
 8008980:	40240000 	.word	0x40240000
 8008984:	401c0000 	.word	0x401c0000
 8008988:	40140000 	.word	0x40140000
 800898c:	3fe00000 	.word	0x3fe00000
 8008990:	4630      	mov	r0, r6
 8008992:	4639      	mov	r1, r7
 8008994:	f7f7 fdaa 	bl	80004ec <__aeabi_dmul>
 8008998:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800899a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800899e:	9c03      	ldr	r4, [sp, #12]
 80089a0:	9314      	str	r3, [sp, #80]	; 0x50
 80089a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80089a6:	f7f8 f851 	bl	8000a4c <__aeabi_d2iz>
 80089aa:	9015      	str	r0, [sp, #84]	; 0x54
 80089ac:	f7f7 fd34 	bl	8000418 <__aeabi_i2d>
 80089b0:	4602      	mov	r2, r0
 80089b2:	460b      	mov	r3, r1
 80089b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80089b8:	f7f7 fbe0 	bl	800017c <__aeabi_dsub>
 80089bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80089be:	4606      	mov	r6, r0
 80089c0:	3330      	adds	r3, #48	; 0x30
 80089c2:	f804 3b01 	strb.w	r3, [r4], #1
 80089c6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80089c8:	460f      	mov	r7, r1
 80089ca:	429c      	cmp	r4, r3
 80089cc:	f04f 0200 	mov.w	r2, #0
 80089d0:	d124      	bne.n	8008a1c <_dtoa_r+0x64c>
 80089d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80089d6:	4bb0      	ldr	r3, [pc, #704]	; (8008c98 <_dtoa_r+0x8c8>)
 80089d8:	f7f7 fbd2 	bl	8000180 <__adddf3>
 80089dc:	4602      	mov	r2, r0
 80089de:	460b      	mov	r3, r1
 80089e0:	4630      	mov	r0, r6
 80089e2:	4639      	mov	r1, r7
 80089e4:	f7f8 f812 	bl	8000a0c <__aeabi_dcmpgt>
 80089e8:	2800      	cmp	r0, #0
 80089ea:	d163      	bne.n	8008ab4 <_dtoa_r+0x6e4>
 80089ec:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80089f0:	2000      	movs	r0, #0
 80089f2:	49a9      	ldr	r1, [pc, #676]	; (8008c98 <_dtoa_r+0x8c8>)
 80089f4:	f7f7 fbc2 	bl	800017c <__aeabi_dsub>
 80089f8:	4602      	mov	r2, r0
 80089fa:	460b      	mov	r3, r1
 80089fc:	4630      	mov	r0, r6
 80089fe:	4639      	mov	r1, r7
 8008a00:	f7f7 ffe6 	bl	80009d0 <__aeabi_dcmplt>
 8008a04:	2800      	cmp	r0, #0
 8008a06:	f43f af1d 	beq.w	8008844 <_dtoa_r+0x474>
 8008a0a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8008a0c:	1e7b      	subs	r3, r7, #1
 8008a0e:	9314      	str	r3, [sp, #80]	; 0x50
 8008a10:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8008a14:	2b30      	cmp	r3, #48	; 0x30
 8008a16:	d0f8      	beq.n	8008a0a <_dtoa_r+0x63a>
 8008a18:	46c2      	mov	sl, r8
 8008a1a:	e03b      	b.n	8008a94 <_dtoa_r+0x6c4>
 8008a1c:	4b9f      	ldr	r3, [pc, #636]	; (8008c9c <_dtoa_r+0x8cc>)
 8008a1e:	f7f7 fd65 	bl	80004ec <__aeabi_dmul>
 8008a22:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008a26:	e7bc      	b.n	80089a2 <_dtoa_r+0x5d2>
 8008a28:	9f03      	ldr	r7, [sp, #12]
 8008a2a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8008a2e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008a32:	4640      	mov	r0, r8
 8008a34:	4649      	mov	r1, r9
 8008a36:	f7f7 fe83 	bl	8000740 <__aeabi_ddiv>
 8008a3a:	f7f8 f807 	bl	8000a4c <__aeabi_d2iz>
 8008a3e:	4604      	mov	r4, r0
 8008a40:	f7f7 fcea 	bl	8000418 <__aeabi_i2d>
 8008a44:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008a48:	f7f7 fd50 	bl	80004ec <__aeabi_dmul>
 8008a4c:	4602      	mov	r2, r0
 8008a4e:	460b      	mov	r3, r1
 8008a50:	4640      	mov	r0, r8
 8008a52:	4649      	mov	r1, r9
 8008a54:	f7f7 fb92 	bl	800017c <__aeabi_dsub>
 8008a58:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8008a5c:	f807 6b01 	strb.w	r6, [r7], #1
 8008a60:	9e03      	ldr	r6, [sp, #12]
 8008a62:	f8dd c020 	ldr.w	ip, [sp, #32]
 8008a66:	1bbe      	subs	r6, r7, r6
 8008a68:	45b4      	cmp	ip, r6
 8008a6a:	4602      	mov	r2, r0
 8008a6c:	460b      	mov	r3, r1
 8008a6e:	d136      	bne.n	8008ade <_dtoa_r+0x70e>
 8008a70:	f7f7 fb86 	bl	8000180 <__adddf3>
 8008a74:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008a78:	4680      	mov	r8, r0
 8008a7a:	4689      	mov	r9, r1
 8008a7c:	f7f7 ffc6 	bl	8000a0c <__aeabi_dcmpgt>
 8008a80:	bb58      	cbnz	r0, 8008ada <_dtoa_r+0x70a>
 8008a82:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008a86:	4640      	mov	r0, r8
 8008a88:	4649      	mov	r1, r9
 8008a8a:	f7f7 ff97 	bl	80009bc <__aeabi_dcmpeq>
 8008a8e:	b108      	cbz	r0, 8008a94 <_dtoa_r+0x6c4>
 8008a90:	07e1      	lsls	r1, r4, #31
 8008a92:	d422      	bmi.n	8008ada <_dtoa_r+0x70a>
 8008a94:	4628      	mov	r0, r5
 8008a96:	4659      	mov	r1, fp
 8008a98:	f000 fe6c 	bl	8009774 <_Bfree>
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	703b      	strb	r3, [r7, #0]
 8008aa0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008aa2:	f10a 0001 	add.w	r0, sl, #1
 8008aa6:	6018      	str	r0, [r3, #0]
 8008aa8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	f43f acde 	beq.w	800846c <_dtoa_r+0x9c>
 8008ab0:	601f      	str	r7, [r3, #0]
 8008ab2:	e4db      	b.n	800846c <_dtoa_r+0x9c>
 8008ab4:	4627      	mov	r7, r4
 8008ab6:	463b      	mov	r3, r7
 8008ab8:	461f      	mov	r7, r3
 8008aba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008abe:	2a39      	cmp	r2, #57	; 0x39
 8008ac0:	d107      	bne.n	8008ad2 <_dtoa_r+0x702>
 8008ac2:	9a03      	ldr	r2, [sp, #12]
 8008ac4:	429a      	cmp	r2, r3
 8008ac6:	d1f7      	bne.n	8008ab8 <_dtoa_r+0x6e8>
 8008ac8:	2230      	movs	r2, #48	; 0x30
 8008aca:	9903      	ldr	r1, [sp, #12]
 8008acc:	f108 0801 	add.w	r8, r8, #1
 8008ad0:	700a      	strb	r2, [r1, #0]
 8008ad2:	781a      	ldrb	r2, [r3, #0]
 8008ad4:	3201      	adds	r2, #1
 8008ad6:	701a      	strb	r2, [r3, #0]
 8008ad8:	e79e      	b.n	8008a18 <_dtoa_r+0x648>
 8008ada:	46d0      	mov	r8, sl
 8008adc:	e7eb      	b.n	8008ab6 <_dtoa_r+0x6e6>
 8008ade:	2200      	movs	r2, #0
 8008ae0:	4b6e      	ldr	r3, [pc, #440]	; (8008c9c <_dtoa_r+0x8cc>)
 8008ae2:	f7f7 fd03 	bl	80004ec <__aeabi_dmul>
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	2300      	movs	r3, #0
 8008aea:	4680      	mov	r8, r0
 8008aec:	4689      	mov	r9, r1
 8008aee:	f7f7 ff65 	bl	80009bc <__aeabi_dcmpeq>
 8008af2:	2800      	cmp	r0, #0
 8008af4:	d09b      	beq.n	8008a2e <_dtoa_r+0x65e>
 8008af6:	e7cd      	b.n	8008a94 <_dtoa_r+0x6c4>
 8008af8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008afa:	2a00      	cmp	r2, #0
 8008afc:	f000 80d0 	beq.w	8008ca0 <_dtoa_r+0x8d0>
 8008b00:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008b02:	2a01      	cmp	r2, #1
 8008b04:	f300 80ae 	bgt.w	8008c64 <_dtoa_r+0x894>
 8008b08:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008b0a:	2a00      	cmp	r2, #0
 8008b0c:	f000 80a6 	beq.w	8008c5c <_dtoa_r+0x88c>
 8008b10:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008b14:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008b16:	9f06      	ldr	r7, [sp, #24]
 8008b18:	9a06      	ldr	r2, [sp, #24]
 8008b1a:	2101      	movs	r1, #1
 8008b1c:	441a      	add	r2, r3
 8008b1e:	9206      	str	r2, [sp, #24]
 8008b20:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b22:	4628      	mov	r0, r5
 8008b24:	441a      	add	r2, r3
 8008b26:	9209      	str	r2, [sp, #36]	; 0x24
 8008b28:	f000 ff24 	bl	8009974 <__i2b>
 8008b2c:	4606      	mov	r6, r0
 8008b2e:	2f00      	cmp	r7, #0
 8008b30:	dd0c      	ble.n	8008b4c <_dtoa_r+0x77c>
 8008b32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	dd09      	ble.n	8008b4c <_dtoa_r+0x77c>
 8008b38:	42bb      	cmp	r3, r7
 8008b3a:	bfa8      	it	ge
 8008b3c:	463b      	movge	r3, r7
 8008b3e:	9a06      	ldr	r2, [sp, #24]
 8008b40:	1aff      	subs	r7, r7, r3
 8008b42:	1ad2      	subs	r2, r2, r3
 8008b44:	9206      	str	r2, [sp, #24]
 8008b46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b48:	1ad3      	subs	r3, r2, r3
 8008b4a:	9309      	str	r3, [sp, #36]	; 0x24
 8008b4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b4e:	b1f3      	cbz	r3, 8008b8e <_dtoa_r+0x7be>
 8008b50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	f000 80a8 	beq.w	8008ca8 <_dtoa_r+0x8d8>
 8008b58:	2c00      	cmp	r4, #0
 8008b5a:	dd10      	ble.n	8008b7e <_dtoa_r+0x7ae>
 8008b5c:	4631      	mov	r1, r6
 8008b5e:	4622      	mov	r2, r4
 8008b60:	4628      	mov	r0, r5
 8008b62:	f000 ffc5 	bl	8009af0 <__pow5mult>
 8008b66:	465a      	mov	r2, fp
 8008b68:	4601      	mov	r1, r0
 8008b6a:	4606      	mov	r6, r0
 8008b6c:	4628      	mov	r0, r5
 8008b6e:	f000 ff17 	bl	80099a0 <__multiply>
 8008b72:	4680      	mov	r8, r0
 8008b74:	4659      	mov	r1, fp
 8008b76:	4628      	mov	r0, r5
 8008b78:	f000 fdfc 	bl	8009774 <_Bfree>
 8008b7c:	46c3      	mov	fp, r8
 8008b7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b80:	1b1a      	subs	r2, r3, r4
 8008b82:	d004      	beq.n	8008b8e <_dtoa_r+0x7be>
 8008b84:	4659      	mov	r1, fp
 8008b86:	4628      	mov	r0, r5
 8008b88:	f000 ffb2 	bl	8009af0 <__pow5mult>
 8008b8c:	4683      	mov	fp, r0
 8008b8e:	2101      	movs	r1, #1
 8008b90:	4628      	mov	r0, r5
 8008b92:	f000 feef 	bl	8009974 <__i2b>
 8008b96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008b98:	4604      	mov	r4, r0
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	f340 8086 	ble.w	8008cac <_dtoa_r+0x8dc>
 8008ba0:	461a      	mov	r2, r3
 8008ba2:	4601      	mov	r1, r0
 8008ba4:	4628      	mov	r0, r5
 8008ba6:	f000 ffa3 	bl	8009af0 <__pow5mult>
 8008baa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008bac:	4604      	mov	r4, r0
 8008bae:	2b01      	cmp	r3, #1
 8008bb0:	dd7f      	ble.n	8008cb2 <_dtoa_r+0x8e2>
 8008bb2:	f04f 0800 	mov.w	r8, #0
 8008bb6:	6923      	ldr	r3, [r4, #16]
 8008bb8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008bbc:	6918      	ldr	r0, [r3, #16]
 8008bbe:	f000 fe8b 	bl	80098d8 <__hi0bits>
 8008bc2:	f1c0 0020 	rsb	r0, r0, #32
 8008bc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bc8:	4418      	add	r0, r3
 8008bca:	f010 001f 	ands.w	r0, r0, #31
 8008bce:	f000 8092 	beq.w	8008cf6 <_dtoa_r+0x926>
 8008bd2:	f1c0 0320 	rsb	r3, r0, #32
 8008bd6:	2b04      	cmp	r3, #4
 8008bd8:	f340 808a 	ble.w	8008cf0 <_dtoa_r+0x920>
 8008bdc:	f1c0 001c 	rsb	r0, r0, #28
 8008be0:	9b06      	ldr	r3, [sp, #24]
 8008be2:	4407      	add	r7, r0
 8008be4:	4403      	add	r3, r0
 8008be6:	9306      	str	r3, [sp, #24]
 8008be8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bea:	4403      	add	r3, r0
 8008bec:	9309      	str	r3, [sp, #36]	; 0x24
 8008bee:	9b06      	ldr	r3, [sp, #24]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	dd05      	ble.n	8008c00 <_dtoa_r+0x830>
 8008bf4:	4659      	mov	r1, fp
 8008bf6:	461a      	mov	r2, r3
 8008bf8:	4628      	mov	r0, r5
 8008bfa:	f000 ffd3 	bl	8009ba4 <__lshift>
 8008bfe:	4683      	mov	fp, r0
 8008c00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	dd05      	ble.n	8008c12 <_dtoa_r+0x842>
 8008c06:	4621      	mov	r1, r4
 8008c08:	461a      	mov	r2, r3
 8008c0a:	4628      	mov	r0, r5
 8008c0c:	f000 ffca 	bl	8009ba4 <__lshift>
 8008c10:	4604      	mov	r4, r0
 8008c12:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d070      	beq.n	8008cfa <_dtoa_r+0x92a>
 8008c18:	4621      	mov	r1, r4
 8008c1a:	4658      	mov	r0, fp
 8008c1c:	f001 f832 	bl	8009c84 <__mcmp>
 8008c20:	2800      	cmp	r0, #0
 8008c22:	da6a      	bge.n	8008cfa <_dtoa_r+0x92a>
 8008c24:	2300      	movs	r3, #0
 8008c26:	4659      	mov	r1, fp
 8008c28:	220a      	movs	r2, #10
 8008c2a:	4628      	mov	r0, r5
 8008c2c:	f000 fdc4 	bl	80097b8 <__multadd>
 8008c30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c32:	4683      	mov	fp, r0
 8008c34:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	f000 8194 	beq.w	8008f66 <_dtoa_r+0xb96>
 8008c3e:	4631      	mov	r1, r6
 8008c40:	2300      	movs	r3, #0
 8008c42:	220a      	movs	r2, #10
 8008c44:	4628      	mov	r0, r5
 8008c46:	f000 fdb7 	bl	80097b8 <__multadd>
 8008c4a:	f1b9 0f00 	cmp.w	r9, #0
 8008c4e:	4606      	mov	r6, r0
 8008c50:	f300 8093 	bgt.w	8008d7a <_dtoa_r+0x9aa>
 8008c54:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008c56:	2b02      	cmp	r3, #2
 8008c58:	dc57      	bgt.n	8008d0a <_dtoa_r+0x93a>
 8008c5a:	e08e      	b.n	8008d7a <_dtoa_r+0x9aa>
 8008c5c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008c5e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008c62:	e757      	b.n	8008b14 <_dtoa_r+0x744>
 8008c64:	9b08      	ldr	r3, [sp, #32]
 8008c66:	1e5c      	subs	r4, r3, #1
 8008c68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c6a:	42a3      	cmp	r3, r4
 8008c6c:	bfb7      	itett	lt
 8008c6e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008c70:	1b1c      	subge	r4, r3, r4
 8008c72:	1ae2      	sublt	r2, r4, r3
 8008c74:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8008c76:	bfbe      	ittt	lt
 8008c78:	940a      	strlt	r4, [sp, #40]	; 0x28
 8008c7a:	189b      	addlt	r3, r3, r2
 8008c7c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8008c7e:	9b08      	ldr	r3, [sp, #32]
 8008c80:	bfb8      	it	lt
 8008c82:	2400      	movlt	r4, #0
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	bfbb      	ittet	lt
 8008c88:	9b06      	ldrlt	r3, [sp, #24]
 8008c8a:	9a08      	ldrlt	r2, [sp, #32]
 8008c8c:	9f06      	ldrge	r7, [sp, #24]
 8008c8e:	1a9f      	sublt	r7, r3, r2
 8008c90:	bfac      	ite	ge
 8008c92:	9b08      	ldrge	r3, [sp, #32]
 8008c94:	2300      	movlt	r3, #0
 8008c96:	e73f      	b.n	8008b18 <_dtoa_r+0x748>
 8008c98:	3fe00000 	.word	0x3fe00000
 8008c9c:	40240000 	.word	0x40240000
 8008ca0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008ca2:	9f06      	ldr	r7, [sp, #24]
 8008ca4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8008ca6:	e742      	b.n	8008b2e <_dtoa_r+0x75e>
 8008ca8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008caa:	e76b      	b.n	8008b84 <_dtoa_r+0x7b4>
 8008cac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008cae:	2b01      	cmp	r3, #1
 8008cb0:	dc19      	bgt.n	8008ce6 <_dtoa_r+0x916>
 8008cb2:	9b04      	ldr	r3, [sp, #16]
 8008cb4:	b9bb      	cbnz	r3, 8008ce6 <_dtoa_r+0x916>
 8008cb6:	9b05      	ldr	r3, [sp, #20]
 8008cb8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008cbc:	b99b      	cbnz	r3, 8008ce6 <_dtoa_r+0x916>
 8008cbe:	9b05      	ldr	r3, [sp, #20]
 8008cc0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008cc4:	0d1b      	lsrs	r3, r3, #20
 8008cc6:	051b      	lsls	r3, r3, #20
 8008cc8:	b183      	cbz	r3, 8008cec <_dtoa_r+0x91c>
 8008cca:	f04f 0801 	mov.w	r8, #1
 8008cce:	9b06      	ldr	r3, [sp, #24]
 8008cd0:	3301      	adds	r3, #1
 8008cd2:	9306      	str	r3, [sp, #24]
 8008cd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cd6:	3301      	adds	r3, #1
 8008cd8:	9309      	str	r3, [sp, #36]	; 0x24
 8008cda:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	f47f af6a 	bne.w	8008bb6 <_dtoa_r+0x7e6>
 8008ce2:	2001      	movs	r0, #1
 8008ce4:	e76f      	b.n	8008bc6 <_dtoa_r+0x7f6>
 8008ce6:	f04f 0800 	mov.w	r8, #0
 8008cea:	e7f6      	b.n	8008cda <_dtoa_r+0x90a>
 8008cec:	4698      	mov	r8, r3
 8008cee:	e7f4      	b.n	8008cda <_dtoa_r+0x90a>
 8008cf0:	f43f af7d 	beq.w	8008bee <_dtoa_r+0x81e>
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	301c      	adds	r0, #28
 8008cf8:	e772      	b.n	8008be0 <_dtoa_r+0x810>
 8008cfa:	9b08      	ldr	r3, [sp, #32]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	dc36      	bgt.n	8008d6e <_dtoa_r+0x99e>
 8008d00:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008d02:	2b02      	cmp	r3, #2
 8008d04:	dd33      	ble.n	8008d6e <_dtoa_r+0x99e>
 8008d06:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008d0a:	f1b9 0f00 	cmp.w	r9, #0
 8008d0e:	d10d      	bne.n	8008d2c <_dtoa_r+0x95c>
 8008d10:	4621      	mov	r1, r4
 8008d12:	464b      	mov	r3, r9
 8008d14:	2205      	movs	r2, #5
 8008d16:	4628      	mov	r0, r5
 8008d18:	f000 fd4e 	bl	80097b8 <__multadd>
 8008d1c:	4601      	mov	r1, r0
 8008d1e:	4604      	mov	r4, r0
 8008d20:	4658      	mov	r0, fp
 8008d22:	f000 ffaf 	bl	8009c84 <__mcmp>
 8008d26:	2800      	cmp	r0, #0
 8008d28:	f73f adb8 	bgt.w	800889c <_dtoa_r+0x4cc>
 8008d2c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008d2e:	9f03      	ldr	r7, [sp, #12]
 8008d30:	ea6f 0a03 	mvn.w	sl, r3
 8008d34:	f04f 0800 	mov.w	r8, #0
 8008d38:	4621      	mov	r1, r4
 8008d3a:	4628      	mov	r0, r5
 8008d3c:	f000 fd1a 	bl	8009774 <_Bfree>
 8008d40:	2e00      	cmp	r6, #0
 8008d42:	f43f aea7 	beq.w	8008a94 <_dtoa_r+0x6c4>
 8008d46:	f1b8 0f00 	cmp.w	r8, #0
 8008d4a:	d005      	beq.n	8008d58 <_dtoa_r+0x988>
 8008d4c:	45b0      	cmp	r8, r6
 8008d4e:	d003      	beq.n	8008d58 <_dtoa_r+0x988>
 8008d50:	4641      	mov	r1, r8
 8008d52:	4628      	mov	r0, r5
 8008d54:	f000 fd0e 	bl	8009774 <_Bfree>
 8008d58:	4631      	mov	r1, r6
 8008d5a:	4628      	mov	r0, r5
 8008d5c:	f000 fd0a 	bl	8009774 <_Bfree>
 8008d60:	e698      	b.n	8008a94 <_dtoa_r+0x6c4>
 8008d62:	2400      	movs	r4, #0
 8008d64:	4626      	mov	r6, r4
 8008d66:	e7e1      	b.n	8008d2c <_dtoa_r+0x95c>
 8008d68:	46c2      	mov	sl, r8
 8008d6a:	4626      	mov	r6, r4
 8008d6c:	e596      	b.n	800889c <_dtoa_r+0x4cc>
 8008d6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d70:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	f000 80fd 	beq.w	8008f74 <_dtoa_r+0xba4>
 8008d7a:	2f00      	cmp	r7, #0
 8008d7c:	dd05      	ble.n	8008d8a <_dtoa_r+0x9ba>
 8008d7e:	4631      	mov	r1, r6
 8008d80:	463a      	mov	r2, r7
 8008d82:	4628      	mov	r0, r5
 8008d84:	f000 ff0e 	bl	8009ba4 <__lshift>
 8008d88:	4606      	mov	r6, r0
 8008d8a:	f1b8 0f00 	cmp.w	r8, #0
 8008d8e:	d05c      	beq.n	8008e4a <_dtoa_r+0xa7a>
 8008d90:	4628      	mov	r0, r5
 8008d92:	6871      	ldr	r1, [r6, #4]
 8008d94:	f000 fcae 	bl	80096f4 <_Balloc>
 8008d98:	4607      	mov	r7, r0
 8008d9a:	b928      	cbnz	r0, 8008da8 <_dtoa_r+0x9d8>
 8008d9c:	4602      	mov	r2, r0
 8008d9e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008da2:	4b7f      	ldr	r3, [pc, #508]	; (8008fa0 <_dtoa_r+0xbd0>)
 8008da4:	f7ff bb28 	b.w	80083f8 <_dtoa_r+0x28>
 8008da8:	6932      	ldr	r2, [r6, #16]
 8008daa:	f106 010c 	add.w	r1, r6, #12
 8008dae:	3202      	adds	r2, #2
 8008db0:	0092      	lsls	r2, r2, #2
 8008db2:	300c      	adds	r0, #12
 8008db4:	f7fd febc 	bl	8006b30 <memcpy>
 8008db8:	2201      	movs	r2, #1
 8008dba:	4639      	mov	r1, r7
 8008dbc:	4628      	mov	r0, r5
 8008dbe:	f000 fef1 	bl	8009ba4 <__lshift>
 8008dc2:	46b0      	mov	r8, r6
 8008dc4:	4606      	mov	r6, r0
 8008dc6:	9b03      	ldr	r3, [sp, #12]
 8008dc8:	3301      	adds	r3, #1
 8008dca:	9308      	str	r3, [sp, #32]
 8008dcc:	9b03      	ldr	r3, [sp, #12]
 8008dce:	444b      	add	r3, r9
 8008dd0:	930a      	str	r3, [sp, #40]	; 0x28
 8008dd2:	9b04      	ldr	r3, [sp, #16]
 8008dd4:	f003 0301 	and.w	r3, r3, #1
 8008dd8:	9309      	str	r3, [sp, #36]	; 0x24
 8008dda:	9b08      	ldr	r3, [sp, #32]
 8008ddc:	4621      	mov	r1, r4
 8008dde:	3b01      	subs	r3, #1
 8008de0:	4658      	mov	r0, fp
 8008de2:	9304      	str	r3, [sp, #16]
 8008de4:	f7ff fa68 	bl	80082b8 <quorem>
 8008de8:	4603      	mov	r3, r0
 8008dea:	4641      	mov	r1, r8
 8008dec:	3330      	adds	r3, #48	; 0x30
 8008dee:	9006      	str	r0, [sp, #24]
 8008df0:	4658      	mov	r0, fp
 8008df2:	930b      	str	r3, [sp, #44]	; 0x2c
 8008df4:	f000 ff46 	bl	8009c84 <__mcmp>
 8008df8:	4632      	mov	r2, r6
 8008dfa:	4681      	mov	r9, r0
 8008dfc:	4621      	mov	r1, r4
 8008dfe:	4628      	mov	r0, r5
 8008e00:	f000 ff5c 	bl	8009cbc <__mdiff>
 8008e04:	68c2      	ldr	r2, [r0, #12]
 8008e06:	4607      	mov	r7, r0
 8008e08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e0a:	bb02      	cbnz	r2, 8008e4e <_dtoa_r+0xa7e>
 8008e0c:	4601      	mov	r1, r0
 8008e0e:	4658      	mov	r0, fp
 8008e10:	f000 ff38 	bl	8009c84 <__mcmp>
 8008e14:	4602      	mov	r2, r0
 8008e16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e18:	4639      	mov	r1, r7
 8008e1a:	4628      	mov	r0, r5
 8008e1c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8008e20:	f000 fca8 	bl	8009774 <_Bfree>
 8008e24:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008e26:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008e28:	9f08      	ldr	r7, [sp, #32]
 8008e2a:	ea43 0102 	orr.w	r1, r3, r2
 8008e2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e30:	430b      	orrs	r3, r1
 8008e32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e34:	d10d      	bne.n	8008e52 <_dtoa_r+0xa82>
 8008e36:	2b39      	cmp	r3, #57	; 0x39
 8008e38:	d029      	beq.n	8008e8e <_dtoa_r+0xabe>
 8008e3a:	f1b9 0f00 	cmp.w	r9, #0
 8008e3e:	dd01      	ble.n	8008e44 <_dtoa_r+0xa74>
 8008e40:	9b06      	ldr	r3, [sp, #24]
 8008e42:	3331      	adds	r3, #49	; 0x31
 8008e44:	9a04      	ldr	r2, [sp, #16]
 8008e46:	7013      	strb	r3, [r2, #0]
 8008e48:	e776      	b.n	8008d38 <_dtoa_r+0x968>
 8008e4a:	4630      	mov	r0, r6
 8008e4c:	e7b9      	b.n	8008dc2 <_dtoa_r+0x9f2>
 8008e4e:	2201      	movs	r2, #1
 8008e50:	e7e2      	b.n	8008e18 <_dtoa_r+0xa48>
 8008e52:	f1b9 0f00 	cmp.w	r9, #0
 8008e56:	db06      	blt.n	8008e66 <_dtoa_r+0xa96>
 8008e58:	9922      	ldr	r1, [sp, #136]	; 0x88
 8008e5a:	ea41 0909 	orr.w	r9, r1, r9
 8008e5e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008e60:	ea59 0101 	orrs.w	r1, r9, r1
 8008e64:	d120      	bne.n	8008ea8 <_dtoa_r+0xad8>
 8008e66:	2a00      	cmp	r2, #0
 8008e68:	ddec      	ble.n	8008e44 <_dtoa_r+0xa74>
 8008e6a:	4659      	mov	r1, fp
 8008e6c:	2201      	movs	r2, #1
 8008e6e:	4628      	mov	r0, r5
 8008e70:	9308      	str	r3, [sp, #32]
 8008e72:	f000 fe97 	bl	8009ba4 <__lshift>
 8008e76:	4621      	mov	r1, r4
 8008e78:	4683      	mov	fp, r0
 8008e7a:	f000 ff03 	bl	8009c84 <__mcmp>
 8008e7e:	2800      	cmp	r0, #0
 8008e80:	9b08      	ldr	r3, [sp, #32]
 8008e82:	dc02      	bgt.n	8008e8a <_dtoa_r+0xaba>
 8008e84:	d1de      	bne.n	8008e44 <_dtoa_r+0xa74>
 8008e86:	07da      	lsls	r2, r3, #31
 8008e88:	d5dc      	bpl.n	8008e44 <_dtoa_r+0xa74>
 8008e8a:	2b39      	cmp	r3, #57	; 0x39
 8008e8c:	d1d8      	bne.n	8008e40 <_dtoa_r+0xa70>
 8008e8e:	2339      	movs	r3, #57	; 0x39
 8008e90:	9a04      	ldr	r2, [sp, #16]
 8008e92:	7013      	strb	r3, [r2, #0]
 8008e94:	463b      	mov	r3, r7
 8008e96:	461f      	mov	r7, r3
 8008e98:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8008e9c:	3b01      	subs	r3, #1
 8008e9e:	2a39      	cmp	r2, #57	; 0x39
 8008ea0:	d050      	beq.n	8008f44 <_dtoa_r+0xb74>
 8008ea2:	3201      	adds	r2, #1
 8008ea4:	701a      	strb	r2, [r3, #0]
 8008ea6:	e747      	b.n	8008d38 <_dtoa_r+0x968>
 8008ea8:	2a00      	cmp	r2, #0
 8008eaa:	dd03      	ble.n	8008eb4 <_dtoa_r+0xae4>
 8008eac:	2b39      	cmp	r3, #57	; 0x39
 8008eae:	d0ee      	beq.n	8008e8e <_dtoa_r+0xabe>
 8008eb0:	3301      	adds	r3, #1
 8008eb2:	e7c7      	b.n	8008e44 <_dtoa_r+0xa74>
 8008eb4:	9a08      	ldr	r2, [sp, #32]
 8008eb6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008eb8:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008ebc:	428a      	cmp	r2, r1
 8008ebe:	d02a      	beq.n	8008f16 <_dtoa_r+0xb46>
 8008ec0:	4659      	mov	r1, fp
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	220a      	movs	r2, #10
 8008ec6:	4628      	mov	r0, r5
 8008ec8:	f000 fc76 	bl	80097b8 <__multadd>
 8008ecc:	45b0      	cmp	r8, r6
 8008ece:	4683      	mov	fp, r0
 8008ed0:	f04f 0300 	mov.w	r3, #0
 8008ed4:	f04f 020a 	mov.w	r2, #10
 8008ed8:	4641      	mov	r1, r8
 8008eda:	4628      	mov	r0, r5
 8008edc:	d107      	bne.n	8008eee <_dtoa_r+0xb1e>
 8008ede:	f000 fc6b 	bl	80097b8 <__multadd>
 8008ee2:	4680      	mov	r8, r0
 8008ee4:	4606      	mov	r6, r0
 8008ee6:	9b08      	ldr	r3, [sp, #32]
 8008ee8:	3301      	adds	r3, #1
 8008eea:	9308      	str	r3, [sp, #32]
 8008eec:	e775      	b.n	8008dda <_dtoa_r+0xa0a>
 8008eee:	f000 fc63 	bl	80097b8 <__multadd>
 8008ef2:	4631      	mov	r1, r6
 8008ef4:	4680      	mov	r8, r0
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	220a      	movs	r2, #10
 8008efa:	4628      	mov	r0, r5
 8008efc:	f000 fc5c 	bl	80097b8 <__multadd>
 8008f00:	4606      	mov	r6, r0
 8008f02:	e7f0      	b.n	8008ee6 <_dtoa_r+0xb16>
 8008f04:	f1b9 0f00 	cmp.w	r9, #0
 8008f08:	bfcc      	ite	gt
 8008f0a:	464f      	movgt	r7, r9
 8008f0c:	2701      	movle	r7, #1
 8008f0e:	f04f 0800 	mov.w	r8, #0
 8008f12:	9a03      	ldr	r2, [sp, #12]
 8008f14:	4417      	add	r7, r2
 8008f16:	4659      	mov	r1, fp
 8008f18:	2201      	movs	r2, #1
 8008f1a:	4628      	mov	r0, r5
 8008f1c:	9308      	str	r3, [sp, #32]
 8008f1e:	f000 fe41 	bl	8009ba4 <__lshift>
 8008f22:	4621      	mov	r1, r4
 8008f24:	4683      	mov	fp, r0
 8008f26:	f000 fead 	bl	8009c84 <__mcmp>
 8008f2a:	2800      	cmp	r0, #0
 8008f2c:	dcb2      	bgt.n	8008e94 <_dtoa_r+0xac4>
 8008f2e:	d102      	bne.n	8008f36 <_dtoa_r+0xb66>
 8008f30:	9b08      	ldr	r3, [sp, #32]
 8008f32:	07db      	lsls	r3, r3, #31
 8008f34:	d4ae      	bmi.n	8008e94 <_dtoa_r+0xac4>
 8008f36:	463b      	mov	r3, r7
 8008f38:	461f      	mov	r7, r3
 8008f3a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008f3e:	2a30      	cmp	r2, #48	; 0x30
 8008f40:	d0fa      	beq.n	8008f38 <_dtoa_r+0xb68>
 8008f42:	e6f9      	b.n	8008d38 <_dtoa_r+0x968>
 8008f44:	9a03      	ldr	r2, [sp, #12]
 8008f46:	429a      	cmp	r2, r3
 8008f48:	d1a5      	bne.n	8008e96 <_dtoa_r+0xac6>
 8008f4a:	2331      	movs	r3, #49	; 0x31
 8008f4c:	f10a 0a01 	add.w	sl, sl, #1
 8008f50:	e779      	b.n	8008e46 <_dtoa_r+0xa76>
 8008f52:	4b14      	ldr	r3, [pc, #80]	; (8008fa4 <_dtoa_r+0xbd4>)
 8008f54:	f7ff baa8 	b.w	80084a8 <_dtoa_r+0xd8>
 8008f58:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	f47f aa81 	bne.w	8008462 <_dtoa_r+0x92>
 8008f60:	4b11      	ldr	r3, [pc, #68]	; (8008fa8 <_dtoa_r+0xbd8>)
 8008f62:	f7ff baa1 	b.w	80084a8 <_dtoa_r+0xd8>
 8008f66:	f1b9 0f00 	cmp.w	r9, #0
 8008f6a:	dc03      	bgt.n	8008f74 <_dtoa_r+0xba4>
 8008f6c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008f6e:	2b02      	cmp	r3, #2
 8008f70:	f73f aecb 	bgt.w	8008d0a <_dtoa_r+0x93a>
 8008f74:	9f03      	ldr	r7, [sp, #12]
 8008f76:	4621      	mov	r1, r4
 8008f78:	4658      	mov	r0, fp
 8008f7a:	f7ff f99d 	bl	80082b8 <quorem>
 8008f7e:	9a03      	ldr	r2, [sp, #12]
 8008f80:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008f84:	f807 3b01 	strb.w	r3, [r7], #1
 8008f88:	1aba      	subs	r2, r7, r2
 8008f8a:	4591      	cmp	r9, r2
 8008f8c:	ddba      	ble.n	8008f04 <_dtoa_r+0xb34>
 8008f8e:	4659      	mov	r1, fp
 8008f90:	2300      	movs	r3, #0
 8008f92:	220a      	movs	r2, #10
 8008f94:	4628      	mov	r0, r5
 8008f96:	f000 fc0f 	bl	80097b8 <__multadd>
 8008f9a:	4683      	mov	fp, r0
 8008f9c:	e7eb      	b.n	8008f76 <_dtoa_r+0xba6>
 8008f9e:	bf00      	nop
 8008fa0:	0800b631 	.word	0x0800b631
 8008fa4:	0800b3a0 	.word	0x0800b3a0
 8008fa8:	0800b5c9 	.word	0x0800b5c9

08008fac <fiprintf>:
 8008fac:	b40e      	push	{r1, r2, r3}
 8008fae:	b503      	push	{r0, r1, lr}
 8008fb0:	4601      	mov	r1, r0
 8008fb2:	ab03      	add	r3, sp, #12
 8008fb4:	4805      	ldr	r0, [pc, #20]	; (8008fcc <fiprintf+0x20>)
 8008fb6:	f853 2b04 	ldr.w	r2, [r3], #4
 8008fba:	6800      	ldr	r0, [r0, #0]
 8008fbc:	9301      	str	r3, [sp, #4]
 8008fbe:	f001 fac5 	bl	800a54c <_vfiprintf_r>
 8008fc2:	b002      	add	sp, #8
 8008fc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8008fc8:	b003      	add	sp, #12
 8008fca:	4770      	bx	lr
 8008fcc:	20000190 	.word	0x20000190

08008fd0 <rshift>:
 8008fd0:	6903      	ldr	r3, [r0, #16]
 8008fd2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008fd6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008fda:	f100 0414 	add.w	r4, r0, #20
 8008fde:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008fe2:	dd46      	ble.n	8009072 <rshift+0xa2>
 8008fe4:	f011 011f 	ands.w	r1, r1, #31
 8008fe8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008fec:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008ff0:	d10c      	bne.n	800900c <rshift+0x3c>
 8008ff2:	4629      	mov	r1, r5
 8008ff4:	f100 0710 	add.w	r7, r0, #16
 8008ff8:	42b1      	cmp	r1, r6
 8008ffa:	d335      	bcc.n	8009068 <rshift+0x98>
 8008ffc:	1a9b      	subs	r3, r3, r2
 8008ffe:	009b      	lsls	r3, r3, #2
 8009000:	1eea      	subs	r2, r5, #3
 8009002:	4296      	cmp	r6, r2
 8009004:	bf38      	it	cc
 8009006:	2300      	movcc	r3, #0
 8009008:	4423      	add	r3, r4
 800900a:	e015      	b.n	8009038 <rshift+0x68>
 800900c:	46a1      	mov	r9, r4
 800900e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009012:	f1c1 0820 	rsb	r8, r1, #32
 8009016:	40cf      	lsrs	r7, r1
 8009018:	f105 0e04 	add.w	lr, r5, #4
 800901c:	4576      	cmp	r6, lr
 800901e:	46f4      	mov	ip, lr
 8009020:	d816      	bhi.n	8009050 <rshift+0x80>
 8009022:	1a9a      	subs	r2, r3, r2
 8009024:	0092      	lsls	r2, r2, #2
 8009026:	3a04      	subs	r2, #4
 8009028:	3501      	adds	r5, #1
 800902a:	42ae      	cmp	r6, r5
 800902c:	bf38      	it	cc
 800902e:	2200      	movcc	r2, #0
 8009030:	18a3      	adds	r3, r4, r2
 8009032:	50a7      	str	r7, [r4, r2]
 8009034:	b107      	cbz	r7, 8009038 <rshift+0x68>
 8009036:	3304      	adds	r3, #4
 8009038:	42a3      	cmp	r3, r4
 800903a:	eba3 0204 	sub.w	r2, r3, r4
 800903e:	bf08      	it	eq
 8009040:	2300      	moveq	r3, #0
 8009042:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009046:	6102      	str	r2, [r0, #16]
 8009048:	bf08      	it	eq
 800904a:	6143      	streq	r3, [r0, #20]
 800904c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009050:	f8dc c000 	ldr.w	ip, [ip]
 8009054:	fa0c fc08 	lsl.w	ip, ip, r8
 8009058:	ea4c 0707 	orr.w	r7, ip, r7
 800905c:	f849 7b04 	str.w	r7, [r9], #4
 8009060:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009064:	40cf      	lsrs	r7, r1
 8009066:	e7d9      	b.n	800901c <rshift+0x4c>
 8009068:	f851 cb04 	ldr.w	ip, [r1], #4
 800906c:	f847 cf04 	str.w	ip, [r7, #4]!
 8009070:	e7c2      	b.n	8008ff8 <rshift+0x28>
 8009072:	4623      	mov	r3, r4
 8009074:	e7e0      	b.n	8009038 <rshift+0x68>

08009076 <__hexdig_fun>:
 8009076:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800907a:	2b09      	cmp	r3, #9
 800907c:	d802      	bhi.n	8009084 <__hexdig_fun+0xe>
 800907e:	3820      	subs	r0, #32
 8009080:	b2c0      	uxtb	r0, r0
 8009082:	4770      	bx	lr
 8009084:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009088:	2b05      	cmp	r3, #5
 800908a:	d801      	bhi.n	8009090 <__hexdig_fun+0x1a>
 800908c:	3847      	subs	r0, #71	; 0x47
 800908e:	e7f7      	b.n	8009080 <__hexdig_fun+0xa>
 8009090:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009094:	2b05      	cmp	r3, #5
 8009096:	d801      	bhi.n	800909c <__hexdig_fun+0x26>
 8009098:	3827      	subs	r0, #39	; 0x27
 800909a:	e7f1      	b.n	8009080 <__hexdig_fun+0xa>
 800909c:	2000      	movs	r0, #0
 800909e:	4770      	bx	lr

080090a0 <__gethex>:
 80090a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090a4:	b08b      	sub	sp, #44	; 0x2c
 80090a6:	9305      	str	r3, [sp, #20]
 80090a8:	4bb2      	ldr	r3, [pc, #712]	; (8009374 <__gethex+0x2d4>)
 80090aa:	9002      	str	r0, [sp, #8]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	468b      	mov	fp, r1
 80090b0:	4618      	mov	r0, r3
 80090b2:	4690      	mov	r8, r2
 80090b4:	9303      	str	r3, [sp, #12]
 80090b6:	f7f7 f855 	bl	8000164 <strlen>
 80090ba:	4682      	mov	sl, r0
 80090bc:	9b03      	ldr	r3, [sp, #12]
 80090be:	f8db 2000 	ldr.w	r2, [fp]
 80090c2:	4403      	add	r3, r0
 80090c4:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80090c8:	9306      	str	r3, [sp, #24]
 80090ca:	1c93      	adds	r3, r2, #2
 80090cc:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80090d0:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80090d4:	32fe      	adds	r2, #254	; 0xfe
 80090d6:	18d1      	adds	r1, r2, r3
 80090d8:	461f      	mov	r7, r3
 80090da:	f813 0b01 	ldrb.w	r0, [r3], #1
 80090de:	9101      	str	r1, [sp, #4]
 80090e0:	2830      	cmp	r0, #48	; 0x30
 80090e2:	d0f8      	beq.n	80090d6 <__gethex+0x36>
 80090e4:	f7ff ffc7 	bl	8009076 <__hexdig_fun>
 80090e8:	4604      	mov	r4, r0
 80090ea:	2800      	cmp	r0, #0
 80090ec:	d13a      	bne.n	8009164 <__gethex+0xc4>
 80090ee:	4652      	mov	r2, sl
 80090f0:	4638      	mov	r0, r7
 80090f2:	9903      	ldr	r1, [sp, #12]
 80090f4:	f001 fb70 	bl	800a7d8 <strncmp>
 80090f8:	4605      	mov	r5, r0
 80090fa:	2800      	cmp	r0, #0
 80090fc:	d166      	bne.n	80091cc <__gethex+0x12c>
 80090fe:	f817 000a 	ldrb.w	r0, [r7, sl]
 8009102:	eb07 060a 	add.w	r6, r7, sl
 8009106:	f7ff ffb6 	bl	8009076 <__hexdig_fun>
 800910a:	2800      	cmp	r0, #0
 800910c:	d060      	beq.n	80091d0 <__gethex+0x130>
 800910e:	4633      	mov	r3, r6
 8009110:	7818      	ldrb	r0, [r3, #0]
 8009112:	461f      	mov	r7, r3
 8009114:	2830      	cmp	r0, #48	; 0x30
 8009116:	f103 0301 	add.w	r3, r3, #1
 800911a:	d0f9      	beq.n	8009110 <__gethex+0x70>
 800911c:	f7ff ffab 	bl	8009076 <__hexdig_fun>
 8009120:	2301      	movs	r3, #1
 8009122:	fab0 f480 	clz	r4, r0
 8009126:	4635      	mov	r5, r6
 8009128:	0964      	lsrs	r4, r4, #5
 800912a:	9301      	str	r3, [sp, #4]
 800912c:	463a      	mov	r2, r7
 800912e:	4616      	mov	r6, r2
 8009130:	7830      	ldrb	r0, [r6, #0]
 8009132:	3201      	adds	r2, #1
 8009134:	f7ff ff9f 	bl	8009076 <__hexdig_fun>
 8009138:	2800      	cmp	r0, #0
 800913a:	d1f8      	bne.n	800912e <__gethex+0x8e>
 800913c:	4652      	mov	r2, sl
 800913e:	4630      	mov	r0, r6
 8009140:	9903      	ldr	r1, [sp, #12]
 8009142:	f001 fb49 	bl	800a7d8 <strncmp>
 8009146:	b980      	cbnz	r0, 800916a <__gethex+0xca>
 8009148:	b94d      	cbnz	r5, 800915e <__gethex+0xbe>
 800914a:	eb06 050a 	add.w	r5, r6, sl
 800914e:	462a      	mov	r2, r5
 8009150:	4616      	mov	r6, r2
 8009152:	7830      	ldrb	r0, [r6, #0]
 8009154:	3201      	adds	r2, #1
 8009156:	f7ff ff8e 	bl	8009076 <__hexdig_fun>
 800915a:	2800      	cmp	r0, #0
 800915c:	d1f8      	bne.n	8009150 <__gethex+0xb0>
 800915e:	1bad      	subs	r5, r5, r6
 8009160:	00ad      	lsls	r5, r5, #2
 8009162:	e004      	b.n	800916e <__gethex+0xce>
 8009164:	2400      	movs	r4, #0
 8009166:	4625      	mov	r5, r4
 8009168:	e7e0      	b.n	800912c <__gethex+0x8c>
 800916a:	2d00      	cmp	r5, #0
 800916c:	d1f7      	bne.n	800915e <__gethex+0xbe>
 800916e:	7833      	ldrb	r3, [r6, #0]
 8009170:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009174:	2b50      	cmp	r3, #80	; 0x50
 8009176:	d139      	bne.n	80091ec <__gethex+0x14c>
 8009178:	7873      	ldrb	r3, [r6, #1]
 800917a:	2b2b      	cmp	r3, #43	; 0x2b
 800917c:	d02a      	beq.n	80091d4 <__gethex+0x134>
 800917e:	2b2d      	cmp	r3, #45	; 0x2d
 8009180:	d02c      	beq.n	80091dc <__gethex+0x13c>
 8009182:	f04f 0900 	mov.w	r9, #0
 8009186:	1c71      	adds	r1, r6, #1
 8009188:	7808      	ldrb	r0, [r1, #0]
 800918a:	f7ff ff74 	bl	8009076 <__hexdig_fun>
 800918e:	1e43      	subs	r3, r0, #1
 8009190:	b2db      	uxtb	r3, r3
 8009192:	2b18      	cmp	r3, #24
 8009194:	d82a      	bhi.n	80091ec <__gethex+0x14c>
 8009196:	f1a0 0210 	sub.w	r2, r0, #16
 800919a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800919e:	f7ff ff6a 	bl	8009076 <__hexdig_fun>
 80091a2:	1e43      	subs	r3, r0, #1
 80091a4:	b2db      	uxtb	r3, r3
 80091a6:	2b18      	cmp	r3, #24
 80091a8:	d91b      	bls.n	80091e2 <__gethex+0x142>
 80091aa:	f1b9 0f00 	cmp.w	r9, #0
 80091ae:	d000      	beq.n	80091b2 <__gethex+0x112>
 80091b0:	4252      	negs	r2, r2
 80091b2:	4415      	add	r5, r2
 80091b4:	f8cb 1000 	str.w	r1, [fp]
 80091b8:	b1d4      	cbz	r4, 80091f0 <__gethex+0x150>
 80091ba:	9b01      	ldr	r3, [sp, #4]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	bf14      	ite	ne
 80091c0:	2700      	movne	r7, #0
 80091c2:	2706      	moveq	r7, #6
 80091c4:	4638      	mov	r0, r7
 80091c6:	b00b      	add	sp, #44	; 0x2c
 80091c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091cc:	463e      	mov	r6, r7
 80091ce:	4625      	mov	r5, r4
 80091d0:	2401      	movs	r4, #1
 80091d2:	e7cc      	b.n	800916e <__gethex+0xce>
 80091d4:	f04f 0900 	mov.w	r9, #0
 80091d8:	1cb1      	adds	r1, r6, #2
 80091da:	e7d5      	b.n	8009188 <__gethex+0xe8>
 80091dc:	f04f 0901 	mov.w	r9, #1
 80091e0:	e7fa      	b.n	80091d8 <__gethex+0x138>
 80091e2:	230a      	movs	r3, #10
 80091e4:	fb03 0202 	mla	r2, r3, r2, r0
 80091e8:	3a10      	subs	r2, #16
 80091ea:	e7d6      	b.n	800919a <__gethex+0xfa>
 80091ec:	4631      	mov	r1, r6
 80091ee:	e7e1      	b.n	80091b4 <__gethex+0x114>
 80091f0:	4621      	mov	r1, r4
 80091f2:	1bf3      	subs	r3, r6, r7
 80091f4:	3b01      	subs	r3, #1
 80091f6:	2b07      	cmp	r3, #7
 80091f8:	dc0a      	bgt.n	8009210 <__gethex+0x170>
 80091fa:	9802      	ldr	r0, [sp, #8]
 80091fc:	f000 fa7a 	bl	80096f4 <_Balloc>
 8009200:	4604      	mov	r4, r0
 8009202:	b940      	cbnz	r0, 8009216 <__gethex+0x176>
 8009204:	4602      	mov	r2, r0
 8009206:	21de      	movs	r1, #222	; 0xde
 8009208:	4b5b      	ldr	r3, [pc, #364]	; (8009378 <__gethex+0x2d8>)
 800920a:	485c      	ldr	r0, [pc, #368]	; (800937c <__gethex+0x2dc>)
 800920c:	f7ff f836 	bl	800827c <__assert_func>
 8009210:	3101      	adds	r1, #1
 8009212:	105b      	asrs	r3, r3, #1
 8009214:	e7ef      	b.n	80091f6 <__gethex+0x156>
 8009216:	f04f 0b00 	mov.w	fp, #0
 800921a:	f100 0914 	add.w	r9, r0, #20
 800921e:	f1ca 0301 	rsb	r3, sl, #1
 8009222:	f8cd 9010 	str.w	r9, [sp, #16]
 8009226:	f8cd b004 	str.w	fp, [sp, #4]
 800922a:	9308      	str	r3, [sp, #32]
 800922c:	42b7      	cmp	r7, r6
 800922e:	d33f      	bcc.n	80092b0 <__gethex+0x210>
 8009230:	9f04      	ldr	r7, [sp, #16]
 8009232:	9b01      	ldr	r3, [sp, #4]
 8009234:	f847 3b04 	str.w	r3, [r7], #4
 8009238:	eba7 0709 	sub.w	r7, r7, r9
 800923c:	10bf      	asrs	r7, r7, #2
 800923e:	6127      	str	r7, [r4, #16]
 8009240:	4618      	mov	r0, r3
 8009242:	f000 fb49 	bl	80098d8 <__hi0bits>
 8009246:	017f      	lsls	r7, r7, #5
 8009248:	f8d8 6000 	ldr.w	r6, [r8]
 800924c:	1a3f      	subs	r7, r7, r0
 800924e:	42b7      	cmp	r7, r6
 8009250:	dd62      	ble.n	8009318 <__gethex+0x278>
 8009252:	1bbf      	subs	r7, r7, r6
 8009254:	4639      	mov	r1, r7
 8009256:	4620      	mov	r0, r4
 8009258:	f000 fee3 	bl	800a022 <__any_on>
 800925c:	4682      	mov	sl, r0
 800925e:	b1a8      	cbz	r0, 800928c <__gethex+0x1ec>
 8009260:	f04f 0a01 	mov.w	sl, #1
 8009264:	1e7b      	subs	r3, r7, #1
 8009266:	1159      	asrs	r1, r3, #5
 8009268:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800926c:	f003 021f 	and.w	r2, r3, #31
 8009270:	fa0a f202 	lsl.w	r2, sl, r2
 8009274:	420a      	tst	r2, r1
 8009276:	d009      	beq.n	800928c <__gethex+0x1ec>
 8009278:	4553      	cmp	r3, sl
 800927a:	dd05      	ble.n	8009288 <__gethex+0x1e8>
 800927c:	4620      	mov	r0, r4
 800927e:	1eb9      	subs	r1, r7, #2
 8009280:	f000 fecf 	bl	800a022 <__any_on>
 8009284:	2800      	cmp	r0, #0
 8009286:	d144      	bne.n	8009312 <__gethex+0x272>
 8009288:	f04f 0a02 	mov.w	sl, #2
 800928c:	4639      	mov	r1, r7
 800928e:	4620      	mov	r0, r4
 8009290:	f7ff fe9e 	bl	8008fd0 <rshift>
 8009294:	443d      	add	r5, r7
 8009296:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800929a:	42ab      	cmp	r3, r5
 800929c:	da4a      	bge.n	8009334 <__gethex+0x294>
 800929e:	4621      	mov	r1, r4
 80092a0:	9802      	ldr	r0, [sp, #8]
 80092a2:	f000 fa67 	bl	8009774 <_Bfree>
 80092a6:	2300      	movs	r3, #0
 80092a8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80092aa:	27a3      	movs	r7, #163	; 0xa3
 80092ac:	6013      	str	r3, [r2, #0]
 80092ae:	e789      	b.n	80091c4 <__gethex+0x124>
 80092b0:	1e73      	subs	r3, r6, #1
 80092b2:	9a06      	ldr	r2, [sp, #24]
 80092b4:	9307      	str	r3, [sp, #28]
 80092b6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80092ba:	4293      	cmp	r3, r2
 80092bc:	d019      	beq.n	80092f2 <__gethex+0x252>
 80092be:	f1bb 0f20 	cmp.w	fp, #32
 80092c2:	d107      	bne.n	80092d4 <__gethex+0x234>
 80092c4:	9b04      	ldr	r3, [sp, #16]
 80092c6:	9a01      	ldr	r2, [sp, #4]
 80092c8:	f843 2b04 	str.w	r2, [r3], #4
 80092cc:	9304      	str	r3, [sp, #16]
 80092ce:	2300      	movs	r3, #0
 80092d0:	469b      	mov	fp, r3
 80092d2:	9301      	str	r3, [sp, #4]
 80092d4:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80092d8:	f7ff fecd 	bl	8009076 <__hexdig_fun>
 80092dc:	9b01      	ldr	r3, [sp, #4]
 80092de:	f000 000f 	and.w	r0, r0, #15
 80092e2:	fa00 f00b 	lsl.w	r0, r0, fp
 80092e6:	4303      	orrs	r3, r0
 80092e8:	9301      	str	r3, [sp, #4]
 80092ea:	f10b 0b04 	add.w	fp, fp, #4
 80092ee:	9b07      	ldr	r3, [sp, #28]
 80092f0:	e00d      	b.n	800930e <__gethex+0x26e>
 80092f2:	9a08      	ldr	r2, [sp, #32]
 80092f4:	1e73      	subs	r3, r6, #1
 80092f6:	4413      	add	r3, r2
 80092f8:	42bb      	cmp	r3, r7
 80092fa:	d3e0      	bcc.n	80092be <__gethex+0x21e>
 80092fc:	4618      	mov	r0, r3
 80092fe:	4652      	mov	r2, sl
 8009300:	9903      	ldr	r1, [sp, #12]
 8009302:	9309      	str	r3, [sp, #36]	; 0x24
 8009304:	f001 fa68 	bl	800a7d8 <strncmp>
 8009308:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800930a:	2800      	cmp	r0, #0
 800930c:	d1d7      	bne.n	80092be <__gethex+0x21e>
 800930e:	461e      	mov	r6, r3
 8009310:	e78c      	b.n	800922c <__gethex+0x18c>
 8009312:	f04f 0a03 	mov.w	sl, #3
 8009316:	e7b9      	b.n	800928c <__gethex+0x1ec>
 8009318:	da09      	bge.n	800932e <__gethex+0x28e>
 800931a:	1bf7      	subs	r7, r6, r7
 800931c:	4621      	mov	r1, r4
 800931e:	463a      	mov	r2, r7
 8009320:	9802      	ldr	r0, [sp, #8]
 8009322:	f000 fc3f 	bl	8009ba4 <__lshift>
 8009326:	4604      	mov	r4, r0
 8009328:	1bed      	subs	r5, r5, r7
 800932a:	f100 0914 	add.w	r9, r0, #20
 800932e:	f04f 0a00 	mov.w	sl, #0
 8009332:	e7b0      	b.n	8009296 <__gethex+0x1f6>
 8009334:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009338:	42a8      	cmp	r0, r5
 800933a:	dd72      	ble.n	8009422 <__gethex+0x382>
 800933c:	1b45      	subs	r5, r0, r5
 800933e:	42ae      	cmp	r6, r5
 8009340:	dc35      	bgt.n	80093ae <__gethex+0x30e>
 8009342:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009346:	2b02      	cmp	r3, #2
 8009348:	d029      	beq.n	800939e <__gethex+0x2fe>
 800934a:	2b03      	cmp	r3, #3
 800934c:	d02b      	beq.n	80093a6 <__gethex+0x306>
 800934e:	2b01      	cmp	r3, #1
 8009350:	d11c      	bne.n	800938c <__gethex+0x2ec>
 8009352:	42ae      	cmp	r6, r5
 8009354:	d11a      	bne.n	800938c <__gethex+0x2ec>
 8009356:	2e01      	cmp	r6, #1
 8009358:	d112      	bne.n	8009380 <__gethex+0x2e0>
 800935a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800935e:	9a05      	ldr	r2, [sp, #20]
 8009360:	2762      	movs	r7, #98	; 0x62
 8009362:	6013      	str	r3, [r2, #0]
 8009364:	2301      	movs	r3, #1
 8009366:	6123      	str	r3, [r4, #16]
 8009368:	f8c9 3000 	str.w	r3, [r9]
 800936c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800936e:	601c      	str	r4, [r3, #0]
 8009370:	e728      	b.n	80091c4 <__gethex+0x124>
 8009372:	bf00      	nop
 8009374:	0800b6a8 	.word	0x0800b6a8
 8009378:	0800b631 	.word	0x0800b631
 800937c:	0800b642 	.word	0x0800b642
 8009380:	4620      	mov	r0, r4
 8009382:	1e71      	subs	r1, r6, #1
 8009384:	f000 fe4d 	bl	800a022 <__any_on>
 8009388:	2800      	cmp	r0, #0
 800938a:	d1e6      	bne.n	800935a <__gethex+0x2ba>
 800938c:	4621      	mov	r1, r4
 800938e:	9802      	ldr	r0, [sp, #8]
 8009390:	f000 f9f0 	bl	8009774 <_Bfree>
 8009394:	2300      	movs	r3, #0
 8009396:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009398:	2750      	movs	r7, #80	; 0x50
 800939a:	6013      	str	r3, [r2, #0]
 800939c:	e712      	b.n	80091c4 <__gethex+0x124>
 800939e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d1f3      	bne.n	800938c <__gethex+0x2ec>
 80093a4:	e7d9      	b.n	800935a <__gethex+0x2ba>
 80093a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d1d6      	bne.n	800935a <__gethex+0x2ba>
 80093ac:	e7ee      	b.n	800938c <__gethex+0x2ec>
 80093ae:	1e6f      	subs	r7, r5, #1
 80093b0:	f1ba 0f00 	cmp.w	sl, #0
 80093b4:	d132      	bne.n	800941c <__gethex+0x37c>
 80093b6:	b127      	cbz	r7, 80093c2 <__gethex+0x322>
 80093b8:	4639      	mov	r1, r7
 80093ba:	4620      	mov	r0, r4
 80093bc:	f000 fe31 	bl	800a022 <__any_on>
 80093c0:	4682      	mov	sl, r0
 80093c2:	2101      	movs	r1, #1
 80093c4:	117b      	asrs	r3, r7, #5
 80093c6:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80093ca:	f007 071f 	and.w	r7, r7, #31
 80093ce:	fa01 f707 	lsl.w	r7, r1, r7
 80093d2:	421f      	tst	r7, r3
 80093d4:	f04f 0702 	mov.w	r7, #2
 80093d8:	4629      	mov	r1, r5
 80093da:	4620      	mov	r0, r4
 80093dc:	bf18      	it	ne
 80093de:	f04a 0a02 	orrne.w	sl, sl, #2
 80093e2:	1b76      	subs	r6, r6, r5
 80093e4:	f7ff fdf4 	bl	8008fd0 <rshift>
 80093e8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80093ec:	f1ba 0f00 	cmp.w	sl, #0
 80093f0:	d048      	beq.n	8009484 <__gethex+0x3e4>
 80093f2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80093f6:	2b02      	cmp	r3, #2
 80093f8:	d015      	beq.n	8009426 <__gethex+0x386>
 80093fa:	2b03      	cmp	r3, #3
 80093fc:	d017      	beq.n	800942e <__gethex+0x38e>
 80093fe:	2b01      	cmp	r3, #1
 8009400:	d109      	bne.n	8009416 <__gethex+0x376>
 8009402:	f01a 0f02 	tst.w	sl, #2
 8009406:	d006      	beq.n	8009416 <__gethex+0x376>
 8009408:	f8d9 0000 	ldr.w	r0, [r9]
 800940c:	ea4a 0a00 	orr.w	sl, sl, r0
 8009410:	f01a 0f01 	tst.w	sl, #1
 8009414:	d10e      	bne.n	8009434 <__gethex+0x394>
 8009416:	f047 0710 	orr.w	r7, r7, #16
 800941a:	e033      	b.n	8009484 <__gethex+0x3e4>
 800941c:	f04f 0a01 	mov.w	sl, #1
 8009420:	e7cf      	b.n	80093c2 <__gethex+0x322>
 8009422:	2701      	movs	r7, #1
 8009424:	e7e2      	b.n	80093ec <__gethex+0x34c>
 8009426:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009428:	f1c3 0301 	rsb	r3, r3, #1
 800942c:	9315      	str	r3, [sp, #84]	; 0x54
 800942e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009430:	2b00      	cmp	r3, #0
 8009432:	d0f0      	beq.n	8009416 <__gethex+0x376>
 8009434:	f04f 0c00 	mov.w	ip, #0
 8009438:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800943c:	f104 0314 	add.w	r3, r4, #20
 8009440:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009444:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009448:	4618      	mov	r0, r3
 800944a:	f853 2b04 	ldr.w	r2, [r3], #4
 800944e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009452:	d01c      	beq.n	800948e <__gethex+0x3ee>
 8009454:	3201      	adds	r2, #1
 8009456:	6002      	str	r2, [r0, #0]
 8009458:	2f02      	cmp	r7, #2
 800945a:	f104 0314 	add.w	r3, r4, #20
 800945e:	d13d      	bne.n	80094dc <__gethex+0x43c>
 8009460:	f8d8 2000 	ldr.w	r2, [r8]
 8009464:	3a01      	subs	r2, #1
 8009466:	42b2      	cmp	r2, r6
 8009468:	d10a      	bne.n	8009480 <__gethex+0x3e0>
 800946a:	2201      	movs	r2, #1
 800946c:	1171      	asrs	r1, r6, #5
 800946e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009472:	f006 061f 	and.w	r6, r6, #31
 8009476:	fa02 f606 	lsl.w	r6, r2, r6
 800947a:	421e      	tst	r6, r3
 800947c:	bf18      	it	ne
 800947e:	4617      	movne	r7, r2
 8009480:	f047 0720 	orr.w	r7, r7, #32
 8009484:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009486:	601c      	str	r4, [r3, #0]
 8009488:	9b05      	ldr	r3, [sp, #20]
 800948a:	601d      	str	r5, [r3, #0]
 800948c:	e69a      	b.n	80091c4 <__gethex+0x124>
 800948e:	4299      	cmp	r1, r3
 8009490:	f843 cc04 	str.w	ip, [r3, #-4]
 8009494:	d8d8      	bhi.n	8009448 <__gethex+0x3a8>
 8009496:	68a3      	ldr	r3, [r4, #8]
 8009498:	459b      	cmp	fp, r3
 800949a:	db17      	blt.n	80094cc <__gethex+0x42c>
 800949c:	6861      	ldr	r1, [r4, #4]
 800949e:	9802      	ldr	r0, [sp, #8]
 80094a0:	3101      	adds	r1, #1
 80094a2:	f000 f927 	bl	80096f4 <_Balloc>
 80094a6:	4681      	mov	r9, r0
 80094a8:	b918      	cbnz	r0, 80094b2 <__gethex+0x412>
 80094aa:	4602      	mov	r2, r0
 80094ac:	2184      	movs	r1, #132	; 0x84
 80094ae:	4b19      	ldr	r3, [pc, #100]	; (8009514 <__gethex+0x474>)
 80094b0:	e6ab      	b.n	800920a <__gethex+0x16a>
 80094b2:	6922      	ldr	r2, [r4, #16]
 80094b4:	f104 010c 	add.w	r1, r4, #12
 80094b8:	3202      	adds	r2, #2
 80094ba:	0092      	lsls	r2, r2, #2
 80094bc:	300c      	adds	r0, #12
 80094be:	f7fd fb37 	bl	8006b30 <memcpy>
 80094c2:	4621      	mov	r1, r4
 80094c4:	9802      	ldr	r0, [sp, #8]
 80094c6:	f000 f955 	bl	8009774 <_Bfree>
 80094ca:	464c      	mov	r4, r9
 80094cc:	6923      	ldr	r3, [r4, #16]
 80094ce:	1c5a      	adds	r2, r3, #1
 80094d0:	6122      	str	r2, [r4, #16]
 80094d2:	2201      	movs	r2, #1
 80094d4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80094d8:	615a      	str	r2, [r3, #20]
 80094da:	e7bd      	b.n	8009458 <__gethex+0x3b8>
 80094dc:	6922      	ldr	r2, [r4, #16]
 80094de:	455a      	cmp	r2, fp
 80094e0:	dd0b      	ble.n	80094fa <__gethex+0x45a>
 80094e2:	2101      	movs	r1, #1
 80094e4:	4620      	mov	r0, r4
 80094e6:	f7ff fd73 	bl	8008fd0 <rshift>
 80094ea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80094ee:	3501      	adds	r5, #1
 80094f0:	42ab      	cmp	r3, r5
 80094f2:	f6ff aed4 	blt.w	800929e <__gethex+0x1fe>
 80094f6:	2701      	movs	r7, #1
 80094f8:	e7c2      	b.n	8009480 <__gethex+0x3e0>
 80094fa:	f016 061f 	ands.w	r6, r6, #31
 80094fe:	d0fa      	beq.n	80094f6 <__gethex+0x456>
 8009500:	4453      	add	r3, sl
 8009502:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009506:	f000 f9e7 	bl	80098d8 <__hi0bits>
 800950a:	f1c6 0620 	rsb	r6, r6, #32
 800950e:	42b0      	cmp	r0, r6
 8009510:	dbe7      	blt.n	80094e2 <__gethex+0x442>
 8009512:	e7f0      	b.n	80094f6 <__gethex+0x456>
 8009514:	0800b631 	.word	0x0800b631

08009518 <L_shift>:
 8009518:	f1c2 0208 	rsb	r2, r2, #8
 800951c:	0092      	lsls	r2, r2, #2
 800951e:	b570      	push	{r4, r5, r6, lr}
 8009520:	f1c2 0620 	rsb	r6, r2, #32
 8009524:	6843      	ldr	r3, [r0, #4]
 8009526:	6804      	ldr	r4, [r0, #0]
 8009528:	fa03 f506 	lsl.w	r5, r3, r6
 800952c:	432c      	orrs	r4, r5
 800952e:	40d3      	lsrs	r3, r2
 8009530:	6004      	str	r4, [r0, #0]
 8009532:	f840 3f04 	str.w	r3, [r0, #4]!
 8009536:	4288      	cmp	r0, r1
 8009538:	d3f4      	bcc.n	8009524 <L_shift+0xc>
 800953a:	bd70      	pop	{r4, r5, r6, pc}

0800953c <__match>:
 800953c:	b530      	push	{r4, r5, lr}
 800953e:	6803      	ldr	r3, [r0, #0]
 8009540:	3301      	adds	r3, #1
 8009542:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009546:	b914      	cbnz	r4, 800954e <__match+0x12>
 8009548:	6003      	str	r3, [r0, #0]
 800954a:	2001      	movs	r0, #1
 800954c:	bd30      	pop	{r4, r5, pc}
 800954e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009552:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009556:	2d19      	cmp	r5, #25
 8009558:	bf98      	it	ls
 800955a:	3220      	addls	r2, #32
 800955c:	42a2      	cmp	r2, r4
 800955e:	d0f0      	beq.n	8009542 <__match+0x6>
 8009560:	2000      	movs	r0, #0
 8009562:	e7f3      	b.n	800954c <__match+0x10>

08009564 <__hexnan>:
 8009564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009568:	2500      	movs	r5, #0
 800956a:	680b      	ldr	r3, [r1, #0]
 800956c:	4682      	mov	sl, r0
 800956e:	115e      	asrs	r6, r3, #5
 8009570:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009574:	f013 031f 	ands.w	r3, r3, #31
 8009578:	bf18      	it	ne
 800957a:	3604      	addne	r6, #4
 800957c:	1f37      	subs	r7, r6, #4
 800957e:	46b9      	mov	r9, r7
 8009580:	463c      	mov	r4, r7
 8009582:	46ab      	mov	fp, r5
 8009584:	b087      	sub	sp, #28
 8009586:	4690      	mov	r8, r2
 8009588:	6802      	ldr	r2, [r0, #0]
 800958a:	9301      	str	r3, [sp, #4]
 800958c:	f846 5c04 	str.w	r5, [r6, #-4]
 8009590:	9502      	str	r5, [sp, #8]
 8009592:	7851      	ldrb	r1, [r2, #1]
 8009594:	1c53      	adds	r3, r2, #1
 8009596:	9303      	str	r3, [sp, #12]
 8009598:	b341      	cbz	r1, 80095ec <__hexnan+0x88>
 800959a:	4608      	mov	r0, r1
 800959c:	9205      	str	r2, [sp, #20]
 800959e:	9104      	str	r1, [sp, #16]
 80095a0:	f7ff fd69 	bl	8009076 <__hexdig_fun>
 80095a4:	2800      	cmp	r0, #0
 80095a6:	d14f      	bne.n	8009648 <__hexnan+0xe4>
 80095a8:	9904      	ldr	r1, [sp, #16]
 80095aa:	9a05      	ldr	r2, [sp, #20]
 80095ac:	2920      	cmp	r1, #32
 80095ae:	d818      	bhi.n	80095e2 <__hexnan+0x7e>
 80095b0:	9b02      	ldr	r3, [sp, #8]
 80095b2:	459b      	cmp	fp, r3
 80095b4:	dd13      	ble.n	80095de <__hexnan+0x7a>
 80095b6:	454c      	cmp	r4, r9
 80095b8:	d206      	bcs.n	80095c8 <__hexnan+0x64>
 80095ba:	2d07      	cmp	r5, #7
 80095bc:	dc04      	bgt.n	80095c8 <__hexnan+0x64>
 80095be:	462a      	mov	r2, r5
 80095c0:	4649      	mov	r1, r9
 80095c2:	4620      	mov	r0, r4
 80095c4:	f7ff ffa8 	bl	8009518 <L_shift>
 80095c8:	4544      	cmp	r4, r8
 80095ca:	d950      	bls.n	800966e <__hexnan+0x10a>
 80095cc:	2300      	movs	r3, #0
 80095ce:	f1a4 0904 	sub.w	r9, r4, #4
 80095d2:	f844 3c04 	str.w	r3, [r4, #-4]
 80095d6:	461d      	mov	r5, r3
 80095d8:	464c      	mov	r4, r9
 80095da:	f8cd b008 	str.w	fp, [sp, #8]
 80095de:	9a03      	ldr	r2, [sp, #12]
 80095e0:	e7d7      	b.n	8009592 <__hexnan+0x2e>
 80095e2:	2929      	cmp	r1, #41	; 0x29
 80095e4:	d156      	bne.n	8009694 <__hexnan+0x130>
 80095e6:	3202      	adds	r2, #2
 80095e8:	f8ca 2000 	str.w	r2, [sl]
 80095ec:	f1bb 0f00 	cmp.w	fp, #0
 80095f0:	d050      	beq.n	8009694 <__hexnan+0x130>
 80095f2:	454c      	cmp	r4, r9
 80095f4:	d206      	bcs.n	8009604 <__hexnan+0xa0>
 80095f6:	2d07      	cmp	r5, #7
 80095f8:	dc04      	bgt.n	8009604 <__hexnan+0xa0>
 80095fa:	462a      	mov	r2, r5
 80095fc:	4649      	mov	r1, r9
 80095fe:	4620      	mov	r0, r4
 8009600:	f7ff ff8a 	bl	8009518 <L_shift>
 8009604:	4544      	cmp	r4, r8
 8009606:	d934      	bls.n	8009672 <__hexnan+0x10e>
 8009608:	4623      	mov	r3, r4
 800960a:	f1a8 0204 	sub.w	r2, r8, #4
 800960e:	f853 1b04 	ldr.w	r1, [r3], #4
 8009612:	429f      	cmp	r7, r3
 8009614:	f842 1f04 	str.w	r1, [r2, #4]!
 8009618:	d2f9      	bcs.n	800960e <__hexnan+0xaa>
 800961a:	1b3b      	subs	r3, r7, r4
 800961c:	f023 0303 	bic.w	r3, r3, #3
 8009620:	3304      	adds	r3, #4
 8009622:	3401      	adds	r4, #1
 8009624:	3e03      	subs	r6, #3
 8009626:	42b4      	cmp	r4, r6
 8009628:	bf88      	it	hi
 800962a:	2304      	movhi	r3, #4
 800962c:	2200      	movs	r2, #0
 800962e:	4443      	add	r3, r8
 8009630:	f843 2b04 	str.w	r2, [r3], #4
 8009634:	429f      	cmp	r7, r3
 8009636:	d2fb      	bcs.n	8009630 <__hexnan+0xcc>
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	b91b      	cbnz	r3, 8009644 <__hexnan+0xe0>
 800963c:	4547      	cmp	r7, r8
 800963e:	d127      	bne.n	8009690 <__hexnan+0x12c>
 8009640:	2301      	movs	r3, #1
 8009642:	603b      	str	r3, [r7, #0]
 8009644:	2005      	movs	r0, #5
 8009646:	e026      	b.n	8009696 <__hexnan+0x132>
 8009648:	3501      	adds	r5, #1
 800964a:	2d08      	cmp	r5, #8
 800964c:	f10b 0b01 	add.w	fp, fp, #1
 8009650:	dd06      	ble.n	8009660 <__hexnan+0xfc>
 8009652:	4544      	cmp	r4, r8
 8009654:	d9c3      	bls.n	80095de <__hexnan+0x7a>
 8009656:	2300      	movs	r3, #0
 8009658:	2501      	movs	r5, #1
 800965a:	f844 3c04 	str.w	r3, [r4, #-4]
 800965e:	3c04      	subs	r4, #4
 8009660:	6822      	ldr	r2, [r4, #0]
 8009662:	f000 000f 	and.w	r0, r0, #15
 8009666:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800966a:	6022      	str	r2, [r4, #0]
 800966c:	e7b7      	b.n	80095de <__hexnan+0x7a>
 800966e:	2508      	movs	r5, #8
 8009670:	e7b5      	b.n	80095de <__hexnan+0x7a>
 8009672:	9b01      	ldr	r3, [sp, #4]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d0df      	beq.n	8009638 <__hexnan+0xd4>
 8009678:	f04f 32ff 	mov.w	r2, #4294967295
 800967c:	f1c3 0320 	rsb	r3, r3, #32
 8009680:	fa22 f303 	lsr.w	r3, r2, r3
 8009684:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009688:	401a      	ands	r2, r3
 800968a:	f846 2c04 	str.w	r2, [r6, #-4]
 800968e:	e7d3      	b.n	8009638 <__hexnan+0xd4>
 8009690:	3f04      	subs	r7, #4
 8009692:	e7d1      	b.n	8009638 <__hexnan+0xd4>
 8009694:	2004      	movs	r0, #4
 8009696:	b007      	add	sp, #28
 8009698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800969c <_localeconv_r>:
 800969c:	4800      	ldr	r0, [pc, #0]	; (80096a0 <_localeconv_r+0x4>)
 800969e:	4770      	bx	lr
 80096a0:	200002e8 	.word	0x200002e8

080096a4 <malloc>:
 80096a4:	4b02      	ldr	r3, [pc, #8]	; (80096b0 <malloc+0xc>)
 80096a6:	4601      	mov	r1, r0
 80096a8:	6818      	ldr	r0, [r3, #0]
 80096aa:	f000 bd57 	b.w	800a15c <_malloc_r>
 80096ae:	bf00      	nop
 80096b0:	20000190 	.word	0x20000190

080096b4 <__ascii_mbtowc>:
 80096b4:	b082      	sub	sp, #8
 80096b6:	b901      	cbnz	r1, 80096ba <__ascii_mbtowc+0x6>
 80096b8:	a901      	add	r1, sp, #4
 80096ba:	b142      	cbz	r2, 80096ce <__ascii_mbtowc+0x1a>
 80096bc:	b14b      	cbz	r3, 80096d2 <__ascii_mbtowc+0x1e>
 80096be:	7813      	ldrb	r3, [r2, #0]
 80096c0:	600b      	str	r3, [r1, #0]
 80096c2:	7812      	ldrb	r2, [r2, #0]
 80096c4:	1e10      	subs	r0, r2, #0
 80096c6:	bf18      	it	ne
 80096c8:	2001      	movne	r0, #1
 80096ca:	b002      	add	sp, #8
 80096cc:	4770      	bx	lr
 80096ce:	4610      	mov	r0, r2
 80096d0:	e7fb      	b.n	80096ca <__ascii_mbtowc+0x16>
 80096d2:	f06f 0001 	mvn.w	r0, #1
 80096d6:	e7f8      	b.n	80096ca <__ascii_mbtowc+0x16>

080096d8 <memchr>:
 80096d8:	4603      	mov	r3, r0
 80096da:	b510      	push	{r4, lr}
 80096dc:	b2c9      	uxtb	r1, r1
 80096de:	4402      	add	r2, r0
 80096e0:	4293      	cmp	r3, r2
 80096e2:	4618      	mov	r0, r3
 80096e4:	d101      	bne.n	80096ea <memchr+0x12>
 80096e6:	2000      	movs	r0, #0
 80096e8:	e003      	b.n	80096f2 <memchr+0x1a>
 80096ea:	7804      	ldrb	r4, [r0, #0]
 80096ec:	3301      	adds	r3, #1
 80096ee:	428c      	cmp	r4, r1
 80096f0:	d1f6      	bne.n	80096e0 <memchr+0x8>
 80096f2:	bd10      	pop	{r4, pc}

080096f4 <_Balloc>:
 80096f4:	b570      	push	{r4, r5, r6, lr}
 80096f6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80096f8:	4604      	mov	r4, r0
 80096fa:	460d      	mov	r5, r1
 80096fc:	b976      	cbnz	r6, 800971c <_Balloc+0x28>
 80096fe:	2010      	movs	r0, #16
 8009700:	f7ff ffd0 	bl	80096a4 <malloc>
 8009704:	4602      	mov	r2, r0
 8009706:	6260      	str	r0, [r4, #36]	; 0x24
 8009708:	b920      	cbnz	r0, 8009714 <_Balloc+0x20>
 800970a:	2166      	movs	r1, #102	; 0x66
 800970c:	4b17      	ldr	r3, [pc, #92]	; (800976c <_Balloc+0x78>)
 800970e:	4818      	ldr	r0, [pc, #96]	; (8009770 <_Balloc+0x7c>)
 8009710:	f7fe fdb4 	bl	800827c <__assert_func>
 8009714:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009718:	6006      	str	r6, [r0, #0]
 800971a:	60c6      	str	r6, [r0, #12]
 800971c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800971e:	68f3      	ldr	r3, [r6, #12]
 8009720:	b183      	cbz	r3, 8009744 <_Balloc+0x50>
 8009722:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009724:	68db      	ldr	r3, [r3, #12]
 8009726:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800972a:	b9b8      	cbnz	r0, 800975c <_Balloc+0x68>
 800972c:	2101      	movs	r1, #1
 800972e:	fa01 f605 	lsl.w	r6, r1, r5
 8009732:	1d72      	adds	r2, r6, #5
 8009734:	4620      	mov	r0, r4
 8009736:	0092      	lsls	r2, r2, #2
 8009738:	f000 fc94 	bl	800a064 <_calloc_r>
 800973c:	b160      	cbz	r0, 8009758 <_Balloc+0x64>
 800973e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009742:	e00e      	b.n	8009762 <_Balloc+0x6e>
 8009744:	2221      	movs	r2, #33	; 0x21
 8009746:	2104      	movs	r1, #4
 8009748:	4620      	mov	r0, r4
 800974a:	f000 fc8b 	bl	800a064 <_calloc_r>
 800974e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009750:	60f0      	str	r0, [r6, #12]
 8009752:	68db      	ldr	r3, [r3, #12]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d1e4      	bne.n	8009722 <_Balloc+0x2e>
 8009758:	2000      	movs	r0, #0
 800975a:	bd70      	pop	{r4, r5, r6, pc}
 800975c:	6802      	ldr	r2, [r0, #0]
 800975e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009762:	2300      	movs	r3, #0
 8009764:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009768:	e7f7      	b.n	800975a <_Balloc+0x66>
 800976a:	bf00      	nop
 800976c:	0800b418 	.word	0x0800b418
 8009770:	0800b6bc 	.word	0x0800b6bc

08009774 <_Bfree>:
 8009774:	b570      	push	{r4, r5, r6, lr}
 8009776:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009778:	4605      	mov	r5, r0
 800977a:	460c      	mov	r4, r1
 800977c:	b976      	cbnz	r6, 800979c <_Bfree+0x28>
 800977e:	2010      	movs	r0, #16
 8009780:	f7ff ff90 	bl	80096a4 <malloc>
 8009784:	4602      	mov	r2, r0
 8009786:	6268      	str	r0, [r5, #36]	; 0x24
 8009788:	b920      	cbnz	r0, 8009794 <_Bfree+0x20>
 800978a:	218a      	movs	r1, #138	; 0x8a
 800978c:	4b08      	ldr	r3, [pc, #32]	; (80097b0 <_Bfree+0x3c>)
 800978e:	4809      	ldr	r0, [pc, #36]	; (80097b4 <_Bfree+0x40>)
 8009790:	f7fe fd74 	bl	800827c <__assert_func>
 8009794:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009798:	6006      	str	r6, [r0, #0]
 800979a:	60c6      	str	r6, [r0, #12]
 800979c:	b13c      	cbz	r4, 80097ae <_Bfree+0x3a>
 800979e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80097a0:	6862      	ldr	r2, [r4, #4]
 80097a2:	68db      	ldr	r3, [r3, #12]
 80097a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80097a8:	6021      	str	r1, [r4, #0]
 80097aa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80097ae:	bd70      	pop	{r4, r5, r6, pc}
 80097b0:	0800b418 	.word	0x0800b418
 80097b4:	0800b6bc 	.word	0x0800b6bc

080097b8 <__multadd>:
 80097b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097bc:	4607      	mov	r7, r0
 80097be:	460c      	mov	r4, r1
 80097c0:	461e      	mov	r6, r3
 80097c2:	2000      	movs	r0, #0
 80097c4:	690d      	ldr	r5, [r1, #16]
 80097c6:	f101 0c14 	add.w	ip, r1, #20
 80097ca:	f8dc 3000 	ldr.w	r3, [ip]
 80097ce:	3001      	adds	r0, #1
 80097d0:	b299      	uxth	r1, r3
 80097d2:	fb02 6101 	mla	r1, r2, r1, r6
 80097d6:	0c1e      	lsrs	r6, r3, #16
 80097d8:	0c0b      	lsrs	r3, r1, #16
 80097da:	fb02 3306 	mla	r3, r2, r6, r3
 80097de:	b289      	uxth	r1, r1
 80097e0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80097e4:	4285      	cmp	r5, r0
 80097e6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80097ea:	f84c 1b04 	str.w	r1, [ip], #4
 80097ee:	dcec      	bgt.n	80097ca <__multadd+0x12>
 80097f0:	b30e      	cbz	r6, 8009836 <__multadd+0x7e>
 80097f2:	68a3      	ldr	r3, [r4, #8]
 80097f4:	42ab      	cmp	r3, r5
 80097f6:	dc19      	bgt.n	800982c <__multadd+0x74>
 80097f8:	6861      	ldr	r1, [r4, #4]
 80097fa:	4638      	mov	r0, r7
 80097fc:	3101      	adds	r1, #1
 80097fe:	f7ff ff79 	bl	80096f4 <_Balloc>
 8009802:	4680      	mov	r8, r0
 8009804:	b928      	cbnz	r0, 8009812 <__multadd+0x5a>
 8009806:	4602      	mov	r2, r0
 8009808:	21b5      	movs	r1, #181	; 0xb5
 800980a:	4b0c      	ldr	r3, [pc, #48]	; (800983c <__multadd+0x84>)
 800980c:	480c      	ldr	r0, [pc, #48]	; (8009840 <__multadd+0x88>)
 800980e:	f7fe fd35 	bl	800827c <__assert_func>
 8009812:	6922      	ldr	r2, [r4, #16]
 8009814:	f104 010c 	add.w	r1, r4, #12
 8009818:	3202      	adds	r2, #2
 800981a:	0092      	lsls	r2, r2, #2
 800981c:	300c      	adds	r0, #12
 800981e:	f7fd f987 	bl	8006b30 <memcpy>
 8009822:	4621      	mov	r1, r4
 8009824:	4638      	mov	r0, r7
 8009826:	f7ff ffa5 	bl	8009774 <_Bfree>
 800982a:	4644      	mov	r4, r8
 800982c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009830:	3501      	adds	r5, #1
 8009832:	615e      	str	r6, [r3, #20]
 8009834:	6125      	str	r5, [r4, #16]
 8009836:	4620      	mov	r0, r4
 8009838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800983c:	0800b631 	.word	0x0800b631
 8009840:	0800b6bc 	.word	0x0800b6bc

08009844 <__s2b>:
 8009844:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009848:	4615      	mov	r5, r2
 800984a:	2209      	movs	r2, #9
 800984c:	461f      	mov	r7, r3
 800984e:	3308      	adds	r3, #8
 8009850:	460c      	mov	r4, r1
 8009852:	fb93 f3f2 	sdiv	r3, r3, r2
 8009856:	4606      	mov	r6, r0
 8009858:	2201      	movs	r2, #1
 800985a:	2100      	movs	r1, #0
 800985c:	429a      	cmp	r2, r3
 800985e:	db09      	blt.n	8009874 <__s2b+0x30>
 8009860:	4630      	mov	r0, r6
 8009862:	f7ff ff47 	bl	80096f4 <_Balloc>
 8009866:	b940      	cbnz	r0, 800987a <__s2b+0x36>
 8009868:	4602      	mov	r2, r0
 800986a:	21ce      	movs	r1, #206	; 0xce
 800986c:	4b18      	ldr	r3, [pc, #96]	; (80098d0 <__s2b+0x8c>)
 800986e:	4819      	ldr	r0, [pc, #100]	; (80098d4 <__s2b+0x90>)
 8009870:	f7fe fd04 	bl	800827c <__assert_func>
 8009874:	0052      	lsls	r2, r2, #1
 8009876:	3101      	adds	r1, #1
 8009878:	e7f0      	b.n	800985c <__s2b+0x18>
 800987a:	9b08      	ldr	r3, [sp, #32]
 800987c:	2d09      	cmp	r5, #9
 800987e:	6143      	str	r3, [r0, #20]
 8009880:	f04f 0301 	mov.w	r3, #1
 8009884:	6103      	str	r3, [r0, #16]
 8009886:	dd16      	ble.n	80098b6 <__s2b+0x72>
 8009888:	f104 0909 	add.w	r9, r4, #9
 800988c:	46c8      	mov	r8, r9
 800988e:	442c      	add	r4, r5
 8009890:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009894:	4601      	mov	r1, r0
 8009896:	220a      	movs	r2, #10
 8009898:	4630      	mov	r0, r6
 800989a:	3b30      	subs	r3, #48	; 0x30
 800989c:	f7ff ff8c 	bl	80097b8 <__multadd>
 80098a0:	45a0      	cmp	r8, r4
 80098a2:	d1f5      	bne.n	8009890 <__s2b+0x4c>
 80098a4:	f1a5 0408 	sub.w	r4, r5, #8
 80098a8:	444c      	add	r4, r9
 80098aa:	1b2d      	subs	r5, r5, r4
 80098ac:	1963      	adds	r3, r4, r5
 80098ae:	42bb      	cmp	r3, r7
 80098b0:	db04      	blt.n	80098bc <__s2b+0x78>
 80098b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80098b6:	2509      	movs	r5, #9
 80098b8:	340a      	adds	r4, #10
 80098ba:	e7f6      	b.n	80098aa <__s2b+0x66>
 80098bc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80098c0:	4601      	mov	r1, r0
 80098c2:	220a      	movs	r2, #10
 80098c4:	4630      	mov	r0, r6
 80098c6:	3b30      	subs	r3, #48	; 0x30
 80098c8:	f7ff ff76 	bl	80097b8 <__multadd>
 80098cc:	e7ee      	b.n	80098ac <__s2b+0x68>
 80098ce:	bf00      	nop
 80098d0:	0800b631 	.word	0x0800b631
 80098d4:	0800b6bc 	.word	0x0800b6bc

080098d8 <__hi0bits>:
 80098d8:	0c02      	lsrs	r2, r0, #16
 80098da:	0412      	lsls	r2, r2, #16
 80098dc:	4603      	mov	r3, r0
 80098de:	b9ca      	cbnz	r2, 8009914 <__hi0bits+0x3c>
 80098e0:	0403      	lsls	r3, r0, #16
 80098e2:	2010      	movs	r0, #16
 80098e4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80098e8:	bf04      	itt	eq
 80098ea:	021b      	lsleq	r3, r3, #8
 80098ec:	3008      	addeq	r0, #8
 80098ee:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80098f2:	bf04      	itt	eq
 80098f4:	011b      	lsleq	r3, r3, #4
 80098f6:	3004      	addeq	r0, #4
 80098f8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80098fc:	bf04      	itt	eq
 80098fe:	009b      	lsleq	r3, r3, #2
 8009900:	3002      	addeq	r0, #2
 8009902:	2b00      	cmp	r3, #0
 8009904:	db05      	blt.n	8009912 <__hi0bits+0x3a>
 8009906:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800990a:	f100 0001 	add.w	r0, r0, #1
 800990e:	bf08      	it	eq
 8009910:	2020      	moveq	r0, #32
 8009912:	4770      	bx	lr
 8009914:	2000      	movs	r0, #0
 8009916:	e7e5      	b.n	80098e4 <__hi0bits+0xc>

08009918 <__lo0bits>:
 8009918:	6803      	ldr	r3, [r0, #0]
 800991a:	4602      	mov	r2, r0
 800991c:	f013 0007 	ands.w	r0, r3, #7
 8009920:	d00b      	beq.n	800993a <__lo0bits+0x22>
 8009922:	07d9      	lsls	r1, r3, #31
 8009924:	d421      	bmi.n	800996a <__lo0bits+0x52>
 8009926:	0798      	lsls	r0, r3, #30
 8009928:	bf49      	itett	mi
 800992a:	085b      	lsrmi	r3, r3, #1
 800992c:	089b      	lsrpl	r3, r3, #2
 800992e:	2001      	movmi	r0, #1
 8009930:	6013      	strmi	r3, [r2, #0]
 8009932:	bf5c      	itt	pl
 8009934:	2002      	movpl	r0, #2
 8009936:	6013      	strpl	r3, [r2, #0]
 8009938:	4770      	bx	lr
 800993a:	b299      	uxth	r1, r3
 800993c:	b909      	cbnz	r1, 8009942 <__lo0bits+0x2a>
 800993e:	2010      	movs	r0, #16
 8009940:	0c1b      	lsrs	r3, r3, #16
 8009942:	b2d9      	uxtb	r1, r3
 8009944:	b909      	cbnz	r1, 800994a <__lo0bits+0x32>
 8009946:	3008      	adds	r0, #8
 8009948:	0a1b      	lsrs	r3, r3, #8
 800994a:	0719      	lsls	r1, r3, #28
 800994c:	bf04      	itt	eq
 800994e:	091b      	lsreq	r3, r3, #4
 8009950:	3004      	addeq	r0, #4
 8009952:	0799      	lsls	r1, r3, #30
 8009954:	bf04      	itt	eq
 8009956:	089b      	lsreq	r3, r3, #2
 8009958:	3002      	addeq	r0, #2
 800995a:	07d9      	lsls	r1, r3, #31
 800995c:	d403      	bmi.n	8009966 <__lo0bits+0x4e>
 800995e:	085b      	lsrs	r3, r3, #1
 8009960:	f100 0001 	add.w	r0, r0, #1
 8009964:	d003      	beq.n	800996e <__lo0bits+0x56>
 8009966:	6013      	str	r3, [r2, #0]
 8009968:	4770      	bx	lr
 800996a:	2000      	movs	r0, #0
 800996c:	4770      	bx	lr
 800996e:	2020      	movs	r0, #32
 8009970:	4770      	bx	lr
	...

08009974 <__i2b>:
 8009974:	b510      	push	{r4, lr}
 8009976:	460c      	mov	r4, r1
 8009978:	2101      	movs	r1, #1
 800997a:	f7ff febb 	bl	80096f4 <_Balloc>
 800997e:	4602      	mov	r2, r0
 8009980:	b928      	cbnz	r0, 800998e <__i2b+0x1a>
 8009982:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009986:	4b04      	ldr	r3, [pc, #16]	; (8009998 <__i2b+0x24>)
 8009988:	4804      	ldr	r0, [pc, #16]	; (800999c <__i2b+0x28>)
 800998a:	f7fe fc77 	bl	800827c <__assert_func>
 800998e:	2301      	movs	r3, #1
 8009990:	6144      	str	r4, [r0, #20]
 8009992:	6103      	str	r3, [r0, #16]
 8009994:	bd10      	pop	{r4, pc}
 8009996:	bf00      	nop
 8009998:	0800b631 	.word	0x0800b631
 800999c:	0800b6bc 	.word	0x0800b6bc

080099a0 <__multiply>:
 80099a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099a4:	4691      	mov	r9, r2
 80099a6:	690a      	ldr	r2, [r1, #16]
 80099a8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80099ac:	460c      	mov	r4, r1
 80099ae:	429a      	cmp	r2, r3
 80099b0:	bfbe      	ittt	lt
 80099b2:	460b      	movlt	r3, r1
 80099b4:	464c      	movlt	r4, r9
 80099b6:	4699      	movlt	r9, r3
 80099b8:	6927      	ldr	r7, [r4, #16]
 80099ba:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80099be:	68a3      	ldr	r3, [r4, #8]
 80099c0:	6861      	ldr	r1, [r4, #4]
 80099c2:	eb07 060a 	add.w	r6, r7, sl
 80099c6:	42b3      	cmp	r3, r6
 80099c8:	b085      	sub	sp, #20
 80099ca:	bfb8      	it	lt
 80099cc:	3101      	addlt	r1, #1
 80099ce:	f7ff fe91 	bl	80096f4 <_Balloc>
 80099d2:	b930      	cbnz	r0, 80099e2 <__multiply+0x42>
 80099d4:	4602      	mov	r2, r0
 80099d6:	f240 115d 	movw	r1, #349	; 0x15d
 80099da:	4b43      	ldr	r3, [pc, #268]	; (8009ae8 <__multiply+0x148>)
 80099dc:	4843      	ldr	r0, [pc, #268]	; (8009aec <__multiply+0x14c>)
 80099de:	f7fe fc4d 	bl	800827c <__assert_func>
 80099e2:	f100 0514 	add.w	r5, r0, #20
 80099e6:	462b      	mov	r3, r5
 80099e8:	2200      	movs	r2, #0
 80099ea:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80099ee:	4543      	cmp	r3, r8
 80099f0:	d321      	bcc.n	8009a36 <__multiply+0x96>
 80099f2:	f104 0314 	add.w	r3, r4, #20
 80099f6:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80099fa:	f109 0314 	add.w	r3, r9, #20
 80099fe:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009a02:	9202      	str	r2, [sp, #8]
 8009a04:	1b3a      	subs	r2, r7, r4
 8009a06:	3a15      	subs	r2, #21
 8009a08:	f022 0203 	bic.w	r2, r2, #3
 8009a0c:	3204      	adds	r2, #4
 8009a0e:	f104 0115 	add.w	r1, r4, #21
 8009a12:	428f      	cmp	r7, r1
 8009a14:	bf38      	it	cc
 8009a16:	2204      	movcc	r2, #4
 8009a18:	9201      	str	r2, [sp, #4]
 8009a1a:	9a02      	ldr	r2, [sp, #8]
 8009a1c:	9303      	str	r3, [sp, #12]
 8009a1e:	429a      	cmp	r2, r3
 8009a20:	d80c      	bhi.n	8009a3c <__multiply+0x9c>
 8009a22:	2e00      	cmp	r6, #0
 8009a24:	dd03      	ble.n	8009a2e <__multiply+0x8e>
 8009a26:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d059      	beq.n	8009ae2 <__multiply+0x142>
 8009a2e:	6106      	str	r6, [r0, #16]
 8009a30:	b005      	add	sp, #20
 8009a32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a36:	f843 2b04 	str.w	r2, [r3], #4
 8009a3a:	e7d8      	b.n	80099ee <__multiply+0x4e>
 8009a3c:	f8b3 a000 	ldrh.w	sl, [r3]
 8009a40:	f1ba 0f00 	cmp.w	sl, #0
 8009a44:	d023      	beq.n	8009a8e <__multiply+0xee>
 8009a46:	46a9      	mov	r9, r5
 8009a48:	f04f 0c00 	mov.w	ip, #0
 8009a4c:	f104 0e14 	add.w	lr, r4, #20
 8009a50:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009a54:	f8d9 1000 	ldr.w	r1, [r9]
 8009a58:	fa1f fb82 	uxth.w	fp, r2
 8009a5c:	b289      	uxth	r1, r1
 8009a5e:	fb0a 110b 	mla	r1, sl, fp, r1
 8009a62:	4461      	add	r1, ip
 8009a64:	f8d9 c000 	ldr.w	ip, [r9]
 8009a68:	0c12      	lsrs	r2, r2, #16
 8009a6a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8009a6e:	fb0a c202 	mla	r2, sl, r2, ip
 8009a72:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009a76:	b289      	uxth	r1, r1
 8009a78:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009a7c:	4577      	cmp	r7, lr
 8009a7e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009a82:	f849 1b04 	str.w	r1, [r9], #4
 8009a86:	d8e3      	bhi.n	8009a50 <__multiply+0xb0>
 8009a88:	9a01      	ldr	r2, [sp, #4]
 8009a8a:	f845 c002 	str.w	ip, [r5, r2]
 8009a8e:	9a03      	ldr	r2, [sp, #12]
 8009a90:	3304      	adds	r3, #4
 8009a92:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009a96:	f1b9 0f00 	cmp.w	r9, #0
 8009a9a:	d020      	beq.n	8009ade <__multiply+0x13e>
 8009a9c:	46ae      	mov	lr, r5
 8009a9e:	f04f 0a00 	mov.w	sl, #0
 8009aa2:	6829      	ldr	r1, [r5, #0]
 8009aa4:	f104 0c14 	add.w	ip, r4, #20
 8009aa8:	f8bc b000 	ldrh.w	fp, [ip]
 8009aac:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009ab0:	b289      	uxth	r1, r1
 8009ab2:	fb09 220b 	mla	r2, r9, fp, r2
 8009ab6:	4492      	add	sl, r2
 8009ab8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009abc:	f84e 1b04 	str.w	r1, [lr], #4
 8009ac0:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009ac4:	f8be 1000 	ldrh.w	r1, [lr]
 8009ac8:	0c12      	lsrs	r2, r2, #16
 8009aca:	fb09 1102 	mla	r1, r9, r2, r1
 8009ace:	4567      	cmp	r7, ip
 8009ad0:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009ad4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009ad8:	d8e6      	bhi.n	8009aa8 <__multiply+0x108>
 8009ada:	9a01      	ldr	r2, [sp, #4]
 8009adc:	50a9      	str	r1, [r5, r2]
 8009ade:	3504      	adds	r5, #4
 8009ae0:	e79b      	b.n	8009a1a <__multiply+0x7a>
 8009ae2:	3e01      	subs	r6, #1
 8009ae4:	e79d      	b.n	8009a22 <__multiply+0x82>
 8009ae6:	bf00      	nop
 8009ae8:	0800b631 	.word	0x0800b631
 8009aec:	0800b6bc 	.word	0x0800b6bc

08009af0 <__pow5mult>:
 8009af0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009af4:	4615      	mov	r5, r2
 8009af6:	f012 0203 	ands.w	r2, r2, #3
 8009afa:	4606      	mov	r6, r0
 8009afc:	460f      	mov	r7, r1
 8009afe:	d007      	beq.n	8009b10 <__pow5mult+0x20>
 8009b00:	4c25      	ldr	r4, [pc, #148]	; (8009b98 <__pow5mult+0xa8>)
 8009b02:	3a01      	subs	r2, #1
 8009b04:	2300      	movs	r3, #0
 8009b06:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009b0a:	f7ff fe55 	bl	80097b8 <__multadd>
 8009b0e:	4607      	mov	r7, r0
 8009b10:	10ad      	asrs	r5, r5, #2
 8009b12:	d03d      	beq.n	8009b90 <__pow5mult+0xa0>
 8009b14:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009b16:	b97c      	cbnz	r4, 8009b38 <__pow5mult+0x48>
 8009b18:	2010      	movs	r0, #16
 8009b1a:	f7ff fdc3 	bl	80096a4 <malloc>
 8009b1e:	4602      	mov	r2, r0
 8009b20:	6270      	str	r0, [r6, #36]	; 0x24
 8009b22:	b928      	cbnz	r0, 8009b30 <__pow5mult+0x40>
 8009b24:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009b28:	4b1c      	ldr	r3, [pc, #112]	; (8009b9c <__pow5mult+0xac>)
 8009b2a:	481d      	ldr	r0, [pc, #116]	; (8009ba0 <__pow5mult+0xb0>)
 8009b2c:	f7fe fba6 	bl	800827c <__assert_func>
 8009b30:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009b34:	6004      	str	r4, [r0, #0]
 8009b36:	60c4      	str	r4, [r0, #12]
 8009b38:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009b3c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009b40:	b94c      	cbnz	r4, 8009b56 <__pow5mult+0x66>
 8009b42:	f240 2171 	movw	r1, #625	; 0x271
 8009b46:	4630      	mov	r0, r6
 8009b48:	f7ff ff14 	bl	8009974 <__i2b>
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	4604      	mov	r4, r0
 8009b50:	f8c8 0008 	str.w	r0, [r8, #8]
 8009b54:	6003      	str	r3, [r0, #0]
 8009b56:	f04f 0900 	mov.w	r9, #0
 8009b5a:	07eb      	lsls	r3, r5, #31
 8009b5c:	d50a      	bpl.n	8009b74 <__pow5mult+0x84>
 8009b5e:	4639      	mov	r1, r7
 8009b60:	4622      	mov	r2, r4
 8009b62:	4630      	mov	r0, r6
 8009b64:	f7ff ff1c 	bl	80099a0 <__multiply>
 8009b68:	4680      	mov	r8, r0
 8009b6a:	4639      	mov	r1, r7
 8009b6c:	4630      	mov	r0, r6
 8009b6e:	f7ff fe01 	bl	8009774 <_Bfree>
 8009b72:	4647      	mov	r7, r8
 8009b74:	106d      	asrs	r5, r5, #1
 8009b76:	d00b      	beq.n	8009b90 <__pow5mult+0xa0>
 8009b78:	6820      	ldr	r0, [r4, #0]
 8009b7a:	b938      	cbnz	r0, 8009b8c <__pow5mult+0x9c>
 8009b7c:	4622      	mov	r2, r4
 8009b7e:	4621      	mov	r1, r4
 8009b80:	4630      	mov	r0, r6
 8009b82:	f7ff ff0d 	bl	80099a0 <__multiply>
 8009b86:	6020      	str	r0, [r4, #0]
 8009b88:	f8c0 9000 	str.w	r9, [r0]
 8009b8c:	4604      	mov	r4, r0
 8009b8e:	e7e4      	b.n	8009b5a <__pow5mult+0x6a>
 8009b90:	4638      	mov	r0, r7
 8009b92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b96:	bf00      	nop
 8009b98:	0800b808 	.word	0x0800b808
 8009b9c:	0800b418 	.word	0x0800b418
 8009ba0:	0800b6bc 	.word	0x0800b6bc

08009ba4 <__lshift>:
 8009ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ba8:	460c      	mov	r4, r1
 8009baa:	4607      	mov	r7, r0
 8009bac:	4691      	mov	r9, r2
 8009bae:	6923      	ldr	r3, [r4, #16]
 8009bb0:	6849      	ldr	r1, [r1, #4]
 8009bb2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009bb6:	68a3      	ldr	r3, [r4, #8]
 8009bb8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009bbc:	f108 0601 	add.w	r6, r8, #1
 8009bc0:	42b3      	cmp	r3, r6
 8009bc2:	db0b      	blt.n	8009bdc <__lshift+0x38>
 8009bc4:	4638      	mov	r0, r7
 8009bc6:	f7ff fd95 	bl	80096f4 <_Balloc>
 8009bca:	4605      	mov	r5, r0
 8009bcc:	b948      	cbnz	r0, 8009be2 <__lshift+0x3e>
 8009bce:	4602      	mov	r2, r0
 8009bd0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009bd4:	4b29      	ldr	r3, [pc, #164]	; (8009c7c <__lshift+0xd8>)
 8009bd6:	482a      	ldr	r0, [pc, #168]	; (8009c80 <__lshift+0xdc>)
 8009bd8:	f7fe fb50 	bl	800827c <__assert_func>
 8009bdc:	3101      	adds	r1, #1
 8009bde:	005b      	lsls	r3, r3, #1
 8009be0:	e7ee      	b.n	8009bc0 <__lshift+0x1c>
 8009be2:	2300      	movs	r3, #0
 8009be4:	f100 0114 	add.w	r1, r0, #20
 8009be8:	f100 0210 	add.w	r2, r0, #16
 8009bec:	4618      	mov	r0, r3
 8009bee:	4553      	cmp	r3, sl
 8009bf0:	db37      	blt.n	8009c62 <__lshift+0xbe>
 8009bf2:	6920      	ldr	r0, [r4, #16]
 8009bf4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009bf8:	f104 0314 	add.w	r3, r4, #20
 8009bfc:	f019 091f 	ands.w	r9, r9, #31
 8009c00:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009c04:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009c08:	d02f      	beq.n	8009c6a <__lshift+0xc6>
 8009c0a:	468a      	mov	sl, r1
 8009c0c:	f04f 0c00 	mov.w	ip, #0
 8009c10:	f1c9 0e20 	rsb	lr, r9, #32
 8009c14:	681a      	ldr	r2, [r3, #0]
 8009c16:	fa02 f209 	lsl.w	r2, r2, r9
 8009c1a:	ea42 020c 	orr.w	r2, r2, ip
 8009c1e:	f84a 2b04 	str.w	r2, [sl], #4
 8009c22:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c26:	4298      	cmp	r0, r3
 8009c28:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009c2c:	d8f2      	bhi.n	8009c14 <__lshift+0x70>
 8009c2e:	1b03      	subs	r3, r0, r4
 8009c30:	3b15      	subs	r3, #21
 8009c32:	f023 0303 	bic.w	r3, r3, #3
 8009c36:	3304      	adds	r3, #4
 8009c38:	f104 0215 	add.w	r2, r4, #21
 8009c3c:	4290      	cmp	r0, r2
 8009c3e:	bf38      	it	cc
 8009c40:	2304      	movcc	r3, #4
 8009c42:	f841 c003 	str.w	ip, [r1, r3]
 8009c46:	f1bc 0f00 	cmp.w	ip, #0
 8009c4a:	d001      	beq.n	8009c50 <__lshift+0xac>
 8009c4c:	f108 0602 	add.w	r6, r8, #2
 8009c50:	3e01      	subs	r6, #1
 8009c52:	4638      	mov	r0, r7
 8009c54:	4621      	mov	r1, r4
 8009c56:	612e      	str	r6, [r5, #16]
 8009c58:	f7ff fd8c 	bl	8009774 <_Bfree>
 8009c5c:	4628      	mov	r0, r5
 8009c5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c62:	f842 0f04 	str.w	r0, [r2, #4]!
 8009c66:	3301      	adds	r3, #1
 8009c68:	e7c1      	b.n	8009bee <__lshift+0x4a>
 8009c6a:	3904      	subs	r1, #4
 8009c6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c70:	4298      	cmp	r0, r3
 8009c72:	f841 2f04 	str.w	r2, [r1, #4]!
 8009c76:	d8f9      	bhi.n	8009c6c <__lshift+0xc8>
 8009c78:	e7ea      	b.n	8009c50 <__lshift+0xac>
 8009c7a:	bf00      	nop
 8009c7c:	0800b631 	.word	0x0800b631
 8009c80:	0800b6bc 	.word	0x0800b6bc

08009c84 <__mcmp>:
 8009c84:	4603      	mov	r3, r0
 8009c86:	690a      	ldr	r2, [r1, #16]
 8009c88:	6900      	ldr	r0, [r0, #16]
 8009c8a:	b530      	push	{r4, r5, lr}
 8009c8c:	1a80      	subs	r0, r0, r2
 8009c8e:	d10d      	bne.n	8009cac <__mcmp+0x28>
 8009c90:	3314      	adds	r3, #20
 8009c92:	3114      	adds	r1, #20
 8009c94:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009c98:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009c9c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009ca0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009ca4:	4295      	cmp	r5, r2
 8009ca6:	d002      	beq.n	8009cae <__mcmp+0x2a>
 8009ca8:	d304      	bcc.n	8009cb4 <__mcmp+0x30>
 8009caa:	2001      	movs	r0, #1
 8009cac:	bd30      	pop	{r4, r5, pc}
 8009cae:	42a3      	cmp	r3, r4
 8009cb0:	d3f4      	bcc.n	8009c9c <__mcmp+0x18>
 8009cb2:	e7fb      	b.n	8009cac <__mcmp+0x28>
 8009cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8009cb8:	e7f8      	b.n	8009cac <__mcmp+0x28>
	...

08009cbc <__mdiff>:
 8009cbc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cc0:	460d      	mov	r5, r1
 8009cc2:	4607      	mov	r7, r0
 8009cc4:	4611      	mov	r1, r2
 8009cc6:	4628      	mov	r0, r5
 8009cc8:	4614      	mov	r4, r2
 8009cca:	f7ff ffdb 	bl	8009c84 <__mcmp>
 8009cce:	1e06      	subs	r6, r0, #0
 8009cd0:	d111      	bne.n	8009cf6 <__mdiff+0x3a>
 8009cd2:	4631      	mov	r1, r6
 8009cd4:	4638      	mov	r0, r7
 8009cd6:	f7ff fd0d 	bl	80096f4 <_Balloc>
 8009cda:	4602      	mov	r2, r0
 8009cdc:	b928      	cbnz	r0, 8009cea <__mdiff+0x2e>
 8009cde:	f240 2132 	movw	r1, #562	; 0x232
 8009ce2:	4b3a      	ldr	r3, [pc, #232]	; (8009dcc <__mdiff+0x110>)
 8009ce4:	483a      	ldr	r0, [pc, #232]	; (8009dd0 <__mdiff+0x114>)
 8009ce6:	f7fe fac9 	bl	800827c <__assert_func>
 8009cea:	2301      	movs	r3, #1
 8009cec:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009cf0:	4610      	mov	r0, r2
 8009cf2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cf6:	bfa4      	itt	ge
 8009cf8:	4623      	movge	r3, r4
 8009cfa:	462c      	movge	r4, r5
 8009cfc:	4638      	mov	r0, r7
 8009cfe:	6861      	ldr	r1, [r4, #4]
 8009d00:	bfa6      	itte	ge
 8009d02:	461d      	movge	r5, r3
 8009d04:	2600      	movge	r6, #0
 8009d06:	2601      	movlt	r6, #1
 8009d08:	f7ff fcf4 	bl	80096f4 <_Balloc>
 8009d0c:	4602      	mov	r2, r0
 8009d0e:	b918      	cbnz	r0, 8009d18 <__mdiff+0x5c>
 8009d10:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009d14:	4b2d      	ldr	r3, [pc, #180]	; (8009dcc <__mdiff+0x110>)
 8009d16:	e7e5      	b.n	8009ce4 <__mdiff+0x28>
 8009d18:	f102 0814 	add.w	r8, r2, #20
 8009d1c:	46c2      	mov	sl, r8
 8009d1e:	f04f 0c00 	mov.w	ip, #0
 8009d22:	6927      	ldr	r7, [r4, #16]
 8009d24:	60c6      	str	r6, [r0, #12]
 8009d26:	692e      	ldr	r6, [r5, #16]
 8009d28:	f104 0014 	add.w	r0, r4, #20
 8009d2c:	f105 0914 	add.w	r9, r5, #20
 8009d30:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8009d34:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009d38:	3410      	adds	r4, #16
 8009d3a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8009d3e:	f859 3b04 	ldr.w	r3, [r9], #4
 8009d42:	fa1f f18b 	uxth.w	r1, fp
 8009d46:	448c      	add	ip, r1
 8009d48:	b299      	uxth	r1, r3
 8009d4a:	0c1b      	lsrs	r3, r3, #16
 8009d4c:	ebac 0101 	sub.w	r1, ip, r1
 8009d50:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009d54:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009d58:	b289      	uxth	r1, r1
 8009d5a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8009d5e:	454e      	cmp	r6, r9
 8009d60:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009d64:	f84a 3b04 	str.w	r3, [sl], #4
 8009d68:	d8e7      	bhi.n	8009d3a <__mdiff+0x7e>
 8009d6a:	1b73      	subs	r3, r6, r5
 8009d6c:	3b15      	subs	r3, #21
 8009d6e:	f023 0303 	bic.w	r3, r3, #3
 8009d72:	3515      	adds	r5, #21
 8009d74:	3304      	adds	r3, #4
 8009d76:	42ae      	cmp	r6, r5
 8009d78:	bf38      	it	cc
 8009d7a:	2304      	movcc	r3, #4
 8009d7c:	4418      	add	r0, r3
 8009d7e:	4443      	add	r3, r8
 8009d80:	461e      	mov	r6, r3
 8009d82:	4605      	mov	r5, r0
 8009d84:	4575      	cmp	r5, lr
 8009d86:	d30e      	bcc.n	8009da6 <__mdiff+0xea>
 8009d88:	f10e 0103 	add.w	r1, lr, #3
 8009d8c:	1a09      	subs	r1, r1, r0
 8009d8e:	f021 0103 	bic.w	r1, r1, #3
 8009d92:	3803      	subs	r0, #3
 8009d94:	4586      	cmp	lr, r0
 8009d96:	bf38      	it	cc
 8009d98:	2100      	movcc	r1, #0
 8009d9a:	4419      	add	r1, r3
 8009d9c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8009da0:	b18b      	cbz	r3, 8009dc6 <__mdiff+0x10a>
 8009da2:	6117      	str	r7, [r2, #16]
 8009da4:	e7a4      	b.n	8009cf0 <__mdiff+0x34>
 8009da6:	f855 8b04 	ldr.w	r8, [r5], #4
 8009daa:	fa1f f188 	uxth.w	r1, r8
 8009dae:	4461      	add	r1, ip
 8009db0:	140c      	asrs	r4, r1, #16
 8009db2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009db6:	b289      	uxth	r1, r1
 8009db8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009dbc:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8009dc0:	f846 1b04 	str.w	r1, [r6], #4
 8009dc4:	e7de      	b.n	8009d84 <__mdiff+0xc8>
 8009dc6:	3f01      	subs	r7, #1
 8009dc8:	e7e8      	b.n	8009d9c <__mdiff+0xe0>
 8009dca:	bf00      	nop
 8009dcc:	0800b631 	.word	0x0800b631
 8009dd0:	0800b6bc 	.word	0x0800b6bc

08009dd4 <__ulp>:
 8009dd4:	4b11      	ldr	r3, [pc, #68]	; (8009e1c <__ulp+0x48>)
 8009dd6:	400b      	ands	r3, r1
 8009dd8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	dd02      	ble.n	8009de6 <__ulp+0x12>
 8009de0:	2000      	movs	r0, #0
 8009de2:	4619      	mov	r1, r3
 8009de4:	4770      	bx	lr
 8009de6:	425b      	negs	r3, r3
 8009de8:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8009dec:	f04f 0000 	mov.w	r0, #0
 8009df0:	f04f 0100 	mov.w	r1, #0
 8009df4:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009df8:	da04      	bge.n	8009e04 <__ulp+0x30>
 8009dfa:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009dfe:	fa43 f102 	asr.w	r1, r3, r2
 8009e02:	4770      	bx	lr
 8009e04:	f1a2 0314 	sub.w	r3, r2, #20
 8009e08:	2b1e      	cmp	r3, #30
 8009e0a:	bfd6      	itet	le
 8009e0c:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8009e10:	2301      	movgt	r3, #1
 8009e12:	fa22 f303 	lsrle.w	r3, r2, r3
 8009e16:	4618      	mov	r0, r3
 8009e18:	4770      	bx	lr
 8009e1a:	bf00      	nop
 8009e1c:	7ff00000 	.word	0x7ff00000

08009e20 <__b2d>:
 8009e20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e24:	6907      	ldr	r7, [r0, #16]
 8009e26:	f100 0914 	add.w	r9, r0, #20
 8009e2a:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8009e2e:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8009e32:	f1a7 0804 	sub.w	r8, r7, #4
 8009e36:	4630      	mov	r0, r6
 8009e38:	f7ff fd4e 	bl	80098d8 <__hi0bits>
 8009e3c:	f1c0 0320 	rsb	r3, r0, #32
 8009e40:	280a      	cmp	r0, #10
 8009e42:	600b      	str	r3, [r1, #0]
 8009e44:	491f      	ldr	r1, [pc, #124]	; (8009ec4 <__b2d+0xa4>)
 8009e46:	dc17      	bgt.n	8009e78 <__b2d+0x58>
 8009e48:	45c1      	cmp	r9, r8
 8009e4a:	bf28      	it	cs
 8009e4c:	2200      	movcs	r2, #0
 8009e4e:	f1c0 0c0b 	rsb	ip, r0, #11
 8009e52:	fa26 f30c 	lsr.w	r3, r6, ip
 8009e56:	bf38      	it	cc
 8009e58:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8009e5c:	ea43 0501 	orr.w	r5, r3, r1
 8009e60:	f100 0315 	add.w	r3, r0, #21
 8009e64:	fa06 f303 	lsl.w	r3, r6, r3
 8009e68:	fa22 f20c 	lsr.w	r2, r2, ip
 8009e6c:	ea43 0402 	orr.w	r4, r3, r2
 8009e70:	4620      	mov	r0, r4
 8009e72:	4629      	mov	r1, r5
 8009e74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e78:	45c1      	cmp	r9, r8
 8009e7a:	bf2e      	itee	cs
 8009e7c:	2200      	movcs	r2, #0
 8009e7e:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8009e82:	f1a7 0808 	subcc.w	r8, r7, #8
 8009e86:	f1b0 030b 	subs.w	r3, r0, #11
 8009e8a:	d016      	beq.n	8009eba <__b2d+0x9a>
 8009e8c:	f1c3 0720 	rsb	r7, r3, #32
 8009e90:	fa22 f107 	lsr.w	r1, r2, r7
 8009e94:	45c8      	cmp	r8, r9
 8009e96:	fa06 f603 	lsl.w	r6, r6, r3
 8009e9a:	ea46 0601 	orr.w	r6, r6, r1
 8009e9e:	bf94      	ite	ls
 8009ea0:	2100      	movls	r1, #0
 8009ea2:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8009ea6:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8009eaa:	fa02 f003 	lsl.w	r0, r2, r3
 8009eae:	40f9      	lsrs	r1, r7
 8009eb0:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009eb4:	ea40 0401 	orr.w	r4, r0, r1
 8009eb8:	e7da      	b.n	8009e70 <__b2d+0x50>
 8009eba:	4614      	mov	r4, r2
 8009ebc:	ea46 0501 	orr.w	r5, r6, r1
 8009ec0:	e7d6      	b.n	8009e70 <__b2d+0x50>
 8009ec2:	bf00      	nop
 8009ec4:	3ff00000 	.word	0x3ff00000

08009ec8 <__d2b>:
 8009ec8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009ecc:	2101      	movs	r1, #1
 8009ece:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8009ed2:	4690      	mov	r8, r2
 8009ed4:	461d      	mov	r5, r3
 8009ed6:	f7ff fc0d 	bl	80096f4 <_Balloc>
 8009eda:	4604      	mov	r4, r0
 8009edc:	b930      	cbnz	r0, 8009eec <__d2b+0x24>
 8009ede:	4602      	mov	r2, r0
 8009ee0:	f240 310a 	movw	r1, #778	; 0x30a
 8009ee4:	4b24      	ldr	r3, [pc, #144]	; (8009f78 <__d2b+0xb0>)
 8009ee6:	4825      	ldr	r0, [pc, #148]	; (8009f7c <__d2b+0xb4>)
 8009ee8:	f7fe f9c8 	bl	800827c <__assert_func>
 8009eec:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8009ef0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8009ef4:	bb2d      	cbnz	r5, 8009f42 <__d2b+0x7a>
 8009ef6:	9301      	str	r3, [sp, #4]
 8009ef8:	f1b8 0300 	subs.w	r3, r8, #0
 8009efc:	d026      	beq.n	8009f4c <__d2b+0x84>
 8009efe:	4668      	mov	r0, sp
 8009f00:	9300      	str	r3, [sp, #0]
 8009f02:	f7ff fd09 	bl	8009918 <__lo0bits>
 8009f06:	9900      	ldr	r1, [sp, #0]
 8009f08:	b1f0      	cbz	r0, 8009f48 <__d2b+0x80>
 8009f0a:	9a01      	ldr	r2, [sp, #4]
 8009f0c:	f1c0 0320 	rsb	r3, r0, #32
 8009f10:	fa02 f303 	lsl.w	r3, r2, r3
 8009f14:	430b      	orrs	r3, r1
 8009f16:	40c2      	lsrs	r2, r0
 8009f18:	6163      	str	r3, [r4, #20]
 8009f1a:	9201      	str	r2, [sp, #4]
 8009f1c:	9b01      	ldr	r3, [sp, #4]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	bf14      	ite	ne
 8009f22:	2102      	movne	r1, #2
 8009f24:	2101      	moveq	r1, #1
 8009f26:	61a3      	str	r3, [r4, #24]
 8009f28:	6121      	str	r1, [r4, #16]
 8009f2a:	b1c5      	cbz	r5, 8009f5e <__d2b+0x96>
 8009f2c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009f30:	4405      	add	r5, r0
 8009f32:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009f36:	603d      	str	r5, [r7, #0]
 8009f38:	6030      	str	r0, [r6, #0]
 8009f3a:	4620      	mov	r0, r4
 8009f3c:	b002      	add	sp, #8
 8009f3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009f46:	e7d6      	b.n	8009ef6 <__d2b+0x2e>
 8009f48:	6161      	str	r1, [r4, #20]
 8009f4a:	e7e7      	b.n	8009f1c <__d2b+0x54>
 8009f4c:	a801      	add	r0, sp, #4
 8009f4e:	f7ff fce3 	bl	8009918 <__lo0bits>
 8009f52:	2101      	movs	r1, #1
 8009f54:	9b01      	ldr	r3, [sp, #4]
 8009f56:	6121      	str	r1, [r4, #16]
 8009f58:	6163      	str	r3, [r4, #20]
 8009f5a:	3020      	adds	r0, #32
 8009f5c:	e7e5      	b.n	8009f2a <__d2b+0x62>
 8009f5e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8009f62:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009f66:	6038      	str	r0, [r7, #0]
 8009f68:	6918      	ldr	r0, [r3, #16]
 8009f6a:	f7ff fcb5 	bl	80098d8 <__hi0bits>
 8009f6e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8009f72:	6031      	str	r1, [r6, #0]
 8009f74:	e7e1      	b.n	8009f3a <__d2b+0x72>
 8009f76:	bf00      	nop
 8009f78:	0800b631 	.word	0x0800b631
 8009f7c:	0800b6bc 	.word	0x0800b6bc

08009f80 <__ratio>:
 8009f80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f84:	4688      	mov	r8, r1
 8009f86:	4669      	mov	r1, sp
 8009f88:	4681      	mov	r9, r0
 8009f8a:	f7ff ff49 	bl	8009e20 <__b2d>
 8009f8e:	460f      	mov	r7, r1
 8009f90:	4604      	mov	r4, r0
 8009f92:	460d      	mov	r5, r1
 8009f94:	4640      	mov	r0, r8
 8009f96:	a901      	add	r1, sp, #4
 8009f98:	f7ff ff42 	bl	8009e20 <__b2d>
 8009f9c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009fa0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009fa4:	468b      	mov	fp, r1
 8009fa6:	eba3 0c02 	sub.w	ip, r3, r2
 8009faa:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009fae:	1a9b      	subs	r3, r3, r2
 8009fb0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	bfd5      	itete	le
 8009fb8:	460a      	movle	r2, r1
 8009fba:	462a      	movgt	r2, r5
 8009fbc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009fc0:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009fc4:	bfd8      	it	le
 8009fc6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009fca:	465b      	mov	r3, fp
 8009fcc:	4602      	mov	r2, r0
 8009fce:	4639      	mov	r1, r7
 8009fd0:	4620      	mov	r0, r4
 8009fd2:	f7f6 fbb5 	bl	8000740 <__aeabi_ddiv>
 8009fd6:	b003      	add	sp, #12
 8009fd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009fdc <__copybits>:
 8009fdc:	3901      	subs	r1, #1
 8009fde:	b570      	push	{r4, r5, r6, lr}
 8009fe0:	1149      	asrs	r1, r1, #5
 8009fe2:	6914      	ldr	r4, [r2, #16]
 8009fe4:	3101      	adds	r1, #1
 8009fe6:	f102 0314 	add.w	r3, r2, #20
 8009fea:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009fee:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009ff2:	1f05      	subs	r5, r0, #4
 8009ff4:	42a3      	cmp	r3, r4
 8009ff6:	d30c      	bcc.n	800a012 <__copybits+0x36>
 8009ff8:	1aa3      	subs	r3, r4, r2
 8009ffa:	3b11      	subs	r3, #17
 8009ffc:	f023 0303 	bic.w	r3, r3, #3
 800a000:	3211      	adds	r2, #17
 800a002:	42a2      	cmp	r2, r4
 800a004:	bf88      	it	hi
 800a006:	2300      	movhi	r3, #0
 800a008:	4418      	add	r0, r3
 800a00a:	2300      	movs	r3, #0
 800a00c:	4288      	cmp	r0, r1
 800a00e:	d305      	bcc.n	800a01c <__copybits+0x40>
 800a010:	bd70      	pop	{r4, r5, r6, pc}
 800a012:	f853 6b04 	ldr.w	r6, [r3], #4
 800a016:	f845 6f04 	str.w	r6, [r5, #4]!
 800a01a:	e7eb      	b.n	8009ff4 <__copybits+0x18>
 800a01c:	f840 3b04 	str.w	r3, [r0], #4
 800a020:	e7f4      	b.n	800a00c <__copybits+0x30>

0800a022 <__any_on>:
 800a022:	f100 0214 	add.w	r2, r0, #20
 800a026:	6900      	ldr	r0, [r0, #16]
 800a028:	114b      	asrs	r3, r1, #5
 800a02a:	4298      	cmp	r0, r3
 800a02c:	b510      	push	{r4, lr}
 800a02e:	db11      	blt.n	800a054 <__any_on+0x32>
 800a030:	dd0a      	ble.n	800a048 <__any_on+0x26>
 800a032:	f011 011f 	ands.w	r1, r1, #31
 800a036:	d007      	beq.n	800a048 <__any_on+0x26>
 800a038:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a03c:	fa24 f001 	lsr.w	r0, r4, r1
 800a040:	fa00 f101 	lsl.w	r1, r0, r1
 800a044:	428c      	cmp	r4, r1
 800a046:	d10b      	bne.n	800a060 <__any_on+0x3e>
 800a048:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a04c:	4293      	cmp	r3, r2
 800a04e:	d803      	bhi.n	800a058 <__any_on+0x36>
 800a050:	2000      	movs	r0, #0
 800a052:	bd10      	pop	{r4, pc}
 800a054:	4603      	mov	r3, r0
 800a056:	e7f7      	b.n	800a048 <__any_on+0x26>
 800a058:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a05c:	2900      	cmp	r1, #0
 800a05e:	d0f5      	beq.n	800a04c <__any_on+0x2a>
 800a060:	2001      	movs	r0, #1
 800a062:	e7f6      	b.n	800a052 <__any_on+0x30>

0800a064 <_calloc_r>:
 800a064:	b570      	push	{r4, r5, r6, lr}
 800a066:	fba1 5402 	umull	r5, r4, r1, r2
 800a06a:	b934      	cbnz	r4, 800a07a <_calloc_r+0x16>
 800a06c:	4629      	mov	r1, r5
 800a06e:	f000 f875 	bl	800a15c <_malloc_r>
 800a072:	4606      	mov	r6, r0
 800a074:	b928      	cbnz	r0, 800a082 <_calloc_r+0x1e>
 800a076:	4630      	mov	r0, r6
 800a078:	bd70      	pop	{r4, r5, r6, pc}
 800a07a:	220c      	movs	r2, #12
 800a07c:	2600      	movs	r6, #0
 800a07e:	6002      	str	r2, [r0, #0]
 800a080:	e7f9      	b.n	800a076 <_calloc_r+0x12>
 800a082:	462a      	mov	r2, r5
 800a084:	4621      	mov	r1, r4
 800a086:	f7fc fd61 	bl	8006b4c <memset>
 800a08a:	e7f4      	b.n	800a076 <_calloc_r+0x12>

0800a08c <_free_r>:
 800a08c:	b538      	push	{r3, r4, r5, lr}
 800a08e:	4605      	mov	r5, r0
 800a090:	2900      	cmp	r1, #0
 800a092:	d040      	beq.n	800a116 <_free_r+0x8a>
 800a094:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a098:	1f0c      	subs	r4, r1, #4
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	bfb8      	it	lt
 800a09e:	18e4      	addlt	r4, r4, r3
 800a0a0:	f000 feba 	bl	800ae18 <__malloc_lock>
 800a0a4:	4a1c      	ldr	r2, [pc, #112]	; (800a118 <_free_r+0x8c>)
 800a0a6:	6813      	ldr	r3, [r2, #0]
 800a0a8:	b933      	cbnz	r3, 800a0b8 <_free_r+0x2c>
 800a0aa:	6063      	str	r3, [r4, #4]
 800a0ac:	6014      	str	r4, [r2, #0]
 800a0ae:	4628      	mov	r0, r5
 800a0b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a0b4:	f000 beb6 	b.w	800ae24 <__malloc_unlock>
 800a0b8:	42a3      	cmp	r3, r4
 800a0ba:	d908      	bls.n	800a0ce <_free_r+0x42>
 800a0bc:	6820      	ldr	r0, [r4, #0]
 800a0be:	1821      	adds	r1, r4, r0
 800a0c0:	428b      	cmp	r3, r1
 800a0c2:	bf01      	itttt	eq
 800a0c4:	6819      	ldreq	r1, [r3, #0]
 800a0c6:	685b      	ldreq	r3, [r3, #4]
 800a0c8:	1809      	addeq	r1, r1, r0
 800a0ca:	6021      	streq	r1, [r4, #0]
 800a0cc:	e7ed      	b.n	800a0aa <_free_r+0x1e>
 800a0ce:	461a      	mov	r2, r3
 800a0d0:	685b      	ldr	r3, [r3, #4]
 800a0d2:	b10b      	cbz	r3, 800a0d8 <_free_r+0x4c>
 800a0d4:	42a3      	cmp	r3, r4
 800a0d6:	d9fa      	bls.n	800a0ce <_free_r+0x42>
 800a0d8:	6811      	ldr	r1, [r2, #0]
 800a0da:	1850      	adds	r0, r2, r1
 800a0dc:	42a0      	cmp	r0, r4
 800a0de:	d10b      	bne.n	800a0f8 <_free_r+0x6c>
 800a0e0:	6820      	ldr	r0, [r4, #0]
 800a0e2:	4401      	add	r1, r0
 800a0e4:	1850      	adds	r0, r2, r1
 800a0e6:	4283      	cmp	r3, r0
 800a0e8:	6011      	str	r1, [r2, #0]
 800a0ea:	d1e0      	bne.n	800a0ae <_free_r+0x22>
 800a0ec:	6818      	ldr	r0, [r3, #0]
 800a0ee:	685b      	ldr	r3, [r3, #4]
 800a0f0:	4401      	add	r1, r0
 800a0f2:	6011      	str	r1, [r2, #0]
 800a0f4:	6053      	str	r3, [r2, #4]
 800a0f6:	e7da      	b.n	800a0ae <_free_r+0x22>
 800a0f8:	d902      	bls.n	800a100 <_free_r+0x74>
 800a0fa:	230c      	movs	r3, #12
 800a0fc:	602b      	str	r3, [r5, #0]
 800a0fe:	e7d6      	b.n	800a0ae <_free_r+0x22>
 800a100:	6820      	ldr	r0, [r4, #0]
 800a102:	1821      	adds	r1, r4, r0
 800a104:	428b      	cmp	r3, r1
 800a106:	bf01      	itttt	eq
 800a108:	6819      	ldreq	r1, [r3, #0]
 800a10a:	685b      	ldreq	r3, [r3, #4]
 800a10c:	1809      	addeq	r1, r1, r0
 800a10e:	6021      	streq	r1, [r4, #0]
 800a110:	6063      	str	r3, [r4, #4]
 800a112:	6054      	str	r4, [r2, #4]
 800a114:	e7cb      	b.n	800a0ae <_free_r+0x22>
 800a116:	bd38      	pop	{r3, r4, r5, pc}
 800a118:	200025f4 	.word	0x200025f4

0800a11c <sbrk_aligned>:
 800a11c:	b570      	push	{r4, r5, r6, lr}
 800a11e:	4e0e      	ldr	r6, [pc, #56]	; (800a158 <sbrk_aligned+0x3c>)
 800a120:	460c      	mov	r4, r1
 800a122:	6831      	ldr	r1, [r6, #0]
 800a124:	4605      	mov	r5, r0
 800a126:	b911      	cbnz	r1, 800a12e <sbrk_aligned+0x12>
 800a128:	f000 fb46 	bl	800a7b8 <_sbrk_r>
 800a12c:	6030      	str	r0, [r6, #0]
 800a12e:	4621      	mov	r1, r4
 800a130:	4628      	mov	r0, r5
 800a132:	f000 fb41 	bl	800a7b8 <_sbrk_r>
 800a136:	1c43      	adds	r3, r0, #1
 800a138:	d00a      	beq.n	800a150 <sbrk_aligned+0x34>
 800a13a:	1cc4      	adds	r4, r0, #3
 800a13c:	f024 0403 	bic.w	r4, r4, #3
 800a140:	42a0      	cmp	r0, r4
 800a142:	d007      	beq.n	800a154 <sbrk_aligned+0x38>
 800a144:	1a21      	subs	r1, r4, r0
 800a146:	4628      	mov	r0, r5
 800a148:	f000 fb36 	bl	800a7b8 <_sbrk_r>
 800a14c:	3001      	adds	r0, #1
 800a14e:	d101      	bne.n	800a154 <sbrk_aligned+0x38>
 800a150:	f04f 34ff 	mov.w	r4, #4294967295
 800a154:	4620      	mov	r0, r4
 800a156:	bd70      	pop	{r4, r5, r6, pc}
 800a158:	200025f8 	.word	0x200025f8

0800a15c <_malloc_r>:
 800a15c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a160:	1ccd      	adds	r5, r1, #3
 800a162:	f025 0503 	bic.w	r5, r5, #3
 800a166:	3508      	adds	r5, #8
 800a168:	2d0c      	cmp	r5, #12
 800a16a:	bf38      	it	cc
 800a16c:	250c      	movcc	r5, #12
 800a16e:	2d00      	cmp	r5, #0
 800a170:	4607      	mov	r7, r0
 800a172:	db01      	blt.n	800a178 <_malloc_r+0x1c>
 800a174:	42a9      	cmp	r1, r5
 800a176:	d905      	bls.n	800a184 <_malloc_r+0x28>
 800a178:	230c      	movs	r3, #12
 800a17a:	2600      	movs	r6, #0
 800a17c:	603b      	str	r3, [r7, #0]
 800a17e:	4630      	mov	r0, r6
 800a180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a184:	4e2e      	ldr	r6, [pc, #184]	; (800a240 <_malloc_r+0xe4>)
 800a186:	f000 fe47 	bl	800ae18 <__malloc_lock>
 800a18a:	6833      	ldr	r3, [r6, #0]
 800a18c:	461c      	mov	r4, r3
 800a18e:	bb34      	cbnz	r4, 800a1de <_malloc_r+0x82>
 800a190:	4629      	mov	r1, r5
 800a192:	4638      	mov	r0, r7
 800a194:	f7ff ffc2 	bl	800a11c <sbrk_aligned>
 800a198:	1c43      	adds	r3, r0, #1
 800a19a:	4604      	mov	r4, r0
 800a19c:	d14d      	bne.n	800a23a <_malloc_r+0xde>
 800a19e:	6834      	ldr	r4, [r6, #0]
 800a1a0:	4626      	mov	r6, r4
 800a1a2:	2e00      	cmp	r6, #0
 800a1a4:	d140      	bne.n	800a228 <_malloc_r+0xcc>
 800a1a6:	6823      	ldr	r3, [r4, #0]
 800a1a8:	4631      	mov	r1, r6
 800a1aa:	4638      	mov	r0, r7
 800a1ac:	eb04 0803 	add.w	r8, r4, r3
 800a1b0:	f000 fb02 	bl	800a7b8 <_sbrk_r>
 800a1b4:	4580      	cmp	r8, r0
 800a1b6:	d13a      	bne.n	800a22e <_malloc_r+0xd2>
 800a1b8:	6821      	ldr	r1, [r4, #0]
 800a1ba:	3503      	adds	r5, #3
 800a1bc:	1a6d      	subs	r5, r5, r1
 800a1be:	f025 0503 	bic.w	r5, r5, #3
 800a1c2:	3508      	adds	r5, #8
 800a1c4:	2d0c      	cmp	r5, #12
 800a1c6:	bf38      	it	cc
 800a1c8:	250c      	movcc	r5, #12
 800a1ca:	4638      	mov	r0, r7
 800a1cc:	4629      	mov	r1, r5
 800a1ce:	f7ff ffa5 	bl	800a11c <sbrk_aligned>
 800a1d2:	3001      	adds	r0, #1
 800a1d4:	d02b      	beq.n	800a22e <_malloc_r+0xd2>
 800a1d6:	6823      	ldr	r3, [r4, #0]
 800a1d8:	442b      	add	r3, r5
 800a1da:	6023      	str	r3, [r4, #0]
 800a1dc:	e00e      	b.n	800a1fc <_malloc_r+0xa0>
 800a1de:	6822      	ldr	r2, [r4, #0]
 800a1e0:	1b52      	subs	r2, r2, r5
 800a1e2:	d41e      	bmi.n	800a222 <_malloc_r+0xc6>
 800a1e4:	2a0b      	cmp	r2, #11
 800a1e6:	d916      	bls.n	800a216 <_malloc_r+0xba>
 800a1e8:	1961      	adds	r1, r4, r5
 800a1ea:	42a3      	cmp	r3, r4
 800a1ec:	6025      	str	r5, [r4, #0]
 800a1ee:	bf18      	it	ne
 800a1f0:	6059      	strne	r1, [r3, #4]
 800a1f2:	6863      	ldr	r3, [r4, #4]
 800a1f4:	bf08      	it	eq
 800a1f6:	6031      	streq	r1, [r6, #0]
 800a1f8:	5162      	str	r2, [r4, r5]
 800a1fa:	604b      	str	r3, [r1, #4]
 800a1fc:	4638      	mov	r0, r7
 800a1fe:	f104 060b 	add.w	r6, r4, #11
 800a202:	f000 fe0f 	bl	800ae24 <__malloc_unlock>
 800a206:	f026 0607 	bic.w	r6, r6, #7
 800a20a:	1d23      	adds	r3, r4, #4
 800a20c:	1af2      	subs	r2, r6, r3
 800a20e:	d0b6      	beq.n	800a17e <_malloc_r+0x22>
 800a210:	1b9b      	subs	r3, r3, r6
 800a212:	50a3      	str	r3, [r4, r2]
 800a214:	e7b3      	b.n	800a17e <_malloc_r+0x22>
 800a216:	6862      	ldr	r2, [r4, #4]
 800a218:	42a3      	cmp	r3, r4
 800a21a:	bf0c      	ite	eq
 800a21c:	6032      	streq	r2, [r6, #0]
 800a21e:	605a      	strne	r2, [r3, #4]
 800a220:	e7ec      	b.n	800a1fc <_malloc_r+0xa0>
 800a222:	4623      	mov	r3, r4
 800a224:	6864      	ldr	r4, [r4, #4]
 800a226:	e7b2      	b.n	800a18e <_malloc_r+0x32>
 800a228:	4634      	mov	r4, r6
 800a22a:	6876      	ldr	r6, [r6, #4]
 800a22c:	e7b9      	b.n	800a1a2 <_malloc_r+0x46>
 800a22e:	230c      	movs	r3, #12
 800a230:	4638      	mov	r0, r7
 800a232:	603b      	str	r3, [r7, #0]
 800a234:	f000 fdf6 	bl	800ae24 <__malloc_unlock>
 800a238:	e7a1      	b.n	800a17e <_malloc_r+0x22>
 800a23a:	6025      	str	r5, [r4, #0]
 800a23c:	e7de      	b.n	800a1fc <_malloc_r+0xa0>
 800a23e:	bf00      	nop
 800a240:	200025f4 	.word	0x200025f4

0800a244 <__ssputs_r>:
 800a244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a248:	688e      	ldr	r6, [r1, #8]
 800a24a:	4682      	mov	sl, r0
 800a24c:	429e      	cmp	r6, r3
 800a24e:	460c      	mov	r4, r1
 800a250:	4690      	mov	r8, r2
 800a252:	461f      	mov	r7, r3
 800a254:	d838      	bhi.n	800a2c8 <__ssputs_r+0x84>
 800a256:	898a      	ldrh	r2, [r1, #12]
 800a258:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a25c:	d032      	beq.n	800a2c4 <__ssputs_r+0x80>
 800a25e:	6825      	ldr	r5, [r4, #0]
 800a260:	6909      	ldr	r1, [r1, #16]
 800a262:	3301      	adds	r3, #1
 800a264:	eba5 0901 	sub.w	r9, r5, r1
 800a268:	6965      	ldr	r5, [r4, #20]
 800a26a:	444b      	add	r3, r9
 800a26c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a270:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a274:	106d      	asrs	r5, r5, #1
 800a276:	429d      	cmp	r5, r3
 800a278:	bf38      	it	cc
 800a27a:	461d      	movcc	r5, r3
 800a27c:	0553      	lsls	r3, r2, #21
 800a27e:	d531      	bpl.n	800a2e4 <__ssputs_r+0xa0>
 800a280:	4629      	mov	r1, r5
 800a282:	f7ff ff6b 	bl	800a15c <_malloc_r>
 800a286:	4606      	mov	r6, r0
 800a288:	b950      	cbnz	r0, 800a2a0 <__ssputs_r+0x5c>
 800a28a:	230c      	movs	r3, #12
 800a28c:	f04f 30ff 	mov.w	r0, #4294967295
 800a290:	f8ca 3000 	str.w	r3, [sl]
 800a294:	89a3      	ldrh	r3, [r4, #12]
 800a296:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a29a:	81a3      	strh	r3, [r4, #12]
 800a29c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2a0:	464a      	mov	r2, r9
 800a2a2:	6921      	ldr	r1, [r4, #16]
 800a2a4:	f7fc fc44 	bl	8006b30 <memcpy>
 800a2a8:	89a3      	ldrh	r3, [r4, #12]
 800a2aa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a2ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2b2:	81a3      	strh	r3, [r4, #12]
 800a2b4:	6126      	str	r6, [r4, #16]
 800a2b6:	444e      	add	r6, r9
 800a2b8:	6026      	str	r6, [r4, #0]
 800a2ba:	463e      	mov	r6, r7
 800a2bc:	6165      	str	r5, [r4, #20]
 800a2be:	eba5 0509 	sub.w	r5, r5, r9
 800a2c2:	60a5      	str	r5, [r4, #8]
 800a2c4:	42be      	cmp	r6, r7
 800a2c6:	d900      	bls.n	800a2ca <__ssputs_r+0x86>
 800a2c8:	463e      	mov	r6, r7
 800a2ca:	4632      	mov	r2, r6
 800a2cc:	4641      	mov	r1, r8
 800a2ce:	6820      	ldr	r0, [r4, #0]
 800a2d0:	f000 fd88 	bl	800ade4 <memmove>
 800a2d4:	68a3      	ldr	r3, [r4, #8]
 800a2d6:	2000      	movs	r0, #0
 800a2d8:	1b9b      	subs	r3, r3, r6
 800a2da:	60a3      	str	r3, [r4, #8]
 800a2dc:	6823      	ldr	r3, [r4, #0]
 800a2de:	4433      	add	r3, r6
 800a2e0:	6023      	str	r3, [r4, #0]
 800a2e2:	e7db      	b.n	800a29c <__ssputs_r+0x58>
 800a2e4:	462a      	mov	r2, r5
 800a2e6:	f000 fda3 	bl	800ae30 <_realloc_r>
 800a2ea:	4606      	mov	r6, r0
 800a2ec:	2800      	cmp	r0, #0
 800a2ee:	d1e1      	bne.n	800a2b4 <__ssputs_r+0x70>
 800a2f0:	4650      	mov	r0, sl
 800a2f2:	6921      	ldr	r1, [r4, #16]
 800a2f4:	f7ff feca 	bl	800a08c <_free_r>
 800a2f8:	e7c7      	b.n	800a28a <__ssputs_r+0x46>
	...

0800a2fc <_svfiprintf_r>:
 800a2fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a300:	4698      	mov	r8, r3
 800a302:	898b      	ldrh	r3, [r1, #12]
 800a304:	4607      	mov	r7, r0
 800a306:	061b      	lsls	r3, r3, #24
 800a308:	460d      	mov	r5, r1
 800a30a:	4614      	mov	r4, r2
 800a30c:	b09d      	sub	sp, #116	; 0x74
 800a30e:	d50e      	bpl.n	800a32e <_svfiprintf_r+0x32>
 800a310:	690b      	ldr	r3, [r1, #16]
 800a312:	b963      	cbnz	r3, 800a32e <_svfiprintf_r+0x32>
 800a314:	2140      	movs	r1, #64	; 0x40
 800a316:	f7ff ff21 	bl	800a15c <_malloc_r>
 800a31a:	6028      	str	r0, [r5, #0]
 800a31c:	6128      	str	r0, [r5, #16]
 800a31e:	b920      	cbnz	r0, 800a32a <_svfiprintf_r+0x2e>
 800a320:	230c      	movs	r3, #12
 800a322:	603b      	str	r3, [r7, #0]
 800a324:	f04f 30ff 	mov.w	r0, #4294967295
 800a328:	e0d1      	b.n	800a4ce <_svfiprintf_r+0x1d2>
 800a32a:	2340      	movs	r3, #64	; 0x40
 800a32c:	616b      	str	r3, [r5, #20]
 800a32e:	2300      	movs	r3, #0
 800a330:	9309      	str	r3, [sp, #36]	; 0x24
 800a332:	2320      	movs	r3, #32
 800a334:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a338:	2330      	movs	r3, #48	; 0x30
 800a33a:	f04f 0901 	mov.w	r9, #1
 800a33e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a342:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a4e8 <_svfiprintf_r+0x1ec>
 800a346:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a34a:	4623      	mov	r3, r4
 800a34c:	469a      	mov	sl, r3
 800a34e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a352:	b10a      	cbz	r2, 800a358 <_svfiprintf_r+0x5c>
 800a354:	2a25      	cmp	r2, #37	; 0x25
 800a356:	d1f9      	bne.n	800a34c <_svfiprintf_r+0x50>
 800a358:	ebba 0b04 	subs.w	fp, sl, r4
 800a35c:	d00b      	beq.n	800a376 <_svfiprintf_r+0x7a>
 800a35e:	465b      	mov	r3, fp
 800a360:	4622      	mov	r2, r4
 800a362:	4629      	mov	r1, r5
 800a364:	4638      	mov	r0, r7
 800a366:	f7ff ff6d 	bl	800a244 <__ssputs_r>
 800a36a:	3001      	adds	r0, #1
 800a36c:	f000 80aa 	beq.w	800a4c4 <_svfiprintf_r+0x1c8>
 800a370:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a372:	445a      	add	r2, fp
 800a374:	9209      	str	r2, [sp, #36]	; 0x24
 800a376:	f89a 3000 	ldrb.w	r3, [sl]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	f000 80a2 	beq.w	800a4c4 <_svfiprintf_r+0x1c8>
 800a380:	2300      	movs	r3, #0
 800a382:	f04f 32ff 	mov.w	r2, #4294967295
 800a386:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a38a:	f10a 0a01 	add.w	sl, sl, #1
 800a38e:	9304      	str	r3, [sp, #16]
 800a390:	9307      	str	r3, [sp, #28]
 800a392:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a396:	931a      	str	r3, [sp, #104]	; 0x68
 800a398:	4654      	mov	r4, sl
 800a39a:	2205      	movs	r2, #5
 800a39c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3a0:	4851      	ldr	r0, [pc, #324]	; (800a4e8 <_svfiprintf_r+0x1ec>)
 800a3a2:	f7ff f999 	bl	80096d8 <memchr>
 800a3a6:	9a04      	ldr	r2, [sp, #16]
 800a3a8:	b9d8      	cbnz	r0, 800a3e2 <_svfiprintf_r+0xe6>
 800a3aa:	06d0      	lsls	r0, r2, #27
 800a3ac:	bf44      	itt	mi
 800a3ae:	2320      	movmi	r3, #32
 800a3b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a3b4:	0711      	lsls	r1, r2, #28
 800a3b6:	bf44      	itt	mi
 800a3b8:	232b      	movmi	r3, #43	; 0x2b
 800a3ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a3be:	f89a 3000 	ldrb.w	r3, [sl]
 800a3c2:	2b2a      	cmp	r3, #42	; 0x2a
 800a3c4:	d015      	beq.n	800a3f2 <_svfiprintf_r+0xf6>
 800a3c6:	4654      	mov	r4, sl
 800a3c8:	2000      	movs	r0, #0
 800a3ca:	f04f 0c0a 	mov.w	ip, #10
 800a3ce:	9a07      	ldr	r2, [sp, #28]
 800a3d0:	4621      	mov	r1, r4
 800a3d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a3d6:	3b30      	subs	r3, #48	; 0x30
 800a3d8:	2b09      	cmp	r3, #9
 800a3da:	d94e      	bls.n	800a47a <_svfiprintf_r+0x17e>
 800a3dc:	b1b0      	cbz	r0, 800a40c <_svfiprintf_r+0x110>
 800a3de:	9207      	str	r2, [sp, #28]
 800a3e0:	e014      	b.n	800a40c <_svfiprintf_r+0x110>
 800a3e2:	eba0 0308 	sub.w	r3, r0, r8
 800a3e6:	fa09 f303 	lsl.w	r3, r9, r3
 800a3ea:	4313      	orrs	r3, r2
 800a3ec:	46a2      	mov	sl, r4
 800a3ee:	9304      	str	r3, [sp, #16]
 800a3f0:	e7d2      	b.n	800a398 <_svfiprintf_r+0x9c>
 800a3f2:	9b03      	ldr	r3, [sp, #12]
 800a3f4:	1d19      	adds	r1, r3, #4
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	9103      	str	r1, [sp, #12]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	bfbb      	ittet	lt
 800a3fe:	425b      	neglt	r3, r3
 800a400:	f042 0202 	orrlt.w	r2, r2, #2
 800a404:	9307      	strge	r3, [sp, #28]
 800a406:	9307      	strlt	r3, [sp, #28]
 800a408:	bfb8      	it	lt
 800a40a:	9204      	strlt	r2, [sp, #16]
 800a40c:	7823      	ldrb	r3, [r4, #0]
 800a40e:	2b2e      	cmp	r3, #46	; 0x2e
 800a410:	d10c      	bne.n	800a42c <_svfiprintf_r+0x130>
 800a412:	7863      	ldrb	r3, [r4, #1]
 800a414:	2b2a      	cmp	r3, #42	; 0x2a
 800a416:	d135      	bne.n	800a484 <_svfiprintf_r+0x188>
 800a418:	9b03      	ldr	r3, [sp, #12]
 800a41a:	3402      	adds	r4, #2
 800a41c:	1d1a      	adds	r2, r3, #4
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	9203      	str	r2, [sp, #12]
 800a422:	2b00      	cmp	r3, #0
 800a424:	bfb8      	it	lt
 800a426:	f04f 33ff 	movlt.w	r3, #4294967295
 800a42a:	9305      	str	r3, [sp, #20]
 800a42c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800a4ec <_svfiprintf_r+0x1f0>
 800a430:	2203      	movs	r2, #3
 800a432:	4650      	mov	r0, sl
 800a434:	7821      	ldrb	r1, [r4, #0]
 800a436:	f7ff f94f 	bl	80096d8 <memchr>
 800a43a:	b140      	cbz	r0, 800a44e <_svfiprintf_r+0x152>
 800a43c:	2340      	movs	r3, #64	; 0x40
 800a43e:	eba0 000a 	sub.w	r0, r0, sl
 800a442:	fa03 f000 	lsl.w	r0, r3, r0
 800a446:	9b04      	ldr	r3, [sp, #16]
 800a448:	3401      	adds	r4, #1
 800a44a:	4303      	orrs	r3, r0
 800a44c:	9304      	str	r3, [sp, #16]
 800a44e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a452:	2206      	movs	r2, #6
 800a454:	4826      	ldr	r0, [pc, #152]	; (800a4f0 <_svfiprintf_r+0x1f4>)
 800a456:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a45a:	f7ff f93d 	bl	80096d8 <memchr>
 800a45e:	2800      	cmp	r0, #0
 800a460:	d038      	beq.n	800a4d4 <_svfiprintf_r+0x1d8>
 800a462:	4b24      	ldr	r3, [pc, #144]	; (800a4f4 <_svfiprintf_r+0x1f8>)
 800a464:	bb1b      	cbnz	r3, 800a4ae <_svfiprintf_r+0x1b2>
 800a466:	9b03      	ldr	r3, [sp, #12]
 800a468:	3307      	adds	r3, #7
 800a46a:	f023 0307 	bic.w	r3, r3, #7
 800a46e:	3308      	adds	r3, #8
 800a470:	9303      	str	r3, [sp, #12]
 800a472:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a474:	4433      	add	r3, r6
 800a476:	9309      	str	r3, [sp, #36]	; 0x24
 800a478:	e767      	b.n	800a34a <_svfiprintf_r+0x4e>
 800a47a:	460c      	mov	r4, r1
 800a47c:	2001      	movs	r0, #1
 800a47e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a482:	e7a5      	b.n	800a3d0 <_svfiprintf_r+0xd4>
 800a484:	2300      	movs	r3, #0
 800a486:	f04f 0c0a 	mov.w	ip, #10
 800a48a:	4619      	mov	r1, r3
 800a48c:	3401      	adds	r4, #1
 800a48e:	9305      	str	r3, [sp, #20]
 800a490:	4620      	mov	r0, r4
 800a492:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a496:	3a30      	subs	r2, #48	; 0x30
 800a498:	2a09      	cmp	r2, #9
 800a49a:	d903      	bls.n	800a4a4 <_svfiprintf_r+0x1a8>
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d0c5      	beq.n	800a42c <_svfiprintf_r+0x130>
 800a4a0:	9105      	str	r1, [sp, #20]
 800a4a2:	e7c3      	b.n	800a42c <_svfiprintf_r+0x130>
 800a4a4:	4604      	mov	r4, r0
 800a4a6:	2301      	movs	r3, #1
 800a4a8:	fb0c 2101 	mla	r1, ip, r1, r2
 800a4ac:	e7f0      	b.n	800a490 <_svfiprintf_r+0x194>
 800a4ae:	ab03      	add	r3, sp, #12
 800a4b0:	9300      	str	r3, [sp, #0]
 800a4b2:	462a      	mov	r2, r5
 800a4b4:	4638      	mov	r0, r7
 800a4b6:	4b10      	ldr	r3, [pc, #64]	; (800a4f8 <_svfiprintf_r+0x1fc>)
 800a4b8:	a904      	add	r1, sp, #16
 800a4ba:	f7fc fbed 	bl	8006c98 <_printf_float>
 800a4be:	1c42      	adds	r2, r0, #1
 800a4c0:	4606      	mov	r6, r0
 800a4c2:	d1d6      	bne.n	800a472 <_svfiprintf_r+0x176>
 800a4c4:	89ab      	ldrh	r3, [r5, #12]
 800a4c6:	065b      	lsls	r3, r3, #25
 800a4c8:	f53f af2c 	bmi.w	800a324 <_svfiprintf_r+0x28>
 800a4cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a4ce:	b01d      	add	sp, #116	; 0x74
 800a4d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4d4:	ab03      	add	r3, sp, #12
 800a4d6:	9300      	str	r3, [sp, #0]
 800a4d8:	462a      	mov	r2, r5
 800a4da:	4638      	mov	r0, r7
 800a4dc:	4b06      	ldr	r3, [pc, #24]	; (800a4f8 <_svfiprintf_r+0x1fc>)
 800a4de:	a904      	add	r1, sp, #16
 800a4e0:	f7fc fe76 	bl	80071d0 <_printf_i>
 800a4e4:	e7eb      	b.n	800a4be <_svfiprintf_r+0x1c2>
 800a4e6:	bf00      	nop
 800a4e8:	0800b814 	.word	0x0800b814
 800a4ec:	0800b81a 	.word	0x0800b81a
 800a4f0:	0800b81e 	.word	0x0800b81e
 800a4f4:	08006c99 	.word	0x08006c99
 800a4f8:	0800a245 	.word	0x0800a245

0800a4fc <__sfputc_r>:
 800a4fc:	6893      	ldr	r3, [r2, #8]
 800a4fe:	b410      	push	{r4}
 800a500:	3b01      	subs	r3, #1
 800a502:	2b00      	cmp	r3, #0
 800a504:	6093      	str	r3, [r2, #8]
 800a506:	da07      	bge.n	800a518 <__sfputc_r+0x1c>
 800a508:	6994      	ldr	r4, [r2, #24]
 800a50a:	42a3      	cmp	r3, r4
 800a50c:	db01      	blt.n	800a512 <__sfputc_r+0x16>
 800a50e:	290a      	cmp	r1, #10
 800a510:	d102      	bne.n	800a518 <__sfputc_r+0x1c>
 800a512:	bc10      	pop	{r4}
 800a514:	f000 b974 	b.w	800a800 <__swbuf_r>
 800a518:	6813      	ldr	r3, [r2, #0]
 800a51a:	1c58      	adds	r0, r3, #1
 800a51c:	6010      	str	r0, [r2, #0]
 800a51e:	7019      	strb	r1, [r3, #0]
 800a520:	4608      	mov	r0, r1
 800a522:	bc10      	pop	{r4}
 800a524:	4770      	bx	lr

0800a526 <__sfputs_r>:
 800a526:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a528:	4606      	mov	r6, r0
 800a52a:	460f      	mov	r7, r1
 800a52c:	4614      	mov	r4, r2
 800a52e:	18d5      	adds	r5, r2, r3
 800a530:	42ac      	cmp	r4, r5
 800a532:	d101      	bne.n	800a538 <__sfputs_r+0x12>
 800a534:	2000      	movs	r0, #0
 800a536:	e007      	b.n	800a548 <__sfputs_r+0x22>
 800a538:	463a      	mov	r2, r7
 800a53a:	4630      	mov	r0, r6
 800a53c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a540:	f7ff ffdc 	bl	800a4fc <__sfputc_r>
 800a544:	1c43      	adds	r3, r0, #1
 800a546:	d1f3      	bne.n	800a530 <__sfputs_r+0xa>
 800a548:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a54c <_vfiprintf_r>:
 800a54c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a550:	460d      	mov	r5, r1
 800a552:	4614      	mov	r4, r2
 800a554:	4698      	mov	r8, r3
 800a556:	4606      	mov	r6, r0
 800a558:	b09d      	sub	sp, #116	; 0x74
 800a55a:	b118      	cbz	r0, 800a564 <_vfiprintf_r+0x18>
 800a55c:	6983      	ldr	r3, [r0, #24]
 800a55e:	b90b      	cbnz	r3, 800a564 <_vfiprintf_r+0x18>
 800a560:	f000 fb3a 	bl	800abd8 <__sinit>
 800a564:	4b89      	ldr	r3, [pc, #548]	; (800a78c <_vfiprintf_r+0x240>)
 800a566:	429d      	cmp	r5, r3
 800a568:	d11b      	bne.n	800a5a2 <_vfiprintf_r+0x56>
 800a56a:	6875      	ldr	r5, [r6, #4]
 800a56c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a56e:	07d9      	lsls	r1, r3, #31
 800a570:	d405      	bmi.n	800a57e <_vfiprintf_r+0x32>
 800a572:	89ab      	ldrh	r3, [r5, #12]
 800a574:	059a      	lsls	r2, r3, #22
 800a576:	d402      	bmi.n	800a57e <_vfiprintf_r+0x32>
 800a578:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a57a:	f000 fbcb 	bl	800ad14 <__retarget_lock_acquire_recursive>
 800a57e:	89ab      	ldrh	r3, [r5, #12]
 800a580:	071b      	lsls	r3, r3, #28
 800a582:	d501      	bpl.n	800a588 <_vfiprintf_r+0x3c>
 800a584:	692b      	ldr	r3, [r5, #16]
 800a586:	b9eb      	cbnz	r3, 800a5c4 <_vfiprintf_r+0x78>
 800a588:	4629      	mov	r1, r5
 800a58a:	4630      	mov	r0, r6
 800a58c:	f000 f998 	bl	800a8c0 <__swsetup_r>
 800a590:	b1c0      	cbz	r0, 800a5c4 <_vfiprintf_r+0x78>
 800a592:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a594:	07dc      	lsls	r4, r3, #31
 800a596:	d50e      	bpl.n	800a5b6 <_vfiprintf_r+0x6a>
 800a598:	f04f 30ff 	mov.w	r0, #4294967295
 800a59c:	b01d      	add	sp, #116	; 0x74
 800a59e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5a2:	4b7b      	ldr	r3, [pc, #492]	; (800a790 <_vfiprintf_r+0x244>)
 800a5a4:	429d      	cmp	r5, r3
 800a5a6:	d101      	bne.n	800a5ac <_vfiprintf_r+0x60>
 800a5a8:	68b5      	ldr	r5, [r6, #8]
 800a5aa:	e7df      	b.n	800a56c <_vfiprintf_r+0x20>
 800a5ac:	4b79      	ldr	r3, [pc, #484]	; (800a794 <_vfiprintf_r+0x248>)
 800a5ae:	429d      	cmp	r5, r3
 800a5b0:	bf08      	it	eq
 800a5b2:	68f5      	ldreq	r5, [r6, #12]
 800a5b4:	e7da      	b.n	800a56c <_vfiprintf_r+0x20>
 800a5b6:	89ab      	ldrh	r3, [r5, #12]
 800a5b8:	0598      	lsls	r0, r3, #22
 800a5ba:	d4ed      	bmi.n	800a598 <_vfiprintf_r+0x4c>
 800a5bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a5be:	f000 fbaa 	bl	800ad16 <__retarget_lock_release_recursive>
 800a5c2:	e7e9      	b.n	800a598 <_vfiprintf_r+0x4c>
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	9309      	str	r3, [sp, #36]	; 0x24
 800a5c8:	2320      	movs	r3, #32
 800a5ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a5ce:	2330      	movs	r3, #48	; 0x30
 800a5d0:	f04f 0901 	mov.w	r9, #1
 800a5d4:	f8cd 800c 	str.w	r8, [sp, #12]
 800a5d8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800a798 <_vfiprintf_r+0x24c>
 800a5dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a5e0:	4623      	mov	r3, r4
 800a5e2:	469a      	mov	sl, r3
 800a5e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a5e8:	b10a      	cbz	r2, 800a5ee <_vfiprintf_r+0xa2>
 800a5ea:	2a25      	cmp	r2, #37	; 0x25
 800a5ec:	d1f9      	bne.n	800a5e2 <_vfiprintf_r+0x96>
 800a5ee:	ebba 0b04 	subs.w	fp, sl, r4
 800a5f2:	d00b      	beq.n	800a60c <_vfiprintf_r+0xc0>
 800a5f4:	465b      	mov	r3, fp
 800a5f6:	4622      	mov	r2, r4
 800a5f8:	4629      	mov	r1, r5
 800a5fa:	4630      	mov	r0, r6
 800a5fc:	f7ff ff93 	bl	800a526 <__sfputs_r>
 800a600:	3001      	adds	r0, #1
 800a602:	f000 80aa 	beq.w	800a75a <_vfiprintf_r+0x20e>
 800a606:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a608:	445a      	add	r2, fp
 800a60a:	9209      	str	r2, [sp, #36]	; 0x24
 800a60c:	f89a 3000 	ldrb.w	r3, [sl]
 800a610:	2b00      	cmp	r3, #0
 800a612:	f000 80a2 	beq.w	800a75a <_vfiprintf_r+0x20e>
 800a616:	2300      	movs	r3, #0
 800a618:	f04f 32ff 	mov.w	r2, #4294967295
 800a61c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a620:	f10a 0a01 	add.w	sl, sl, #1
 800a624:	9304      	str	r3, [sp, #16]
 800a626:	9307      	str	r3, [sp, #28]
 800a628:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a62c:	931a      	str	r3, [sp, #104]	; 0x68
 800a62e:	4654      	mov	r4, sl
 800a630:	2205      	movs	r2, #5
 800a632:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a636:	4858      	ldr	r0, [pc, #352]	; (800a798 <_vfiprintf_r+0x24c>)
 800a638:	f7ff f84e 	bl	80096d8 <memchr>
 800a63c:	9a04      	ldr	r2, [sp, #16]
 800a63e:	b9d8      	cbnz	r0, 800a678 <_vfiprintf_r+0x12c>
 800a640:	06d1      	lsls	r1, r2, #27
 800a642:	bf44      	itt	mi
 800a644:	2320      	movmi	r3, #32
 800a646:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a64a:	0713      	lsls	r3, r2, #28
 800a64c:	bf44      	itt	mi
 800a64e:	232b      	movmi	r3, #43	; 0x2b
 800a650:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a654:	f89a 3000 	ldrb.w	r3, [sl]
 800a658:	2b2a      	cmp	r3, #42	; 0x2a
 800a65a:	d015      	beq.n	800a688 <_vfiprintf_r+0x13c>
 800a65c:	4654      	mov	r4, sl
 800a65e:	2000      	movs	r0, #0
 800a660:	f04f 0c0a 	mov.w	ip, #10
 800a664:	9a07      	ldr	r2, [sp, #28]
 800a666:	4621      	mov	r1, r4
 800a668:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a66c:	3b30      	subs	r3, #48	; 0x30
 800a66e:	2b09      	cmp	r3, #9
 800a670:	d94e      	bls.n	800a710 <_vfiprintf_r+0x1c4>
 800a672:	b1b0      	cbz	r0, 800a6a2 <_vfiprintf_r+0x156>
 800a674:	9207      	str	r2, [sp, #28]
 800a676:	e014      	b.n	800a6a2 <_vfiprintf_r+0x156>
 800a678:	eba0 0308 	sub.w	r3, r0, r8
 800a67c:	fa09 f303 	lsl.w	r3, r9, r3
 800a680:	4313      	orrs	r3, r2
 800a682:	46a2      	mov	sl, r4
 800a684:	9304      	str	r3, [sp, #16]
 800a686:	e7d2      	b.n	800a62e <_vfiprintf_r+0xe2>
 800a688:	9b03      	ldr	r3, [sp, #12]
 800a68a:	1d19      	adds	r1, r3, #4
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	9103      	str	r1, [sp, #12]
 800a690:	2b00      	cmp	r3, #0
 800a692:	bfbb      	ittet	lt
 800a694:	425b      	neglt	r3, r3
 800a696:	f042 0202 	orrlt.w	r2, r2, #2
 800a69a:	9307      	strge	r3, [sp, #28]
 800a69c:	9307      	strlt	r3, [sp, #28]
 800a69e:	bfb8      	it	lt
 800a6a0:	9204      	strlt	r2, [sp, #16]
 800a6a2:	7823      	ldrb	r3, [r4, #0]
 800a6a4:	2b2e      	cmp	r3, #46	; 0x2e
 800a6a6:	d10c      	bne.n	800a6c2 <_vfiprintf_r+0x176>
 800a6a8:	7863      	ldrb	r3, [r4, #1]
 800a6aa:	2b2a      	cmp	r3, #42	; 0x2a
 800a6ac:	d135      	bne.n	800a71a <_vfiprintf_r+0x1ce>
 800a6ae:	9b03      	ldr	r3, [sp, #12]
 800a6b0:	3402      	adds	r4, #2
 800a6b2:	1d1a      	adds	r2, r3, #4
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	9203      	str	r2, [sp, #12]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	bfb8      	it	lt
 800a6bc:	f04f 33ff 	movlt.w	r3, #4294967295
 800a6c0:	9305      	str	r3, [sp, #20]
 800a6c2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800a79c <_vfiprintf_r+0x250>
 800a6c6:	2203      	movs	r2, #3
 800a6c8:	4650      	mov	r0, sl
 800a6ca:	7821      	ldrb	r1, [r4, #0]
 800a6cc:	f7ff f804 	bl	80096d8 <memchr>
 800a6d0:	b140      	cbz	r0, 800a6e4 <_vfiprintf_r+0x198>
 800a6d2:	2340      	movs	r3, #64	; 0x40
 800a6d4:	eba0 000a 	sub.w	r0, r0, sl
 800a6d8:	fa03 f000 	lsl.w	r0, r3, r0
 800a6dc:	9b04      	ldr	r3, [sp, #16]
 800a6de:	3401      	adds	r4, #1
 800a6e0:	4303      	orrs	r3, r0
 800a6e2:	9304      	str	r3, [sp, #16]
 800a6e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6e8:	2206      	movs	r2, #6
 800a6ea:	482d      	ldr	r0, [pc, #180]	; (800a7a0 <_vfiprintf_r+0x254>)
 800a6ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a6f0:	f7fe fff2 	bl	80096d8 <memchr>
 800a6f4:	2800      	cmp	r0, #0
 800a6f6:	d03f      	beq.n	800a778 <_vfiprintf_r+0x22c>
 800a6f8:	4b2a      	ldr	r3, [pc, #168]	; (800a7a4 <_vfiprintf_r+0x258>)
 800a6fa:	bb1b      	cbnz	r3, 800a744 <_vfiprintf_r+0x1f8>
 800a6fc:	9b03      	ldr	r3, [sp, #12]
 800a6fe:	3307      	adds	r3, #7
 800a700:	f023 0307 	bic.w	r3, r3, #7
 800a704:	3308      	adds	r3, #8
 800a706:	9303      	str	r3, [sp, #12]
 800a708:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a70a:	443b      	add	r3, r7
 800a70c:	9309      	str	r3, [sp, #36]	; 0x24
 800a70e:	e767      	b.n	800a5e0 <_vfiprintf_r+0x94>
 800a710:	460c      	mov	r4, r1
 800a712:	2001      	movs	r0, #1
 800a714:	fb0c 3202 	mla	r2, ip, r2, r3
 800a718:	e7a5      	b.n	800a666 <_vfiprintf_r+0x11a>
 800a71a:	2300      	movs	r3, #0
 800a71c:	f04f 0c0a 	mov.w	ip, #10
 800a720:	4619      	mov	r1, r3
 800a722:	3401      	adds	r4, #1
 800a724:	9305      	str	r3, [sp, #20]
 800a726:	4620      	mov	r0, r4
 800a728:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a72c:	3a30      	subs	r2, #48	; 0x30
 800a72e:	2a09      	cmp	r2, #9
 800a730:	d903      	bls.n	800a73a <_vfiprintf_r+0x1ee>
 800a732:	2b00      	cmp	r3, #0
 800a734:	d0c5      	beq.n	800a6c2 <_vfiprintf_r+0x176>
 800a736:	9105      	str	r1, [sp, #20]
 800a738:	e7c3      	b.n	800a6c2 <_vfiprintf_r+0x176>
 800a73a:	4604      	mov	r4, r0
 800a73c:	2301      	movs	r3, #1
 800a73e:	fb0c 2101 	mla	r1, ip, r1, r2
 800a742:	e7f0      	b.n	800a726 <_vfiprintf_r+0x1da>
 800a744:	ab03      	add	r3, sp, #12
 800a746:	9300      	str	r3, [sp, #0]
 800a748:	462a      	mov	r2, r5
 800a74a:	4630      	mov	r0, r6
 800a74c:	4b16      	ldr	r3, [pc, #88]	; (800a7a8 <_vfiprintf_r+0x25c>)
 800a74e:	a904      	add	r1, sp, #16
 800a750:	f7fc faa2 	bl	8006c98 <_printf_float>
 800a754:	4607      	mov	r7, r0
 800a756:	1c78      	adds	r0, r7, #1
 800a758:	d1d6      	bne.n	800a708 <_vfiprintf_r+0x1bc>
 800a75a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a75c:	07d9      	lsls	r1, r3, #31
 800a75e:	d405      	bmi.n	800a76c <_vfiprintf_r+0x220>
 800a760:	89ab      	ldrh	r3, [r5, #12]
 800a762:	059a      	lsls	r2, r3, #22
 800a764:	d402      	bmi.n	800a76c <_vfiprintf_r+0x220>
 800a766:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a768:	f000 fad5 	bl	800ad16 <__retarget_lock_release_recursive>
 800a76c:	89ab      	ldrh	r3, [r5, #12]
 800a76e:	065b      	lsls	r3, r3, #25
 800a770:	f53f af12 	bmi.w	800a598 <_vfiprintf_r+0x4c>
 800a774:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a776:	e711      	b.n	800a59c <_vfiprintf_r+0x50>
 800a778:	ab03      	add	r3, sp, #12
 800a77a:	9300      	str	r3, [sp, #0]
 800a77c:	462a      	mov	r2, r5
 800a77e:	4630      	mov	r0, r6
 800a780:	4b09      	ldr	r3, [pc, #36]	; (800a7a8 <_vfiprintf_r+0x25c>)
 800a782:	a904      	add	r1, sp, #16
 800a784:	f7fc fd24 	bl	80071d0 <_printf_i>
 800a788:	e7e4      	b.n	800a754 <_vfiprintf_r+0x208>
 800a78a:	bf00      	nop
 800a78c:	0800b848 	.word	0x0800b848
 800a790:	0800b868 	.word	0x0800b868
 800a794:	0800b828 	.word	0x0800b828
 800a798:	0800b814 	.word	0x0800b814
 800a79c:	0800b81a 	.word	0x0800b81a
 800a7a0:	0800b81e 	.word	0x0800b81e
 800a7a4:	08006c99 	.word	0x08006c99
 800a7a8:	0800a527 	.word	0x0800a527

0800a7ac <nan>:
 800a7ac:	2000      	movs	r0, #0
 800a7ae:	4901      	ldr	r1, [pc, #4]	; (800a7b4 <nan+0x8>)
 800a7b0:	4770      	bx	lr
 800a7b2:	bf00      	nop
 800a7b4:	7ff80000 	.word	0x7ff80000

0800a7b8 <_sbrk_r>:
 800a7b8:	b538      	push	{r3, r4, r5, lr}
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	4d05      	ldr	r5, [pc, #20]	; (800a7d4 <_sbrk_r+0x1c>)
 800a7be:	4604      	mov	r4, r0
 800a7c0:	4608      	mov	r0, r1
 800a7c2:	602b      	str	r3, [r5, #0]
 800a7c4:	f7f7 fa30 	bl	8001c28 <_sbrk>
 800a7c8:	1c43      	adds	r3, r0, #1
 800a7ca:	d102      	bne.n	800a7d2 <_sbrk_r+0x1a>
 800a7cc:	682b      	ldr	r3, [r5, #0]
 800a7ce:	b103      	cbz	r3, 800a7d2 <_sbrk_r+0x1a>
 800a7d0:	6023      	str	r3, [r4, #0]
 800a7d2:	bd38      	pop	{r3, r4, r5, pc}
 800a7d4:	20002600 	.word	0x20002600

0800a7d8 <strncmp>:
 800a7d8:	4603      	mov	r3, r0
 800a7da:	b510      	push	{r4, lr}
 800a7dc:	b172      	cbz	r2, 800a7fc <strncmp+0x24>
 800a7de:	3901      	subs	r1, #1
 800a7e0:	1884      	adds	r4, r0, r2
 800a7e2:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a7e6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a7ea:	4290      	cmp	r0, r2
 800a7ec:	d101      	bne.n	800a7f2 <strncmp+0x1a>
 800a7ee:	42a3      	cmp	r3, r4
 800a7f0:	d101      	bne.n	800a7f6 <strncmp+0x1e>
 800a7f2:	1a80      	subs	r0, r0, r2
 800a7f4:	bd10      	pop	{r4, pc}
 800a7f6:	2800      	cmp	r0, #0
 800a7f8:	d1f3      	bne.n	800a7e2 <strncmp+0xa>
 800a7fa:	e7fa      	b.n	800a7f2 <strncmp+0x1a>
 800a7fc:	4610      	mov	r0, r2
 800a7fe:	e7f9      	b.n	800a7f4 <strncmp+0x1c>

0800a800 <__swbuf_r>:
 800a800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a802:	460e      	mov	r6, r1
 800a804:	4614      	mov	r4, r2
 800a806:	4605      	mov	r5, r0
 800a808:	b118      	cbz	r0, 800a812 <__swbuf_r+0x12>
 800a80a:	6983      	ldr	r3, [r0, #24]
 800a80c:	b90b      	cbnz	r3, 800a812 <__swbuf_r+0x12>
 800a80e:	f000 f9e3 	bl	800abd8 <__sinit>
 800a812:	4b21      	ldr	r3, [pc, #132]	; (800a898 <__swbuf_r+0x98>)
 800a814:	429c      	cmp	r4, r3
 800a816:	d12b      	bne.n	800a870 <__swbuf_r+0x70>
 800a818:	686c      	ldr	r4, [r5, #4]
 800a81a:	69a3      	ldr	r3, [r4, #24]
 800a81c:	60a3      	str	r3, [r4, #8]
 800a81e:	89a3      	ldrh	r3, [r4, #12]
 800a820:	071a      	lsls	r2, r3, #28
 800a822:	d52f      	bpl.n	800a884 <__swbuf_r+0x84>
 800a824:	6923      	ldr	r3, [r4, #16]
 800a826:	b36b      	cbz	r3, 800a884 <__swbuf_r+0x84>
 800a828:	6923      	ldr	r3, [r4, #16]
 800a82a:	6820      	ldr	r0, [r4, #0]
 800a82c:	b2f6      	uxtb	r6, r6
 800a82e:	1ac0      	subs	r0, r0, r3
 800a830:	6963      	ldr	r3, [r4, #20]
 800a832:	4637      	mov	r7, r6
 800a834:	4283      	cmp	r3, r0
 800a836:	dc04      	bgt.n	800a842 <__swbuf_r+0x42>
 800a838:	4621      	mov	r1, r4
 800a83a:	4628      	mov	r0, r5
 800a83c:	f000 f938 	bl	800aab0 <_fflush_r>
 800a840:	bb30      	cbnz	r0, 800a890 <__swbuf_r+0x90>
 800a842:	68a3      	ldr	r3, [r4, #8]
 800a844:	3001      	adds	r0, #1
 800a846:	3b01      	subs	r3, #1
 800a848:	60a3      	str	r3, [r4, #8]
 800a84a:	6823      	ldr	r3, [r4, #0]
 800a84c:	1c5a      	adds	r2, r3, #1
 800a84e:	6022      	str	r2, [r4, #0]
 800a850:	701e      	strb	r6, [r3, #0]
 800a852:	6963      	ldr	r3, [r4, #20]
 800a854:	4283      	cmp	r3, r0
 800a856:	d004      	beq.n	800a862 <__swbuf_r+0x62>
 800a858:	89a3      	ldrh	r3, [r4, #12]
 800a85a:	07db      	lsls	r3, r3, #31
 800a85c:	d506      	bpl.n	800a86c <__swbuf_r+0x6c>
 800a85e:	2e0a      	cmp	r6, #10
 800a860:	d104      	bne.n	800a86c <__swbuf_r+0x6c>
 800a862:	4621      	mov	r1, r4
 800a864:	4628      	mov	r0, r5
 800a866:	f000 f923 	bl	800aab0 <_fflush_r>
 800a86a:	b988      	cbnz	r0, 800a890 <__swbuf_r+0x90>
 800a86c:	4638      	mov	r0, r7
 800a86e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a870:	4b0a      	ldr	r3, [pc, #40]	; (800a89c <__swbuf_r+0x9c>)
 800a872:	429c      	cmp	r4, r3
 800a874:	d101      	bne.n	800a87a <__swbuf_r+0x7a>
 800a876:	68ac      	ldr	r4, [r5, #8]
 800a878:	e7cf      	b.n	800a81a <__swbuf_r+0x1a>
 800a87a:	4b09      	ldr	r3, [pc, #36]	; (800a8a0 <__swbuf_r+0xa0>)
 800a87c:	429c      	cmp	r4, r3
 800a87e:	bf08      	it	eq
 800a880:	68ec      	ldreq	r4, [r5, #12]
 800a882:	e7ca      	b.n	800a81a <__swbuf_r+0x1a>
 800a884:	4621      	mov	r1, r4
 800a886:	4628      	mov	r0, r5
 800a888:	f000 f81a 	bl	800a8c0 <__swsetup_r>
 800a88c:	2800      	cmp	r0, #0
 800a88e:	d0cb      	beq.n	800a828 <__swbuf_r+0x28>
 800a890:	f04f 37ff 	mov.w	r7, #4294967295
 800a894:	e7ea      	b.n	800a86c <__swbuf_r+0x6c>
 800a896:	bf00      	nop
 800a898:	0800b848 	.word	0x0800b848
 800a89c:	0800b868 	.word	0x0800b868
 800a8a0:	0800b828 	.word	0x0800b828

0800a8a4 <__ascii_wctomb>:
 800a8a4:	4603      	mov	r3, r0
 800a8a6:	4608      	mov	r0, r1
 800a8a8:	b141      	cbz	r1, 800a8bc <__ascii_wctomb+0x18>
 800a8aa:	2aff      	cmp	r2, #255	; 0xff
 800a8ac:	d904      	bls.n	800a8b8 <__ascii_wctomb+0x14>
 800a8ae:	228a      	movs	r2, #138	; 0x8a
 800a8b0:	f04f 30ff 	mov.w	r0, #4294967295
 800a8b4:	601a      	str	r2, [r3, #0]
 800a8b6:	4770      	bx	lr
 800a8b8:	2001      	movs	r0, #1
 800a8ba:	700a      	strb	r2, [r1, #0]
 800a8bc:	4770      	bx	lr
	...

0800a8c0 <__swsetup_r>:
 800a8c0:	4b32      	ldr	r3, [pc, #200]	; (800a98c <__swsetup_r+0xcc>)
 800a8c2:	b570      	push	{r4, r5, r6, lr}
 800a8c4:	681d      	ldr	r5, [r3, #0]
 800a8c6:	4606      	mov	r6, r0
 800a8c8:	460c      	mov	r4, r1
 800a8ca:	b125      	cbz	r5, 800a8d6 <__swsetup_r+0x16>
 800a8cc:	69ab      	ldr	r3, [r5, #24]
 800a8ce:	b913      	cbnz	r3, 800a8d6 <__swsetup_r+0x16>
 800a8d0:	4628      	mov	r0, r5
 800a8d2:	f000 f981 	bl	800abd8 <__sinit>
 800a8d6:	4b2e      	ldr	r3, [pc, #184]	; (800a990 <__swsetup_r+0xd0>)
 800a8d8:	429c      	cmp	r4, r3
 800a8da:	d10f      	bne.n	800a8fc <__swsetup_r+0x3c>
 800a8dc:	686c      	ldr	r4, [r5, #4]
 800a8de:	89a3      	ldrh	r3, [r4, #12]
 800a8e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a8e4:	0719      	lsls	r1, r3, #28
 800a8e6:	d42c      	bmi.n	800a942 <__swsetup_r+0x82>
 800a8e8:	06dd      	lsls	r5, r3, #27
 800a8ea:	d411      	bmi.n	800a910 <__swsetup_r+0x50>
 800a8ec:	2309      	movs	r3, #9
 800a8ee:	6033      	str	r3, [r6, #0]
 800a8f0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a8f4:	f04f 30ff 	mov.w	r0, #4294967295
 800a8f8:	81a3      	strh	r3, [r4, #12]
 800a8fa:	e03e      	b.n	800a97a <__swsetup_r+0xba>
 800a8fc:	4b25      	ldr	r3, [pc, #148]	; (800a994 <__swsetup_r+0xd4>)
 800a8fe:	429c      	cmp	r4, r3
 800a900:	d101      	bne.n	800a906 <__swsetup_r+0x46>
 800a902:	68ac      	ldr	r4, [r5, #8]
 800a904:	e7eb      	b.n	800a8de <__swsetup_r+0x1e>
 800a906:	4b24      	ldr	r3, [pc, #144]	; (800a998 <__swsetup_r+0xd8>)
 800a908:	429c      	cmp	r4, r3
 800a90a:	bf08      	it	eq
 800a90c:	68ec      	ldreq	r4, [r5, #12]
 800a90e:	e7e6      	b.n	800a8de <__swsetup_r+0x1e>
 800a910:	0758      	lsls	r0, r3, #29
 800a912:	d512      	bpl.n	800a93a <__swsetup_r+0x7a>
 800a914:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a916:	b141      	cbz	r1, 800a92a <__swsetup_r+0x6a>
 800a918:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a91c:	4299      	cmp	r1, r3
 800a91e:	d002      	beq.n	800a926 <__swsetup_r+0x66>
 800a920:	4630      	mov	r0, r6
 800a922:	f7ff fbb3 	bl	800a08c <_free_r>
 800a926:	2300      	movs	r3, #0
 800a928:	6363      	str	r3, [r4, #52]	; 0x34
 800a92a:	89a3      	ldrh	r3, [r4, #12]
 800a92c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a930:	81a3      	strh	r3, [r4, #12]
 800a932:	2300      	movs	r3, #0
 800a934:	6063      	str	r3, [r4, #4]
 800a936:	6923      	ldr	r3, [r4, #16]
 800a938:	6023      	str	r3, [r4, #0]
 800a93a:	89a3      	ldrh	r3, [r4, #12]
 800a93c:	f043 0308 	orr.w	r3, r3, #8
 800a940:	81a3      	strh	r3, [r4, #12]
 800a942:	6923      	ldr	r3, [r4, #16]
 800a944:	b94b      	cbnz	r3, 800a95a <__swsetup_r+0x9a>
 800a946:	89a3      	ldrh	r3, [r4, #12]
 800a948:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a94c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a950:	d003      	beq.n	800a95a <__swsetup_r+0x9a>
 800a952:	4621      	mov	r1, r4
 800a954:	4630      	mov	r0, r6
 800a956:	f000 fa05 	bl	800ad64 <__smakebuf_r>
 800a95a:	89a0      	ldrh	r0, [r4, #12]
 800a95c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a960:	f010 0301 	ands.w	r3, r0, #1
 800a964:	d00a      	beq.n	800a97c <__swsetup_r+0xbc>
 800a966:	2300      	movs	r3, #0
 800a968:	60a3      	str	r3, [r4, #8]
 800a96a:	6963      	ldr	r3, [r4, #20]
 800a96c:	425b      	negs	r3, r3
 800a96e:	61a3      	str	r3, [r4, #24]
 800a970:	6923      	ldr	r3, [r4, #16]
 800a972:	b943      	cbnz	r3, 800a986 <__swsetup_r+0xc6>
 800a974:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a978:	d1ba      	bne.n	800a8f0 <__swsetup_r+0x30>
 800a97a:	bd70      	pop	{r4, r5, r6, pc}
 800a97c:	0781      	lsls	r1, r0, #30
 800a97e:	bf58      	it	pl
 800a980:	6963      	ldrpl	r3, [r4, #20]
 800a982:	60a3      	str	r3, [r4, #8]
 800a984:	e7f4      	b.n	800a970 <__swsetup_r+0xb0>
 800a986:	2000      	movs	r0, #0
 800a988:	e7f7      	b.n	800a97a <__swsetup_r+0xba>
 800a98a:	bf00      	nop
 800a98c:	20000190 	.word	0x20000190
 800a990:	0800b848 	.word	0x0800b848
 800a994:	0800b868 	.word	0x0800b868
 800a998:	0800b828 	.word	0x0800b828

0800a99c <abort>:
 800a99c:	2006      	movs	r0, #6
 800a99e:	b508      	push	{r3, lr}
 800a9a0:	f000 fa9e 	bl	800aee0 <raise>
 800a9a4:	2001      	movs	r0, #1
 800a9a6:	f7f7 f913 	bl	8001bd0 <_exit>
	...

0800a9ac <__sflush_r>:
 800a9ac:	898a      	ldrh	r2, [r1, #12]
 800a9ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9b0:	4605      	mov	r5, r0
 800a9b2:	0710      	lsls	r0, r2, #28
 800a9b4:	460c      	mov	r4, r1
 800a9b6:	d457      	bmi.n	800aa68 <__sflush_r+0xbc>
 800a9b8:	684b      	ldr	r3, [r1, #4]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	dc04      	bgt.n	800a9c8 <__sflush_r+0x1c>
 800a9be:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	dc01      	bgt.n	800a9c8 <__sflush_r+0x1c>
 800a9c4:	2000      	movs	r0, #0
 800a9c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a9c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a9ca:	2e00      	cmp	r6, #0
 800a9cc:	d0fa      	beq.n	800a9c4 <__sflush_r+0x18>
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a9d4:	682f      	ldr	r7, [r5, #0]
 800a9d6:	602b      	str	r3, [r5, #0]
 800a9d8:	d032      	beq.n	800aa40 <__sflush_r+0x94>
 800a9da:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a9dc:	89a3      	ldrh	r3, [r4, #12]
 800a9de:	075a      	lsls	r2, r3, #29
 800a9e0:	d505      	bpl.n	800a9ee <__sflush_r+0x42>
 800a9e2:	6863      	ldr	r3, [r4, #4]
 800a9e4:	1ac0      	subs	r0, r0, r3
 800a9e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a9e8:	b10b      	cbz	r3, 800a9ee <__sflush_r+0x42>
 800a9ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a9ec:	1ac0      	subs	r0, r0, r3
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	4602      	mov	r2, r0
 800a9f2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a9f4:	4628      	mov	r0, r5
 800a9f6:	6a21      	ldr	r1, [r4, #32]
 800a9f8:	47b0      	blx	r6
 800a9fa:	1c43      	adds	r3, r0, #1
 800a9fc:	89a3      	ldrh	r3, [r4, #12]
 800a9fe:	d106      	bne.n	800aa0e <__sflush_r+0x62>
 800aa00:	6829      	ldr	r1, [r5, #0]
 800aa02:	291d      	cmp	r1, #29
 800aa04:	d82c      	bhi.n	800aa60 <__sflush_r+0xb4>
 800aa06:	4a29      	ldr	r2, [pc, #164]	; (800aaac <__sflush_r+0x100>)
 800aa08:	40ca      	lsrs	r2, r1
 800aa0a:	07d6      	lsls	r6, r2, #31
 800aa0c:	d528      	bpl.n	800aa60 <__sflush_r+0xb4>
 800aa0e:	2200      	movs	r2, #0
 800aa10:	6062      	str	r2, [r4, #4]
 800aa12:	6922      	ldr	r2, [r4, #16]
 800aa14:	04d9      	lsls	r1, r3, #19
 800aa16:	6022      	str	r2, [r4, #0]
 800aa18:	d504      	bpl.n	800aa24 <__sflush_r+0x78>
 800aa1a:	1c42      	adds	r2, r0, #1
 800aa1c:	d101      	bne.n	800aa22 <__sflush_r+0x76>
 800aa1e:	682b      	ldr	r3, [r5, #0]
 800aa20:	b903      	cbnz	r3, 800aa24 <__sflush_r+0x78>
 800aa22:	6560      	str	r0, [r4, #84]	; 0x54
 800aa24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aa26:	602f      	str	r7, [r5, #0]
 800aa28:	2900      	cmp	r1, #0
 800aa2a:	d0cb      	beq.n	800a9c4 <__sflush_r+0x18>
 800aa2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aa30:	4299      	cmp	r1, r3
 800aa32:	d002      	beq.n	800aa3a <__sflush_r+0x8e>
 800aa34:	4628      	mov	r0, r5
 800aa36:	f7ff fb29 	bl	800a08c <_free_r>
 800aa3a:	2000      	movs	r0, #0
 800aa3c:	6360      	str	r0, [r4, #52]	; 0x34
 800aa3e:	e7c2      	b.n	800a9c6 <__sflush_r+0x1a>
 800aa40:	6a21      	ldr	r1, [r4, #32]
 800aa42:	2301      	movs	r3, #1
 800aa44:	4628      	mov	r0, r5
 800aa46:	47b0      	blx	r6
 800aa48:	1c41      	adds	r1, r0, #1
 800aa4a:	d1c7      	bne.n	800a9dc <__sflush_r+0x30>
 800aa4c:	682b      	ldr	r3, [r5, #0]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d0c4      	beq.n	800a9dc <__sflush_r+0x30>
 800aa52:	2b1d      	cmp	r3, #29
 800aa54:	d001      	beq.n	800aa5a <__sflush_r+0xae>
 800aa56:	2b16      	cmp	r3, #22
 800aa58:	d101      	bne.n	800aa5e <__sflush_r+0xb2>
 800aa5a:	602f      	str	r7, [r5, #0]
 800aa5c:	e7b2      	b.n	800a9c4 <__sflush_r+0x18>
 800aa5e:	89a3      	ldrh	r3, [r4, #12]
 800aa60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa64:	81a3      	strh	r3, [r4, #12]
 800aa66:	e7ae      	b.n	800a9c6 <__sflush_r+0x1a>
 800aa68:	690f      	ldr	r7, [r1, #16]
 800aa6a:	2f00      	cmp	r7, #0
 800aa6c:	d0aa      	beq.n	800a9c4 <__sflush_r+0x18>
 800aa6e:	0793      	lsls	r3, r2, #30
 800aa70:	bf18      	it	ne
 800aa72:	2300      	movne	r3, #0
 800aa74:	680e      	ldr	r6, [r1, #0]
 800aa76:	bf08      	it	eq
 800aa78:	694b      	ldreq	r3, [r1, #20]
 800aa7a:	1bf6      	subs	r6, r6, r7
 800aa7c:	600f      	str	r7, [r1, #0]
 800aa7e:	608b      	str	r3, [r1, #8]
 800aa80:	2e00      	cmp	r6, #0
 800aa82:	dd9f      	ble.n	800a9c4 <__sflush_r+0x18>
 800aa84:	4633      	mov	r3, r6
 800aa86:	463a      	mov	r2, r7
 800aa88:	4628      	mov	r0, r5
 800aa8a:	6a21      	ldr	r1, [r4, #32]
 800aa8c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800aa90:	47e0      	blx	ip
 800aa92:	2800      	cmp	r0, #0
 800aa94:	dc06      	bgt.n	800aaa4 <__sflush_r+0xf8>
 800aa96:	89a3      	ldrh	r3, [r4, #12]
 800aa98:	f04f 30ff 	mov.w	r0, #4294967295
 800aa9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aaa0:	81a3      	strh	r3, [r4, #12]
 800aaa2:	e790      	b.n	800a9c6 <__sflush_r+0x1a>
 800aaa4:	4407      	add	r7, r0
 800aaa6:	1a36      	subs	r6, r6, r0
 800aaa8:	e7ea      	b.n	800aa80 <__sflush_r+0xd4>
 800aaaa:	bf00      	nop
 800aaac:	20400001 	.word	0x20400001

0800aab0 <_fflush_r>:
 800aab0:	b538      	push	{r3, r4, r5, lr}
 800aab2:	690b      	ldr	r3, [r1, #16]
 800aab4:	4605      	mov	r5, r0
 800aab6:	460c      	mov	r4, r1
 800aab8:	b913      	cbnz	r3, 800aac0 <_fflush_r+0x10>
 800aaba:	2500      	movs	r5, #0
 800aabc:	4628      	mov	r0, r5
 800aabe:	bd38      	pop	{r3, r4, r5, pc}
 800aac0:	b118      	cbz	r0, 800aaca <_fflush_r+0x1a>
 800aac2:	6983      	ldr	r3, [r0, #24]
 800aac4:	b90b      	cbnz	r3, 800aaca <_fflush_r+0x1a>
 800aac6:	f000 f887 	bl	800abd8 <__sinit>
 800aaca:	4b14      	ldr	r3, [pc, #80]	; (800ab1c <_fflush_r+0x6c>)
 800aacc:	429c      	cmp	r4, r3
 800aace:	d11b      	bne.n	800ab08 <_fflush_r+0x58>
 800aad0:	686c      	ldr	r4, [r5, #4]
 800aad2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d0ef      	beq.n	800aaba <_fflush_r+0xa>
 800aada:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800aadc:	07d0      	lsls	r0, r2, #31
 800aade:	d404      	bmi.n	800aaea <_fflush_r+0x3a>
 800aae0:	0599      	lsls	r1, r3, #22
 800aae2:	d402      	bmi.n	800aaea <_fflush_r+0x3a>
 800aae4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aae6:	f000 f915 	bl	800ad14 <__retarget_lock_acquire_recursive>
 800aaea:	4628      	mov	r0, r5
 800aaec:	4621      	mov	r1, r4
 800aaee:	f7ff ff5d 	bl	800a9ac <__sflush_r>
 800aaf2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aaf4:	4605      	mov	r5, r0
 800aaf6:	07da      	lsls	r2, r3, #31
 800aaf8:	d4e0      	bmi.n	800aabc <_fflush_r+0xc>
 800aafa:	89a3      	ldrh	r3, [r4, #12]
 800aafc:	059b      	lsls	r3, r3, #22
 800aafe:	d4dd      	bmi.n	800aabc <_fflush_r+0xc>
 800ab00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ab02:	f000 f908 	bl	800ad16 <__retarget_lock_release_recursive>
 800ab06:	e7d9      	b.n	800aabc <_fflush_r+0xc>
 800ab08:	4b05      	ldr	r3, [pc, #20]	; (800ab20 <_fflush_r+0x70>)
 800ab0a:	429c      	cmp	r4, r3
 800ab0c:	d101      	bne.n	800ab12 <_fflush_r+0x62>
 800ab0e:	68ac      	ldr	r4, [r5, #8]
 800ab10:	e7df      	b.n	800aad2 <_fflush_r+0x22>
 800ab12:	4b04      	ldr	r3, [pc, #16]	; (800ab24 <_fflush_r+0x74>)
 800ab14:	429c      	cmp	r4, r3
 800ab16:	bf08      	it	eq
 800ab18:	68ec      	ldreq	r4, [r5, #12]
 800ab1a:	e7da      	b.n	800aad2 <_fflush_r+0x22>
 800ab1c:	0800b848 	.word	0x0800b848
 800ab20:	0800b868 	.word	0x0800b868
 800ab24:	0800b828 	.word	0x0800b828

0800ab28 <std>:
 800ab28:	2300      	movs	r3, #0
 800ab2a:	b510      	push	{r4, lr}
 800ab2c:	4604      	mov	r4, r0
 800ab2e:	e9c0 3300 	strd	r3, r3, [r0]
 800ab32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ab36:	6083      	str	r3, [r0, #8]
 800ab38:	8181      	strh	r1, [r0, #12]
 800ab3a:	6643      	str	r3, [r0, #100]	; 0x64
 800ab3c:	81c2      	strh	r2, [r0, #14]
 800ab3e:	6183      	str	r3, [r0, #24]
 800ab40:	4619      	mov	r1, r3
 800ab42:	2208      	movs	r2, #8
 800ab44:	305c      	adds	r0, #92	; 0x5c
 800ab46:	f7fc f801 	bl	8006b4c <memset>
 800ab4a:	4b05      	ldr	r3, [pc, #20]	; (800ab60 <std+0x38>)
 800ab4c:	6224      	str	r4, [r4, #32]
 800ab4e:	6263      	str	r3, [r4, #36]	; 0x24
 800ab50:	4b04      	ldr	r3, [pc, #16]	; (800ab64 <std+0x3c>)
 800ab52:	62a3      	str	r3, [r4, #40]	; 0x28
 800ab54:	4b04      	ldr	r3, [pc, #16]	; (800ab68 <std+0x40>)
 800ab56:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ab58:	4b04      	ldr	r3, [pc, #16]	; (800ab6c <std+0x44>)
 800ab5a:	6323      	str	r3, [r4, #48]	; 0x30
 800ab5c:	bd10      	pop	{r4, pc}
 800ab5e:	bf00      	nop
 800ab60:	0800af19 	.word	0x0800af19
 800ab64:	0800af3b 	.word	0x0800af3b
 800ab68:	0800af73 	.word	0x0800af73
 800ab6c:	0800af97 	.word	0x0800af97

0800ab70 <_cleanup_r>:
 800ab70:	4901      	ldr	r1, [pc, #4]	; (800ab78 <_cleanup_r+0x8>)
 800ab72:	f000 b8af 	b.w	800acd4 <_fwalk_reent>
 800ab76:	bf00      	nop
 800ab78:	0800aab1 	.word	0x0800aab1

0800ab7c <__sfmoreglue>:
 800ab7c:	2268      	movs	r2, #104	; 0x68
 800ab7e:	b570      	push	{r4, r5, r6, lr}
 800ab80:	1e4d      	subs	r5, r1, #1
 800ab82:	4355      	muls	r5, r2
 800ab84:	460e      	mov	r6, r1
 800ab86:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ab8a:	f7ff fae7 	bl	800a15c <_malloc_r>
 800ab8e:	4604      	mov	r4, r0
 800ab90:	b140      	cbz	r0, 800aba4 <__sfmoreglue+0x28>
 800ab92:	2100      	movs	r1, #0
 800ab94:	e9c0 1600 	strd	r1, r6, [r0]
 800ab98:	300c      	adds	r0, #12
 800ab9a:	60a0      	str	r0, [r4, #8]
 800ab9c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800aba0:	f7fb ffd4 	bl	8006b4c <memset>
 800aba4:	4620      	mov	r0, r4
 800aba6:	bd70      	pop	{r4, r5, r6, pc}

0800aba8 <__sfp_lock_acquire>:
 800aba8:	4801      	ldr	r0, [pc, #4]	; (800abb0 <__sfp_lock_acquire+0x8>)
 800abaa:	f000 b8b3 	b.w	800ad14 <__retarget_lock_acquire_recursive>
 800abae:	bf00      	nop
 800abb0:	200025fd 	.word	0x200025fd

0800abb4 <__sfp_lock_release>:
 800abb4:	4801      	ldr	r0, [pc, #4]	; (800abbc <__sfp_lock_release+0x8>)
 800abb6:	f000 b8ae 	b.w	800ad16 <__retarget_lock_release_recursive>
 800abba:	bf00      	nop
 800abbc:	200025fd 	.word	0x200025fd

0800abc0 <__sinit_lock_acquire>:
 800abc0:	4801      	ldr	r0, [pc, #4]	; (800abc8 <__sinit_lock_acquire+0x8>)
 800abc2:	f000 b8a7 	b.w	800ad14 <__retarget_lock_acquire_recursive>
 800abc6:	bf00      	nop
 800abc8:	200025fe 	.word	0x200025fe

0800abcc <__sinit_lock_release>:
 800abcc:	4801      	ldr	r0, [pc, #4]	; (800abd4 <__sinit_lock_release+0x8>)
 800abce:	f000 b8a2 	b.w	800ad16 <__retarget_lock_release_recursive>
 800abd2:	bf00      	nop
 800abd4:	200025fe 	.word	0x200025fe

0800abd8 <__sinit>:
 800abd8:	b510      	push	{r4, lr}
 800abda:	4604      	mov	r4, r0
 800abdc:	f7ff fff0 	bl	800abc0 <__sinit_lock_acquire>
 800abe0:	69a3      	ldr	r3, [r4, #24]
 800abe2:	b11b      	cbz	r3, 800abec <__sinit+0x14>
 800abe4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800abe8:	f7ff bff0 	b.w	800abcc <__sinit_lock_release>
 800abec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800abf0:	6523      	str	r3, [r4, #80]	; 0x50
 800abf2:	4b13      	ldr	r3, [pc, #76]	; (800ac40 <__sinit+0x68>)
 800abf4:	4a13      	ldr	r2, [pc, #76]	; (800ac44 <__sinit+0x6c>)
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	62a2      	str	r2, [r4, #40]	; 0x28
 800abfa:	42a3      	cmp	r3, r4
 800abfc:	bf08      	it	eq
 800abfe:	2301      	moveq	r3, #1
 800ac00:	4620      	mov	r0, r4
 800ac02:	bf08      	it	eq
 800ac04:	61a3      	streq	r3, [r4, #24]
 800ac06:	f000 f81f 	bl	800ac48 <__sfp>
 800ac0a:	6060      	str	r0, [r4, #4]
 800ac0c:	4620      	mov	r0, r4
 800ac0e:	f000 f81b 	bl	800ac48 <__sfp>
 800ac12:	60a0      	str	r0, [r4, #8]
 800ac14:	4620      	mov	r0, r4
 800ac16:	f000 f817 	bl	800ac48 <__sfp>
 800ac1a:	2200      	movs	r2, #0
 800ac1c:	2104      	movs	r1, #4
 800ac1e:	60e0      	str	r0, [r4, #12]
 800ac20:	6860      	ldr	r0, [r4, #4]
 800ac22:	f7ff ff81 	bl	800ab28 <std>
 800ac26:	2201      	movs	r2, #1
 800ac28:	2109      	movs	r1, #9
 800ac2a:	68a0      	ldr	r0, [r4, #8]
 800ac2c:	f7ff ff7c 	bl	800ab28 <std>
 800ac30:	2202      	movs	r2, #2
 800ac32:	2112      	movs	r1, #18
 800ac34:	68e0      	ldr	r0, [r4, #12]
 800ac36:	f7ff ff77 	bl	800ab28 <std>
 800ac3a:	2301      	movs	r3, #1
 800ac3c:	61a3      	str	r3, [r4, #24]
 800ac3e:	e7d1      	b.n	800abe4 <__sinit+0xc>
 800ac40:	0800b38c 	.word	0x0800b38c
 800ac44:	0800ab71 	.word	0x0800ab71

0800ac48 <__sfp>:
 800ac48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac4a:	4607      	mov	r7, r0
 800ac4c:	f7ff ffac 	bl	800aba8 <__sfp_lock_acquire>
 800ac50:	4b1e      	ldr	r3, [pc, #120]	; (800accc <__sfp+0x84>)
 800ac52:	681e      	ldr	r6, [r3, #0]
 800ac54:	69b3      	ldr	r3, [r6, #24]
 800ac56:	b913      	cbnz	r3, 800ac5e <__sfp+0x16>
 800ac58:	4630      	mov	r0, r6
 800ac5a:	f7ff ffbd 	bl	800abd8 <__sinit>
 800ac5e:	3648      	adds	r6, #72	; 0x48
 800ac60:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ac64:	3b01      	subs	r3, #1
 800ac66:	d503      	bpl.n	800ac70 <__sfp+0x28>
 800ac68:	6833      	ldr	r3, [r6, #0]
 800ac6a:	b30b      	cbz	r3, 800acb0 <__sfp+0x68>
 800ac6c:	6836      	ldr	r6, [r6, #0]
 800ac6e:	e7f7      	b.n	800ac60 <__sfp+0x18>
 800ac70:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ac74:	b9d5      	cbnz	r5, 800acac <__sfp+0x64>
 800ac76:	4b16      	ldr	r3, [pc, #88]	; (800acd0 <__sfp+0x88>)
 800ac78:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ac7c:	60e3      	str	r3, [r4, #12]
 800ac7e:	6665      	str	r5, [r4, #100]	; 0x64
 800ac80:	f000 f847 	bl	800ad12 <__retarget_lock_init_recursive>
 800ac84:	f7ff ff96 	bl	800abb4 <__sfp_lock_release>
 800ac88:	2208      	movs	r2, #8
 800ac8a:	4629      	mov	r1, r5
 800ac8c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ac90:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ac94:	6025      	str	r5, [r4, #0]
 800ac96:	61a5      	str	r5, [r4, #24]
 800ac98:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ac9c:	f7fb ff56 	bl	8006b4c <memset>
 800aca0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800aca4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800aca8:	4620      	mov	r0, r4
 800acaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800acac:	3468      	adds	r4, #104	; 0x68
 800acae:	e7d9      	b.n	800ac64 <__sfp+0x1c>
 800acb0:	2104      	movs	r1, #4
 800acb2:	4638      	mov	r0, r7
 800acb4:	f7ff ff62 	bl	800ab7c <__sfmoreglue>
 800acb8:	4604      	mov	r4, r0
 800acba:	6030      	str	r0, [r6, #0]
 800acbc:	2800      	cmp	r0, #0
 800acbe:	d1d5      	bne.n	800ac6c <__sfp+0x24>
 800acc0:	f7ff ff78 	bl	800abb4 <__sfp_lock_release>
 800acc4:	230c      	movs	r3, #12
 800acc6:	603b      	str	r3, [r7, #0]
 800acc8:	e7ee      	b.n	800aca8 <__sfp+0x60>
 800acca:	bf00      	nop
 800accc:	0800b38c 	.word	0x0800b38c
 800acd0:	ffff0001 	.word	0xffff0001

0800acd4 <_fwalk_reent>:
 800acd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800acd8:	4606      	mov	r6, r0
 800acda:	4688      	mov	r8, r1
 800acdc:	2700      	movs	r7, #0
 800acde:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ace2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ace6:	f1b9 0901 	subs.w	r9, r9, #1
 800acea:	d505      	bpl.n	800acf8 <_fwalk_reent+0x24>
 800acec:	6824      	ldr	r4, [r4, #0]
 800acee:	2c00      	cmp	r4, #0
 800acf0:	d1f7      	bne.n	800ace2 <_fwalk_reent+0xe>
 800acf2:	4638      	mov	r0, r7
 800acf4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800acf8:	89ab      	ldrh	r3, [r5, #12]
 800acfa:	2b01      	cmp	r3, #1
 800acfc:	d907      	bls.n	800ad0e <_fwalk_reent+0x3a>
 800acfe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ad02:	3301      	adds	r3, #1
 800ad04:	d003      	beq.n	800ad0e <_fwalk_reent+0x3a>
 800ad06:	4629      	mov	r1, r5
 800ad08:	4630      	mov	r0, r6
 800ad0a:	47c0      	blx	r8
 800ad0c:	4307      	orrs	r7, r0
 800ad0e:	3568      	adds	r5, #104	; 0x68
 800ad10:	e7e9      	b.n	800ace6 <_fwalk_reent+0x12>

0800ad12 <__retarget_lock_init_recursive>:
 800ad12:	4770      	bx	lr

0800ad14 <__retarget_lock_acquire_recursive>:
 800ad14:	4770      	bx	lr

0800ad16 <__retarget_lock_release_recursive>:
 800ad16:	4770      	bx	lr

0800ad18 <__swhatbuf_r>:
 800ad18:	b570      	push	{r4, r5, r6, lr}
 800ad1a:	460e      	mov	r6, r1
 800ad1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad20:	4614      	mov	r4, r2
 800ad22:	2900      	cmp	r1, #0
 800ad24:	461d      	mov	r5, r3
 800ad26:	b096      	sub	sp, #88	; 0x58
 800ad28:	da08      	bge.n	800ad3c <__swhatbuf_r+0x24>
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ad30:	602a      	str	r2, [r5, #0]
 800ad32:	061a      	lsls	r2, r3, #24
 800ad34:	d410      	bmi.n	800ad58 <__swhatbuf_r+0x40>
 800ad36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad3a:	e00e      	b.n	800ad5a <__swhatbuf_r+0x42>
 800ad3c:	466a      	mov	r2, sp
 800ad3e:	f000 f951 	bl	800afe4 <_fstat_r>
 800ad42:	2800      	cmp	r0, #0
 800ad44:	dbf1      	blt.n	800ad2a <__swhatbuf_r+0x12>
 800ad46:	9a01      	ldr	r2, [sp, #4]
 800ad48:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ad4c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ad50:	425a      	negs	r2, r3
 800ad52:	415a      	adcs	r2, r3
 800ad54:	602a      	str	r2, [r5, #0]
 800ad56:	e7ee      	b.n	800ad36 <__swhatbuf_r+0x1e>
 800ad58:	2340      	movs	r3, #64	; 0x40
 800ad5a:	2000      	movs	r0, #0
 800ad5c:	6023      	str	r3, [r4, #0]
 800ad5e:	b016      	add	sp, #88	; 0x58
 800ad60:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ad64 <__smakebuf_r>:
 800ad64:	898b      	ldrh	r3, [r1, #12]
 800ad66:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ad68:	079d      	lsls	r5, r3, #30
 800ad6a:	4606      	mov	r6, r0
 800ad6c:	460c      	mov	r4, r1
 800ad6e:	d507      	bpl.n	800ad80 <__smakebuf_r+0x1c>
 800ad70:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ad74:	6023      	str	r3, [r4, #0]
 800ad76:	6123      	str	r3, [r4, #16]
 800ad78:	2301      	movs	r3, #1
 800ad7a:	6163      	str	r3, [r4, #20]
 800ad7c:	b002      	add	sp, #8
 800ad7e:	bd70      	pop	{r4, r5, r6, pc}
 800ad80:	466a      	mov	r2, sp
 800ad82:	ab01      	add	r3, sp, #4
 800ad84:	f7ff ffc8 	bl	800ad18 <__swhatbuf_r>
 800ad88:	9900      	ldr	r1, [sp, #0]
 800ad8a:	4605      	mov	r5, r0
 800ad8c:	4630      	mov	r0, r6
 800ad8e:	f7ff f9e5 	bl	800a15c <_malloc_r>
 800ad92:	b948      	cbnz	r0, 800ada8 <__smakebuf_r+0x44>
 800ad94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad98:	059a      	lsls	r2, r3, #22
 800ad9a:	d4ef      	bmi.n	800ad7c <__smakebuf_r+0x18>
 800ad9c:	f023 0303 	bic.w	r3, r3, #3
 800ada0:	f043 0302 	orr.w	r3, r3, #2
 800ada4:	81a3      	strh	r3, [r4, #12]
 800ada6:	e7e3      	b.n	800ad70 <__smakebuf_r+0xc>
 800ada8:	4b0d      	ldr	r3, [pc, #52]	; (800ade0 <__smakebuf_r+0x7c>)
 800adaa:	62b3      	str	r3, [r6, #40]	; 0x28
 800adac:	89a3      	ldrh	r3, [r4, #12]
 800adae:	6020      	str	r0, [r4, #0]
 800adb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800adb4:	81a3      	strh	r3, [r4, #12]
 800adb6:	9b00      	ldr	r3, [sp, #0]
 800adb8:	6120      	str	r0, [r4, #16]
 800adba:	6163      	str	r3, [r4, #20]
 800adbc:	9b01      	ldr	r3, [sp, #4]
 800adbe:	b15b      	cbz	r3, 800add8 <__smakebuf_r+0x74>
 800adc0:	4630      	mov	r0, r6
 800adc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800adc6:	f000 f91f 	bl	800b008 <_isatty_r>
 800adca:	b128      	cbz	r0, 800add8 <__smakebuf_r+0x74>
 800adcc:	89a3      	ldrh	r3, [r4, #12]
 800adce:	f023 0303 	bic.w	r3, r3, #3
 800add2:	f043 0301 	orr.w	r3, r3, #1
 800add6:	81a3      	strh	r3, [r4, #12]
 800add8:	89a0      	ldrh	r0, [r4, #12]
 800adda:	4305      	orrs	r5, r0
 800addc:	81a5      	strh	r5, [r4, #12]
 800adde:	e7cd      	b.n	800ad7c <__smakebuf_r+0x18>
 800ade0:	0800ab71 	.word	0x0800ab71

0800ade4 <memmove>:
 800ade4:	4288      	cmp	r0, r1
 800ade6:	b510      	push	{r4, lr}
 800ade8:	eb01 0402 	add.w	r4, r1, r2
 800adec:	d902      	bls.n	800adf4 <memmove+0x10>
 800adee:	4284      	cmp	r4, r0
 800adf0:	4623      	mov	r3, r4
 800adf2:	d807      	bhi.n	800ae04 <memmove+0x20>
 800adf4:	1e43      	subs	r3, r0, #1
 800adf6:	42a1      	cmp	r1, r4
 800adf8:	d008      	beq.n	800ae0c <memmove+0x28>
 800adfa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800adfe:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ae02:	e7f8      	b.n	800adf6 <memmove+0x12>
 800ae04:	4601      	mov	r1, r0
 800ae06:	4402      	add	r2, r0
 800ae08:	428a      	cmp	r2, r1
 800ae0a:	d100      	bne.n	800ae0e <memmove+0x2a>
 800ae0c:	bd10      	pop	{r4, pc}
 800ae0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ae12:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ae16:	e7f7      	b.n	800ae08 <memmove+0x24>

0800ae18 <__malloc_lock>:
 800ae18:	4801      	ldr	r0, [pc, #4]	; (800ae20 <__malloc_lock+0x8>)
 800ae1a:	f7ff bf7b 	b.w	800ad14 <__retarget_lock_acquire_recursive>
 800ae1e:	bf00      	nop
 800ae20:	200025fc 	.word	0x200025fc

0800ae24 <__malloc_unlock>:
 800ae24:	4801      	ldr	r0, [pc, #4]	; (800ae2c <__malloc_unlock+0x8>)
 800ae26:	f7ff bf76 	b.w	800ad16 <__retarget_lock_release_recursive>
 800ae2a:	bf00      	nop
 800ae2c:	200025fc 	.word	0x200025fc

0800ae30 <_realloc_r>:
 800ae30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae34:	4680      	mov	r8, r0
 800ae36:	4614      	mov	r4, r2
 800ae38:	460e      	mov	r6, r1
 800ae3a:	b921      	cbnz	r1, 800ae46 <_realloc_r+0x16>
 800ae3c:	4611      	mov	r1, r2
 800ae3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae42:	f7ff b98b 	b.w	800a15c <_malloc_r>
 800ae46:	b92a      	cbnz	r2, 800ae54 <_realloc_r+0x24>
 800ae48:	f7ff f920 	bl	800a08c <_free_r>
 800ae4c:	4625      	mov	r5, r4
 800ae4e:	4628      	mov	r0, r5
 800ae50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae54:	f000 f8fa 	bl	800b04c <_malloc_usable_size_r>
 800ae58:	4284      	cmp	r4, r0
 800ae5a:	4607      	mov	r7, r0
 800ae5c:	d802      	bhi.n	800ae64 <_realloc_r+0x34>
 800ae5e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ae62:	d812      	bhi.n	800ae8a <_realloc_r+0x5a>
 800ae64:	4621      	mov	r1, r4
 800ae66:	4640      	mov	r0, r8
 800ae68:	f7ff f978 	bl	800a15c <_malloc_r>
 800ae6c:	4605      	mov	r5, r0
 800ae6e:	2800      	cmp	r0, #0
 800ae70:	d0ed      	beq.n	800ae4e <_realloc_r+0x1e>
 800ae72:	42bc      	cmp	r4, r7
 800ae74:	4622      	mov	r2, r4
 800ae76:	4631      	mov	r1, r6
 800ae78:	bf28      	it	cs
 800ae7a:	463a      	movcs	r2, r7
 800ae7c:	f7fb fe58 	bl	8006b30 <memcpy>
 800ae80:	4631      	mov	r1, r6
 800ae82:	4640      	mov	r0, r8
 800ae84:	f7ff f902 	bl	800a08c <_free_r>
 800ae88:	e7e1      	b.n	800ae4e <_realloc_r+0x1e>
 800ae8a:	4635      	mov	r5, r6
 800ae8c:	e7df      	b.n	800ae4e <_realloc_r+0x1e>

0800ae8e <_raise_r>:
 800ae8e:	291f      	cmp	r1, #31
 800ae90:	b538      	push	{r3, r4, r5, lr}
 800ae92:	4604      	mov	r4, r0
 800ae94:	460d      	mov	r5, r1
 800ae96:	d904      	bls.n	800aea2 <_raise_r+0x14>
 800ae98:	2316      	movs	r3, #22
 800ae9a:	6003      	str	r3, [r0, #0]
 800ae9c:	f04f 30ff 	mov.w	r0, #4294967295
 800aea0:	bd38      	pop	{r3, r4, r5, pc}
 800aea2:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800aea4:	b112      	cbz	r2, 800aeac <_raise_r+0x1e>
 800aea6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800aeaa:	b94b      	cbnz	r3, 800aec0 <_raise_r+0x32>
 800aeac:	4620      	mov	r0, r4
 800aeae:	f000 f831 	bl	800af14 <_getpid_r>
 800aeb2:	462a      	mov	r2, r5
 800aeb4:	4601      	mov	r1, r0
 800aeb6:	4620      	mov	r0, r4
 800aeb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aebc:	f000 b818 	b.w	800aef0 <_kill_r>
 800aec0:	2b01      	cmp	r3, #1
 800aec2:	d00a      	beq.n	800aeda <_raise_r+0x4c>
 800aec4:	1c59      	adds	r1, r3, #1
 800aec6:	d103      	bne.n	800aed0 <_raise_r+0x42>
 800aec8:	2316      	movs	r3, #22
 800aeca:	6003      	str	r3, [r0, #0]
 800aecc:	2001      	movs	r0, #1
 800aece:	e7e7      	b.n	800aea0 <_raise_r+0x12>
 800aed0:	2400      	movs	r4, #0
 800aed2:	4628      	mov	r0, r5
 800aed4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800aed8:	4798      	blx	r3
 800aeda:	2000      	movs	r0, #0
 800aedc:	e7e0      	b.n	800aea0 <_raise_r+0x12>
	...

0800aee0 <raise>:
 800aee0:	4b02      	ldr	r3, [pc, #8]	; (800aeec <raise+0xc>)
 800aee2:	4601      	mov	r1, r0
 800aee4:	6818      	ldr	r0, [r3, #0]
 800aee6:	f7ff bfd2 	b.w	800ae8e <_raise_r>
 800aeea:	bf00      	nop
 800aeec:	20000190 	.word	0x20000190

0800aef0 <_kill_r>:
 800aef0:	b538      	push	{r3, r4, r5, lr}
 800aef2:	2300      	movs	r3, #0
 800aef4:	4d06      	ldr	r5, [pc, #24]	; (800af10 <_kill_r+0x20>)
 800aef6:	4604      	mov	r4, r0
 800aef8:	4608      	mov	r0, r1
 800aefa:	4611      	mov	r1, r2
 800aefc:	602b      	str	r3, [r5, #0]
 800aefe:	f7f6 fe5f 	bl	8001bc0 <_kill>
 800af02:	1c43      	adds	r3, r0, #1
 800af04:	d102      	bne.n	800af0c <_kill_r+0x1c>
 800af06:	682b      	ldr	r3, [r5, #0]
 800af08:	b103      	cbz	r3, 800af0c <_kill_r+0x1c>
 800af0a:	6023      	str	r3, [r4, #0]
 800af0c:	bd38      	pop	{r3, r4, r5, pc}
 800af0e:	bf00      	nop
 800af10:	20002600 	.word	0x20002600

0800af14 <_getpid_r>:
 800af14:	f7f6 be52 	b.w	8001bbc <_getpid>

0800af18 <__sread>:
 800af18:	b510      	push	{r4, lr}
 800af1a:	460c      	mov	r4, r1
 800af1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af20:	f000 f89c 	bl	800b05c <_read_r>
 800af24:	2800      	cmp	r0, #0
 800af26:	bfab      	itete	ge
 800af28:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800af2a:	89a3      	ldrhlt	r3, [r4, #12]
 800af2c:	181b      	addge	r3, r3, r0
 800af2e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800af32:	bfac      	ite	ge
 800af34:	6563      	strge	r3, [r4, #84]	; 0x54
 800af36:	81a3      	strhlt	r3, [r4, #12]
 800af38:	bd10      	pop	{r4, pc}

0800af3a <__swrite>:
 800af3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af3e:	461f      	mov	r7, r3
 800af40:	898b      	ldrh	r3, [r1, #12]
 800af42:	4605      	mov	r5, r0
 800af44:	05db      	lsls	r3, r3, #23
 800af46:	460c      	mov	r4, r1
 800af48:	4616      	mov	r6, r2
 800af4a:	d505      	bpl.n	800af58 <__swrite+0x1e>
 800af4c:	2302      	movs	r3, #2
 800af4e:	2200      	movs	r2, #0
 800af50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af54:	f000 f868 	bl	800b028 <_lseek_r>
 800af58:	89a3      	ldrh	r3, [r4, #12]
 800af5a:	4632      	mov	r2, r6
 800af5c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800af60:	81a3      	strh	r3, [r4, #12]
 800af62:	4628      	mov	r0, r5
 800af64:	463b      	mov	r3, r7
 800af66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800af6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800af6e:	f000 b817 	b.w	800afa0 <_write_r>

0800af72 <__sseek>:
 800af72:	b510      	push	{r4, lr}
 800af74:	460c      	mov	r4, r1
 800af76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af7a:	f000 f855 	bl	800b028 <_lseek_r>
 800af7e:	1c43      	adds	r3, r0, #1
 800af80:	89a3      	ldrh	r3, [r4, #12]
 800af82:	bf15      	itete	ne
 800af84:	6560      	strne	r0, [r4, #84]	; 0x54
 800af86:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800af8a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800af8e:	81a3      	strheq	r3, [r4, #12]
 800af90:	bf18      	it	ne
 800af92:	81a3      	strhne	r3, [r4, #12]
 800af94:	bd10      	pop	{r4, pc}

0800af96 <__sclose>:
 800af96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af9a:	f000 b813 	b.w	800afc4 <_close_r>
	...

0800afa0 <_write_r>:
 800afa0:	b538      	push	{r3, r4, r5, lr}
 800afa2:	4604      	mov	r4, r0
 800afa4:	4608      	mov	r0, r1
 800afa6:	4611      	mov	r1, r2
 800afa8:	2200      	movs	r2, #0
 800afaa:	4d05      	ldr	r5, [pc, #20]	; (800afc0 <_write_r+0x20>)
 800afac:	602a      	str	r2, [r5, #0]
 800afae:	461a      	mov	r2, r3
 800afb0:	f7f6 fe21 	bl	8001bf6 <_write>
 800afb4:	1c43      	adds	r3, r0, #1
 800afb6:	d102      	bne.n	800afbe <_write_r+0x1e>
 800afb8:	682b      	ldr	r3, [r5, #0]
 800afba:	b103      	cbz	r3, 800afbe <_write_r+0x1e>
 800afbc:	6023      	str	r3, [r4, #0]
 800afbe:	bd38      	pop	{r3, r4, r5, pc}
 800afc0:	20002600 	.word	0x20002600

0800afc4 <_close_r>:
 800afc4:	b538      	push	{r3, r4, r5, lr}
 800afc6:	2300      	movs	r3, #0
 800afc8:	4d05      	ldr	r5, [pc, #20]	; (800afe0 <_close_r+0x1c>)
 800afca:	4604      	mov	r4, r0
 800afcc:	4608      	mov	r0, r1
 800afce:	602b      	str	r3, [r5, #0]
 800afd0:	f7f6 fe1e 	bl	8001c10 <_close>
 800afd4:	1c43      	adds	r3, r0, #1
 800afd6:	d102      	bne.n	800afde <_close_r+0x1a>
 800afd8:	682b      	ldr	r3, [r5, #0]
 800afda:	b103      	cbz	r3, 800afde <_close_r+0x1a>
 800afdc:	6023      	str	r3, [r4, #0]
 800afde:	bd38      	pop	{r3, r4, r5, pc}
 800afe0:	20002600 	.word	0x20002600

0800afe4 <_fstat_r>:
 800afe4:	b538      	push	{r3, r4, r5, lr}
 800afe6:	2300      	movs	r3, #0
 800afe8:	4d06      	ldr	r5, [pc, #24]	; (800b004 <_fstat_r+0x20>)
 800afea:	4604      	mov	r4, r0
 800afec:	4608      	mov	r0, r1
 800afee:	4611      	mov	r1, r2
 800aff0:	602b      	str	r3, [r5, #0]
 800aff2:	f7f6 fe10 	bl	8001c16 <_fstat>
 800aff6:	1c43      	adds	r3, r0, #1
 800aff8:	d102      	bne.n	800b000 <_fstat_r+0x1c>
 800affa:	682b      	ldr	r3, [r5, #0]
 800affc:	b103      	cbz	r3, 800b000 <_fstat_r+0x1c>
 800affe:	6023      	str	r3, [r4, #0]
 800b000:	bd38      	pop	{r3, r4, r5, pc}
 800b002:	bf00      	nop
 800b004:	20002600 	.word	0x20002600

0800b008 <_isatty_r>:
 800b008:	b538      	push	{r3, r4, r5, lr}
 800b00a:	2300      	movs	r3, #0
 800b00c:	4d05      	ldr	r5, [pc, #20]	; (800b024 <_isatty_r+0x1c>)
 800b00e:	4604      	mov	r4, r0
 800b010:	4608      	mov	r0, r1
 800b012:	602b      	str	r3, [r5, #0]
 800b014:	f7f6 fe04 	bl	8001c20 <_isatty>
 800b018:	1c43      	adds	r3, r0, #1
 800b01a:	d102      	bne.n	800b022 <_isatty_r+0x1a>
 800b01c:	682b      	ldr	r3, [r5, #0]
 800b01e:	b103      	cbz	r3, 800b022 <_isatty_r+0x1a>
 800b020:	6023      	str	r3, [r4, #0]
 800b022:	bd38      	pop	{r3, r4, r5, pc}
 800b024:	20002600 	.word	0x20002600

0800b028 <_lseek_r>:
 800b028:	b538      	push	{r3, r4, r5, lr}
 800b02a:	4604      	mov	r4, r0
 800b02c:	4608      	mov	r0, r1
 800b02e:	4611      	mov	r1, r2
 800b030:	2200      	movs	r2, #0
 800b032:	4d05      	ldr	r5, [pc, #20]	; (800b048 <_lseek_r+0x20>)
 800b034:	602a      	str	r2, [r5, #0]
 800b036:	461a      	mov	r2, r3
 800b038:	f7f6 fdf4 	bl	8001c24 <_lseek>
 800b03c:	1c43      	adds	r3, r0, #1
 800b03e:	d102      	bne.n	800b046 <_lseek_r+0x1e>
 800b040:	682b      	ldr	r3, [r5, #0]
 800b042:	b103      	cbz	r3, 800b046 <_lseek_r+0x1e>
 800b044:	6023      	str	r3, [r4, #0]
 800b046:	bd38      	pop	{r3, r4, r5, pc}
 800b048:	20002600 	.word	0x20002600

0800b04c <_malloc_usable_size_r>:
 800b04c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b050:	1f18      	subs	r0, r3, #4
 800b052:	2b00      	cmp	r3, #0
 800b054:	bfbc      	itt	lt
 800b056:	580b      	ldrlt	r3, [r1, r0]
 800b058:	18c0      	addlt	r0, r0, r3
 800b05a:	4770      	bx	lr

0800b05c <_read_r>:
 800b05c:	b538      	push	{r3, r4, r5, lr}
 800b05e:	4604      	mov	r4, r0
 800b060:	4608      	mov	r0, r1
 800b062:	4611      	mov	r1, r2
 800b064:	2200      	movs	r2, #0
 800b066:	4d05      	ldr	r5, [pc, #20]	; (800b07c <_read_r+0x20>)
 800b068:	602a      	str	r2, [r5, #0]
 800b06a:	461a      	mov	r2, r3
 800b06c:	f7f6 fdb6 	bl	8001bdc <_read>
 800b070:	1c43      	adds	r3, r0, #1
 800b072:	d102      	bne.n	800b07a <_read_r+0x1e>
 800b074:	682b      	ldr	r3, [r5, #0]
 800b076:	b103      	cbz	r3, 800b07a <_read_r+0x1e>
 800b078:	6023      	str	r3, [r4, #0]
 800b07a:	bd38      	pop	{r3, r4, r5, pc}
 800b07c:	20002600 	.word	0x20002600

0800b080 <_init>:
 800b080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b082:	bf00      	nop
 800b084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b086:	bc08      	pop	{r3}
 800b088:	469e      	mov	lr, r3
 800b08a:	4770      	bx	lr

0800b08c <_fini>:
 800b08c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b08e:	bf00      	nop
 800b090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b092:	bc08      	pop	{r3}
 800b094:	469e      	mov	lr, r3
 800b096:	4770      	bx	lr
