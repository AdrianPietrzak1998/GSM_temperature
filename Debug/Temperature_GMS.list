
Temperature_GMS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b030  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000808  0800b140  0800b140  0001b140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b948  0800b948  00020364  2**0
                  CONTENTS
  4 .ARM          00000000  0800b948  0800b948  00020364  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b948  0800b948  00020364  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b948  0800b948  0001b948  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b94c  0800b94c  0001b94c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000364  20000000  0800b950  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000022a4  20000368  0800bcb4  00020368  2**3
                  ALLOC
 10 ._user_heap_stack 00001804  2000260c  0800bcb4  0002260c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020364  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001eeb3  00000000  00000000  0002038d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000548c  00000000  00000000  0003f240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000146c2  00000000  00000000  000446cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014c8  00000000  00000000  00058d90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000019d8  00000000  00000000  0005a258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d552  00000000  00000000  0005bc30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002262f  00000000  00000000  00079182  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00091fba  00000000  00000000  0009b7b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012d76b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004a48  00000000  00000000  0012d7bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000368 	.word	0x20000368
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b128 	.word	0x0800b128

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000036c 	.word	0x2000036c
 800014c:	0800b128 	.word	0x0800b128

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2uiz>:
 8000a9c:	004a      	lsls	r2, r1, #1
 8000a9e:	d211      	bcs.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d211      	bcs.n	8000aca <__aeabi_d2uiz+0x2e>
 8000aa6:	d50d      	bpl.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d40e      	bmi.n	8000ad0 <__aeabi_d2uiz+0x34>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d102      	bne.n	8000ad6 <__aeabi_d2uiz+0x3a>
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	4770      	bx	lr
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	4770      	bx	lr

08000adc <__aeabi_d2lz>:
 8000adc:	b538      	push	{r3, r4, r5, lr}
 8000ade:	4605      	mov	r5, r0
 8000ae0:	460c      	mov	r4, r1
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	4628      	mov	r0, r5
 8000ae8:	4621      	mov	r1, r4
 8000aea:	f7ff ff71 	bl	80009d0 <__aeabi_dcmplt>
 8000aee:	b928      	cbnz	r0, 8000afc <__aeabi_d2lz+0x20>
 8000af0:	4628      	mov	r0, r5
 8000af2:	4621      	mov	r1, r4
 8000af4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000af8:	f000 b80a 	b.w	8000b10 <__aeabi_d2ulz>
 8000afc:	4628      	mov	r0, r5
 8000afe:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000b02:	f000 f805 	bl	8000b10 <__aeabi_d2ulz>
 8000b06:	4240      	negs	r0, r0
 8000b08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b0c:	bd38      	pop	{r3, r4, r5, pc}
 8000b0e:	bf00      	nop

08000b10 <__aeabi_d2ulz>:
 8000b10:	b5d0      	push	{r4, r6, r7, lr}
 8000b12:	2200      	movs	r2, #0
 8000b14:	4b0b      	ldr	r3, [pc, #44]	; (8000b44 <__aeabi_d2ulz+0x34>)
 8000b16:	4606      	mov	r6, r0
 8000b18:	460f      	mov	r7, r1
 8000b1a:	f7ff fce7 	bl	80004ec <__aeabi_dmul>
 8000b1e:	f7ff ffbd 	bl	8000a9c <__aeabi_d2uiz>
 8000b22:	4604      	mov	r4, r0
 8000b24:	f7ff fc68 	bl	80003f8 <__aeabi_ui2d>
 8000b28:	2200      	movs	r2, #0
 8000b2a:	4b07      	ldr	r3, [pc, #28]	; (8000b48 <__aeabi_d2ulz+0x38>)
 8000b2c:	f7ff fcde 	bl	80004ec <__aeabi_dmul>
 8000b30:	4602      	mov	r2, r0
 8000b32:	460b      	mov	r3, r1
 8000b34:	4630      	mov	r0, r6
 8000b36:	4639      	mov	r1, r7
 8000b38:	f7ff fb20 	bl	800017c <__aeabi_dsub>
 8000b3c:	f7ff ffae 	bl	8000a9c <__aeabi_d2uiz>
 8000b40:	4621      	mov	r1, r4
 8000b42:	bdd0      	pop	{r4, r6, r7, pc}
 8000b44:	3df00000 	.word	0x3df00000
 8000b48:	41f00000 	.word	0x41f00000

08000b4c <set_baudrate>:
#include "usart.h"



static void set_baudrate(uint32_t baudrate)
{
 8000b4c:	b508      	push	{r3, lr}
	  huart2.Instance = USART2;
 8000b4e:	4b0a      	ldr	r3, [pc, #40]	; (8000b78 <set_baudrate+0x2c>)
 8000b50:	4a0a      	ldr	r2, [pc, #40]	; (8000b7c <set_baudrate+0x30>)
 8000b52:	601a      	str	r2, [r3, #0]
	  huart2.Init.BaudRate = baudrate;
 8000b54:	6058      	str	r0, [r3, #4]
	  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b56:	2200      	movs	r2, #0
 8000b58:	609a      	str	r2, [r3, #8]
	  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b5a:	60da      	str	r2, [r3, #12]
	  huart2.Init.Parity = UART_PARITY_NONE;
 8000b5c:	611a      	str	r2, [r3, #16]
	  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b5e:	210c      	movs	r1, #12
 8000b60:	6159      	str	r1, [r3, #20]
	  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b62:	619a      	str	r2, [r3, #24]
	  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b64:	61da      	str	r2, [r3, #28]
	  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 8000b66:	4618      	mov	r0, r3
 8000b68:	f003 fd25 	bl	80045b6 <HAL_HalfDuplex_Init>
 8000b6c:	b900      	cbnz	r0, 8000b70 <set_baudrate+0x24>
	  {
	    Error_Handler();
	  }
}
 8000b6e:	bd08      	pop	{r3, pc}
	    Error_Handler();
 8000b70:	f000 fe6a 	bl	8001848 <Error_Handler>
}
 8000b74:	e7fb      	b.n	8000b6e <set_baudrate+0x22>
 8000b76:	bf00      	nop
 8000b78:	200017c0 	.word	0x200017c0
 8000b7c:	40004400 	.word	0x40004400

08000b80 <wire_reset>:


HAL_StatusTypeDef wire_reset(void)
{
 8000b80:	b510      	push	{r4, lr}
 8000b82:	b082      	sub	sp, #8
	uint8_t data_out = 0xF0;
 8000b84:	23f0      	movs	r3, #240	; 0xf0
 8000b86:	f88d 3007 	strb.w	r3, [sp, #7]
	uint8_t data_in = 0;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	f88d 3006 	strb.w	r3, [sp, #6]

	set_baudrate(9600);
 8000b90:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8000b94:	f7ff ffda 	bl	8000b4c <set_baudrate>
	HAL_UART_Transmit(&UART, &data_out, 1, HAL_MAX_DELAY);
 8000b98:	4c0e      	ldr	r4, [pc, #56]	; (8000bd4 <wire_reset+0x54>)
 8000b9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	f10d 0107 	add.w	r1, sp, #7
 8000ba4:	4620      	mov	r0, r4
 8000ba6:	f003 fd3b 	bl	8004620 <HAL_UART_Transmit>
	HAL_UART_Receive(&UART, &data_in, 1, HAL_MAX_DELAY);
 8000baa:	f04f 33ff 	mov.w	r3, #4294967295
 8000bae:	2201      	movs	r2, #1
 8000bb0:	f10d 0106 	add.w	r1, sp, #6
 8000bb4:	4620      	mov	r0, r4
 8000bb6:	f003 fda5 	bl	8004704 <HAL_UART_Receive>
	set_baudrate(115200);
 8000bba:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 8000bbe:	f7ff ffc5 	bl	8000b4c <set_baudrate>

	if (data_in != 0xF0)
 8000bc2:	f89d 0006 	ldrb.w	r0, [sp, #6]
		return HAL_OK;
	else
		return HAL_ERROR;
}
 8000bc6:	28f0      	cmp	r0, #240	; 0xf0
 8000bc8:	bf14      	ite	ne
 8000bca:	2000      	movne	r0, #0
 8000bcc:	2001      	moveq	r0, #1
 8000bce:	b002      	add	sp, #8
 8000bd0:	bd10      	pop	{r4, pc}
 8000bd2:	bf00      	nop
 8000bd4:	200017c0 	.word	0x200017c0

08000bd8 <wire_read>:

	return data_in & 0x01;
}

uint8_t wire_read(void)
{
 8000bd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000bdc:	b082      	sub	sp, #8
 8000bde:	2508      	movs	r5, #8
  uint8_t value = 0;
 8000be0:	2400      	movs	r4, #0
	if(USARTn -> SR & (1<<5))
 8000be2:	f8df 805c 	ldr.w	r8, [pc, #92]	; 8000c40 <wire_read+0x68>
	HAL_UART_Transmit(&UART, &data_out, 1, HAL_MAX_DELAY);
 8000be6:	4f17      	ldr	r7, [pc, #92]	; (8000c44 <wire_read+0x6c>)
 8000be8:	f04f 36ff 	mov.w	r6, #4294967295
  int i;
  for (i = 0; i < 8; i++)
  {
    value >>= 1;
 8000bec:	0864      	lsrs	r4, r4, #1
	uint8_t data_out = 0xff;
 8000bee:	23ff      	movs	r3, #255	; 0xff
 8000bf0:	f88d 3006 	strb.w	r3, [sp, #6]
	uint8_t data_in = 0x0;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	f88d 3007 	strb.w	r3, [sp, #7]
	if(USARTn -> SR & (1<<5))
 8000bfa:	f8d8 3000 	ldr.w	r3, [r8]
 8000bfe:	f013 0f20 	tst.w	r3, #32
		USARTn -> DR;
 8000c02:	bf18      	it	ne
 8000c04:	f8d8 3004 	ldrne.w	r3, [r8, #4]
	HAL_UART_Transmit(&UART, &data_out, 1, HAL_MAX_DELAY);
 8000c08:	4633      	mov	r3, r6
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	f10d 0106 	add.w	r1, sp, #6
 8000c10:	4638      	mov	r0, r7
 8000c12:	f003 fd05 	bl	8004620 <HAL_UART_Transmit>
	HAL_UART_Receive(&UART, &data_in, 1, HAL_MAX_DELAY);
 8000c16:	4633      	mov	r3, r6
 8000c18:	2201      	movs	r2, #1
 8000c1a:	f10d 0107 	add.w	r1, sp, #7
 8000c1e:	4638      	mov	r0, r7
 8000c20:	f003 fd70 	bl	8004704 <HAL_UART_Receive>
	return data_in & 0x01;
 8000c24:	f89d 3007 	ldrb.w	r3, [sp, #7]
    if (read_bit())
 8000c28:	f013 0f01 	tst.w	r3, #1
      value |= 0x80;
 8000c2c:	bf18      	it	ne
 8000c2e:	f044 0480 	orrne.w	r4, r4, #128	; 0x80
  for (i = 0; i < 8; i++)
 8000c32:	3d01      	subs	r5, #1
 8000c34:	d1da      	bne.n	8000bec <wire_read+0x14>
  }
  return value;
}
 8000c36:	4620      	mov	r0, r4
 8000c38:	b002      	add	sp, #8
 8000c3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000c3e:	bf00      	nop
 8000c40:	40004400 	.word	0x40004400
 8000c44:	200017c0 	.word	0x200017c0

08000c48 <wire_write>:
    HAL_UART_Transmit(&UART, &data_out, 1, HAL_MAX_DELAY);
  }
}

void wire_write(uint8_t byte)
{
 8000c48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	4604      	mov	r4, r0
 8000c4e:	2508      	movs	r5, #8
    uint8_t data_out = 0x0;
 8000c50:	2700      	movs	r7, #0
    HAL_UART_Transmit(&UART, &data_out, 1, HAL_MAX_DELAY);
 8000c52:	4e0b      	ldr	r6, [pc, #44]	; (8000c80 <wire_write+0x38>)
  if (value)
 8000c54:	f014 0f01 	tst.w	r4, #1
    uint8_t data_out = 0xff;
 8000c58:	bf1a      	itte	ne
 8000c5a:	23ff      	movne	r3, #255	; 0xff
 8000c5c:	f88d 3007 	strbne.w	r3, [sp, #7]
    uint8_t data_out = 0x0;
 8000c60:	f88d 7007 	strbeq.w	r7, [sp, #7]
    HAL_UART_Transmit(&UART, &data_out, 1, HAL_MAX_DELAY);
 8000c64:	f04f 33ff 	mov.w	r3, #4294967295
 8000c68:	2201      	movs	r2, #1
 8000c6a:	f10d 0107 	add.w	r1, sp, #7
 8000c6e:	4630      	mov	r0, r6
 8000c70:	f003 fcd6 	bl	8004620 <HAL_UART_Transmit>
  int i;
  for (i = 0; i < 8; i++) {
    write_bit(byte & 0x01);
    byte >>= 1;
 8000c74:	0864      	lsrs	r4, r4, #1
  for (i = 0; i < 8; i++) {
 8000c76:	3d01      	subs	r5, #1
 8000c78:	d1ec      	bne.n	8000c54 <wire_write+0xc>
  }
}
 8000c7a:	b003      	add	sp, #12
 8000c7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	200017c0 	.word	0x200017c0

08000c84 <wire_crc>:
uint8_t wire_crc(const uint8_t* data, int len)
{
  int i;
    uint8_t crc = 0;

    for (i = 0; i < len; i++)
 8000c84:	2900      	cmp	r1, #0
 8000c86:	dd19      	ble.n	8000cbc <wire_crc+0x38>
{
 8000c88:	b500      	push	{lr}
 8000c8a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c8e:	eb0c 0e01 	add.w	lr, ip, r1
    uint8_t crc = 0;
 8000c92:	2000      	movs	r0, #0
 8000c94:	e001      	b.n	8000c9a <wire_crc+0x16>
    for (i = 0; i < len; i++)
 8000c96:	45f4      	cmp	ip, lr
 8000c98:	d012      	beq.n	8000cc0 <wire_crc+0x3c>
      crc = byte_crc(crc, data[i]);
 8000c9a:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
 8000c9e:	2208      	movs	r2, #8
    uint8_t b = crc ^ byte;
 8000ca0:	ea80 0301 	eor.w	r3, r0, r1
    if (b & 0x01)
 8000ca4:	f013 0f01 	tst.w	r3, #1
 8000ca8:	ea4f 0050 	mov.w	r0, r0, lsr #1
      crc ^= 0x8c;
 8000cac:	bf1c      	itt	ne
 8000cae:	f080 008c 	eorne.w	r0, r0, #140	; 0x8c
 8000cb2:	b2c0      	uxtbne	r0, r0
    byte >>= 1;
 8000cb4:	0849      	lsrs	r1, r1, #1
  for (i = 0; i < 8; i++) {
 8000cb6:	3a01      	subs	r2, #1
 8000cb8:	d1f2      	bne.n	8000ca0 <wire_crc+0x1c>
 8000cba:	e7ec      	b.n	8000c96 <wire_crc+0x12>
    uint8_t crc = 0;
 8000cbc:	2000      	movs	r0, #0

    return crc;
}
 8000cbe:	4770      	bx	lr
 8000cc0:	f85d fb04 	ldr.w	pc, [sp], #4

08000cc4 <GetPage>:
 * Some STM32F103C8 have 64 KB FLASH Memory, so I guess they have Page 0 to Page 63 only.
 */

/* FLASH_PAGE_SIZE should be able to get the size of the Page according to the controller */
static uint32_t GetPage(uint32_t Address)
{
 8000cc4:	4602      	mov	r2, r0
 8000cc6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
  for (int indx=0; indx<128; indx++)
 8000cca:	4907      	ldr	r1, [pc, #28]	; (8000ce8 <GetPage+0x24>)
 8000ccc:	e001      	b.n	8000cd2 <GetPage+0xe>
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d007      	beq.n	8000ce2 <GetPage+0x1e>
  {
	  if((Address < (0x08000000 + (FLASH_PAGE_SIZE *(indx+1))) ) && (Address >= (0x08000000 + FLASH_PAGE_SIZE*indx)))
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	d2f8      	bcs.n	8000cce <GetPage+0xa>
 8000cdc:	4282      	cmp	r2, r0
 8000cde:	d3f6      	bcc.n	8000cce <GetPage+0xa>
		  return (0x08000000 + FLASH_PAGE_SIZE*indx);
	  }
  }

  return 0;
}
 8000ce0:	4770      	bx	lr
  return 0;
 8000ce2:	2000      	movs	r0, #0
 8000ce4:	e7fc      	b.n	8000ce0 <GetPage+0x1c>
 8000ce6:	bf00      	nop
 8000ce8:	08020000 	.word	0x08020000

08000cec <Flash_Write_Data>:
   float float_variable =  thing.a;
   return float_variable;
}

uint32_t Flash_Write_Data (uint32_t StartPageAddress, uint32_t *Data, uint16_t numberofwords)
{
 8000cec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000cf0:	b083      	sub	sp, #12
 8000cf2:	4680      	mov	r8, r0
 8000cf4:	460e      	mov	r6, r1
 8000cf6:	4617      	mov	r7, r2
	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t PAGEError;
	int sofar=0;

	  /* Unlock the Flash to enable the flash control register access *************/
	   HAL_FLASH_Unlock();
 8000cf8:	f001 fb0c 	bl	8002314 <HAL_FLASH_Unlock>

	   /* Erase the user Flash area*/

	  uint32_t StartPage = GetPage(StartPageAddress);
 8000cfc:	4640      	mov	r0, r8
 8000cfe:	f7ff ffe1 	bl	8000cc4 <GetPage>
 8000d02:	4604      	mov	r4, r0
	  uint32_t EndPageAdress = StartPageAddress + numberofwords*4;
	  uint32_t EndPage = GetPage(EndPageAdress);
 8000d04:	eb08 0087 	add.w	r0, r8, r7, lsl #2
 8000d08:	f7ff ffdc 	bl	8000cc4 <GetPage>
 8000d0c:	4603      	mov	r3, r0

	   /* Fill EraseInit structure*/
	   EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 8000d0e:	4816      	ldr	r0, [pc, #88]	; (8000d68 <Flash_Write_Data+0x7c>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	6002      	str	r2, [r0, #0]
	   EraseInitStruct.PageAddress = StartPage;
 8000d14:	6084      	str	r4, [r0, #8]
	   EraseInitStruct.NbPages     = ((EndPage - StartPage)/FLASH_PAGE_SIZE) +1;
 8000d16:	1b1b      	subs	r3, r3, r4
 8000d18:	0a9b      	lsrs	r3, r3, #10
 8000d1a:	3301      	adds	r3, #1
 8000d1c:	60c3      	str	r3, [r0, #12]

	   if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)
 8000d1e:	a901      	add	r1, sp, #4
 8000d20:	f001 fbba 	bl	8002498 <HAL_FLASHEx_Erase>
 8000d24:	b9c8      	cbnz	r0, 8000d5a <Flash_Write_Data+0x6e>
		  return HAL_FLASH_GetError ();
	   }

	   /* Program the user Flash area word by word*/

	   while (sofar<numberofwords)
 8000d26:	b197      	cbz	r7, 8000d4e <Flash_Write_Data+0x62>
 8000d28:	1f34      	subs	r4, r6, #4
	int sofar=0;
 8000d2a:	2500      	movs	r5, #0
 8000d2c:	eba8 0606 	sub.w	r6, r8, r6
 8000d30:	3604      	adds	r6, #4
	   {
	     if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartPageAddress, Data[sofar]) == HAL_OK)
 8000d32:	46a9      	mov	r9, r5
 8000d34:	f04f 0802 	mov.w	r8, #2
 8000d38:	1931      	adds	r1, r6, r4
 8000d3a:	f854 2f04 	ldr.w	r2, [r4, #4]!
 8000d3e:	464b      	mov	r3, r9
 8000d40:	4640      	mov	r0, r8
 8000d42:	f001 fb43 	bl	80023cc <HAL_FLASH_Program>
 8000d46:	b958      	cbnz	r0, 8000d60 <Flash_Write_Data+0x74>
	     {
	    	 StartPageAddress += 4;  // use StartPageAddress += 2 for half word and 8 for double word
	    	 sofar++;
 8000d48:	3501      	adds	r5, #1
	   while (sofar<numberofwords)
 8000d4a:	42af      	cmp	r7, r5
 8000d4c:	d1f4      	bne.n	8000d38 <Flash_Write_Data+0x4c>
	     }
	   }

	   /* Lock the Flash to disable the flash control register access (recommended
	      to protect the FLASH memory against possible unwanted operation) *********/
	   HAL_FLASH_Lock();
 8000d4e:	f001 faf7 	bl	8002340 <HAL_FLASH_Lock>

	   return 0;
 8000d52:	2000      	movs	r0, #0
}
 8000d54:	b003      	add	sp, #12
 8000d56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		  return HAL_FLASH_GetError ();
 8000d5a:	f001 fafb 	bl	8002354 <HAL_FLASH_GetError>
 8000d5e:	e7f9      	b.n	8000d54 <Flash_Write_Data+0x68>
	    	 return HAL_FLASH_GetError ();
 8000d60:	f001 faf8 	bl	8002354 <HAL_FLASH_GetError>
 8000d64:	e7f6      	b.n	8000d54 <Flash_Write_Data+0x68>
 8000d66:	bf00      	nop
 8000d68:	20000384 	.word	0x20000384

08000d6c <send_cmd>:
  else
    return HAL_ERROR;
}

static HAL_StatusTypeDef send_cmd(const uint8_t* rom_code, uint8_t cmd)
{
 8000d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d6e:	4605      	mov	r5, r0
 8000d70:	460e      	mov	r6, r1
  int i;

  if (wire_reset() != HAL_OK)
 8000d72:	f7ff ff05 	bl	8000b80 <wire_reset>
 8000d76:	b9a8      	cbnz	r0, 8000da4 <send_cmd+0x38>
 8000d78:	4607      	mov	r7, r0
    return HAL_ERROR;

  if (!rom_code) {
 8000d7a:	b17d      	cbz	r5, 8000d9c <send_cmd+0x30>
    wire_write(DS18B20_SKIP_ROM);
  } else {
    wire_write(DS18B20_MATCH_ROM);
 8000d7c:	2055      	movs	r0, #85	; 0x55
 8000d7e:	f7ff ff63 	bl	8000c48 <wire_write>
    for (i = 0; i < DS18B20_ROM_CODE_SIZE; i++)
 8000d82:	1e6c      	subs	r4, r5, #1
 8000d84:	3507      	adds	r5, #7
      wire_write(rom_code[i]);
 8000d86:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8000d8a:	f7ff ff5d 	bl	8000c48 <wire_write>
    for (i = 0; i < DS18B20_ROM_CODE_SIZE; i++)
 8000d8e:	42ac      	cmp	r4, r5
 8000d90:	d1f9      	bne.n	8000d86 <send_cmd+0x1a>
  }
  wire_write(cmd);
 8000d92:	4630      	mov	r0, r6
 8000d94:	f7ff ff58 	bl	8000c48 <wire_write>
  return HAL_OK;
}
 8000d98:	4638      	mov	r0, r7
 8000d9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    wire_write(DS18B20_SKIP_ROM);
 8000d9c:	20cc      	movs	r0, #204	; 0xcc
 8000d9e:	f7ff ff53 	bl	8000c48 <wire_write>
 8000da2:	e7f6      	b.n	8000d92 <send_cmd+0x26>
    return HAL_ERROR;
 8000da4:	2701      	movs	r7, #1
 8000da6:	e7f7      	b.n	8000d98 <send_cmd+0x2c>

08000da8 <ds18b20_read_scratchpad>:
{
  return send_cmd(rom_code, DS18B20_CONVERT_T);
}

static HAL_StatusTypeDef ds18b20_read_scratchpad(const uint8_t* rom_code, uint8_t* scratchpad)
{
 8000da8:	b570      	push	{r4, r5, r6, lr}
 8000daa:	460e      	mov	r6, r1
  int i;
  uint8_t crc;

  if (send_cmd(rom_code, DS18B20_READ_SCRATCHPAD) != HAL_OK)
 8000dac:	21be      	movs	r1, #190	; 0xbe
 8000dae:	f7ff ffdd 	bl	8000d6c <send_cmd>
 8000db2:	b988      	cbnz	r0, 8000dd8 <ds18b20_read_scratchpad+0x30>
 8000db4:	1e74      	subs	r4, r6, #1
 8000db6:	f106 0508 	add.w	r5, r6, #8
    return HAL_ERROR;

  for (i = 0; i < DS18B20_SCRATCHPAD_SIZE; i++)
    scratchpad[i] = wire_read();
 8000dba:	f7ff ff0d 	bl	8000bd8 <wire_read>
 8000dbe:	f804 0f01 	strb.w	r0, [r4, #1]!
  for (i = 0; i < DS18B20_SCRATCHPAD_SIZE; i++)
 8000dc2:	42ac      	cmp	r4, r5
 8000dc4:	d1f9      	bne.n	8000dba <ds18b20_read_scratchpad+0x12>

  crc = wire_crc(scratchpad, DS18B20_SCRATCHPAD_SIZE - 1);
 8000dc6:	2108      	movs	r1, #8
 8000dc8:	4630      	mov	r0, r6
 8000dca:	f7ff ff5b 	bl	8000c84 <wire_crc>
  if (scratchpad[DS18B20_SCRATCHPAD_SIZE - 1] == crc)
 8000dce:	7a33      	ldrb	r3, [r6, #8]
    return HAL_ERROR;
 8000dd0:	1a18      	subs	r0, r3, r0
 8000dd2:	bf18      	it	ne
 8000dd4:	2001      	movne	r0, #1
    return HAL_OK;
  else
    return HAL_ERROR;
}
 8000dd6:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8000dd8:	2001      	movs	r0, #1
 8000dda:	e7fc      	b.n	8000dd6 <ds18b20_read_scratchpad+0x2e>

08000ddc <ds18b20_read_address>:
{
 8000ddc:	b570      	push	{r4, r5, r6, lr}
 8000dde:	4605      	mov	r5, r0
  if (wire_reset() != HAL_OK)
 8000de0:	f7ff fece 	bl	8000b80 <wire_reset>
 8000de4:	b108      	cbz	r0, 8000dea <ds18b20_read_address+0xe>
    return HAL_ERROR;
 8000de6:	2001      	movs	r0, #1
}
 8000de8:	bd70      	pop	{r4, r5, r6, pc}
  wire_write(DS18B20_READ_ROM);
 8000dea:	2033      	movs	r0, #51	; 0x33
 8000dec:	f7ff ff2c 	bl	8000c48 <wire_write>
  for (i = 0; i < DS18B20_ROM_CODE_SIZE; i++)
 8000df0:	1e6c      	subs	r4, r5, #1
 8000df2:	1dee      	adds	r6, r5, #7
    rom_code[i] = wire_read();
 8000df4:	f7ff fef0 	bl	8000bd8 <wire_read>
 8000df8:	f804 0f01 	strb.w	r0, [r4, #1]!
  for (i = 0; i < DS18B20_ROM_CODE_SIZE; i++)
 8000dfc:	42b4      	cmp	r4, r6
 8000dfe:	d1f9      	bne.n	8000df4 <ds18b20_read_address+0x18>
  crc = wire_crc(rom_code, DS18B20_ROM_CODE_SIZE - 1);
 8000e00:	2107      	movs	r1, #7
 8000e02:	4628      	mov	r0, r5
 8000e04:	f7ff ff3e 	bl	8000c84 <wire_crc>
  if (rom_code[DS18B20_ROM_CODE_SIZE - 1] == crc)
 8000e08:	79eb      	ldrb	r3, [r5, #7]
    return HAL_ERROR;
 8000e0a:	1a18      	subs	r0, r3, r0
 8000e0c:	bf18      	it	ne
 8000e0e:	2001      	movne	r0, #1
 8000e10:	e7ea      	b.n	8000de8 <ds18b20_read_address+0xc>

08000e12 <ds18b20_start_measure>:
{
 8000e12:	b508      	push	{r3, lr}
  return send_cmd(rom_code, DS18B20_CONVERT_T);
 8000e14:	2144      	movs	r1, #68	; 0x44
 8000e16:	f7ff ffa9 	bl	8000d6c <send_cmd>
}
 8000e1a:	bd08      	pop	{r3, pc}

08000e1c <ds18b20_get_temp_wo_fp>:

  return temp / 16.0f;
}

int32_t ds18b20_get_temp_wo_fp(const uint8_t* rom_code)
{
 8000e1c:	b500      	push	{lr}
 8000e1e:	b085      	sub	sp, #20
  uint8_t scratchpad[DS18B20_SCRATCHPAD_SIZE];
  int16_t temp;

  if (ds18b20_read_scratchpad(rom_code, scratchpad) != HAL_OK)
 8000e20:	a901      	add	r1, sp, #4
 8000e22:	f7ff ffc1 	bl	8000da8 <ds18b20_read_scratchpad>
 8000e26:	b958      	cbnz	r0, 8000e40 <ds18b20_get_temp_wo_fp+0x24>
    return 8500;

  memcpy(&temp, &scratchpad[0], sizeof(temp));

  return (temp * 100) / 16;
 8000e28:	f9bd 0004 	ldrsh.w	r0, [sp, #4]
 8000e2c:	2364      	movs	r3, #100	; 0x64
 8000e2e:	fb03 f000 	mul.w	r0, r3, r0
 8000e32:	2800      	cmp	r0, #0
 8000e34:	bfb8      	it	lt
 8000e36:	300f      	addlt	r0, #15
 8000e38:	1100      	asrs	r0, r0, #4
}
 8000e3a:	b005      	add	sp, #20
 8000e3c:	f85d fb04 	ldr.w	pc, [sp], #4
    return 8500;
 8000e40:	f242 1034 	movw	r0, #8500	; 0x2134
 8000e44:	e7f9      	b.n	8000e3a <ds18b20_get_temp_wo_fp+0x1e>
	...

08000e48 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e4c:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e4e:	2400      	movs	r4, #0
 8000e50:	9404      	str	r4, [sp, #16]
 8000e52:	9405      	str	r4, [sp, #20]
 8000e54:	9406      	str	r4, [sp, #24]
 8000e56:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e58:	4b2e      	ldr	r3, [pc, #184]	; (8000f14 <MX_GPIO_Init+0xcc>)
 8000e5a:	699a      	ldr	r2, [r3, #24]
 8000e5c:	f042 0210 	orr.w	r2, r2, #16
 8000e60:	619a      	str	r2, [r3, #24]
 8000e62:	699a      	ldr	r2, [r3, #24]
 8000e64:	f002 0210 	and.w	r2, r2, #16
 8000e68:	9200      	str	r2, [sp, #0]
 8000e6a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e6c:	699a      	ldr	r2, [r3, #24]
 8000e6e:	f042 0220 	orr.w	r2, r2, #32
 8000e72:	619a      	str	r2, [r3, #24]
 8000e74:	699a      	ldr	r2, [r3, #24]
 8000e76:	f002 0220 	and.w	r2, r2, #32
 8000e7a:	9201      	str	r2, [sp, #4]
 8000e7c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e7e:	699a      	ldr	r2, [r3, #24]
 8000e80:	f042 0204 	orr.w	r2, r2, #4
 8000e84:	619a      	str	r2, [r3, #24]
 8000e86:	699a      	ldr	r2, [r3, #24]
 8000e88:	f002 0204 	and.w	r2, r2, #4
 8000e8c:	9202      	str	r2, [sp, #8]
 8000e8e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e90:	699a      	ldr	r2, [r3, #24]
 8000e92:	f042 0208 	orr.w	r2, r2, #8
 8000e96:	619a      	str	r2, [r3, #24]
 8000e98:	699b      	ldr	r3, [r3, #24]
 8000e9a:	f003 0308 	and.w	r3, r3, #8
 8000e9e:	9303      	str	r3, [sp, #12]
 8000ea0:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000ea2:	f8df 8074 	ldr.w	r8, [pc, #116]	; 8000f18 <MX_GPIO_Init+0xd0>
 8000ea6:	4622      	mov	r2, r4
 8000ea8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000eac:	4640      	mov	r0, r8
 8000eae:	f001 fc91 	bl	80027d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GSM_RESET_GPIO_Port, GSM_RESET_Pin, GPIO_PIN_SET);
 8000eb2:	4d1a      	ldr	r5, [pc, #104]	; (8000f1c <MX_GPIO_Init+0xd4>)
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000eba:	4628      	mov	r0, r5
 8000ebc:	f001 fc8a 	bl	80027d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DS18B20_GPIO_Port, DS18B20_Pin, GPIO_PIN_RESET);
 8000ec0:	4622      	mov	r2, r4
 8000ec2:	2180      	movs	r1, #128	; 0x80
 8000ec4:	4628      	mov	r0, r5
 8000ec6:	f001 fc85 	bl	80027d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000eca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ece:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed0:	2601      	movs	r6, #1
 8000ed2:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed4:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed6:	2702      	movs	r7, #2
 8000ed8:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000eda:	a904      	add	r1, sp, #16
 8000edc:	4640      	mov	r0, r8
 8000ede:	f001 fb3f 	bl	8002560 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GSM_RESET_Pin;
 8000ee2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ee6:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000ee8:	2311      	movs	r3, #17
 8000eea:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eec:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eee:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(GSM_RESET_GPIO_Port, &GPIO_InitStruct);
 8000ef0:	a904      	add	r1, sp, #16
 8000ef2:	4628      	mov	r0, r5
 8000ef4:	f001 fb34 	bl	8002560 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DS18B20_Pin;
 8000ef8:	2380      	movs	r3, #128	; 0x80
 8000efa:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000efc:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efe:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f00:	2303      	movs	r3, #3
 8000f02:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(DS18B20_GPIO_Port, &GPIO_InitStruct);
 8000f04:	a904      	add	r1, sp, #16
 8000f06:	4628      	mov	r0, r5
 8000f08:	f001 fb2a 	bl	8002560 <HAL_GPIO_Init>

}
 8000f0c:	b008      	add	sp, #32
 8000f0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000f12:	bf00      	nop
 8000f14:	40021000 	.word	0x40021000
 8000f18:	40011000 	.word	0x40011000
 8000f1c:	40010c00 	.word	0x40010c00

08000f20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f20:	b500      	push	{lr}
 8000f22:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f24:	2300      	movs	r3, #0
 8000f26:	930c      	str	r3, [sp, #48]	; 0x30
 8000f28:	930d      	str	r3, [sp, #52]	; 0x34
 8000f2a:	930f      	str	r3, [sp, #60]	; 0x3c
 8000f2c:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f2e:	9305      	str	r3, [sp, #20]
 8000f30:	9306      	str	r3, [sp, #24]
 8000f32:	9307      	str	r3, [sp, #28]
 8000f34:	9308      	str	r3, [sp, #32]
 8000f36:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f38:	9301      	str	r3, [sp, #4]
 8000f3a:	9302      	str	r3, [sp, #8]
 8000f3c:	9303      	str	r3, [sp, #12]
 8000f3e:	9304      	str	r3, [sp, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f40:	2201      	movs	r2, #1
 8000f42:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f44:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f48:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f4a:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f4c:	2202      	movs	r2, #2
 8000f4e:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f50:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000f52:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000f56:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f58:	a80a      	add	r0, sp, #40	; 0x28
 8000f5a:	f002 fc5d 	bl	8003818 <HAL_RCC_OscConfig>
 8000f5e:	b9c0      	cbnz	r0, 8000f92 <SystemClock_Config+0x72>
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f60:	230f      	movs	r3, #15
 8000f62:	9305      	str	r3, [sp, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f64:	2102      	movs	r1, #2
 8000f66:	9106      	str	r1, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f6c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f70:	9208      	str	r2, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f72:	9309      	str	r3, [sp, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f74:	a805      	add	r0, sp, #20
 8000f76:	f002 fe9d 	bl	8003cb4 <HAL_RCC_ClockConfig>
 8000f7a:	b960      	cbnz	r0, 8000f96 <SystemClock_Config+0x76>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000f7c:	2310      	movs	r3, #16
 8000f7e:	9301      	str	r3, [sp, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000f80:	2300      	movs	r3, #0
 8000f82:	9304      	str	r3, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f84:	a801      	add	r0, sp, #4
 8000f86:	f002 ff6d 	bl	8003e64 <HAL_RCCEx_PeriphCLKConfig>
 8000f8a:	b930      	cbnz	r0, 8000f9a <SystemClock_Config+0x7a>
  {
    Error_Handler();
  }
}
 8000f8c:	b015      	add	sp, #84	; 0x54
 8000f8e:	f85d fb04 	ldr.w	pc, [sp], #4
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f92:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f94:	e7fe      	b.n	8000f94 <SystemClock_Config+0x74>
 8000f96:	b672      	cpsid	i
 8000f98:	e7fe      	b.n	8000f98 <SystemClock_Config+0x78>
 8000f9a:	b672      	cpsid	i
 8000f9c:	e7fe      	b.n	8000f9c <SystemClock_Config+0x7c>
	...

08000fa0 <HAL_UART_RxCpltCallback>:
{
 8000fa0:	b508      	push	{r3, lr}
	if(huart->Instance == USART1)
 8000fa2:	6802      	ldr	r2, [r0, #0]
 8000fa4:	4b10      	ldr	r3, [pc, #64]	; (8000fe8 <HAL_UART_RxCpltCallback+0x48>)
 8000fa6:	429a      	cmp	r2, r3
 8000fa8:	d000      	beq.n	8000fac <HAL_UART_RxCpltCallback+0xc>
}
 8000faa:	bd08      	pop	{r3, pc}
		GSM.LastTickReceive = HAL_GetTick();
 8000fac:	f001 f8a8 	bl	8002100 <HAL_GetTick>
 8000fb0:	4b0e      	ldr	r3, [pc, #56]	; (8000fec <HAL_UART_RxCpltCallback+0x4c>)
 8000fb2:	f8c3 0218 	str.w	r0, [r3, #536]	; 0x218
		if(ReceiveTmp != 0xd)
 8000fb6:	4b0e      	ldr	r3, [pc, #56]	; (8000ff0 <HAL_UART_RxCpltCallback+0x50>)
 8000fb8:	7819      	ldrb	r1, [r3, #0]
 8000fba:	290d      	cmp	r1, #13
 8000fbc:	d105      	bne.n	8000fca <HAL_UART_RxCpltCallback+0x2a>
		HAL_UART_Receive_IT(&huart1, &ReceiveTmp, 1);
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	490b      	ldr	r1, [pc, #44]	; (8000ff0 <HAL_UART_RxCpltCallback+0x50>)
 8000fc2:	480c      	ldr	r0, [pc, #48]	; (8000ff4 <HAL_UART_RxCpltCallback+0x54>)
 8000fc4:	f003 fe05 	bl	8004bd2 <HAL_UART_Receive_IT>
}
 8000fc8:	e7ef      	b.n	8000faa <HAL_UART_RxCpltCallback+0xa>
			if (RB_OK == Ring_Buffer_Write(&ReceiveBuffer, ReceiveTmp))
 8000fca:	480b      	ldr	r0, [pc, #44]	; (8000ff8 <HAL_UART_RxCpltCallback+0x58>)
 8000fcc:	f000 fdf9 	bl	8001bc2 <Ring_Buffer_Write>
 8000fd0:	2800      	cmp	r0, #0
 8000fd2:	d1f4      	bne.n	8000fbe <HAL_UART_RxCpltCallback+0x1e>
				if(ReceiveTmp == ENDLINE)
 8000fd4:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <HAL_UART_RxCpltCallback+0x50>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	2b0a      	cmp	r3, #10
 8000fda:	d1f0      	bne.n	8000fbe <HAL_UART_RxCpltCallback+0x1e>
					LineCounter++;
 8000fdc:	4a07      	ldr	r2, [pc, #28]	; (8000ffc <HAL_UART_RxCpltCallback+0x5c>)
 8000fde:	7813      	ldrb	r3, [r2, #0]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	7013      	strb	r3, [r2, #0]
 8000fe4:	e7eb      	b.n	8000fbe <HAL_UART_RxCpltCallback+0x1e>
 8000fe6:	bf00      	nop
 8000fe8:	40013800 	.word	0x40013800
 8000fec:	20000f00 	.word	0x20000f00
 8000ff0:	20001330 	.word	0x20001330
 8000ff4:	2000177c 	.word	0x2000177c
 8000ff8:	2000112c 	.word	0x2000112c
 8000ffc:	20001128 	.word	0x20001128

08001000 <HAL_UART_TxCpltCallback>:
	*Uart1isBusyPtr = 0;
 8001000:	4b02      	ldr	r3, [pc, #8]	; (800100c <HAL_UART_TxCpltCallback+0xc>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	2200      	movs	r2, #0
 8001006:	701a      	strb	r2, [r3, #0]
}
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	20000004 	.word	0x20000004

08001010 <HAL_TIM_PeriodElapsedCallback>:
	if(htim->Instance == TIM3)
 8001010:	6802      	ldr	r2, [r0, #0]
 8001012:	4b2e      	ldr	r3, [pc, #184]	; (80010cc <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001014:	429a      	cmp	r2, r3
 8001016:	d000      	beq.n	800101a <HAL_TIM_PeriodElapsedCallback+0xa>
 8001018:	4770      	bx	lr
{
 800101a:	b510      	push	{r4, lr}
 800101c:	b090      	sub	sp, #64	; 0x40
		timPeriodCounter++;
 800101e:	4a2c      	ldr	r2, [pc, #176]	; (80010d0 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001020:	7813      	ldrb	r3, [r2, #0]
 8001022:	3301      	adds	r3, #1
 8001024:	7013      	strb	r3, [r2, #0]
		Temperature100ToString(temperature, TemperatureString);
 8001026:	ac06      	add	r4, sp, #24
 8001028:	4621      	mov	r1, r4
 800102a:	4b2a      	ldr	r3, [pc, #168]	; (80010d4 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800102c:	6818      	ldr	r0, [r3, #0]
 800102e:	f000 ffd5 	bl	8001fdc <Temperature100ToString>
		sprintf(OneSample, "%.2u/%.2u/%.2u,%.2u:%.2u:%.2u,%s\n", year, month, day, hour, minute, second, TemperatureString);
 8001032:	9404      	str	r4, [sp, #16]
 8001034:	4b28      	ldr	r3, [pc, #160]	; (80010d8 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	9303      	str	r3, [sp, #12]
 800103a:	4b28      	ldr	r3, [pc, #160]	; (80010dc <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	9302      	str	r3, [sp, #8]
 8001040:	4b27      	ldr	r3, [pc, #156]	; (80010e0 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	9301      	str	r3, [sp, #4]
 8001046:	4b27      	ldr	r3, [pc, #156]	; (80010e4 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	9300      	str	r3, [sp, #0]
 800104c:	4b26      	ldr	r3, [pc, #152]	; (80010e8 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	4a26      	ldr	r2, [pc, #152]	; (80010ec <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001052:	7812      	ldrb	r2, [r2, #0]
 8001054:	4926      	ldr	r1, [pc, #152]	; (80010f0 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001056:	a808      	add	r0, sp, #32
 8001058:	f006 fa36 	bl	80074c8 <siprintf>
		if(FTPMessageBoxRecordSwitch == 1)
 800105c:	4b25      	ldr	r3, [pc, #148]	; (80010f4 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	2b01      	cmp	r3, #1
 8001062:	d007      	beq.n	8001074 <HAL_TIM_PeriodElapsedCallback+0x64>
		else if(FTPMessageBoxRecordSwitch == 2)
 8001064:	2b02      	cmp	r3, #2
 8001066:	d017      	beq.n	8001098 <HAL_TIM_PeriodElapsedCallback+0x88>
		if(timPeriodCounter == 42)
 8001068:	4b19      	ldr	r3, [pc, #100]	; (80010d0 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	2b2a      	cmp	r3, #42	; 0x2a
 800106e:	d025      	beq.n	80010bc <HAL_TIM_PeriodElapsedCallback+0xac>
}
 8001070:	b010      	add	sp, #64	; 0x40
 8001072:	bd10      	pop	{r4, pc}
			strcat(FTPMessageBox1, OneSample);
 8001074:	a908      	add	r1, sp, #32
 8001076:	4820      	ldr	r0, [pc, #128]	; (80010f8 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001078:	f006 fa46 	bl	8007508 <strcat>
		if(timPeriodCounter == 42)
 800107c:	4b14      	ldr	r3, [pc, #80]	; (80010d0 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	2b2a      	cmp	r3, #42	; 0x2a
 8001082:	d1f5      	bne.n	8001070 <HAL_TIM_PeriodElapsedCallback+0x60>
			SMSUartTxState = FTPMsgWrite;
 8001084:	4b1d      	ldr	r3, [pc, #116]	; (80010fc <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001086:	2205      	movs	r2, #5
 8001088:	701a      	strb	r2, [r3, #0]
				FTPMessageBox2[0] = '\0';
 800108a:	4b1d      	ldr	r3, [pc, #116]	; (8001100 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800108c:	2200      	movs	r2, #0
 800108e:	701a      	strb	r2, [r3, #0]
				FTPMessageBoxRecordSwitch = 2;
 8001090:	4b18      	ldr	r3, [pc, #96]	; (80010f4 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001092:	2202      	movs	r2, #2
 8001094:	701a      	strb	r2, [r3, #0]
 8001096:	e014      	b.n	80010c2 <HAL_TIM_PeriodElapsedCallback+0xb2>
			strcat(FTPMessageBox2, OneSample);
 8001098:	a908      	add	r1, sp, #32
 800109a:	4819      	ldr	r0, [pc, #100]	; (8001100 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800109c:	f006 fa34 	bl	8007508 <strcat>
		if(timPeriodCounter == 42)
 80010a0:	4b0b      	ldr	r3, [pc, #44]	; (80010d0 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	2b2a      	cmp	r3, #42	; 0x2a
 80010a6:	d1e3      	bne.n	8001070 <HAL_TIM_PeriodElapsedCallback+0x60>
			SMSUartTxState = FTPMsgWrite;
 80010a8:	4b14      	ldr	r3, [pc, #80]	; (80010fc <HAL_TIM_PeriodElapsedCallback+0xec>)
 80010aa:	2205      	movs	r2, #5
 80010ac:	701a      	strb	r2, [r3, #0]
				FTPMessageBox1[0] = '\0';
 80010ae:	4b12      	ldr	r3, [pc, #72]	; (80010f8 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	701a      	strb	r2, [r3, #0]
				FTPMessageBoxRecordSwitch = 1;
 80010b4:	4b0f      	ldr	r3, [pc, #60]	; (80010f4 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80010b6:	2201      	movs	r2, #1
 80010b8:	701a      	strb	r2, [r3, #0]
 80010ba:	e002      	b.n	80010c2 <HAL_TIM_PeriodElapsedCallback+0xb2>
			SMSUartTxState = FTPMsgWrite;
 80010bc:	4b0f      	ldr	r3, [pc, #60]	; (80010fc <HAL_TIM_PeriodElapsedCallback+0xec>)
 80010be:	2205      	movs	r2, #5
 80010c0:	701a      	strb	r2, [r3, #0]
			timPeriodCounter = 0;
 80010c2:	4b03      	ldr	r3, [pc, #12]	; (80010d0 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	701a      	strb	r2, [r3, #0]
}
 80010c8:	e7d2      	b.n	8001070 <HAL_TIM_PeriodElapsedCallback+0x60>
 80010ca:	bf00      	nop
 80010cc:	40000400 	.word	0x40000400
 80010d0:	200016e4 	.word	0x200016e4
 80010d4:	200016e0 	.word	0x200016e0
 80010d8:	200016db 	.word	0x200016db
 80010dc:	200016d9 	.word	0x200016d9
 80010e0:	200016d8 	.word	0x200016d8
 80010e4:	200016ce 	.word	0x200016ce
 80010e8:	200016da 	.word	0x200016da
 80010ec:	200016e5 	.word	0x200016e5
 80010f0:	0800b140 	.word	0x0800b140
 80010f4:	20000000 	.word	0x20000000
 80010f8:	20000494 	.word	0x20000494
 80010fc:	200014c0 	.word	0x200014c0
 8001100:	200009c8 	.word	0x200009c8

08001104 <CommStateMachineTask>:
	  if(Uart1isBusy == 0 && HAL_GetTick() - LastTickForSim800 >= inquiryTimeVar)
 8001104:	4b99      	ldr	r3, [pc, #612]	; (800136c <CommStateMachineTask+0x268>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	b103      	cbz	r3, 800110c <CommStateMachineTask+0x8>
 800110a:	4770      	bx	lr
{
 800110c:	b530      	push	{r4, r5, lr}
 800110e:	b087      	sub	sp, #28
 8001110:	2400      	movs	r4, #0
	  if(Uart1isBusy == 0 && HAL_GetTick() - LastTickForSim800 >= inquiryTimeVar)
 8001112:	f000 fff5 	bl	8002100 <HAL_GetTick>
 8001116:	4b96      	ldr	r3, [pc, #600]	; (8001370 <CommStateMachineTask+0x26c>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	1ac0      	subs	r0, r0, r3
 800111c:	4b95      	ldr	r3, [pc, #596]	; (8001374 <CommStateMachineTask+0x270>)
 800111e:	881b      	ldrh	r3, [r3, #0]
 8001120:	4298      	cmp	r0, r3
 8001122:	d201      	bcs.n	8001128 <CommStateMachineTask+0x24>
}
 8001124:	b007      	add	sp, #28
 8001126:	bd30      	pop	{r4, r5, pc}
	  	{LastTickForSim800 = HAL_GetTick();
 8001128:	f000 ffea 	bl	8002100 <HAL_GetTick>
 800112c:	4b90      	ldr	r3, [pc, #576]	; (8001370 <CommStateMachineTask+0x26c>)
 800112e:	6018      	str	r0, [r3, #0]
	  		if(SMSUartTxState == Control)
 8001130:	4b91      	ldr	r3, [pc, #580]	; (8001378 <CommStateMachineTask+0x274>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	2b03      	cmp	r3, #3
 8001136:	d016      	beq.n	8001166 <CommStateMachineTask+0x62>
	  		else if(SMSUartTxState == Reset)
 8001138:	2b00      	cmp	r3, #0
 800113a:	d152      	bne.n	80011e2 <CommStateMachineTask+0xde>
	  			switch(TaskState)
 800113c:	4b8f      	ldr	r3, [pc, #572]	; (800137c <CommStateMachineTask+0x278>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	2b01      	cmp	r3, #1
 8001142:	d037      	beq.n	80011b4 <CommStateMachineTask+0xb0>
 8001144:	2b02      	cmp	r3, #2
 8001146:	d043      	beq.n	80011d0 <CommStateMachineTask+0xcc>
 8001148:	2b00      	cmp	r3, #0
 800114a:	d1eb      	bne.n	8001124 <CommStateMachineTask+0x20>
	  				inquiryTimeVar = 100;
 800114c:	4b89      	ldr	r3, [pc, #548]	; (8001374 <CommStateMachineTask+0x270>)
 800114e:	2264      	movs	r2, #100	; 0x64
 8001150:	801a      	strh	r2, [r3, #0]
	  				HAL_GPIO_WritePin(GSM_RESET_GPIO_Port, GSM_RESET_Pin, RESET);
 8001152:	2200      	movs	r2, #0
 8001154:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001158:	4889      	ldr	r0, [pc, #548]	; (8001380 <CommStateMachineTask+0x27c>)
 800115a:	f001 fb3b 	bl	80027d4 <HAL_GPIO_WritePin>
	  				TaskState = 1;
 800115e:	4b87      	ldr	r3, [pc, #540]	; (800137c <CommStateMachineTask+0x278>)
 8001160:	2201      	movs	r2, #1
 8001162:	701a      	strb	r2, [r3, #0]
	  				break;
 8001164:	e7de      	b.n	8001124 <CommStateMachineTask+0x20>
	  			switch(TaskState)
 8001166:	4b87      	ldr	r3, [pc, #540]	; (8001384 <CommStateMachineTask+0x280>)
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	2b03      	cmp	r3, #3
 800116c:	d8da      	bhi.n	8001124 <CommStateMachineTask+0x20>
 800116e:	e8df f003 	tbb	[pc, r3]
 8001172:	0902      	.short	0x0902
 8001174:	1710      	.short	0x1710
	  				UartSend("AT+CSQ\r\n");
 8001176:	4884      	ldr	r0, [pc, #528]	; (8001388 <CommStateMachineTask+0x284>)
 8001178:	f000 ff06 	bl	8001f88 <UartSend>
	  				TaskState = 1;
 800117c:	4b81      	ldr	r3, [pc, #516]	; (8001384 <CommStateMachineTask+0x280>)
 800117e:	2201      	movs	r2, #1
 8001180:	701a      	strb	r2, [r3, #0]
	  				break;
 8001182:	e7cf      	b.n	8001124 <CommStateMachineTask+0x20>
	  				UartSend("AT+CREG?\r\n");
 8001184:	4881      	ldr	r0, [pc, #516]	; (800138c <CommStateMachineTask+0x288>)
 8001186:	f000 feff 	bl	8001f88 <UartSend>
	  				TaskState = 2;
 800118a:	4b7e      	ldr	r3, [pc, #504]	; (8001384 <CommStateMachineTask+0x280>)
 800118c:	2202      	movs	r2, #2
 800118e:	701a      	strb	r2, [r3, #0]
	  				break;
 8001190:	e7c8      	b.n	8001124 <CommStateMachineTask+0x20>
	  				 UartSend("AT+CMGL=\"REC UNREAD\",0\r\n");
 8001192:	487f      	ldr	r0, [pc, #508]	; (8001390 <CommStateMachineTask+0x28c>)
 8001194:	f000 fef8 	bl	8001f88 <UartSend>
	  				 TaskState = 3;
 8001198:	4b7a      	ldr	r3, [pc, #488]	; (8001384 <CommStateMachineTask+0x280>)
 800119a:	2203      	movs	r2, #3
 800119c:	701a      	strb	r2, [r3, #0]
	  				 break;
 800119e:	e7c1      	b.n	8001124 <CommStateMachineTask+0x20>
	  				UartSend("AT+CCLK?\r\n");
 80011a0:	487c      	ldr	r0, [pc, #496]	; (8001394 <CommStateMachineTask+0x290>)
 80011a2:	f000 fef1 	bl	8001f88 <UartSend>
	  				TaskState = 0;
 80011a6:	4b77      	ldr	r3, [pc, #476]	; (8001384 <CommStateMachineTask+0x280>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	701a      	strb	r2, [r3, #0]
	  				SMSUartTxState = Control;
 80011ac:	4b72      	ldr	r3, [pc, #456]	; (8001378 <CommStateMachineTask+0x274>)
 80011ae:	2203      	movs	r2, #3
 80011b0:	701a      	strb	r2, [r3, #0]
	  				break;
 80011b2:	e7b7      	b.n	8001124 <CommStateMachineTask+0x20>
	  				inquiryTimeVar = 5000;
 80011b4:	4b6f      	ldr	r3, [pc, #444]	; (8001374 <CommStateMachineTask+0x270>)
 80011b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80011ba:	801a      	strh	r2, [r3, #0]
	  				HAL_GPIO_WritePin(GSM_RESET_GPIO_Port, GSM_RESET_Pin, SET);
 80011bc:	2201      	movs	r2, #1
 80011be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011c2:	486f      	ldr	r0, [pc, #444]	; (8001380 <CommStateMachineTask+0x27c>)
 80011c4:	f001 fb06 	bl	80027d4 <HAL_GPIO_WritePin>
	  				TaskState = 2;
 80011c8:	4b6c      	ldr	r3, [pc, #432]	; (800137c <CommStateMachineTask+0x278>)
 80011ca:	2202      	movs	r2, #2
 80011cc:	701a      	strb	r2, [r3, #0]
	  				break;
 80011ce:	e7a9      	b.n	8001124 <CommStateMachineTask+0x20>
	  				inquiryTimeVar = INQUIRY_TIME;
 80011d0:	4b68      	ldr	r3, [pc, #416]	; (8001374 <CommStateMachineTask+0x270>)
 80011d2:	22fa      	movs	r2, #250	; 0xfa
 80011d4:	801a      	strh	r2, [r3, #0]
	  				TaskState = 2;
 80011d6:	2302      	movs	r3, #2
 80011d8:	4a68      	ldr	r2, [pc, #416]	; (800137c <CommStateMachineTask+0x278>)
 80011da:	7013      	strb	r3, [r2, #0]
	  				SMSUartTxState = Config;
 80011dc:	4a66      	ldr	r2, [pc, #408]	; (8001378 <CommStateMachineTask+0x274>)
 80011de:	7013      	strb	r3, [r2, #0]
	  				break;
 80011e0:	e7a0      	b.n	8001124 <CommStateMachineTask+0x20>
	  		else if(SMSUartTxState == Start)
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	d01e      	beq.n	8001224 <CommStateMachineTask+0x120>
	  		else if(SMSUartTxState == SMSMsgWrite)
 80011e6:	2b04      	cmp	r3, #4
 80011e8:	d03f      	beq.n	800126a <CommStateMachineTask+0x166>
	  		else if(SMSUartTxState == Config)
 80011ea:	2b02      	cmp	r3, #2
 80011ec:	d07f      	beq.n	80012ee <CommStateMachineTask+0x1ea>
	  		else if(SMSUartTxState == FTPMsgWrite)
 80011ee:	2b05      	cmp	r3, #5
 80011f0:	d198      	bne.n	8001124 <CommStateMachineTask+0x20>
	  			inquiryTimeVar = INQUIRY_TIME;
 80011f2:	4b60      	ldr	r3, [pc, #384]	; (8001374 <CommStateMachineTask+0x270>)
 80011f4:	22fa      	movs	r2, #250	; 0xfa
 80011f6:	801a      	strh	r2, [r3, #0]
	  			switch(TaskState)
 80011f8:	4b67      	ldr	r3, [pc, #412]	; (8001398 <CommStateMachineTask+0x294>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	2b0f      	cmp	r3, #15
 80011fe:	d891      	bhi.n	8001124 <CommStateMachineTask+0x20>
 8001200:	e8df f013 	tbh	[pc, r3, lsl #1]
 8001204:	00f000ac 	.word	0x00f000ac
 8001208:	010800fd 	.word	0x010800fd
 800120c:	01210117 	.word	0x01210117
 8001210:	01350128 	.word	0x01350128
 8001214:	014f0142 	.word	0x014f0142
 8001218:	017a016d 	.word	0x017a016d
 800121c:	01aa0185 	.word	0x01aa0185
 8001220:	01c301bc 	.word	0x01c301bc
	  			inquiryTimeVar = 2000;
 8001224:	4b53      	ldr	r3, [pc, #332]	; (8001374 <CommStateMachineTask+0x270>)
 8001226:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800122a:	801a      	strh	r2, [r3, #0]
	  			switch(TaskState)
 800122c:	4b5b      	ldr	r3, [pc, #364]	; (800139c <CommStateMachineTask+0x298>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	b153      	cbz	r3, 8001248 <CommStateMachineTask+0x144>
 8001232:	2b01      	cmp	r3, #1
 8001234:	f47f af76 	bne.w	8001124 <CommStateMachineTask+0x20>
	  				if(GSM.CRegStat == 1)
 8001238:	4b59      	ldr	r3, [pc, #356]	; (80013a0 <CommStateMachineTask+0x29c>)
 800123a:	7a9b      	ldrb	r3, [r3, #10]
 800123c:	2b01      	cmp	r3, #1
 800123e:	d00a      	beq.n	8001256 <CommStateMachineTask+0x152>
	  					TaskState = 0;
 8001240:	4b56      	ldr	r3, [pc, #344]	; (800139c <CommStateMachineTask+0x298>)
 8001242:	2200      	movs	r2, #0
 8001244:	701a      	strb	r2, [r3, #0]
 8001246:	e76d      	b.n	8001124 <CommStateMachineTask+0x20>
	  				UartSend("AT+CREG?\r\n");
 8001248:	4850      	ldr	r0, [pc, #320]	; (800138c <CommStateMachineTask+0x288>)
 800124a:	f000 fe9d 	bl	8001f88 <UartSend>
	  				TaskState = 1;
 800124e:	4b53      	ldr	r3, [pc, #332]	; (800139c <CommStateMachineTask+0x298>)
 8001250:	2201      	movs	r2, #1
 8001252:	701a      	strb	r2, [r3, #0]
	  				break;
 8001254:	e766      	b.n	8001124 <CommStateMachineTask+0x20>
	  					inquiryTimeVar = INQUIRY_TIME;
 8001256:	4b47      	ldr	r3, [pc, #284]	; (8001374 <CommStateMachineTask+0x270>)
 8001258:	22fa      	movs	r2, #250	; 0xfa
 800125a:	801a      	strh	r2, [r3, #0]
	  					TaskState = 0;
 800125c:	4b4f      	ldr	r3, [pc, #316]	; (800139c <CommStateMachineTask+0x298>)
 800125e:	2200      	movs	r2, #0
 8001260:	701a      	strb	r2, [r3, #0]
	  					SMSUartTxState = Control;
 8001262:	4b45      	ldr	r3, [pc, #276]	; (8001378 <CommStateMachineTask+0x274>)
 8001264:	2203      	movs	r2, #3
 8001266:	701a      	strb	r2, [r3, #0]
 8001268:	e75c      	b.n	8001124 <CommStateMachineTask+0x20>
	  			switch(TaskState)
 800126a:	4b4e      	ldr	r3, [pc, #312]	; (80013a4 <CommStateMachineTask+0x2a0>)
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	2b03      	cmp	r3, #3
 8001270:	f63f af58 	bhi.w	8001124 <CommStateMachineTask+0x20>
 8001274:	e8df f003 	tbb	[pc, r3]
 8001278:	31241302 	.word	0x31241302
	  				sprintf(ATcmdSMS, "AT+CMGS=\"%s\"\r\n", GSM.ConfigFlash.number2);
 800127c:	4c4a      	ldr	r4, [pc, #296]	; (80013a8 <CommStateMachineTask+0x2a4>)
 800127e:	4a4b      	ldr	r2, [pc, #300]	; (80013ac <CommStateMachineTask+0x2a8>)
 8001280:	494b      	ldr	r1, [pc, #300]	; (80013b0 <CommStateMachineTask+0x2ac>)
 8001282:	4620      	mov	r0, r4
 8001284:	f006 f920 	bl	80074c8 <siprintf>
	  				UartSendWoRxCtrl(ATcmdSMS);
 8001288:	4620      	mov	r0, r4
 800128a:	f000 fe95 	bl	8001fb8 <UartSendWoRxCtrl>
	  				inquiryTimeVar = 2000;
 800128e:	4b39      	ldr	r3, [pc, #228]	; (8001374 <CommStateMachineTask+0x270>)
 8001290:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001294:	801a      	strh	r2, [r3, #0]
	  				TaskState = 1;
 8001296:	4b43      	ldr	r3, [pc, #268]	; (80013a4 <CommStateMachineTask+0x2a0>)
 8001298:	2201      	movs	r2, #1
 800129a:	701a      	strb	r2, [r3, #0]
	  				break;
 800129c:	e742      	b.n	8001124 <CommStateMachineTask+0x20>
	  				HAL_UART_Transmit_IT(&huart1, (uint8_t*) SMSMessage, strlen(SMSMessage));
 800129e:	4c45      	ldr	r4, [pc, #276]	; (80013b4 <CommStateMachineTask+0x2b0>)
 80012a0:	4620      	mov	r0, r4
 80012a2:	f7fe ff5f 	bl	8000164 <strlen>
 80012a6:	b282      	uxth	r2, r0
 80012a8:	4621      	mov	r1, r4
 80012aa:	4843      	ldr	r0, [pc, #268]	; (80013b8 <CommStateMachineTask+0x2b4>)
 80012ac:	f003 faa3 	bl	80047f6 <HAL_UART_Transmit_IT>
	  				*Uart1isBusyPtr = 1;
 80012b0:	4b42      	ldr	r3, [pc, #264]	; (80013bc <CommStateMachineTask+0x2b8>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	2201      	movs	r2, #1
 80012b6:	701a      	strb	r2, [r3, #0]
	  				TaskState = 2;
 80012b8:	4b3a      	ldr	r3, [pc, #232]	; (80013a4 <CommStateMachineTask+0x2a0>)
 80012ba:	2202      	movs	r2, #2
 80012bc:	701a      	strb	r2, [r3, #0]
	  				break;
 80012be:	e731      	b.n	8001124 <CommStateMachineTask+0x20>
	  				HAL_UART_Transmit_IT(&huart1, (uint8_t*) &ctrlZ, 1);
 80012c0:	2201      	movs	r2, #1
 80012c2:	493f      	ldr	r1, [pc, #252]	; (80013c0 <CommStateMachineTask+0x2bc>)
 80012c4:	483c      	ldr	r0, [pc, #240]	; (80013b8 <CommStateMachineTask+0x2b4>)
 80012c6:	f003 fa96 	bl	80047f6 <HAL_UART_Transmit_IT>
	  				*Uart1isBusyPtr = 1;
 80012ca:	4b3c      	ldr	r3, [pc, #240]	; (80013bc <CommStateMachineTask+0x2b8>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	2201      	movs	r2, #1
 80012d0:	701a      	strb	r2, [r3, #0]
	  				TaskState = 3;
 80012d2:	4b34      	ldr	r3, [pc, #208]	; (80013a4 <CommStateMachineTask+0x2a0>)
 80012d4:	2203      	movs	r2, #3
 80012d6:	701a      	strb	r2, [r3, #0]
	  				break;
 80012d8:	e724      	b.n	8001124 <CommStateMachineTask+0x20>
	  				inquiryTimeVar = INQUIRY_TIME;
 80012da:	4b26      	ldr	r3, [pc, #152]	; (8001374 <CommStateMachineTask+0x270>)
 80012dc:	22fa      	movs	r2, #250	; 0xfa
 80012de:	801a      	strh	r2, [r3, #0]
	  				TaskState = 0;
 80012e0:	4b30      	ldr	r3, [pc, #192]	; (80013a4 <CommStateMachineTask+0x2a0>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	701a      	strb	r2, [r3, #0]
	  				SMSUartTxState = Control;
 80012e6:	4b24      	ldr	r3, [pc, #144]	; (8001378 <CommStateMachineTask+0x274>)
 80012e8:	2203      	movs	r2, #3
 80012ea:	701a      	strb	r2, [r3, #0]
	  				break;
 80012ec:	e71a      	b.n	8001124 <CommStateMachineTask+0x20>
	  			switch(TaskState)
 80012ee:	4b35      	ldr	r3, [pc, #212]	; (80013c4 <CommStateMachineTask+0x2c0>)
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	2b05      	cmp	r3, #5
 80012f4:	f63f af16 	bhi.w	8001124 <CommStateMachineTask+0x20>
 80012f8:	e8df f003 	tbb	[pc, r3]
 80012fc:	18110a03 	.word	0x18110a03
 8001300:	261f      	.short	0x261f
	  				UartSend("ATE0\r\n");
 8001302:	4831      	ldr	r0, [pc, #196]	; (80013c8 <CommStateMachineTask+0x2c4>)
 8001304:	f000 fe40 	bl	8001f88 <UartSend>
	  				TaskState = 1;
 8001308:	4b2e      	ldr	r3, [pc, #184]	; (80013c4 <CommStateMachineTask+0x2c0>)
 800130a:	2201      	movs	r2, #1
 800130c:	701a      	strb	r2, [r3, #0]
	  				break;
 800130e:	e709      	b.n	8001124 <CommStateMachineTask+0x20>
	  				UartSend("AT+CMGF=1\r\n");
 8001310:	482e      	ldr	r0, [pc, #184]	; (80013cc <CommStateMachineTask+0x2c8>)
 8001312:	f000 fe39 	bl	8001f88 <UartSend>
	  				TaskState = 2;
 8001316:	4b2b      	ldr	r3, [pc, #172]	; (80013c4 <CommStateMachineTask+0x2c0>)
 8001318:	2202      	movs	r2, #2
 800131a:	701a      	strb	r2, [r3, #0]
	  				break;
 800131c:	e702      	b.n	8001124 <CommStateMachineTask+0x20>
	  				UartSend("AT+CLTS=1\r\n");
 800131e:	482c      	ldr	r0, [pc, #176]	; (80013d0 <CommStateMachineTask+0x2cc>)
 8001320:	f000 fe32 	bl	8001f88 <UartSend>
	  				TaskState = 3;
 8001324:	4b27      	ldr	r3, [pc, #156]	; (80013c4 <CommStateMachineTask+0x2c0>)
 8001326:	2203      	movs	r2, #3
 8001328:	701a      	strb	r2, [r3, #0]
	  				break;
 800132a:	e6fb      	b.n	8001124 <CommStateMachineTask+0x20>
	  				UartSend("AT+CNMI=2,2,0,0,0\r\n");
 800132c:	4829      	ldr	r0, [pc, #164]	; (80013d4 <CommStateMachineTask+0x2d0>)
 800132e:	f000 fe2b 	bl	8001f88 <UartSend>
	  				TaskState = 4;
 8001332:	4b24      	ldr	r3, [pc, #144]	; (80013c4 <CommStateMachineTask+0x2c0>)
 8001334:	2204      	movs	r2, #4
 8001336:	701a      	strb	r2, [r3, #0]
	  				break;
 8001338:	e6f4      	b.n	8001124 <CommStateMachineTask+0x20>
	  				UartSend("AT+CIURC=0\r\n");
 800133a:	4827      	ldr	r0, [pc, #156]	; (80013d8 <CommStateMachineTask+0x2d4>)
 800133c:	f000 fe24 	bl	8001f88 <UartSend>
	  				TaskState = 5;
 8001340:	4b20      	ldr	r3, [pc, #128]	; (80013c4 <CommStateMachineTask+0x2c0>)
 8001342:	2205      	movs	r2, #5
 8001344:	701a      	strb	r2, [r3, #0]
	  				break;
 8001346:	e6ed      	b.n	8001124 <CommStateMachineTask+0x20>
	  				UartSend("AT&W\r\n");
 8001348:	4824      	ldr	r0, [pc, #144]	; (80013dc <CommStateMachineTask+0x2d8>)
 800134a:	f000 fe1d 	bl	8001f88 <UartSend>
	  				TaskState = 0;
 800134e:	4b1d      	ldr	r3, [pc, #116]	; (80013c4 <CommStateMachineTask+0x2c0>)
 8001350:	2200      	movs	r2, #0
 8001352:	701a      	strb	r2, [r3, #0]
	  				SMSUartTxState = Start;
 8001354:	4b08      	ldr	r3, [pc, #32]	; (8001378 <CommStateMachineTask+0x274>)
 8001356:	2201      	movs	r2, #1
 8001358:	701a      	strb	r2, [r3, #0]
	  				break;
 800135a:	e6e3      	b.n	8001124 <CommStateMachineTask+0x20>
	  				UartSend("AT+SAPBR=3,1,\"Contype\",\"GPRS\"\r\n");
 800135c:	4820      	ldr	r0, [pc, #128]	; (80013e0 <CommStateMachineTask+0x2dc>)
 800135e:	f000 fe13 	bl	8001f88 <UartSend>
	  				TaskState = 1;
 8001362:	4b0d      	ldr	r3, [pc, #52]	; (8001398 <CommStateMachineTask+0x294>)
 8001364:	2201      	movs	r2, #1
 8001366:	701a      	strb	r2, [r3, #0]
	  				break;
 8001368:	e6dc      	b.n	8001124 <CommStateMachineTask+0x20>
 800136a:	bf00      	nop
 800136c:	200016cd 	.word	0x200016cd
 8001370:	20001120 	.word	0x20001120
 8001374:	20000008 	.word	0x20000008
 8001378:	200014c0 	.word	0x200014c0
 800137c:	200014c5 	.word	0x200014c5
 8001380:	40010c00 	.word	0x40010c00
 8001384:	200014c6 	.word	0x200014c6
 8001388:	0800b164 	.word	0x0800b164
 800138c:	0800b170 	.word	0x0800b170
 8001390:	0800b17c 	.word	0x0800b17c
 8001394:	0800b198 	.word	0x0800b198
 8001398:	200014c1 	.word	0x200014c1
 800139c:	200014c4 	.word	0x200014c4
 80013a0:	20000f00 	.word	0x20000f00
 80013a4:	200014c3 	.word	0x200014c3
 80013a8:	20000414 	.word	0x20000414
 80013ac:	20000fc4 	.word	0x20000fc4
 80013b0:	0800b1a4 	.word	0x0800b1a4
 80013b4:	20001434 	.word	0x20001434
 80013b8:	2000177c 	.word	0x2000177c
 80013bc:	20000004 	.word	0x20000004
 80013c0:	0800b334 	.word	0x0800b334
 80013c4:	200014c2 	.word	0x200014c2
 80013c8:	0800b1b4 	.word	0x0800b1b4
 80013cc:	0800b1bc 	.word	0x0800b1bc
 80013d0:	0800b1c8 	.word	0x0800b1c8
 80013d4:	0800b1d4 	.word	0x0800b1d4
 80013d8:	0800b1e8 	.word	0x0800b1e8
 80013dc:	0800b1f8 	.word	0x0800b1f8
 80013e0:	0800b200 	.word	0x0800b200
	  				sprintf(ATcmdFtp, "AT+SAPBR=3,1,\"APN\",\"%s\"\r\n", GSM.ConfigFlash.apn);
 80013e4:	4c6f      	ldr	r4, [pc, #444]	; (80015a4 <CommStateMachineTask+0x4a0>)
 80013e6:	4a70      	ldr	r2, [pc, #448]	; (80015a8 <CommStateMachineTask+0x4a4>)
 80013e8:	4970      	ldr	r1, [pc, #448]	; (80015ac <CommStateMachineTask+0x4a8>)
 80013ea:	4620      	mov	r0, r4
 80013ec:	f006 f86c 	bl	80074c8 <siprintf>
					UartSend(ATcmdFtp);
 80013f0:	4620      	mov	r0, r4
 80013f2:	f000 fdc9 	bl	8001f88 <UartSend>
	  				TaskState = 2;
 80013f6:	4b6e      	ldr	r3, [pc, #440]	; (80015b0 <CommStateMachineTask+0x4ac>)
 80013f8:	2202      	movs	r2, #2
 80013fa:	701a      	strb	r2, [r3, #0]
	  				break;
 80013fc:	e692      	b.n	8001124 <CommStateMachineTask+0x20>
	  				UartSend("AT+SAPBR=1,1\r\n");
 80013fe:	486d      	ldr	r0, [pc, #436]	; (80015b4 <CommStateMachineTask+0x4b0>)
 8001400:	f000 fdc2 	bl	8001f88 <UartSend>
	  				inquiryTimeVar = 5000;
 8001404:	4b6c      	ldr	r3, [pc, #432]	; (80015b8 <CommStateMachineTask+0x4b4>)
 8001406:	f241 3288 	movw	r2, #5000	; 0x1388
 800140a:	801a      	strh	r2, [r3, #0]
	  				TaskState = 3;
 800140c:	4b68      	ldr	r3, [pc, #416]	; (80015b0 <CommStateMachineTask+0x4ac>)
 800140e:	2203      	movs	r2, #3
 8001410:	701a      	strb	r2, [r3, #0]
	  				break;
 8001412:	e687      	b.n	8001124 <CommStateMachineTask+0x20>
	  				if(GSM.ReceivedState == 1)
 8001414:	4b69      	ldr	r3, [pc, #420]	; (80015bc <CommStateMachineTask+0x4b8>)
 8001416:	7a1b      	ldrb	r3, [r3, #8]
 8001418:	2b01      	cmp	r3, #1
 800141a:	d103      	bne.n	8001424 <CommStateMachineTask+0x320>
	  					TaskState = 4;
 800141c:	4b64      	ldr	r3, [pc, #400]	; (80015b0 <CommStateMachineTask+0x4ac>)
 800141e:	2204      	movs	r2, #4
 8001420:	701a      	strb	r2, [r3, #0]
 8001422:	e67f      	b.n	8001124 <CommStateMachineTask+0x20>
	  					TaskState = 0;
 8001424:	4b62      	ldr	r3, [pc, #392]	; (80015b0 <CommStateMachineTask+0x4ac>)
 8001426:	2200      	movs	r2, #0
 8001428:	701a      	strb	r2, [r3, #0]
	  					UartSend("AT+SAPBR=0,1\r\n");
 800142a:	4865      	ldr	r0, [pc, #404]	; (80015c0 <CommStateMachineTask+0x4bc>)
 800142c:	f000 fdac 	bl	8001f88 <UartSend>
 8001430:	e678      	b.n	8001124 <CommStateMachineTask+0x20>
	  				UartSend("AT+SAPBR=2,1\r\n");
 8001432:	4864      	ldr	r0, [pc, #400]	; (80015c4 <CommStateMachineTask+0x4c0>)
 8001434:	f000 fda8 	bl	8001f88 <UartSend>
	  				inquiryTimeVar = INQUIRY_TIME;
 8001438:	4b5f      	ldr	r3, [pc, #380]	; (80015b8 <CommStateMachineTask+0x4b4>)
 800143a:	22fa      	movs	r2, #250	; 0xfa
 800143c:	801a      	strh	r2, [r3, #0]
	  				TaskState = 5;
 800143e:	4b5c      	ldr	r3, [pc, #368]	; (80015b0 <CommStateMachineTask+0x4ac>)
 8001440:	2205      	movs	r2, #5
 8001442:	701a      	strb	r2, [r3, #0]
	  				break;
 8001444:	e66e      	b.n	8001124 <CommStateMachineTask+0x20>
	  				UartSend("AT+FTPCID=1\r\n");
 8001446:	4860      	ldr	r0, [pc, #384]	; (80015c8 <CommStateMachineTask+0x4c4>)
 8001448:	f000 fd9e 	bl	8001f88 <UartSend>
	  				TaskState = 6;
 800144c:	4b58      	ldr	r3, [pc, #352]	; (80015b0 <CommStateMachineTask+0x4ac>)
 800144e:	2206      	movs	r2, #6
 8001450:	701a      	strb	r2, [r3, #0]
	  				break;
 8001452:	e667      	b.n	8001124 <CommStateMachineTask+0x20>
	  				sprintf(ATcmdFtp, "AT+FTPSERV=\"%s\"\r\n", GSM.ConfigFlash.server);
 8001454:	4c53      	ldr	r4, [pc, #332]	; (80015a4 <CommStateMachineTask+0x4a0>)
 8001456:	4a5d      	ldr	r2, [pc, #372]	; (80015cc <CommStateMachineTask+0x4c8>)
 8001458:	495d      	ldr	r1, [pc, #372]	; (80015d0 <CommStateMachineTask+0x4cc>)
 800145a:	4620      	mov	r0, r4
 800145c:	f006 f834 	bl	80074c8 <siprintf>
	  				UartSend(ATcmdFtp);
 8001460:	4620      	mov	r0, r4
 8001462:	f000 fd91 	bl	8001f88 <UartSend>
	  				TaskState = 7;
 8001466:	4b52      	ldr	r3, [pc, #328]	; (80015b0 <CommStateMachineTask+0x4ac>)
 8001468:	2207      	movs	r2, #7
 800146a:	701a      	strb	r2, [r3, #0]
	  				break;
 800146c:	e65a      	b.n	8001124 <CommStateMachineTask+0x20>
	  				sprintf(ATcmdFtp, "AT+FTPUN=\"%s\"\r\n", GSM.ConfigFlash.login);
 800146e:	4c4d      	ldr	r4, [pc, #308]	; (80015a4 <CommStateMachineTask+0x4a0>)
 8001470:	4a58      	ldr	r2, [pc, #352]	; (80015d4 <CommStateMachineTask+0x4d0>)
 8001472:	4959      	ldr	r1, [pc, #356]	; (80015d8 <CommStateMachineTask+0x4d4>)
 8001474:	4620      	mov	r0, r4
 8001476:	f006 f827 	bl	80074c8 <siprintf>
	  				UartSend(ATcmdFtp);
 800147a:	4620      	mov	r0, r4
 800147c:	f000 fd84 	bl	8001f88 <UartSend>
	  				TaskState = 8;
 8001480:	4b4b      	ldr	r3, [pc, #300]	; (80015b0 <CommStateMachineTask+0x4ac>)
 8001482:	2208      	movs	r2, #8
 8001484:	701a      	strb	r2, [r3, #0]
	  				break;
 8001486:	e64d      	b.n	8001124 <CommStateMachineTask+0x20>
	  				sprintf(ATcmdFtp, "AT+FTPPW=\"%s\"\r\n", GSM.ConfigFlash.password);
 8001488:	4c46      	ldr	r4, [pc, #280]	; (80015a4 <CommStateMachineTask+0x4a0>)
 800148a:	4a54      	ldr	r2, [pc, #336]	; (80015dc <CommStateMachineTask+0x4d8>)
 800148c:	4954      	ldr	r1, [pc, #336]	; (80015e0 <CommStateMachineTask+0x4dc>)
 800148e:	4620      	mov	r0, r4
 8001490:	f006 f81a 	bl	80074c8 <siprintf>
	  				UartSend(ATcmdFtp);
 8001494:	4620      	mov	r0, r4
 8001496:	f000 fd77 	bl	8001f88 <UartSend>
	  				TaskState = 9;
 800149a:	4b45      	ldr	r3, [pc, #276]	; (80015b0 <CommStateMachineTask+0x4ac>)
 800149c:	2209      	movs	r2, #9
 800149e:	701a      	strb	r2, [r3, #0]
	  				break;
 80014a0:	e640      	b.n	8001124 <CommStateMachineTask+0x20>
	  				sprintf(ATcmdFtp, "AT+FTPPUTNAME=\"Termo%s%.2u%.2u%.2u%.2u%.2u%.2u.txt\"\r\n",GSM.ConfigFlash.deviceNumber, year, month, day, hour, minute, second);
 80014a2:	4c40      	ldr	r4, [pc, #256]	; (80015a4 <CommStateMachineTask+0x4a0>)
 80014a4:	4b4f      	ldr	r3, [pc, #316]	; (80015e4 <CommStateMachineTask+0x4e0>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	9304      	str	r3, [sp, #16]
 80014aa:	4b4f      	ldr	r3, [pc, #316]	; (80015e8 <CommStateMachineTask+0x4e4>)
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	9303      	str	r3, [sp, #12]
 80014b0:	4b4e      	ldr	r3, [pc, #312]	; (80015ec <CommStateMachineTask+0x4e8>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	9302      	str	r3, [sp, #8]
 80014b6:	4b4e      	ldr	r3, [pc, #312]	; (80015f0 <CommStateMachineTask+0x4ec>)
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	9301      	str	r3, [sp, #4]
 80014bc:	4b4d      	ldr	r3, [pc, #308]	; (80015f4 <CommStateMachineTask+0x4f0>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	9300      	str	r3, [sp, #0]
 80014c2:	4b4d      	ldr	r3, [pc, #308]	; (80015f8 <CommStateMachineTask+0x4f4>)
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	4a4d      	ldr	r2, [pc, #308]	; (80015fc <CommStateMachineTask+0x4f8>)
 80014c8:	494d      	ldr	r1, [pc, #308]	; (8001600 <CommStateMachineTask+0x4fc>)
 80014ca:	4620      	mov	r0, r4
 80014cc:	f005 fffc 	bl	80074c8 <siprintf>
	  				UartSend(ATcmdFtp);
 80014d0:	4620      	mov	r0, r4
 80014d2:	f000 fd59 	bl	8001f88 <UartSend>
	  				TaskState = 10;
 80014d6:	4b36      	ldr	r3, [pc, #216]	; (80015b0 <CommStateMachineTask+0x4ac>)
 80014d8:	220a      	movs	r2, #10
 80014da:	701a      	strb	r2, [r3, #0]
	  				break;
 80014dc:	e622      	b.n	8001124 <CommStateMachineTask+0x20>
	  				sprintf(ATcmdFtp, "AT+FTPPUTPATH=\"%s\"\r\n", GSM.ConfigFlash.path);
 80014de:	4c31      	ldr	r4, [pc, #196]	; (80015a4 <CommStateMachineTask+0x4a0>)
 80014e0:	4a48      	ldr	r2, [pc, #288]	; (8001604 <CommStateMachineTask+0x500>)
 80014e2:	4949      	ldr	r1, [pc, #292]	; (8001608 <CommStateMachineTask+0x504>)
 80014e4:	4620      	mov	r0, r4
 80014e6:	f005 ffef 	bl	80074c8 <siprintf>
	  				UartSend(ATcmdFtp);
 80014ea:	4620      	mov	r0, r4
 80014ec:	f000 fd4c 	bl	8001f88 <UartSend>
	  				TaskState = 11;
 80014f0:	4b2f      	ldr	r3, [pc, #188]	; (80015b0 <CommStateMachineTask+0x4ac>)
 80014f2:	220b      	movs	r2, #11
 80014f4:	701a      	strb	r2, [r3, #0]
	  				break;
 80014f6:	e615      	b.n	8001124 <CommStateMachineTask+0x20>
	  				UartSend("AT+FTPPUT=1\r\n");
 80014f8:	4844      	ldr	r0, [pc, #272]	; (800160c <CommStateMachineTask+0x508>)
 80014fa:	f000 fd45 	bl	8001f88 <UartSend>
	  				inquiryTimeVar = 4000;
 80014fe:	4b2e      	ldr	r3, [pc, #184]	; (80015b8 <CommStateMachineTask+0x4b4>)
 8001500:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8001504:	801a      	strh	r2, [r3, #0]
	  				TaskState = 12;
 8001506:	4b2a      	ldr	r3, [pc, #168]	; (80015b0 <CommStateMachineTask+0x4ac>)
 8001508:	220c      	movs	r2, #12
 800150a:	701a      	strb	r2, [r3, #0]
	  				break;
 800150c:	e60a      	b.n	8001124 <CommStateMachineTask+0x20>
	  				if(GSM.FtpPut.status != 1)
 800150e:	4b2b      	ldr	r3, [pc, #172]	; (80015bc <CommStateMachineTask+0x4b8>)
 8001510:	7b5b      	ldrb	r3, [r3, #13]
 8001512:	2b01      	cmp	r3, #1
 8001514:	d003      	beq.n	800151e <CommStateMachineTask+0x41a>
	  					TaskState = 0;
 8001516:	4b26      	ldr	r3, [pc, #152]	; (80015b0 <CommStateMachineTask+0x4ac>)
 8001518:	2200      	movs	r2, #0
 800151a:	701a      	strb	r2, [r3, #0]
	  					break;
 800151c:	e602      	b.n	8001124 <CommStateMachineTask+0x20>
	  				if(FTPMessageBoxRecordSwitch == 2)
 800151e:	4b3c      	ldr	r3, [pc, #240]	; (8001610 <CommStateMachineTask+0x50c>)
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	2b02      	cmp	r3, #2
 8001524:	d00e      	beq.n	8001544 <CommStateMachineTask+0x440>
	  				else if(FTPMessageBoxRecordSwitch == 1)
 8001526:	2b01      	cmp	r3, #1
 8001528:	d011      	beq.n	800154e <CommStateMachineTask+0x44a>
	  				sprintf(ATcmdFtp,"AT+FTPPUT=2,%u\r\n", MsgLen);
 800152a:	4d1e      	ldr	r5, [pc, #120]	; (80015a4 <CommStateMachineTask+0x4a0>)
 800152c:	4622      	mov	r2, r4
 800152e:	4939      	ldr	r1, [pc, #228]	; (8001614 <CommStateMachineTask+0x510>)
 8001530:	4628      	mov	r0, r5
 8001532:	f005 ffc9 	bl	80074c8 <siprintf>
	  				UartSendWoRxCtrl(ATcmdFtp);
 8001536:	4628      	mov	r0, r5
 8001538:	f000 fd3e 	bl	8001fb8 <UartSendWoRxCtrl>
					TaskState = 13;
 800153c:	4b1c      	ldr	r3, [pc, #112]	; (80015b0 <CommStateMachineTask+0x4ac>)
 800153e:	220d      	movs	r2, #13
 8001540:	701a      	strb	r2, [r3, #0]
					break;
 8001542:	e5ef      	b.n	8001124 <CommStateMachineTask+0x20>
	  					MsgLen = strlen(FTPMessageBox1);
 8001544:	4834      	ldr	r0, [pc, #208]	; (8001618 <CommStateMachineTask+0x514>)
 8001546:	f7fe fe0d 	bl	8000164 <strlen>
 800154a:	b284      	uxth	r4, r0
 800154c:	e7ed      	b.n	800152a <CommStateMachineTask+0x426>
	  					MsgLen = strlen(FTPMessageBox2);
 800154e:	4833      	ldr	r0, [pc, #204]	; (800161c <CommStateMachineTask+0x518>)
 8001550:	f7fe fe08 	bl	8000164 <strlen>
 8001554:	b284      	uxth	r4, r0
 8001556:	e7e8      	b.n	800152a <CommStateMachineTask+0x426>
	  				if(FTPMessageBoxRecordSwitch == 2)
 8001558:	4b2d      	ldr	r3, [pc, #180]	; (8001610 <CommStateMachineTask+0x50c>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	2b02      	cmp	r3, #2
 800155e:	d005      	beq.n	800156c <CommStateMachineTask+0x468>
	  				else if(FTPMessageBoxRecordSwitch == 1)
 8001560:	2b01      	cmp	r3, #1
 8001562:	d007      	beq.n	8001574 <CommStateMachineTask+0x470>
	  				TaskState = 14;
 8001564:	4b12      	ldr	r3, [pc, #72]	; (80015b0 <CommStateMachineTask+0x4ac>)
 8001566:	220e      	movs	r2, #14
 8001568:	701a      	strb	r2, [r3, #0]
	  				break;
 800156a:	e5db      	b.n	8001124 <CommStateMachineTask+0x20>
	  					UartSendWoRxCtrl(FTPMessageBox1);
 800156c:	482a      	ldr	r0, [pc, #168]	; (8001618 <CommStateMachineTask+0x514>)
 800156e:	f000 fd23 	bl	8001fb8 <UartSendWoRxCtrl>
 8001572:	e7f7      	b.n	8001564 <CommStateMachineTask+0x460>
	  					UartSendWoRxCtrl(FTPMessageBox2);
 8001574:	4829      	ldr	r0, [pc, #164]	; (800161c <CommStateMachineTask+0x518>)
 8001576:	f000 fd1f 	bl	8001fb8 <UartSendWoRxCtrl>
 800157a:	e7f3      	b.n	8001564 <CommStateMachineTask+0x460>
	  				UartSend("AT+FTPPUT=2,0\r\n");
 800157c:	4828      	ldr	r0, [pc, #160]	; (8001620 <CommStateMachineTask+0x51c>)
 800157e:	f000 fd03 	bl	8001f88 <UartSend>
	  				TaskState = 15;
 8001582:	4b0b      	ldr	r3, [pc, #44]	; (80015b0 <CommStateMachineTask+0x4ac>)
 8001584:	220f      	movs	r2, #15
 8001586:	701a      	strb	r2, [r3, #0]
	  				break;
 8001588:	e5cc      	b.n	8001124 <CommStateMachineTask+0x20>
	  				UartSend("AT+SAPBR=0,1\r\n");
 800158a:	480d      	ldr	r0, [pc, #52]	; (80015c0 <CommStateMachineTask+0x4bc>)
 800158c:	f000 fcfc 	bl	8001f88 <UartSend>
	  				TaskState = 0;
 8001590:	4b07      	ldr	r3, [pc, #28]	; (80015b0 <CommStateMachineTask+0x4ac>)
 8001592:	2200      	movs	r2, #0
 8001594:	701a      	strb	r2, [r3, #0]
	  				SMSUartTxState = Control;
 8001596:	4b23      	ldr	r3, [pc, #140]	; (8001624 <CommStateMachineTask+0x520>)
 8001598:	2203      	movs	r2, #3
 800159a:	701a      	strb	r2, [r3, #0]
	  				inquiryTimeVar = INQUIRY_TIME;
 800159c:	4b06      	ldr	r3, [pc, #24]	; (80015b8 <CommStateMachineTask+0x4b4>)
 800159e:	22fa      	movs	r2, #250	; 0xfa
 80015a0:	801a      	strh	r2, [r3, #0]
}
 80015a2:	e5bf      	b.n	8001124 <CommStateMachineTask+0x20>
 80015a4:	20000394 	.word	0x20000394
 80015a8:	20000fd9 	.word	0x20000fd9
 80015ac:	0800b220 	.word	0x0800b220
 80015b0:	200014c1 	.word	0x200014c1
 80015b4:	0800b23c 	.word	0x0800b23c
 80015b8:	20000008 	.word	0x20000008
 80015bc:	20000f00 	.word	0x20000f00
 80015c0:	0800b24c 	.word	0x0800b24c
 80015c4:	0800b25c 	.word	0x0800b25c
 80015c8:	0800b26c 	.word	0x0800b26c
 80015cc:	20000f50 	.word	0x20000f50
 80015d0:	0800b27c 	.word	0x0800b27c
 80015d4:	20000f14 	.word	0x20000f14
 80015d8:	0800b290 	.word	0x0800b290
 80015dc:	20000f32 	.word	0x20000f32
 80015e0:	0800b2a0 	.word	0x0800b2a0
 80015e4:	200016db 	.word	0x200016db
 80015e8:	200016d9 	.word	0x200016d9
 80015ec:	200016d8 	.word	0x200016d8
 80015f0:	200016ce 	.word	0x200016ce
 80015f4:	200016da 	.word	0x200016da
 80015f8:	200016e5 	.word	0x200016e5
 80015fc:	20000fd4 	.word	0x20000fd4
 8001600:	0800b2b0 	.word	0x0800b2b0
 8001604:	20000f82 	.word	0x20000f82
 8001608:	0800b2e8 	.word	0x0800b2e8
 800160c:	0800b300 	.word	0x0800b300
 8001610:	20000000 	.word	0x20000000
 8001614:	0800b310 	.word	0x0800b310
 8001618:	20000494 	.word	0x20000494
 800161c:	200009c8 	.word	0x200009c8
 8001620:	0800b324 	.word	0x0800b324
 8001624:	200014c0 	.word	0x200014c0

08001628 <main>:
{
 8001628:	b580      	push	{r7, lr}
  HAL_Init();
 800162a:	f000 fd4b 	bl	80020c4 <HAL_Init>
  SystemClock_Config();
 800162e:	f7ff fc77 	bl	8000f20 <SystemClock_Config>
  MX_GPIO_Init();
 8001632:	f7ff fc09 	bl	8000e48 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001636:	f000 fc13 	bl	8001e60 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 800163a:	f000 fba9 	bl	8001d90 <MX_TIM4_Init>
  MX_TIM3_Init();
 800163e:	f000 fb6f 	bl	8001d20 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8001642:	f000 fc27 	bl	8001e94 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 8001646:	f005 f89f 	bl	8006788 <MX_USB_DEVICE_Init>
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800164a:	2200      	movs	r2, #0
 800164c:	4611      	mov	r1, r2
 800164e:	2025      	movs	r0, #37	; 0x25
 8001650:	f000 fd6e 	bl	8002130 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001654:	2025      	movs	r0, #37	; 0x25
 8001656:	f000 fda1 	bl	800219c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800165a:	2200      	movs	r2, #0
 800165c:	4611      	mov	r1, r2
 800165e:	2014      	movs	r0, #20
 8001660:	f000 fd66 	bl	8002130 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8001664:	2014      	movs	r0, #20
 8001666:	f000 fd99 	bl	800219c <HAL_NVIC_EnableIRQ>
  HAL_UART_Receive_IT(&huart1, &ReceiveTmp, 1);
 800166a:	2201      	movs	r2, #1
 800166c:	4943      	ldr	r1, [pc, #268]	; (800177c <main+0x154>)
 800166e:	4844      	ldr	r0, [pc, #272]	; (8001780 <main+0x158>)
 8001670:	f003 faaf 	bl	8004bd2 <HAL_UART_Receive_IT>
  if (ds18b20_read_address(ds_address) != HAL_OK)
 8001674:	4843      	ldr	r0, [pc, #268]	; (8001784 <main+0x15c>)
 8001676:	f7ff fbb1 	bl	8000ddc <ds18b20_read_address>
 800167a:	b108      	cbz	r0, 8001680 <main+0x58>
 800167c:	b672      	cpsid	i
  while (1)
 800167e:	e7fe      	b.n	800167e <main+0x56>
  SMSUartTxState = Reset;
 8001680:	4b41      	ldr	r3, [pc, #260]	; (8001788 <main+0x160>)
 8001682:	2200      	movs	r2, #0
 8001684:	701a      	strb	r2, [r3, #0]
  LastTickForSim800 = HAL_GetTick();
 8001686:	f000 fd3b 	bl	8002100 <HAL_GetTick>
 800168a:	4b40      	ldr	r3, [pc, #256]	; (800178c <main+0x164>)
 800168c:	6018      	str	r0, [r3, #0]
  LastTickTempMeasure = HAL_GetTick();
 800168e:	f000 fd37 	bl	8002100 <HAL_GetTick>
 8001692:	4b3f      	ldr	r3, [pc, #252]	; (8001790 <main+0x168>)
 8001694:	6018      	str	r0, [r3, #0]
  memcpy(GSM.FlashBuff, 0x0801FC00, 128*4);
 8001696:	f44f 7200 	mov.w	r2, #512	; 0x200
 800169a:	493e      	ldr	r1, [pc, #248]	; (8001794 <main+0x16c>)
 800169c:	483e      	ldr	r0, [pc, #248]	; (8001798 <main+0x170>)
 800169e:	f005 fa9d 	bl	8006bdc <memcpy>
  HAL_TIM_Base_Start_IT(&htim3);
 80016a2:	483e      	ldr	r0, [pc, #248]	; (800179c <main+0x174>)
 80016a4:	f002 fc6c 	bl	8003f80 <HAL_TIM_Base_Start_IT>
		  if(!tempMeasureFlag)
 80016a8:	4f3d      	ldr	r7, [pc, #244]	; (80017a0 <main+0x178>)
	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GSM.ReceivedState);
 80016aa:	4e3e      	ldr	r6, [pc, #248]	; (80017a4 <main+0x17c>)
			  temperature = ds18b20_get_temp_wo_fp(NULL);
 80016ac:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 80017a8 <main+0x180>
 80016b0:	e060      	b.n	8001774 <main+0x14c>
 80016b2:	2000      	movs	r0, #0
 80016b4:	f7ff fbb2 	bl	8000e1c <ds18b20_get_temp_wo_fp>
 80016b8:	f8c8 0000 	str.w	r0, [r8]
			  tempMeasureFlag = 0;
 80016bc:	2300      	movs	r3, #0
 80016be:	703b      	strb	r3, [r7, #0]
 80016c0:	e02e      	b.n	8001720 <main+0xf8>
		  Parser_TakeLine(&ReceiveBuffer, ReceivedData);
 80016c2:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 80017ac <main+0x184>
 80016c6:	4649      	mov	r1, r9
 80016c8:	4839      	ldr	r0, [pc, #228]	; (80017b0 <main+0x188>)
 80016ca:	f000 f8bf 	bl	800184c <Parser_TakeLine>
		  LineCounter--;
 80016ce:	4a39      	ldr	r2, [pc, #228]	; (80017b4 <main+0x18c>)
 80016d0:	7813      	ldrb	r3, [r2, #0]
 80016d2:	3b01      	subs	r3, #1
 80016d4:	7013      	strb	r3, [r2, #0]
		  Parser_parse(ReceivedData);
 80016d6:	4648      	mov	r0, r9
 80016d8:	f000 f8d2 	bl	8001880 <Parser_parse>
 80016dc:	e024      	b.n	8001728 <main+0x100>
		  Parser_TakeLine(&USBConfBuffer, ReceivedData);
 80016de:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 80017ac <main+0x184>
 80016e2:	4649      	mov	r1, r9
 80016e4:	4834      	ldr	r0, [pc, #208]	; (80017b8 <main+0x190>)
 80016e6:	f000 f8b1 	bl	800184c <Parser_TakeLine>
		  USBLineCounter--;
 80016ea:	4a34      	ldr	r2, [pc, #208]	; (80017bc <main+0x194>)
 80016ec:	7813      	ldrb	r3, [r2, #0]
 80016ee:	3b01      	subs	r3, #1
 80016f0:	7013      	strb	r3, [r2, #0]
		  Parser_parse(ReceivedData);
 80016f2:	4648      	mov	r0, r9
 80016f4:	f000 f8c4 	bl	8001880 <Parser_parse>
 80016f8:	e01a      	b.n	8001730 <main+0x108>
	  if(SMSUartTxState != Idle && HAL_GetTick() - GSM.LastTickReceive >= 30000)
 80016fa:	4b23      	ldr	r3, [pc, #140]	; (8001788 <main+0x160>)
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	2b06      	cmp	r3, #6
 8001700:	d127      	bne.n	8001752 <main+0x12a>
	  if(HAL_GetTick() - LastTickTempMeasure >= 800)
 8001702:	f000 fcfd 	bl	8002100 <HAL_GetTick>
 8001706:	682b      	ldr	r3, [r5, #0]
 8001708:	1ac0      	subs	r0, r0, r3
 800170a:	f5b0 7f48 	cmp.w	r0, #800	; 0x320
 800170e:	d307      	bcc.n	8001720 <main+0xf8>
		  if(!tempMeasureFlag)
 8001710:	783b      	ldrb	r3, [r7, #0]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d1cd      	bne.n	80016b2 <main+0x8a>
			  ds18b20_start_measure(NULL);
 8001716:	2000      	movs	r0, #0
 8001718:	f7ff fb7b 	bl	8000e12 <ds18b20_start_measure>
			  tempMeasureFlag = 1;
 800171c:	2301      	movs	r3, #1
 800171e:	703b      	strb	r3, [r7, #0]
	  if(LineCounter)
 8001720:	4b24      	ldr	r3, [pc, #144]	; (80017b4 <main+0x18c>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d1cc      	bne.n	80016c2 <main+0x9a>
	  if(USBLineCounter)
 8001728:	4b24      	ldr	r3, [pc, #144]	; (80017bc <main+0x194>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d1d6      	bne.n	80016de <main+0xb6>
	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GSM.ReceivedState);
 8001730:	7a22      	ldrb	r2, [r4, #8]
 8001732:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001736:	4630      	mov	r0, r6
 8001738:	f001 f84c 	bl	80027d4 <HAL_GPIO_WritePin>
	  CommStateMachineTask();
 800173c:	f7ff fce2 	bl	8001104 <CommStateMachineTask>
	  if(GSM.ErrorCounter > 10)
 8001740:	f894 3214 	ldrb.w	r3, [r4, #532]	; 0x214
 8001744:	2b0a      	cmp	r3, #10
 8001746:	d9d8      	bls.n	80016fa <main+0xd2>
		  SMSUartTxState = Reset;
 8001748:	2300      	movs	r3, #0
 800174a:	4a0f      	ldr	r2, [pc, #60]	; (8001788 <main+0x160>)
 800174c:	7013      	strb	r3, [r2, #0]
		  GSM.ErrorCounter = 0;
 800174e:	f884 3214 	strb.w	r3, [r4, #532]	; 0x214
	  if(SMSUartTxState != Idle && HAL_GetTick() - GSM.LastTickReceive >= 30000)
 8001752:	f000 fcd5 	bl	8002100 <HAL_GetTick>
 8001756:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 800175a:	1ac0      	subs	r0, r0, r3
 800175c:	f247 532f 	movw	r3, #29999	; 0x752f
 8001760:	4298      	cmp	r0, r3
 8001762:	d9ce      	bls.n	8001702 <main+0xda>
		  SMSUartTxState = Reset;
 8001764:	4b08      	ldr	r3, [pc, #32]	; (8001788 <main+0x160>)
 8001766:	2200      	movs	r2, #0
 8001768:	701a      	strb	r2, [r3, #0]
		  GSM.LastTickReceive = HAL_GetTick();
 800176a:	f000 fcc9 	bl	8002100 <HAL_GetTick>
 800176e:	4b14      	ldr	r3, [pc, #80]	; (80017c0 <main+0x198>)
 8001770:	f8c3 0218 	str.w	r0, [r3, #536]	; 0x218
	  if(HAL_GetTick() - LastTickTempMeasure >= 800)
 8001774:	4d06      	ldr	r5, [pc, #24]	; (8001790 <main+0x168>)
	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GSM.ReceivedState);
 8001776:	4c12      	ldr	r4, [pc, #72]	; (80017c0 <main+0x198>)
 8001778:	e7c3      	b.n	8001702 <main+0xda>
 800177a:	bf00      	nop
 800177c:	20001330 	.word	0x20001330
 8001780:	2000177c 	.word	0x2000177c
 8001784:	200016d0 	.word	0x200016d0
 8001788:	200014c0 	.word	0x200014c0
 800178c:	20001120 	.word	0x20001120
 8001790:	20001124 	.word	0x20001124
 8001794:	0801fc00 	.word	0x0801fc00
 8001798:	20000f14 	.word	0x20000f14
 800179c:	200016ec 	.word	0x200016ec
 80017a0:	200016dc 	.word	0x200016dc
 80017a4:	40011000 	.word	0x40011000
 80017a8:	200016e0 	.word	0x200016e0
 80017ac:	20001334 	.word	0x20001334
 80017b0:	2000112c 	.word	0x2000112c
 80017b4:	20001128 	.word	0x20001128
 80017b8:	200014c8 	.word	0x200014c8
 80017bc:	200016cc 	.word	0x200016cc
 80017c0:	20000f00 	.word	0x20000f00

080017c4 <CDC_ReveiveCallback>:
	if(Length > 0)
 80017c4:	2900      	cmp	r1, #0
 80017c6:	d03a      	beq.n	800183e <CDC_ReveiveCallback+0x7a>
{
 80017c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017ca:	b083      	sub	sp, #12
 80017cc:	4604      	mov	r4, r0
 80017ce:	460d      	mov	r5, r1
			volatile uint8_t i = 0;
 80017d0:	2300      	movs	r3, #0
 80017d2:	f88d 3007 	strb.w	r3, [sp, #7]
			while(i < Length)
 80017d6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	4299      	cmp	r1, r3
 80017de:	d92c      	bls.n	800183a <CDC_ReveiveCallback+0x76>
					if (RB_OK == Ring_Buffer_Write(&USBConfBuffer, Buffer[i]))
 80017e0:	4e17      	ldr	r6, [pc, #92]	; (8001840 <CDC_ReveiveCallback+0x7c>)
							USBLineCounter++;
 80017e2:	4f18      	ldr	r7, [pc, #96]	; (8001844 <CDC_ReveiveCallback+0x80>)
 80017e4:	e018      	b.n	8001818 <CDC_ReveiveCallback+0x54>
					if (RB_OK == Ring_Buffer_Write(&USBConfBuffer, Buffer[i]))
 80017e6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	5ce1      	ldrb	r1, [r4, r3]
 80017ee:	4630      	mov	r0, r6
 80017f0:	f000 f9e7 	bl	8001bc2 <Ring_Buffer_Write>
 80017f4:	b958      	cbnz	r0, 800180e <CDC_ReveiveCallback+0x4a>
						if(Buffer[i] == ENDLINE)
 80017f6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	5ce3      	ldrb	r3, [r4, r3]
 80017fe:	2b0a      	cmp	r3, #10
 8001800:	d017      	beq.n	8001832 <CDC_ReveiveCallback+0x6e>
						i++;
 8001802:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001806:	3301      	adds	r3, #1
 8001808:	b2db      	uxtb	r3, r3
 800180a:	f88d 3007 	strb.w	r3, [sp, #7]
			while(i < Length)
 800180e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001812:	b2db      	uxtb	r3, r3
 8001814:	42ab      	cmp	r3, r5
 8001816:	d210      	bcs.n	800183a <CDC_ReveiveCallback+0x76>
				if(Buffer[i] != '\r')
 8001818:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800181c:	b2db      	uxtb	r3, r3
 800181e:	5ce3      	ldrb	r3, [r4, r3]
 8001820:	2b0d      	cmp	r3, #13
 8001822:	d1e0      	bne.n	80017e6 <CDC_ReveiveCallback+0x22>
				else i++;
 8001824:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001828:	3301      	adds	r3, #1
 800182a:	b2db      	uxtb	r3, r3
 800182c:	f88d 3007 	strb.w	r3, [sp, #7]
 8001830:	e7ed      	b.n	800180e <CDC_ReveiveCallback+0x4a>
							USBLineCounter++;
 8001832:	783b      	ldrb	r3, [r7, #0]
 8001834:	3301      	adds	r3, #1
 8001836:	703b      	strb	r3, [r7, #0]
 8001838:	e7e3      	b.n	8001802 <CDC_ReveiveCallback+0x3e>
}
 800183a:	b003      	add	sp, #12
 800183c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800183e:	4770      	bx	lr
 8001840:	200014c8 	.word	0x200014c8
 8001844:	200016cc 	.word	0x200016cc

08001848 <Error_Handler>:
 8001848:	b672      	cpsid	i
  while (1)
 800184a:	e7fe      	b.n	800184a <Error_Handler+0x2>

0800184c <Parser_TakeLine>:
#include "stdlib.h"
#include "FLASH_PAGE_F1.h"


void Parser_TakeLine(RingBuffer_t *Buff, uint8_t *Destination)
{
 800184c:	b570      	push	{r4, r5, r6, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	4606      	mov	r6, r0
 8001852:	460d      	mov	r5, r1
	  uint8_t i = 0;
	  uint8_t tmp = 0;
 8001854:	2400      	movs	r4, #0
 8001856:	f88d 4007 	strb.w	r4, [sp, #7]
 800185a:	e002      	b.n	8001862 <Parser_TakeLine+0x16>
			{
			 Destination[i] = 0;
			}
		else
			{
			Destination[i] = tmp;
 800185c:	b2e4      	uxtb	r4, r4
 800185e:	552b      	strb	r3, [r5, r4]
 8001860:	4614      	mov	r4, r2
		 Ring_Buffer_Read(Buff, &tmp);
 8001862:	f10d 0107 	add.w	r1, sp, #7
 8001866:	4630      	mov	r0, r6
 8001868:	f000 f996 	bl	8001b98 <Ring_Buffer_Read>
		 if(tmp == ENDLINE)
 800186c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001870:	1c62      	adds	r2, r4, #1
 8001872:	2b0a      	cmp	r3, #10
 8001874:	d1f2      	bne.n	800185c <Parser_TakeLine+0x10>
			 Destination[i] = 0;
 8001876:	b2e4      	uxtb	r4, r4
 8001878:	2300      	movs	r3, #0
 800187a:	552b      	strb	r3, [r5, r4]
			}

			i++;

	} while(tmp != ENDLINE);
}
 800187c:	b002      	add	sp, #8
 800187e:	bd70      	pop	{r4, r5, r6, pc}

08001880 <Parser_parse>:
	}
}


void Parser_parse(uint8_t * DataToParse)
{
 8001880:	b538      	push	{r3, r4, r5, lr}
 8001882:	4604      	mov	r4, r0

	if(strcmp("OK", (char*)DataToParse) == 0)
 8001884:	4601      	mov	r1, r0
 8001886:	489b      	ldr	r0, [pc, #620]	; (8001af4 <Parser_parse+0x274>)
 8001888:	f7fe fc62 	bl	8000150 <strcmp>
 800188c:	b918      	cbnz	r0, 8001896 <Parser_parse+0x16>
	{
		GSM.ReceivedState = 1;
 800188e:	4b9a      	ldr	r3, [pc, #616]	; (8001af8 <Parser_parse+0x278>)
 8001890:	2201      	movs	r2, #1
 8001892:	721a      	strb	r2, [r3, #8]
//	  	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
//	  	UartLog("led_off\n\r");
//	  }


}
 8001894:	bd38      	pop	{r3, r4, r5, pc}
	else if(strcmp("save", (char*)DataToParse) == 0)
 8001896:	4621      	mov	r1, r4
 8001898:	4898      	ldr	r0, [pc, #608]	; (8001afc <Parser_parse+0x27c>)
 800189a:	f7fe fc59 	bl	8000150 <strcmp>
 800189e:	b180      	cbz	r0, 80018c2 <Parser_parse+0x42>
	else if(strcmp("log", (char*)DataToParse) == 0)
 80018a0:	4621      	mov	r1, r4
 80018a2:	4897      	ldr	r0, [pc, #604]	; (8001b00 <Parser_parse+0x280>)
 80018a4:	f7fe fc54 	bl	8000150 <strcmp>
 80018a8:	b188      	cbz	r0, 80018ce <Parser_parse+0x4e>
	else if(strcmp("ERROR", (char*)DataToParse) == 0)
 80018aa:	4621      	mov	r1, r4
 80018ac:	4895      	ldr	r0, [pc, #596]	; (8001b04 <Parser_parse+0x284>)
 80018ae:	f7fe fc4f 	bl	8000150 <strcmp>
 80018b2:	b9b8      	cbnz	r0, 80018e4 <Parser_parse+0x64>
		GSM.ErrorCounter++;
 80018b4:	4a90      	ldr	r2, [pc, #576]	; (8001af8 <Parser_parse+0x278>)
 80018b6:	f892 3214 	ldrb.w	r3, [r2, #532]	; 0x214
 80018ba:	3301      	adds	r3, #1
 80018bc:	f882 3214 	strb.w	r3, [r2, #532]	; 0x214
 80018c0:	e7e8      	b.n	8001894 <Parser_parse+0x14>
		Flash_Write_Data(0x0801FC00, GSM.FlashBuff, 128);
 80018c2:	2280      	movs	r2, #128	; 0x80
 80018c4:	4990      	ldr	r1, [pc, #576]	; (8001b08 <Parser_parse+0x288>)
 80018c6:	4891      	ldr	r0, [pc, #580]	; (8001b0c <Parser_parse+0x28c>)
 80018c8:	f7ff fa10 	bl	8000cec <Flash_Write_Data>
 80018cc:	e7e2      	b.n	8001894 <Parser_parse+0x14>
		sprintf(SMSMessage, "CSQ: %.1f", GSM.SignalQuality);
 80018ce:	4b8a      	ldr	r3, [pc, #552]	; (8001af8 <Parser_parse+0x278>)
 80018d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018d4:	498e      	ldr	r1, [pc, #568]	; (8001b10 <Parser_parse+0x290>)
 80018d6:	488f      	ldr	r0, [pc, #572]	; (8001b14 <Parser_parse+0x294>)
 80018d8:	f005 fdf6 	bl	80074c8 <siprintf>
		SMSUartTxState = SMSMsgWrite;
 80018dc:	4b8e      	ldr	r3, [pc, #568]	; (8001b18 <Parser_parse+0x298>)
 80018de:	2204      	movs	r2, #4
 80018e0:	701a      	strb	r2, [r3, #0]
 80018e2:	e7d7      	b.n	8001894 <Parser_parse+0x14>
		char * ParsePointer = strtok((char*)DataToParse, " ");
 80018e4:	498d      	ldr	r1, [pc, #564]	; (8001b1c <Parser_parse+0x29c>)
 80018e6:	4620      	mov	r0, r4
 80018e8:	f006 fc3a 	bl	8008160 <strtok>
 80018ec:	4604      	mov	r4, r0
		if(strcmp("+CSQ:", ParsePointer) == 0)
 80018ee:	4601      	mov	r1, r0
 80018f0:	488b      	ldr	r0, [pc, #556]	; (8001b20 <Parser_parse+0x2a0>)
 80018f2:	f7fe fc2d 	bl	8000150 <strcmp>
 80018f6:	2800      	cmp	r0, #0
 80018f8:	d051      	beq.n	800199e <Parser_parse+0x11e>
		else if(strcmp("+CREG:", ParsePointer) == 0)
 80018fa:	4621      	mov	r1, r4
 80018fc:	4889      	ldr	r0, [pc, #548]	; (8001b24 <Parser_parse+0x2a4>)
 80018fe:	f7fe fc27 	bl	8000150 <strcmp>
 8001902:	2800      	cmp	r0, #0
 8001904:	d054      	beq.n	80019b0 <Parser_parse+0x130>
		else if(strcmp("+CCLK:", ParsePointer) == 0)
 8001906:	4621      	mov	r1, r4
 8001908:	4887      	ldr	r0, [pc, #540]	; (8001b28 <Parser_parse+0x2a8>)
 800190a:	f7fe fc21 	bl	8000150 <strcmp>
 800190e:	2800      	cmp	r0, #0
 8001910:	d05e      	beq.n	80019d0 <Parser_parse+0x150>
		else if(strcmp("+FTPPUT:", ParsePointer) == 0)
 8001912:	4621      	mov	r1, r4
 8001914:	4885      	ldr	r0, [pc, #532]	; (8001b2c <Parser_parse+0x2ac>)
 8001916:	f7fe fc1b 	bl	8000150 <strcmp>
 800191a:	2800      	cmp	r0, #0
 800191c:	f000 808b 	beq.w	8001a36 <Parser_parse+0x1b6>
		else if(strcmp("login:", ParsePointer) == 0)
 8001920:	4621      	mov	r1, r4
 8001922:	4883      	ldr	r0, [pc, #524]	; (8001b30 <Parser_parse+0x2b0>)
 8001924:	f7fe fc14 	bl	8000150 <strcmp>
 8001928:	2800      	cmp	r0, #0
 800192a:	f000 80aa 	beq.w	8001a82 <Parser_parse+0x202>
		else if(strcmp("password:", ParsePointer) == 0)
 800192e:	4621      	mov	r1, r4
 8001930:	4880      	ldr	r0, [pc, #512]	; (8001b34 <Parser_parse+0x2b4>)
 8001932:	f7fe fc0d 	bl	8000150 <strcmp>
 8001936:	2800      	cmp	r0, #0
 8001938:	f000 80ab 	beq.w	8001a92 <Parser_parse+0x212>
		else if(strcmp("server:", ParsePointer) == 0)
 800193c:	4621      	mov	r1, r4
 800193e:	487e      	ldr	r0, [pc, #504]	; (8001b38 <Parser_parse+0x2b8>)
 8001940:	f7fe fc06 	bl	8000150 <strcmp>
 8001944:	2800      	cmp	r0, #0
 8001946:	f000 80ac 	beq.w	8001aa2 <Parser_parse+0x222>
		else if(strcmp("path:", ParsePointer) == 0)
 800194a:	4621      	mov	r1, r4
 800194c:	487b      	ldr	r0, [pc, #492]	; (8001b3c <Parser_parse+0x2bc>)
 800194e:	f7fe fbff 	bl	8000150 <strcmp>
 8001952:	2800      	cmp	r0, #0
 8001954:	f000 80ad 	beq.w	8001ab2 <Parser_parse+0x232>
		else if(strcmp("device:", ParsePointer) == 0)
 8001958:	4621      	mov	r1, r4
 800195a:	4879      	ldr	r0, [pc, #484]	; (8001b40 <Parser_parse+0x2c0>)
 800195c:	f7fe fbf8 	bl	8000150 <strcmp>
 8001960:	2800      	cmp	r0, #0
 8001962:	f000 80ae 	beq.w	8001ac2 <Parser_parse+0x242>
		else if(strcmp("number1:", ParsePointer) == 0)
 8001966:	4621      	mov	r1, r4
 8001968:	4876      	ldr	r0, [pc, #472]	; (8001b44 <Parser_parse+0x2c4>)
 800196a:	f7fe fbf1 	bl	8000150 <strcmp>
 800196e:	2800      	cmp	r0, #0
 8001970:	f000 80af 	beq.w	8001ad2 <Parser_parse+0x252>
		else if(strcmp("number2:", ParsePointer) == 0)
 8001974:	4621      	mov	r1, r4
 8001976:	4874      	ldr	r0, [pc, #464]	; (8001b48 <Parser_parse+0x2c8>)
 8001978:	f7fe fbea 	bl	8000150 <strcmp>
 800197c:	2800      	cmp	r0, #0
 800197e:	f000 80b0 	beq.w	8001ae2 <Parser_parse+0x262>
		else if(strcmp("apn:", ParsePointer) == 0)
 8001982:	4621      	mov	r1, r4
 8001984:	4871      	ldr	r0, [pc, #452]	; (8001b4c <Parser_parse+0x2cc>)
 8001986:	f7fe fbe3 	bl	8000150 <strcmp>
 800198a:	2800      	cmp	r0, #0
 800198c:	d182      	bne.n	8001894 <Parser_parse+0x14>
			ParsePointer = strtok(NULL, "\r");
 800198e:	4970      	ldr	r1, [pc, #448]	; (8001b50 <Parser_parse+0x2d0>)
 8001990:	f006 fbe6 	bl	8008160 <strtok>
 8001994:	4601      	mov	r1, r0
			strcpy(GSM.ConfigFlash.apn, ParsePointer);
 8001996:	486f      	ldr	r0, [pc, #444]	; (8001b54 <Parser_parse+0x2d4>)
 8001998:	f005 fdc5 	bl	8007526 <strcpy>
}
 800199c:	e77a      	b.n	8001894 <Parser_parse+0x14>
	char * ParsePointer = strtok(NULL, ",");
 800199e:	496e      	ldr	r1, [pc, #440]	; (8001b58 <Parser_parse+0x2d8>)
 80019a0:	f006 fbde 	bl	8008160 <strtok>
	GSM.SignalQuality = atof(ParsePointer);
 80019a4:	f005 f8e8 	bl	8006b78 <atof>
 80019a8:	4b53      	ldr	r3, [pc, #332]	; (8001af8 <Parser_parse+0x278>)
 80019aa:	e9c3 0100 	strd	r0, r1, [r3]
}
 80019ae:	e771      	b.n	8001894 <Parser_parse+0x14>
	char * ParsePointer = strtok(NULL, ",");
 80019b0:	4d69      	ldr	r5, [pc, #420]	; (8001b58 <Parser_parse+0x2d8>)
 80019b2:	4629      	mov	r1, r5
 80019b4:	f006 fbd4 	bl	8008160 <strtok>
	GSM.CRegN = atoi(ParsePointer);
 80019b8:	f005 f8e1 	bl	8006b7e <atoi>
 80019bc:	4c4e      	ldr	r4, [pc, #312]	; (8001af8 <Parser_parse+0x278>)
 80019be:	7260      	strb	r0, [r4, #9]
	ParsePointer = strtok(NULL, ",");
 80019c0:	4629      	mov	r1, r5
 80019c2:	2000      	movs	r0, #0
 80019c4:	f006 fbcc 	bl	8008160 <strtok>
	GSM.CRegStat = atoi(ParsePointer);
 80019c8:	f005 f8d9 	bl	8006b7e <atoi>
 80019cc:	72a0      	strb	r0, [r4, #10]
}
 80019ce:	e761      	b.n	8001894 <Parser_parse+0x14>
	char * ParsePointer = strtok(NULL, "/");
 80019d0:	4c62      	ldr	r4, [pc, #392]	; (8001b5c <Parser_parse+0x2dc>)
 80019d2:	4621      	mov	r1, r4
 80019d4:	f006 fbc4 	bl	8008160 <strtok>
	year = atoi(ParsePointer+1);
 80019d8:	3001      	adds	r0, #1
 80019da:	f005 f8d0 	bl	8006b7e <atoi>
 80019de:	4b60      	ldr	r3, [pc, #384]	; (8001b60 <Parser_parse+0x2e0>)
 80019e0:	7018      	strb	r0, [r3, #0]
	ParsePointer = strtok(NULL, "/");
 80019e2:	4621      	mov	r1, r4
 80019e4:	2000      	movs	r0, #0
 80019e6:	f006 fbbb 	bl	8008160 <strtok>
	month = atoi(ParsePointer);
 80019ea:	f005 f8c8 	bl	8006b7e <atoi>
 80019ee:	4b5d      	ldr	r3, [pc, #372]	; (8001b64 <Parser_parse+0x2e4>)
 80019f0:	7018      	strb	r0, [r3, #0]
	ParsePointer = strtok(NULL, ",");
 80019f2:	4959      	ldr	r1, [pc, #356]	; (8001b58 <Parser_parse+0x2d8>)
 80019f4:	2000      	movs	r0, #0
 80019f6:	f006 fbb3 	bl	8008160 <strtok>
	day = atoi(ParsePointer);
 80019fa:	f005 f8c0 	bl	8006b7e <atoi>
 80019fe:	4b5a      	ldr	r3, [pc, #360]	; (8001b68 <Parser_parse+0x2e8>)
 8001a00:	7018      	strb	r0, [r3, #0]
	ParsePointer = strtok(NULL, ":");
 8001a02:	4c5a      	ldr	r4, [pc, #360]	; (8001b6c <Parser_parse+0x2ec>)
 8001a04:	4621      	mov	r1, r4
 8001a06:	2000      	movs	r0, #0
 8001a08:	f006 fbaa 	bl	8008160 <strtok>
	hour = atoi(ParsePointer);
 8001a0c:	f005 f8b7 	bl	8006b7e <atoi>
 8001a10:	4b57      	ldr	r3, [pc, #348]	; (8001b70 <Parser_parse+0x2f0>)
 8001a12:	7018      	strb	r0, [r3, #0]
	ParsePointer = strtok(NULL, ":");
 8001a14:	4621      	mov	r1, r4
 8001a16:	2000      	movs	r0, #0
 8001a18:	f006 fba2 	bl	8008160 <strtok>
	minute = atoi(ParsePointer);
 8001a1c:	f005 f8af 	bl	8006b7e <atoi>
 8001a20:	4b54      	ldr	r3, [pc, #336]	; (8001b74 <Parser_parse+0x2f4>)
 8001a22:	7018      	strb	r0, [r3, #0]
	ParsePointer = strtok(NULL, "+");
 8001a24:	4954      	ldr	r1, [pc, #336]	; (8001b78 <Parser_parse+0x2f8>)
 8001a26:	2000      	movs	r0, #0
 8001a28:	f006 fb9a 	bl	8008160 <strtok>
	second = atoi(ParsePointer);
 8001a2c:	f005 f8a7 	bl	8006b7e <atoi>
 8001a30:	4b52      	ldr	r3, [pc, #328]	; (8001b7c <Parser_parse+0x2fc>)
 8001a32:	7018      	strb	r0, [r3, #0]
}
 8001a34:	e72e      	b.n	8001894 <Parser_parse+0x14>
	char * ParsePointer = strtok(NULL, ",");
 8001a36:	4d48      	ldr	r5, [pc, #288]	; (8001b58 <Parser_parse+0x2d8>)
 8001a38:	4629      	mov	r1, r5
 8001a3a:	f006 fb91 	bl	8008160 <strtok>
	GSM.FtpPut.mode = atoi(ParsePointer);
 8001a3e:	f005 f89e 	bl	8006b7e <atoi>
 8001a42:	4c2d      	ldr	r4, [pc, #180]	; (8001af8 <Parser_parse+0x278>)
 8001a44:	7320      	strb	r0, [r4, #12]
	ParsePointer = strtok(NULL, ",");
 8001a46:	4629      	mov	r1, r5
 8001a48:	2000      	movs	r0, #0
 8001a4a:	f006 fb89 	bl	8008160 <strtok>
	if(GSM.FtpPut.mode == 1)
 8001a4e:	7b23      	ldrb	r3, [r4, #12]
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d007      	beq.n	8001a64 <Parser_parse+0x1e4>
	else if(GSM.FtpPut.mode == 2)
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	f47f af1d 	bne.w	8001894 <Parser_parse+0x14>
		GSM.FtpPut.CnfLength = atoi(ParsePointer);
 8001a5a:	f005 f890 	bl	8006b7e <atoi>
 8001a5e:	4b26      	ldr	r3, [pc, #152]	; (8001af8 <Parser_parse+0x278>)
 8001a60:	8218      	strh	r0, [r3, #16]
 8001a62:	e717      	b.n	8001894 <Parser_parse+0x14>
		GSM.FtpPut.status = atoi(ParsePointer);
 8001a64:	f005 f88b 	bl	8006b7e <atoi>
 8001a68:	b2c3      	uxtb	r3, r0
 8001a6a:	7363      	strb	r3, [r4, #13]
		if(GSM.FtpPut.status == 1)
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	f47f af11 	bne.w	8001894 <Parser_parse+0x14>
			ParsePointer = strtok(NULL, ",");
 8001a72:	4629      	mov	r1, r5
 8001a74:	2000      	movs	r0, #0
 8001a76:	f006 fb73 	bl	8008160 <strtok>
			GSM.FtpPut.maxLength = atoi(ParsePointer);
 8001a7a:	f005 f880 	bl	8006b7e <atoi>
 8001a7e:	81e0      	strh	r0, [r4, #14]
 8001a80:	e708      	b.n	8001894 <Parser_parse+0x14>
			ParsePointer = strtok(NULL, "\r");
 8001a82:	4933      	ldr	r1, [pc, #204]	; (8001b50 <Parser_parse+0x2d0>)
 8001a84:	f006 fb6c 	bl	8008160 <strtok>
 8001a88:	4601      	mov	r1, r0
			strcpy(GSM.ConfigFlash.login, ParsePointer);
 8001a8a:	481f      	ldr	r0, [pc, #124]	; (8001b08 <Parser_parse+0x288>)
 8001a8c:	f005 fd4b 	bl	8007526 <strcpy>
 8001a90:	e700      	b.n	8001894 <Parser_parse+0x14>
			ParsePointer = strtok(NULL, "\r");
 8001a92:	492f      	ldr	r1, [pc, #188]	; (8001b50 <Parser_parse+0x2d0>)
 8001a94:	f006 fb64 	bl	8008160 <strtok>
 8001a98:	4601      	mov	r1, r0
			strcpy(GSM.ConfigFlash.password, ParsePointer);
 8001a9a:	4839      	ldr	r0, [pc, #228]	; (8001b80 <Parser_parse+0x300>)
 8001a9c:	f005 fd43 	bl	8007526 <strcpy>
 8001aa0:	e6f8      	b.n	8001894 <Parser_parse+0x14>
			ParsePointer = strtok(NULL, "\r");
 8001aa2:	492b      	ldr	r1, [pc, #172]	; (8001b50 <Parser_parse+0x2d0>)
 8001aa4:	f006 fb5c 	bl	8008160 <strtok>
 8001aa8:	4601      	mov	r1, r0
			strcpy(GSM.ConfigFlash.server, ParsePointer);
 8001aaa:	4836      	ldr	r0, [pc, #216]	; (8001b84 <Parser_parse+0x304>)
 8001aac:	f005 fd3b 	bl	8007526 <strcpy>
 8001ab0:	e6f0      	b.n	8001894 <Parser_parse+0x14>
			ParsePointer = strtok(NULL, "\r");
 8001ab2:	4927      	ldr	r1, [pc, #156]	; (8001b50 <Parser_parse+0x2d0>)
 8001ab4:	f006 fb54 	bl	8008160 <strtok>
 8001ab8:	4601      	mov	r1, r0
			strcpy(GSM.ConfigFlash.path, ParsePointer);
 8001aba:	4833      	ldr	r0, [pc, #204]	; (8001b88 <Parser_parse+0x308>)
 8001abc:	f005 fd33 	bl	8007526 <strcpy>
 8001ac0:	e6e8      	b.n	8001894 <Parser_parse+0x14>
			ParsePointer = strtok(NULL, "\r");
 8001ac2:	4923      	ldr	r1, [pc, #140]	; (8001b50 <Parser_parse+0x2d0>)
 8001ac4:	f006 fb4c 	bl	8008160 <strtok>
 8001ac8:	4601      	mov	r1, r0
			strcpy(GSM.ConfigFlash.deviceNumber, ParsePointer);
 8001aca:	4830      	ldr	r0, [pc, #192]	; (8001b8c <Parser_parse+0x30c>)
 8001acc:	f005 fd2b 	bl	8007526 <strcpy>
 8001ad0:	e6e0      	b.n	8001894 <Parser_parse+0x14>
			ParsePointer = strtok(NULL, "\r");
 8001ad2:	491f      	ldr	r1, [pc, #124]	; (8001b50 <Parser_parse+0x2d0>)
 8001ad4:	f006 fb44 	bl	8008160 <strtok>
 8001ad8:	4601      	mov	r1, r0
			strcpy(GSM.ConfigFlash.number1, ParsePointer);
 8001ada:	482d      	ldr	r0, [pc, #180]	; (8001b90 <Parser_parse+0x310>)
 8001adc:	f005 fd23 	bl	8007526 <strcpy>
 8001ae0:	e6d8      	b.n	8001894 <Parser_parse+0x14>
			ParsePointer = strtok(NULL, "\r");
 8001ae2:	491b      	ldr	r1, [pc, #108]	; (8001b50 <Parser_parse+0x2d0>)
 8001ae4:	f006 fb3c 	bl	8008160 <strtok>
 8001ae8:	4601      	mov	r1, r0
			strcpy(GSM.ConfigFlash.number2, ParsePointer);
 8001aea:	482a      	ldr	r0, [pc, #168]	; (8001b94 <Parser_parse+0x314>)
 8001aec:	f005 fd1b 	bl	8007526 <strcpy>
 8001af0:	e6d0      	b.n	8001894 <Parser_parse+0x14>
 8001af2:	bf00      	nop
 8001af4:	0800b338 	.word	0x0800b338
 8001af8:	20000f00 	.word	0x20000f00
 8001afc:	0800b33c 	.word	0x0800b33c
 8001b00:	0800b344 	.word	0x0800b344
 8001b04:	0800b354 	.word	0x0800b354
 8001b08:	20000f14 	.word	0x20000f14
 8001b0c:	0801fc00 	.word	0x0801fc00
 8001b10:	0800b348 	.word	0x0800b348
 8001b14:	20001434 	.word	0x20001434
 8001b18:	200014c0 	.word	0x200014c0
 8001b1c:	0800b35c 	.word	0x0800b35c
 8001b20:	0800b360 	.word	0x0800b360
 8001b24:	0800b36c 	.word	0x0800b36c
 8001b28:	0800b374 	.word	0x0800b374
 8001b2c:	0800b384 	.word	0x0800b384
 8001b30:	0800b390 	.word	0x0800b390
 8001b34:	0800b39c 	.word	0x0800b39c
 8001b38:	0800b3a8 	.word	0x0800b3a8
 8001b3c:	0800b3b0 	.word	0x0800b3b0
 8001b40:	0800b3b8 	.word	0x0800b3b8
 8001b44:	0800b3c0 	.word	0x0800b3c0
 8001b48:	0800b3cc 	.word	0x0800b3cc
 8001b4c:	0800b3d8 	.word	0x0800b3d8
 8001b50:	0800b398 	.word	0x0800b398
 8001b54:	20000fd9 	.word	0x20000fd9
 8001b58:	0800b368 	.word	0x0800b368
 8001b5c:	0800b37c 	.word	0x0800b37c
 8001b60:	200016e5 	.word	0x200016e5
 8001b64:	200016da 	.word	0x200016da
 8001b68:	200016ce 	.word	0x200016ce
 8001b6c:	0800b364 	.word	0x0800b364
 8001b70:	200016d8 	.word	0x200016d8
 8001b74:	200016d9 	.word	0x200016d9
 8001b78:	0800b380 	.word	0x0800b380
 8001b7c:	200016db 	.word	0x200016db
 8001b80:	20000f32 	.word	0x20000f32
 8001b84:	20000f50 	.word	0x20000f50
 8001b88:	20000f82 	.word	0x20000f82
 8001b8c:	20000fd4 	.word	0x20000fd4
 8001b90:	20000fb4 	.word	0x20000fb4
 8001b94:	20000fc4 	.word	0x20000fc4

08001b98 <Ring_Buffer_Read>:
#include "main.h"
#include "ring_buffer.h"

RbStatus_t Ring_Buffer_Read(RingBuffer_t * Buff, uint8_t *value)
{
	if(Buff->Head == Buff->Tail)
 8001b98:	8843      	ldrh	r3, [r0, #2]
 8001b9a:	8802      	ldrh	r2, [r0, #0]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d00e      	beq.n	8001bbe <Ring_Buffer_Read+0x26>
	{
		return RB_ERROR;
	}
	*value = Buff->Buffer[Buff->Tail];
 8001ba0:	4403      	add	r3, r0
 8001ba2:	791b      	ldrb	r3, [r3, #4]
 8001ba4:	700b      	strb	r3, [r1, #0]

	Buff->Tail = (Buff->Tail + 1) % RING_BUFFER_SIZE;
 8001ba6:	8843      	ldrh	r3, [r0, #2]
 8001ba8:	3301      	adds	r3, #1
 8001baa:	425a      	negs	r2, r3
 8001bac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bb0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001bb4:	bf58      	it	pl
 8001bb6:	4253      	negpl	r3, r2
 8001bb8:	8043      	strh	r3, [r0, #2]

	return RB_OK;
 8001bba:	2000      	movs	r0, #0
 8001bbc:	4770      	bx	lr
		return RB_ERROR;
 8001bbe:	2001      	movs	r0, #1
}
 8001bc0:	4770      	bx	lr

08001bc2 <Ring_Buffer_Write>:

RbStatus_t Ring_Buffer_Write(RingBuffer_t * Buff, uint8_t value)
{
	uint16_t Head_tmp = (Buff->Head + 1) % RING_BUFFER_SIZE;
 8001bc2:	8802      	ldrh	r2, [r0, #0]
 8001bc4:	1c53      	adds	r3, r2, #1
 8001bc6:	f1d3 0c00 	rsbs	ip, r3, #0
 8001bca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bce:	f3cc 0c08 	ubfx	ip, ip, #0, #9
 8001bd2:	bf58      	it	pl
 8001bd4:	f1cc 0300 	rsbpl	r3, ip, #0
 8001bd8:	b29b      	uxth	r3, r3

	if(Head_tmp == Buff->Tail)
 8001bda:	f8b0 c002 	ldrh.w	ip, [r0, #2]
 8001bde:	459c      	cmp	ip, r3
 8001be0:	d004      	beq.n	8001bec <Ring_Buffer_Write+0x2a>
	{
		return RB_ERROR;
	}
	Buff->Buffer[Buff->Head] = value;
 8001be2:	4402      	add	r2, r0
 8001be4:	7111      	strb	r1, [r2, #4]
	Buff->Head = Head_tmp;
 8001be6:	8003      	strh	r3, [r0, #0]

	return RB_OK;
 8001be8:	2000      	movs	r0, #0
 8001bea:	4770      	bx	lr
		return RB_ERROR;
 8001bec:	2001      	movs	r0, #1
}
 8001bee:	4770      	bx	lr

08001bf0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bf0:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001bf2:	4b0a      	ldr	r3, [pc, #40]	; (8001c1c <HAL_MspInit+0x2c>)
 8001bf4:	699a      	ldr	r2, [r3, #24]
 8001bf6:	f042 0201 	orr.w	r2, r2, #1
 8001bfa:	619a      	str	r2, [r3, #24]
 8001bfc:	699a      	ldr	r2, [r3, #24]
 8001bfe:	f002 0201 	and.w	r2, r2, #1
 8001c02:	9200      	str	r2, [sp, #0]
 8001c04:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c06:	69da      	ldr	r2, [r3, #28]
 8001c08:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001c0c:	61da      	str	r2, [r3, #28]
 8001c0e:	69db      	ldr	r3, [r3, #28]
 8001c10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c14:	9301      	str	r3, [sp, #4]
 8001c16:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c18:	b002      	add	sp, #8
 8001c1a:	4770      	bx	lr
 8001c1c:	40021000 	.word	0x40021000

08001c20 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c20:	e7fe      	b.n	8001c20 <NMI_Handler>

08001c22 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c22:	e7fe      	b.n	8001c22 <HardFault_Handler>

08001c24 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c24:	e7fe      	b.n	8001c24 <MemManage_Handler>

08001c26 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c26:	e7fe      	b.n	8001c26 <BusFault_Handler>

08001c28 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c28:	e7fe      	b.n	8001c28 <UsageFault_Handler>

08001c2a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c2a:	4770      	bx	lr

08001c2c <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c2c:	4770      	bx	lr

08001c2e <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c2e:	4770      	bx	lr

08001c30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c30:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c32:	f000 fa59 	bl	80020e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c36:	bd08      	pop	{r3, pc}

08001c38 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001c38:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001c3a:	4802      	ldr	r0, [pc, #8]	; (8001c44 <USB_LP_CAN1_RX0_IRQHandler+0xc>)
 8001c3c:	f000 fe83 	bl	8002946 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001c40:	bd08      	pop	{r3, pc}
 8001c42:	bf00      	nop
 8001c44:	200020f0 	.word	0x200020f0

08001c48 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001c48:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001c4a:	4802      	ldr	r0, [pc, #8]	; (8001c54 <TIM3_IRQHandler+0xc>)
 8001c4c:	f002 f9d0 	bl	8003ff0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001c50:	bd08      	pop	{r3, pc}
 8001c52:	bf00      	nop
 8001c54:	200016ec 	.word	0x200016ec

08001c58 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001c58:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001c5a:	4802      	ldr	r0, [pc, #8]	; (8001c64 <USART1_IRQHandler+0xc>)
 8001c5c:	f002 fe60 	bl	8004920 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001c60:	bd08      	pop	{r3, pc}
 8001c62:	bf00      	nop
 8001c64:	2000177c 	.word	0x2000177c

08001c68 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8001c68:	2001      	movs	r0, #1
 8001c6a:	4770      	bx	lr

08001c6c <_kill>:

int _kill(int pid, int sig)
{
 8001c6c:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c6e:	f004 ff8b 	bl	8006b88 <__errno>
 8001c72:	2316      	movs	r3, #22
 8001c74:	6003      	str	r3, [r0, #0]
  return -1;
}
 8001c76:	f04f 30ff 	mov.w	r0, #4294967295
 8001c7a:	bd08      	pop	{r3, pc}

08001c7c <_exit>:

void _exit (int status)
{
 8001c7c:	b508      	push	{r3, lr}
  errno = EINVAL;
 8001c7e:	f004 ff83 	bl	8006b88 <__errno>
 8001c82:	2316      	movs	r3, #22
 8001c84:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 8001c86:	e7fe      	b.n	8001c86 <_exit+0xa>

08001c88 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c88:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c8a:	1e16      	subs	r6, r2, #0
 8001c8c:	dd07      	ble.n	8001c9e <_read+0x16>
 8001c8e:	460c      	mov	r4, r1
 8001c90:	198d      	adds	r5, r1, r6
  {
    *ptr++ = __io_getchar();
 8001c92:	f3af 8000 	nop.w
 8001c96:	f804 0b01 	strb.w	r0, [r4], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c9a:	42a5      	cmp	r5, r4
 8001c9c:	d1f9      	bne.n	8001c92 <_read+0xa>
  }

  return len;
}
 8001c9e:	4630      	mov	r0, r6
 8001ca0:	bd70      	pop	{r4, r5, r6, pc}

08001ca2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ca2:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ca4:	1e16      	subs	r6, r2, #0
 8001ca6:	dd07      	ble.n	8001cb8 <_write+0x16>
 8001ca8:	460c      	mov	r4, r1
 8001caa:	198d      	adds	r5, r1, r6
  {
    __io_putchar(*ptr++);
 8001cac:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001cb0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cb4:	42a5      	cmp	r5, r4
 8001cb6:	d1f9      	bne.n	8001cac <_write+0xa>
  }
  return len;
}
 8001cb8:	4630      	mov	r0, r6
 8001cba:	bd70      	pop	{r4, r5, r6, pc}

08001cbc <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8001cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8001cc0:	4770      	bx	lr

08001cc2 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8001cc2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cc6:	604b      	str	r3, [r1, #4]
  return 0;
}
 8001cc8:	2000      	movs	r0, #0
 8001cca:	4770      	bx	lr

08001ccc <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8001ccc:	2001      	movs	r0, #1
 8001cce:	4770      	bx	lr

08001cd0 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8001cd0:	2000      	movs	r0, #0
 8001cd2:	4770      	bx	lr

08001cd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cd4:	b508      	push	{r3, lr}
 8001cd6:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cd8:	4a0c      	ldr	r2, [pc, #48]	; (8001d0c <_sbrk+0x38>)
 8001cda:	6812      	ldr	r2, [r2, #0]
 8001cdc:	b152      	cbz	r2, 8001cf4 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cde:	4a0b      	ldr	r2, [pc, #44]	; (8001d0c <_sbrk+0x38>)
 8001ce0:	6810      	ldr	r0, [r2, #0]
 8001ce2:	4403      	add	r3, r0
 8001ce4:	4a0a      	ldr	r2, [pc, #40]	; (8001d10 <_sbrk+0x3c>)
 8001ce6:	490b      	ldr	r1, [pc, #44]	; (8001d14 <_sbrk+0x40>)
 8001ce8:	1a52      	subs	r2, r2, r1
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d806      	bhi.n	8001cfc <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001cee:	4a07      	ldr	r2, [pc, #28]	; (8001d0c <_sbrk+0x38>)
 8001cf0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8001cf2:	bd08      	pop	{r3, pc}
    __sbrk_heap_end = &_end;
 8001cf4:	4a05      	ldr	r2, [pc, #20]	; (8001d0c <_sbrk+0x38>)
 8001cf6:	4908      	ldr	r1, [pc, #32]	; (8001d18 <_sbrk+0x44>)
 8001cf8:	6011      	str	r1, [r2, #0]
 8001cfa:	e7f0      	b.n	8001cde <_sbrk+0xa>
    errno = ENOMEM;
 8001cfc:	f004 ff44 	bl	8006b88 <__errno>
 8001d00:	230c      	movs	r3, #12
 8001d02:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001d04:	f04f 30ff 	mov.w	r0, #4294967295
 8001d08:	e7f3      	b.n	8001cf2 <_sbrk+0x1e>
 8001d0a:	bf00      	nop
 8001d0c:	200016e8 	.word	0x200016e8
 8001d10:	20005000 	.word	0x20005000
 8001d14:	00001000 	.word	0x00001000
 8001d18:	20002610 	.word	0x20002610

08001d1c <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d1c:	4770      	bx	lr
	...

08001d20 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001d20:	b500      	push	{lr}
 8001d22:	b087      	sub	sp, #28

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d24:	2300      	movs	r3, #0
 8001d26:	9302      	str	r3, [sp, #8]
 8001d28:	9303      	str	r3, [sp, #12]
 8001d2a:	9304      	str	r3, [sp, #16]
 8001d2c:	9305      	str	r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d2e:	9300      	str	r3, [sp, #0]
 8001d30:	9301      	str	r3, [sp, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d32:	4815      	ldr	r0, [pc, #84]	; (8001d88 <MX_TIM3_Init+0x68>)
 8001d34:	4a15      	ldr	r2, [pc, #84]	; (8001d8c <MX_TIM3_Init+0x6c>)
 8001d36:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 10659;
 8001d38:	f642 12a3 	movw	r2, #10659	; 0x29a3
 8001d3c:	6042      	str	r2, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d3e:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 6500;
 8001d40:	f641 1264 	movw	r2, #6500	; 0x1964
 8001d44:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d46:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d48:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001d4a:	f002 fa5d 	bl	8004208 <HAL_TIM_Base_Init>
 8001d4e:	b990      	cbnz	r0, 8001d76 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d54:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001d56:	a902      	add	r1, sp, #8
 8001d58:	480b      	ldr	r0, [pc, #44]	; (8001d88 <MX_TIM3_Init+0x68>)
 8001d5a:	f002 fa8d 	bl	8004278 <HAL_TIM_ConfigClockSource>
 8001d5e:	b968      	cbnz	r0, 8001d7c <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d60:	2300      	movs	r3, #0
 8001d62:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d64:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d66:	4669      	mov	r1, sp
 8001d68:	4807      	ldr	r0, [pc, #28]	; (8001d88 <MX_TIM3_Init+0x68>)
 8001d6a:	f002 fb29 	bl	80043c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001d6e:	b940      	cbnz	r0, 8001d82 <MX_TIM3_Init+0x62>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001d70:	b007      	add	sp, #28
 8001d72:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001d76:	f7ff fd67 	bl	8001848 <Error_Handler>
 8001d7a:	e7e9      	b.n	8001d50 <MX_TIM3_Init+0x30>
    Error_Handler();
 8001d7c:	f7ff fd64 	bl	8001848 <Error_Handler>
 8001d80:	e7ee      	b.n	8001d60 <MX_TIM3_Init+0x40>
    Error_Handler();
 8001d82:	f7ff fd61 	bl	8001848 <Error_Handler>
}
 8001d86:	e7f3      	b.n	8001d70 <MX_TIM3_Init+0x50>
 8001d88:	200016ec 	.word	0x200016ec
 8001d8c:	40000400 	.word	0x40000400

08001d90 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001d90:	b500      	push	{lr}
 8001d92:	b087      	sub	sp, #28

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d94:	2300      	movs	r3, #0
 8001d96:	9302      	str	r3, [sp, #8]
 8001d98:	9303      	str	r3, [sp, #12]
 8001d9a:	9304      	str	r3, [sp, #16]
 8001d9c:	9305      	str	r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d9e:	9300      	str	r3, [sp, #0]
 8001da0:	9301      	str	r3, [sp, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001da2:	4815      	ldr	r0, [pc, #84]	; (8001df8 <MX_TIM4_Init+0x68>)
 8001da4:	4a15      	ldr	r2, [pc, #84]	; (8001dfc <MX_TIM4_Init+0x6c>)
 8001da6:	6002      	str	r2, [r0, #0]
  htim4.Init.Prescaler = 32-1;
 8001da8:	221f      	movs	r2, #31
 8001daa:	6042      	str	r2, [r0, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dac:	6083      	str	r3, [r0, #8]
  htim4.Init.Period = 0xffff;
 8001dae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001db2:	60c2      	str	r2, [r0, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001db4:	6103      	str	r3, [r0, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001db6:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001db8:	f002 fa26 	bl	8004208 <HAL_TIM_Base_Init>
 8001dbc:	b990      	cbnz	r0, 8001de4 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dc2:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001dc4:	a902      	add	r1, sp, #8
 8001dc6:	480c      	ldr	r0, [pc, #48]	; (8001df8 <MX_TIM4_Init+0x68>)
 8001dc8:	f002 fa56 	bl	8004278 <HAL_TIM_ConfigClockSource>
 8001dcc:	b968      	cbnz	r0, 8001dea <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dd2:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001dd4:	4669      	mov	r1, sp
 8001dd6:	4808      	ldr	r0, [pc, #32]	; (8001df8 <MX_TIM4_Init+0x68>)
 8001dd8:	f002 faf2 	bl	80043c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001ddc:	b940      	cbnz	r0, 8001df0 <MX_TIM4_Init+0x60>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001dde:	b007      	add	sp, #28
 8001de0:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001de4:	f7ff fd30 	bl	8001848 <Error_Handler>
 8001de8:	e7e9      	b.n	8001dbe <MX_TIM4_Init+0x2e>
    Error_Handler();
 8001dea:	f7ff fd2d 	bl	8001848 <Error_Handler>
 8001dee:	e7ee      	b.n	8001dce <MX_TIM4_Init+0x3e>
    Error_Handler();
 8001df0:	f7ff fd2a 	bl	8001848 <Error_Handler>
}
 8001df4:	e7f3      	b.n	8001dde <MX_TIM4_Init+0x4e>
 8001df6:	bf00      	nop
 8001df8:	20001734 	.word	0x20001734
 8001dfc:	40000800 	.word	0x40000800

08001e00 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001e00:	b500      	push	{lr}
 8001e02:	b083      	sub	sp, #12

  if(tim_baseHandle->Instance==TIM3)
 8001e04:	6803      	ldr	r3, [r0, #0]
 8001e06:	4a13      	ldr	r2, [pc, #76]	; (8001e54 <HAL_TIM_Base_MspInit+0x54>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d005      	beq.n	8001e18 <HAL_TIM_Base_MspInit+0x18>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM4)
 8001e0c:	4a12      	ldr	r2, [pc, #72]	; (8001e58 <HAL_TIM_Base_MspInit+0x58>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d015      	beq.n	8001e3e <HAL_TIM_Base_MspInit+0x3e>
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001e12:	b003      	add	sp, #12
 8001e14:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e18:	4b10      	ldr	r3, [pc, #64]	; (8001e5c <HAL_TIM_Base_MspInit+0x5c>)
 8001e1a:	69da      	ldr	r2, [r3, #28]
 8001e1c:	f042 0202 	orr.w	r2, r2, #2
 8001e20:	61da      	str	r2, [r3, #28]
 8001e22:	69db      	ldr	r3, [r3, #28]
 8001e24:	f003 0302 	and.w	r3, r3, #2
 8001e28:	9300      	str	r3, [sp, #0]
 8001e2a:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	4611      	mov	r1, r2
 8001e30:	201d      	movs	r0, #29
 8001e32:	f000 f97d 	bl	8002130 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001e36:	201d      	movs	r0, #29
 8001e38:	f000 f9b0 	bl	800219c <HAL_NVIC_EnableIRQ>
 8001e3c:	e7e9      	b.n	8001e12 <HAL_TIM_Base_MspInit+0x12>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001e3e:	4b07      	ldr	r3, [pc, #28]	; (8001e5c <HAL_TIM_Base_MspInit+0x5c>)
 8001e40:	69da      	ldr	r2, [r3, #28]
 8001e42:	f042 0204 	orr.w	r2, r2, #4
 8001e46:	61da      	str	r2, [r3, #28]
 8001e48:	69db      	ldr	r3, [r3, #28]
 8001e4a:	f003 0304 	and.w	r3, r3, #4
 8001e4e:	9301      	str	r3, [sp, #4]
 8001e50:	9b01      	ldr	r3, [sp, #4]
}
 8001e52:	e7de      	b.n	8001e12 <HAL_TIM_Base_MspInit+0x12>
 8001e54:	40000400 	.word	0x40000400
 8001e58:	40000800 	.word	0x40000800
 8001e5c:	40021000 	.word	0x40021000

08001e60 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001e60:	b508      	push	{r3, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001e62:	480a      	ldr	r0, [pc, #40]	; (8001e8c <MX_USART1_UART_Init+0x2c>)
 8001e64:	4b0a      	ldr	r3, [pc, #40]	; (8001e90 <MX_USART1_UART_Init+0x30>)
 8001e66:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 9600;
 8001e68:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8001e6c:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e72:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e74:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e76:	220c      	movs	r2, #12
 8001e78:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e7a:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e7c:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e7e:	f002 fb6b 	bl	8004558 <HAL_UART_Init>
 8001e82:	b900      	cbnz	r0, 8001e86 <MX_USART1_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e84:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001e86:	f7ff fcdf 	bl	8001848 <Error_Handler>
}
 8001e8a:	e7fb      	b.n	8001e84 <MX_USART1_UART_Init+0x24>
 8001e8c:	2000177c 	.word	0x2000177c
 8001e90:	40013800 	.word	0x40013800

08001e94 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001e94:	b508      	push	{r3, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e96:	480a      	ldr	r0, [pc, #40]	; (8001ec0 <MX_USART2_UART_Init+0x2c>)
 8001e98:	4b0a      	ldr	r3, [pc, #40]	; (8001ec4 <MX_USART2_UART_Init+0x30>)
 8001e9a:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 9600;
 8001e9c:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8001ea0:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ea6:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ea8:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001eaa:	220c      	movs	r2, #12
 8001eac:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001eae:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001eb0:	61c3      	str	r3, [r0, #28]
  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 8001eb2:	f002 fb80 	bl	80045b6 <HAL_HalfDuplex_Init>
 8001eb6:	b900      	cbnz	r0, 8001eba <MX_USART2_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001eb8:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001eba:	f7ff fcc5 	bl	8001848 <Error_Handler>
}
 8001ebe:	e7fb      	b.n	8001eb8 <MX_USART2_UART_Init+0x24>
 8001ec0:	200017c0 	.word	0x200017c0
 8001ec4:	40004400 	.word	0x40004400

08001ec8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ec8:	b510      	push	{r4, lr}
 8001eca:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ecc:	2300      	movs	r3, #0
 8001ece:	9304      	str	r3, [sp, #16]
 8001ed0:	9305      	str	r3, [sp, #20]
 8001ed2:	9306      	str	r3, [sp, #24]
 8001ed4:	9307      	str	r3, [sp, #28]
  if(uartHandle->Instance==USART1)
 8001ed6:	6803      	ldr	r3, [r0, #0]
 8001ed8:	4a27      	ldr	r2, [pc, #156]	; (8001f78 <HAL_UART_MspInit+0xb0>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d004      	beq.n	8001ee8 <HAL_UART_MspInit+0x20>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(uartHandle->Instance==USART2)
 8001ede:	4a27      	ldr	r2, [pc, #156]	; (8001f7c <HAL_UART_MspInit+0xb4>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d02b      	beq.n	8001f3c <HAL_UART_MspInit+0x74>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001ee4:	b008      	add	sp, #32
 8001ee6:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ee8:	4b25      	ldr	r3, [pc, #148]	; (8001f80 <HAL_UART_MspInit+0xb8>)
 8001eea:	699a      	ldr	r2, [r3, #24]
 8001eec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001ef0:	619a      	str	r2, [r3, #24]
 8001ef2:	699a      	ldr	r2, [r3, #24]
 8001ef4:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001ef8:	9200      	str	r2, [sp, #0]
 8001efa:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001efc:	699a      	ldr	r2, [r3, #24]
 8001efe:	f042 0204 	orr.w	r2, r2, #4
 8001f02:	619a      	str	r2, [r3, #24]
 8001f04:	699b      	ldr	r3, [r3, #24]
 8001f06:	f003 0304 	and.w	r3, r3, #4
 8001f0a:	9301      	str	r3, [sp, #4]
 8001f0c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001f0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f12:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f14:	2302      	movs	r3, #2
 8001f16:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f1c:	4c19      	ldr	r4, [pc, #100]	; (8001f84 <HAL_UART_MspInit+0xbc>)
 8001f1e:	a904      	add	r1, sp, #16
 8001f20:	4620      	mov	r0, r4
 8001f22:	f000 fb1d 	bl	8002560 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001f26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f2a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f30:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f32:	a904      	add	r1, sp, #16
 8001f34:	4620      	mov	r0, r4
 8001f36:	f000 fb13 	bl	8002560 <HAL_GPIO_Init>
 8001f3a:	e7d3      	b.n	8001ee4 <HAL_UART_MspInit+0x1c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f3c:	4b10      	ldr	r3, [pc, #64]	; (8001f80 <HAL_UART_MspInit+0xb8>)
 8001f3e:	69da      	ldr	r2, [r3, #28]
 8001f40:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001f44:	61da      	str	r2, [r3, #28]
 8001f46:	69da      	ldr	r2, [r3, #28]
 8001f48:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001f4c:	9202      	str	r2, [sp, #8]
 8001f4e:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f50:	699a      	ldr	r2, [r3, #24]
 8001f52:	f042 0204 	orr.w	r2, r2, #4
 8001f56:	619a      	str	r2, [r3, #24]
 8001f58:	699b      	ldr	r3, [r3, #24]
 8001f5a:	f003 0304 	and.w	r3, r3, #4
 8001f5e:	9303      	str	r3, [sp, #12]
 8001f60:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001f62:	2304      	movs	r3, #4
 8001f64:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f66:	2312      	movs	r3, #18
 8001f68:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f6e:	a904      	add	r1, sp, #16
 8001f70:	4804      	ldr	r0, [pc, #16]	; (8001f84 <HAL_UART_MspInit+0xbc>)
 8001f72:	f000 faf5 	bl	8002560 <HAL_GPIO_Init>
}
 8001f76:	e7b5      	b.n	8001ee4 <HAL_UART_MspInit+0x1c>
 8001f78:	40013800 	.word	0x40013800
 8001f7c:	40004400 	.word	0x40004400
 8001f80:	40021000 	.word	0x40021000
 8001f84:	40010800 	.word	0x40010800

08001f88 <UartSend>:
{
	HAL_UART_Transmit(&huart1, (uint8_t*) Message, strlen(Message), 20);
}

void UartSend(char * Message)
{
 8001f88:	b510      	push	{r4, lr}
 8001f8a:	4604      	mov	r4, r0
	GSM.ReceivedState = 0;
 8001f8c:	4b07      	ldr	r3, [pc, #28]	; (8001fac <UartSend+0x24>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	721a      	strb	r2, [r3, #8]
	HAL_UART_Transmit_IT(&huart1, (uint8_t*) Message, strlen(Message));
 8001f92:	f7fe f8e7 	bl	8000164 <strlen>
 8001f96:	b282      	uxth	r2, r0
 8001f98:	4621      	mov	r1, r4
 8001f9a:	4805      	ldr	r0, [pc, #20]	; (8001fb0 <UartSend+0x28>)
 8001f9c:	f002 fc2b 	bl	80047f6 <HAL_UART_Transmit_IT>
	*Uart1isBusyPtr = 1;
 8001fa0:	4b04      	ldr	r3, [pc, #16]	; (8001fb4 <UartSend+0x2c>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	701a      	strb	r2, [r3, #0]
}
 8001fa8:	bd10      	pop	{r4, pc}
 8001faa:	bf00      	nop
 8001fac:	20000f00 	.word	0x20000f00
 8001fb0:	2000177c 	.word	0x2000177c
 8001fb4:	20000004 	.word	0x20000004

08001fb8 <UartSendWoRxCtrl>:

void UartSendWoRxCtrl(char * Message)
{
 8001fb8:	b510      	push	{r4, lr}
 8001fba:	4604      	mov	r4, r0
	HAL_UART_Transmit_IT(&huart1, (uint8_t*) Message, strlen(Message));
 8001fbc:	f7fe f8d2 	bl	8000164 <strlen>
 8001fc0:	b282      	uxth	r2, r0
 8001fc2:	4621      	mov	r1, r4
 8001fc4:	4803      	ldr	r0, [pc, #12]	; (8001fd4 <UartSendWoRxCtrl+0x1c>)
 8001fc6:	f002 fc16 	bl	80047f6 <HAL_UART_Transmit_IT>
	*Uart1isBusyPtr = 1;
 8001fca:	4b03      	ldr	r3, [pc, #12]	; (8001fd8 <UartSendWoRxCtrl+0x20>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	2201      	movs	r2, #1
 8001fd0:	701a      	strb	r2, [r3, #0]
}
 8001fd2:	bd10      	pop	{r4, pc}
 8001fd4:	2000177c 	.word	0x2000177c
 8001fd8:	20000004 	.word	0x20000004

08001fdc <Temperature100ToString>:

void Temperature100ToString(int32_t temp, char *StringBuf)
{
 8001fdc:	b508      	push	{r3, lr}
 8001fde:	4603      	mov	r3, r0
 8001fe0:	4608      	mov	r0, r1
	int16_t Decimal;
	uint16_t Fractial;

	Decimal = temp/100;
 8001fe2:	4a10      	ldr	r2, [pc, #64]	; (8002024 <Temperature100ToString+0x48>)
 8001fe4:	fb82 1203 	smull	r1, r2, r2, r3
 8001fe8:	ea4f 7ce3 	mov.w	ip, r3, asr #31
 8001fec:	ebcc 1c62 	rsb	ip, ip, r2, asr #5
 8001ff0:	fa0f f28c 	sxth.w	r2, ip

	if(temp>=0)
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	db0c      	blt.n	8002012 <Temperature100ToString+0x36>
	{
		Fractial = temp - Decimal * 100;
 8001ff8:	ebcc 214c 	rsb	r1, ip, ip, lsl #9
 8001ffc:	eb0c 0181 	add.w	r1, ip, r1, lsl #2
 8002000:	ebcc 0cc1 	rsb	ip, ip, r1, lsl #3
 8002004:	eb03 038c 	add.w	r3, r3, ip, lsl #2
 8002008:	b29b      	uxth	r3, r3
	else
	{
		Fractial = (temp * -1) - ((Decimal * -1) * 100);
	}

	sprintf(StringBuf, "%.2i.%.2u", Decimal, Fractial);
 800200a:	4907      	ldr	r1, [pc, #28]	; (8002028 <Temperature100ToString+0x4c>)
 800200c:	f005 fa5c 	bl	80074c8 <siprintf>
}
 8002010:	bd08      	pop	{r3, pc}
		Fractial = (temp * -1) - ((Decimal * -1) * 100);
 8002012:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8002016:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 800201a:	ebc3 038c 	rsb	r3, r3, ip, lsl #2
 800201e:	b29b      	uxth	r3, r3
 8002020:	e7f3      	b.n	800200a <Temperature100ToString+0x2e>
 8002022:	bf00      	nop
 8002024:	51eb851f 	.word	0x51eb851f
 8002028:	0800b3f8 	.word	0x0800b3f8

0800202c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800202c:	480c      	ldr	r0, [pc, #48]	; (8002060 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800202e:	490d      	ldr	r1, [pc, #52]	; (8002064 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002030:	4a0d      	ldr	r2, [pc, #52]	; (8002068 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002032:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002034:	e002      	b.n	800203c <LoopCopyDataInit>

08002036 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002036:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002038:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800203a:	3304      	adds	r3, #4

0800203c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800203c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800203e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002040:	d3f9      	bcc.n	8002036 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002042:	4a0a      	ldr	r2, [pc, #40]	; (800206c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002044:	4c0a      	ldr	r4, [pc, #40]	; (8002070 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002046:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002048:	e001      	b.n	800204e <LoopFillZerobss>

0800204a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800204a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800204c:	3204      	adds	r2, #4

0800204e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800204e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002050:	d3fb      	bcc.n	800204a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002052:	f7ff fe63 	bl	8001d1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002056:	f004 fd9d 	bl	8006b94 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800205a:	f7ff fae5 	bl	8001628 <main>
  bx lr
 800205e:	4770      	bx	lr
  ldr r0, =_sdata
 8002060:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002064:	20000364 	.word	0x20000364
  ldr r2, =_sidata
 8002068:	0800b950 	.word	0x0800b950
  ldr r2, =_sbss
 800206c:	20000368 	.word	0x20000368
  ldr r4, =_ebss
 8002070:	2000260c 	.word	0x2000260c

08002074 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002074:	e7fe      	b.n	8002074 <ADC1_2_IRQHandler>
	...

08002078 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002078:	b510      	push	{r4, lr}
 800207a:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800207c:	4b0e      	ldr	r3, [pc, #56]	; (80020b8 <HAL_InitTick+0x40>)
 800207e:	7818      	ldrb	r0, [r3, #0]
 8002080:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002084:	fbb3 f3f0 	udiv	r3, r3, r0
 8002088:	4a0c      	ldr	r2, [pc, #48]	; (80020bc <HAL_InitTick+0x44>)
 800208a:	6810      	ldr	r0, [r2, #0]
 800208c:	fbb0 f0f3 	udiv	r0, r0, r3
 8002090:	f000 f892 	bl	80021b8 <HAL_SYSTICK_Config>
 8002094:	b968      	cbnz	r0, 80020b2 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002096:	2c0f      	cmp	r4, #15
 8002098:	d901      	bls.n	800209e <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800209a:	2001      	movs	r0, #1
 800209c:	e00a      	b.n	80020b4 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800209e:	2200      	movs	r2, #0
 80020a0:	4621      	mov	r1, r4
 80020a2:	f04f 30ff 	mov.w	r0, #4294967295
 80020a6:	f000 f843 	bl	8002130 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020aa:	4b05      	ldr	r3, [pc, #20]	; (80020c0 <HAL_InitTick+0x48>)
 80020ac:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80020ae:	2000      	movs	r0, #0
 80020b0:	e000      	b.n	80020b4 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 80020b2:	2001      	movs	r0, #1
}
 80020b4:	bd10      	pop	{r4, pc}
 80020b6:	bf00      	nop
 80020b8:	20000010 	.word	0x20000010
 80020bc:	2000000c 	.word	0x2000000c
 80020c0:	20000014 	.word	0x20000014

080020c4 <HAL_Init>:
{
 80020c4:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020c6:	4a07      	ldr	r2, [pc, #28]	; (80020e4 <HAL_Init+0x20>)
 80020c8:	6813      	ldr	r3, [r2, #0]
 80020ca:	f043 0310 	orr.w	r3, r3, #16
 80020ce:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020d0:	2003      	movs	r0, #3
 80020d2:	f000 f81b 	bl	800210c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80020d6:	200f      	movs	r0, #15
 80020d8:	f7ff ffce 	bl	8002078 <HAL_InitTick>
  HAL_MspInit();
 80020dc:	f7ff fd88 	bl	8001bf0 <HAL_MspInit>
}
 80020e0:	2000      	movs	r0, #0
 80020e2:	bd08      	pop	{r3, pc}
 80020e4:	40022000 	.word	0x40022000

080020e8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80020e8:	4a03      	ldr	r2, [pc, #12]	; (80020f8 <HAL_IncTick+0x10>)
 80020ea:	6811      	ldr	r1, [r2, #0]
 80020ec:	4b03      	ldr	r3, [pc, #12]	; (80020fc <HAL_IncTick+0x14>)
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	440b      	add	r3, r1
 80020f2:	6013      	str	r3, [r2, #0]
}
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	20001804 	.word	0x20001804
 80020fc:	20000010 	.word	0x20000010

08002100 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002100:	4b01      	ldr	r3, [pc, #4]	; (8002108 <HAL_GetTick+0x8>)
 8002102:	6818      	ldr	r0, [r3, #0]
}
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	20001804 	.word	0x20001804

0800210c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800210c:	4907      	ldr	r1, [pc, #28]	; (800212c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800210e:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002110:	0203      	lsls	r3, r0, #8
 8002112:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002116:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800211a:	0412      	lsls	r2, r2, #16
 800211c:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800211e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002120:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002124:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002128:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800212a:	4770      	bx	lr
 800212c:	e000ed00 	.word	0xe000ed00

08002130 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002130:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002132:	4b18      	ldr	r3, [pc, #96]	; (8002194 <HAL_NVIC_SetPriority+0x64>)
 8002134:	68db      	ldr	r3, [r3, #12]
 8002136:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800213a:	f1c3 0c07 	rsb	ip, r3, #7
 800213e:	f1bc 0f04 	cmp.w	ip, #4
 8002142:	bf28      	it	cs
 8002144:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002148:	f103 0e04 	add.w	lr, r3, #4
 800214c:	f1be 0f06 	cmp.w	lr, #6
 8002150:	bf8c      	ite	hi
 8002152:	3b03      	subhi	r3, #3
 8002154:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002156:	f04f 3eff 	mov.w	lr, #4294967295
 800215a:	fa0e fc0c 	lsl.w	ip, lr, ip
 800215e:	ea21 010c 	bic.w	r1, r1, ip
 8002162:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002164:	fa0e f303 	lsl.w	r3, lr, r3
 8002168:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800216c:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 800216e:	2800      	cmp	r0, #0
 8002170:	db09      	blt.n	8002186 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002172:	0109      	lsls	r1, r1, #4
 8002174:	b2c9      	uxtb	r1, r1
 8002176:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800217a:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800217e:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002182:	f85d fb04 	ldr.w	pc, [sp], #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002186:	f000 000f 	and.w	r0, r0, #15
 800218a:	0109      	lsls	r1, r1, #4
 800218c:	b2c9      	uxtb	r1, r1
 800218e:	4b02      	ldr	r3, [pc, #8]	; (8002198 <HAL_NVIC_SetPriority+0x68>)
 8002190:	5419      	strb	r1, [r3, r0]
 8002192:	e7f6      	b.n	8002182 <HAL_NVIC_SetPriority+0x52>
 8002194:	e000ed00 	.word	0xe000ed00
 8002198:	e000ed14 	.word	0xe000ed14

0800219c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800219c:	2800      	cmp	r0, #0
 800219e:	db08      	blt.n	80021b2 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021a0:	0942      	lsrs	r2, r0, #5
 80021a2:	f000 001f 	and.w	r0, r0, #31
 80021a6:	2301      	movs	r3, #1
 80021a8:	fa03 f000 	lsl.w	r0, r3, r0
 80021ac:	4b01      	ldr	r3, [pc, #4]	; (80021b4 <HAL_NVIC_EnableIRQ+0x18>)
 80021ae:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80021b2:	4770      	bx	lr
 80021b4:	e000e100 	.word	0xe000e100

080021b8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021b8:	3801      	subs	r0, #1
 80021ba:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80021be:	d20b      	bcs.n	80021d8 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021c0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80021c4:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021c6:	4a05      	ldr	r2, [pc, #20]	; (80021dc <HAL_SYSTICK_Config+0x24>)
 80021c8:	21f0      	movs	r1, #240	; 0xf0
 80021ca:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021ce:	2000      	movs	r0, #0
 80021d0:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021d2:	2207      	movs	r2, #7
 80021d4:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021d6:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80021d8:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80021da:	4770      	bx	lr
 80021dc:	e000ed00 	.word	0xe000ed00

080021e0 <HAL_DMA_Abort>:
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021e0:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	d006      	beq.n	80021f6 <HAL_DMA_Abort+0x16>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021e8:	2304      	movs	r3, #4
 80021ea:	6383      	str	r3, [r0, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021ec:	2300      	movs	r3, #0
 80021ee:	f880 3020 	strb.w	r3, [r0, #32]
    
    return HAL_ERROR;
 80021f2:	2001      	movs	r0, #1
 80021f4:	4770      	bx	lr
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021f6:	6802      	ldr	r2, [r0, #0]
 80021f8:	6813      	ldr	r3, [r2, #0]
 80021fa:	f023 030e 	bic.w	r3, r3, #14
 80021fe:	6013      	str	r3, [r2, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002200:	6802      	ldr	r2, [r0, #0]
 8002202:	6813      	ldr	r3, [r2, #0]
 8002204:	f023 0301 	bic.w	r3, r3, #1
 8002208:	6013      	str	r3, [r2, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800220a:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800220c:	2201      	movs	r2, #1
 800220e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002210:	fa02 f303 	lsl.w	r3, r2, r3
 8002214:	604b      	str	r3, [r1, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002216:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800221a:	2300      	movs	r3, #0
 800221c:	f880 3020 	strb.w	r3, [r0, #32]
  
  return status; 
 8002220:	4618      	mov	r0, r3
}
 8002222:	4770      	bx	lr

08002224 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002224:	b508      	push	{r3, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002226:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800222a:	2b02      	cmp	r3, #2
 800222c:	d003      	beq.n	8002236 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800222e:	2304      	movs	r3, #4
 8002230:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 8002232:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 8002234:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002236:	6802      	ldr	r2, [r0, #0]
 8002238:	6813      	ldr	r3, [r2, #0]
 800223a:	f023 030e 	bic.w	r3, r3, #14
 800223e:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8002240:	6802      	ldr	r2, [r0, #0]
 8002242:	6813      	ldr	r3, [r2, #0]
 8002244:	f023 0301 	bic.w	r3, r3, #1
 8002248:	6013      	str	r3, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800224a:	6803      	ldr	r3, [r0, #0]
 800224c:	4a18      	ldr	r2, [pc, #96]	; (80022b0 <HAL_DMA_Abort_IT+0x8c>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d013      	beq.n	800227a <HAL_DMA_Abort_IT+0x56>
 8002252:	3214      	adds	r2, #20
 8002254:	4293      	cmp	r3, r2
 8002256:	d01e      	beq.n	8002296 <HAL_DMA_Abort_IT+0x72>
 8002258:	3214      	adds	r2, #20
 800225a:	4293      	cmp	r3, r2
 800225c:	d01d      	beq.n	800229a <HAL_DMA_Abort_IT+0x76>
 800225e:	3214      	adds	r2, #20
 8002260:	4293      	cmp	r3, r2
 8002262:	d01d      	beq.n	80022a0 <HAL_DMA_Abort_IT+0x7c>
 8002264:	3214      	adds	r2, #20
 8002266:	4293      	cmp	r3, r2
 8002268:	d01d      	beq.n	80022a6 <HAL_DMA_Abort_IT+0x82>
 800226a:	3214      	adds	r2, #20
 800226c:	4293      	cmp	r3, r2
 800226e:	bf0c      	ite	eq
 8002270:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8002274:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 8002278:	e000      	b.n	800227c <HAL_DMA_Abort_IT+0x58>
 800227a:	2301      	movs	r3, #1
 800227c:	4a0d      	ldr	r2, [pc, #52]	; (80022b4 <HAL_DMA_Abort_IT+0x90>)
 800227e:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8002280:	2301      	movs	r3, #1
 8002282:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8002286:	2300      	movs	r3, #0
 8002288:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 800228c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800228e:	b16b      	cbz	r3, 80022ac <HAL_DMA_Abort_IT+0x88>
      hdma->XferAbortCallback(hdma);
 8002290:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8002292:	2000      	movs	r0, #0
 8002294:	e7ce      	b.n	8002234 <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002296:	2310      	movs	r3, #16
 8002298:	e7f0      	b.n	800227c <HAL_DMA_Abort_IT+0x58>
 800229a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800229e:	e7ed      	b.n	800227c <HAL_DMA_Abort_IT+0x58>
 80022a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022a4:	e7ea      	b.n	800227c <HAL_DMA_Abort_IT+0x58>
 80022a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022aa:	e7e7      	b.n	800227c <HAL_DMA_Abort_IT+0x58>
  HAL_StatusTypeDef status = HAL_OK;
 80022ac:	2000      	movs	r0, #0
 80022ae:	e7c1      	b.n	8002234 <HAL_DMA_Abort_IT+0x10>
 80022b0:	40020008 	.word	0x40020008
 80022b4:	40020000 	.word	0x40020000

080022b8 <FLASH_SetErrorCode>:
  uint32_t flags = 0U;
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80022b8:	4b14      	ldr	r3, [pc, #80]	; (800230c <FLASH_SetErrorCode+0x54>)
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	f013 0310 	ands.w	r3, r3, #16
 80022c0:	d005      	beq.n	80022ce <FLASH_SetErrorCode+0x16>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80022c2:	4a13      	ldr	r2, [pc, #76]	; (8002310 <FLASH_SetErrorCode+0x58>)
 80022c4:	69d3      	ldr	r3, [r2, #28]
 80022c6:	f043 0302 	orr.w	r3, r3, #2
 80022ca:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 80022cc:	2310      	movs	r3, #16
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80022ce:	4a0f      	ldr	r2, [pc, #60]	; (800230c <FLASH_SetErrorCode+0x54>)
 80022d0:	68d2      	ldr	r2, [r2, #12]
 80022d2:	f012 0f04 	tst.w	r2, #4
 80022d6:	d006      	beq.n	80022e6 <FLASH_SetErrorCode+0x2e>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80022d8:	490d      	ldr	r1, [pc, #52]	; (8002310 <FLASH_SetErrorCode+0x58>)
 80022da:	69ca      	ldr	r2, [r1, #28]
 80022dc:	f042 0201 	orr.w	r2, r2, #1
 80022e0:	61ca      	str	r2, [r1, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80022e2:	f043 0304 	orr.w	r3, r3, #4
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80022e6:	4a09      	ldr	r2, [pc, #36]	; (800230c <FLASH_SetErrorCode+0x54>)
 80022e8:	69d2      	ldr	r2, [r2, #28]
 80022ea:	f012 0f01 	tst.w	r2, #1
 80022ee:	d009      	beq.n	8002304 <FLASH_SetErrorCode+0x4c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80022f0:	4907      	ldr	r1, [pc, #28]	; (8002310 <FLASH_SetErrorCode+0x58>)
 80022f2:	69ca      	ldr	r2, [r1, #28]
 80022f4:	f042 0204 	orr.w	r2, r2, #4
 80022f8:	61ca      	str	r2, [r1, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80022fa:	4904      	ldr	r1, [pc, #16]	; (800230c <FLASH_SetErrorCode+0x54>)
 80022fc:	69ca      	ldr	r2, [r1, #28]
 80022fe:	f022 0201 	bic.w	r2, r2, #1
 8002302:	61ca      	str	r2, [r1, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002304:	4a01      	ldr	r2, [pc, #4]	; (800230c <FLASH_SetErrorCode+0x54>)
 8002306:	60d3      	str	r3, [r2, #12]
}  
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	40022000 	.word	0x40022000
 8002310:	20001808 	.word	0x20001808

08002314 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002314:	4b08      	ldr	r3, [pc, #32]	; (8002338 <HAL_FLASH_Unlock+0x24>)
 8002316:	691b      	ldr	r3, [r3, #16]
 8002318:	f013 0f80 	tst.w	r3, #128	; 0x80
 800231c:	d009      	beq.n	8002332 <HAL_FLASH_Unlock+0x1e>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800231e:	4b06      	ldr	r3, [pc, #24]	; (8002338 <HAL_FLASH_Unlock+0x24>)
 8002320:	4a06      	ldr	r2, [pc, #24]	; (800233c <HAL_FLASH_Unlock+0x28>)
 8002322:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002324:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8002328:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800232a:	6918      	ldr	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
 800232c:	f3c0 10c0 	ubfx	r0, r0, #7, #1
 8002330:	4770      	bx	lr
 8002332:	2000      	movs	r0, #0
}
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop
 8002338:	40022000 	.word	0x40022000
 800233c:	45670123 	.word	0x45670123

08002340 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002340:	4a03      	ldr	r2, [pc, #12]	; (8002350 <HAL_FLASH_Lock+0x10>)
 8002342:	6913      	ldr	r3, [r2, #16]
 8002344:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002348:	6113      	str	r3, [r2, #16]
}
 800234a:	2000      	movs	r0, #0
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop
 8002350:	40022000 	.word	0x40022000

08002354 <HAL_FLASH_GetError>:
   return pFlash.ErrorCode;
 8002354:	4b01      	ldr	r3, [pc, #4]	; (800235c <HAL_FLASH_GetError+0x8>)
 8002356:	69d8      	ldr	r0, [r3, #28]
}
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	20001808 	.word	0x20001808

08002360 <FLASH_WaitForLastOperation>:
{
 8002360:	b570      	push	{r4, r5, r6, lr}
 8002362:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002364:	f7ff fecc 	bl	8002100 <HAL_GetTick>
 8002368:	4606      	mov	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800236a:	4d17      	ldr	r5, [pc, #92]	; (80023c8 <FLASH_WaitForLastOperation+0x68>)
 800236c:	68eb      	ldr	r3, [r5, #12]
 800236e:	f013 0f01 	tst.w	r3, #1
 8002372:	d00a      	beq.n	800238a <FLASH_WaitForLastOperation+0x2a>
    if (Timeout != HAL_MAX_DELAY)
 8002374:	f1b4 3fff 	cmp.w	r4, #4294967295
 8002378:	d0f8      	beq.n	800236c <FLASH_WaitForLastOperation+0xc>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800237a:	b31c      	cbz	r4, 80023c4 <FLASH_WaitForLastOperation+0x64>
 800237c:	f7ff fec0 	bl	8002100 <HAL_GetTick>
 8002380:	1b80      	subs	r0, r0, r6
 8002382:	42a0      	cmp	r0, r4
 8002384:	d9f2      	bls.n	800236c <FLASH_WaitForLastOperation+0xc>
        return HAL_TIMEOUT;
 8002386:	2003      	movs	r0, #3
 8002388:	e01b      	b.n	80023c2 <FLASH_WaitForLastOperation+0x62>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800238a:	4b0f      	ldr	r3, [pc, #60]	; (80023c8 <FLASH_WaitForLastOperation+0x68>)
 800238c:	68db      	ldr	r3, [r3, #12]
 800238e:	f013 0f20 	tst.w	r3, #32
 8002392:	d002      	beq.n	800239a <FLASH_WaitForLastOperation+0x3a>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002394:	4b0c      	ldr	r3, [pc, #48]	; (80023c8 <FLASH_WaitForLastOperation+0x68>)
 8002396:	2220      	movs	r2, #32
 8002398:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800239a:	4b0b      	ldr	r3, [pc, #44]	; (80023c8 <FLASH_WaitForLastOperation+0x68>)
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	f013 0f10 	tst.w	r3, #16
 80023a2:	d10b      	bne.n	80023bc <FLASH_WaitForLastOperation+0x5c>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80023a4:	4b08      	ldr	r3, [pc, #32]	; (80023c8 <FLASH_WaitForLastOperation+0x68>)
 80023a6:	69db      	ldr	r3, [r3, #28]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80023a8:	f013 0f01 	tst.w	r3, #1
 80023ac:	d106      	bne.n	80023bc <FLASH_WaitForLastOperation+0x5c>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80023ae:	4b06      	ldr	r3, [pc, #24]	; (80023c8 <FLASH_WaitForLastOperation+0x68>)
 80023b0:	68db      	ldr	r3, [r3, #12]
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80023b2:	f013 0f04 	tst.w	r3, #4
 80023b6:	d101      	bne.n	80023bc <FLASH_WaitForLastOperation+0x5c>
  return HAL_OK;
 80023b8:	2000      	movs	r0, #0
 80023ba:	e002      	b.n	80023c2 <FLASH_WaitForLastOperation+0x62>
    FLASH_SetErrorCode();
 80023bc:	f7ff ff7c 	bl	80022b8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80023c0:	2001      	movs	r0, #1
}
 80023c2:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_TIMEOUT;
 80023c4:	2003      	movs	r0, #3
 80023c6:	e7fc      	b.n	80023c2 <FLASH_WaitForLastOperation+0x62>
 80023c8:	40022000 	.word	0x40022000

080023cc <HAL_FLASH_Program>:
{
 80023cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023d0:	461f      	mov	r7, r3
  __HAL_LOCK(&pFlash);
 80023d2:	4b26      	ldr	r3, [pc, #152]	; (800246c <HAL_FLASH_Program+0xa0>)
 80023d4:	7e1b      	ldrb	r3, [r3, #24]
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d045      	beq.n	8002466 <HAL_FLASH_Program+0x9a>
 80023da:	4604      	mov	r4, r0
 80023dc:	460d      	mov	r5, r1
 80023de:	4690      	mov	r8, r2
 80023e0:	4b22      	ldr	r3, [pc, #136]	; (800246c <HAL_FLASH_Program+0xa0>)
 80023e2:	2201      	movs	r2, #1
 80023e4:	761a      	strb	r2, [r3, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80023e6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80023ea:	f7ff ffb9 	bl	8002360 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 80023ee:	4603      	mov	r3, r0
 80023f0:	bb80      	cbnz	r0, 8002454 <HAL_FLASH_Program+0x88>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80023f2:	2c01      	cmp	r4, #1
 80023f4:	d034      	beq.n	8002460 <HAL_FLASH_Program+0x94>
      nbiterations = 4U;
 80023f6:	2c02      	cmp	r4, #2
 80023f8:	bf0c      	ite	eq
 80023fa:	f04f 0902 	moveq.w	r9, #2
 80023fe:	f04f 0904 	movne.w	r9, #4
    for (index = 0U; index < nbiterations; index++)
 8002402:	eb05 0949 	add.w	r9, r5, r9, lsl #1
      nbiterations = 4U;
 8002406:	2400      	movs	r4, #0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002408:	f8df b060 	ldr.w	fp, [pc, #96]	; 800246c <HAL_FLASH_Program+0xa0>
 800240c:	46a2      	mov	sl, r4
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800240e:	4e18      	ldr	r6, [pc, #96]	; (8002470 <HAL_FLASH_Program+0xa4>)
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8002410:	f1c4 0120 	rsb	r1, r4, #32
 8002414:	f1a4 0220 	sub.w	r2, r4, #32
 8002418:	fa28 f304 	lsr.w	r3, r8, r4
 800241c:	fa07 f101 	lsl.w	r1, r7, r1
 8002420:	430b      	orrs	r3, r1
 8002422:	fa27 f202 	lsr.w	r2, r7, r2
 8002426:	4313      	orrs	r3, r2
 8002428:	b29b      	uxth	r3, r3
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800242a:	f8cb a01c 	str.w	sl, [fp, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800242e:	6932      	ldr	r2, [r6, #16]
 8002430:	f042 0201 	orr.w	r2, r2, #1
 8002434:	6132      	str	r2, [r6, #16]
  *(__IO uint16_t*)Address = Data;
 8002436:	802b      	strh	r3, [r5, #0]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002438:	f24c 3050 	movw	r0, #50000	; 0xc350
 800243c:	f7ff ff90 	bl	8002360 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8002440:	6933      	ldr	r3, [r6, #16]
 8002442:	f023 0301 	bic.w	r3, r3, #1
 8002446:	6133      	str	r3, [r6, #16]
      if (status != HAL_OK)
 8002448:	4603      	mov	r3, r0
 800244a:	b918      	cbnz	r0, 8002454 <HAL_FLASH_Program+0x88>
    for (index = 0U; index < nbiterations; index++)
 800244c:	3410      	adds	r4, #16
 800244e:	3502      	adds	r5, #2
 8002450:	454d      	cmp	r5, r9
 8002452:	d1dd      	bne.n	8002410 <HAL_FLASH_Program+0x44>
  __HAL_UNLOCK(&pFlash);
 8002454:	4a05      	ldr	r2, [pc, #20]	; (800246c <HAL_FLASH_Program+0xa0>)
 8002456:	2100      	movs	r1, #0
 8002458:	7611      	strb	r1, [r2, #24]
}
 800245a:	4618      	mov	r0, r3
 800245c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      nbiterations = 1U;
 8002460:	f04f 0901 	mov.w	r9, #1
 8002464:	e7cd      	b.n	8002402 <HAL_FLASH_Program+0x36>
  __HAL_LOCK(&pFlash);
 8002466:	2302      	movs	r3, #2
 8002468:	e7f7      	b.n	800245a <HAL_FLASH_Program+0x8e>
 800246a:	bf00      	nop
 800246c:	20001808 	.word	0x20001808
 8002470:	40022000 	.word	0x40022000

08002474 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002474:	4b06      	ldr	r3, [pc, #24]	; (8002490 <FLASH_PageErase+0x1c>)
 8002476:	2200      	movs	r2, #0
 8002478:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800247a:	4b06      	ldr	r3, [pc, #24]	; (8002494 <FLASH_PageErase+0x20>)
 800247c:	691a      	ldr	r2, [r3, #16]
 800247e:	f042 0202 	orr.w	r2, r2, #2
 8002482:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8002484:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002486:	691a      	ldr	r2, [r3, #16]
 8002488:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800248c:	611a      	str	r2, [r3, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800248e:	4770      	bx	lr
 8002490:	20001808 	.word	0x20001808
 8002494:	40022000 	.word	0x40022000

08002498 <HAL_FLASHEx_Erase>:
  __HAL_LOCK(&pFlash);
 8002498:	4b2f      	ldr	r3, [pc, #188]	; (8002558 <HAL_FLASHEx_Erase+0xc0>)
 800249a:	7e1b      	ldrb	r3, [r3, #24]
 800249c:	2b01      	cmp	r3, #1
 800249e:	d058      	beq.n	8002552 <HAL_FLASHEx_Erase+0xba>
{
 80024a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80024a4:	4605      	mov	r5, r0
 80024a6:	460f      	mov	r7, r1
  __HAL_LOCK(&pFlash);
 80024a8:	4b2b      	ldr	r3, [pc, #172]	; (8002558 <HAL_FLASHEx_Erase+0xc0>)
 80024aa:	2201      	movs	r2, #1
 80024ac:	761a      	strb	r2, [r3, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80024ae:	6803      	ldr	r3, [r0, #0]
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d026      	beq.n	8002502 <HAL_FLASHEx_Erase+0x6a>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80024b4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80024b8:	f7ff ff52 	bl	8002360 <FLASH_WaitForLastOperation>
 80024bc:	2800      	cmp	r0, #0
 80024be:	d13f      	bne.n	8002540 <HAL_FLASHEx_Erase+0xa8>
        *PageError = 0xFFFFFFFFU;
 80024c0:	f04f 33ff 	mov.w	r3, #4294967295
 80024c4:	603b      	str	r3, [r7, #0]
        for(address = pEraseInit->PageAddress;
 80024c6:	68ac      	ldr	r4, [r5, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80024c8:	68eb      	ldr	r3, [r5, #12]
 80024ca:	eb04 2383 	add.w	r3, r4, r3, lsl #10
        for(address = pEraseInit->PageAddress;
 80024ce:	429c      	cmp	r4, r3
 80024d0:	d23d      	bcs.n	800254e <HAL_FLASHEx_Erase+0xb6>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80024d2:	f24c 3850 	movw	r8, #50000	; 0xc350
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80024d6:	4e21      	ldr	r6, [pc, #132]	; (800255c <HAL_FLASHEx_Erase+0xc4>)
          FLASH_PageErase(address);
 80024d8:	4620      	mov	r0, r4
 80024da:	f7ff ffcb 	bl	8002474 <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80024de:	4640      	mov	r0, r8
 80024e0:	f7ff ff3e 	bl	8002360 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80024e4:	6933      	ldr	r3, [r6, #16]
 80024e6:	f023 0302 	bic.w	r3, r3, #2
 80024ea:	6133      	str	r3, [r6, #16]
          if (status != HAL_OK)
 80024ec:	4601      	mov	r1, r0
 80024ee:	bb28      	cbnz	r0, 800253c <HAL_FLASHEx_Erase+0xa4>
            address += FLASH_PAGE_SIZE)
 80024f0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80024f4:	68ea      	ldr	r2, [r5, #12]
 80024f6:	68ab      	ldr	r3, [r5, #8]
 80024f8:	eb03 2382 	add.w	r3, r3, r2, lsl #10
        for(address = pEraseInit->PageAddress;
 80024fc:	42a3      	cmp	r3, r4
 80024fe:	d8eb      	bhi.n	80024d8 <HAL_FLASHEx_Erase+0x40>
 8002500:	e01f      	b.n	8002542 <HAL_FLASHEx_Erase+0xaa>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002502:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002506:	f7ff ff2b 	bl	8002360 <FLASH_WaitForLastOperation>
 800250a:	b108      	cbz	r0, 8002510 <HAL_FLASHEx_Erase+0x78>
  HAL_StatusTypeDef status = HAL_ERROR;
 800250c:	2101      	movs	r1, #1
 800250e:	e018      	b.n	8002542 <HAL_FLASHEx_Erase+0xaa>
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002510:	4b11      	ldr	r3, [pc, #68]	; (8002558 <HAL_FLASHEx_Erase+0xc0>)
 8002512:	2200      	movs	r2, #0
 8002514:	61da      	str	r2, [r3, #28]
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8002516:	4c11      	ldr	r4, [pc, #68]	; (800255c <HAL_FLASHEx_Erase+0xc4>)
 8002518:	6923      	ldr	r3, [r4, #16]
 800251a:	f043 0304 	orr.w	r3, r3, #4
 800251e:	6123      	str	r3, [r4, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002520:	6923      	ldr	r3, [r4, #16]
 8002522:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002526:	6123      	str	r3, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002528:	f24c 3050 	movw	r0, #50000	; 0xc350
 800252c:	f7ff ff18 	bl	8002360 <FLASH_WaitForLastOperation>
 8002530:	4601      	mov	r1, r0
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8002532:	6923      	ldr	r3, [r4, #16]
 8002534:	f023 0304 	bic.w	r3, r3, #4
 8002538:	6123      	str	r3, [r4, #16]
 800253a:	e002      	b.n	8002542 <HAL_FLASHEx_Erase+0xaa>
            *PageError = address;
 800253c:	603c      	str	r4, [r7, #0]
            break;
 800253e:	e000      	b.n	8002542 <HAL_FLASHEx_Erase+0xaa>
  HAL_StatusTypeDef status = HAL_ERROR;
 8002540:	2101      	movs	r1, #1
  __HAL_UNLOCK(&pFlash);
 8002542:	4b05      	ldr	r3, [pc, #20]	; (8002558 <HAL_FLASHEx_Erase+0xc0>)
 8002544:	2200      	movs	r2, #0
 8002546:	761a      	strb	r2, [r3, #24]
}
 8002548:	4608      	mov	r0, r1
 800254a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  HAL_StatusTypeDef status = HAL_ERROR;
 800254e:	2101      	movs	r1, #1
 8002550:	e7f7      	b.n	8002542 <HAL_FLASHEx_Erase+0xaa>
  __HAL_LOCK(&pFlash);
 8002552:	2102      	movs	r1, #2
}
 8002554:	4608      	mov	r0, r1
 8002556:	4770      	bx	lr
 8002558:	20001808 	.word	0x20001808
 800255c:	40022000 	.word	0x40022000

08002560 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002564:	b083      	sub	sp, #12
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002566:	f8d1 9000 	ldr.w	r9, [r1]
 800256a:	f1b9 0f00 	cmp.w	r9, #0
 800256e:	f000 811f 	beq.w	80027b0 <HAL_GPIO_Init+0x250>
 8002572:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8002574:	4613      	mov	r3, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002576:	4e90      	ldr	r6, [pc, #576]	; (80027b8 <HAL_GPIO_Init+0x258>)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002578:	4c90      	ldr	r4, [pc, #576]	; (80027bc <HAL_GPIO_Init+0x25c>)
      switch (GPIO_Init->Mode)
 800257a:	4d91      	ldr	r5, [pc, #580]	; (80027c0 <HAL_GPIO_Init+0x260>)
 800257c:	f8df e244 	ldr.w	lr, [pc, #580]	; 80027c4 <HAL_GPIO_Init+0x264>
 8002580:	4694      	mov	ip, r2
 8002582:	e0ba      	b.n	80026fa <HAL_GPIO_Init+0x19a>
 8002584:	f04f 0c00 	mov.w	ip, #0
 8002588:	e025      	b.n	80025d6 <HAL_GPIO_Init+0x76>
 800258a:	45a9      	cmp	r9, r5
 800258c:	d00f      	beq.n	80025ae <HAL_GPIO_Init+0x4e>
 800258e:	d906      	bls.n	800259e <HAL_GPIO_Init+0x3e>
 8002590:	45f1      	cmp	r9, lr
 8002592:	d00c      	beq.n	80025ae <HAL_GPIO_Init+0x4e>
 8002594:	f8df a230 	ldr.w	sl, [pc, #560]	; 80027c8 <HAL_GPIO_Init+0x268>
 8002598:	45d1      	cmp	r9, sl
 800259a:	d008      	beq.n	80025ae <HAL_GPIO_Init+0x4e>
 800259c:	e01b      	b.n	80025d6 <HAL_GPIO_Init+0x76>
 800259e:	f8df a22c 	ldr.w	sl, [pc, #556]	; 80027cc <HAL_GPIO_Init+0x26c>
 80025a2:	45d1      	cmp	r9, sl
 80025a4:	d003      	beq.n	80025ae <HAL_GPIO_Init+0x4e>
 80025a6:	f50a 2a70 	add.w	sl, sl, #983040	; 0xf0000
 80025aa:	45d1      	cmp	r9, sl
 80025ac:	d10f      	bne.n	80025ce <HAL_GPIO_Init+0x6e>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80025ae:	f8d1 c008 	ldr.w	ip, [r1, #8]
 80025b2:	f1bc 0f00 	cmp.w	ip, #0
 80025b6:	f000 80ef 	beq.w	8002798 <HAL_GPIO_Init+0x238>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80025ba:	f1bc 0f01 	cmp.w	ip, #1
            GPIOx->BSRR = ioposition;
 80025be:	bf0c      	ite	eq
 80025c0:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 80025c4:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80025c8:	f04f 0c08 	mov.w	ip, #8
 80025cc:	e003      	b.n	80025d6 <HAL_GPIO_Init+0x76>
      switch (GPIO_Init->Mode)
 80025ce:	f5aa 1a80 	sub.w	sl, sl, #1048576	; 0x100000
 80025d2:	45d1      	cmp	r9, sl
 80025d4:	d0eb      	beq.n	80025ae <HAL_GPIO_Init+0x4e>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80025d6:	2fff      	cmp	r7, #255	; 0xff
 80025d8:	bf99      	ittee	ls
 80025da:	4681      	movls	r9, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80025dc:	4692      	movls	sl, r2
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80025de:	f100 0904 	addhi.w	r9, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80025e2:	f1a2 0a20 	subhi.w	sl, r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80025e6:	f8d9 8000 	ldr.w	r8, [r9]
 80025ea:	f04f 0b0f 	mov.w	fp, #15
 80025ee:	fa0b fb0a 	lsl.w	fp, fp, sl
 80025f2:	ea28 080b 	bic.w	r8, r8, fp
 80025f6:	fa0c fa0a 	lsl.w	sl, ip, sl
 80025fa:	ea48 080a 	orr.w	r8, r8, sl
 80025fe:	f8c9 8000 	str.w	r8, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002602:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8002606:	f018 5f80 	tst.w	r8, #268435456	; 0x10000000
 800260a:	d06f      	beq.n	80026ec <HAL_GPIO_Init+0x18c>
        __HAL_RCC_AFIO_CLK_ENABLE();
 800260c:	f8d6 8018 	ldr.w	r8, [r6, #24]
 8002610:	f048 0801 	orr.w	r8, r8, #1
 8002614:	f8c6 8018 	str.w	r8, [r6, #24]
 8002618:	f8d6 8018 	ldr.w	r8, [r6, #24]
 800261c:	f008 0801 	and.w	r8, r8, #1
 8002620:	f8cd 8004 	str.w	r8, [sp, #4]
 8002624:	f8dd 8004 	ldr.w	r8, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8002628:	f023 0803 	bic.w	r8, r3, #3
 800262c:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8002630:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
 8002634:	f8d8 a008 	ldr.w	sl, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002638:	f003 0903 	and.w	r9, r3, #3
 800263c:	ea4f 0b89 	mov.w	fp, r9, lsl #2
 8002640:	f04f 090f 	mov.w	r9, #15
 8002644:	fa09 f90b 	lsl.w	r9, r9, fp
 8002648:	ea2a 0a09 	bic.w	sl, sl, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800264c:	f8df 9180 	ldr.w	r9, [pc, #384]	; 80027d0 <HAL_GPIO_Init+0x270>
 8002650:	4548      	cmp	r0, r9
 8002652:	f000 80a4 	beq.w	800279e <HAL_GPIO_Init+0x23e>
 8002656:	f509 6980 	add.w	r9, r9, #1024	; 0x400
 800265a:	4548      	cmp	r0, r9
 800265c:	f000 80a2 	beq.w	80027a4 <HAL_GPIO_Init+0x244>
 8002660:	f509 6980 	add.w	r9, r9, #1024	; 0x400
 8002664:	4548      	cmp	r0, r9
 8002666:	f000 80a0 	beq.w	80027aa <HAL_GPIO_Init+0x24a>
 800266a:	f509 6980 	add.w	r9, r9, #1024	; 0x400
 800266e:	4548      	cmp	r0, r9
 8002670:	bf0c      	ite	eq
 8002672:	f04f 0903 	moveq.w	r9, #3
 8002676:	f04f 0904 	movne.w	r9, #4
 800267a:	fa09 f90b 	lsl.w	r9, r9, fp
 800267e:	ea49 090a 	orr.w	r9, r9, sl
        AFIO->EXTICR[position >> 2u] = temp;
 8002682:	f8c8 9008 	str.w	r9, [r8, #8]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002686:	f8d1 8004 	ldr.w	r8, [r1, #4]
 800268a:	f418 3f80 	tst.w	r8, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 800268e:	f8d4 8000 	ldr.w	r8, [r4]
 8002692:	bf14      	ite	ne
 8002694:	ea48 0807 	orrne.w	r8, r8, r7
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002698:	ea28 0807 	biceq.w	r8, r8, r7
 800269c:	f8c4 8000 	str.w	r8, [r4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80026a0:	f8d1 8004 	ldr.w	r8, [r1, #4]
 80026a4:	f418 3f00 	tst.w	r8, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80026a8:	f8d4 8004 	ldr.w	r8, [r4, #4]
 80026ac:	bf14      	ite	ne
 80026ae:	ea48 0807 	orrne.w	r8, r8, r7
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80026b2:	ea28 0807 	biceq.w	r8, r8, r7
 80026b6:	f8c4 8004 	str.w	r8, [r4, #4]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80026ba:	f8d1 8004 	ldr.w	r8, [r1, #4]
 80026be:	f418 1f80 	tst.w	r8, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80026c2:	f8d4 8008 	ldr.w	r8, [r4, #8]
 80026c6:	bf14      	ite	ne
 80026c8:	ea48 0807 	orrne.w	r8, r8, r7
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80026cc:	ea28 0807 	biceq.w	r8, r8, r7
 80026d0:	f8c4 8008 	str.w	r8, [r4, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80026d4:	f8d1 8004 	ldr.w	r8, [r1, #4]
 80026d8:	f418 1f00 	tst.w	r8, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80026dc:	f8d4 800c 	ldr.w	r8, [r4, #12]
 80026e0:	bf14      	ite	ne
 80026e2:	ea48 0707 	orrne.w	r7, r8, r7
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80026e6:	ea28 0707 	biceq.w	r7, r8, r7
 80026ea:	60e7      	str	r7, [r4, #12]
        }
      }
    }

	position++;
 80026ec:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026ee:	f8d1 9000 	ldr.w	r9, [r1]
 80026f2:	3204      	adds	r2, #4
 80026f4:	fa39 f703 	lsrs.w	r7, r9, r3
 80026f8:	d05a      	beq.n	80027b0 <HAL_GPIO_Init+0x250>
    ioposition = (0x01uL << position);
 80026fa:	f04f 0801 	mov.w	r8, #1
 80026fe:	fa08 f803 	lsl.w	r8, r8, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002702:	ea08 0709 	and.w	r7, r8, r9
    if (iocurrent == ioposition)
 8002706:	ea38 0909 	bics.w	r9, r8, r9
 800270a:	d1ef      	bne.n	80026ec <HAL_GPIO_Init+0x18c>
      switch (GPIO_Init->Mode)
 800270c:	f8d1 9004 	ldr.w	r9, [r1, #4]
 8002710:	f1b9 0f12 	cmp.w	r9, #18
 8002714:	f63f af39 	bhi.w	800258a <HAL_GPIO_Init+0x2a>
 8002718:	f1b9 0f12 	cmp.w	r9, #18
 800271c:	f63f af5b 	bhi.w	80025d6 <HAL_GPIO_Init+0x76>
 8002720:	f20f 0a04 	addw	sl, pc, #4
 8002724:	f85a f029 	ldr.w	pc, [sl, r9, lsl #2]
 8002728:	080025af 	.word	0x080025af
 800272c:	08002775 	.word	0x08002775
 8002730:	08002785 	.word	0x08002785
 8002734:	08002585 	.word	0x08002585
 8002738:	080025d7 	.word	0x080025d7
 800273c:	080025d7 	.word	0x080025d7
 8002740:	080025d7 	.word	0x080025d7
 8002744:	080025d7 	.word	0x080025d7
 8002748:	080025d7 	.word	0x080025d7
 800274c:	080025d7 	.word	0x080025d7
 8002750:	080025d7 	.word	0x080025d7
 8002754:	080025d7 	.word	0x080025d7
 8002758:	080025d7 	.word	0x080025d7
 800275c:	080025d7 	.word	0x080025d7
 8002760:	080025d7 	.word	0x080025d7
 8002764:	080025d7 	.word	0x080025d7
 8002768:	080025d7 	.word	0x080025d7
 800276c:	0800277b 	.word	0x0800277b
 8002770:	0800278f 	.word	0x0800278f
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002774:	f8d1 c00c 	ldr.w	ip, [r1, #12]
          break;
 8002778:	e72d      	b.n	80025d6 <HAL_GPIO_Init+0x76>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800277a:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 800277e:	f10c 0c04 	add.w	ip, ip, #4
          break;
 8002782:	e728      	b.n	80025d6 <HAL_GPIO_Init+0x76>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002784:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 8002788:	f10c 0c08 	add.w	ip, ip, #8
          break;
 800278c:	e723      	b.n	80025d6 <HAL_GPIO_Init+0x76>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800278e:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 8002792:	f10c 0c0c 	add.w	ip, ip, #12
          break;
 8002796:	e71e      	b.n	80025d6 <HAL_GPIO_Init+0x76>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002798:	f04f 0c04 	mov.w	ip, #4
 800279c:	e71b      	b.n	80025d6 <HAL_GPIO_Init+0x76>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800279e:	f04f 0900 	mov.w	r9, #0
 80027a2:	e76a      	b.n	800267a <HAL_GPIO_Init+0x11a>
 80027a4:	f04f 0901 	mov.w	r9, #1
 80027a8:	e767      	b.n	800267a <HAL_GPIO_Init+0x11a>
 80027aa:	f04f 0902 	mov.w	r9, #2
 80027ae:	e764      	b.n	800267a <HAL_GPIO_Init+0x11a>
  }
}
 80027b0:	b003      	add	sp, #12
 80027b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80027b6:	bf00      	nop
 80027b8:	40021000 	.word	0x40021000
 80027bc:	40010400 	.word	0x40010400
 80027c0:	10220000 	.word	0x10220000
 80027c4:	10310000 	.word	0x10310000
 80027c8:	10320000 	.word	0x10320000
 80027cc:	10120000 	.word	0x10120000
 80027d0:	40010800 	.word	0x40010800

080027d4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80027d4:	b10a      	cbz	r2, 80027da <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027d6:	6101      	str	r1, [r0, #16]
 80027d8:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80027da:	0409      	lsls	r1, r1, #16
 80027dc:	6101      	str	r1, [r0, #16]
  }
}
 80027de:	4770      	bx	lr

080027e0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80027e0:	b570      	push	{r4, r5, r6, lr}
 80027e2:	b086      	sub	sp, #24
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80027e4:	2800      	cmp	r0, #0
 80027e6:	d07f      	beq.n	80028e8 <HAL_PCD_Init+0x108>
 80027e8:	4605      	mov	r5, r0

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80027ea:	f890 32a9 	ldrb.w	r3, [r0, #681]	; 0x2a9
 80027ee:	b1eb      	cbz	r3, 800282c <HAL_PCD_Init+0x4c>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80027f0:	2303      	movs	r3, #3
 80027f2:	f885 32a9 	strb.w	r3, [r5, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80027f6:	6828      	ldr	r0, [r5, #0]
 80027f8:	f002 fa17 	bl	8004c2a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80027fc:	462c      	mov	r4, r5
 80027fe:	f854 6b10 	ldr.w	r6, [r4], #16
 8002802:	46ec      	mov	ip, sp
 8002804:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002806:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800280a:	6823      	ldr	r3, [r4, #0]
 800280c:	f8cc 3000 	str.w	r3, [ip]
 8002810:	1d2b      	adds	r3, r5, #4
 8002812:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002814:	4630      	mov	r0, r6
 8002816:	f002 f9f8 	bl	8004c0a <USB_CoreInit>
 800281a:	4604      	mov	r4, r0
 800281c:	b158      	cbz	r0, 8002836 <HAL_PCD_Init+0x56>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800281e:	2302      	movs	r3, #2
 8002820:	f885 32a9 	strb.w	r3, [r5, #681]	; 0x2a9
    return HAL_ERROR;
 8002824:	2401      	movs	r4, #1
  hpcd->USB_Address = 0U;
  hpcd->State = HAL_PCD_STATE_READY;
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 8002826:	4620      	mov	r0, r4
 8002828:	b006      	add	sp, #24
 800282a:	bd70      	pop	{r4, r5, r6, pc}
    hpcd->Lock = HAL_UNLOCKED;
 800282c:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
    HAL_PCD_MspInit(hpcd);
 8002830:	f004 f896 	bl	8006960 <HAL_PCD_MspInit>
 8002834:	e7dc      	b.n	80027f0 <HAL_PCD_Init+0x10>
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002836:	2100      	movs	r1, #0
 8002838:	6828      	ldr	r0, [r5, #0]
 800283a:	f002 fa00 	bl	8004c3e <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800283e:	6868      	ldr	r0, [r5, #4]
 8002840:	b390      	cbz	r0, 80028a8 <HAL_PCD_Init+0xc8>
 8002842:	4623      	mov	r3, r4
    hpcd->IN_ep[i].is_in = 1U;
 8002844:	f04f 0c01 	mov.w	ip, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002848:	2100      	movs	r1, #0
    hpcd->IN_ep[i].is_in = 1U;
 800284a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800284e:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8002852:	f882 c029 	strb.w	ip, [r2, #41]	; 0x29
    hpcd->IN_ep[i].num = i;
 8002856:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    hpcd->IN_ep[i].tx_fifo_num = i;
 800285a:	86d3      	strh	r3, [r2, #54]	; 0x36
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800285c:	f882 102b 	strb.w	r1, [r2, #43]	; 0x2b
    hpcd->IN_ep[i].maxpacket = 0U;
 8002860:	6391      	str	r1, [r2, #56]	; 0x38
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002862:	63d1      	str	r1, [r2, #60]	; 0x3c
    hpcd->IN_ep[i].xfer_len = 0U;
 8002864:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8002868:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 800286c:	6411      	str	r1, [r2, #64]	; 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800286e:	3301      	adds	r3, #1
 8002870:	b2db      	uxtb	r3, r3
 8002872:	4283      	cmp	r3, r0
 8002874:	d3e9      	bcc.n	800284a <HAL_PCD_Init+0x6a>
    hpcd->OUT_ep[i].is_in = 0U;
 8002876:	2200      	movs	r2, #0
 8002878:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800287c:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8002880:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169
    hpcd->OUT_ep[i].num = i;
 8002884:	f883 4168 	strb.w	r4, [r3, #360]	; 0x168
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002888:	f883 216b 	strb.w	r2, [r3, #363]	; 0x16b
    hpcd->OUT_ep[i].maxpacket = 0U;
 800288c:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002890:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002894:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8002898:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 800289c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028a0:	3401      	adds	r4, #1
 80028a2:	b2e4      	uxtb	r4, r4
 80028a4:	4284      	cmp	r4, r0
 80028a6:	d3e7      	bcc.n	8002878 <HAL_PCD_Init+0x98>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80028a8:	462c      	mov	r4, r5
 80028aa:	f854 6b10 	ldr.w	r6, [r4], #16
 80028ae:	46ec      	mov	ip, sp
 80028b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028b2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80028b6:	6823      	ldr	r3, [r4, #0]
 80028b8:	f8cc 3000 	str.w	r3, [ip]
 80028bc:	1d2b      	adds	r3, r5, #4
 80028be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028c0:	4630      	mov	r0, r6
 80028c2:	f002 f9be 	bl	8004c42 <USB_DevInit>
 80028c6:	4604      	mov	r4, r0
 80028c8:	b120      	cbz	r0, 80028d4 <HAL_PCD_Init+0xf4>
    hpcd->State = HAL_PCD_STATE_ERROR;
 80028ca:	2302      	movs	r3, #2
 80028cc:	f885 32a9 	strb.w	r3, [r5, #681]	; 0x2a9
    return HAL_ERROR;
 80028d0:	2401      	movs	r4, #1
 80028d2:	e7a8      	b.n	8002826 <HAL_PCD_Init+0x46>
  hpcd->USB_Address = 0U;
 80028d4:	2300      	movs	r3, #0
 80028d6:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80028da:	2301      	movs	r3, #1
 80028dc:	f885 32a9 	strb.w	r3, [r5, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80028e0:	6828      	ldr	r0, [r5, #0]
 80028e2:	f002 fccd 	bl	8005280 <USB_DevDisconnect>
  return HAL_OK;
 80028e6:	e79e      	b.n	8002826 <HAL_PCD_Init+0x46>
    return HAL_ERROR;
 80028e8:	2401      	movs	r4, #1
 80028ea:	e79c      	b.n	8002826 <HAL_PCD_Init+0x46>

080028ec <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80028ec:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hpcd);
 80028ee:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d011      	beq.n	800291a <HAL_PCD_Start+0x2e>
 80028f6:	4604      	mov	r4, r0
 80028f8:	2501      	movs	r5, #1
 80028fa:	f880 52a8 	strb.w	r5, [r0, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80028fe:	6800      	ldr	r0, [r0, #0]
 8002900:	f002 f98a 	bl	8004c18 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002904:	4629      	mov	r1, r5
 8002906:	4620      	mov	r0, r4
 8002908:	f004 f935 	bl	8006b76 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800290c:	6820      	ldr	r0, [r4, #0]
 800290e:	f002 fcb5 	bl	800527c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002912:	2000      	movs	r0, #0
 8002914:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8

  return HAL_OK;
}
 8002918:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 800291a:	2002      	movs	r0, #2
 800291c:	e7fc      	b.n	8002918 <HAL_PCD_Start+0x2c>

0800291e <HAL_PCD_SetAddress>:
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 800291e:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 8002922:	2b01      	cmp	r3, #1
 8002924:	d00d      	beq.n	8002942 <HAL_PCD_SetAddress+0x24>
{
 8002926:	b510      	push	{r4, lr}
 8002928:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 800292a:	2301      	movs	r3, #1
 800292c:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002930:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002934:	6800      	ldr	r0, [r0, #0]
 8002936:	f002 fc9b 	bl	8005270 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800293a:	2000      	movs	r0, #0
 800293c:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8

  return HAL_OK;
}
 8002940:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8002942:	2002      	movs	r0, #2
}
 8002944:	4770      	bx	lr

08002946 <HAL_PCD_IRQHandler>:
{
 8002946:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800294a:	b084      	sub	sp, #16
 800294c:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800294e:	6800      	ldr	r0, [r0, #0]
 8002950:	f002 fc98 	bl	8005284 <USB_ReadInterrupts>
 8002954:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8002958:	f040 809a 	bne.w	8002a90 <HAL_PCD_IRQHandler+0x14a>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800295c:	6820      	ldr	r0, [r4, #0]
 800295e:	f002 fc91 	bl	8005284 <USB_ReadInterrupts>
 8002962:	f410 6f80 	tst.w	r0, #1024	; 0x400
 8002966:	f040 84f5 	bne.w	8003354 <HAL_PCD_IRQHandler+0xa0e>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800296a:	6820      	ldr	r0, [r4, #0]
 800296c:	f002 fc8a 	bl	8005284 <USB_ReadInterrupts>
 8002970:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 8002974:	d008      	beq.n	8002988 <HAL_PCD_IRQHandler+0x42>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002976:	6822      	ldr	r2, [r4, #0]
 8002978:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800297c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002980:	041b      	lsls	r3, r3, #16
 8002982:	0c1b      	lsrs	r3, r3, #16
 8002984:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002988:	6820      	ldr	r0, [r4, #0]
 800298a:	f002 fc7b 	bl	8005284 <USB_ReadInterrupts>
 800298e:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 8002992:	d008      	beq.n	80029a6 <HAL_PCD_IRQHandler+0x60>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002994:	6822      	ldr	r2, [r4, #0]
 8002996:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800299a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800299e:	041b      	lsls	r3, r3, #16
 80029a0:	0c1b      	lsrs	r3, r3, #16
 80029a2:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80029a6:	6820      	ldr	r0, [r4, #0]
 80029a8:	f002 fc6c 	bl	8005284 <USB_ReadInterrupts>
 80029ac:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 80029b0:	f040 84e2 	bne.w	8003378 <HAL_PCD_IRQHandler+0xa32>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80029b4:	6820      	ldr	r0, [r4, #0]
 80029b6:	f002 fc65 	bl	8005284 <USB_ReadInterrupts>
 80029ba:	f410 6f00 	tst.w	r0, #2048	; 0x800
 80029be:	d04e      	beq.n	8002a5e <HAL_PCD_IRQHandler+0x118>
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80029c0:	6826      	ldr	r6, [r4, #0]
 80029c2:	4631      	mov	r1, r6
 80029c4:	f1ad 0202 	sub.w	r2, sp, #2
 80029c8:	f10d 050e 	add.w	r5, sp, #14
 80029cc:	4613      	mov	r3, r2
 80029ce:	f831 0b04 	ldrh.w	r0, [r1], #4
 80029d2:	f823 0f02 	strh.w	r0, [r3, #2]!
    for (i = 0U; i < 8U; i++)
 80029d6:	42ab      	cmp	r3, r5
 80029d8:	d1f9      	bne.n	80029ce <HAL_PCD_IRQHandler+0x88>
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80029da:	f8b6 3040 	ldrh.w	r3, [r6, #64]	; 0x40
 80029de:	b29b      	uxth	r3, r3
 80029e0:	f043 0301 	orr.w	r3, r3, #1
 80029e4:	f8a6 3040 	strh.w	r3, [r6, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80029e8:	6821      	ldr	r1, [r4, #0]
 80029ea:	f8b1 3040 	ldrh.w	r3, [r1, #64]	; 0x40
 80029ee:	f023 0301 	bic.w	r3, r3, #1
 80029f2:	041b      	lsls	r3, r3, #16
 80029f4:	0c1b      	lsrs	r3, r3, #16
 80029f6:	f8a1 3040 	strh.w	r3, [r1, #64]	; 0x40
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80029fa:	6821      	ldr	r1, [r4, #0]
 80029fc:	f8b1 3044 	ldrh.w	r3, [r1, #68]	; 0x44
 8002a00:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002a04:	d0fa      	beq.n	80029fc <HAL_PCD_IRQHandler+0xb6>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002a06:	f8b1 3044 	ldrh.w	r3, [r1, #68]	; 0x44
 8002a0a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a0e:	041b      	lsls	r3, r3, #16
 8002a10:	0c1b      	lsrs	r3, r3, #16
 8002a12:	f8a1 3044 	strh.w	r3, [r1, #68]	; 0x44
 8002a16:	2300      	movs	r3, #0
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002a18:	6821      	ldr	r1, [r4, #0]
 8002a1a:	f832 0f02 	ldrh.w	r0, [r2, #2]!
 8002a1e:	52c8      	strh	r0, [r1, r3]
    for (i = 0U; i < 8U; i++)
 8002a20:	3304      	adds	r3, #4
 8002a22:	2b20      	cmp	r3, #32
 8002a24:	d1f8      	bne.n	8002a18 <HAL_PCD_IRQHandler+0xd2>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002a26:	6822      	ldr	r2, [r4, #0]
 8002a28:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	f043 0308 	orr.w	r3, r3, #8
 8002a32:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002a36:	6822      	ldr	r2, [r4, #0]
 8002a38:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8002a3c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002a40:	041b      	lsls	r3, r3, #16
 8002a42:	0c1b      	lsrs	r3, r3, #16
 8002a44:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002a48:	6822      	ldr	r2, [r4, #0]
 8002a4a:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	f043 0304 	orr.w	r3, r3, #4
 8002a54:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 8002a58:	4620      	mov	r0, r4
 8002a5a:	f003 ffcf 	bl	80069fc <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002a5e:	6820      	ldr	r0, [r4, #0]
 8002a60:	f002 fc10 	bl	8005284 <USB_ReadInterrupts>
 8002a64:	f410 7f00 	tst.w	r0, #512	; 0x200
 8002a68:	f040 84a6 	bne.w	80033b8 <HAL_PCD_IRQHandler+0xa72>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002a6c:	6820      	ldr	r0, [r4, #0]
 8002a6e:	f002 fc09 	bl	8005284 <USB_ReadInterrupts>
 8002a72:	f410 7f80 	tst.w	r0, #256	; 0x100
 8002a76:	d008      	beq.n	8002a8a <HAL_PCD_IRQHandler+0x144>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002a78:	6822      	ldr	r2, [r4, #0]
 8002a7a:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8002a7e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a82:	041b      	lsls	r3, r3, #16
 8002a84:	0c1b      	lsrs	r3, r3, #16
 8002a86:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 8002a8a:	b004      	add	sp, #16
 8002a8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002a90:	6820      	ldr	r0, [r4, #0]
 8002a92:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8002a96:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8002a9a:	f43f af5f 	beq.w	800295c <HAL_PCD_IRQHandler+0x16>
 8002a9e:	2600      	movs	r6, #0
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002aa0:	f248 0780 	movw	r7, #32896	; 0x8080
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002aa4:	f24c 0880 	movw	r8, #49280	; 0xc080
 8002aa8:	e058      	b.n	8002b5c <HAL_PCD_IRQHandler+0x216>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002aaa:	8803      	ldrh	r3, [r0, #0]
 8002aac:	b29b      	uxth	r3, r3
 8002aae:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002ab2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ab6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002aba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002ac2:	6822      	ldr	r2, [r4, #0]
 8002ac4:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 8002ace:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8002ad2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8002ad6:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8002ada:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ade:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8002ae0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002ae2:	4413      	add	r3, r2
 8002ae4:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002ae6:	4631      	mov	r1, r6
 8002ae8:	4620      	mov	r0, r4
 8002aea:	f003 ff63 	bl	80069b4 <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002aee:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8002af2:	b363      	cbz	r3, 8002b4e <HAL_PCD_IRQHandler+0x208>
 8002af4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002af6:	bb53      	cbnz	r3, 8002b4e <HAL_PCD_IRQHandler+0x208>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002af8:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8002afc:	6822      	ldr	r2, [r4, #0]
 8002afe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b02:	f8a2 304c 	strh.w	r3, [r2, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002b06:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
 8002b0a:	e020      	b.n	8002b4e <HAL_PCD_IRQHandler+0x208>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002b0c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002b10:	b29b      	uxth	r3, r3
 8002b12:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 8002b16:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002b1a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002b1e:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 8002b22:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b26:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002b2a:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 8002b2e:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 8002b32:	f002 ffea 	bl	8005b0a <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002b36:	6822      	ldr	r2, [r4, #0]
 8002b38:	8813      	ldrh	r3, [r2, #0]
 8002b3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b3e:	051b      	lsls	r3, r3, #20
 8002b40:	0d1b      	lsrs	r3, r3, #20
 8002b42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b46:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8002b48:	4620      	mov	r0, r4
 8002b4a:	f003 ff1f 	bl	800698c <HAL_PCD_SetupStageCallback>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002b4e:	6820      	ldr	r0, [r4, #0]
 8002b50:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8002b54:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8002b58:	f43f af00 	beq.w	800295c <HAL_PCD_IRQHandler+0x16>
    wIstr = hpcd->Instance->ISTR;
 8002b5c:	f8b0 5044 	ldrh.w	r5, [r0, #68]	; 0x44
 8002b60:	b2ab      	uxth	r3, r5
    if (epindex == 0U)
 8002b62:	f015 050f 	ands.w	r5, r5, #15
 8002b66:	d173      	bne.n	8002c50 <HAL_PCD_IRQHandler+0x30a>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002b68:	f013 0f10 	tst.w	r3, #16
 8002b6c:	d09d      	beq.n	8002aaa <HAL_PCD_IRQHandler+0x164>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002b6e:	8803      	ldrh	r3, [r0, #0]
 8002b70:	b29a      	uxth	r2, r3
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002b72:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8002b76:	d1c9      	bne.n	8002b0c <HAL_PCD_IRQHandler+0x1c6>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002b78:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8002b7c:	d0e7      	beq.n	8002b4e <HAL_PCD_IRQHandler+0x208>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002b7e:	8803      	ldrh	r3, [r0, #0]
 8002b80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b84:	051b      	lsls	r3, r3, #20
 8002b86:	0d1b      	lsrs	r3, r3, #20
 8002b88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b8c:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002b8e:	6820      	ldr	r0, [r4, #0]
 8002b90:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002b94:	b29b      	uxth	r3, r3
 8002b96:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 8002b9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002b9e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002ba2:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 8002ba6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002baa:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002bae:	b18b      	cbz	r3, 8002bd4 <HAL_PCD_IRQHandler+0x28e>
 8002bb0:	f8d4 117c 	ldr.w	r1, [r4, #380]	; 0x17c
 8002bb4:	b171      	cbz	r1, 8002bd4 <HAL_PCD_IRQHandler+0x28e>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002bb6:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 8002bba:	f002 ffa6 	bl	8005b0a <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8002bbe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8002bc2:	f8d4 2184 	ldr.w	r2, [r4, #388]	; 0x184
 8002bc6:	4413      	add	r3, r2
 8002bc8:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002bcc:	4631      	mov	r1, r6
 8002bce:	4620      	mov	r0, r4
 8002bd0:	f003 fee4 	bl	800699c <HAL_PCD_DataOutStageCallback>
          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8002bd4:	6823      	ldr	r3, [r4, #0]
 8002bd6:	881a      	ldrh	r2, [r3, #0]
 8002bd8:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8002bdc:	d1b7      	bne.n	8002b4e <HAL_PCD_IRQHandler+0x208>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002bde:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8002be2:	b292      	uxth	r2, r2
 8002be4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002be8:	f8d4 1178 	ldr.w	r1, [r4, #376]	; 0x178
 8002bec:	b9c1      	cbnz	r1, 8002c20 <HAL_PCD_IRQHandler+0x2da>
 8002bee:	5a99      	ldrh	r1, [r3, r2]
 8002bf0:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8002bf4:	0409      	lsls	r1, r1, #16
 8002bf6:	0c09      	lsrs	r1, r1, #16
 8002bf8:	5299      	strh	r1, [r3, r2]
 8002bfa:	5a99      	ldrh	r1, [r3, r2]
 8002bfc:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8002c00:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8002c04:	b289      	uxth	r1, r1
 8002c06:	5299      	strh	r1, [r3, r2]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002c08:	6822      	ldr	r2, [r4, #0]
 8002c0a:	8813      	ldrh	r3, [r2, #0]
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c16:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002c1a:	433b      	orrs	r3, r7
 8002c1c:	8013      	strh	r3, [r2, #0]
 8002c1e:	e796      	b.n	8002b4e <HAL_PCD_IRQHandler+0x208>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002c20:	293e      	cmp	r1, #62	; 0x3e
 8002c22:	d808      	bhi.n	8002c36 <HAL_PCD_IRQHandler+0x2f0>
 8002c24:	0848      	lsrs	r0, r1, #1
 8002c26:	f011 0f01 	tst.w	r1, #1
 8002c2a:	bf18      	it	ne
 8002c2c:	3001      	addne	r0, #1
 8002c2e:	0281      	lsls	r1, r0, #10
 8002c30:	b289      	uxth	r1, r1
 8002c32:	5299      	strh	r1, [r3, r2]
 8002c34:	e7e8      	b.n	8002c08 <HAL_PCD_IRQHandler+0x2c2>
 8002c36:	0948      	lsrs	r0, r1, #5
 8002c38:	f011 0f1f 	tst.w	r1, #31
 8002c3c:	bf08      	it	eq
 8002c3e:	f100 30ff 	addeq.w	r0, r0, #4294967295
 8002c42:	ea6f 61c0 	mvn.w	r1, r0, lsl #27
 8002c46:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8002c4a:	b289      	uxth	r1, r1
 8002c4c:	5299      	strh	r1, [r3, r2]
 8002c4e:	e7db      	b.n	8002c08 <HAL_PCD_IRQHandler+0x2c2>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002c50:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
 8002c54:	fa1f f983 	uxth.w	r9, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002c58:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8002c5c:	d155      	bne.n	8002d0a <HAL_PCD_IRQHandler+0x3c4>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002c5e:	f019 0f80 	tst.w	r9, #128	; 0x80
 8002c62:	f43f af74 	beq.w	8002b4e <HAL_PCD_IRQHandler+0x208>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002c66:	6822      	ldr	r2, [r4, #0]
 8002c68:	f832 3025 	ldrh.w	r3, [r2, r5, lsl #2]
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002c72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c7e:	b29b      	uxth	r3, r3
 8002c80:	f822 3025 	strh.w	r3, [r2, r5, lsl #2]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002c84:	eb05 0a85 	add.w	sl, r5, r5, lsl #2
 8002c88:	eb04 0aca 	add.w	sl, r4, sl, lsl #3
 8002c8c:	f89a 302b 	ldrb.w	r3, [sl, #43]	; 0x2b
 8002c90:	2b03      	cmp	r3, #3
 8002c92:	d007      	beq.n	8002ca4 <HAL_PCD_IRQHandler+0x35e>
 8002c94:	b133      	cbz	r3, 8002ca4 <HAL_PCD_IRQHandler+0x35e>
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	f040 818e 	bne.w	8002fb8 <HAL_PCD_IRQHandler+0x672>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002c9c:	f419 7f80 	tst.w	r9, #256	; 0x100
 8002ca0:	f040 818a 	bne.w	8002fb8 <HAL_PCD_IRQHandler+0x672>
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002ca4:	6820      	ldr	r0, [r4, #0]
 8002ca6:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002caa:	b29b      	uxth	r3, r3
 8002cac:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
          if (ep->xfer_len > TxByteNbre)
 8002cb0:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8002cb4:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8002cb8:	6c12      	ldr	r2, [r2, #64]	; 0x40
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002cba:	3302      	adds	r3, #2
 8002cbc:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8002cc0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002cc4:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
          if (ep->xfer_len > TxByteNbre)
 8002cc8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	f240 8381 	bls.w	80033d4 <HAL_PCD_IRQHandler+0xa8e>
            ep->xfer_len -= TxByteNbre;
 8002cd2:	1ad2      	subs	r2, r2, r3
 8002cd4:	eb05 0c85 	add.w	ip, r5, r5, lsl #2
 8002cd8:	eb04 0ccc 	add.w	ip, r4, ip, lsl #3
 8002cdc:	f8cc 2040 	str.w	r2, [ip, #64]	; 0x40
          if (ep->xfer_len == 0U)
 8002ce0:	2a00      	cmp	r2, #0
 8002ce2:	f000 837c 	beq.w	80033de <HAL_PCD_IRQHandler+0xa98>
            ep->xfer_buff += TxByteNbre;
 8002ce6:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8002cea:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8002cee:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002cf0:	4419      	add	r1, r3
 8002cf2:	63d1      	str	r1, [r2, #60]	; 0x3c
            ep->xfer_count += TxByteNbre;
 8002cf4:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002cf6:	440b      	add	r3, r1
 8002cf8:	6453      	str	r3, [r2, #68]	; 0x44
        ep = &hpcd->IN_ep[epindex];
 8002cfa:	3501      	adds	r5, #1
 8002cfc:	eb05 0585 	add.w	r5, r5, r5, lsl #2
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002d00:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8002d04:	f002 fadb 	bl	80052be <USB_EPStartXfer>
 8002d08:	e721      	b.n	8002b4e <HAL_PCD_IRQHandler+0x208>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002d0a:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
 8002d0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d12:	051b      	lsls	r3, r3, #20
 8002d14:	0d1b      	lsrs	r3, r3, #20
 8002d16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d1a:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8002d1e:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8002d22:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8002d26:	f893 3174 	ldrb.w	r3, [r3, #372]	; 0x174
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d145      	bne.n	8002dba <HAL_PCD_IRQHandler+0x474>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002d2e:	6820      	ldr	r0, [r4, #0]
 8002d30:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002d34:	b29b      	uxth	r3, r3
 8002d36:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8002d3a:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8002d3e:	f892 2168 	ldrb.w	r2, [r2, #360]	; 0x168
 8002d42:	3306      	adds	r3, #6
 8002d44:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002d48:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002d4c:	f8b3 a400 	ldrh.w	sl, [r3, #1024]	; 0x400
 8002d50:	f3ca 0a09 	ubfx	sl, sl, #0, #10
          if (count != 0U)
 8002d54:	f1ba 0f00 	cmp.w	sl, #0
 8002d58:	d123      	bne.n	8002da2 <HAL_PCD_IRQHandler+0x45c>
        ep->xfer_count += count;
 8002d5a:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8002d5e:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8002d62:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 8002d66:	4452      	add	r2, sl
 8002d68:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
        ep->xfer_buff += count;
 8002d6c:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 8002d70:	4452      	add	r2, sl
 8002d72:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002d76:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8002d7a:	b143      	cbz	r3, 8002d8e <HAL_PCD_IRQHandler+0x448>
 8002d7c:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8002d80:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8002d84:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8002d88:	459a      	cmp	sl, r3
 8002d8a:	f080 810b 	bcs.w	8002fa4 <HAL_PCD_IRQHandler+0x65e>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002d8e:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8002d92:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8002d96:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 8002d9a:	4620      	mov	r0, r4
 8002d9c:	f003 fdfe 	bl	800699c <HAL_PCD_DataOutStageCallback>
 8002da0:	e75d      	b.n	8002c5e <HAL_PCD_IRQHandler+0x318>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002da2:	eb05 0185 	add.w	r1, r5, r5, lsl #2
 8002da6:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8002daa:	4653      	mov	r3, sl
 8002dac:	f8b1 216e 	ldrh.w	r2, [r1, #366]	; 0x16e
 8002db0:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8002db4:	f002 fea9 	bl	8005b0a <USB_ReadPMA>
 8002db8:	e7cf      	b.n	8002d5a <HAL_PCD_IRQHandler+0x414>
          if (ep->type == EP_TYPE_BULK)
 8002dba:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8002dbe:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8002dc2:	f893 316b 	ldrb.w	r3, [r3, #363]	; 0x16b
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d037      	beq.n	8002e3a <HAL_PCD_IRQHandler+0x4f4>
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002dca:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8002dce:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8002dd2:	f892 0168 	ldrb.w	r0, [r2, #360]	; 0x168
 8002dd6:	6821      	ldr	r1, [r4, #0]
 8002dd8:	f831 3020 	ldrh.w	r3, [r1, r0, lsl #2]
 8002ddc:	b29b      	uxth	r3, r3
 8002dde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002de2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002de6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dea:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002dee:	f821 3020 	strh.w	r3, [r1, r0, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002df2:	6820      	ldr	r0, [r4, #0]
 8002df4:	f892 2168 	ldrb.w	r2, [r2, #360]	; 0x168
 8002df8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002dfc:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8002e00:	f000 80b4 	beq.w	8002f6c <HAL_PCD_IRQHandler+0x626>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002e04:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	3302      	adds	r3, #2
 8002e0c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002e10:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002e14:	f8b3 a400 	ldrh.w	sl, [r3, #1024]	; 0x400
 8002e18:	f3ca 0a09 	ubfx	sl, sl, #0, #10
              if (count != 0U)
 8002e1c:	f1ba 0f00 	cmp.w	sl, #0
 8002e20:	d09b      	beq.n	8002d5a <HAL_PCD_IRQHandler+0x414>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002e22:	eb05 0185 	add.w	r1, r5, r5, lsl #2
 8002e26:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8002e2a:	4653      	mov	r3, sl
 8002e2c:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 8002e30:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8002e34:	f002 fe69 	bl	8005b0a <USB_ReadPMA>
 8002e38:	e78f      	b.n	8002d5a <HAL_PCD_IRQHandler+0x414>
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002e3a:	f419 4f80 	tst.w	r9, #16384	; 0x4000
 8002e3e:	d04a      	beq.n	8002ed6 <HAL_PCD_IRQHandler+0x590>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002e40:	6822      	ldr	r2, [r4, #0]
 8002e42:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8002e46:	b29b      	uxth	r3, r3
 8002e48:	eb05 0085 	add.w	r0, r5, r5, lsl #2
 8002e4c:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8002e50:	f890 1168 	ldrb.w	r1, [r0, #360]	; 0x168
 8002e54:	3302      	adds	r3, #2
 8002e56:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8002e5a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8002e5e:	f8b3 a400 	ldrh.w	sl, [r3, #1024]	; 0x400
 8002e62:	f3ca 0a09 	ubfx	sl, sl, #0, #10
    if (ep->xfer_len >= count)
 8002e66:	f8d0 3180 	ldr.w	r3, [r0, #384]	; 0x180
 8002e6a:	4553      	cmp	r3, sl
 8002e6c:	f0c0 8365 	bcc.w	800353a <HAL_PCD_IRQHandler+0xbf4>
      ep->xfer_len -= count;
 8002e70:	eba3 030a 	sub.w	r3, r3, sl
 8002e74:	eb05 0085 	add.w	r0, r5, r5, lsl #2
 8002e78:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8002e7c:	f8c0 3180 	str.w	r3, [r0, #384]	; 0x180
    if (ep->xfer_len == 0U)
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	f000 8360 	beq.w	8003546 <HAL_PCD_IRQHandler+0xc00>
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002e86:	f019 0f40 	tst.w	r9, #64	; 0x40
 8002e8a:	d013      	beq.n	8002eb4 <HAL_PCD_IRQHandler+0x56e>
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002e8c:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8002e90:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8002e94:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 8002e98:	6822      	ldr	r2, [r4, #0]
 8002e9a:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ea4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ea8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002eac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002eb0:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
    if (count != 0U)
 8002eb4:	f1ba 0f00 	cmp.w	sl, #0
 8002eb8:	f43f af4f 	beq.w	8002d5a <HAL_PCD_IRQHandler+0x414>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002ebc:	eb05 0185 	add.w	r1, r5, r5, lsl #2
 8002ec0:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8002ec4:	4653      	mov	r3, sl
 8002ec6:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 8002eca:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8002ece:	6820      	ldr	r0, [r4, #0]
 8002ed0:	f002 fe1b 	bl	8005b0a <USB_ReadPMA>
 8002ed4:	e741      	b.n	8002d5a <HAL_PCD_IRQHandler+0x414>
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002ed6:	6822      	ldr	r2, [r4, #0]
 8002ed8:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	eb05 0085 	add.w	r0, r5, r5, lsl #2
 8002ee2:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8002ee6:	f890 1168 	ldrb.w	r1, [r0, #360]	; 0x168
 8002eea:	3306      	adds	r3, #6
 8002eec:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8002ef0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8002ef4:	f8b3 a400 	ldrh.w	sl, [r3, #1024]	; 0x400
 8002ef8:	f3ca 0a09 	ubfx	sl, sl, #0, #10
    if (ep->xfer_len >= count)
 8002efc:	f8d0 3180 	ldr.w	r3, [r0, #384]	; 0x180
 8002f00:	4553      	cmp	r3, sl
 8002f02:	f0c0 832d 	bcc.w	8003560 <HAL_PCD_IRQHandler+0xc1a>
      ep->xfer_len -= count;
 8002f06:	eba3 030a 	sub.w	r3, r3, sl
 8002f0a:	eb05 0085 	add.w	r0, r5, r5, lsl #2
 8002f0e:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8002f12:	f8c0 3180 	str.w	r3, [r0, #384]	; 0x180
    if (ep->xfer_len == 0U)
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	f000 8328 	beq.w	800356c <HAL_PCD_IRQHandler+0xc26>
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002f1c:	f019 0f40 	tst.w	r9, #64	; 0x40
 8002f20:	d113      	bne.n	8002f4a <HAL_PCD_IRQHandler+0x604>
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002f22:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8002f26:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8002f2a:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 8002f2e:	6822      	ldr	r2, [r4, #0]
 8002f30:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8002f34:	b29b      	uxth	r3, r3
 8002f36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f42:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002f46:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
    if (count != 0U)
 8002f4a:	f1ba 0f00 	cmp.w	sl, #0
 8002f4e:	f43f af04 	beq.w	8002d5a <HAL_PCD_IRQHandler+0x414>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002f52:	eb05 0185 	add.w	r1, r5, r5, lsl #2
 8002f56:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8002f5a:	4653      	mov	r3, sl
 8002f5c:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 8002f60:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8002f64:	6820      	ldr	r0, [r4, #0]
 8002f66:	f002 fdd0 	bl	8005b0a <USB_ReadPMA>
 8002f6a:	e6f6      	b.n	8002d5a <HAL_PCD_IRQHandler+0x414>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002f6c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002f70:	b29b      	uxth	r3, r3
 8002f72:	3306      	adds	r3, #6
 8002f74:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002f78:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002f7c:	f8b3 a400 	ldrh.w	sl, [r3, #1024]	; 0x400
 8002f80:	f3ca 0a09 	ubfx	sl, sl, #0, #10
              if (count != 0U)
 8002f84:	f1ba 0f00 	cmp.w	sl, #0
 8002f88:	f43f aee7 	beq.w	8002d5a <HAL_PCD_IRQHandler+0x414>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002f8c:	eb05 0185 	add.w	r1, r5, r5, lsl #2
 8002f90:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8002f94:	4653      	mov	r3, sl
 8002f96:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 8002f9a:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8002f9e:	f002 fdb4 	bl	8005b0a <USB_ReadPMA>
 8002fa2:	e6da      	b.n	8002d5a <HAL_PCD_IRQHandler+0x414>
        ep = &hpcd->OUT_ep[epindex];
 8002fa4:	eb05 0185 	add.w	r1, r5, r5, lsl #2
 8002fa8:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002fac:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 8002fb0:	6820      	ldr	r0, [r4, #0]
 8002fb2:	f002 f984 	bl	80052be <USB_EPStartXfer>
 8002fb6:	e652      	b.n	8002c5e <HAL_PCD_IRQHandler+0x318>
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002fb8:	f019 0f40 	tst.w	r9, #64	; 0x40
 8002fbc:	f000 80ea 	beq.w	8003194 <HAL_PCD_IRQHandler+0x84e>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002fc0:	6822      	ldr	r2, [r4, #0]
 8002fc2:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	f89a 0028 	ldrb.w	r0, [sl, #40]	; 0x28
    if (ep->xfer_len > TxByteNbre)
 8002fcc:	eb05 0185 	add.w	r1, r5, r5, lsl #2
 8002fd0:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8002fd4:	6c09      	ldr	r1, [r1, #64]	; 0x40
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002fd6:	3302      	adds	r3, #2
 8002fd8:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8002fdc:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8002fe0:	f8b3 c400 	ldrh.w	ip, [r3, #1024]	; 0x400
    if (ep->xfer_len > TxByteNbre)
 8002fe4:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8002fe8:	4561      	cmp	r1, ip
 8002fea:	f240 81fd 	bls.w	80033e8 <HAL_PCD_IRQHandler+0xaa2>
      ep->xfer_len -= TxByteNbre;
 8002fee:	eba1 010c 	sub.w	r1, r1, ip
 8002ff2:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8002ff6:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8002ffa:	6419      	str	r1, [r3, #64]	; 0x40
    if (ep->xfer_len == 0U)
 8002ffc:	2900      	cmp	r1, #0
 8002ffe:	f000 81f8 	beq.w	80033f2 <HAL_PCD_IRQHandler+0xaac>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003002:	f419 4f80 	tst.w	r9, #16384	; 0x4000
 8003006:	d00a      	beq.n	800301e <HAL_PCD_IRQHandler+0x6d8>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003008:	f832 3020 	ldrh.w	r3, [r2, r0, lsl #2]
 800300c:	b29b      	uxth	r3, r3
 800300e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003012:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003016:	ea48 0303 	orr.w	r3, r8, r3
 800301a:	f822 3020 	strh.w	r3, [r2, r0, lsl #2]
      if (ep->xfer_fill_db == 1U)
 800301e:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8003022:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8003026:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800302a:	2b01      	cmp	r3, #1
 800302c:	d029      	beq.n	8003082 <HAL_PCD_IRQHandler+0x73c>
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800302e:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 8003032:	6822      	ldr	r2, [r4, #0]
 8003034:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8003038:	b29b      	uxth	r3, r3
 800303a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800303e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003042:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8003046:	433b      	orrs	r3, r7
 8003048:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 800304c:	e57f      	b.n	8002b4e <HAL_PCD_IRQHandler+0x208>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800304e:	2b01      	cmp	r3, #1
 8003050:	f040 8204 	bne.w	800345c <HAL_PCD_IRQHandler+0xb16>
 8003054:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8003058:	b299      	uxth	r1, r3
 800305a:	f202 4304 	addw	r3, r2, #1028	; 0x404
 800305e:	440b      	add	r3, r1
 8003060:	0100      	lsls	r0, r0, #4
 8003062:	521e      	strh	r6, [r3, r0]
 8003064:	e1de      	b.n	8003424 <HAL_PCD_IRQHandler+0xade>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003066:	2a01      	cmp	r2, #1
 8003068:	f040 81f8 	bne.w	800345c <HAL_PCD_IRQHandler+0xb16>
 800306c:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8003070:	b292      	uxth	r2, r2
 8003072:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003076:	4413      	add	r3, r2
 8003078:	f89a 2028 	ldrb.w	r2, [sl, #40]	; 0x28
 800307c:	0112      	lsls	r2, r2, #4
 800307e:	529e      	strh	r6, [r3, r2]
 8003080:	e1ec      	b.n	800345c <HAL_PCD_IRQHandler+0xb16>
        ep->xfer_buff += TxByteNbre;
 8003082:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8003086:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 800308a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800308c:	4462      	add	r2, ip
 800308e:	63da      	str	r2, [r3, #60]	; 0x3c
        ep->xfer_count += TxByteNbre;
 8003090:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003092:	4462      	add	r2, ip
 8003094:	645a      	str	r2, [r3, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 8003096:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8003098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800309a:	4299      	cmp	r1, r3
 800309c:	d317      	bcc.n	80030ce <HAL_PCD_IRQHandler+0x788>
          ep->xfer_len_db -= len;
 800309e:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 80030a2:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 80030a6:	1ac9      	subs	r1, r1, r3
 80030a8:	6491      	str	r1, [r2, #72]	; 0x48
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80030aa:	f89a 2029 	ldrb.w	r2, [sl, #41]	; 0x29
 80030ae:	2a00      	cmp	r2, #0
 80030b0:	d039      	beq.n	8003126 <HAL_PCD_IRQHandler+0x7e0>
 80030b2:	2a01      	cmp	r2, #1
 80030b4:	d061      	beq.n	800317a <HAL_PCD_IRQHandler+0x834>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80030b6:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 80030ba:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 80030be:	4611      	mov	r1, r2
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 80030c4:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 80030c6:	6820      	ldr	r0, [r4, #0]
 80030c8:	f002 f8e2 	bl	8005290 <USB_WritePMA>
 80030cc:	e7af      	b.n	800302e <HAL_PCD_IRQHandler+0x6e8>
        else if (ep->xfer_len_db == 0U)
 80030ce:	b939      	cbnz	r1, 80030e0 <HAL_PCD_IRQHandler+0x79a>
          ep->xfer_fill_db = 0U;
 80030d0:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 80030d4:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 80030d8:	f883 604c 	strb.w	r6, [r3, #76]	; 0x4c
          len = TxByteNbre;
 80030dc:	4663      	mov	r3, ip
 80030de:	e7e4      	b.n	80030aa <HAL_PCD_IRQHandler+0x764>
          ep->xfer_fill_db = 0U;
 80030e0:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 80030e4:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 80030e8:	f883 604c 	strb.w	r6, [r3, #76]	; 0x4c
          ep->xfer_len_db = 0U;
 80030ec:	649e      	str	r6, [r3, #72]	; 0x48
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80030ee:	f89a 2029 	ldrb.w	r2, [sl, #41]	; 0x29
 80030f2:	b9b2      	cbnz	r2, 8003122 <HAL_PCD_IRQHandler+0x7dc>
 80030f4:	6823      	ldr	r3, [r4, #0]
 80030f6:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80030fa:	b290      	uxth	r0, r2
 80030fc:	f89a c028 	ldrb.w	ip, [sl, #40]	; 0x28
 8003100:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8003104:	4402      	add	r2, r0
 8003106:	eb02 120c 	add.w	r2, r2, ip, lsl #4
          len = ep->xfer_len_db;
 800310a:	460b      	mov	r3, r1
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800310c:	2b3e      	cmp	r3, #62	; 0x3e
 800310e:	d827      	bhi.n	8003160 <HAL_PCD_IRQHandler+0x81a>
 8003110:	0859      	lsrs	r1, r3, #1
 8003112:	f013 0f01 	tst.w	r3, #1
 8003116:	bf18      	it	ne
 8003118:	3101      	addne	r1, #1
 800311a:	0289      	lsls	r1, r1, #10
 800311c:	b289      	uxth	r1, r1
 800311e:	8011      	strh	r1, [r2, #0]
 8003120:	e7c9      	b.n	80030b6 <HAL_PCD_IRQHandler+0x770>
          len = ep->xfer_len_db;
 8003122:	460b      	mov	r3, r1
 8003124:	e7c5      	b.n	80030b2 <HAL_PCD_IRQHandler+0x76c>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003126:	6821      	ldr	r1, [r4, #0]
 8003128:	f8b1 c050 	ldrh.w	ip, [r1, #80]	; 0x50
 800312c:	fa1f fc8c 	uxth.w	ip, ip
 8003130:	f89a 2028 	ldrb.w	r2, [sl, #40]	; 0x28
 8003134:	0110      	lsls	r0, r2, #4
 8003136:	f201 4104 	addw	r1, r1, #1028	; 0x404
 800313a:	4461      	add	r1, ip
 800313c:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 8003140:	2b00      	cmp	r3, #0
 8003142:	d1e3      	bne.n	800310c <HAL_PCD_IRQHandler+0x7c6>
 8003144:	5a42      	ldrh	r2, [r0, r1]
 8003146:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800314a:	0412      	lsls	r2, r2, #16
 800314c:	0c12      	lsrs	r2, r2, #16
 800314e:	5242      	strh	r2, [r0, r1]
 8003150:	5a42      	ldrh	r2, [r0, r1]
 8003152:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8003156:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800315a:	b292      	uxth	r2, r2
 800315c:	5242      	strh	r2, [r0, r1]
 800315e:	e7aa      	b.n	80030b6 <HAL_PCD_IRQHandler+0x770>
 8003160:	0959      	lsrs	r1, r3, #5
 8003162:	f013 0f1f 	tst.w	r3, #31
 8003166:	bf08      	it	eq
 8003168:	f101 31ff 	addeq.w	r1, r1, #4294967295
 800316c:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 8003170:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8003174:	b289      	uxth	r1, r1
 8003176:	8011      	strh	r1, [r2, #0]
 8003178:	e79d      	b.n	80030b6 <HAL_PCD_IRQHandler+0x770>
 800317a:	6822      	ldr	r2, [r4, #0]
 800317c:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 8003180:	b280      	uxth	r0, r0
 8003182:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 8003186:	0109      	lsls	r1, r1, #4
 8003188:	f202 4204 	addw	r2, r2, #1028	; 0x404
 800318c:	4402      	add	r2, r0
 800318e:	b298      	uxth	r0, r3
 8003190:	5288      	strh	r0, [r1, r2]
 8003192:	e790      	b.n	80030b6 <HAL_PCD_IRQHandler+0x770>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003194:	6822      	ldr	r2, [r4, #0]
 8003196:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 800319a:	b29b      	uxth	r3, r3
 800319c:	f89a c028 	ldrb.w	ip, [sl, #40]	; 0x28
    if (ep->xfer_len >= TxByteNbre)
 80031a0:	eb05 0185 	add.w	r1, r5, r5, lsl #2
 80031a4:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 80031a8:	6c08      	ldr	r0, [r1, #64]	; 0x40
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80031aa:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 80031ae:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80031b2:	f8b3 140c 	ldrh.w	r1, [r3, #1036]	; 0x40c
    if (ep->xfer_len >= TxByteNbre)
 80031b6:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80031ba:	4288      	cmp	r0, r1
 80031bc:	f0c0 8166 	bcc.w	800348c <HAL_PCD_IRQHandler+0xb46>
      ep->xfer_len -= TxByteNbre;
 80031c0:	1a40      	subs	r0, r0, r1
 80031c2:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 80031c6:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 80031ca:	6418      	str	r0, [r3, #64]	; 0x40
    if (ep->xfer_len == 0U)
 80031cc:	2800      	cmp	r0, #0
 80031ce:	f000 8162 	beq.w	8003496 <HAL_PCD_IRQHandler+0xb50>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80031d2:	f419 4f80 	tst.w	r9, #16384	; 0x4000
 80031d6:	d10a      	bne.n	80031ee <HAL_PCD_IRQHandler+0x8a8>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80031d8:	f832 302c 	ldrh.w	r3, [r2, ip, lsl #2]
 80031dc:	b29b      	uxth	r3, r3
 80031de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031e6:	ea48 0303 	orr.w	r3, r8, r3
 80031ea:	f822 302c 	strh.w	r3, [r2, ip, lsl #2]
      if (ep->xfer_fill_db == 1U)
 80031ee:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 80031f2:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 80031f6:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	f47f af17 	bne.w	800302e <HAL_PCD_IRQHandler+0x6e8>
        ep->xfer_buff += TxByteNbre;
 8003200:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8003204:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8003208:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800320a:	440a      	add	r2, r1
 800320c:	63da      	str	r2, [r3, #60]	; 0x3c
        ep->xfer_count += TxByteNbre;
 800320e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003210:	440a      	add	r2, r1
 8003212:	645a      	str	r2, [r3, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 8003214:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8003216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003218:	4298      	cmp	r0, r3
 800321a:	d337      	bcc.n	800328c <HAL_PCD_IRQHandler+0x946>
          ep->xfer_len_db -= len;
 800321c:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8003220:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8003224:	1ac0      	subs	r0, r0, r3
 8003226:	6490      	str	r0, [r2, #72]	; 0x48
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003228:	6822      	ldr	r2, [r4, #0]
 800322a:	4611      	mov	r1, r2
 800322c:	f89a c029 	ldrb.w	ip, [sl, #41]	; 0x29
 8003230:	f1bc 0f00 	cmp.w	ip, #0
 8003234:	d05a      	beq.n	80032ec <HAL_PCD_IRQHandler+0x9a6>
 8003236:	f1bc 0f01 	cmp.w	ip, #1
 800323a:	d07f      	beq.n	800333c <HAL_PCD_IRQHandler+0x9f6>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800323c:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8003240:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8003244:	4611      	mov	r1, r2
 8003246:	b29b      	uxth	r3, r3
 8003248:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800324a:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 800324c:	6820      	ldr	r0, [r4, #0]
 800324e:	f002 f81f 	bl	8005290 <USB_WritePMA>
 8003252:	e6ec      	b.n	800302e <HAL_PCD_IRQHandler+0x6e8>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003254:	2b01      	cmp	r3, #1
 8003256:	f040 8158 	bne.w	800350a <HAL_PCD_IRQHandler+0xbc4>
 800325a:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 800325e:	b299      	uxth	r1, r3
 8003260:	f202 4304 	addw	r3, r2, #1028	; 0x404
 8003264:	440b      	add	r3, r1
 8003266:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 800326a:	f823 600c 	strh.w	r6, [r3, ip]
 800326e:	e130      	b.n	80034d2 <HAL_PCD_IRQHandler+0xb8c>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003270:	2a01      	cmp	r2, #1
 8003272:	f040 814a 	bne.w	800350a <HAL_PCD_IRQHandler+0xbc4>
 8003276:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 800327a:	b289      	uxth	r1, r1
 800327c:	f89a 2028 	ldrb.w	r2, [sl, #40]	; 0x28
 8003280:	0112      	lsls	r2, r2, #4
 8003282:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003286:	440b      	add	r3, r1
 8003288:	52d6      	strh	r6, [r2, r3]
 800328a:	e13e      	b.n	800350a <HAL_PCD_IRQHandler+0xbc4>
        else if (ep->xfer_len_db == 0U)
 800328c:	b938      	cbnz	r0, 800329e <HAL_PCD_IRQHandler+0x958>
          ep->xfer_fill_db = 0U;
 800328e:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8003292:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8003296:	f883 604c 	strb.w	r6, [r3, #76]	; 0x4c
          len = TxByteNbre;
 800329a:	460b      	mov	r3, r1
 800329c:	e7c4      	b.n	8003228 <HAL_PCD_IRQHandler+0x8e2>
          ep->xfer_len_db = 0U;
 800329e:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 80032a2:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 80032a6:	649e      	str	r6, [r3, #72]	; 0x48
          ep->xfer_fill_db = 0;
 80032a8:	f883 604c 	strb.w	r6, [r3, #76]	; 0x4c
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80032ac:	6822      	ldr	r2, [r4, #0]
 80032ae:	4611      	mov	r1, r2
 80032b0:	f89a c029 	ldrb.w	ip, [sl, #41]	; 0x29
 80032b4:	f1bc 0f00 	cmp.w	ip, #0
 80032b8:	d116      	bne.n	80032e8 <HAL_PCD_IRQHandler+0x9a2>
 80032ba:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 80032be:	fa1f fc83 	uxth.w	ip, r3
 80032c2:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 80032c6:	f202 430c 	addw	r3, r2, #1036	; 0x40c
 80032ca:	4463      	add	r3, ip
 80032cc:	eb03 1101 	add.w	r1, r3, r1, lsl #4
          len = ep->xfer_len_db;
 80032d0:	4603      	mov	r3, r0
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80032d2:	2b3e      	cmp	r3, #62	; 0x3e
 80032d4:	d825      	bhi.n	8003322 <HAL_PCD_IRQHandler+0x9dc>
 80032d6:	085a      	lsrs	r2, r3, #1
 80032d8:	f013 0f01 	tst.w	r3, #1
 80032dc:	bf18      	it	ne
 80032de:	3201      	addne	r2, #1
 80032e0:	0292      	lsls	r2, r2, #10
 80032e2:	b292      	uxth	r2, r2
 80032e4:	800a      	strh	r2, [r1, #0]
 80032e6:	e7a9      	b.n	800323c <HAL_PCD_IRQHandler+0x8f6>
          len = ep->xfer_len_db;
 80032e8:	4603      	mov	r3, r0
 80032ea:	e7a4      	b.n	8003236 <HAL_PCD_IRQHandler+0x8f0>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80032ec:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 80032f0:	b289      	uxth	r1, r1
 80032f2:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 80032f6:	440a      	add	r2, r1
 80032f8:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 80032fc:	0108      	lsls	r0, r1, #4
 80032fe:	eb02 1101 	add.w	r1, r2, r1, lsl #4
 8003302:	2b00      	cmp	r3, #0
 8003304:	d1e5      	bne.n	80032d2 <HAL_PCD_IRQHandler+0x98c>
 8003306:	5a11      	ldrh	r1, [r2, r0]
 8003308:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 800330c:	0409      	lsls	r1, r1, #16
 800330e:	0c09      	lsrs	r1, r1, #16
 8003310:	5211      	strh	r1, [r2, r0]
 8003312:	5a11      	ldrh	r1, [r2, r0]
 8003314:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8003318:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 800331c:	b289      	uxth	r1, r1
 800331e:	5211      	strh	r1, [r2, r0]
 8003320:	e78c      	b.n	800323c <HAL_PCD_IRQHandler+0x8f6>
 8003322:	095a      	lsrs	r2, r3, #5
 8003324:	f013 0f1f 	tst.w	r3, #31
 8003328:	bf08      	it	eq
 800332a:	f102 32ff 	addeq.w	r2, r2, #4294967295
 800332e:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8003332:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8003336:	b292      	uxth	r2, r2
 8003338:	800a      	strh	r2, [r1, #0]
 800333a:	e77f      	b.n	800323c <HAL_PCD_IRQHandler+0x8f6>
 800333c:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 8003340:	b280      	uxth	r0, r0
 8003342:	f89a 2028 	ldrb.w	r2, [sl, #40]	; 0x28
 8003346:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 800334a:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 800334e:	b299      	uxth	r1, r3
 8003350:	5211      	strh	r1, [r2, r0]
 8003352:	e773      	b.n	800323c <HAL_PCD_IRQHandler+0x8f6>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003354:	6822      	ldr	r2, [r4, #0]
 8003356:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800335a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800335e:	041b      	lsls	r3, r3, #16
 8003360:	0c1b      	lsrs	r3, r3, #16
 8003362:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8003366:	4620      	mov	r0, r4
 8003368:	f003 fb35 	bl	80069d6 <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800336c:	2100      	movs	r1, #0
 800336e:	4620      	mov	r0, r4
 8003370:	f7ff fad5 	bl	800291e <HAL_PCD_SetAddress>
 8003374:	f7ff baf9 	b.w	800296a <HAL_PCD_IRQHandler+0x24>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8003378:	6822      	ldr	r2, [r4, #0]
 800337a:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 800337e:	f023 0304 	bic.w	r3, r3, #4
 8003382:	041b      	lsls	r3, r3, #16
 8003384:	0c1b      	lsrs	r3, r3, #16
 8003386:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800338a:	6822      	ldr	r2, [r4, #0]
 800338c:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8003390:	f023 0308 	bic.w	r3, r3, #8
 8003394:	041b      	lsls	r3, r3, #16
 8003396:	0c1b      	lsrs	r3, r3, #16
 8003398:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 800339c:	4620      	mov	r0, r4
 800339e:	f003 fb3d 	bl	8006a1c <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80033a2:	6822      	ldr	r2, [r4, #0]
 80033a4:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80033a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80033ac:	041b      	lsls	r3, r3, #16
 80033ae:	0c1b      	lsrs	r3, r3, #16
 80033b0:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
 80033b4:	f7ff bafe 	b.w	80029b4 <HAL_PCD_IRQHandler+0x6e>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80033b8:	6822      	ldr	r2, [r4, #0]
 80033ba:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80033be:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80033c2:	041b      	lsls	r3, r3, #16
 80033c4:	0c1b      	lsrs	r3, r3, #16
 80033c6:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 80033ca:	4620      	mov	r0, r4
 80033cc:	f003 fafd 	bl	80069ca <HAL_PCD_SOFCallback>
 80033d0:	f7ff bb4c 	b.w	8002a6c <HAL_PCD_IRQHandler+0x126>
 80033d4:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80033d8:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 80033dc:	642e      	str	r6, [r5, #64]	; 0x40
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80033de:	4620      	mov	r0, r4
 80033e0:	f003 fae8 	bl	80069b4 <HAL_PCD_DataInStageCallback>
 80033e4:	f7ff bbb3 	b.w	8002b4e <HAL_PCD_IRQHandler+0x208>
 80033e8:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80033ec:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 80033f0:	641e      	str	r6, [r3, #64]	; 0x40
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80033f2:	f89a 3029 	ldrb.w	r3, [sl, #41]	; 0x29
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	f47f ae29 	bne.w	800304e <HAL_PCD_IRQHandler+0x708>
 80033fc:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8003400:	b29b      	uxth	r3, r3
 8003402:	f202 4204 	addw	r2, r2, #1028	; 0x404
 8003406:	441a      	add	r2, r3
 8003408:	0100      	lsls	r0, r0, #4
 800340a:	5a13      	ldrh	r3, [r2, r0]
 800340c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003410:	041b      	lsls	r3, r3, #16
 8003412:	0c1b      	lsrs	r3, r3, #16
 8003414:	5213      	strh	r3, [r2, r0]
 8003416:	5a13      	ldrh	r3, [r2, r0]
 8003418:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800341c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003420:	b29b      	uxth	r3, r3
 8003422:	5213      	strh	r3, [r2, r0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003424:	6823      	ldr	r3, [r4, #0]
 8003426:	f89a 2029 	ldrb.w	r2, [sl, #41]	; 0x29
 800342a:	2a00      	cmp	r2, #0
 800342c:	f47f ae1b 	bne.w	8003066 <HAL_PCD_IRQHandler+0x720>
 8003430:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8003434:	b292      	uxth	r2, r2
 8003436:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800343a:	4413      	add	r3, r2
 800343c:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 8003440:	0109      	lsls	r1, r1, #4
 8003442:	5a5a      	ldrh	r2, [r3, r1]
 8003444:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8003448:	0412      	lsls	r2, r2, #16
 800344a:	0c12      	lsrs	r2, r2, #16
 800344c:	525a      	strh	r2, [r3, r1]
 800344e:	5a5a      	ldrh	r2, [r3, r1]
 8003450:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8003454:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8003458:	b292      	uxth	r2, r2
 800345a:	525a      	strh	r2, [r3, r1]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800345c:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 8003460:	4620      	mov	r0, r4
 8003462:	f003 faa7 	bl	80069b4 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003466:	f419 4f80 	tst.w	r9, #16384	; 0x4000
 800346a:	f43f ade0 	beq.w	800302e <HAL_PCD_IRQHandler+0x6e8>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800346e:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 8003472:	6822      	ldr	r2, [r4, #0]
 8003474:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8003478:	b29b      	uxth	r3, r3
 800347a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800347e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003482:	ea48 0303 	orr.w	r3, r8, r3
 8003486:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 800348a:	e5d0      	b.n	800302e <HAL_PCD_IRQHandler+0x6e8>
 800348c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8003490:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 8003494:	641e      	str	r6, [r3, #64]	; 0x40
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003496:	f89a 3029 	ldrb.w	r3, [sl, #41]	; 0x29
 800349a:	2b00      	cmp	r3, #0
 800349c:	f47f aeda 	bne.w	8003254 <HAL_PCD_IRQHandler+0x90e>
 80034a0:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 80034a4:	b29b      	uxth	r3, r3
 80034a6:	f202 4204 	addw	r2, r2, #1028	; 0x404
 80034aa:	441a      	add	r2, r3
 80034ac:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 80034b0:	f832 300c 	ldrh.w	r3, [r2, ip]
 80034b4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80034b8:	041b      	lsls	r3, r3, #16
 80034ba:	0c1b      	lsrs	r3, r3, #16
 80034bc:	f822 300c 	strh.w	r3, [r2, ip]
 80034c0:	f832 300c 	ldrh.w	r3, [r2, ip]
 80034c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	f822 300c 	strh.w	r3, [r2, ip]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80034d2:	6823      	ldr	r3, [r4, #0]
 80034d4:	f89a 2029 	ldrb.w	r2, [sl, #41]	; 0x29
 80034d8:	2a00      	cmp	r2, #0
 80034da:	f47f aec9 	bne.w	8003270 <HAL_PCD_IRQHandler+0x92a>
 80034de:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80034e2:	b292      	uxth	r2, r2
 80034e4:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 80034e8:	0109      	lsls	r1, r1, #4
 80034ea:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80034ee:	441a      	add	r2, r3
 80034f0:	5a8b      	ldrh	r3, [r1, r2]
 80034f2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80034f6:	041b      	lsls	r3, r3, #16
 80034f8:	0c1b      	lsrs	r3, r3, #16
 80034fa:	528b      	strh	r3, [r1, r2]
 80034fc:	5a8b      	ldrh	r3, [r1, r2]
 80034fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003502:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003506:	b29b      	uxth	r3, r3
 8003508:	528b      	strh	r3, [r1, r2]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800350a:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 800350e:	4620      	mov	r0, r4
 8003510:	f003 fa50 	bl	80069b4 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003514:	f419 4f80 	tst.w	r9, #16384	; 0x4000
 8003518:	f47f ad89 	bne.w	800302e <HAL_PCD_IRQHandler+0x6e8>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800351c:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 8003520:	6822      	ldr	r2, [r4, #0]
 8003522:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8003526:	b29b      	uxth	r3, r3
 8003528:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800352c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003530:	ea48 0303 	orr.w	r3, r8, r3
 8003534:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8003538:	e579      	b.n	800302e <HAL_PCD_IRQHandler+0x6e8>
 800353a:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 800353e:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8003542:	f8c3 6180 	str.w	r6, [r3, #384]	; 0x180
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003546:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800354a:	b29b      	uxth	r3, r3
 800354c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003550:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003554:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003558:	433b      	orrs	r3, r7
 800355a:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 800355e:	e492      	b.n	8002e86 <HAL_PCD_IRQHandler+0x540>
 8003560:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8003564:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8003568:	f8c3 6180 	str.w	r6, [r3, #384]	; 0x180
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800356c:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8003570:	b29b      	uxth	r3, r3
 8003572:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003576:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800357a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800357e:	433b      	orrs	r3, r7
 8003580:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8003584:	e4ca      	b.n	8002f1c <HAL_PCD_IRQHandler+0x5d6>

08003586 <HAL_PCD_EP_Open>:
{
 8003586:	b510      	push	{r4, lr}
 8003588:	4604      	mov	r4, r0
 800358a:	468c      	mov	ip, r1
  if ((ep_addr & 0x80U) == 0x80U)
 800358c:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003590:	d12a      	bne.n	80035e8 <HAL_PCD_EP_Open+0x62>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003592:	f001 0e07 	and.w	lr, r1, #7
 8003596:	eb0e 018e 	add.w	r1, lr, lr, lsl #2
 800359a:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800359e:	f501 71b4 	add.w	r1, r1, #360	; 0x168
    ep->is_in = 0U;
 80035a2:	eb0e 0e8e 	add.w	lr, lr, lr, lsl #2
 80035a6:	eb00 0ece 	add.w	lr, r0, lr, lsl #3
 80035aa:	2000      	movs	r0, #0
 80035ac:	f88e 0169 	strb.w	r0, [lr, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 80035b0:	f00c 0c07 	and.w	ip, ip, #7
 80035b4:	f881 c000 	strb.w	ip, [r1]
  ep->maxpacket = ep_mps;
 80035b8:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;
 80035ba:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 80035bc:	784a      	ldrb	r2, [r1, #1]
 80035be:	b10a      	cbz	r2, 80035c4 <HAL_PCD_EP_Open+0x3e>
    ep->tx_fifo_num = ep->num;
 80035c0:	f8a1 c00e 	strh.w	ip, [r1, #14]
  if (ep_type == EP_TYPE_BULK)
 80035c4:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 80035c6:	bf04      	itt	eq
 80035c8:	2300      	moveq	r3, #0
 80035ca:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 80035cc:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d016      	beq.n	8003602 <HAL_PCD_EP_Open+0x7c>
 80035d4:	2301      	movs	r3, #1
 80035d6:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80035da:	6820      	ldr	r0, [r4, #0]
 80035dc:	f001 fb42 	bl	8004c64 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80035e0:	2000      	movs	r0, #0
 80035e2:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 80035e6:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035e8:	f001 0e07 	and.w	lr, r1, #7
 80035ec:	f10e 0001 	add.w	r0, lr, #1
 80035f0:	eb00 0e80 	add.w	lr, r0, r0, lsl #2
 80035f4:	eb04 01ce 	add.w	r1, r4, lr, lsl #3
    ep->is_in = 1U;
 80035f8:	f04f 0e01 	mov.w	lr, #1
 80035fc:	f881 e001 	strb.w	lr, [r1, #1]
 8003600:	e7d6      	b.n	80035b0 <HAL_PCD_EP_Open+0x2a>
  __HAL_LOCK(hpcd);
 8003602:	2002      	movs	r0, #2
 8003604:	e7ef      	b.n	80035e6 <HAL_PCD_EP_Open+0x60>

08003606 <HAL_PCD_EP_Close>:
{
 8003606:	b510      	push	{r4, lr}
 8003608:	4604      	mov	r4, r0
 800360a:	460a      	mov	r2, r1
  if ((ep_addr & 0x80U) == 0x80U)
 800360c:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003610:	d11c      	bne.n	800364c <HAL_PCD_EP_Close+0x46>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003612:	f001 0007 	and.w	r0, r1, #7
 8003616:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 800361a:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 800361e:	f503 71b4 	add.w	r1, r3, #360	; 0x168
    ep->is_in = 0U;
 8003622:	4618      	mov	r0, r3
 8003624:	2300      	movs	r3, #0
 8003626:	f880 3169 	strb.w	r3, [r0, #361]	; 0x169
  ep->num   = ep_addr & EP_ADDR_MSK;
 800362a:	f002 0207 	and.w	r2, r2, #7
 800362e:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8003630:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8003634:	2b01      	cmp	r3, #1
 8003636:	d013      	beq.n	8003660 <HAL_PCD_EP_Close+0x5a>
 8003638:	2301      	movs	r3, #1
 800363a:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800363e:	6820      	ldr	r0, [r4, #0]
 8003640:	f001 fcb7 	bl	8004fb2 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003644:	2000      	movs	r0, #0
 8003646:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 800364a:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800364c:	f001 0307 	and.w	r3, r1, #7
 8003650:	1c58      	adds	r0, r3, #1
 8003652:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8003656:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
    ep->is_in = 1U;
 800365a:	2301      	movs	r3, #1
 800365c:	704b      	strb	r3, [r1, #1]
 800365e:	e7e4      	b.n	800362a <HAL_PCD_EP_Close+0x24>
  __HAL_LOCK(hpcd);
 8003660:	2002      	movs	r0, #2
 8003662:	e7f2      	b.n	800364a <HAL_PCD_EP_Close+0x44>

08003664 <HAL_PCD_EP_Receive>:
{
 8003664:	b510      	push	{r4, lr}
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003666:	f001 0407 	and.w	r4, r1, #7
 800366a:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 800366e:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8003672:	f501 71b4 	add.w	r1, r1, #360	; 0x168
  ep->xfer_buff = pBuf;
 8003676:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
 800367a:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
 800367e:	f8cc 217c 	str.w	r2, [ip, #380]	; 0x17c
  ep->xfer_len = len;
 8003682:	f8cc 3180 	str.w	r3, [ip, #384]	; 0x180
  ep->xfer_count = 0U;
 8003686:	2300      	movs	r3, #0
 8003688:	f8cc 3184 	str.w	r3, [ip, #388]	; 0x184
  ep->is_in = 0U;
 800368c:	f88c 3169 	strb.w	r3, [ip, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 8003690:	f88c 4168 	strb.w	r4, [ip, #360]	; 0x168
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003694:	6800      	ldr	r0, [r0, #0]
 8003696:	f001 fe12 	bl	80052be <USB_EPStartXfer>
}
 800369a:	2000      	movs	r0, #0
 800369c:	bd10      	pop	{r4, pc}

0800369e <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800369e:	f001 0107 	and.w	r1, r1, #7
 80036a2:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80036a6:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
}
 80036aa:	f8d1 0184 	ldr.w	r0, [r1, #388]	; 0x184
 80036ae:	4770      	bx	lr

080036b0 <HAL_PCD_EP_Transmit>:
{
 80036b0:	b510      	push	{r4, lr}
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036b2:	f001 0407 	and.w	r4, r1, #7
 80036b6:	1c61      	adds	r1, r4, #1
 80036b8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80036bc:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
  ep->xfer_buff = pBuf;
 80036c0:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
 80036c4:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
 80036c8:	f8cc 203c 	str.w	r2, [ip, #60]	; 0x3c
  ep->xfer_len = len;
 80036cc:	f8cc 3040 	str.w	r3, [ip, #64]	; 0x40
  ep->xfer_fill_db = 1U;
 80036d0:	2201      	movs	r2, #1
 80036d2:	f88c 204c 	strb.w	r2, [ip, #76]	; 0x4c
  ep->xfer_len_db = len;
 80036d6:	f8cc 3048 	str.w	r3, [ip, #72]	; 0x48
  ep->xfer_count = 0U;
 80036da:	2300      	movs	r3, #0
 80036dc:	f8cc 3044 	str.w	r3, [ip, #68]	; 0x44
  ep->is_in = 1U;
 80036e0:	f88c 2029 	strb.w	r2, [ip, #41]	; 0x29
  ep->num = ep_addr & EP_ADDR_MSK;
 80036e4:	f88c 4028 	strb.w	r4, [ip, #40]	; 0x28
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80036e8:	6800      	ldr	r0, [r0, #0]
 80036ea:	f001 fde8 	bl	80052be <USB_EPStartXfer>
}
 80036ee:	2000      	movs	r0, #0
 80036f0:	bd10      	pop	{r4, pc}

080036f2 <HAL_PCD_EP_SetStall>:
{
 80036f2:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80036f4:	f001 0507 	and.w	r5, r1, #7
 80036f8:	6842      	ldr	r2, [r0, #4]
 80036fa:	4295      	cmp	r5, r2
 80036fc:	d831      	bhi.n	8003762 <HAL_PCD_EP_SetStall+0x70>
 80036fe:	4604      	mov	r4, r0
 8003700:	460b      	mov	r3, r1
  if ((0x80U & ep_addr) == 0x80U)
 8003702:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003706:	d11e      	bne.n	8003746 <HAL_PCD_EP_SetStall+0x54>
    ep = &hpcd->OUT_ep[ep_addr];
 8003708:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800370c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8003710:	f501 71b4 	add.w	r1, r1, #360	; 0x168
    ep->is_in = 0U;
 8003714:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003718:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800371c:	2200      	movs	r2, #0
 800371e:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169
  ep->is_stall = 1U;
 8003722:	2301      	movs	r3, #1
 8003724:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003726:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 8003728:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 800372c:	2b01      	cmp	r3, #1
 800372e:	d01a      	beq.n	8003766 <HAL_PCD_EP_SetStall+0x74>
 8003730:	2301      	movs	r3, #1
 8003732:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003736:	6820      	ldr	r0, [r4, #0]
 8003738:	f001 fd24 	bl	8005184 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800373c:	b15d      	cbz	r5, 8003756 <HAL_PCD_EP_SetStall+0x64>
  __HAL_UNLOCK(hpcd);
 800373e:	2000      	movs	r0, #0
 8003740:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8003744:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003746:	1c69      	adds	r1, r5, #1
 8003748:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800374c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 8003750:	2201      	movs	r2, #1
 8003752:	704a      	strb	r2, [r1, #1]
 8003754:	e7e5      	b.n	8003722 <HAL_PCD_EP_SetStall+0x30>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003756:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 800375a:	6820      	ldr	r0, [r4, #0]
 800375c:	f001 fd96 	bl	800528c <USB_EP0_OutStart>
 8003760:	e7ed      	b.n	800373e <HAL_PCD_EP_SetStall+0x4c>
    return HAL_ERROR;
 8003762:	2001      	movs	r0, #1
 8003764:	e7ee      	b.n	8003744 <HAL_PCD_EP_SetStall+0x52>
  __HAL_LOCK(hpcd);
 8003766:	2002      	movs	r0, #2
 8003768:	e7ec      	b.n	8003744 <HAL_PCD_EP_SetStall+0x52>

0800376a <HAL_PCD_EP_ClrStall>:
{
 800376a:	460b      	mov	r3, r1
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800376c:	f001 010f 	and.w	r1, r1, #15
 8003770:	6842      	ldr	r2, [r0, #4]
 8003772:	4291      	cmp	r1, r2
 8003774:	d830      	bhi.n	80037d8 <HAL_PCD_EP_ClrStall+0x6e>
{
 8003776:	b510      	push	{r4, lr}
 8003778:	4604      	mov	r4, r0
  if ((0x80U & ep_addr) == 0x80U)
 800377a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800377e:	d121      	bne.n	80037c4 <HAL_PCD_EP_ClrStall+0x5a>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003780:	f003 0207 	and.w	r2, r3, #7
 8003784:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8003788:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800378c:	f501 71b4 	add.w	r1, r1, #360	; 0x168
    ep->is_in = 0U;
 8003790:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003794:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8003798:	2000      	movs	r0, #0
 800379a:	f882 0169 	strb.w	r0, [r2, #361]	; 0x169
  ep->is_stall = 0U;
 800379e:	2200      	movs	r2, #0
 80037a0:	708a      	strb	r2, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80037a2:	f003 0307 	and.w	r3, r3, #7
 80037a6:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 80037a8:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d015      	beq.n	80037dc <HAL_PCD_EP_ClrStall+0x72>
 80037b0:	2301      	movs	r3, #1
 80037b2:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80037b6:	6820      	ldr	r0, [r4, #0]
 80037b8:	f001 fd09 	bl	80051ce <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80037bc:	2000      	movs	r0, #0
 80037be:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 80037c2:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037c4:	f003 0107 	and.w	r1, r3, #7
 80037c8:	1c4a      	adds	r2, r1, #1
 80037ca:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 80037ce:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 80037d2:	2001      	movs	r0, #1
 80037d4:	7048      	strb	r0, [r1, #1]
 80037d6:	e7e2      	b.n	800379e <HAL_PCD_EP_ClrStall+0x34>
    return HAL_ERROR;
 80037d8:	2001      	movs	r0, #1
}
 80037da:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 80037dc:	2002      	movs	r0, #2
 80037de:	e7f0      	b.n	80037c2 <HAL_PCD_EP_ClrStall+0x58>

080037e0 <HAL_PCDEx_PMAConfig>:
                                       uint16_t ep_kind, uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80037e0:	f011 0f80 	tst.w	r1, #128	; 0x80
 80037e4:	d00b      	beq.n	80037fe <HAL_PCDEx_PMAConfig+0x1e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037e6:	f001 0107 	and.w	r1, r1, #7
 80037ea:	3101      	adds	r1, #1
 80037ec:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80037f0:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80037f4:	b952      	cbnz	r2, 800380c <HAL_PCDEx_PMAConfig+0x2c>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80037f6:	730a      	strb	r2, [r1, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80037f8:	80cb      	strh	r3, [r1, #6]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }

  return HAL_OK;
}
 80037fa:	2000      	movs	r0, #0
 80037fc:	4770      	bx	lr
    ep = &hpcd->OUT_ep[ep_addr];
 80037fe:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8003802:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8003806:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 800380a:	e7f3      	b.n	80037f4 <HAL_PCDEx_PMAConfig+0x14>
    ep->doublebuffer = 1U;
 800380c:	2201      	movs	r2, #1
 800380e:	730a      	strb	r2, [r1, #12]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003810:	810b      	strh	r3, [r1, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003812:	0c1b      	lsrs	r3, r3, #16
 8003814:	814b      	strh	r3, [r1, #10]
 8003816:	e7f0      	b.n	80037fa <HAL_PCDEx_PMAConfig+0x1a>

08003818 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003818:	2800      	cmp	r0, #0
 800381a:	f000 8201 	beq.w	8003c20 <HAL_RCC_OscConfig+0x408>
{
 800381e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003822:	b082      	sub	sp, #8
 8003824:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003826:	6803      	ldr	r3, [r0, #0]
 8003828:	f013 0f01 	tst.w	r3, #1
 800382c:	d02c      	beq.n	8003888 <HAL_RCC_OscConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800382e:	4b9f      	ldr	r3, [pc, #636]	; (8003aac <HAL_RCC_OscConfig+0x294>)
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	f003 030c 	and.w	r3, r3, #12
 8003836:	2b04      	cmp	r3, #4
 8003838:	d01d      	beq.n	8003876 <HAL_RCC_OscConfig+0x5e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800383a:	4b9c      	ldr	r3, [pc, #624]	; (8003aac <HAL_RCC_OscConfig+0x294>)
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	f003 030c 	and.w	r3, r3, #12
 8003842:	2b08      	cmp	r3, #8
 8003844:	d012      	beq.n	800386c <HAL_RCC_OscConfig+0x54>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003846:	6863      	ldr	r3, [r4, #4]
 8003848:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800384c:	d041      	beq.n	80038d2 <HAL_RCC_OscConfig+0xba>
 800384e:	2b00      	cmp	r3, #0
 8003850:	d155      	bne.n	80038fe <HAL_RCC_OscConfig+0xe6>
 8003852:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003856:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003860:	601a      	str	r2, [r3, #0]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003868:	601a      	str	r2, [r3, #0]
 800386a:	e037      	b.n	80038dc <HAL_RCC_OscConfig+0xc4>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800386c:	4b8f      	ldr	r3, [pc, #572]	; (8003aac <HAL_RCC_OscConfig+0x294>)
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003874:	d0e7      	beq.n	8003846 <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003876:	4b8d      	ldr	r3, [pc, #564]	; (8003aac <HAL_RCC_OscConfig+0x294>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800387e:	d003      	beq.n	8003888 <HAL_RCC_OscConfig+0x70>
 8003880:	6863      	ldr	r3, [r4, #4]
 8003882:	2b00      	cmp	r3, #0
 8003884:	f000 81ce 	beq.w	8003c24 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003888:	6823      	ldr	r3, [r4, #0]
 800388a:	f013 0f02 	tst.w	r3, #2
 800388e:	d075      	beq.n	800397c <HAL_RCC_OscConfig+0x164>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003890:	4b86      	ldr	r3, [pc, #536]	; (8003aac <HAL_RCC_OscConfig+0x294>)
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	f013 0f0c 	tst.w	r3, #12
 8003898:	d05f      	beq.n	800395a <HAL_RCC_OscConfig+0x142>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800389a:	4b84      	ldr	r3, [pc, #528]	; (8003aac <HAL_RCC_OscConfig+0x294>)
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	f003 030c 	and.w	r3, r3, #12
 80038a2:	2b08      	cmp	r3, #8
 80038a4:	d054      	beq.n	8003950 <HAL_RCC_OscConfig+0x138>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80038a6:	6923      	ldr	r3, [r4, #16]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	f000 808a 	beq.w	80039c2 <HAL_RCC_OscConfig+0x1aa>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038ae:	4b80      	ldr	r3, [pc, #512]	; (8003ab0 <HAL_RCC_OscConfig+0x298>)
 80038b0:	2201      	movs	r2, #1
 80038b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038b4:	f7fe fc24 	bl	8002100 <HAL_GetTick>
 80038b8:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038ba:	4e7c      	ldr	r6, [pc, #496]	; (8003aac <HAL_RCC_OscConfig+0x294>)
 80038bc:	6833      	ldr	r3, [r6, #0]
 80038be:	f013 0f02 	tst.w	r3, #2
 80038c2:	d175      	bne.n	80039b0 <HAL_RCC_OscConfig+0x198>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038c4:	f7fe fc1c 	bl	8002100 <HAL_GetTick>
 80038c8:	1b40      	subs	r0, r0, r5
 80038ca:	2802      	cmp	r0, #2
 80038cc:	d9f6      	bls.n	80038bc <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_TIMEOUT;
 80038ce:	2003      	movs	r0, #3
 80038d0:	e1ad      	b.n	8003c2e <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038d2:	4a76      	ldr	r2, [pc, #472]	; (8003aac <HAL_RCC_OscConfig+0x294>)
 80038d4:	6813      	ldr	r3, [r2, #0]
 80038d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038da:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038dc:	6863      	ldr	r3, [r4, #4]
 80038de:	b343      	cbz	r3, 8003932 <HAL_RCC_OscConfig+0x11a>
        tickstart = HAL_GetTick();
 80038e0:	f7fe fc0e 	bl	8002100 <HAL_GetTick>
 80038e4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038e6:	4e71      	ldr	r6, [pc, #452]	; (8003aac <HAL_RCC_OscConfig+0x294>)
 80038e8:	6833      	ldr	r3, [r6, #0]
 80038ea:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80038ee:	d1cb      	bne.n	8003888 <HAL_RCC_OscConfig+0x70>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038f0:	f7fe fc06 	bl	8002100 <HAL_GetTick>
 80038f4:	1b40      	subs	r0, r0, r5
 80038f6:	2864      	cmp	r0, #100	; 0x64
 80038f8:	d9f6      	bls.n	80038e8 <HAL_RCC_OscConfig+0xd0>
            return HAL_TIMEOUT;
 80038fa:	2003      	movs	r0, #3
 80038fc:	e197      	b.n	8003c2e <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038fe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003902:	d009      	beq.n	8003918 <HAL_RCC_OscConfig+0x100>
 8003904:	4b69      	ldr	r3, [pc, #420]	; (8003aac <HAL_RCC_OscConfig+0x294>)
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800390c:	601a      	str	r2, [r3, #0]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003914:	601a      	str	r2, [r3, #0]
 8003916:	e7e1      	b.n	80038dc <HAL_RCC_OscConfig+0xc4>
 8003918:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800391c:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003926:	601a      	str	r2, [r3, #0]
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800392e:	601a      	str	r2, [r3, #0]
 8003930:	e7d4      	b.n	80038dc <HAL_RCC_OscConfig+0xc4>
        tickstart = HAL_GetTick();
 8003932:	f7fe fbe5 	bl	8002100 <HAL_GetTick>
 8003936:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003938:	4e5c      	ldr	r6, [pc, #368]	; (8003aac <HAL_RCC_OscConfig+0x294>)
 800393a:	6833      	ldr	r3, [r6, #0]
 800393c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003940:	d0a2      	beq.n	8003888 <HAL_RCC_OscConfig+0x70>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003942:	f7fe fbdd 	bl	8002100 <HAL_GetTick>
 8003946:	1b40      	subs	r0, r0, r5
 8003948:	2864      	cmp	r0, #100	; 0x64
 800394a:	d9f6      	bls.n	800393a <HAL_RCC_OscConfig+0x122>
            return HAL_TIMEOUT;
 800394c:	2003      	movs	r0, #3
 800394e:	e16e      	b.n	8003c2e <HAL_RCC_OscConfig+0x416>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003950:	4b56      	ldr	r3, [pc, #344]	; (8003aac <HAL_RCC_OscConfig+0x294>)
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003958:	d1a5      	bne.n	80038a6 <HAL_RCC_OscConfig+0x8e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800395a:	4b54      	ldr	r3, [pc, #336]	; (8003aac <HAL_RCC_OscConfig+0x294>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f013 0f02 	tst.w	r3, #2
 8003962:	d003      	beq.n	800396c <HAL_RCC_OscConfig+0x154>
 8003964:	6923      	ldr	r3, [r4, #16]
 8003966:	2b01      	cmp	r3, #1
 8003968:	f040 815e 	bne.w	8003c28 <HAL_RCC_OscConfig+0x410>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800396c:	4a4f      	ldr	r2, [pc, #316]	; (8003aac <HAL_RCC_OscConfig+0x294>)
 800396e:	6813      	ldr	r3, [r2, #0]
 8003970:	6961      	ldr	r1, [r4, #20]
 8003972:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003976:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800397a:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800397c:	6823      	ldr	r3, [r4, #0]
 800397e:	f013 0f08 	tst.w	r3, #8
 8003982:	d03d      	beq.n	8003a00 <HAL_RCC_OscConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003984:	69a3      	ldr	r3, [r4, #24]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d066      	beq.n	8003a58 <HAL_RCC_OscConfig+0x240>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800398a:	4b49      	ldr	r3, [pc, #292]	; (8003ab0 <HAL_RCC_OscConfig+0x298>)
 800398c:	2201      	movs	r2, #1
 800398e:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003992:	f7fe fbb5 	bl	8002100 <HAL_GetTick>
 8003996:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003998:	4e44      	ldr	r6, [pc, #272]	; (8003aac <HAL_RCC_OscConfig+0x294>)
 800399a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800399c:	f013 0f02 	tst.w	r3, #2
 80039a0:	d121      	bne.n	80039e6 <HAL_RCC_OscConfig+0x1ce>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039a2:	f7fe fbad 	bl	8002100 <HAL_GetTick>
 80039a6:	1b40      	subs	r0, r0, r5
 80039a8:	2802      	cmp	r0, #2
 80039aa:	d9f6      	bls.n	800399a <HAL_RCC_OscConfig+0x182>
        {
          return HAL_TIMEOUT;
 80039ac:	2003      	movs	r0, #3
 80039ae:	e13e      	b.n	8003c2e <HAL_RCC_OscConfig+0x416>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039b0:	4a3e      	ldr	r2, [pc, #248]	; (8003aac <HAL_RCC_OscConfig+0x294>)
 80039b2:	6813      	ldr	r3, [r2, #0]
 80039b4:	6961      	ldr	r1, [r4, #20]
 80039b6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80039ba:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80039be:	6013      	str	r3, [r2, #0]
 80039c0:	e7dc      	b.n	800397c <HAL_RCC_OscConfig+0x164>
        __HAL_RCC_HSI_DISABLE();
 80039c2:	4b3b      	ldr	r3, [pc, #236]	; (8003ab0 <HAL_RCC_OscConfig+0x298>)
 80039c4:	2200      	movs	r2, #0
 80039c6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80039c8:	f7fe fb9a 	bl	8002100 <HAL_GetTick>
 80039cc:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039ce:	4e37      	ldr	r6, [pc, #220]	; (8003aac <HAL_RCC_OscConfig+0x294>)
 80039d0:	6833      	ldr	r3, [r6, #0]
 80039d2:	f013 0f02 	tst.w	r3, #2
 80039d6:	d0d1      	beq.n	800397c <HAL_RCC_OscConfig+0x164>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039d8:	f7fe fb92 	bl	8002100 <HAL_GetTick>
 80039dc:	1b40      	subs	r0, r0, r5
 80039de:	2802      	cmp	r0, #2
 80039e0:	d9f6      	bls.n	80039d0 <HAL_RCC_OscConfig+0x1b8>
            return HAL_TIMEOUT;
 80039e2:	2003      	movs	r0, #3
 80039e4:	e123      	b.n	8003c2e <HAL_RCC_OscConfig+0x416>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80039e6:	4b33      	ldr	r3, [pc, #204]	; (8003ab4 <HAL_RCC_OscConfig+0x29c>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a33      	ldr	r2, [pc, #204]	; (8003ab8 <HAL_RCC_OscConfig+0x2a0>)
 80039ec:	fba2 2303 	umull	r2, r3, r2, r3
 80039f0:	0a5b      	lsrs	r3, r3, #9
 80039f2:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 80039f4:	bf00      	nop
  }
  while (Delay --);
 80039f6:	9b01      	ldr	r3, [sp, #4]
 80039f8:	1e5a      	subs	r2, r3, #1
 80039fa:	9201      	str	r2, [sp, #4]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d1f9      	bne.n	80039f4 <HAL_RCC_OscConfig+0x1dc>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a00:	6823      	ldr	r3, [r4, #0]
 8003a02:	f013 0f04 	tst.w	r3, #4
 8003a06:	f000 809b 	beq.w	8003b40 <HAL_RCC_OscConfig+0x328>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a0a:	4b28      	ldr	r3, [pc, #160]	; (8003aac <HAL_RCC_OscConfig+0x294>)
 8003a0c:	69db      	ldr	r3, [r3, #28]
 8003a0e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003a12:	d134      	bne.n	8003a7e <HAL_RCC_OscConfig+0x266>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a14:	4b25      	ldr	r3, [pc, #148]	; (8003aac <HAL_RCC_OscConfig+0x294>)
 8003a16:	69da      	ldr	r2, [r3, #28]
 8003a18:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003a1c:	61da      	str	r2, [r3, #28]
 8003a1e:	69db      	ldr	r3, [r3, #28]
 8003a20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a24:	9300      	str	r3, [sp, #0]
 8003a26:	9b00      	ldr	r3, [sp, #0]
      pwrclkchanged = SET;
 8003a28:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a2a:	4b24      	ldr	r3, [pc, #144]	; (8003abc <HAL_RCC_OscConfig+0x2a4>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003a32:	d026      	beq.n	8003a82 <HAL_RCC_OscConfig+0x26a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a34:	68e3      	ldr	r3, [r4, #12]
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d042      	beq.n	8003ac0 <HAL_RCC_OscConfig+0x2a8>
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d158      	bne.n	8003af0 <HAL_RCC_OscConfig+0x2d8>
 8003a3e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003a42:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8003a46:	6a1a      	ldr	r2, [r3, #32]
 8003a48:	f022 0201 	bic.w	r2, r2, #1
 8003a4c:	621a      	str	r2, [r3, #32]
 8003a4e:	6a1a      	ldr	r2, [r3, #32]
 8003a50:	f022 0204 	bic.w	r2, r2, #4
 8003a54:	621a      	str	r2, [r3, #32]
 8003a56:	e038      	b.n	8003aca <HAL_RCC_OscConfig+0x2b2>
      __HAL_RCC_LSI_DISABLE();
 8003a58:	4b15      	ldr	r3, [pc, #84]	; (8003ab0 <HAL_RCC_OscConfig+0x298>)
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8003a60:	f7fe fb4e 	bl	8002100 <HAL_GetTick>
 8003a64:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a66:	4e11      	ldr	r6, [pc, #68]	; (8003aac <HAL_RCC_OscConfig+0x294>)
 8003a68:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8003a6a:	f013 0f02 	tst.w	r3, #2
 8003a6e:	d0c7      	beq.n	8003a00 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a70:	f7fe fb46 	bl	8002100 <HAL_GetTick>
 8003a74:	1b40      	subs	r0, r0, r5
 8003a76:	2802      	cmp	r0, #2
 8003a78:	d9f6      	bls.n	8003a68 <HAL_RCC_OscConfig+0x250>
          return HAL_TIMEOUT;
 8003a7a:	2003      	movs	r0, #3
 8003a7c:	e0d7      	b.n	8003c2e <HAL_RCC_OscConfig+0x416>
    FlagStatus       pwrclkchanged = RESET;
 8003a7e:	2500      	movs	r5, #0
 8003a80:	e7d3      	b.n	8003a2a <HAL_RCC_OscConfig+0x212>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a82:	4a0e      	ldr	r2, [pc, #56]	; (8003abc <HAL_RCC_OscConfig+0x2a4>)
 8003a84:	6813      	ldr	r3, [r2, #0]
 8003a86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a8a:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8003a8c:	f7fe fb38 	bl	8002100 <HAL_GetTick>
 8003a90:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a92:	4f0a      	ldr	r7, [pc, #40]	; (8003abc <HAL_RCC_OscConfig+0x2a4>)
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003a9a:	d1cb      	bne.n	8003a34 <HAL_RCC_OscConfig+0x21c>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a9c:	f7fe fb30 	bl	8002100 <HAL_GetTick>
 8003aa0:	1b80      	subs	r0, r0, r6
 8003aa2:	2864      	cmp	r0, #100	; 0x64
 8003aa4:	d9f6      	bls.n	8003a94 <HAL_RCC_OscConfig+0x27c>
          return HAL_TIMEOUT;
 8003aa6:	2003      	movs	r0, #3
 8003aa8:	e0c1      	b.n	8003c2e <HAL_RCC_OscConfig+0x416>
 8003aaa:	bf00      	nop
 8003aac:	40021000 	.word	0x40021000
 8003ab0:	42420000 	.word	0x42420000
 8003ab4:	2000000c 	.word	0x2000000c
 8003ab8:	10624dd3 	.word	0x10624dd3
 8003abc:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ac0:	4a5e      	ldr	r2, [pc, #376]	; (8003c3c <HAL_RCC_OscConfig+0x424>)
 8003ac2:	6a13      	ldr	r3, [r2, #32]
 8003ac4:	f043 0301 	orr.w	r3, r3, #1
 8003ac8:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003aca:	68e3      	ldr	r3, [r4, #12]
 8003acc:	b333      	cbz	r3, 8003b1c <HAL_RCC_OscConfig+0x304>
      tickstart = HAL_GetTick();
 8003ace:	f7fe fb17 	bl	8002100 <HAL_GetTick>
 8003ad2:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ad4:	4f59      	ldr	r7, [pc, #356]	; (8003c3c <HAL_RCC_OscConfig+0x424>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ad6:	f241 3888 	movw	r8, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ada:	6a3b      	ldr	r3, [r7, #32]
 8003adc:	f013 0f02 	tst.w	r3, #2
 8003ae0:	d12d      	bne.n	8003b3e <HAL_RCC_OscConfig+0x326>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ae2:	f7fe fb0d 	bl	8002100 <HAL_GetTick>
 8003ae6:	1b80      	subs	r0, r0, r6
 8003ae8:	4540      	cmp	r0, r8
 8003aea:	d9f6      	bls.n	8003ada <HAL_RCC_OscConfig+0x2c2>
          return HAL_TIMEOUT;
 8003aec:	2003      	movs	r0, #3
 8003aee:	e09e      	b.n	8003c2e <HAL_RCC_OscConfig+0x416>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003af0:	2b05      	cmp	r3, #5
 8003af2:	d009      	beq.n	8003b08 <HAL_RCC_OscConfig+0x2f0>
 8003af4:	4b51      	ldr	r3, [pc, #324]	; (8003c3c <HAL_RCC_OscConfig+0x424>)
 8003af6:	6a1a      	ldr	r2, [r3, #32]
 8003af8:	f022 0201 	bic.w	r2, r2, #1
 8003afc:	621a      	str	r2, [r3, #32]
 8003afe:	6a1a      	ldr	r2, [r3, #32]
 8003b00:	f022 0204 	bic.w	r2, r2, #4
 8003b04:	621a      	str	r2, [r3, #32]
 8003b06:	e7e0      	b.n	8003aca <HAL_RCC_OscConfig+0x2b2>
 8003b08:	4b4c      	ldr	r3, [pc, #304]	; (8003c3c <HAL_RCC_OscConfig+0x424>)
 8003b0a:	6a1a      	ldr	r2, [r3, #32]
 8003b0c:	f042 0204 	orr.w	r2, r2, #4
 8003b10:	621a      	str	r2, [r3, #32]
 8003b12:	6a1a      	ldr	r2, [r3, #32]
 8003b14:	f042 0201 	orr.w	r2, r2, #1
 8003b18:	621a      	str	r2, [r3, #32]
 8003b1a:	e7d6      	b.n	8003aca <HAL_RCC_OscConfig+0x2b2>
      tickstart = HAL_GetTick();
 8003b1c:	f7fe faf0 	bl	8002100 <HAL_GetTick>
 8003b20:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b22:	4f46      	ldr	r7, [pc, #280]	; (8003c3c <HAL_RCC_OscConfig+0x424>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b24:	f241 3888 	movw	r8, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b28:	6a3b      	ldr	r3, [r7, #32]
 8003b2a:	f013 0f02 	tst.w	r3, #2
 8003b2e:	d006      	beq.n	8003b3e <HAL_RCC_OscConfig+0x326>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b30:	f7fe fae6 	bl	8002100 <HAL_GetTick>
 8003b34:	1b80      	subs	r0, r0, r6
 8003b36:	4540      	cmp	r0, r8
 8003b38:	d9f6      	bls.n	8003b28 <HAL_RCC_OscConfig+0x310>
          return HAL_TIMEOUT;
 8003b3a:	2003      	movs	r0, #3
 8003b3c:	e077      	b.n	8003c2e <HAL_RCC_OscConfig+0x416>
    if (pwrclkchanged == SET)
 8003b3e:	b9e5      	cbnz	r5, 8003b7a <HAL_RCC_OscConfig+0x362>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b40:	69e3      	ldr	r3, [r4, #28]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d072      	beq.n	8003c2c <HAL_RCC_OscConfig+0x414>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b46:	4a3d      	ldr	r2, [pc, #244]	; (8003c3c <HAL_RCC_OscConfig+0x424>)
 8003b48:	6852      	ldr	r2, [r2, #4]
 8003b4a:	f002 020c 	and.w	r2, r2, #12
 8003b4e:	2a08      	cmp	r2, #8
 8003b50:	d056      	beq.n	8003c00 <HAL_RCC_OscConfig+0x3e8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b52:	2b02      	cmp	r3, #2
 8003b54:	d017      	beq.n	8003b86 <HAL_RCC_OscConfig+0x36e>
        __HAL_RCC_PLL_DISABLE();
 8003b56:	4b3a      	ldr	r3, [pc, #232]	; (8003c40 <HAL_RCC_OscConfig+0x428>)
 8003b58:	2200      	movs	r2, #0
 8003b5a:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8003b5c:	f7fe fad0 	bl	8002100 <HAL_GetTick>
 8003b60:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b62:	4d36      	ldr	r5, [pc, #216]	; (8003c3c <HAL_RCC_OscConfig+0x424>)
 8003b64:	682b      	ldr	r3, [r5, #0]
 8003b66:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003b6a:	d047      	beq.n	8003bfc <HAL_RCC_OscConfig+0x3e4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b6c:	f7fe fac8 	bl	8002100 <HAL_GetTick>
 8003b70:	1b00      	subs	r0, r0, r4
 8003b72:	2802      	cmp	r0, #2
 8003b74:	d9f6      	bls.n	8003b64 <HAL_RCC_OscConfig+0x34c>
            return HAL_TIMEOUT;
 8003b76:	2003      	movs	r0, #3
 8003b78:	e059      	b.n	8003c2e <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b7a:	4a30      	ldr	r2, [pc, #192]	; (8003c3c <HAL_RCC_OscConfig+0x424>)
 8003b7c:	69d3      	ldr	r3, [r2, #28]
 8003b7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b82:	61d3      	str	r3, [r2, #28]
 8003b84:	e7dc      	b.n	8003b40 <HAL_RCC_OscConfig+0x328>
        __HAL_RCC_PLL_DISABLE();
 8003b86:	4b2e      	ldr	r3, [pc, #184]	; (8003c40 <HAL_RCC_OscConfig+0x428>)
 8003b88:	2200      	movs	r2, #0
 8003b8a:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8003b8c:	f7fe fab8 	bl	8002100 <HAL_GetTick>
 8003b90:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b92:	4e2a      	ldr	r6, [pc, #168]	; (8003c3c <HAL_RCC_OscConfig+0x424>)
 8003b94:	6833      	ldr	r3, [r6, #0]
 8003b96:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003b9a:	d006      	beq.n	8003baa <HAL_RCC_OscConfig+0x392>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b9c:	f7fe fab0 	bl	8002100 <HAL_GetTick>
 8003ba0:	1b40      	subs	r0, r0, r5
 8003ba2:	2802      	cmp	r0, #2
 8003ba4:	d9f6      	bls.n	8003b94 <HAL_RCC_OscConfig+0x37c>
            return HAL_TIMEOUT;
 8003ba6:	2003      	movs	r0, #3
 8003ba8:	e041      	b.n	8003c2e <HAL_RCC_OscConfig+0x416>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003baa:	6a23      	ldr	r3, [r4, #32]
 8003bac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bb0:	d01a      	beq.n	8003be8 <HAL_RCC_OscConfig+0x3d0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003bb2:	4922      	ldr	r1, [pc, #136]	; (8003c3c <HAL_RCC_OscConfig+0x424>)
 8003bb4:	684a      	ldr	r2, [r1, #4]
 8003bb6:	6a23      	ldr	r3, [r4, #32]
 8003bb8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003bba:	4303      	orrs	r3, r0
 8003bbc:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8003bc4:	4b1e      	ldr	r3, [pc, #120]	; (8003c40 <HAL_RCC_OscConfig+0x428>)
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8003bca:	f7fe fa99 	bl	8002100 <HAL_GetTick>
 8003bce:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003bd0:	4d1a      	ldr	r5, [pc, #104]	; (8003c3c <HAL_RCC_OscConfig+0x424>)
 8003bd2:	682b      	ldr	r3, [r5, #0]
 8003bd4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003bd8:	d10e      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x3e0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bda:	f7fe fa91 	bl	8002100 <HAL_GetTick>
 8003bde:	1b00      	subs	r0, r0, r4
 8003be0:	2802      	cmp	r0, #2
 8003be2:	d9f6      	bls.n	8003bd2 <HAL_RCC_OscConfig+0x3ba>
            return HAL_TIMEOUT;
 8003be4:	2003      	movs	r0, #3
 8003be6:	e022      	b.n	8003c2e <HAL_RCC_OscConfig+0x416>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003be8:	4a14      	ldr	r2, [pc, #80]	; (8003c3c <HAL_RCC_OscConfig+0x424>)
 8003bea:	6853      	ldr	r3, [r2, #4]
 8003bec:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003bf0:	68a1      	ldr	r1, [r4, #8]
 8003bf2:	430b      	orrs	r3, r1
 8003bf4:	6053      	str	r3, [r2, #4]
 8003bf6:	e7dc      	b.n	8003bb2 <HAL_RCC_OscConfig+0x39a>
  return HAL_OK;
 8003bf8:	2000      	movs	r0, #0
 8003bfa:	e018      	b.n	8003c2e <HAL_RCC_OscConfig+0x416>
 8003bfc:	2000      	movs	r0, #0
 8003bfe:	e016      	b.n	8003c2e <HAL_RCC_OscConfig+0x416>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d017      	beq.n	8003c34 <HAL_RCC_OscConfig+0x41c>
        pll_config = RCC->CFGR;
 8003c04:	4b0d      	ldr	r3, [pc, #52]	; (8003c3c <HAL_RCC_OscConfig+0x424>)
 8003c06:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c08:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8003c0c:	6a22      	ldr	r2, [r4, #32]
 8003c0e:	4291      	cmp	r1, r2
 8003c10:	d112      	bne.n	8003c38 <HAL_RCC_OscConfig+0x420>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003c12:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c16:	6a60      	ldr	r0, [r4, #36]	; 0x24
        return HAL_ERROR;
 8003c18:	1a18      	subs	r0, r3, r0
 8003c1a:	bf18      	it	ne
 8003c1c:	2001      	movne	r0, #1
 8003c1e:	e006      	b.n	8003c2e <HAL_RCC_OscConfig+0x416>
    return HAL_ERROR;
 8003c20:	2001      	movs	r0, #1
}
 8003c22:	4770      	bx	lr
        return HAL_ERROR;
 8003c24:	2001      	movs	r0, #1
 8003c26:	e002      	b.n	8003c2e <HAL_RCC_OscConfig+0x416>
        return HAL_ERROR;
 8003c28:	2001      	movs	r0, #1
 8003c2a:	e000      	b.n	8003c2e <HAL_RCC_OscConfig+0x416>
  return HAL_OK;
 8003c2c:	2000      	movs	r0, #0
}
 8003c2e:	b002      	add	sp, #8
 8003c30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_ERROR;
 8003c34:	2001      	movs	r0, #1
 8003c36:	e7fa      	b.n	8003c2e <HAL_RCC_OscConfig+0x416>
          return HAL_ERROR;
 8003c38:	2001      	movs	r0, #1
 8003c3a:	e7f8      	b.n	8003c2e <HAL_RCC_OscConfig+0x416>
 8003c3c:	40021000 	.word	0x40021000
 8003c40:	42420000 	.word	0x42420000

08003c44 <HAL_RCC_GetSysClockFreq>:
{
 8003c44:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003c46:	4b17      	ldr	r3, [pc, #92]	; (8003ca4 <HAL_RCC_GetSysClockFreq+0x60>)
 8003c48:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c4a:	f10d 0c18 	add.w	ip, sp, #24
 8003c4e:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003c52:	f240 2301 	movw	r3, #513	; 0x201
 8003c56:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8003c5a:	4b13      	ldr	r3, [pc, #76]	; (8003ca8 <HAL_RCC_GetSysClockFreq+0x64>)
 8003c5c:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8003c5e:	f003 020c 	and.w	r2, r3, #12
 8003c62:	2a08      	cmp	r2, #8
 8003c64:	d002      	beq.n	8003c6c <HAL_RCC_GetSysClockFreq+0x28>
      sysclockfreq = HSE_VALUE;
 8003c66:	4811      	ldr	r0, [pc, #68]	; (8003cac <HAL_RCC_GetSysClockFreq+0x68>)
}
 8003c68:	b006      	add	sp, #24
 8003c6a:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003c6c:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8003c70:	3218      	adds	r2, #24
 8003c72:	446a      	add	r2, sp
 8003c74:	f812 0c10 	ldrb.w	r0, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003c78:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003c7c:	d00d      	beq.n	8003c9a <HAL_RCC_GetSysClockFreq+0x56>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003c7e:	4b0a      	ldr	r3, [pc, #40]	; (8003ca8 <HAL_RCC_GetSysClockFreq+0x64>)
 8003c80:	685b      	ldr	r3, [r3, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003c82:	4a0a      	ldr	r2, [pc, #40]	; (8003cac <HAL_RCC_GetSysClockFreq+0x68>)
 8003c84:	fb02 f000 	mul.w	r0, r2, r0
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003c88:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8003c8c:	3318      	adds	r3, #24
 8003c8e:	446b      	add	r3, sp
 8003c90:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003c94:	fbb0 f0f3 	udiv	r0, r0, r3
 8003c98:	e7e6      	b.n	8003c68 <HAL_RCC_GetSysClockFreq+0x24>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003c9a:	4b05      	ldr	r3, [pc, #20]	; (8003cb0 <HAL_RCC_GetSysClockFreq+0x6c>)
 8003c9c:	fb03 f000 	mul.w	r0, r3, r0
 8003ca0:	e7e2      	b.n	8003c68 <HAL_RCC_GetSysClockFreq+0x24>
 8003ca2:	bf00      	nop
 8003ca4:	0800b404 	.word	0x0800b404
 8003ca8:	40021000 	.word	0x40021000
 8003cac:	007a1200 	.word	0x007a1200
 8003cb0:	003d0900 	.word	0x003d0900

08003cb4 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8003cb4:	2800      	cmp	r0, #0
 8003cb6:	f000 80a2 	beq.w	8003dfe <HAL_RCC_ClockConfig+0x14a>
{
 8003cba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003cbe:	460d      	mov	r5, r1
 8003cc0:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003cc2:	4b53      	ldr	r3, [pc, #332]	; (8003e10 <HAL_RCC_ClockConfig+0x15c>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 0307 	and.w	r3, r3, #7
 8003cca:	428b      	cmp	r3, r1
 8003ccc:	d20b      	bcs.n	8003ce6 <HAL_RCC_ClockConfig+0x32>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cce:	4a50      	ldr	r2, [pc, #320]	; (8003e10 <HAL_RCC_ClockConfig+0x15c>)
 8003cd0:	6813      	ldr	r3, [r2, #0]
 8003cd2:	f023 0307 	bic.w	r3, r3, #7
 8003cd6:	430b      	orrs	r3, r1
 8003cd8:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cda:	6813      	ldr	r3, [r2, #0]
 8003cdc:	f003 0307 	and.w	r3, r3, #7
 8003ce0:	428b      	cmp	r3, r1
 8003ce2:	f040 808e 	bne.w	8003e02 <HAL_RCC_ClockConfig+0x14e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ce6:	6823      	ldr	r3, [r4, #0]
 8003ce8:	f013 0f02 	tst.w	r3, #2
 8003cec:	d017      	beq.n	8003d1e <HAL_RCC_ClockConfig+0x6a>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cee:	f013 0f04 	tst.w	r3, #4
 8003cf2:	d004      	beq.n	8003cfe <HAL_RCC_ClockConfig+0x4a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cf4:	4a47      	ldr	r2, [pc, #284]	; (8003e14 <HAL_RCC_ClockConfig+0x160>)
 8003cf6:	6853      	ldr	r3, [r2, #4]
 8003cf8:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003cfc:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cfe:	6823      	ldr	r3, [r4, #0]
 8003d00:	f013 0f08 	tst.w	r3, #8
 8003d04:	d004      	beq.n	8003d10 <HAL_RCC_ClockConfig+0x5c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d06:	4a43      	ldr	r2, [pc, #268]	; (8003e14 <HAL_RCC_ClockConfig+0x160>)
 8003d08:	6853      	ldr	r3, [r2, #4]
 8003d0a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003d0e:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d10:	4a40      	ldr	r2, [pc, #256]	; (8003e14 <HAL_RCC_ClockConfig+0x160>)
 8003d12:	6853      	ldr	r3, [r2, #4]
 8003d14:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d18:	68a1      	ldr	r1, [r4, #8]
 8003d1a:	430b      	orrs	r3, r1
 8003d1c:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d1e:	6823      	ldr	r3, [r4, #0]
 8003d20:	f013 0f01 	tst.w	r3, #1
 8003d24:	d031      	beq.n	8003d8a <HAL_RCC_ClockConfig+0xd6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d26:	6862      	ldr	r2, [r4, #4]
 8003d28:	2a01      	cmp	r2, #1
 8003d2a:	d020      	beq.n	8003d6e <HAL_RCC_ClockConfig+0xba>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d2c:	2a02      	cmp	r2, #2
 8003d2e:	d025      	beq.n	8003d7c <HAL_RCC_ClockConfig+0xc8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d30:	4b38      	ldr	r3, [pc, #224]	; (8003e14 <HAL_RCC_ClockConfig+0x160>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f013 0f02 	tst.w	r3, #2
 8003d38:	d065      	beq.n	8003e06 <HAL_RCC_ClockConfig+0x152>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d3a:	4936      	ldr	r1, [pc, #216]	; (8003e14 <HAL_RCC_ClockConfig+0x160>)
 8003d3c:	684b      	ldr	r3, [r1, #4]
 8003d3e:	f023 0303 	bic.w	r3, r3, #3
 8003d42:	4313      	orrs	r3, r2
 8003d44:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8003d46:	f7fe f9db 	bl	8002100 <HAL_GetTick>
 8003d4a:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d4c:	4f31      	ldr	r7, [pc, #196]	; (8003e14 <HAL_RCC_ClockConfig+0x160>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d4e:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f003 030c 	and.w	r3, r3, #12
 8003d58:	6862      	ldr	r2, [r4, #4]
 8003d5a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003d5e:	d014      	beq.n	8003d8a <HAL_RCC_ClockConfig+0xd6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d60:	f7fe f9ce 	bl	8002100 <HAL_GetTick>
 8003d64:	1b80      	subs	r0, r0, r6
 8003d66:	4540      	cmp	r0, r8
 8003d68:	d9f3      	bls.n	8003d52 <HAL_RCC_ClockConfig+0x9e>
        return HAL_TIMEOUT;
 8003d6a:	2003      	movs	r0, #3
 8003d6c:	e045      	b.n	8003dfa <HAL_RCC_ClockConfig+0x146>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d6e:	4b29      	ldr	r3, [pc, #164]	; (8003e14 <HAL_RCC_ClockConfig+0x160>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003d76:	d1e0      	bne.n	8003d3a <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8003d78:	2001      	movs	r0, #1
 8003d7a:	e03e      	b.n	8003dfa <HAL_RCC_ClockConfig+0x146>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d7c:	4b25      	ldr	r3, [pc, #148]	; (8003e14 <HAL_RCC_ClockConfig+0x160>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003d84:	d1d9      	bne.n	8003d3a <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8003d86:	2001      	movs	r0, #1
 8003d88:	e037      	b.n	8003dfa <HAL_RCC_ClockConfig+0x146>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d8a:	4b21      	ldr	r3, [pc, #132]	; (8003e10 <HAL_RCC_ClockConfig+0x15c>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0307 	and.w	r3, r3, #7
 8003d92:	42ab      	cmp	r3, r5
 8003d94:	d90a      	bls.n	8003dac <HAL_RCC_ClockConfig+0xf8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d96:	4a1e      	ldr	r2, [pc, #120]	; (8003e10 <HAL_RCC_ClockConfig+0x15c>)
 8003d98:	6813      	ldr	r3, [r2, #0]
 8003d9a:	f023 0307 	bic.w	r3, r3, #7
 8003d9e:	432b      	orrs	r3, r5
 8003da0:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003da2:	6813      	ldr	r3, [r2, #0]
 8003da4:	f003 0307 	and.w	r3, r3, #7
 8003da8:	42ab      	cmp	r3, r5
 8003daa:	d12e      	bne.n	8003e0a <HAL_RCC_ClockConfig+0x156>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dac:	6823      	ldr	r3, [r4, #0]
 8003dae:	f013 0f04 	tst.w	r3, #4
 8003db2:	d006      	beq.n	8003dc2 <HAL_RCC_ClockConfig+0x10e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003db4:	4a17      	ldr	r2, [pc, #92]	; (8003e14 <HAL_RCC_ClockConfig+0x160>)
 8003db6:	6853      	ldr	r3, [r2, #4]
 8003db8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003dbc:	68e1      	ldr	r1, [r4, #12]
 8003dbe:	430b      	orrs	r3, r1
 8003dc0:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dc2:	6823      	ldr	r3, [r4, #0]
 8003dc4:	f013 0f08 	tst.w	r3, #8
 8003dc8:	d007      	beq.n	8003dda <HAL_RCC_ClockConfig+0x126>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003dca:	4a12      	ldr	r2, [pc, #72]	; (8003e14 <HAL_RCC_ClockConfig+0x160>)
 8003dcc:	6853      	ldr	r3, [r2, #4]
 8003dce:	6921      	ldr	r1, [r4, #16]
 8003dd0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8003dd4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003dd8:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003dda:	f7ff ff33 	bl	8003c44 <HAL_RCC_GetSysClockFreq>
 8003dde:	4b0d      	ldr	r3, [pc, #52]	; (8003e14 <HAL_RCC_ClockConfig+0x160>)
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003de6:	4a0c      	ldr	r2, [pc, #48]	; (8003e18 <HAL_RCC_ClockConfig+0x164>)
 8003de8:	5cd3      	ldrb	r3, [r2, r3]
 8003dea:	40d8      	lsrs	r0, r3
 8003dec:	4b0b      	ldr	r3, [pc, #44]	; (8003e1c <HAL_RCC_ClockConfig+0x168>)
 8003dee:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8003df0:	4b0b      	ldr	r3, [pc, #44]	; (8003e20 <HAL_RCC_ClockConfig+0x16c>)
 8003df2:	6818      	ldr	r0, [r3, #0]
 8003df4:	f7fe f940 	bl	8002078 <HAL_InitTick>
  return HAL_OK;
 8003df8:	2000      	movs	r0, #0
}
 8003dfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8003dfe:	2001      	movs	r0, #1
}
 8003e00:	4770      	bx	lr
    return HAL_ERROR;
 8003e02:	2001      	movs	r0, #1
 8003e04:	e7f9      	b.n	8003dfa <HAL_RCC_ClockConfig+0x146>
        return HAL_ERROR;
 8003e06:	2001      	movs	r0, #1
 8003e08:	e7f7      	b.n	8003dfa <HAL_RCC_ClockConfig+0x146>
    return HAL_ERROR;
 8003e0a:	2001      	movs	r0, #1
 8003e0c:	e7f5      	b.n	8003dfa <HAL_RCC_ClockConfig+0x146>
 8003e0e:	bf00      	nop
 8003e10:	40022000 	.word	0x40022000
 8003e14:	40021000 	.word	0x40021000
 8003e18:	0800b3e0 	.word	0x0800b3e0
 8003e1c:	2000000c 	.word	0x2000000c
 8003e20:	20000014 	.word	0x20000014

08003e24 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003e24:	4b04      	ldr	r3, [pc, #16]	; (8003e38 <HAL_RCC_GetPCLK1Freq+0x14>)
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8003e2c:	4a03      	ldr	r2, [pc, #12]	; (8003e3c <HAL_RCC_GetPCLK1Freq+0x18>)
 8003e2e:	5cd3      	ldrb	r3, [r2, r3]
 8003e30:	4a03      	ldr	r2, [pc, #12]	; (8003e40 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003e32:	6810      	ldr	r0, [r2, #0]
}
 8003e34:	40d8      	lsrs	r0, r3
 8003e36:	4770      	bx	lr
 8003e38:	40021000 	.word	0x40021000
 8003e3c:	0800b3f0 	.word	0x0800b3f0
 8003e40:	2000000c 	.word	0x2000000c

08003e44 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003e44:	4b04      	ldr	r3, [pc, #16]	; (8003e58 <HAL_RCC_GetPCLK2Freq+0x14>)
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8003e4c:	4a03      	ldr	r2, [pc, #12]	; (8003e5c <HAL_RCC_GetPCLK2Freq+0x18>)
 8003e4e:	5cd3      	ldrb	r3, [r2, r3]
 8003e50:	4a03      	ldr	r2, [pc, #12]	; (8003e60 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003e52:	6810      	ldr	r0, [r2, #0]
}
 8003e54:	40d8      	lsrs	r0, r3
 8003e56:	4770      	bx	lr
 8003e58:	40021000 	.word	0x40021000
 8003e5c:	0800b3f0 	.word	0x0800b3f0
 8003e60:	2000000c 	.word	0x2000000c

08003e64 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e68:	b082      	sub	sp, #8
 8003e6a:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003e6c:	6803      	ldr	r3, [r0, #0]
 8003e6e:	f013 0f01 	tst.w	r3, #1
 8003e72:	d036      	beq.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e74:	4b3f      	ldr	r3, [pc, #252]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8003e76:	69db      	ldr	r3, [r3, #28]
 8003e78:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003e7c:	d149      	bne.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0xae>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e7e:	4b3d      	ldr	r3, [pc, #244]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8003e80:	69da      	ldr	r2, [r3, #28]
 8003e82:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003e86:	61da      	str	r2, [r3, #28]
 8003e88:	69db      	ldr	r3, [r3, #28]
 8003e8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e8e:	9301      	str	r3, [sp, #4]
 8003e90:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003e92:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e94:	4b38      	ldr	r3, [pc, #224]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003e9c:	d03b      	beq.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e9e:	4b35      	ldr	r3, [pc, #212]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8003ea0:	6a1b      	ldr	r3, [r3, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ea2:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8003ea6:	d013      	beq.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8003ea8:	6862      	ldr	r2, [r4, #4]
 8003eaa:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d00e      	beq.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x6c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003eb2:	4a30      	ldr	r2, [pc, #192]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8003eb4:	6a13      	ldr	r3, [r2, #32]
 8003eb6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003eba:	4930      	ldr	r1, [pc, #192]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8003ebc:	2601      	movs	r6, #1
 8003ebe:	f8c1 6440 	str.w	r6, [r1, #1088]	; 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ec2:	2600      	movs	r6, #0
 8003ec4:	f8c1 6440 	str.w	r6, [r1, #1088]	; 0x440
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003ec8:	6210      	str	r0, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003eca:	f013 0f01 	tst.w	r3, #1
 8003ece:	d136      	bne.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0xda>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ed0:	4a28      	ldr	r2, [pc, #160]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8003ed2:	6a13      	ldr	r3, [r2, #32]
 8003ed4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ed8:	6861      	ldr	r1, [r4, #4]
 8003eda:	430b      	orrs	r3, r1
 8003edc:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003ede:	2d00      	cmp	r5, #0
 8003ee0:	d13e      	bne.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ee2:	6823      	ldr	r3, [r4, #0]
 8003ee4:	f013 0f02 	tst.w	r3, #2
 8003ee8:	d006      	beq.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x94>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003eea:	4a22      	ldr	r2, [pc, #136]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8003eec:	6853      	ldr	r3, [r2, #4]
 8003eee:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003ef2:	68a1      	ldr	r1, [r4, #8]
 8003ef4:	430b      	orrs	r3, r1
 8003ef6:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003ef8:	6823      	ldr	r3, [r4, #0]
 8003efa:	f013 0f10 	tst.w	r3, #16
 8003efe:	d034      	beq.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x106>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f00:	4a1c      	ldr	r2, [pc, #112]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8003f02:	6853      	ldr	r3, [r2, #4]
 8003f04:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003f08:	68e1      	ldr	r1, [r4, #12]
 8003f0a:	430b      	orrs	r3, r1
 8003f0c:	6053      	str	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003f0e:	2000      	movs	r0, #0
 8003f10:	e02c      	b.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x108>
    FlagStatus pwrclkchanged = RESET;
 8003f12:	2500      	movs	r5, #0
 8003f14:	e7be      	b.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x30>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f16:	4a18      	ldr	r2, [pc, #96]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8003f18:	6813      	ldr	r3, [r2, #0]
 8003f1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f1e:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8003f20:	f7fe f8ee 	bl	8002100 <HAL_GetTick>
 8003f24:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f26:	4f14      	ldr	r7, [pc, #80]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003f2e:	d1b6      	bne.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f30:	f7fe f8e6 	bl	8002100 <HAL_GetTick>
 8003f34:	1b80      	subs	r0, r0, r6
 8003f36:	2864      	cmp	r0, #100	; 0x64
 8003f38:	d9f6      	bls.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0xc4>
          return HAL_TIMEOUT;
 8003f3a:	2003      	movs	r0, #3
 8003f3c:	e016      	b.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x108>
        tickstart = HAL_GetTick();
 8003f3e:	f7fe f8df 	bl	8002100 <HAL_GetTick>
 8003f42:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f44:	4f0b      	ldr	r7, [pc, #44]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x110>)
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f46:	f241 3888 	movw	r8, #5000	; 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f4a:	6a3b      	ldr	r3, [r7, #32]
 8003f4c:	f013 0f02 	tst.w	r3, #2
 8003f50:	d1be      	bne.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x6c>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f52:	f7fe f8d5 	bl	8002100 <HAL_GetTick>
 8003f56:	1b80      	subs	r0, r0, r6
 8003f58:	4540      	cmp	r0, r8
 8003f5a:	d9f6      	bls.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0xe6>
            return HAL_TIMEOUT;
 8003f5c:	2003      	movs	r0, #3
 8003f5e:	e005      	b.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x108>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f60:	69d3      	ldr	r3, [r2, #28]
 8003f62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f66:	61d3      	str	r3, [r2, #28]
 8003f68:	e7bb      	b.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
  return HAL_OK;
 8003f6a:	2000      	movs	r0, #0
}
 8003f6c:	b002      	add	sp, #8
 8003f6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f72:	bf00      	nop
 8003f74:	40021000 	.word	0x40021000
 8003f78:	40007000 	.word	0x40007000
 8003f7c:	42420000 	.word	0x42420000

08003f80 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f80:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d127      	bne.n	8003fda <HAL_TIM_Base_Start_IT+0x5a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f8a:	2302      	movs	r3, #2
 8003f8c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f90:	6802      	ldr	r2, [r0, #0]
 8003f92:	68d3      	ldr	r3, [r2, #12]
 8003f94:	f043 0301 	orr.w	r3, r3, #1
 8003f98:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f9a:	6803      	ldr	r3, [r0, #0]
 8003f9c:	4a11      	ldr	r2, [pc, #68]	; (8003fe4 <HAL_TIM_Base_Start_IT+0x64>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d010      	beq.n	8003fc4 <HAL_TIM_Base_Start_IT+0x44>
 8003fa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fa6:	d00d      	beq.n	8003fc4 <HAL_TIM_Base_Start_IT+0x44>
 8003fa8:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d009      	beq.n	8003fc4 <HAL_TIM_Base_Start_IT+0x44>
 8003fb0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d005      	beq.n	8003fc4 <HAL_TIM_Base_Start_IT+0x44>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	f042 0201 	orr.w	r2, r2, #1
 8003fbe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003fc0:	2000      	movs	r0, #0
 8003fc2:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fc4:	689a      	ldr	r2, [r3, #8]
 8003fc6:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fca:	2a06      	cmp	r2, #6
 8003fcc:	d007      	beq.n	8003fde <HAL_TIM_Base_Start_IT+0x5e>
      __HAL_TIM_ENABLE(htim);
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	f042 0201 	orr.w	r2, r2, #1
 8003fd4:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003fd6:	2000      	movs	r0, #0
 8003fd8:	4770      	bx	lr
    return HAL_ERROR;
 8003fda:	2001      	movs	r0, #1
 8003fdc:	4770      	bx	lr
  return HAL_OK;
 8003fde:	2000      	movs	r0, #0
}
 8003fe0:	4770      	bx	lr
 8003fe2:	bf00      	nop
 8003fe4:	40012c00 	.word	0x40012c00

08003fe8 <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003fe8:	4770      	bx	lr

08003fea <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003fea:	4770      	bx	lr

08003fec <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003fec:	4770      	bx	lr

08003fee <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003fee:	4770      	bx	lr

08003ff0 <HAL_TIM_IRQHandler>:
{
 8003ff0:	b510      	push	{r4, lr}
 8003ff2:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ff4:	6803      	ldr	r3, [r0, #0]
 8003ff6:	691a      	ldr	r2, [r3, #16]
 8003ff8:	f012 0f02 	tst.w	r2, #2
 8003ffc:	d011      	beq.n	8004022 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003ffe:	68da      	ldr	r2, [r3, #12]
 8004000:	f012 0f02 	tst.w	r2, #2
 8004004:	d00d      	beq.n	8004022 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004006:	f06f 0202 	mvn.w	r2, #2
 800400a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800400c:	2301      	movs	r3, #1
 800400e:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004010:	6803      	ldr	r3, [r0, #0]
 8004012:	699b      	ldr	r3, [r3, #24]
 8004014:	f013 0f03 	tst.w	r3, #3
 8004018:	d070      	beq.n	80040fc <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 800401a:	f7ff ffe6 	bl	8003fea <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800401e:	2300      	movs	r3, #0
 8004020:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004022:	6823      	ldr	r3, [r4, #0]
 8004024:	691a      	ldr	r2, [r3, #16]
 8004026:	f012 0f04 	tst.w	r2, #4
 800402a:	d012      	beq.n	8004052 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800402c:	68da      	ldr	r2, [r3, #12]
 800402e:	f012 0f04 	tst.w	r2, #4
 8004032:	d00e      	beq.n	8004052 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004034:	f06f 0204 	mvn.w	r2, #4
 8004038:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800403a:	2302      	movs	r3, #2
 800403c:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800403e:	6823      	ldr	r3, [r4, #0]
 8004040:	699b      	ldr	r3, [r3, #24]
 8004042:	f413 7f40 	tst.w	r3, #768	; 0x300
 8004046:	d05f      	beq.n	8004108 <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 8004048:	4620      	mov	r0, r4
 800404a:	f7ff ffce 	bl	8003fea <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800404e:	2300      	movs	r3, #0
 8004050:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004052:	6823      	ldr	r3, [r4, #0]
 8004054:	691a      	ldr	r2, [r3, #16]
 8004056:	f012 0f08 	tst.w	r2, #8
 800405a:	d012      	beq.n	8004082 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800405c:	68da      	ldr	r2, [r3, #12]
 800405e:	f012 0f08 	tst.w	r2, #8
 8004062:	d00e      	beq.n	8004082 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004064:	f06f 0208 	mvn.w	r2, #8
 8004068:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800406a:	2304      	movs	r3, #4
 800406c:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800406e:	6823      	ldr	r3, [r4, #0]
 8004070:	69db      	ldr	r3, [r3, #28]
 8004072:	f013 0f03 	tst.w	r3, #3
 8004076:	d04e      	beq.n	8004116 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 8004078:	4620      	mov	r0, r4
 800407a:	f7ff ffb6 	bl	8003fea <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800407e:	2300      	movs	r3, #0
 8004080:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004082:	6823      	ldr	r3, [r4, #0]
 8004084:	691a      	ldr	r2, [r3, #16]
 8004086:	f012 0f10 	tst.w	r2, #16
 800408a:	d012      	beq.n	80040b2 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800408c:	68da      	ldr	r2, [r3, #12]
 800408e:	f012 0f10 	tst.w	r2, #16
 8004092:	d00e      	beq.n	80040b2 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004094:	f06f 0210 	mvn.w	r2, #16
 8004098:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800409a:	2308      	movs	r3, #8
 800409c:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800409e:	6823      	ldr	r3, [r4, #0]
 80040a0:	69db      	ldr	r3, [r3, #28]
 80040a2:	f413 7f40 	tst.w	r3, #768	; 0x300
 80040a6:	d03d      	beq.n	8004124 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 80040a8:	4620      	mov	r0, r4
 80040aa:	f7ff ff9e 	bl	8003fea <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040ae:	2300      	movs	r3, #0
 80040b0:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80040b2:	6823      	ldr	r3, [r4, #0]
 80040b4:	691a      	ldr	r2, [r3, #16]
 80040b6:	f012 0f01 	tst.w	r2, #1
 80040ba:	d003      	beq.n	80040c4 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80040bc:	68da      	ldr	r2, [r3, #12]
 80040be:	f012 0f01 	tst.w	r2, #1
 80040c2:	d136      	bne.n	8004132 <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80040c4:	6823      	ldr	r3, [r4, #0]
 80040c6:	691a      	ldr	r2, [r3, #16]
 80040c8:	f012 0f80 	tst.w	r2, #128	; 0x80
 80040cc:	d003      	beq.n	80040d6 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80040ce:	68da      	ldr	r2, [r3, #12]
 80040d0:	f012 0f80 	tst.w	r2, #128	; 0x80
 80040d4:	d134      	bne.n	8004140 <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80040d6:	6823      	ldr	r3, [r4, #0]
 80040d8:	691a      	ldr	r2, [r3, #16]
 80040da:	f012 0f40 	tst.w	r2, #64	; 0x40
 80040de:	d003      	beq.n	80040e8 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80040e0:	68da      	ldr	r2, [r3, #12]
 80040e2:	f012 0f40 	tst.w	r2, #64	; 0x40
 80040e6:	d132      	bne.n	800414e <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80040e8:	6823      	ldr	r3, [r4, #0]
 80040ea:	691a      	ldr	r2, [r3, #16]
 80040ec:	f012 0f20 	tst.w	r2, #32
 80040f0:	d003      	beq.n	80040fa <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80040f2:	68da      	ldr	r2, [r3, #12]
 80040f4:	f012 0f20 	tst.w	r2, #32
 80040f8:	d130      	bne.n	800415c <HAL_TIM_IRQHandler+0x16c>
}
 80040fa:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80040fc:	f7ff ff74 	bl	8003fe8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004100:	4620      	mov	r0, r4
 8004102:	f7ff ff73 	bl	8003fec <HAL_TIM_PWM_PulseFinishedCallback>
 8004106:	e78a      	b.n	800401e <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004108:	4620      	mov	r0, r4
 800410a:	f7ff ff6d 	bl	8003fe8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800410e:	4620      	mov	r0, r4
 8004110:	f7ff ff6c 	bl	8003fec <HAL_TIM_PWM_PulseFinishedCallback>
 8004114:	e79b      	b.n	800404e <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004116:	4620      	mov	r0, r4
 8004118:	f7ff ff66 	bl	8003fe8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800411c:	4620      	mov	r0, r4
 800411e:	f7ff ff65 	bl	8003fec <HAL_TIM_PWM_PulseFinishedCallback>
 8004122:	e7ac      	b.n	800407e <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004124:	4620      	mov	r0, r4
 8004126:	f7ff ff5f 	bl	8003fe8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800412a:	4620      	mov	r0, r4
 800412c:	f7ff ff5e 	bl	8003fec <HAL_TIM_PWM_PulseFinishedCallback>
 8004130:	e7bd      	b.n	80040ae <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004132:	f06f 0201 	mvn.w	r2, #1
 8004136:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004138:	4620      	mov	r0, r4
 800413a:	f7fc ff69 	bl	8001010 <HAL_TIM_PeriodElapsedCallback>
 800413e:	e7c1      	b.n	80040c4 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004140:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004144:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8004146:	4620      	mov	r0, r4
 8004148:	f000 f96f 	bl	800442a <HAL_TIMEx_BreakCallback>
 800414c:	e7c3      	b.n	80040d6 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800414e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004152:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8004154:	4620      	mov	r0, r4
 8004156:	f7ff ff4a 	bl	8003fee <HAL_TIM_TriggerCallback>
 800415a:	e7c5      	b.n	80040e8 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800415c:	f06f 0220 	mvn.w	r2, #32
 8004160:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8004162:	4620      	mov	r0, r4
 8004164:	f000 f960 	bl	8004428 <HAL_TIMEx_CommutCallback>
}
 8004168:	e7c7      	b.n	80040fa <HAL_TIM_IRQHandler+0x10a>
	...

0800416c <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800416c:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800416e:	4a25      	ldr	r2, [pc, #148]	; (8004204 <TIM_Base_SetConfig+0x98>)
 8004170:	4290      	cmp	r0, r2
 8004172:	d014      	beq.n	800419e <TIM_Base_SetConfig+0x32>
 8004174:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004178:	d02b      	beq.n	80041d2 <TIM_Base_SetConfig+0x66>
 800417a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800417e:	4290      	cmp	r0, r2
 8004180:	d022      	beq.n	80041c8 <TIM_Base_SetConfig+0x5c>
 8004182:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004186:	4290      	cmp	r0, r2
 8004188:	d037      	beq.n	80041fa <TIM_Base_SetConfig+0x8e>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800418a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800418e:	694a      	ldr	r2, [r1, #20]
 8004190:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8004192:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004194:	688b      	ldr	r3, [r1, #8]
 8004196:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004198:	680b      	ldr	r3, [r1, #0]
 800419a:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800419c:	e02a      	b.n	80041f4 <TIM_Base_SetConfig+0x88>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800419e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80041a2:	684a      	ldr	r2, [r1, #4]
 80041a4:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 80041a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041aa:	68ca      	ldr	r2, [r1, #12]
 80041ac:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041b2:	694a      	ldr	r2, [r1, #20]
 80041b4:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80041b6:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041b8:	688b      	ldr	r3, [r1, #8]
 80041ba:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80041bc:	680b      	ldr	r3, [r1, #0]
 80041be:	6283      	str	r3, [r0, #40]	; 0x28
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041c0:	690a      	ldr	r2, [r1, #16]
 80041c2:	4b10      	ldr	r3, [pc, #64]	; (8004204 <TIM_Base_SetConfig+0x98>)
 80041c4:	631a      	str	r2, [r3, #48]	; 0x30
 80041c6:	e015      	b.n	80041f4 <TIM_Base_SetConfig+0x88>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80041cc:	684a      	ldr	r2, [r1, #4]
 80041ce:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041d0:	e003      	b.n	80041da <TIM_Base_SetConfig+0x6e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80041d6:	684a      	ldr	r2, [r1, #4]
 80041d8:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 80041da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041de:	68ca      	ldr	r2, [r1, #12]
 80041e0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041e6:	694a      	ldr	r2, [r1, #20]
 80041e8:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80041ea:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041ec:	688b      	ldr	r3, [r1, #8]
 80041ee:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80041f0:	680b      	ldr	r3, [r1, #0]
 80041f2:	6283      	str	r3, [r0, #40]	; 0x28
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041f4:	2301      	movs	r3, #1
 80041f6:	6143      	str	r3, [r0, #20]
}
 80041f8:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80041fe:	684a      	ldr	r2, [r1, #4]
 8004200:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004202:	e7ea      	b.n	80041da <TIM_Base_SetConfig+0x6e>
 8004204:	40012c00 	.word	0x40012c00

08004208 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8004208:	b340      	cbz	r0, 800425c <HAL_TIM_Base_Init+0x54>
{
 800420a:	b510      	push	{r4, lr}
 800420c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800420e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004212:	b1f3      	cbz	r3, 8004252 <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8004214:	2302      	movs	r3, #2
 8004216:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800421a:	4621      	mov	r1, r4
 800421c:	f851 0b04 	ldr.w	r0, [r1], #4
 8004220:	f7ff ffa4 	bl	800416c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004224:	2301      	movs	r3, #1
 8004226:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800422a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800422e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8004232:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8004236:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800423a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800423e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004242:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8004246:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 800424a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800424e:	2000      	movs	r0, #0
}
 8004250:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8004252:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8004256:	f7fd fdd3 	bl	8001e00 <HAL_TIM_Base_MspInit>
 800425a:	e7db      	b.n	8004214 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 800425c:	2001      	movs	r0, #1
}
 800425e:	4770      	bx	lr

08004260 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004260:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004262:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004264:	f424 4c7f 	bic.w	ip, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004268:	430a      	orrs	r2, r1
 800426a:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 800426e:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004272:	6082      	str	r2, [r0, #8]
}
 8004274:	bc10      	pop	{r4}
 8004276:	4770      	bx	lr

08004278 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8004278:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800427c:	2b01      	cmp	r3, #1
 800427e:	f000 809c 	beq.w	80043ba <HAL_TIM_ConfigClockSource+0x142>
{
 8004282:	b570      	push	{r4, r5, r6, lr}
 8004284:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8004286:	2301      	movs	r3, #1
 8004288:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800428c:	2302      	movs	r3, #2
 800428e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8004292:	6802      	ldr	r2, [r0, #0]
 8004294:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004296:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800429a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 800429e:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80042a0:	680b      	ldr	r3, [r1, #0]
 80042a2:	2b60      	cmp	r3, #96	; 0x60
 80042a4:	d054      	beq.n	8004350 <HAL_TIM_ConfigClockSource+0xd8>
 80042a6:	d836      	bhi.n	8004316 <HAL_TIM_ConfigClockSource+0x9e>
 80042a8:	2b40      	cmp	r3, #64	; 0x40
 80042aa:	d06c      	beq.n	8004386 <HAL_TIM_ConfigClockSource+0x10e>
 80042ac:	d91b      	bls.n	80042e6 <HAL_TIM_ConfigClockSource+0x6e>
 80042ae:	2b50      	cmp	r3, #80	; 0x50
 80042b0:	d12a      	bne.n	8004308 <HAL_TIM_ConfigClockSource+0x90>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042b2:	6803      	ldr	r3, [r0, #0]
 80042b4:	6848      	ldr	r0, [r1, #4]
 80042b6:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 80042b8:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042ba:	6a1a      	ldr	r2, [r3, #32]
 80042bc:	f022 0201 	bic.w	r2, r2, #1
 80042c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042c2:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80042c4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80042c8:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80042cc:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 80042d0:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 80042d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042d4:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80042d6:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 80042d8:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80042da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80042de:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 80042e2:	6093      	str	r3, [r2, #8]
}
 80042e4:	e010      	b.n	8004308 <HAL_TIM_ConfigClockSource+0x90>
  switch (sClockSourceConfig->ClockSource)
 80042e6:	2b20      	cmp	r3, #32
 80042e8:	d002      	beq.n	80042f0 <HAL_TIM_ConfigClockSource+0x78>
 80042ea:	d90a      	bls.n	8004302 <HAL_TIM_ConfigClockSource+0x8a>
 80042ec:	2b30      	cmp	r3, #48	; 0x30
 80042ee:	d10b      	bne.n	8004308 <HAL_TIM_ConfigClockSource+0x90>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80042f0:	6821      	ldr	r1, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 80042f2:	688a      	ldr	r2, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80042f4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80042f8:	4313      	orrs	r3, r2
 80042fa:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 80042fe:	608b      	str	r3, [r1, #8]
}
 8004300:	e002      	b.n	8004308 <HAL_TIM_ConfigClockSource+0x90>
  switch (sClockSourceConfig->ClockSource)
 8004302:	f033 0210 	bics.w	r2, r3, #16
 8004306:	d0f3      	beq.n	80042f0 <HAL_TIM_ConfigClockSource+0x78>
  htim->State = HAL_TIM_STATE_READY;
 8004308:	2301      	movs	r3, #1
 800430a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800430e:	2000      	movs	r0, #0
 8004310:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8004314:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8004316:	2b70      	cmp	r3, #112	; 0x70
 8004318:	d00e      	beq.n	8004338 <HAL_TIM_ConfigClockSource+0xc0>
 800431a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800431e:	d1f3      	bne.n	8004308 <HAL_TIM_ConfigClockSource+0x90>
      TIM_ETR_SetConfig(htim->Instance,
 8004320:	68cb      	ldr	r3, [r1, #12]
 8004322:	684a      	ldr	r2, [r1, #4]
 8004324:	6889      	ldr	r1, [r1, #8]
 8004326:	6800      	ldr	r0, [r0, #0]
 8004328:	f7ff ff9a 	bl	8004260 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800432c:	6822      	ldr	r2, [r4, #0]
 800432e:	6893      	ldr	r3, [r2, #8]
 8004330:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004334:	6093      	str	r3, [r2, #8]
      break;
 8004336:	e7e7      	b.n	8004308 <HAL_TIM_ConfigClockSource+0x90>
      TIM_ETR_SetConfig(htim->Instance,
 8004338:	68cb      	ldr	r3, [r1, #12]
 800433a:	684a      	ldr	r2, [r1, #4]
 800433c:	6889      	ldr	r1, [r1, #8]
 800433e:	6800      	ldr	r0, [r0, #0]
 8004340:	f7ff ff8e 	bl	8004260 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004344:	6822      	ldr	r2, [r4, #0]
 8004346:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004348:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800434c:	6093      	str	r3, [r2, #8]
      break;
 800434e:	e7db      	b.n	8004308 <HAL_TIM_ConfigClockSource+0x90>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004350:	6803      	ldr	r3, [r0, #0]
 8004352:	684d      	ldr	r5, [r1, #4]
 8004354:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004356:	6a18      	ldr	r0, [r3, #32]
 8004358:	f020 0010 	bic.w	r0, r0, #16
 800435c:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800435e:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8004360:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004362:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004366:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800436a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800436e:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8004372:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8004374:	621a      	str	r2, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004376:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8004378:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800437a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800437e:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8004382:	6093      	str	r3, [r2, #8]
}
 8004384:	e7c0      	b.n	8004308 <HAL_TIM_ConfigClockSource+0x90>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004386:	6803      	ldr	r3, [r0, #0]
 8004388:	6848      	ldr	r0, [r1, #4]
 800438a:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 800438c:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800438e:	6a1a      	ldr	r2, [r3, #32]
 8004390:	f022 0201 	bic.w	r2, r2, #1
 8004394:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004396:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004398:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800439c:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80043a0:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 80043a4:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 80043a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043a8:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80043aa:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 80043ac:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80043ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80043b2:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 80043b6:	6093      	str	r3, [r2, #8]
}
 80043b8:	e7a6      	b.n	8004308 <HAL_TIM_ConfigClockSource+0x90>
  __HAL_LOCK(htim);
 80043ba:	2002      	movs	r0, #2
}
 80043bc:	4770      	bx	lr
	...

080043c0 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80043c0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d02b      	beq.n	8004420 <HAL_TIMEx_MasterConfigSynchronization+0x60>
{
 80043c8:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 80043ca:	2301      	movs	r3, #1
 80043cc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043d0:	2302      	movs	r3, #2
 80043d2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80043d6:	6804      	ldr	r4, [r0, #0]
 80043d8:	6863      	ldr	r3, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80043da:	68a2      	ldr	r2, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80043dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043e0:	680d      	ldr	r5, [r1, #0]
 80043e2:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043e4:	6063      	str	r3, [r4, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043e6:	6803      	ldr	r3, [r0, #0]
 80043e8:	4c0e      	ldr	r4, [pc, #56]	; (8004424 <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 80043ea:	42a3      	cmp	r3, r4
 80043ec:	d00a      	beq.n	8004404 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 80043ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043f2:	d007      	beq.n	8004404 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 80043f4:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 80043f8:	42a3      	cmp	r3, r4
 80043fa:	d003      	beq.n	8004404 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 80043fc:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004400:	42a3      	cmp	r3, r4
 8004402:	d104      	bne.n	800440e <HAL_TIMEx_MasterConfigSynchronization+0x4e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004404:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004408:	6849      	ldr	r1, [r1, #4]
 800440a:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800440c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800440e:	2301      	movs	r3, #1
 8004410:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004414:	2300      	movs	r3, #0
 8004416:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 800441a:	4618      	mov	r0, r3
}
 800441c:	bc30      	pop	{r4, r5}
 800441e:	4770      	bx	lr
  __HAL_LOCK(htim);
 8004420:	2002      	movs	r0, #2
}
 8004422:	4770      	bx	lr
 8004424:	40012c00 	.word	0x40012c00

08004428 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004428:	4770      	bx	lr

0800442a <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800442a:	4770      	bx	lr

0800442c <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800442c:	6802      	ldr	r2, [r0, #0]
 800442e:	68d3      	ldr	r3, [r2, #12]
 8004430:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004434:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004436:	6802      	ldr	r2, [r0, #0]
 8004438:	6953      	ldr	r3, [r2, #20]
 800443a:	f023 0301 	bic.w	r3, r3, #1
 800443e:	6153      	str	r3, [r2, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004440:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8004442:	2b01      	cmp	r3, #1
 8004444:	d005      	beq.n	8004452 <UART_EndRxTransfer+0x26>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004446:	2320      	movs	r3, #32
 8004448:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800444c:	2300      	movs	r3, #0
 800444e:	6303      	str	r3, [r0, #48]	; 0x30
}
 8004450:	4770      	bx	lr
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004452:	6802      	ldr	r2, [r0, #0]
 8004454:	68d3      	ldr	r3, [r2, #12]
 8004456:	f023 0310 	bic.w	r3, r3, #16
 800445a:	60d3      	str	r3, [r2, #12]
 800445c:	e7f3      	b.n	8004446 <UART_EndRxTransfer+0x1a>
	...

08004460 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004460:	b510      	push	{r4, lr}
 8004462:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004464:	6802      	ldr	r2, [r0, #0]
 8004466:	6913      	ldr	r3, [r2, #16]
 8004468:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800446c:	68c1      	ldr	r1, [r0, #12]
 800446e:	430b      	orrs	r3, r1
 8004470:	6113      	str	r3, [r2, #16]
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
  MODIFY_REG(huart->Instance->CR1,
 8004472:	6801      	ldr	r1, [r0, #0]
 8004474:	68ca      	ldr	r2, [r1, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004476:	6883      	ldr	r3, [r0, #8]
 8004478:	6900      	ldr	r0, [r0, #16]
 800447a:	4303      	orrs	r3, r0
 800447c:	6960      	ldr	r0, [r4, #20]
 800447e:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8004480:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8004484:	f022 020c 	bic.w	r2, r2, #12
 8004488:	4313      	orrs	r3, r2
 800448a:	60cb      	str	r3, [r1, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800448c:	6822      	ldr	r2, [r4, #0]
 800448e:	6953      	ldr	r3, [r2, #20]
 8004490:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004494:	69a1      	ldr	r1, [r4, #24]
 8004496:	430b      	orrs	r3, r1
 8004498:	6153      	str	r3, [r2, #20]


  if(huart->Instance == USART1)
 800449a:	6822      	ldr	r2, [r4, #0]
 800449c:	4b11      	ldr	r3, [pc, #68]	; (80044e4 <UART_SetConfig+0x84>)
 800449e:	429a      	cmp	r2, r3
 80044a0:	d01b      	beq.n	80044da <UART_SetConfig+0x7a>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80044a2:	f7ff fcbf 	bl	8003e24 <HAL_RCC_GetPCLK1Freq>
 80044a6:	4603      	mov	r3, r0
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80044a8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80044ac:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80044b0:	6862      	ldr	r2, [r4, #4]
 80044b2:	0092      	lsls	r2, r2, #2
 80044b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80044b8:	6820      	ldr	r0, [r4, #0]
 80044ba:	490b      	ldr	r1, [pc, #44]	; (80044e8 <UART_SetConfig+0x88>)
 80044bc:	fba1 4203 	umull	r4, r2, r1, r3
 80044c0:	0952      	lsrs	r2, r2, #5
 80044c2:	2464      	movs	r4, #100	; 0x64
 80044c4:	fb04 3312 	mls	r3, r4, r2, r3
 80044c8:	011b      	lsls	r3, r3, #4
 80044ca:	3332      	adds	r3, #50	; 0x32
 80044cc:	fba1 1303 	umull	r1, r3, r1, r3
 80044d0:	0112      	lsls	r2, r2, #4
 80044d2:	eb02 1353 	add.w	r3, r2, r3, lsr #5
 80044d6:	6083      	str	r3, [r0, #8]
#endif /* USART_CR1_OVER8 */
}
 80044d8:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 80044da:	f7ff fcb3 	bl	8003e44 <HAL_RCC_GetPCLK2Freq>
 80044de:	4603      	mov	r3, r0
 80044e0:	e7e2      	b.n	80044a8 <UART_SetConfig+0x48>
 80044e2:	bf00      	nop
 80044e4:	40013800 	.word	0x40013800
 80044e8:	51eb851f 	.word	0x51eb851f

080044ec <UART_WaitOnFlagUntilTimeout>:
{
 80044ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80044f0:	4680      	mov	r8, r0
 80044f2:	460e      	mov	r6, r1
 80044f4:	4615      	mov	r5, r2
 80044f6:	4699      	mov	r9, r3
 80044f8:	9f08      	ldr	r7, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044fa:	f8d8 2000 	ldr.w	r2, [r8]
 80044fe:	6814      	ldr	r4, [r2, #0]
 8004500:	ea36 0304 	bics.w	r3, r6, r4
 8004504:	bf0c      	ite	eq
 8004506:	f04f 0c01 	moveq.w	ip, #1
 800450a:	f04f 0c00 	movne.w	ip, #0
 800450e:	45ac      	cmp	ip, r5
 8004510:	d11f      	bne.n	8004552 <UART_WaitOnFlagUntilTimeout+0x66>
    if (Timeout != HAL_MAX_DELAY)
 8004512:	f1b7 3fff 	cmp.w	r7, #4294967295
 8004516:	d0f2      	beq.n	80044fe <UART_WaitOnFlagUntilTimeout+0x12>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004518:	b12f      	cbz	r7, 8004526 <UART_WaitOnFlagUntilTimeout+0x3a>
 800451a:	f7fd fdf1 	bl	8002100 <HAL_GetTick>
 800451e:	eba0 0009 	sub.w	r0, r0, r9
 8004522:	42b8      	cmp	r0, r7
 8004524:	d9e9      	bls.n	80044fa <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004526:	f8d8 2000 	ldr.w	r2, [r8]
 800452a:	68d3      	ldr	r3, [r2, #12]
 800452c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004530:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004532:	f8d8 2000 	ldr.w	r2, [r8]
 8004536:	6953      	ldr	r3, [r2, #20]
 8004538:	f023 0301 	bic.w	r3, r3, #1
 800453c:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 800453e:	2320      	movs	r3, #32
 8004540:	f888 303d 	strb.w	r3, [r8, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004544:	f888 303e 	strb.w	r3, [r8, #62]	; 0x3e
        __HAL_UNLOCK(huart);
 8004548:	2300      	movs	r3, #0
 800454a:	f888 303c 	strb.w	r3, [r8, #60]	; 0x3c
        return HAL_TIMEOUT;
 800454e:	2003      	movs	r0, #3
 8004550:	e000      	b.n	8004554 <UART_WaitOnFlagUntilTimeout+0x68>
  return HAL_OK;
 8004552:	2000      	movs	r0, #0
}
 8004554:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08004558 <HAL_UART_Init>:
  if (huart == NULL)
 8004558:	b358      	cbz	r0, 80045b2 <HAL_UART_Init+0x5a>
{
 800455a:	b510      	push	{r4, lr}
 800455c:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800455e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004562:	b30b      	cbz	r3, 80045a8 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8004564:	2324      	movs	r3, #36	; 0x24
 8004566:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 800456a:	6822      	ldr	r2, [r4, #0]
 800456c:	68d3      	ldr	r3, [r2, #12]
 800456e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004572:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8004574:	4620      	mov	r0, r4
 8004576:	f7ff ff73 	bl	8004460 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800457a:	6822      	ldr	r2, [r4, #0]
 800457c:	6913      	ldr	r3, [r2, #16]
 800457e:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8004582:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004584:	6822      	ldr	r2, [r4, #0]
 8004586:	6953      	ldr	r3, [r2, #20]
 8004588:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800458c:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 800458e:	6822      	ldr	r2, [r4, #0]
 8004590:	68d3      	ldr	r3, [r2, #12]
 8004592:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004596:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004598:	2000      	movs	r0, #0
 800459a:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800459c:	2320      	movs	r3, #32
 800459e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80045a2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 80045a6:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80045a8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 80045ac:	f7fd fc8c 	bl	8001ec8 <HAL_UART_MspInit>
 80045b0:	e7d8      	b.n	8004564 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 80045b2:	2001      	movs	r0, #1
}
 80045b4:	4770      	bx	lr

080045b6 <HAL_HalfDuplex_Init>:
  if (huart == NULL)
 80045b6:	2800      	cmp	r0, #0
 80045b8:	d030      	beq.n	800461c <HAL_HalfDuplex_Init+0x66>
{
 80045ba:	b510      	push	{r4, lr}
 80045bc:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80045be:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80045c2:	b333      	cbz	r3, 8004612 <HAL_HalfDuplex_Init+0x5c>
  huart->gState = HAL_UART_STATE_BUSY;
 80045c4:	2324      	movs	r3, #36	; 0x24
 80045c6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 80045ca:	6822      	ldr	r2, [r4, #0]
 80045cc:	68d3      	ldr	r3, [r2, #12]
 80045ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80045d2:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80045d4:	4620      	mov	r0, r4
 80045d6:	f7ff ff43 	bl	8004460 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045da:	6822      	ldr	r2, [r4, #0]
 80045dc:	6913      	ldr	r3, [r2, #16]
 80045de:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80045e2:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80045e4:	6822      	ldr	r2, [r4, #0]
 80045e6:	6953      	ldr	r3, [r2, #20]
 80045e8:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80045ec:	6153      	str	r3, [r2, #20]
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80045ee:	6822      	ldr	r2, [r4, #0]
 80045f0:	6953      	ldr	r3, [r2, #20]
 80045f2:	f043 0308 	orr.w	r3, r3, #8
 80045f6:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 80045f8:	6822      	ldr	r2, [r4, #0]
 80045fa:	68d3      	ldr	r3, [r2, #12]
 80045fc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004600:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004602:	2000      	movs	r0, #0
 8004604:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004606:	2320      	movs	r3, #32
 8004608:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800460c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8004610:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8004612:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8004616:	f7fd fc57 	bl	8001ec8 <HAL_UART_MspInit>
 800461a:	e7d3      	b.n	80045c4 <HAL_HalfDuplex_Init+0xe>
    return HAL_ERROR;
 800461c:	2001      	movs	r0, #1
}
 800461e:	4770      	bx	lr

08004620 <HAL_UART_Transmit>:
{
 8004620:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004624:	b082      	sub	sp, #8
 8004626:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8004628:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800462c:	b2db      	uxtb	r3, r3
 800462e:	2b20      	cmp	r3, #32
 8004630:	d15a      	bne.n	80046e8 <HAL_UART_Transmit+0xc8>
 8004632:	4604      	mov	r4, r0
 8004634:	460d      	mov	r5, r1
 8004636:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8004638:	2900      	cmp	r1, #0
 800463a:	d059      	beq.n	80046f0 <HAL_UART_Transmit+0xd0>
 800463c:	2a00      	cmp	r2, #0
 800463e:	d059      	beq.n	80046f4 <HAL_UART_Transmit+0xd4>
    __HAL_LOCK(huart);
 8004640:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004644:	2b01      	cmp	r3, #1
 8004646:	d057      	beq.n	80046f8 <HAL_UART_Transmit+0xd8>
 8004648:	2301      	movs	r3, #1
 800464a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800464e:	2300      	movs	r3, #0
 8004650:	6403      	str	r3, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004652:	2321      	movs	r3, #33	; 0x21
 8004654:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    tickstart = HAL_GetTick();
 8004658:	f7fd fd52 	bl	8002100 <HAL_GetTick>
 800465c:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 800465e:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8004662:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004666:	68a3      	ldr	r3, [r4, #8]
 8004668:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800466c:	d00c      	beq.n	8004688 <HAL_UART_Transmit+0x68>
      pdata16bits = NULL;
 800466e:	f04f 0a00 	mov.w	sl, #0
    __HAL_UNLOCK(huart);
 8004672:	2300      	movs	r3, #0
 8004674:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 8004678:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800467a:	b29b      	uxth	r3, r3
 800467c:	b343      	cbz	r3, 80046d0 <HAL_UART_Transmit+0xb0>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800467e:	f04f 0900 	mov.w	r9, #0
 8004682:	f04f 0880 	mov.w	r8, #128	; 0x80
 8004686:	e014      	b.n	80046b2 <HAL_UART_Transmit+0x92>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004688:	6923      	ldr	r3, [r4, #16]
 800468a:	b913      	cbnz	r3, 8004692 <HAL_UART_Transmit+0x72>
      pdata16bits = (uint16_t *) pData;
 800468c:	46aa      	mov	sl, r5
      pdata8bits  = NULL;
 800468e:	2500      	movs	r5, #0
 8004690:	e7ef      	b.n	8004672 <HAL_UART_Transmit+0x52>
      pdata16bits = NULL;
 8004692:	f04f 0a00 	mov.w	sl, #0
 8004696:	e7ec      	b.n	8004672 <HAL_UART_Transmit+0x52>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004698:	6822      	ldr	r2, [r4, #0]
 800469a:	f83a 3b02 	ldrh.w	r3, [sl], #2
 800469e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046a2:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 80046a4:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80046a6:	3a01      	subs	r2, #1
 80046a8:	b292      	uxth	r2, r2
 80046aa:	84e2      	strh	r2, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80046ac:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80046ae:	b29b      	uxth	r3, r3
 80046b0:	b173      	cbz	r3, 80046d0 <HAL_UART_Transmit+0xb0>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80046b2:	9600      	str	r6, [sp, #0]
 80046b4:	463b      	mov	r3, r7
 80046b6:	464a      	mov	r2, r9
 80046b8:	4641      	mov	r1, r8
 80046ba:	4620      	mov	r0, r4
 80046bc:	f7ff ff16 	bl	80044ec <UART_WaitOnFlagUntilTimeout>
 80046c0:	b9e0      	cbnz	r0, 80046fc <HAL_UART_Transmit+0xdc>
      if (pdata8bits == NULL)
 80046c2:	2d00      	cmp	r5, #0
 80046c4:	d0e8      	beq.n	8004698 <HAL_UART_Transmit+0x78>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80046c6:	6823      	ldr	r3, [r4, #0]
 80046c8:	f815 2b01 	ldrb.w	r2, [r5], #1
 80046cc:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80046ce:	e7e9      	b.n	80046a4 <HAL_UART_Transmit+0x84>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80046d0:	9600      	str	r6, [sp, #0]
 80046d2:	463b      	mov	r3, r7
 80046d4:	2200      	movs	r2, #0
 80046d6:	2140      	movs	r1, #64	; 0x40
 80046d8:	4620      	mov	r0, r4
 80046da:	f7ff ff07 	bl	80044ec <UART_WaitOnFlagUntilTimeout>
 80046de:	b978      	cbnz	r0, 8004700 <HAL_UART_Transmit+0xe0>
    huart->gState = HAL_UART_STATE_READY;
 80046e0:	2320      	movs	r3, #32
 80046e2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_OK;
 80046e6:	e000      	b.n	80046ea <HAL_UART_Transmit+0xca>
    return HAL_BUSY;
 80046e8:	2002      	movs	r0, #2
}
 80046ea:	b002      	add	sp, #8
 80046ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      return  HAL_ERROR;
 80046f0:	2001      	movs	r0, #1
 80046f2:	e7fa      	b.n	80046ea <HAL_UART_Transmit+0xca>
 80046f4:	2001      	movs	r0, #1
 80046f6:	e7f8      	b.n	80046ea <HAL_UART_Transmit+0xca>
    __HAL_LOCK(huart);
 80046f8:	2002      	movs	r0, #2
 80046fa:	e7f6      	b.n	80046ea <HAL_UART_Transmit+0xca>
        return HAL_TIMEOUT;
 80046fc:	2003      	movs	r0, #3
 80046fe:	e7f4      	b.n	80046ea <HAL_UART_Transmit+0xca>
      return HAL_TIMEOUT;
 8004700:	2003      	movs	r0, #3
 8004702:	e7f2      	b.n	80046ea <HAL_UART_Transmit+0xca>

08004704 <HAL_UART_Receive>:
{
 8004704:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004708:	b082      	sub	sp, #8
 800470a:	461e      	mov	r6, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 800470c:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8004710:	b2db      	uxtb	r3, r3
 8004712:	2b20      	cmp	r3, #32
 8004714:	d163      	bne.n	80047de <HAL_UART_Receive+0xda>
 8004716:	4604      	mov	r4, r0
 8004718:	460d      	mov	r5, r1
 800471a:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 800471c:	2900      	cmp	r1, #0
 800471e:	d062      	beq.n	80047e6 <HAL_UART_Receive+0xe2>
 8004720:	2a00      	cmp	r2, #0
 8004722:	d062      	beq.n	80047ea <HAL_UART_Receive+0xe6>
    __HAL_LOCK(huart);
 8004724:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004728:	2b01      	cmp	r3, #1
 800472a:	d060      	beq.n	80047ee <HAL_UART_Receive+0xea>
 800472c:	2301      	movs	r3, #1
 800472e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004732:	2300      	movs	r3, #0
 8004734:	6403      	str	r3, [r0, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004736:	2222      	movs	r2, #34	; 0x22
 8004738:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800473c:	6303      	str	r3, [r0, #48]	; 0x30
    tickstart = HAL_GetTick();
 800473e:	f7fd fcdf 	bl	8002100 <HAL_GetTick>
 8004742:	4607      	mov	r7, r0
    huart->RxXferSize = Size;
 8004744:	f8a4 802c 	strh.w	r8, [r4, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004748:	f8a4 802e 	strh.w	r8, [r4, #46]	; 0x2e
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800474c:	68a3      	ldr	r3, [r4, #8]
 800474e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004752:	d00d      	beq.n	8004770 <HAL_UART_Receive+0x6c>
      pdata16bits = NULL;
 8004754:	f04f 0a00 	mov.w	sl, #0
    __HAL_UNLOCK(huart);
 8004758:	2300      	movs	r3, #0
 800475a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    while (huart->RxXferCount > 0U)
 800475e:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8004760:	b29b      	uxth	r3, r3
 8004762:	2b00      	cmp	r3, #0
 8004764:	d036      	beq.n	80047d4 <HAL_UART_Receive+0xd0>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004766:	f04f 0900 	mov.w	r9, #0
 800476a:	f04f 0820 	mov.w	r8, #32
 800476e:	e01a      	b.n	80047a6 <HAL_UART_Receive+0xa2>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004770:	6923      	ldr	r3, [r4, #16]
 8004772:	b913      	cbnz	r3, 800477a <HAL_UART_Receive+0x76>
      pdata16bits = (uint16_t *) pData;
 8004774:	46aa      	mov	sl, r5
      pdata8bits  = NULL;
 8004776:	2500      	movs	r5, #0
 8004778:	e7ee      	b.n	8004758 <HAL_UART_Receive+0x54>
      pdata16bits = NULL;
 800477a:	f04f 0a00 	mov.w	sl, #0
 800477e:	e7eb      	b.n	8004758 <HAL_UART_Receive+0x54>
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004780:	6823      	ldr	r3, [r4, #0]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004788:	f82a 3b02 	strh.w	r3, [sl], #2
        pdata16bits++;
 800478c:	e004      	b.n	8004798 <HAL_UART_Receive+0x94>
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800478e:	6823      	ldr	r3, [r4, #0]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	b2db      	uxtb	r3, r3
 8004794:	f805 3b01 	strb.w	r3, [r5], #1
      huart->RxXferCount--;
 8004798:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 800479a:	3a01      	subs	r2, #1
 800479c:	b292      	uxth	r2, r2
 800479e:	85e2      	strh	r2, [r4, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80047a0:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80047a2:	b29b      	uxth	r3, r3
 80047a4:	b1b3      	cbz	r3, 80047d4 <HAL_UART_Receive+0xd0>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80047a6:	9600      	str	r6, [sp, #0]
 80047a8:	463b      	mov	r3, r7
 80047aa:	464a      	mov	r2, r9
 80047ac:	4641      	mov	r1, r8
 80047ae:	4620      	mov	r0, r4
 80047b0:	f7ff fe9c 	bl	80044ec <UART_WaitOnFlagUntilTimeout>
 80047b4:	b9e8      	cbnz	r0, 80047f2 <HAL_UART_Receive+0xee>
      if (pdata8bits == NULL)
 80047b6:	2d00      	cmp	r5, #0
 80047b8:	d0e2      	beq.n	8004780 <HAL_UART_Receive+0x7c>
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80047ba:	68a3      	ldr	r3, [r4, #8]
 80047bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047c0:	d0e5      	beq.n	800478e <HAL_UART_Receive+0x8a>
 80047c2:	b913      	cbnz	r3, 80047ca <HAL_UART_Receive+0xc6>
 80047c4:	6923      	ldr	r3, [r4, #16]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d0e1      	beq.n	800478e <HAL_UART_Receive+0x8a>
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80047ca:	6823      	ldr	r3, [r4, #0]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047d2:	e7df      	b.n	8004794 <HAL_UART_Receive+0x90>
    huart->RxState = HAL_UART_STATE_READY;
 80047d4:	2320      	movs	r3, #32
 80047d6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 80047da:	2000      	movs	r0, #0
 80047dc:	e000      	b.n	80047e0 <HAL_UART_Receive+0xdc>
    return HAL_BUSY;
 80047de:	2002      	movs	r0, #2
}
 80047e0:	b002      	add	sp, #8
 80047e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      return  HAL_ERROR;
 80047e6:	2001      	movs	r0, #1
 80047e8:	e7fa      	b.n	80047e0 <HAL_UART_Receive+0xdc>
 80047ea:	2001      	movs	r0, #1
 80047ec:	e7f8      	b.n	80047e0 <HAL_UART_Receive+0xdc>
    __HAL_LOCK(huart);
 80047ee:	2002      	movs	r0, #2
 80047f0:	e7f6      	b.n	80047e0 <HAL_UART_Receive+0xdc>
        return HAL_TIMEOUT;
 80047f2:	2003      	movs	r0, #3
 80047f4:	e7f4      	b.n	80047e0 <HAL_UART_Receive+0xdc>

080047f6 <HAL_UART_Transmit_IT>:
  if (huart->gState == HAL_UART_STATE_READY)
 80047f6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80047fa:	b2db      	uxtb	r3, r3
 80047fc:	2b20      	cmp	r3, #32
 80047fe:	d116      	bne.n	800482e <HAL_UART_Transmit_IT+0x38>
    if ((pData == NULL) || (Size == 0U))
 8004800:	b1b9      	cbz	r1, 8004832 <HAL_UART_Transmit_IT+0x3c>
 8004802:	b1c2      	cbz	r2, 8004836 <HAL_UART_Transmit_IT+0x40>
    __HAL_LOCK(huart);
 8004804:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004808:	2b01      	cmp	r3, #1
 800480a:	d016      	beq.n	800483a <HAL_UART_Transmit_IT+0x44>
    huart->pTxBuffPtr = pData;
 800480c:	6201      	str	r1, [r0, #32]
    huart->TxXferSize = Size;
 800480e:	8482      	strh	r2, [r0, #36]	; 0x24
    huart->TxXferCount = Size;
 8004810:	84c2      	strh	r2, [r0, #38]	; 0x26
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004812:	2300      	movs	r3, #0
 8004814:	6403      	str	r3, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004816:	2221      	movs	r2, #33	; 0x21
 8004818:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    __HAL_UNLOCK(huart);
 800481c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8004820:	6801      	ldr	r1, [r0, #0]
 8004822:	68ca      	ldr	r2, [r1, #12]
 8004824:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004828:	60ca      	str	r2, [r1, #12]
    return HAL_OK;
 800482a:	4618      	mov	r0, r3
 800482c:	4770      	bx	lr
    return HAL_BUSY;
 800482e:	2002      	movs	r0, #2
 8004830:	4770      	bx	lr
      return HAL_ERROR;
 8004832:	2001      	movs	r0, #1
 8004834:	4770      	bx	lr
 8004836:	2001      	movs	r0, #1
 8004838:	4770      	bx	lr
    __HAL_LOCK(huart);
 800483a:	2002      	movs	r0, #2
}
 800483c:	4770      	bx	lr

0800483e <HAL_UART_ErrorCallback>:
}
 800483e:	4770      	bx	lr

08004840 <UART_DMAAbortOnError>:
{
 8004840:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004842:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8004844:	2300      	movs	r3, #0
 8004846:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004848:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 800484a:	f7ff fff8 	bl	800483e <HAL_UART_ErrorCallback>
}
 800484e:	bd08      	pop	{r3, pc}

08004850 <HAL_UARTEx_RxEventCallback>:
}
 8004850:	4770      	bx	lr

08004852 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004852:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8004856:	b2db      	uxtb	r3, r3
 8004858:	2b22      	cmp	r3, #34	; 0x22
 800485a:	d11e      	bne.n	800489a <UART_Receive_IT+0x48>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800485c:	6883      	ldr	r3, [r0, #8]
 800485e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004862:	d006      	beq.n	8004872 <UART_Receive_IT+0x20>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004864:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004866:	b183      	cbz	r3, 800488a <UART_Receive_IT+0x38>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004868:	6803      	ldr	r3, [r0, #0]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004870:	e01b      	b.n	80048aa <UART_Receive_IT+0x58>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004872:	6903      	ldr	r3, [r0, #16]
 8004874:	b9ab      	cbnz	r3, 80048a2 <UART_Receive_IT+0x50>
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004876:	6a82      	ldr	r2, [r0, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004878:	6803      	ldr	r3, [r0, #0]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004880:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 8004882:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004884:	3302      	adds	r3, #2
 8004886:	6283      	str	r3, [r0, #40]	; 0x28
 8004888:	e013      	b.n	80048b2 <UART_Receive_IT+0x60>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800488a:	6903      	ldr	r3, [r0, #16]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d1eb      	bne.n	8004868 <UART_Receive_IT+0x16>
 8004890:	e008      	b.n	80048a4 <UART_Receive_IT+0x52>
       HAL_UART_RxCpltCallback(huart);
 8004892:	f7fc fb85 	bl	8000fa0 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 8004896:	2000      	movs	r0, #0
 8004898:	e03f      	b.n	800491a <UART_Receive_IT+0xc8>
    return HAL_BUSY;
 800489a:	2002      	movs	r0, #2
 800489c:	4770      	bx	lr
    return HAL_OK;
 800489e:	2000      	movs	r0, #0
}
 80048a0:	4770      	bx	lr
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80048a2:	6a82      	ldr	r2, [r0, #40]	; 0x28
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80048a4:	6803      	ldr	r3, [r0, #0]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 80048ac:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80048ae:	3301      	adds	r3, #1
 80048b0:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 80048b2:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 80048b4:	3b01      	subs	r3, #1
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	85c3      	strh	r3, [r0, #46]	; 0x2e
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d1ef      	bne.n	800489e <UART_Receive_IT+0x4c>
{
 80048be:	b500      	push	{lr}
 80048c0:	b083      	sub	sp, #12
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80048c2:	6802      	ldr	r2, [r0, #0]
 80048c4:	68d3      	ldr	r3, [r2, #12]
 80048c6:	f023 0320 	bic.w	r3, r3, #32
 80048ca:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80048cc:	6802      	ldr	r2, [r0, #0]
 80048ce:	68d3      	ldr	r3, [r2, #12]
 80048d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048d4:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80048d6:	6802      	ldr	r2, [r0, #0]
 80048d8:	6953      	ldr	r3, [r2, #20]
 80048da:	f023 0301 	bic.w	r3, r3, #1
 80048de:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 80048e0:	2320      	movs	r3, #32
 80048e2:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048e6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d1d2      	bne.n	8004892 <UART_Receive_IT+0x40>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048ec:	2300      	movs	r3, #0
 80048ee:	6303      	str	r3, [r0, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048f0:	6802      	ldr	r2, [r0, #0]
 80048f2:	68d3      	ldr	r3, [r2, #12]
 80048f4:	f023 0310 	bic.w	r3, r3, #16
 80048f8:	60d3      	str	r3, [r2, #12]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80048fa:	6803      	ldr	r3, [r0, #0]
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	f012 0f10 	tst.w	r2, #16
 8004902:	d006      	beq.n	8004912 <UART_Receive_IT+0xc0>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004904:	2200      	movs	r2, #0
 8004906:	9201      	str	r2, [sp, #4]
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	9201      	str	r2, [sp, #4]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	9301      	str	r3, [sp, #4]
 8004910:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004912:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8004914:	f7ff ff9c 	bl	8004850 <HAL_UARTEx_RxEventCallback>
      return HAL_OK;
 8004918:	2000      	movs	r0, #0
}
 800491a:	b003      	add	sp, #12
 800491c:	f85d fb04 	ldr.w	pc, [sp], #4

08004920 <HAL_UART_IRQHandler>:
{
 8004920:	b510      	push	{r4, lr}
 8004922:	b082      	sub	sp, #8
 8004924:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004926:	6802      	ldr	r2, [r0, #0]
 8004928:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800492a:	68d1      	ldr	r1, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800492c:	6950      	ldr	r0, [r2, #20]
  if (errorflags == RESET)
 800492e:	f013 0f0f 	tst.w	r3, #15
 8004932:	d109      	bne.n	8004948 <HAL_UART_IRQHandler+0x28>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004934:	f013 0f20 	tst.w	r3, #32
 8004938:	d00d      	beq.n	8004956 <HAL_UART_IRQHandler+0x36>
 800493a:	f011 0f20 	tst.w	r1, #32
 800493e:	d00a      	beq.n	8004956 <HAL_UART_IRQHandler+0x36>
      UART_Receive_IT(huart);
 8004940:	4620      	mov	r0, r4
 8004942:	f7ff ff86 	bl	8004852 <UART_Receive_IT>
      return;
 8004946:	e017      	b.n	8004978 <HAL_UART_IRQHandler+0x58>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004948:	f000 0001 	and.w	r0, r0, #1
 800494c:	f401 7c90 	and.w	ip, r1, #288	; 0x120
 8004950:	ea5c 0c00 	orrs.w	ip, ip, r0
 8004954:	d112      	bne.n	800497c <HAL_UART_IRQHandler+0x5c>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004956:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8004958:	2801      	cmp	r0, #1
 800495a:	d077      	beq.n	8004a4c <HAL_UART_IRQHandler+0x12c>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800495c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004960:	d003      	beq.n	800496a <HAL_UART_IRQHandler+0x4a>
 8004962:	f011 0f80 	tst.w	r1, #128	; 0x80
 8004966:	f040 80d9 	bne.w	8004b1c <HAL_UART_IRQHandler+0x1fc>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800496a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800496e:	d003      	beq.n	8004978 <HAL_UART_IRQHandler+0x58>
 8004970:	f011 0f40 	tst.w	r1, #64	; 0x40
 8004974:	f040 80ff 	bne.w	8004b76 <HAL_UART_IRQHandler+0x256>
}
 8004978:	b002      	add	sp, #8
 800497a:	bd10      	pop	{r4, pc}
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800497c:	f013 0f01 	tst.w	r3, #1
 8004980:	d006      	beq.n	8004990 <HAL_UART_IRQHandler+0x70>
 8004982:	f411 7f80 	tst.w	r1, #256	; 0x100
 8004986:	d003      	beq.n	8004990 <HAL_UART_IRQHandler+0x70>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004988:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800498a:	f042 0201 	orr.w	r2, r2, #1
 800498e:	6422      	str	r2, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004990:	f013 0f04 	tst.w	r3, #4
 8004994:	d02f      	beq.n	80049f6 <HAL_UART_IRQHandler+0xd6>
 8004996:	b158      	cbz	r0, 80049b0 <HAL_UART_IRQHandler+0x90>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004998:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800499a:	f042 0202 	orr.w	r2, r2, #2
 800499e:	6422      	str	r2, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80049a0:	f013 0f02 	tst.w	r3, #2
 80049a4:	f000 80f2 	beq.w	8004b8c <HAL_UART_IRQHandler+0x26c>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80049a8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80049aa:	f042 0204 	orr.w	r2, r2, #4
 80049ae:	6422      	str	r2, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80049b0:	f013 0f08 	tst.w	r3, #8
 80049b4:	d007      	beq.n	80049c6 <HAL_UART_IRQHandler+0xa6>
 80049b6:	f001 0220 	and.w	r2, r1, #32
 80049ba:	4302      	orrs	r2, r0
 80049bc:	d003      	beq.n	80049c6 <HAL_UART_IRQHandler+0xa6>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80049be:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80049c0:	f042 0208 	orr.w	r2, r2, #8
 80049c4:	6422      	str	r2, [r4, #64]	; 0x40
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80049c6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80049c8:	2a00      	cmp	r2, #0
 80049ca:	d0d5      	beq.n	8004978 <HAL_UART_IRQHandler+0x58>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80049cc:	f013 0f20 	tst.w	r3, #32
 80049d0:	d002      	beq.n	80049d8 <HAL_UART_IRQHandler+0xb8>
 80049d2:	f011 0f20 	tst.w	r1, #32
 80049d6:	d114      	bne.n	8004a02 <HAL_UART_IRQHandler+0xe2>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80049d8:	6823      	ldr	r3, [r4, #0]
 80049da:	695a      	ldr	r2, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80049dc:	6c23      	ldr	r3, [r4, #64]	; 0x40
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80049de:	f002 0240 	and.w	r2, r2, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80049e2:	f003 0308 	and.w	r3, r3, #8
 80049e6:	4313      	orrs	r3, r2
 80049e8:	d10f      	bne.n	8004a0a <HAL_UART_IRQHandler+0xea>
        HAL_UART_ErrorCallback(huart);
 80049ea:	4620      	mov	r0, r4
 80049ec:	f7ff ff27 	bl	800483e <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049f0:	2300      	movs	r3, #0
 80049f2:	6423      	str	r3, [r4, #64]	; 0x40
 80049f4:	e7c0      	b.n	8004978 <HAL_UART_IRQHandler+0x58>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80049f6:	f013 0f02 	tst.w	r3, #2
 80049fa:	d0d9      	beq.n	80049b0 <HAL_UART_IRQHandler+0x90>
 80049fc:	2800      	cmp	r0, #0
 80049fe:	d0d7      	beq.n	80049b0 <HAL_UART_IRQHandler+0x90>
 8004a00:	e7d2      	b.n	80049a8 <HAL_UART_IRQHandler+0x88>
        UART_Receive_IT(huart);
 8004a02:	4620      	mov	r0, r4
 8004a04:	f7ff ff25 	bl	8004852 <UART_Receive_IT>
 8004a08:	e7e6      	b.n	80049d8 <HAL_UART_IRQHandler+0xb8>
        UART_EndRxTransfer(huart);
 8004a0a:	4620      	mov	r0, r4
 8004a0c:	f7ff fd0e 	bl	800442c <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a10:	6823      	ldr	r3, [r4, #0]
 8004a12:	695a      	ldr	r2, [r3, #20]
 8004a14:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004a18:	d014      	beq.n	8004a44 <HAL_UART_IRQHandler+0x124>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a1a:	695a      	ldr	r2, [r3, #20]
 8004a1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a20:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8004a22:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004a24:	b153      	cbz	r3, 8004a3c <HAL_UART_IRQHandler+0x11c>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004a26:	4a5c      	ldr	r2, [pc, #368]	; (8004b98 <HAL_UART_IRQHandler+0x278>)
 8004a28:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004a2a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004a2c:	f7fd fbfa 	bl	8002224 <HAL_DMA_Abort_IT>
 8004a30:	2800      	cmp	r0, #0
 8004a32:	d0a1      	beq.n	8004978 <HAL_UART_IRQHandler+0x58>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004a34:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004a36:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004a38:	4798      	blx	r3
 8004a3a:	e79d      	b.n	8004978 <HAL_UART_IRQHandler+0x58>
            HAL_UART_ErrorCallback(huart);
 8004a3c:	4620      	mov	r0, r4
 8004a3e:	f7ff fefe 	bl	800483e <HAL_UART_ErrorCallback>
 8004a42:	e799      	b.n	8004978 <HAL_UART_IRQHandler+0x58>
          HAL_UART_ErrorCallback(huart);
 8004a44:	4620      	mov	r0, r4
 8004a46:	f7ff fefa 	bl	800483e <HAL_UART_ErrorCallback>
 8004a4a:	e795      	b.n	8004978 <HAL_UART_IRQHandler+0x58>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004a4c:	f013 0f10 	tst.w	r3, #16
 8004a50:	d084      	beq.n	800495c <HAL_UART_IRQHandler+0x3c>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004a52:	f011 0f10 	tst.w	r1, #16
 8004a56:	d081      	beq.n	800495c <HAL_UART_IRQHandler+0x3c>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004a58:	2300      	movs	r3, #0
 8004a5a:	9301      	str	r3, [sp, #4]
 8004a5c:	6813      	ldr	r3, [r2, #0]
 8004a5e:	9301      	str	r3, [sp, #4]
 8004a60:	6853      	ldr	r3, [r2, #4]
 8004a62:	9301      	str	r3, [sp, #4]
 8004a64:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a66:	6953      	ldr	r3, [r2, #20]
 8004a68:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004a6c:	d032      	beq.n	8004ad4 <HAL_UART_IRQHandler+0x1b4>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004a6e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004a70:	680b      	ldr	r3, [r1, #0]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	b29b      	uxth	r3, r3
      if (  (nb_remaining_rx_data > 0U)
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	f43f af7e 	beq.w	8004978 <HAL_UART_IRQHandler+0x58>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004a7c:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
 8004a7e:	4298      	cmp	r0, r3
 8004a80:	f67f af7a 	bls.w	8004978 <HAL_UART_IRQHandler+0x58>
        huart->RxXferCount = nb_remaining_rx_data;
 8004a84:	85e3      	strh	r3, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004a86:	698b      	ldr	r3, [r1, #24]
 8004a88:	2b20      	cmp	r3, #32
 8004a8a:	d107      	bne.n	8004a9c <HAL_UART_IRQHandler+0x17c>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004a8c:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8004a8e:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8004a90:	1ac9      	subs	r1, r1, r3
 8004a92:	b289      	uxth	r1, r1
 8004a94:	4620      	mov	r0, r4
 8004a96:	f7ff fedb 	bl	8004850 <HAL_UARTEx_RxEventCallback>
 8004a9a:	e76d      	b.n	8004978 <HAL_UART_IRQHandler+0x58>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a9c:	68d3      	ldr	r3, [r2, #12]
 8004a9e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004aa2:	60d3      	str	r3, [r2, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aa4:	6822      	ldr	r2, [r4, #0]
 8004aa6:	6953      	ldr	r3, [r2, #20]
 8004aa8:	f023 0301 	bic.w	r3, r3, #1
 8004aac:	6153      	str	r3, [r2, #20]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004aae:	6822      	ldr	r2, [r4, #0]
 8004ab0:	6953      	ldr	r3, [r2, #20]
 8004ab2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ab6:	6153      	str	r3, [r2, #20]
          huart->RxState = HAL_UART_STATE_READY;
 8004ab8:	2320      	movs	r3, #32
 8004aba:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	6323      	str	r3, [r4, #48]	; 0x30
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ac2:	6822      	ldr	r2, [r4, #0]
 8004ac4:	68d3      	ldr	r3, [r2, #12]
 8004ac6:	f023 0310 	bic.w	r3, r3, #16
 8004aca:	60d3      	str	r3, [r2, #12]
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004acc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004ace:	f7fd fb87 	bl	80021e0 <HAL_DMA_Abort>
 8004ad2:	e7db      	b.n	8004a8c <HAL_UART_IRQHandler+0x16c>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004ad4:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8004ad6:	b299      	uxth	r1, r3
      if (  (huart->RxXferCount > 0U)
 8004ad8:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	f43f af4b 	beq.w	8004978 <HAL_UART_IRQHandler+0x58>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004ae2:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 8004ae4:	1a59      	subs	r1, r3, r1
 8004ae6:	b289      	uxth	r1, r1
          &&(nb_rx_data > 0U) )
 8004ae8:	2900      	cmp	r1, #0
 8004aea:	f43f af45 	beq.w	8004978 <HAL_UART_IRQHandler+0x58>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004aee:	68d3      	ldr	r3, [r2, #12]
 8004af0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004af4:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004af6:	6822      	ldr	r2, [r4, #0]
 8004af8:	6953      	ldr	r3, [r2, #20]
 8004afa:	f023 0301 	bic.w	r3, r3, #1
 8004afe:	6153      	str	r3, [r2, #20]
        huart->RxState = HAL_UART_STATE_READY;
 8004b00:	2320      	movs	r3, #32
 8004b02:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b06:	2300      	movs	r3, #0
 8004b08:	6323      	str	r3, [r4, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b0a:	6822      	ldr	r2, [r4, #0]
 8004b0c:	68d3      	ldr	r3, [r2, #12]
 8004b0e:	f023 0310 	bic.w	r3, r3, #16
 8004b12:	60d3      	str	r3, [r2, #12]
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004b14:	4620      	mov	r0, r4
 8004b16:	f7ff fe9b 	bl	8004850 <HAL_UARTEx_RxEventCallback>
 8004b1a:	e72d      	b.n	8004978 <HAL_UART_IRQHandler+0x58>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004b1c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	2b21      	cmp	r3, #33	; 0x21
 8004b24:	f47f af28 	bne.w	8004978 <HAL_UART_IRQHandler+0x58>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b28:	68a3      	ldr	r3, [r4, #8]
 8004b2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b2e:	d016      	beq.n	8004b5e <HAL_UART_IRQHandler+0x23e>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004b30:	6a23      	ldr	r3, [r4, #32]
 8004b32:	1c59      	adds	r1, r3, #1
 8004b34:	6221      	str	r1, [r4, #32]
 8004b36:	781b      	ldrb	r3, [r3, #0]
 8004b38:	6053      	str	r3, [r2, #4]
    if (--huart->TxXferCount == 0U)
 8004b3a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8004b3c:	3b01      	subs	r3, #1
 8004b3e:	b29b      	uxth	r3, r3
 8004b40:	84e3      	strh	r3, [r4, #38]	; 0x26
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	f47f af18 	bne.w	8004978 <HAL_UART_IRQHandler+0x58>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004b48:	6822      	ldr	r2, [r4, #0]
 8004b4a:	68d3      	ldr	r3, [r2, #12]
 8004b4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b50:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004b52:	6822      	ldr	r2, [r4, #0]
 8004b54:	68d3      	ldr	r3, [r2, #12]
 8004b56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b5a:	60d3      	str	r3, [r2, #12]
 8004b5c:	e70c      	b.n	8004978 <HAL_UART_IRQHandler+0x58>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b5e:	6923      	ldr	r3, [r4, #16]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d1e5      	bne.n	8004b30 <HAL_UART_IRQHandler+0x210>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004b64:	6a23      	ldr	r3, [r4, #32]
 8004b66:	881b      	ldrh	r3, [r3, #0]
 8004b68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b6c:	6053      	str	r3, [r2, #4]
      huart->pTxBuffPtr += 2U;
 8004b6e:	6a23      	ldr	r3, [r4, #32]
 8004b70:	3302      	adds	r3, #2
 8004b72:	6223      	str	r3, [r4, #32]
 8004b74:	e7e1      	b.n	8004b3a <HAL_UART_IRQHandler+0x21a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004b76:	68d3      	ldr	r3, [r2, #12]
 8004b78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b7c:	60d3      	str	r3, [r2, #12]
  huart->gState = HAL_UART_STATE_READY;
 8004b7e:	2320      	movs	r3, #32
 8004b80:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  HAL_UART_TxCpltCallback(huart);
 8004b84:	4620      	mov	r0, r4
 8004b86:	f7fc fa3b 	bl	8001000 <HAL_UART_TxCpltCallback>
  return HAL_OK;
 8004b8a:	e6f5      	b.n	8004978 <HAL_UART_IRQHandler+0x58>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004b8c:	f013 0f08 	tst.w	r3, #8
 8004b90:	f47f af15 	bne.w	80049be <HAL_UART_IRQHandler+0x9e>
 8004b94:	e717      	b.n	80049c6 <HAL_UART_IRQHandler+0xa6>
 8004b96:	bf00      	nop
 8004b98:	08004841 	.word	0x08004841

08004b9c <UART_Start_Receive_IT>:
{
 8004b9c:	4603      	mov	r3, r0
  huart->pRxBuffPtr = pData;
 8004b9e:	6281      	str	r1, [r0, #40]	; 0x28
  huart->RxXferSize = Size;
 8004ba0:	8582      	strh	r2, [r0, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004ba2:	85c2      	strh	r2, [r0, #46]	; 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ba4:	2000      	movs	r0, #0
 8004ba6:	6418      	str	r0, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004ba8:	2222      	movs	r2, #34	; 0x22
 8004baa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  __HAL_UNLOCK(huart);
 8004bae:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004bb2:	6819      	ldr	r1, [r3, #0]
 8004bb4:	68ca      	ldr	r2, [r1, #12]
 8004bb6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004bba:	60ca      	str	r2, [r1, #12]
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004bbc:	6819      	ldr	r1, [r3, #0]
 8004bbe:	694a      	ldr	r2, [r1, #20]
 8004bc0:	f042 0201 	orr.w	r2, r2, #1
 8004bc4:	614a      	str	r2, [r1, #20]
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	68d3      	ldr	r3, [r2, #12]
 8004bca:	f043 0320 	orr.w	r3, r3, #32
 8004bce:	60d3      	str	r3, [r2, #12]
}
 8004bd0:	4770      	bx	lr

08004bd2 <HAL_UART_Receive_IT>:
{
 8004bd2:	b508      	push	{r3, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8004bd4:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	2b20      	cmp	r3, #32
 8004bdc:	d10d      	bne.n	8004bfa <HAL_UART_Receive_IT+0x28>
    if ((pData == NULL) || (Size == 0U))
 8004bde:	b171      	cbz	r1, 8004bfe <HAL_UART_Receive_IT+0x2c>
 8004be0:	b17a      	cbz	r2, 8004c02 <HAL_UART_Receive_IT+0x30>
    __HAL_LOCK(huart);
 8004be2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d00d      	beq.n	8004c06 <HAL_UART_Receive_IT+0x34>
 8004bea:	2301      	movs	r3, #1
 8004bec:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	6303      	str	r3, [r0, #48]	; 0x30
    return(UART_Start_Receive_IT(huart, pData, Size));
 8004bf4:	f7ff ffd2 	bl	8004b9c <UART_Start_Receive_IT>
 8004bf8:	e000      	b.n	8004bfc <HAL_UART_Receive_IT+0x2a>
    return HAL_BUSY;
 8004bfa:	2002      	movs	r0, #2
}
 8004bfc:	bd08      	pop	{r3, pc}
      return HAL_ERROR;
 8004bfe:	2001      	movs	r0, #1
 8004c00:	e7fc      	b.n	8004bfc <HAL_UART_Receive_IT+0x2a>
 8004c02:	2001      	movs	r0, #1
 8004c04:	e7fa      	b.n	8004bfc <HAL_UART_Receive_IT+0x2a>
    __HAL_LOCK(huart);
 8004c06:	2002      	movs	r0, #2
 8004c08:	e7f8      	b.n	8004bfc <HAL_UART_Receive_IT+0x2a>

08004c0a <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004c0a:	b084      	sub	sp, #16
 8004c0c:	a801      	add	r0, sp, #4
 8004c0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8004c12:	2000      	movs	r0, #0
 8004c14:	b004      	add	sp, #16
 8004c16:	4770      	bx	lr

08004c18 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004c18:	4603      	mov	r3, r0
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004c1a:	2000      	movs	r0, #0
 8004c1c:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004c20:	f44f 423f 	mov.w	r2, #48896	; 0xbf00
 8004c24:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
}
 8004c28:	4770      	bx	lr

08004c2a <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004c2a:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8004c2e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004c32:	045b      	lsls	r3, r3, #17
 8004c34:	0c5b      	lsrs	r3, r3, #17
 8004c36:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 8004c3a:	2000      	movs	r0, #0
 8004c3c:	4770      	bx	lr

08004c3e <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8004c3e:	2000      	movs	r0, #0
 8004c40:	4770      	bx	lr

08004c42 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004c42:	b084      	sub	sp, #16
 8004c44:	4684      	mov	ip, r0
 8004c46:	a801      	add	r0, sp, #4
 8004c48:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	f8ac 3040 	strh.w	r3, [ip, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004c52:	2000      	movs	r0, #0
 8004c54:	f8ac 0040 	strh.w	r0, [ip, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004c58:	f8ac 0044 	strh.w	r0, [ip, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004c5c:	f8ac 0050 	strh.w	r0, [ip, #80]	; 0x50

  return HAL_OK;
}
 8004c60:	b004      	add	sp, #16
 8004c62:	4770      	bx	lr

08004c64 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004c64:	b510      	push	{r4, lr}
 8004c66:	4603      	mov	r3, r0
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004c68:	f891 e000 	ldrb.w	lr, [r1]
 8004c6c:	f830 202e 	ldrh.w	r2, [r0, lr, lsl #2]
 8004c70:	b292      	uxth	r2, r2
 8004c72:	f422 42ec 	bic.w	r2, r2, #30208	; 0x7600
 8004c76:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004c7a:	b292      	uxth	r2, r2

  /* initialize Endpoint */
  switch (ep->type)
 8004c7c:	78c8      	ldrb	r0, [r1, #3]
 8004c7e:	2803      	cmp	r0, #3
 8004c80:	d863      	bhi.n	8004d4a <USB_ActivateEndpoint+0xe6>
 8004c82:	e8df f000 	tbb	[pc, r0]
 8004c86:	5e57      	.short	0x5e57
 8004c88:	5a02      	.short	0x5a02
 8004c8a:	2000      	movs	r0, #0
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004c8c:	f248 0c80 	movw	ip, #32896	; 0x8080
 8004c90:	ea42 020c 	orr.w	r2, r2, ip
 8004c94:	f823 202e 	strh.w	r2, [r3, lr, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004c98:	f891 e000 	ldrb.w	lr, [r1]
 8004c9c:	f833 202e 	ldrh.w	r2, [r3, lr, lsl #2]
 8004ca0:	b292      	uxth	r2, r2
 8004ca2:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004ca6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004caa:	ea42 020e 	orr.w	r2, r2, lr
 8004cae:	ea4c 0202 	orr.w	r2, ip, r2
 8004cb2:	f823 202e 	strh.w	r2, [r3, lr, lsl #2]

  if (ep->doublebuffer == 0U)
 8004cb6:	7b0a      	ldrb	r2, [r1, #12]
 8004cb8:	2a00      	cmp	r2, #0
 8004cba:	f040 80bb 	bne.w	8004e34 <USB_ActivateEndpoint+0x1d0>
  {
    if (ep->is_in != 0U)
 8004cbe:	784a      	ldrb	r2, [r1, #1]
 8004cc0:	2a00      	cmp	r2, #0
 8004cc2:	d044      	beq.n	8004d4e <USB_ActivateEndpoint+0xea>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004cc4:	f8b3 e050 	ldrh.w	lr, [r3, #80]	; 0x50
 8004cc8:	fa1f fe8e 	uxth.w	lr, lr
 8004ccc:	780a      	ldrb	r2, [r1, #0]
 8004cce:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8004cd2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004cd6:	f8b1 c006 	ldrh.w	ip, [r1, #6]
 8004cda:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8004cde:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8004ce2:	f822 c00e 	strh.w	ip, [r2, lr]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004ce6:	780c      	ldrb	r4, [r1, #0]
 8004ce8:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8004cec:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004cf0:	d00c      	beq.n	8004d0c <USB_ActivateEndpoint+0xa8>
 8004cf2:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8004cf6:	b292      	uxth	r2, r2
 8004cf8:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004cfc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004d00:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d04:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8004d08:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8004d0c:	78ca      	ldrb	r2, [r1, #3]
 8004d0e:	2a01      	cmp	r2, #1
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004d10:	7809      	ldrb	r1, [r1, #0]
 8004d12:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8004d16:	b292      	uxth	r2, r2
 8004d18:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004d1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d20:	bf18      	it	ne
 8004d22:	f082 0220 	eorne.w	r2, r2, #32
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004d26:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d2a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004d2e:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return ret;
}
 8004d32:	bd10      	pop	{r4, pc}
      wEpRegVal |= USB_EP_CONTROL;
 8004d34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
      break;
 8004d38:	e7a8      	b.n	8004c8c <USB_ActivateEndpoint+0x28>
      wEpRegVal |= USB_EP_INTERRUPT;
 8004d3a:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
  HAL_StatusTypeDef ret = HAL_OK;
 8004d3e:	2000      	movs	r0, #0
      break;
 8004d40:	e7a4      	b.n	8004c8c <USB_ActivateEndpoint+0x28>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004d42:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
  HAL_StatusTypeDef ret = HAL_OK;
 8004d46:	2000      	movs	r0, #0
      break;
 8004d48:	e7a0      	b.n	8004c8c <USB_ActivateEndpoint+0x28>
      ret = HAL_ERROR;
 8004d4a:	2001      	movs	r0, #1
 8004d4c:	e79e      	b.n	8004c8c <USB_ActivateEndpoint+0x28>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004d4e:	f8b3 e050 	ldrh.w	lr, [r3, #80]	; 0x50
 8004d52:	fa1f fe8e 	uxth.w	lr, lr
 8004d56:	780a      	ldrb	r2, [r1, #0]
 8004d58:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8004d5c:	f502 6281 	add.w	r2, r2, #1032	; 0x408
 8004d60:	f8b1 c006 	ldrh.w	ip, [r1, #6]
 8004d64:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8004d68:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8004d6c:	f822 c00e 	strh.w	ip, [r2, lr]
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004d70:	f8b3 e050 	ldrh.w	lr, [r3, #80]	; 0x50
 8004d74:	fa1f fe8e 	uxth.w	lr, lr
 8004d78:	780a      	ldrb	r2, [r1, #0]
 8004d7a:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8004d7e:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 8004d82:	690c      	ldr	r4, [r1, #16]
 8004d84:	bbbc      	cbnz	r4, 8004df6 <USB_ActivateEndpoint+0x192>
 8004d86:	f832 c00e 	ldrh.w	ip, [r2, lr]
 8004d8a:	f42c 4cf8 	bic.w	ip, ip, #31744	; 0x7c00
 8004d8e:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 8004d92:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8004d96:	f822 c00e 	strh.w	ip, [r2, lr]
 8004d9a:	f832 c00e 	ldrh.w	ip, [r2, lr]
 8004d9e:	ea6f 4c4c 	mvn.w	ip, ip, lsl #17
 8004da2:	ea6f 4c5c 	mvn.w	ip, ip, lsr #17
 8004da6:	fa1f fc8c 	uxth.w	ip, ip
 8004daa:	f822 c00e 	strh.w	ip, [r2, lr]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004dae:	780c      	ldrb	r4, [r1, #0]
 8004db0:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8004db4:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8004db8:	d00c      	beq.n	8004dd4 <USB_ActivateEndpoint+0x170>
 8004dba:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8004dbe:	b292      	uxth	r2, r2
 8004dc0:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004dc4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004dc8:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8004dcc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004dd0:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004dd4:	7809      	ldrb	r1, [r1, #0]
 8004dd6:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8004dda:	b292      	uxth	r2, r2
 8004ddc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004de0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004de4:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8004de8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004dec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004df0:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8004df4:	e79d      	b.n	8004d32 <USB_ActivateEndpoint+0xce>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004df6:	2c3e      	cmp	r4, #62	; 0x3e
 8004df8:	d80d      	bhi.n	8004e16 <USB_ActivateEndpoint+0x1b2>
 8004dfa:	ea4f 0c54 	mov.w	ip, r4, lsr #1
 8004dfe:	f014 0f01 	tst.w	r4, #1
 8004e02:	bf18      	it	ne
 8004e04:	f10c 0c01 	addne.w	ip, ip, #1
 8004e08:	ea4f 2c8c 	mov.w	ip, ip, lsl #10
 8004e0c:	fa1f fc8c 	uxth.w	ip, ip
 8004e10:	f822 c00e 	strh.w	ip, [r2, lr]
 8004e14:	e7cb      	b.n	8004dae <USB_ActivateEndpoint+0x14a>
 8004e16:	ea4f 1c54 	mov.w	ip, r4, lsr #5
 8004e1a:	f014 0f1f 	tst.w	r4, #31
 8004e1e:	bf08      	it	eq
 8004e20:	f10c 3cff 	addeq.w	ip, ip, #4294967295
 8004e24:	ea6f 64cc 	mvn.w	r4, ip, lsl #27
 8004e28:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8004e2c:	b2a4      	uxth	r4, r4
 8004e2e:	f822 400e 	strh.w	r4, [r2, lr]
 8004e32:	e7bc      	b.n	8004dae <USB_ActivateEndpoint+0x14a>
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004e34:	f891 c000 	ldrb.w	ip, [r1]
 8004e38:	f833 202c 	ldrh.w	r2, [r3, ip, lsl #2]
 8004e3c:	b292      	uxth	r2, r2
 8004e3e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004e42:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004e46:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 8004e4a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004e4e:	f823 202c 	strh.w	r2, [r3, ip, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004e52:	f8b3 e050 	ldrh.w	lr, [r3, #80]	; 0x50
 8004e56:	fa1f fe8e 	uxth.w	lr, lr
 8004e5a:	780a      	ldrb	r2, [r1, #0]
 8004e5c:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8004e60:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004e64:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 8004e68:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8004e6c:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8004e70:	f822 c00e 	strh.w	ip, [r2, lr]
 8004e74:	f8b3 e050 	ldrh.w	lr, [r3, #80]	; 0x50
 8004e78:	fa1f fe8e 	uxth.w	lr, lr
 8004e7c:	780a      	ldrb	r2, [r1, #0]
 8004e7e:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8004e82:	f502 6281 	add.w	r2, r2, #1032	; 0x408
 8004e86:	f8b1 c00a 	ldrh.w	ip, [r1, #10]
 8004e8a:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8004e8e:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8004e92:	f822 c00e 	strh.w	ip, [r2, lr]
    if (ep->is_in == 0U)
 8004e96:	784a      	ldrb	r2, [r1, #1]
 8004e98:	2a00      	cmp	r2, #0
 8004e9a:	d142      	bne.n	8004f22 <USB_ActivateEndpoint+0x2be>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004e9c:	780c      	ldrb	r4, [r1, #0]
 8004e9e:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8004ea2:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8004ea6:	d00c      	beq.n	8004ec2 <USB_ActivateEndpoint+0x25e>
 8004ea8:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8004eac:	b292      	uxth	r2, r2
 8004eae:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004eb2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004eb6:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8004eba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004ebe:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004ec2:	780c      	ldrb	r4, [r1, #0]
 8004ec4:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8004ec8:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004ecc:	d00c      	beq.n	8004ee8 <USB_ActivateEndpoint+0x284>
 8004ece:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8004ed2:	b292      	uxth	r2, r2
 8004ed4:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004ed8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004edc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ee0:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8004ee4:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004ee8:	780c      	ldrb	r4, [r1, #0]
 8004eea:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8004eee:	b292      	uxth	r2, r2
 8004ef0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004ef4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004ef8:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8004efc:	f248 0c80 	movw	ip, #32896	; 0x8080
 8004f00:	ea4c 0202 	orr.w	r2, ip, r2
 8004f04:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004f08:	7809      	ldrb	r1, [r1, #0]
 8004f0a:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8004f0e:	b292      	uxth	r2, r2
 8004f10:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004f14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f18:	ea4c 0202 	orr.w	r2, ip, r2
 8004f1c:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8004f20:	e707      	b.n	8004d32 <USB_ActivateEndpoint+0xce>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f22:	780c      	ldrb	r4, [r1, #0]
 8004f24:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8004f28:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8004f2c:	d00c      	beq.n	8004f48 <USB_ActivateEndpoint+0x2e4>
 8004f2e:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8004f32:	b292      	uxth	r2, r2
 8004f34:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004f38:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004f3c:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8004f40:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004f44:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004f48:	780c      	ldrb	r4, [r1, #0]
 8004f4a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8004f4e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004f52:	d00c      	beq.n	8004f6e <USB_ActivateEndpoint+0x30a>
 8004f54:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8004f58:	b292      	uxth	r2, r2
 8004f5a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004f5e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004f62:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f66:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8004f6a:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 8004f6e:	78ca      	ldrb	r2, [r1, #3]
 8004f70:	2a01      	cmp	r2, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004f72:	780c      	ldrb	r4, [r1, #0]
 8004f74:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8004f78:	b292      	uxth	r2, r2
 8004f7a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004f7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f82:	bf18      	it	ne
 8004f84:	f082 0220 	eorne.w	r2, r2, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004f88:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f8c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004f90:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004f94:	7809      	ldrb	r1, [r1, #0]
 8004f96:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8004f9a:	b292      	uxth	r2, r2
 8004f9c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004fa0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004fa4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004fa8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004fac:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8004fb0:	e6bf      	b.n	8004d32 <USB_ActivateEndpoint+0xce>

08004fb2 <USB_DeactivateEndpoint>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8004fb2:	7b0b      	ldrb	r3, [r1, #12]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d146      	bne.n	8005046 <USB_DeactivateEndpoint+0x94>
  {
    if (ep->is_in != 0U)
 8004fb8:	784b      	ldrb	r3, [r1, #1]
 8004fba:	b313      	cbz	r3, 8005002 <USB_DeactivateEndpoint+0x50>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004fbc:	780a      	ldrb	r2, [r1, #0]
 8004fbe:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004fc2:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004fc6:	d00c      	beq.n	8004fe2 <USB_DeactivateEndpoint+0x30>
 8004fc8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004fcc:	b29b      	uxth	r3, r3
 8004fce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fda:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004fde:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004fe2:	780a      	ldrb	r2, [r1, #0]
 8004fe4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004fe8:	b29b      	uxth	r3, r3
 8004fea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ff2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ff6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ffa:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return HAL_OK;
}
 8004ffe:	2000      	movs	r0, #0
 8005000:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005002:	780a      	ldrb	r2, [r1, #0]
 8005004:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005008:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800500c:	d00c      	beq.n	8005028 <USB_DeactivateEndpoint+0x76>
 800500e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005012:	b29b      	uxth	r3, r3
 8005014:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005018:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800501c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005020:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005024:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005028:	780a      	ldrb	r2, [r1, #0]
 800502a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800502e:	b29b      	uxth	r3, r3
 8005030:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005034:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005038:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800503c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005040:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8005044:	e7db      	b.n	8004ffe <USB_DeactivateEndpoint+0x4c>
    if (ep->is_in == 0U)
 8005046:	784b      	ldrb	r3, [r1, #1]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d14d      	bne.n	80050e8 <USB_DeactivateEndpoint+0x136>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800504c:	780a      	ldrb	r2, [r1, #0]
 800504e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005052:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8005056:	d00c      	beq.n	8005072 <USB_DeactivateEndpoint+0xc0>
 8005058:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800505c:	b29b      	uxth	r3, r3
 800505e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005062:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005066:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800506a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800506e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005072:	780a      	ldrb	r2, [r1, #0]
 8005074:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005078:	f013 0f40 	tst.w	r3, #64	; 0x40
 800507c:	d00c      	beq.n	8005098 <USB_DeactivateEndpoint+0xe6>
 800507e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005082:	b29b      	uxth	r3, r3
 8005084:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005088:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800508c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005090:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005094:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8005098:	780a      	ldrb	r2, [r1, #0]
 800509a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800509e:	b29b      	uxth	r3, r3
 80050a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050ac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80050b0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80050b4:	f891 c000 	ldrb.w	ip, [r1]
 80050b8:	f830 302c 	ldrh.w	r3, [r0, ip, lsl #2]
 80050bc:	b29b      	uxth	r3, r3
 80050be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050c6:	f248 0280 	movw	r2, #32896	; 0x8080
 80050ca:	4313      	orrs	r3, r2
 80050cc:	f820 302c 	strh.w	r3, [r0, ip, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80050d0:	7809      	ldrb	r1, [r1, #0]
 80050d2:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 80050d6:	b29b      	uxth	r3, r3
 80050d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050e0:	4313      	orrs	r3, r2
 80050e2:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
 80050e6:	e78a      	b.n	8004ffe <USB_DeactivateEndpoint+0x4c>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80050e8:	780a      	ldrb	r2, [r1, #0]
 80050ea:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80050ee:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80050f2:	d00c      	beq.n	800510e <USB_DeactivateEndpoint+0x15c>
 80050f4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005102:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005106:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800510a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800510e:	780a      	ldrb	r2, [r1, #0]
 8005110:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005114:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005118:	d00c      	beq.n	8005134 <USB_DeactivateEndpoint+0x182>
 800511a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800511e:	b29b      	uxth	r3, r3
 8005120:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005124:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005128:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800512c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005130:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8005134:	780a      	ldrb	r2, [r1, #0]
 8005136:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800513a:	b29b      	uxth	r3, r3
 800513c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005140:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005144:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005148:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800514c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005150:	f891 c000 	ldrb.w	ip, [r1]
 8005154:	f830 302c 	ldrh.w	r3, [r0, ip, lsl #2]
 8005158:	b29b      	uxth	r3, r3
 800515a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800515e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005162:	f248 0280 	movw	r2, #32896	; 0x8080
 8005166:	4313      	orrs	r3, r2
 8005168:	f820 302c 	strh.w	r3, [r0, ip, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800516c:	7809      	ldrb	r1, [r1, #0]
 800516e:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8005172:	b29b      	uxth	r3, r3
 8005174:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005178:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800517c:	4313      	orrs	r3, r2
 800517e:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
 8005182:	e73c      	b.n	8004ffe <USB_DeactivateEndpoint+0x4c>

08005184 <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 8005184:	784b      	ldrb	r3, [r1, #1]
 8005186:	b18b      	cbz	r3, 80051ac <USB_EPSetStall+0x28>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005188:	780a      	ldrb	r2, [r1, #0]
 800518a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800518e:	b29b      	uxth	r3, r3
 8005190:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005194:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005198:	f083 0310 	eor.w	r3, r3, #16
 800519c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051a4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
  }

  return HAL_OK;
}
 80051a8:	2000      	movs	r0, #0
 80051aa:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80051ac:	780a      	ldrb	r2, [r1, #0]
 80051ae:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80051b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051bc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80051c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051c8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 80051cc:	e7ec      	b.n	80051a8 <USB_EPSetStall+0x24>

080051ce <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 80051ce:	7b0b      	ldrb	r3, [r1, #12]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d14b      	bne.n	800526c <USB_EPClearStall+0x9e>
  {
    if (ep->is_in != 0U)
 80051d4:	784b      	ldrb	r3, [r1, #1]
 80051d6:	b333      	cbz	r3, 8005226 <USB_EPClearStall+0x58>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80051d8:	780a      	ldrb	r2, [r1, #0]
 80051da:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80051de:	f013 0f40 	tst.w	r3, #64	; 0x40
 80051e2:	d00c      	beq.n	80051fe <USB_EPClearStall+0x30>
 80051e4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80051e8:	b29b      	uxth	r3, r3
 80051ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051f6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80051fa:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 80051fe:	78cb      	ldrb	r3, [r1, #3]
 8005200:	2b01      	cmp	r3, #1
 8005202:	d033      	beq.n	800526c <USB_EPClearStall+0x9e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005204:	780a      	ldrb	r2, [r1, #0]
 8005206:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800520a:	b29b      	uxth	r3, r3
 800520c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005210:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005214:	f083 0320 	eor.w	r3, r3, #32
 8005218:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800521c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005220:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8005224:	e022      	b.n	800526c <USB_EPClearStall+0x9e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005226:	780a      	ldrb	r2, [r1, #0]
 8005228:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800522c:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8005230:	d00c      	beq.n	800524c <USB_EPClearStall+0x7e>
 8005232:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005236:	b29b      	uxth	r3, r3
 8005238:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800523c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005240:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005244:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005248:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800524c:	780a      	ldrb	r2, [r1, #0]
 800524e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005252:	b29b      	uxth	r3, r3
 8005254:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005258:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800525c:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8005260:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005264:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005268:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 800526c:	2000      	movs	r0, #0
 800526e:	4770      	bx	lr

08005270 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 8005270:	b911      	cbnz	r1, 8005278 <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005272:	2380      	movs	r3, #128	; 0x80
 8005274:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 8005278:	2000      	movs	r0, #0
 800527a:	4770      	bx	lr

0800527c <USB_DevConnect>:
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 800527c:	2000      	movs	r0, #0
 800527e:	4770      	bx	lr

08005280 <USB_DevDisconnect>:
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8005280:	2000      	movs	r0, #0
 8005282:	4770      	bx	lr

08005284 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005284:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 8005288:	b280      	uxth	r0, r0
 800528a:	4770      	bx	lr

0800528c <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 800528c:	2000      	movs	r0, #0
 800528e:	4770      	bx	lr

08005290 <USB_WritePMA>:
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005290:	3301      	adds	r3, #1
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005292:	eb00 0c42 	add.w	ip, r0, r2, lsl #1
 8005296:	f50c 6c80 	add.w	ip, ip, #1024	; 0x400
 800529a:	4662      	mov	r2, ip

  for (i = n; i != 0U; i--)
 800529c:	085b      	lsrs	r3, r3, #1
 800529e:	d00d      	beq.n	80052bc <USB_WritePMA+0x2c>
 80052a0:	3102      	adds	r1, #2
 80052a2:	eb0c 0c83 	add.w	ip, ip, r3, lsl #2
  {
    temp1 = *pBuf;
    pBuf++;
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80052a6:	f811 0c01 	ldrb.w	r0, [r1, #-1]
    temp1 = *pBuf;
 80052aa:	f811 3c02 	ldrb.w	r3, [r1, #-2]
    *pdwVal = (uint16_t)temp2;
 80052ae:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80052b2:	f822 3b04 	strh.w	r3, [r2], #4
  for (i = n; i != 0U; i--)
 80052b6:	3102      	adds	r1, #2
 80052b8:	4594      	cmp	ip, r2
 80052ba:	d1f4      	bne.n	80052a6 <USB_WritePMA+0x16>
    pdwVal++;
#endif

    pBuf++;
  }
}
 80052bc:	4770      	bx	lr

080052be <USB_EPStartXfer>:
{
 80052be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052c0:	4605      	mov	r5, r0
 80052c2:	460c      	mov	r4, r1
  if (ep->is_in == 1U)
 80052c4:	784b      	ldrb	r3, [r1, #1]
 80052c6:	2b01      	cmp	r3, #1
 80052c8:	d035      	beq.n	8005336 <USB_EPStartXfer+0x78>
    if (ep->doublebuffer == 0U)
 80052ca:	7b0a      	ldrb	r2, [r1, #12]
 80052cc:	2a00      	cmp	r2, #0
 80052ce:	f040 82fe 	bne.w	80058ce <USB_EPStartXfer+0x610>
      if (ep->xfer_len > ep->maxpacket)
 80052d2:	6989      	ldr	r1, [r1, #24]
 80052d4:	6923      	ldr	r3, [r4, #16]
 80052d6:	4299      	cmp	r1, r3
        ep->xfer_len -= len;
 80052d8:	bf86      	itte	hi
 80052da:	1aca      	subhi	r2, r1, r3
        len = ep->maxpacket;
 80052dc:	4619      	movhi	r1, r3
        ep->xfer_len = 0U;
 80052de:	2200      	movls	r2, #0
 80052e0:	61a2      	str	r2, [r4, #24]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80052e2:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80052e6:	b29b      	uxth	r3, r3
 80052e8:	7822      	ldrb	r2, [r4, #0]
 80052ea:	0112      	lsls	r2, r2, #4
 80052ec:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 80052f0:	4403      	add	r3, r0
 80052f2:	2900      	cmp	r1, #0
 80052f4:	f040 82d3 	bne.w	800589e <USB_EPStartXfer+0x5e0>
 80052f8:	5ad1      	ldrh	r1, [r2, r3]
 80052fa:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 80052fe:	0409      	lsls	r1, r1, #16
 8005300:	0c09      	lsrs	r1, r1, #16
 8005302:	52d1      	strh	r1, [r2, r3]
 8005304:	5ad1      	ldrh	r1, [r2, r3]
 8005306:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 800530a:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 800530e:	b289      	uxth	r1, r1
 8005310:	52d1      	strh	r1, [r2, r3]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005312:	7822      	ldrb	r2, [r4, #0]
 8005314:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8005318:	b29b      	uxth	r3, r3
 800531a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800531e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005322:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8005326:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800532a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800532e:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
  return HAL_OK;
 8005332:	2000      	movs	r0, #0
}
 8005334:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (ep->xfer_len > ep->maxpacket)
 8005336:	690a      	ldr	r2, [r1, #16]
 8005338:	698e      	ldr	r6, [r1, #24]
 800533a:	4296      	cmp	r6, r2
 800533c:	bf28      	it	cs
 800533e:	4616      	movcs	r6, r2
    if (ep->doublebuffer == 0U)
 8005340:	7b0b      	ldrb	r3, [r1, #12]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d036      	beq.n	80053b4 <USB_EPStartXfer+0xf6>
      if (ep->type == EP_TYPE_BULK)
 8005346:	78cb      	ldrb	r3, [r1, #3]
 8005348:	2b02      	cmp	r3, #2
 800534a:	d054      	beq.n	80053f6 <USB_EPStartXfer+0x138>
        PCD_SET_EP_DBUF(USBx, ep->num);
 800534c:	780a      	ldrb	r2, [r1, #0]
 800534e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005352:	b29b      	uxth	r3, r3
 8005354:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005358:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800535c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005360:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005364:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
        ep->xfer_len_db -= len;
 8005368:	6a0b      	ldr	r3, [r1, #32]
 800536a:	1b9b      	subs	r3, r3, r6
 800536c:	620b      	str	r3, [r1, #32]
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800536e:	780b      	ldrb	r3, [r1, #0]
 8005370:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8005374:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005378:	f000 820b 	beq.w	8005792 <USB_EPStartXfer+0x4d4>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800537c:	784a      	ldrb	r2, [r1, #1]
 800537e:	2a00      	cmp	r2, #0
 8005380:	f040 81b1 	bne.w	80056e6 <USB_EPStartXfer+0x428>
 8005384:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8005388:	b292      	uxth	r2, r2
 800538a:	f200 410c 	addw	r1, r0, #1036	; 0x40c
 800538e:	440a      	add	r2, r1
 8005390:	011b      	lsls	r3, r3, #4
 8005392:	2e00      	cmp	r6, #0
 8005394:	f040 818f 	bne.w	80056b6 <USB_EPStartXfer+0x3f8>
 8005398:	5ad1      	ldrh	r1, [r2, r3]
 800539a:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 800539e:	0409      	lsls	r1, r1, #16
 80053a0:	0c09      	lsrs	r1, r1, #16
 80053a2:	52d1      	strh	r1, [r2, r3]
 80053a4:	5ad1      	ldrh	r1, [r2, r3]
 80053a6:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 80053aa:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80053ae:	b289      	uxth	r1, r1
 80053b0:	52d1      	strh	r1, [r2, r3]
 80053b2:	e19a      	b.n	80056ea <USB_EPStartXfer+0x42c>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80053b4:	b2b6      	uxth	r6, r6
 80053b6:	4633      	mov	r3, r6
 80053b8:	88ca      	ldrh	r2, [r1, #6]
 80053ba:	6949      	ldr	r1, [r1, #20]
 80053bc:	f7ff ff68 	bl	8005290 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80053c0:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 80053c4:	b299      	uxth	r1, r3
 80053c6:	7822      	ldrb	r2, [r4, #0]
 80053c8:	0112      	lsls	r2, r2, #4
 80053ca:	f205 4304 	addw	r3, r5, #1028	; 0x404
 80053ce:	440b      	add	r3, r1
 80053d0:	52d6      	strh	r6, [r2, r3]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80053d2:	7822      	ldrb	r2, [r4, #0]
 80053d4:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 80053d8:	b29b      	uxth	r3, r3
 80053da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053e2:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 80053e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053ee:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
  return HAL_OK;
 80053f2:	2000      	movs	r0, #0
 80053f4:	e79e      	b.n	8005334 <USB_EPStartXfer+0x76>
        if (ep->xfer_len_db > ep->maxpacket)
 80053f6:	6a0b      	ldr	r3, [r1, #32]
 80053f8:	429a      	cmp	r2, r3
 80053fa:	f080 813e 	bcs.w	800567a <USB_EPStartXfer+0x3bc>
          PCD_SET_EP_DBUF(USBx, ep->num);
 80053fe:	780a      	ldrb	r2, [r1, #0]
 8005400:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005404:	b29b      	uxth	r3, r3
 8005406:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800540a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800540e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005412:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005416:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
          ep->xfer_len_db -= len;
 800541a:	6a0b      	ldr	r3, [r1, #32]
 800541c:	1b9b      	subs	r3, r3, r6
 800541e:	620b      	str	r3, [r1, #32]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005420:	780b      	ldrb	r3, [r1, #0]
 8005422:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8005426:	f012 0f40 	tst.w	r2, #64	; 0x40
 800542a:	f000 8093 	beq.w	8005554 <USB_EPStartXfer+0x296>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800542e:	784a      	ldrb	r2, [r1, #1]
 8005430:	bb6a      	cbnz	r2, 800548e <USB_EPStartXfer+0x1d0>
 8005432:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8005436:	b292      	uxth	r2, r2
 8005438:	f200 410c 	addw	r1, r0, #1036	; 0x40c
 800543c:	4411      	add	r1, r2
 800543e:	011b      	lsls	r3, r3, #4
 8005440:	b96e      	cbnz	r6, 800545e <USB_EPStartXfer+0x1a0>
 8005442:	5aca      	ldrh	r2, [r1, r3]
 8005444:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8005448:	0412      	lsls	r2, r2, #16
 800544a:	0c12      	lsrs	r2, r2, #16
 800544c:	52ca      	strh	r2, [r1, r3]
 800544e:	5aca      	ldrh	r2, [r1, r3]
 8005450:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8005454:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8005458:	b292      	uxth	r2, r2
 800545a:	52ca      	strh	r2, [r1, r3]
 800545c:	e019      	b.n	8005492 <USB_EPStartXfer+0x1d4>
 800545e:	2e3e      	cmp	r6, #62	; 0x3e
 8005460:	d808      	bhi.n	8005474 <USB_EPStartXfer+0x1b6>
 8005462:	0872      	lsrs	r2, r6, #1
 8005464:	f016 0f01 	tst.w	r6, #1
 8005468:	bf18      	it	ne
 800546a:	3201      	addne	r2, #1
 800546c:	0292      	lsls	r2, r2, #10
 800546e:	b292      	uxth	r2, r2
 8005470:	52ca      	strh	r2, [r1, r3]
 8005472:	e00e      	b.n	8005492 <USB_EPStartXfer+0x1d4>
 8005474:	0972      	lsrs	r2, r6, #5
 8005476:	f016 0f1f 	tst.w	r6, #31
 800547a:	bf08      	it	eq
 800547c:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8005480:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8005484:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8005488:	b292      	uxth	r2, r2
 800548a:	52ca      	strh	r2, [r1, r3]
 800548c:	e001      	b.n	8005492 <USB_EPStartXfer+0x1d4>
 800548e:	2a01      	cmp	r2, #1
 8005490:	d02a      	beq.n	80054e8 <USB_EPStartXfer+0x22a>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005492:	b2b3      	uxth	r3, r6
 8005494:	8962      	ldrh	r2, [r4, #10]
 8005496:	6961      	ldr	r1, [r4, #20]
 8005498:	4628      	mov	r0, r5
 800549a:	f7ff fef9 	bl	8005290 <USB_WritePMA>
            ep->xfer_buff += len;
 800549e:	6963      	ldr	r3, [r4, #20]
 80054a0:	4433      	add	r3, r6
 80054a2:	6163      	str	r3, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 80054a4:	6a23      	ldr	r3, [r4, #32]
 80054a6:	6922      	ldr	r2, [r4, #16]
 80054a8:	4293      	cmp	r3, r2
              ep->xfer_len_db -= len;
 80054aa:	bf86      	itte	hi
 80054ac:	1b9a      	subhi	r2, r3, r6
 80054ae:	4633      	movhi	r3, r6
              ep->xfer_len_db = 0U;
 80054b0:	2200      	movls	r2, #0
 80054b2:	6222      	str	r2, [r4, #32]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80054b4:	7862      	ldrb	r2, [r4, #1]
 80054b6:	2a00      	cmp	r2, #0
 80054b8:	d138      	bne.n	800552c <USB_EPStartXfer+0x26e>
 80054ba:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 80054be:	b292      	uxth	r2, r2
 80054c0:	7820      	ldrb	r0, [r4, #0]
 80054c2:	0100      	lsls	r0, r0, #4
 80054c4:	f205 4104 	addw	r1, r5, #1028	; 0x404
 80054c8:	440a      	add	r2, r1
 80054ca:	b9bb      	cbnz	r3, 80054fc <USB_EPStartXfer+0x23e>
 80054cc:	5a81      	ldrh	r1, [r0, r2]
 80054ce:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 80054d2:	0409      	lsls	r1, r1, #16
 80054d4:	0c09      	lsrs	r1, r1, #16
 80054d6:	5281      	strh	r1, [r0, r2]
 80054d8:	5a81      	ldrh	r1, [r0, r2]
 80054da:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 80054de:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80054e2:	b289      	uxth	r1, r1
 80054e4:	5281      	strh	r1, [r0, r2]
 80054e6:	e023      	b.n	8005530 <USB_EPStartXfer+0x272>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80054e8:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80054ec:	b291      	uxth	r1, r2
 80054ee:	f200 420c 	addw	r2, r0, #1036	; 0x40c
 80054f2:	440a      	add	r2, r1
 80054f4:	011b      	lsls	r3, r3, #4
 80054f6:	b2b1      	uxth	r1, r6
 80054f8:	52d1      	strh	r1, [r2, r3]
 80054fa:	e7ca      	b.n	8005492 <USB_EPStartXfer+0x1d4>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80054fc:	2b3e      	cmp	r3, #62	; 0x3e
 80054fe:	d808      	bhi.n	8005512 <USB_EPStartXfer+0x254>
 8005500:	0859      	lsrs	r1, r3, #1
 8005502:	f013 0f01 	tst.w	r3, #1
 8005506:	bf18      	it	ne
 8005508:	3101      	addne	r1, #1
 800550a:	0289      	lsls	r1, r1, #10
 800550c:	b289      	uxth	r1, r1
 800550e:	5281      	strh	r1, [r0, r2]
 8005510:	e00e      	b.n	8005530 <USB_EPStartXfer+0x272>
 8005512:	0959      	lsrs	r1, r3, #5
 8005514:	f013 0f1f 	tst.w	r3, #31
 8005518:	bf08      	it	eq
 800551a:	f101 31ff 	addeq.w	r1, r1, #4294967295
 800551e:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 8005522:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8005526:	b289      	uxth	r1, r1
 8005528:	5281      	strh	r1, [r0, r2]
 800552a:	e001      	b.n	8005530 <USB_EPStartXfer+0x272>
 800552c:	2a01      	cmp	r2, #1
 800552e:	d006      	beq.n	800553e <USB_EPStartXfer+0x280>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005530:	b29b      	uxth	r3, r3
 8005532:	8922      	ldrh	r2, [r4, #8]
 8005534:	6961      	ldr	r1, [r4, #20]
 8005536:	4628      	mov	r0, r5
 8005538:	f7ff feaa 	bl	8005290 <USB_WritePMA>
 800553c:	e749      	b.n	80053d2 <USB_EPStartXfer+0x114>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800553e:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8005542:	b290      	uxth	r0, r2
 8005544:	7821      	ldrb	r1, [r4, #0]
 8005546:	0109      	lsls	r1, r1, #4
 8005548:	f205 4204 	addw	r2, r5, #1028	; 0x404
 800554c:	4402      	add	r2, r0
 800554e:	b298      	uxth	r0, r3
 8005550:	5288      	strh	r0, [r1, r2]
 8005552:	e7ed      	b.n	8005530 <USB_EPStartXfer+0x272>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005554:	784a      	ldrb	r2, [r1, #1]
 8005556:	bb6a      	cbnz	r2, 80055b4 <USB_EPStartXfer+0x2f6>
 8005558:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800555c:	b292      	uxth	r2, r2
 800555e:	f200 4104 	addw	r1, r0, #1028	; 0x404
 8005562:	4411      	add	r1, r2
 8005564:	011b      	lsls	r3, r3, #4
 8005566:	b96e      	cbnz	r6, 8005584 <USB_EPStartXfer+0x2c6>
 8005568:	5aca      	ldrh	r2, [r1, r3]
 800556a:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800556e:	0412      	lsls	r2, r2, #16
 8005570:	0c12      	lsrs	r2, r2, #16
 8005572:	52ca      	strh	r2, [r1, r3]
 8005574:	5aca      	ldrh	r2, [r1, r3]
 8005576:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800557a:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800557e:	b292      	uxth	r2, r2
 8005580:	52ca      	strh	r2, [r1, r3]
 8005582:	e019      	b.n	80055b8 <USB_EPStartXfer+0x2fa>
 8005584:	2e3e      	cmp	r6, #62	; 0x3e
 8005586:	d808      	bhi.n	800559a <USB_EPStartXfer+0x2dc>
 8005588:	0872      	lsrs	r2, r6, #1
 800558a:	f016 0f01 	tst.w	r6, #1
 800558e:	bf18      	it	ne
 8005590:	3201      	addne	r2, #1
 8005592:	0292      	lsls	r2, r2, #10
 8005594:	b292      	uxth	r2, r2
 8005596:	52ca      	strh	r2, [r1, r3]
 8005598:	e00e      	b.n	80055b8 <USB_EPStartXfer+0x2fa>
 800559a:	0972      	lsrs	r2, r6, #5
 800559c:	f016 0f1f 	tst.w	r6, #31
 80055a0:	bf08      	it	eq
 80055a2:	f102 32ff 	addeq.w	r2, r2, #4294967295
 80055a6:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 80055aa:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80055ae:	b292      	uxth	r2, r2
 80055b0:	52ca      	strh	r2, [r1, r3]
 80055b2:	e001      	b.n	80055b8 <USB_EPStartXfer+0x2fa>
 80055b4:	2a01      	cmp	r2, #1
 80055b6:	d02a      	beq.n	800560e <USB_EPStartXfer+0x350>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80055b8:	b2b3      	uxth	r3, r6
 80055ba:	8922      	ldrh	r2, [r4, #8]
 80055bc:	6961      	ldr	r1, [r4, #20]
 80055be:	4628      	mov	r0, r5
 80055c0:	f7ff fe66 	bl	8005290 <USB_WritePMA>
            ep->xfer_buff += len;
 80055c4:	6963      	ldr	r3, [r4, #20]
 80055c6:	4433      	add	r3, r6
 80055c8:	6163      	str	r3, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 80055ca:	6a23      	ldr	r3, [r4, #32]
 80055cc:	6922      	ldr	r2, [r4, #16]
 80055ce:	4293      	cmp	r3, r2
              ep->xfer_len_db -= len;
 80055d0:	bf86      	itte	hi
 80055d2:	1b9a      	subhi	r2, r3, r6
 80055d4:	4633      	movhi	r3, r6
              ep->xfer_len_db = 0U;
 80055d6:	2200      	movls	r2, #0
 80055d8:	6222      	str	r2, [r4, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80055da:	7862      	ldrb	r2, [r4, #1]
 80055dc:	2a00      	cmp	r2, #0
 80055de:	d138      	bne.n	8005652 <USB_EPStartXfer+0x394>
 80055e0:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 80055e4:	b292      	uxth	r2, r2
 80055e6:	7820      	ldrb	r0, [r4, #0]
 80055e8:	0100      	lsls	r0, r0, #4
 80055ea:	f205 410c 	addw	r1, r5, #1036	; 0x40c
 80055ee:	440a      	add	r2, r1
 80055f0:	b9bb      	cbnz	r3, 8005622 <USB_EPStartXfer+0x364>
 80055f2:	5a81      	ldrh	r1, [r0, r2]
 80055f4:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 80055f8:	0409      	lsls	r1, r1, #16
 80055fa:	0c09      	lsrs	r1, r1, #16
 80055fc:	5281      	strh	r1, [r0, r2]
 80055fe:	5a81      	ldrh	r1, [r0, r2]
 8005600:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8005604:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8005608:	b289      	uxth	r1, r1
 800560a:	5281      	strh	r1, [r0, r2]
 800560c:	e023      	b.n	8005656 <USB_EPStartXfer+0x398>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800560e:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8005612:	b291      	uxth	r1, r2
 8005614:	f200 4204 	addw	r2, r0, #1028	; 0x404
 8005618:	440a      	add	r2, r1
 800561a:	011b      	lsls	r3, r3, #4
 800561c:	b2b1      	uxth	r1, r6
 800561e:	52d1      	strh	r1, [r2, r3]
 8005620:	e7ca      	b.n	80055b8 <USB_EPStartXfer+0x2fa>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005622:	2b3e      	cmp	r3, #62	; 0x3e
 8005624:	d808      	bhi.n	8005638 <USB_EPStartXfer+0x37a>
 8005626:	0859      	lsrs	r1, r3, #1
 8005628:	f013 0f01 	tst.w	r3, #1
 800562c:	bf18      	it	ne
 800562e:	3101      	addne	r1, #1
 8005630:	0289      	lsls	r1, r1, #10
 8005632:	b289      	uxth	r1, r1
 8005634:	5281      	strh	r1, [r0, r2]
 8005636:	e00e      	b.n	8005656 <USB_EPStartXfer+0x398>
 8005638:	0959      	lsrs	r1, r3, #5
 800563a:	f013 0f1f 	tst.w	r3, #31
 800563e:	bf08      	it	eq
 8005640:	f101 31ff 	addeq.w	r1, r1, #4294967295
 8005644:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 8005648:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 800564c:	b289      	uxth	r1, r1
 800564e:	5281      	strh	r1, [r0, r2]
 8005650:	e001      	b.n	8005656 <USB_EPStartXfer+0x398>
 8005652:	2a01      	cmp	r2, #1
 8005654:	d006      	beq.n	8005664 <USB_EPStartXfer+0x3a6>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005656:	b29b      	uxth	r3, r3
 8005658:	8962      	ldrh	r2, [r4, #10]
 800565a:	6961      	ldr	r1, [r4, #20]
 800565c:	4628      	mov	r0, r5
 800565e:	f7ff fe17 	bl	8005290 <USB_WritePMA>
 8005662:	e6b6      	b.n	80053d2 <USB_EPStartXfer+0x114>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005664:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8005668:	b290      	uxth	r0, r2
 800566a:	7821      	ldrb	r1, [r4, #0]
 800566c:	0109      	lsls	r1, r1, #4
 800566e:	f205 420c 	addw	r2, r5, #1036	; 0x40c
 8005672:	4402      	add	r2, r0
 8005674:	b298      	uxth	r0, r3
 8005676:	5288      	strh	r0, [r1, r2]
 8005678:	e7ed      	b.n	8005656 <USB_EPStartXfer+0x398>
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800567a:	7809      	ldrb	r1, [r1, #0]
 800567c:	f830 2021 	ldrh.w	r2, [r0, r1, lsl #2]
 8005680:	b292      	uxth	r2, r2
 8005682:	f422 42e2 	bic.w	r2, r2, #28928	; 0x7100
 8005686:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800568a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800568e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005692:	f820 2021 	strh.w	r2, [r0, r1, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005696:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800569a:	b290      	uxth	r0, r2
 800569c:	7821      	ldrb	r1, [r4, #0]
 800569e:	0109      	lsls	r1, r1, #4
 80056a0:	f205 4204 	addw	r2, r5, #1028	; 0x404
 80056a4:	4402      	add	r2, r0
 80056a6:	b29b      	uxth	r3, r3
 80056a8:	528b      	strh	r3, [r1, r2]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80056aa:	8922      	ldrh	r2, [r4, #8]
 80056ac:	6961      	ldr	r1, [r4, #20]
 80056ae:	4628      	mov	r0, r5
 80056b0:	f7ff fdee 	bl	8005290 <USB_WritePMA>
 80056b4:	e68d      	b.n	80053d2 <USB_EPStartXfer+0x114>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80056b6:	2e3e      	cmp	r6, #62	; 0x3e
 80056b8:	d808      	bhi.n	80056cc <USB_EPStartXfer+0x40e>
 80056ba:	0871      	lsrs	r1, r6, #1
 80056bc:	f016 0f01 	tst.w	r6, #1
 80056c0:	bf18      	it	ne
 80056c2:	3101      	addne	r1, #1
 80056c4:	0289      	lsls	r1, r1, #10
 80056c6:	b289      	uxth	r1, r1
 80056c8:	52d1      	strh	r1, [r2, r3]
 80056ca:	e00e      	b.n	80056ea <USB_EPStartXfer+0x42c>
 80056cc:	0971      	lsrs	r1, r6, #5
 80056ce:	f016 0f1f 	tst.w	r6, #31
 80056d2:	bf08      	it	eq
 80056d4:	f101 31ff 	addeq.w	r1, r1, #4294967295
 80056d8:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 80056dc:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80056e0:	b289      	uxth	r1, r1
 80056e2:	52d1      	strh	r1, [r2, r3]
 80056e4:	e001      	b.n	80056ea <USB_EPStartXfer+0x42c>
 80056e6:	2a01      	cmp	r2, #1
 80056e8:	d028      	beq.n	800573c <USB_EPStartXfer+0x47e>
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80056ea:	b2b3      	uxth	r3, r6
 80056ec:	8962      	ldrh	r2, [r4, #10]
 80056ee:	6961      	ldr	r1, [r4, #20]
 80056f0:	4628      	mov	r0, r5
 80056f2:	f7ff fdcd 	bl	8005290 <USB_WritePMA>
          ep->xfer_buff += len;
 80056f6:	6963      	ldr	r3, [r4, #20]
 80056f8:	4433      	add	r3, r6
 80056fa:	6163      	str	r3, [r4, #20]
          if (ep->xfer_len_db > ep->maxpacket)
 80056fc:	6a23      	ldr	r3, [r4, #32]
 80056fe:	6922      	ldr	r2, [r4, #16]
 8005700:	4293      	cmp	r3, r2
            ep->xfer_len_db -= len;
 8005702:	bf86      	itte	hi
 8005704:	1b9a      	subhi	r2, r3, r6
 8005706:	4633      	movhi	r3, r6
            ep->xfer_len_db = 0U;
 8005708:	2200      	movls	r2, #0
 800570a:	6222      	str	r2, [r4, #32]
          if (len > 0U)
 800570c:	2b00      	cmp	r3, #0
 800570e:	f43f ae60 	beq.w	80053d2 <USB_EPStartXfer+0x114>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005712:	7862      	ldrb	r2, [r4, #1]
 8005714:	bb4a      	cbnz	r2, 800576a <USB_EPStartXfer+0x4ac>
 8005716:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 800571a:	b28a      	uxth	r2, r1
 800571c:	7820      	ldrb	r0, [r4, #0]
 800571e:	0100      	lsls	r0, r0, #4
 8005720:	f205 4104 	addw	r1, r5, #1028	; 0x404
 8005724:	4411      	add	r1, r2
 8005726:	2b3e      	cmp	r3, #62	; 0x3e
 8005728:	d812      	bhi.n	8005750 <USB_EPStartXfer+0x492>
 800572a:	085a      	lsrs	r2, r3, #1
 800572c:	f013 0f01 	tst.w	r3, #1
 8005730:	bf18      	it	ne
 8005732:	3201      	addne	r2, #1
 8005734:	0292      	lsls	r2, r2, #10
 8005736:	b292      	uxth	r2, r2
 8005738:	5242      	strh	r2, [r0, r1]
 800573a:	e018      	b.n	800576e <USB_EPStartXfer+0x4b0>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800573c:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8005740:	b291      	uxth	r1, r2
 8005742:	f200 420c 	addw	r2, r0, #1036	; 0x40c
 8005746:	440a      	add	r2, r1
 8005748:	011b      	lsls	r3, r3, #4
 800574a:	b2b1      	uxth	r1, r6
 800574c:	52d1      	strh	r1, [r2, r3]
 800574e:	e7cc      	b.n	80056ea <USB_EPStartXfer+0x42c>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005750:	095a      	lsrs	r2, r3, #5
 8005752:	f013 0f1f 	tst.w	r3, #31
 8005756:	bf08      	it	eq
 8005758:	f102 32ff 	addeq.w	r2, r2, #4294967295
 800575c:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8005760:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8005764:	b292      	uxth	r2, r2
 8005766:	5242      	strh	r2, [r0, r1]
 8005768:	e001      	b.n	800576e <USB_EPStartXfer+0x4b0>
 800576a:	2a01      	cmp	r2, #1
 800576c:	d006      	beq.n	800577c <USB_EPStartXfer+0x4be>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800576e:	b29b      	uxth	r3, r3
 8005770:	8922      	ldrh	r2, [r4, #8]
 8005772:	6961      	ldr	r1, [r4, #20]
 8005774:	4628      	mov	r0, r5
 8005776:	f7ff fd8b 	bl	8005290 <USB_WritePMA>
 800577a:	e62a      	b.n	80053d2 <USB_EPStartXfer+0x114>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800577c:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8005780:	b290      	uxth	r0, r2
 8005782:	7821      	ldrb	r1, [r4, #0]
 8005784:	0109      	lsls	r1, r1, #4
 8005786:	f205 4204 	addw	r2, r5, #1028	; 0x404
 800578a:	4402      	add	r2, r0
 800578c:	b298      	uxth	r0, r3
 800578e:	5288      	strh	r0, [r1, r2]
 8005790:	e7ed      	b.n	800576e <USB_EPStartXfer+0x4b0>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005792:	784a      	ldrb	r2, [r1, #1]
 8005794:	bb6a      	cbnz	r2, 80057f2 <USB_EPStartXfer+0x534>
 8005796:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800579a:	b292      	uxth	r2, r2
 800579c:	f200 4104 	addw	r1, r0, #1028	; 0x404
 80057a0:	440a      	add	r2, r1
 80057a2:	011b      	lsls	r3, r3, #4
 80057a4:	b96e      	cbnz	r6, 80057c2 <USB_EPStartXfer+0x504>
 80057a6:	5ad1      	ldrh	r1, [r2, r3]
 80057a8:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 80057ac:	0409      	lsls	r1, r1, #16
 80057ae:	0c09      	lsrs	r1, r1, #16
 80057b0:	52d1      	strh	r1, [r2, r3]
 80057b2:	5ad1      	ldrh	r1, [r2, r3]
 80057b4:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 80057b8:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80057bc:	b289      	uxth	r1, r1
 80057be:	52d1      	strh	r1, [r2, r3]
 80057c0:	e019      	b.n	80057f6 <USB_EPStartXfer+0x538>
 80057c2:	2e3e      	cmp	r6, #62	; 0x3e
 80057c4:	d808      	bhi.n	80057d8 <USB_EPStartXfer+0x51a>
 80057c6:	0871      	lsrs	r1, r6, #1
 80057c8:	f016 0f01 	tst.w	r6, #1
 80057cc:	bf18      	it	ne
 80057ce:	3101      	addne	r1, #1
 80057d0:	0289      	lsls	r1, r1, #10
 80057d2:	b289      	uxth	r1, r1
 80057d4:	52d1      	strh	r1, [r2, r3]
 80057d6:	e00e      	b.n	80057f6 <USB_EPStartXfer+0x538>
 80057d8:	0971      	lsrs	r1, r6, #5
 80057da:	f016 0f1f 	tst.w	r6, #31
 80057de:	bf08      	it	eq
 80057e0:	f101 31ff 	addeq.w	r1, r1, #4294967295
 80057e4:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 80057e8:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80057ec:	b289      	uxth	r1, r1
 80057ee:	52d1      	strh	r1, [r2, r3]
 80057f0:	e001      	b.n	80057f6 <USB_EPStartXfer+0x538>
 80057f2:	2a01      	cmp	r2, #1
 80057f4:	d028      	beq.n	8005848 <USB_EPStartXfer+0x58a>
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80057f6:	b2b3      	uxth	r3, r6
 80057f8:	8922      	ldrh	r2, [r4, #8]
 80057fa:	6961      	ldr	r1, [r4, #20]
 80057fc:	4628      	mov	r0, r5
 80057fe:	f7ff fd47 	bl	8005290 <USB_WritePMA>
          ep->xfer_buff += len;
 8005802:	6963      	ldr	r3, [r4, #20]
 8005804:	4433      	add	r3, r6
 8005806:	6163      	str	r3, [r4, #20]
          if (ep->xfer_len_db > ep->maxpacket)
 8005808:	6a23      	ldr	r3, [r4, #32]
 800580a:	6922      	ldr	r2, [r4, #16]
 800580c:	4293      	cmp	r3, r2
            ep->xfer_len_db -= len;
 800580e:	bf86      	itte	hi
 8005810:	1b9a      	subhi	r2, r3, r6
 8005812:	4633      	movhi	r3, r6
            ep->xfer_len_db = 0U;
 8005814:	2200      	movls	r2, #0
 8005816:	6222      	str	r2, [r4, #32]
          if (len > 0U)
 8005818:	2b00      	cmp	r3, #0
 800581a:	f43f adda 	beq.w	80053d2 <USB_EPStartXfer+0x114>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800581e:	7862      	ldrb	r2, [r4, #1]
 8005820:	bb4a      	cbnz	r2, 8005876 <USB_EPStartXfer+0x5b8>
 8005822:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 8005826:	b28a      	uxth	r2, r1
 8005828:	7820      	ldrb	r0, [r4, #0]
 800582a:	0100      	lsls	r0, r0, #4
 800582c:	f205 410c 	addw	r1, r5, #1036	; 0x40c
 8005830:	4411      	add	r1, r2
 8005832:	2b3e      	cmp	r3, #62	; 0x3e
 8005834:	d812      	bhi.n	800585c <USB_EPStartXfer+0x59e>
 8005836:	085a      	lsrs	r2, r3, #1
 8005838:	f013 0f01 	tst.w	r3, #1
 800583c:	bf18      	it	ne
 800583e:	3201      	addne	r2, #1
 8005840:	0292      	lsls	r2, r2, #10
 8005842:	b292      	uxth	r2, r2
 8005844:	5242      	strh	r2, [r0, r1]
 8005846:	e018      	b.n	800587a <USB_EPStartXfer+0x5bc>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005848:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800584c:	b291      	uxth	r1, r2
 800584e:	f200 4204 	addw	r2, r0, #1028	; 0x404
 8005852:	440a      	add	r2, r1
 8005854:	011b      	lsls	r3, r3, #4
 8005856:	b2b1      	uxth	r1, r6
 8005858:	52d1      	strh	r1, [r2, r3]
 800585a:	e7cc      	b.n	80057f6 <USB_EPStartXfer+0x538>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800585c:	095a      	lsrs	r2, r3, #5
 800585e:	f013 0f1f 	tst.w	r3, #31
 8005862:	bf08      	it	eq
 8005864:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8005868:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 800586c:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8005870:	b292      	uxth	r2, r2
 8005872:	5242      	strh	r2, [r0, r1]
 8005874:	e001      	b.n	800587a <USB_EPStartXfer+0x5bc>
 8005876:	2a01      	cmp	r2, #1
 8005878:	d006      	beq.n	8005888 <USB_EPStartXfer+0x5ca>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800587a:	b29b      	uxth	r3, r3
 800587c:	8962      	ldrh	r2, [r4, #10]
 800587e:	6961      	ldr	r1, [r4, #20]
 8005880:	4628      	mov	r0, r5
 8005882:	f7ff fd05 	bl	8005290 <USB_WritePMA>
 8005886:	e5a4      	b.n	80053d2 <USB_EPStartXfer+0x114>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005888:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800588c:	b290      	uxth	r0, r2
 800588e:	7821      	ldrb	r1, [r4, #0]
 8005890:	0109      	lsls	r1, r1, #4
 8005892:	f205 420c 	addw	r2, r5, #1036	; 0x40c
 8005896:	4402      	add	r2, r0
 8005898:	b298      	uxth	r0, r3
 800589a:	5288      	strh	r0, [r1, r2]
 800589c:	e7ed      	b.n	800587a <USB_EPStartXfer+0x5bc>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800589e:	293e      	cmp	r1, #62	; 0x3e
 80058a0:	d808      	bhi.n	80058b4 <USB_EPStartXfer+0x5f6>
 80058a2:	0848      	lsrs	r0, r1, #1
 80058a4:	f011 0f01 	tst.w	r1, #1
 80058a8:	bf18      	it	ne
 80058aa:	3001      	addne	r0, #1
 80058ac:	0280      	lsls	r0, r0, #10
 80058ae:	b280      	uxth	r0, r0
 80058b0:	52d0      	strh	r0, [r2, r3]
 80058b2:	e52e      	b.n	8005312 <USB_EPStartXfer+0x54>
 80058b4:	0948      	lsrs	r0, r1, #5
 80058b6:	f011 0f1f 	tst.w	r1, #31
 80058ba:	bf08      	it	eq
 80058bc:	f100 30ff 	addeq.w	r0, r0, #4294967295
 80058c0:	ea6f 60c0 	mvn.w	r0, r0, lsl #27
 80058c4:	ea6f 4050 	mvn.w	r0, r0, lsr #17
 80058c8:	b280      	uxth	r0, r0
 80058ca:	52d0      	strh	r0, [r2, r3]
 80058cc:	e521      	b.n	8005312 <USB_EPStartXfer+0x54>
      if (ep->type == EP_TYPE_BULK)
 80058ce:	78ca      	ldrb	r2, [r1, #3]
 80058d0:	2a02      	cmp	r2, #2
 80058d2:	d03f      	beq.n	8005954 <USB_EPStartXfer+0x696>
      else if (ep->type == EP_TYPE_ISOC)
 80058d4:	2a01      	cmp	r2, #1
 80058d6:	f040 8116 	bne.w	8005b06 <USB_EPStartXfer+0x848>
        if (ep->xfer_len > ep->maxpacket)
 80058da:	698a      	ldr	r2, [r1, #24]
 80058dc:	6909      	ldr	r1, [r1, #16]
 80058de:	428a      	cmp	r2, r1
          ep->xfer_len -= len;
 80058e0:	bf86      	itte	hi
 80058e2:	1a50      	subhi	r0, r2, r1
          len = ep->maxpacket;
 80058e4:	460a      	movhi	r2, r1
          ep->xfer_len = 0U;
 80058e6:	2000      	movls	r0, #0
 80058e8:	61a0      	str	r0, [r4, #24]
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	f47f ad11 	bne.w	8005312 <USB_EPStartXfer+0x54>
 80058f0:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	7826      	ldrb	r6, [r4, #0]
 80058f8:	0136      	lsls	r6, r6, #4
 80058fa:	f205 4004 	addw	r0, r5, #1028	; 0x404
 80058fe:	4418      	add	r0, r3
 8005900:	2a00      	cmp	r2, #0
 8005902:	f040 80b7 	bne.w	8005a74 <USB_EPStartXfer+0x7b6>
 8005906:	5a33      	ldrh	r3, [r6, r0]
 8005908:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800590c:	041b      	lsls	r3, r3, #16
 800590e:	0c1b      	lsrs	r3, r3, #16
 8005910:	5233      	strh	r3, [r6, r0]
 8005912:	5a33      	ldrh	r3, [r6, r0]
 8005914:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005918:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800591c:	b29b      	uxth	r3, r3
 800591e:	5233      	strh	r3, [r6, r0]
 8005920:	7863      	ldrb	r3, [r4, #1]
 8005922:	2b00      	cmp	r3, #0
 8005924:	f040 80e1 	bne.w	8005aea <USB_EPStartXfer+0x82c>
 8005928:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800592c:	b293      	uxth	r3, r2
 800592e:	7821      	ldrb	r1, [r4, #0]
 8005930:	0109      	lsls	r1, r1, #4
 8005932:	f205 420c 	addw	r2, r5, #1036	; 0x40c
 8005936:	441a      	add	r2, r3
 8005938:	5a8b      	ldrh	r3, [r1, r2]
 800593a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800593e:	041b      	lsls	r3, r3, #16
 8005940:	0c1b      	lsrs	r3, r3, #16
 8005942:	528b      	strh	r3, [r1, r2]
 8005944:	5a8b      	ldrh	r3, [r1, r2]
 8005946:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800594a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800594e:	b29b      	uxth	r3, r3
 8005950:	528b      	strh	r3, [r1, r2]
 8005952:	e4de      	b.n	8005312 <USB_EPStartXfer+0x54>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005954:	2b00      	cmp	r3, #0
 8005956:	d132      	bne.n	80059be <USB_EPStartXfer+0x700>
 8005958:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800595c:	b29b      	uxth	r3, r3
 800595e:	780a      	ldrb	r2, [r1, #0]
 8005960:	0112      	lsls	r2, r2, #4
 8005962:	f200 4104 	addw	r1, r0, #1028	; 0x404
 8005966:	440b      	add	r3, r1
 8005968:	6921      	ldr	r1, [r4, #16]
 800596a:	2900      	cmp	r1, #0
 800596c:	d145      	bne.n	80059fa <USB_EPStartXfer+0x73c>
 800596e:	5ad1      	ldrh	r1, [r2, r3]
 8005970:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8005974:	0409      	lsls	r1, r1, #16
 8005976:	0c09      	lsrs	r1, r1, #16
 8005978:	52d1      	strh	r1, [r2, r3]
 800597a:	5ad1      	ldrh	r1, [r2, r3]
 800597c:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8005980:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8005984:	b289      	uxth	r1, r1
 8005986:	52d1      	strh	r1, [r2, r3]
 8005988:	7863      	ldrb	r3, [r4, #1]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d165      	bne.n	8005a5a <USB_EPStartXfer+0x79c>
 800598e:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8005992:	b29b      	uxth	r3, r3
 8005994:	7822      	ldrb	r2, [r4, #0]
 8005996:	0112      	lsls	r2, r2, #4
 8005998:	f205 410c 	addw	r1, r5, #1036	; 0x40c
 800599c:	440b      	add	r3, r1
 800599e:	6921      	ldr	r1, [r4, #16]
 80059a0:	2900      	cmp	r1, #0
 80059a2:	d142      	bne.n	8005a2a <USB_EPStartXfer+0x76c>
 80059a4:	5ad1      	ldrh	r1, [r2, r3]
 80059a6:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 80059aa:	0409      	lsls	r1, r1, #16
 80059ac:	0c09      	lsrs	r1, r1, #16
 80059ae:	52d1      	strh	r1, [r2, r3]
 80059b0:	5ad1      	ldrh	r1, [r2, r3]
 80059b2:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 80059b6:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80059ba:	b289      	uxth	r1, r1
 80059bc:	52d1      	strh	r1, [r2, r3]
        if (ep->xfer_count != 0U)
 80059be:	69e3      	ldr	r3, [r4, #28]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	f43f aca6 	beq.w	8005312 <USB_EPStartXfer+0x54>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80059c6:	7822      	ldrb	r2, [r4, #0]
 80059c8:	f835 1022 	ldrh.w	r1, [r5, r2, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80059cc:	f244 0340 	movw	r3, #16448	; 0x4040
 80059d0:	ea03 0001 	and.w	r0, r3, r1
 80059d4:	438b      	bics	r3, r1
 80059d6:	d002      	beq.n	80059de <USB_EPStartXfer+0x720>
 80059d8:	2800      	cmp	r0, #0
 80059da:	f47f ac9a 	bne.w	8005312 <USB_EPStartXfer+0x54>
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80059de:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 80059e2:	b29b      	uxth	r3, r3
 80059e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059f0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80059f4:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 80059f8:	e48b      	b.n	8005312 <USB_EPStartXfer+0x54>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80059fa:	293e      	cmp	r1, #62	; 0x3e
 80059fc:	d808      	bhi.n	8005a10 <USB_EPStartXfer+0x752>
 80059fe:	0848      	lsrs	r0, r1, #1
 8005a00:	f011 0f01 	tst.w	r1, #1
 8005a04:	bf18      	it	ne
 8005a06:	3001      	addne	r0, #1
 8005a08:	0281      	lsls	r1, r0, #10
 8005a0a:	b289      	uxth	r1, r1
 8005a0c:	52d1      	strh	r1, [r2, r3]
 8005a0e:	e7bb      	b.n	8005988 <USB_EPStartXfer+0x6ca>
 8005a10:	0948      	lsrs	r0, r1, #5
 8005a12:	f011 0f1f 	tst.w	r1, #31
 8005a16:	bf08      	it	eq
 8005a18:	f100 30ff 	addeq.w	r0, r0, #4294967295
 8005a1c:	ea6f 61c0 	mvn.w	r1, r0, lsl #27
 8005a20:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8005a24:	b289      	uxth	r1, r1
 8005a26:	52d1      	strh	r1, [r2, r3]
 8005a28:	e7ae      	b.n	8005988 <USB_EPStartXfer+0x6ca>
 8005a2a:	293e      	cmp	r1, #62	; 0x3e
 8005a2c:	d808      	bhi.n	8005a40 <USB_EPStartXfer+0x782>
 8005a2e:	0848      	lsrs	r0, r1, #1
 8005a30:	f011 0f01 	tst.w	r1, #1
 8005a34:	bf18      	it	ne
 8005a36:	3001      	addne	r0, #1
 8005a38:	0281      	lsls	r1, r0, #10
 8005a3a:	b289      	uxth	r1, r1
 8005a3c:	52d1      	strh	r1, [r2, r3]
 8005a3e:	e7be      	b.n	80059be <USB_EPStartXfer+0x700>
 8005a40:	0948      	lsrs	r0, r1, #5
 8005a42:	f011 0f1f 	tst.w	r1, #31
 8005a46:	bf08      	it	eq
 8005a48:	f100 30ff 	addeq.w	r0, r0, #4294967295
 8005a4c:	ea6f 61c0 	mvn.w	r1, r0, lsl #27
 8005a50:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8005a54:	b289      	uxth	r1, r1
 8005a56:	52d1      	strh	r1, [r2, r3]
 8005a58:	e7b1      	b.n	80059be <USB_EPStartXfer+0x700>
 8005a5a:	2b01      	cmp	r3, #1
 8005a5c:	d1af      	bne.n	80059be <USB_EPStartXfer+0x700>
 8005a5e:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8005a62:	b299      	uxth	r1, r3
 8005a64:	7822      	ldrb	r2, [r4, #0]
 8005a66:	0112      	lsls	r2, r2, #4
 8005a68:	f205 430c 	addw	r3, r5, #1036	; 0x40c
 8005a6c:	440b      	add	r3, r1
 8005a6e:	8a21      	ldrh	r1, [r4, #16]
 8005a70:	52d1      	strh	r1, [r2, r3]
 8005a72:	e7a4      	b.n	80059be <USB_EPStartXfer+0x700>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005a74:	2a3e      	cmp	r2, #62	; 0x3e
 8005a76:	d818      	bhi.n	8005aaa <USB_EPStartXfer+0x7ec>
 8005a78:	0851      	lsrs	r1, r2, #1
 8005a7a:	f012 0701 	ands.w	r7, r2, #1
 8005a7e:	bf14      	ite	ne
 8005a80:	1c4b      	addne	r3, r1, #1
 8005a82:	460b      	moveq	r3, r1
 8005a84:	029b      	lsls	r3, r3, #10
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	5233      	strh	r3, [r6, r0]
 8005a8a:	7863      	ldrb	r3, [r4, #1]
 8005a8c:	bb6b      	cbnz	r3, 8005aea <USB_EPStartXfer+0x82c>
 8005a8e:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8005a92:	b29a      	uxth	r2, r3
 8005a94:	f205 430c 	addw	r3, r5, #1036	; 0x40c
 8005a98:	4413      	add	r3, r2
 8005a9a:	7822      	ldrb	r2, [r4, #0]
 8005a9c:	0112      	lsls	r2, r2, #4
 8005a9e:	b107      	cbz	r7, 8005aa2 <USB_EPStartXfer+0x7e4>
 8005aa0:	3101      	adds	r1, #1
 8005aa2:	0289      	lsls	r1, r1, #10
 8005aa4:	b289      	uxth	r1, r1
 8005aa6:	5299      	strh	r1, [r3, r2]
 8005aa8:	e433      	b.n	8005312 <USB_EPStartXfer+0x54>
 8005aaa:	0951      	lsrs	r1, r2, #5
 8005aac:	f012 071f 	ands.w	r7, r2, #31
 8005ab0:	bf0c      	ite	eq
 8005ab2:	f101 33ff 	addeq.w	r3, r1, #4294967295
 8005ab6:	460b      	movne	r3, r1
 8005ab8:	ea6f 63c3 	mvn.w	r3, r3, lsl #27
 8005abc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	5233      	strh	r3, [r6, r0]
 8005ac4:	7863      	ldrb	r3, [r4, #1]
 8005ac6:	b983      	cbnz	r3, 8005aea <USB_EPStartXfer+0x82c>
 8005ac8:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8005acc:	b29b      	uxth	r3, r3
 8005ace:	7822      	ldrb	r2, [r4, #0]
 8005ad0:	0112      	lsls	r2, r2, #4
 8005ad2:	f205 400c 	addw	r0, r5, #1036	; 0x40c
 8005ad6:	4418      	add	r0, r3
 8005ad8:	b907      	cbnz	r7, 8005adc <USB_EPStartXfer+0x81e>
 8005ada:	3901      	subs	r1, #1
 8005adc:	ea6f 63c1 	mvn.w	r3, r1, lsl #27
 8005ae0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ae4:	b29b      	uxth	r3, r3
 8005ae6:	5213      	strh	r3, [r2, r0]
 8005ae8:	e413      	b.n	8005312 <USB_EPStartXfer+0x54>
 8005aea:	2b01      	cmp	r3, #1
 8005aec:	f47f ac11 	bne.w	8005312 <USB_EPStartXfer+0x54>
 8005af0:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 8005af4:	b289      	uxth	r1, r1
 8005af6:	7823      	ldrb	r3, [r4, #0]
 8005af8:	f201 410c 	addw	r1, r1, #1036	; 0x40c
 8005afc:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 8005b00:	b293      	uxth	r3, r2
 8005b02:	526b      	strh	r3, [r5, r1]
 8005b04:	e405      	b.n	8005312 <USB_EPStartXfer+0x54>
        return HAL_ERROR;
 8005b06:	2001      	movs	r0, #1
 8005b08:	e414      	b.n	8005334 <USB_EPStartXfer+0x76>

08005b0a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005b0a:	b530      	push	{r4, r5, lr}
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005b0c:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8005b10:	f500 6480 	add.w	r4, r0, #1024	; 0x400

  for (i = n; i != 0U; i--)
 8005b14:	085d      	lsrs	r5, r3, #1
 8005b16:	d012      	beq.n	8005b3e <USB_ReadPMA+0x34>
 8005b18:	1c88      	adds	r0, r1, #2
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005b1a:	46a6      	mov	lr, r4
  for (i = n; i != 0U; i--)
 8005b1c:	46ac      	mov	ip, r5
  {
    temp = *(__IO uint16_t *)pdwVal;
 8005b1e:	f83e 2b04 	ldrh.w	r2, [lr], #4
 8005b22:	b292      	uxth	r2, r2
    pdwVal++;
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005b24:	f800 2c02 	strb.w	r2, [r0, #-2]
    pBuf++;
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8005b28:	0a12      	lsrs	r2, r2, #8
 8005b2a:	f800 2c01 	strb.w	r2, [r0, #-1]
  for (i = n; i != 0U; i--)
 8005b2e:	3002      	adds	r0, #2
 8005b30:	f1bc 0c01 	subs.w	ip, ip, #1
 8005b34:	d1f3      	bne.n	8005b1e <USB_ReadPMA+0x14>
    pBuf++;
 8005b36:	eb01 0145 	add.w	r1, r1, r5, lsl #1

#if PMA_ACCESS > 1U
    pdwVal++;
 8005b3a:	eb04 0485 	add.w	r4, r4, r5, lsl #2
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8005b3e:	f013 0f01 	tst.w	r3, #1
  {
    temp = *pdwVal;
 8005b42:	bf1c      	itt	ne
 8005b44:	8823      	ldrhne	r3, [r4, #0]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005b46:	700b      	strbne	r3, [r1, #0]
  }
}
 8005b48:	bd30      	pop	{r4, r5, pc}

08005b4a <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005b4a:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 8005b4e:	b183      	cbz	r3, 8005b72 <USBD_CDC_EP0_RxReady+0x28>
{
 8005b50:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005b52:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005b56:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8005b5a:	28ff      	cmp	r0, #255	; 0xff
 8005b5c:	d007      	beq.n	8005b6e <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005b5e:	689b      	ldr	r3, [r3, #8]
 8005b60:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8005b64:	4621      	mov	r1, r4
 8005b66:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8005b68:	23ff      	movs	r3, #255	; 0xff
 8005b6a:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 8005b6e:	2000      	movs	r0, #0
 8005b70:	bd10      	pop	{r4, pc}
 8005b72:	2000      	movs	r0, #0
 8005b74:	4770      	bx	lr
	...

08005b78 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8005b78:	2343      	movs	r3, #67	; 0x43
 8005b7a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8005b7c:	4800      	ldr	r0, [pc, #0]	; (8005b80 <USBD_CDC_GetFSCfgDesc+0x8>)
 8005b7e:	4770      	bx	lr
 8005b80:	20000050 	.word	0x20000050

08005b84 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8005b84:	2343      	movs	r3, #67	; 0x43
 8005b86:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8005b88:	4800      	ldr	r0, [pc, #0]	; (8005b8c <USBD_CDC_GetHSCfgDesc+0x8>)
 8005b8a:	4770      	bx	lr
 8005b8c:	20000094 	.word	0x20000094

08005b90 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005b90:	2343      	movs	r3, #67	; 0x43
 8005b92:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8005b94:	4800      	ldr	r0, [pc, #0]	; (8005b98 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8005b96:	4770      	bx	lr
 8005b98:	200000e4 	.word	0x200000e4

08005b9c <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8005b9c:	230a      	movs	r3, #10
 8005b9e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8005ba0:	4800      	ldr	r0, [pc, #0]	; (8005ba4 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8005ba2:	4770      	bx	lr
 8005ba4:	200000d8 	.word	0x200000d8

08005ba8 <USBD_CDC_DataOut>:
{
 8005ba8:	b538      	push	{r3, r4, r5, lr}
 8005baa:	4604      	mov	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005bac:	f8d0 52b8 	ldr.w	r5, [r0, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005bb0:	f000 ffd6 	bl	8006b60 <USBD_LL_GetRxDataSize>
 8005bb4:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  if (pdev->pClassData != NULL)
 8005bb8:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8005bbc:	b14b      	cbz	r3, 8005bd2 <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005bbe:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8005bc2:	68db      	ldr	r3, [r3, #12]
 8005bc4:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 8005bc8:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 8005bcc:	4798      	blx	r3
    return USBD_OK;
 8005bce:	2000      	movs	r0, #0
}
 8005bd0:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8005bd2:	2002      	movs	r0, #2
 8005bd4:	e7fc      	b.n	8005bd0 <USBD_CDC_DataOut+0x28>

08005bd6 <USBD_CDC_DataIn>:
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005bd6:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
  if (pdev->pClassData != NULL)
 8005bda:	b312      	cbz	r2, 8005c22 <USBD_CDC_DataIn+0x4c>
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005bdc:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8005be0:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8005be4:	69db      	ldr	r3, [r3, #28]
 8005be6:	b1f3      	cbz	r3, 8005c26 <USBD_CDC_DataIn+0x50>
{
 8005be8:	b510      	push	{r4, lr}
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005bea:	f8d0 42c0 	ldr.w	r4, [r0, #704]	; 0x2c0
 8005bee:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
 8005bf2:	eb04 04cc 	add.w	r4, r4, ip, lsl #3
 8005bf6:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8005bf8:	fbb3 fcf4 	udiv	ip, r3, r4
 8005bfc:	fb04 331c 	mls	r3, r4, ip, r3
 8005c00:	b11b      	cbz	r3, 8005c0a <USBD_CDC_DataIn+0x34>
      hcdc->TxState = 0U;
 8005c02:	2000      	movs	r0, #0
 8005c04:	f8c2 0214 	str.w	r0, [r2, #532]	; 0x214
}
 8005c08:	bd10      	pop	{r4, pc}
      pdev->ep_in[epnum].total_length = 0U;
 8005c0a:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8005c0e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8005c12:	2400      	movs	r4, #0
 8005c14:	61dc      	str	r4, [r3, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005c16:	4623      	mov	r3, r4
 8005c18:	4622      	mov	r2, r4
 8005c1a:	f000 ff91 	bl	8006b40 <USBD_LL_Transmit>
    return USBD_OK;
 8005c1e:	4620      	mov	r0, r4
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005c20:	e7f2      	b.n	8005c08 <USBD_CDC_DataIn+0x32>
    return USBD_FAIL;
 8005c22:	2002      	movs	r0, #2
 8005c24:	4770      	bx	lr
      hcdc->TxState = 0U;
 8005c26:	2000      	movs	r0, #0
 8005c28:	f8c2 0214 	str.w	r0, [r2, #532]	; 0x214
}
 8005c2c:	4770      	bx	lr

08005c2e <USBD_CDC_Setup>:
{
 8005c2e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c30:	b083      	sub	sp, #12
 8005c32:	4606      	mov	r6, r0
 8005c34:	460c      	mov	r4, r1
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005c36:	f8d0 72b8 	ldr.w	r7, [r0, #696]	; 0x2b8
  uint8_t ifalt = 0U;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	f88d 3007 	strb.w	r3, [sp, #7]
  uint16_t status_info = 0U;
 8005c40:	f8ad 3004 	strh.w	r3, [sp, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005c44:	780b      	ldrb	r3, [r1, #0]
 8005c46:	f013 0560 	ands.w	r5, r3, #96	; 0x60
 8005c4a:	d027      	beq.n	8005c9c <USBD_CDC_Setup+0x6e>
 8005c4c:	2d20      	cmp	r5, #32
 8005c4e:	d153      	bne.n	8005cf8 <USBD_CDC_Setup+0xca>
      if (req->wLength)
 8005c50:	88ca      	ldrh	r2, [r1, #6]
 8005c52:	b1da      	cbz	r2, 8005c8c <USBD_CDC_Setup+0x5e>
        if (req->bmRequest & 0x80U)
 8005c54:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005c58:	d00c      	beq.n	8005c74 <USBD_CDC_Setup+0x46>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005c5a:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	4639      	mov	r1, r7
 8005c62:	7860      	ldrb	r0, [r4, #1]
 8005c64:	4798      	blx	r3
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005c66:	88e2      	ldrh	r2, [r4, #6]
 8005c68:	4639      	mov	r1, r7
 8005c6a:	4630      	mov	r0, r6
 8005c6c:	f000 fd4a 	bl	8006704 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8005c70:	2500      	movs	r5, #0
 8005c72:	e044      	b.n	8005cfe <USBD_CDC_Setup+0xd0>
          hcdc->CmdOpCode = req->bRequest;
 8005c74:	784b      	ldrb	r3, [r1, #1]
 8005c76:	f887 3200 	strb.w	r3, [r7, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005c7a:	88cb      	ldrh	r3, [r1, #6]
 8005c7c:	f887 3201 	strb.w	r3, [r7, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005c80:	88ca      	ldrh	r2, [r1, #6]
 8005c82:	4639      	mov	r1, r7
 8005c84:	f000 fd53 	bl	800672e <USBD_CtlPrepareRx>
  uint8_t ret = USBD_OK;
 8005c88:	2500      	movs	r5, #0
 8005c8a:	e038      	b.n	8005cfe <USBD_CDC_Setup+0xd0>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005c8c:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 8005c90:	689b      	ldr	r3, [r3, #8]
 8005c92:	2200      	movs	r2, #0
 8005c94:	7848      	ldrb	r0, [r1, #1]
 8005c96:	4798      	blx	r3
  uint8_t ret = USBD_OK;
 8005c98:	2500      	movs	r5, #0
 8005c9a:	e030      	b.n	8005cfe <USBD_CDC_Setup+0xd0>
      switch (req->bRequest)
 8005c9c:	784f      	ldrb	r7, [r1, #1]
 8005c9e:	2f0a      	cmp	r7, #10
 8005ca0:	d014      	beq.n	8005ccc <USBD_CDC_Setup+0x9e>
 8005ca2:	2f0b      	cmp	r7, #11
 8005ca4:	d020      	beq.n	8005ce8 <USBD_CDC_Setup+0xba>
 8005ca6:	b11f      	cbz	r7, 8005cb0 <USBD_CDC_Setup+0x82>
          USBD_CtlError(pdev, req);
 8005ca8:	f000 fa3e 	bl	8006128 <USBD_CtlError>
          ret = USBD_FAIL;
 8005cac:	2502      	movs	r5, #2
          break;
 8005cae:	e026      	b.n	8005cfe <USBD_CDC_Setup+0xd0>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005cb0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005cb4:	2b03      	cmp	r3, #3
 8005cb6:	d003      	beq.n	8005cc0 <USBD_CDC_Setup+0x92>
            USBD_CtlError(pdev, req);
 8005cb8:	f000 fa36 	bl	8006128 <USBD_CtlError>
            ret = USBD_FAIL;
 8005cbc:	2502      	movs	r5, #2
 8005cbe:	e01e      	b.n	8005cfe <USBD_CDC_Setup+0xd0>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8005cc0:	2202      	movs	r2, #2
 8005cc2:	a901      	add	r1, sp, #4
 8005cc4:	f000 fd1e 	bl	8006704 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8005cc8:	463d      	mov	r5, r7
 8005cca:	e018      	b.n	8005cfe <USBD_CDC_Setup+0xd0>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ccc:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005cd0:	2b03      	cmp	r3, #3
 8005cd2:	d003      	beq.n	8005cdc <USBD_CDC_Setup+0xae>
            USBD_CtlError(pdev, req);
 8005cd4:	f000 fa28 	bl	8006128 <USBD_CtlError>
            ret = USBD_FAIL;
 8005cd8:	2502      	movs	r5, #2
 8005cda:	e010      	b.n	8005cfe <USBD_CDC_Setup+0xd0>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8005cdc:	2201      	movs	r2, #1
 8005cde:	f10d 0107 	add.w	r1, sp, #7
 8005ce2:	f000 fd0f 	bl	8006704 <USBD_CtlSendData>
 8005ce6:	e00a      	b.n	8005cfe <USBD_CDC_Setup+0xd0>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005ce8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005cec:	2b03      	cmp	r3, #3
 8005cee:	d006      	beq.n	8005cfe <USBD_CDC_Setup+0xd0>
            USBD_CtlError(pdev, req);
 8005cf0:	f000 fa1a 	bl	8006128 <USBD_CtlError>
            ret = USBD_FAIL;
 8005cf4:	2502      	movs	r5, #2
 8005cf6:	e002      	b.n	8005cfe <USBD_CDC_Setup+0xd0>
      USBD_CtlError(pdev, req);
 8005cf8:	f000 fa16 	bl	8006128 <USBD_CtlError>
      ret = USBD_FAIL;
 8005cfc:	2502      	movs	r5, #2
}
 8005cfe:	4628      	mov	r0, r5
 8005d00:	b003      	add	sp, #12
 8005d02:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005d04 <USBD_CDC_DeInit>:
{
 8005d04:	b538      	push	{r3, r4, r5, lr}
 8005d06:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005d08:	2181      	movs	r1, #129	; 0x81
 8005d0a:	f000 fee2 	bl	8006ad2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005d0e:	2500      	movs	r5, #0
 8005d10:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005d12:	2101      	movs	r1, #1
 8005d14:	4620      	mov	r0, r4
 8005d16:	f000 fedc 	bl	8006ad2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005d1a:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005d1e:	2182      	movs	r1, #130	; 0x82
 8005d20:	4620      	mov	r0, r4
 8005d22:	f000 fed6 	bl	8006ad2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005d26:	6425      	str	r5, [r4, #64]	; 0x40
  if (pdev->pClassData != NULL)
 8005d28:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8005d2c:	b14b      	cbz	r3, 8005d42 <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005d2e:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8005d36:	f8d4 02b8 	ldr.w	r0, [r4, #696]	; 0x2b8
 8005d3a:	f000 ff1b 	bl	8006b74 <USBD_static_free>
    pdev->pClassData = NULL;
 8005d3e:	f8c4 52b8 	str.w	r5, [r4, #696]	; 0x2b8
}
 8005d42:	2000      	movs	r0, #0
 8005d44:	bd38      	pop	{r3, r4, r5, pc}

08005d46 <USBD_CDC_Init>:
{
 8005d46:	b570      	push	{r4, r5, r6, lr}
 8005d48:	4604      	mov	r4, r0
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005d4a:	7c03      	ldrb	r3, [r0, #16]
 8005d4c:	bbab      	cbnz	r3, 8005dba <USBD_CDC_Init+0x74>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005d4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d52:	2202      	movs	r2, #2
 8005d54:	2181      	movs	r1, #129	; 0x81
 8005d56:	f000 feb1 	bl	8006abc <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005d5a:	2501      	movs	r5, #1
 8005d5c:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005d5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d62:	2202      	movs	r2, #2
 8005d64:	4629      	mov	r1, r5
 8005d66:	4620      	mov	r0, r4
 8005d68:	f000 fea8 	bl	8006abc <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005d6c:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005d70:	2308      	movs	r3, #8
 8005d72:	2203      	movs	r2, #3
 8005d74:	2182      	movs	r1, #130	; 0x82
 8005d76:	4620      	mov	r0, r4
 8005d78:	f000 fea0 	bl	8006abc <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	6423      	str	r3, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005d80:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005d84:	f000 fef2 	bl	8006b6c <USBD_static_malloc>
 8005d88:	4605      	mov	r5, r0
 8005d8a:	f8c4 02b8 	str.w	r0, [r4, #696]	; 0x2b8
  if (pdev->pClassData == NULL)
 8005d8e:	b368      	cbz	r0, 8005dec <USBD_CDC_Init+0xa6>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005d90:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4798      	blx	r3
    hcdc->TxState = 0U;
 8005d98:	2300      	movs	r3, #0
 8005d9a:	f8c5 3214 	str.w	r3, [r5, #532]	; 0x214
    hcdc->RxState = 0U;
 8005d9e:	f8c5 3218 	str.w	r3, [r5, #536]	; 0x218
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005da2:	7c26      	ldrb	r6, [r4, #16]
 8005da4:	b9ce      	cbnz	r6, 8005dda <USBD_CDC_Init+0x94>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005da6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005daa:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 8005dae:	2101      	movs	r1, #1
 8005db0:	4620      	mov	r0, r4
 8005db2:	f000 fecd 	bl	8006b50 <USBD_LL_PrepareReceive>
}
 8005db6:	4630      	mov	r0, r6
 8005db8:	bd70      	pop	{r4, r5, r6, pc}
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005dba:	2340      	movs	r3, #64	; 0x40
 8005dbc:	2202      	movs	r2, #2
 8005dbe:	2181      	movs	r1, #129	; 0x81
 8005dc0:	f000 fe7c 	bl	8006abc <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005dc4:	2501      	movs	r5, #1
 8005dc6:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005dc8:	2340      	movs	r3, #64	; 0x40
 8005dca:	2202      	movs	r2, #2
 8005dcc:	4629      	mov	r1, r5
 8005dce:	4620      	mov	r0, r4
 8005dd0:	f000 fe74 	bl	8006abc <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005dd4:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
 8005dd8:	e7ca      	b.n	8005d70 <USBD_CDC_Init+0x2a>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005dda:	2340      	movs	r3, #64	; 0x40
 8005ddc:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 8005de0:	2101      	movs	r1, #1
 8005de2:	4620      	mov	r0, r4
 8005de4:	f000 feb4 	bl	8006b50 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8005de8:	2600      	movs	r6, #0
 8005dea:	e7e4      	b.n	8005db6 <USBD_CDC_Init+0x70>
    ret = 1U;
 8005dec:	2601      	movs	r6, #1
 8005dee:	e7e2      	b.n	8005db6 <USBD_CDC_Init+0x70>

08005df0 <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if (fops != NULL)
 8005df0:	b119      	cbz	r1, 8005dfa <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData = fops;
 8005df2:	f8c0 12bc 	str.w	r1, [r0, #700]	; 0x2bc
    ret = USBD_OK;
 8005df6:	2000      	movs	r0, #0
 8005df8:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8005dfa:	2002      	movs	r0, #2
  }

  return ret;
}
 8005dfc:	4770      	bx	lr

08005dfe <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005dfe:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  hcdc->TxBuffer = pbuff;
 8005e02:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005e06:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
}
 8005e0a:	2000      	movs	r0, #0
 8005e0c:	4770      	bx	lr

08005e0e <USBD_CDC_SetRxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005e0e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  hcdc->RxBuffer = pbuff;
 8005e12:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204

  return USBD_OK;
}
 8005e16:	2000      	movs	r0, #0
 8005e18:	4770      	bx	lr

08005e1a <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005e1a:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005e1c:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8005e20:	b192      	cbz	r2, 8005e48 <USBD_CDC_ReceivePacket+0x2e>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e22:	7c04      	ldrb	r4, [r0, #16]
 8005e24:	b944      	cbnz	r4, 8005e38 <USBD_CDC_ReceivePacket+0x1e>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005e26:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e2a:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8005e2e:	2101      	movs	r1, #1
 8005e30:	f000 fe8e 	bl	8006b50 <USBD_LL_PrepareReceive>
  }
  else
  {
    return USBD_FAIL;
  }
}
 8005e34:	4620      	mov	r0, r4
 8005e36:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 8005e38:	2340      	movs	r3, #64	; 0x40
 8005e3a:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8005e3e:	2101      	movs	r1, #1
 8005e40:	f000 fe86 	bl	8006b50 <USBD_LL_PrepareReceive>
    return USBD_OK;
 8005e44:	2400      	movs	r4, #0
 8005e46:	e7f5      	b.n	8005e34 <USBD_CDC_ReceivePacket+0x1a>
    return USBD_FAIL;
 8005e48:	2402      	movs	r4, #2
 8005e4a:	e7f3      	b.n	8005e34 <USBD_CDC_ReceivePacket+0x1a>

08005e4c <USBD_Init>:
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005e4c:	b198      	cbz	r0, 8005e76 <USBD_Init+0x2a>
{
 8005e4e:	b508      	push	{r3, lr}
 8005e50:	4603      	mov	r3, r0
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8005e52:	f8d0 02b4 	ldr.w	r0, [r0, #692]	; 0x2b4
 8005e56:	b110      	cbz	r0, 8005e5e <USBD_Init+0x12>
  {
    pdev->pClass = NULL;
 8005e58:	2000      	movs	r0, #0
 8005e5a:	f8c3 02b4 	str.w	r0, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005e5e:	b109      	cbz	r1, 8005e64 <USBD_Init+0x18>
  {
    pdev->pDesc = pdesc;
 8005e60:	f8c3 12b0 	str.w	r1, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005e64:	2101      	movs	r1, #1
 8005e66:	f883 129c 	strb.w	r1, [r3, #668]	; 0x29c
  pdev->id = id;
 8005e6a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	f000 fddb 	bl	8006a28 <USBD_LL_Init>

  return USBD_OK;
 8005e72:	2000      	movs	r0, #0
}
 8005e74:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8005e76:	2002      	movs	r0, #2
}
 8005e78:	4770      	bx	lr

08005e7a <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 8005e7a:	b119      	cbz	r1, 8005e84 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005e7c:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
    status = USBD_OK;
 8005e80:	2000      	movs	r0, #0
 8005e82:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8005e84:	2002      	movs	r0, #2
  }

  return status;
}
 8005e86:	4770      	bx	lr

08005e88 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005e88:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8005e8a:	f000 fe0f 	bl	8006aac <USBD_LL_Start>

  return USBD_OK;
}
 8005e8e:	2000      	movs	r0, #0
 8005e90:	bd08      	pop	{r3, pc}

08005e92 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005e92:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8005e94:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8005e98:	b12b      	cbz	r3, 8005ea6 <USBD_SetClassConfig+0x14>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4798      	blx	r3
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005e9e:	2800      	cmp	r0, #0
 8005ea0:	bf18      	it	ne
 8005ea2:	2002      	movne	r0, #2
      ret = USBD_OK;
    }
  }

  return ret;
}
 8005ea4:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005ea6:	2002      	movs	r0, #2
 8005ea8:	e7fc      	b.n	8005ea4 <USBD_SetClassConfig+0x12>

08005eaa <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005eaa:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8005eac:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	4798      	blx	r3

  return USBD_OK;
}
 8005eb4:	2000      	movs	r0, #0
 8005eb6:	bd08      	pop	{r3, pc}

08005eb8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005eb8:	b538      	push	{r3, r4, r5, lr}
 8005eba:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005ebc:	f500 752a 	add.w	r5, r0, #680	; 0x2a8
 8005ec0:	4628      	mov	r0, r5
 8005ec2:	f000 f91d 	bl	8006100 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005ecc:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	; 0x2ae
 8005ed0:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005ed4:	f894 12a8 	ldrb.w	r1, [r4, #680]	; 0x2a8
 8005ed8:	f001 031f 	and.w	r3, r1, #31
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	d00e      	beq.n	8005efe <USBD_LL_SetupStage+0x46>
 8005ee0:	2b02      	cmp	r3, #2
 8005ee2:	d011      	beq.n	8005f08 <USBD_LL_SetupStage+0x50>
 8005ee4:	b12b      	cbz	r3, 8005ef2 <USBD_LL_SetupStage+0x3a>
    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005ee6:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8005eea:	4620      	mov	r0, r4
 8005eec:	f000 fdf9 	bl	8006ae2 <USBD_LL_StallEP>
      break;
 8005ef0:	e003      	b.n	8005efa <USBD_LL_SetupStage+0x42>
      USBD_StdDevReq(pdev, &pdev->request);
 8005ef2:	4629      	mov	r1, r5
 8005ef4:	4620      	mov	r0, r4
 8005ef6:	f000 f921 	bl	800613c <USBD_StdDevReq>
  }

  return USBD_OK;
}
 8005efa:	2000      	movs	r0, #0
 8005efc:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 8005efe:	4629      	mov	r1, r5
 8005f00:	4620      	mov	r0, r4
 8005f02:	f000 fad5 	bl	80064b0 <USBD_StdItfReq>
      break;
 8005f06:	e7f8      	b.n	8005efa <USBD_LL_SetupStage+0x42>
      USBD_StdEPReq(pdev, &pdev->request);
 8005f08:	4629      	mov	r1, r5
 8005f0a:	4620      	mov	r0, r4
 8005f0c:	f000 fb00 	bl	8006510 <USBD_StdEPReq>
      break;
 8005f10:	e7f3      	b.n	8005efa <USBD_LL_SetupStage+0x42>

08005f12 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005f12:	b538      	push	{r3, r4, r5, lr}
 8005f14:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005f16:	460d      	mov	r5, r1
 8005f18:	bb81      	cbnz	r1, 8005f7c <USBD_LL_DataOutStage+0x6a>
 8005f1a:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005f1c:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8005f20:	2a03      	cmp	r2, #3
 8005f22:	d003      	beq.n	8005f2c <USBD_LL_DataOutStage+0x1a>
        USBD_CtlSendStatus(pdev);
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8005f24:	2a05      	cmp	r2, #5
 8005f26:	d022      	beq.n	8005f6e <USBD_LL_DataOutStage+0x5c>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8005f28:	4608      	mov	r0, r1
 8005f2a:	e031      	b.n	8005f90 <USBD_LL_DataOutStage+0x7e>
      if (pep->rem_length > pep->maxpacket)
 8005f2c:	f8d0 1160 	ldr.w	r1, [r0, #352]	; 0x160
 8005f30:	f8d0 2164 	ldr.w	r2, [r0, #356]	; 0x164
 8005f34:	4291      	cmp	r1, r2
 8005f36:	d90b      	bls.n	8005f50 <USBD_LL_DataOutStage+0x3e>
        pep->rem_length -= pep->maxpacket;
 8005f38:	1a89      	subs	r1, r1, r2
 8005f3a:	f8c0 1160 	str.w	r1, [r0, #352]	; 0x160
        USBD_CtlContinueRx(pdev, pdata,
 8005f3e:	428a      	cmp	r2, r1
 8005f40:	bf8c      	ite	hi
 8005f42:	b28a      	uxthhi	r2, r1
 8005f44:	b292      	uxthls	r2, r2
 8005f46:	4619      	mov	r1, r3
 8005f48:	f000 fc00 	bl	800674c <USBD_CtlContinueRx>
  return USBD_OK;
 8005f4c:	4628      	mov	r0, r5
 8005f4e:	e01f      	b.n	8005f90 <USBD_LL_DataOutStage+0x7e>
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005f50:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8005f54:	691b      	ldr	r3, [r3, #16]
 8005f56:	b11b      	cbz	r3, 8005f60 <USBD_LL_DataOutStage+0x4e>
 8005f58:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8005f5c:	2a03      	cmp	r2, #3
 8005f5e:	d004      	beq.n	8005f6a <USBD_LL_DataOutStage+0x58>
        USBD_CtlSendStatus(pdev);
 8005f60:	4620      	mov	r0, r4
 8005f62:	f000 fbfb 	bl	800675c <USBD_CtlSendStatus>
  return USBD_OK;
 8005f66:	4628      	mov	r0, r5
 8005f68:	e012      	b.n	8005f90 <USBD_LL_DataOutStage+0x7e>
          pdev->pClass->EP0_RxReady(pdev);
 8005f6a:	4798      	blx	r3
 8005f6c:	e7f8      	b.n	8005f60 <USBD_LL_DataOutStage+0x4e>
        pdev->ep0_state = USBD_EP0_IDLE;
 8005f6e:	2100      	movs	r1, #0
 8005f70:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8005f74:	f000 fdb5 	bl	8006ae2 <USBD_LL_StallEP>
  return USBD_OK;
 8005f78:	4628      	mov	r0, r5
 8005f7a:	e009      	b.n	8005f90 <USBD_LL_DataOutStage+0x7e>
  else if ((pdev->pClass->DataOut != NULL) &&
 8005f7c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8005f80:	699b      	ldr	r3, [r3, #24]
 8005f82:	b133      	cbz	r3, 8005f92 <USBD_LL_DataOutStage+0x80>
 8005f84:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8005f88:	2a03      	cmp	r2, #3
 8005f8a:	d104      	bne.n	8005f96 <USBD_LL_DataOutStage+0x84>
    pdev->pClass->DataOut(pdev, epnum);
 8005f8c:	4798      	blx	r3
  return USBD_OK;
 8005f8e:	2000      	movs	r0, #0
}
 8005f90:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8005f92:	2002      	movs	r0, #2
 8005f94:	e7fc      	b.n	8005f90 <USBD_LL_DataOutStage+0x7e>
 8005f96:	2002      	movs	r0, #2
 8005f98:	e7fa      	b.n	8005f90 <USBD_LL_DataOutStage+0x7e>

08005f9a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005f9a:	b538      	push	{r3, r4, r5, lr}
 8005f9c:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005f9e:	460d      	mov	r5, r1
 8005fa0:	2900      	cmp	r1, #0
 8005fa2:	d152      	bne.n	800604a <USBD_LL_DataInStage+0xb0>
 8005fa4:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005fa6:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8005faa:	2a02      	cmp	r2, #2
 8005fac:	d00b      	beq.n	8005fc6 <USBD_LL_DataInStage+0x2c>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005fae:	f032 0304 	bics.w	r3, r2, #4
 8005fb2:	d102      	bne.n	8005fba <USBD_LL_DataInStage+0x20>
          (pdev->ep0_state == USBD_EP0_IDLE))
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8005fb4:	2180      	movs	r1, #128	; 0x80
 8005fb6:	f000 fd94 	bl	8006ae2 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8005fba:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d03e      	beq.n	8006040 <USBD_LL_DataInStage+0xa6>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8005fc2:	4628      	mov	r0, r5
}
 8005fc4:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 8005fc6:	6a01      	ldr	r1, [r0, #32]
 8005fc8:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8005fca:	4291      	cmp	r1, r2
 8005fcc:	d81b      	bhi.n	8006006 <USBD_LL_DataInStage+0x6c>
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005fce:	69c1      	ldr	r1, [r0, #28]
 8005fd0:	fbb1 f3f2 	udiv	r3, r1, r2
 8005fd4:	fb02 1313 	mls	r3, r2, r3, r1
 8005fd8:	b92b      	cbnz	r3, 8005fe6 <USBD_LL_DataInStage+0x4c>
 8005fda:	428a      	cmp	r2, r1
 8005fdc:	d803      	bhi.n	8005fe6 <USBD_LL_DataInStage+0x4c>
            (pep->total_length >= pep->maxpacket) &&
 8005fde:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
 8005fe2:	4299      	cmp	r1, r3
 8005fe4:	d31c      	bcc.n	8006020 <USBD_LL_DataInStage+0x86>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005fe6:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8005fea:	68db      	ldr	r3, [r3, #12]
 8005fec:	b11b      	cbz	r3, 8005ff6 <USBD_LL_DataInStage+0x5c>
 8005fee:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 8005ff2:	2a03      	cmp	r2, #3
 8005ff4:	d021      	beq.n	800603a <USBD_LL_DataInStage+0xa0>
          USBD_LL_StallEP(pdev, 0x80U);
 8005ff6:	2180      	movs	r1, #128	; 0x80
 8005ff8:	4620      	mov	r0, r4
 8005ffa:	f000 fd72 	bl	8006ae2 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8005ffe:	4620      	mov	r0, r4
 8006000:	f000 fbb7 	bl	8006772 <USBD_CtlReceiveStatus>
 8006004:	e7d9      	b.n	8005fba <USBD_LL_DataInStage+0x20>
        pep->rem_length -= pep->maxpacket;
 8006006:	1a8a      	subs	r2, r1, r2
 8006008:	6202      	str	r2, [r0, #32]
        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800600a:	b292      	uxth	r2, r2
 800600c:	4619      	mov	r1, r3
 800600e:	f000 fb86 	bl	800671e <USBD_CtlContinueSendData>
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006012:	2300      	movs	r3, #0
 8006014:	461a      	mov	r2, r3
 8006016:	4619      	mov	r1, r3
 8006018:	4620      	mov	r0, r4
 800601a:	f000 fd99 	bl	8006b50 <USBD_LL_PrepareReceive>
 800601e:	e7cc      	b.n	8005fba <USBD_LL_DataInStage+0x20>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006020:	2200      	movs	r2, #0
 8006022:	4611      	mov	r1, r2
 8006024:	f000 fb7b 	bl	800671e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006028:	2100      	movs	r1, #0
 800602a:	f8c4 1298 	str.w	r1, [r4, #664]	; 0x298
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800602e:	460b      	mov	r3, r1
 8006030:	460a      	mov	r2, r1
 8006032:	4620      	mov	r0, r4
 8006034:	f000 fd8c 	bl	8006b50 <USBD_LL_PrepareReceive>
 8006038:	e7bf      	b.n	8005fba <USBD_LL_DataInStage+0x20>
            pdev->pClass->EP0_TxSent(pdev);
 800603a:	4620      	mov	r0, r4
 800603c:	4798      	blx	r3
 800603e:	e7da      	b.n	8005ff6 <USBD_LL_DataInStage+0x5c>
      pdev->dev_test_mode = 0U;
 8006040:	2300      	movs	r3, #0
 8006042:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
  return USBD_OK;
 8006046:	4628      	mov	r0, r5
 8006048:	e7bc      	b.n	8005fc4 <USBD_LL_DataInStage+0x2a>
  else if ((pdev->pClass->DataIn != NULL) &&
 800604a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800604e:	695b      	ldr	r3, [r3, #20]
 8006050:	b133      	cbz	r3, 8006060 <USBD_LL_DataInStage+0xc6>
 8006052:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8006056:	2a03      	cmp	r2, #3
 8006058:	d104      	bne.n	8006064 <USBD_LL_DataInStage+0xca>
    pdev->pClass->DataIn(pdev, epnum);
 800605a:	4798      	blx	r3
  return USBD_OK;
 800605c:	2000      	movs	r0, #0
    pdev->pClass->DataIn(pdev, epnum);
 800605e:	e7b1      	b.n	8005fc4 <USBD_LL_DataInStage+0x2a>
    return USBD_FAIL;
 8006060:	2002      	movs	r0, #2
 8006062:	e7af      	b.n	8005fc4 <USBD_LL_DataInStage+0x2a>
 8006064:	2002      	movs	r0, #2
 8006066:	e7ad      	b.n	8005fc4 <USBD_LL_DataInStage+0x2a>

08006068 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006068:	b570      	push	{r4, r5, r6, lr}
 800606a:	4604      	mov	r4, r0
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800606c:	2340      	movs	r3, #64	; 0x40
 800606e:	2200      	movs	r2, #0
 8006070:	4611      	mov	r1, r2
 8006072:	f000 fd23 	bl	8006abc <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006076:	2501      	movs	r5, #1
 8006078:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800607c:	2640      	movs	r6, #64	; 0x40
 800607e:	f8c4 6164 	str.w	r6, [r4, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006082:	4633      	mov	r3, r6
 8006084:	2200      	movs	r2, #0
 8006086:	2180      	movs	r1, #128	; 0x80
 8006088:	4620      	mov	r0, r4
 800608a:	f000 fd17 	bl	8006abc <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800608e:	61a5      	str	r5, [r4, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006090:	6266      	str	r6, [r4, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006092:	f884 529c 	strb.w	r5, [r4, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006096:	2300      	movs	r3, #0
 8006098:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  pdev->dev_config = 0U;
 800609c:	6063      	str	r3, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 800609e:	f8c4 32a4 	str.w	r3, [r4, #676]	; 0x2a4

  if (pdev->pClassData)
 80060a2:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 80060a6:	b12b      	cbz	r3, 80060b4 <USBD_LL_Reset+0x4c>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80060a8:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	2100      	movs	r1, #0
 80060b0:	4620      	mov	r0, r4
 80060b2:	4798      	blx	r3
  }

  return USBD_OK;
}
 80060b4:	2000      	movs	r0, #0
 80060b6:	bd70      	pop	{r4, r5, r6, pc}

080060b8 <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 80060b8:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 80060ba:	2000      	movs	r0, #0
 80060bc:	4770      	bx	lr

080060be <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 80060be:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80060c2:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80060c6:	2304      	movs	r3, #4
 80060c8:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 80060cc:	2000      	movs	r0, #0
 80060ce:	4770      	bx	lr

080060d0 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80060d0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80060d4:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 80060d6:	bf04      	itt	eq
 80060d8:	f890 329d 	ldrbeq.w	r3, [r0, #669]	; 0x29d
 80060dc:	f880 329c 	strbeq.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 80060e0:	2000      	movs	r0, #0
 80060e2:	4770      	bx	lr

080060e4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80060e4:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060e6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80060ea:	2b03      	cmp	r3, #3
 80060ec:	d001      	beq.n	80060f2 <USBD_LL_SOF+0xe>
      pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
}
 80060ee:	2000      	movs	r0, #0
 80060f0:	bd08      	pop	{r3, pc}
    if (pdev->pClass->SOF != NULL)
 80060f2:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80060f6:	69db      	ldr	r3, [r3, #28]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d0f8      	beq.n	80060ee <USBD_LL_SOF+0xa>
      pdev->pClass->SOF(pdev);
 80060fc:	4798      	blx	r3
 80060fe:	e7f6      	b.n	80060ee <USBD_LL_SOF+0xa>

08006100 <USBD_ParseSetupRequest>:
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
  req->bmRequest = *(uint8_t *)(pdata);
 8006100:	780b      	ldrb	r3, [r1, #0]
 8006102:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8006104:	784b      	ldrb	r3, [r1, #1]
 8006106:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8006108:	78ca      	ldrb	r2, [r1, #3]
 800610a:	788b      	ldrb	r3, [r1, #2]
 800610c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8006110:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8006112:	794a      	ldrb	r2, [r1, #5]
 8006114:	790b      	ldrb	r3, [r1, #4]
 8006116:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800611a:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800611c:	79ca      	ldrb	r2, [r1, #7]
 800611e:	798b      	ldrb	r3, [r1, #6]
 8006120:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8006124:	80c3      	strh	r3, [r0, #6]

}
 8006126:	4770      	bx	lr

08006128 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8006128:	b510      	push	{r4, lr}
 800612a:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 800612c:	2180      	movs	r1, #128	; 0x80
 800612e:	f000 fcd8 	bl	8006ae2 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8006132:	2100      	movs	r1, #0
 8006134:	4620      	mov	r0, r4
 8006136:	f000 fcd4 	bl	8006ae2 <USBD_LL_StallEP>
}
 800613a:	bd10      	pop	{r4, pc}

0800613c <USBD_StdDevReq>:
{
 800613c:	b530      	push	{r4, r5, lr}
 800613e:	b083      	sub	sp, #12
 8006140:	4605      	mov	r5, r0
 8006142:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006144:	780b      	ldrb	r3, [r1, #0]
 8006146:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800614a:	2b20      	cmp	r3, #32
 800614c:	d005      	beq.n	800615a <USBD_StdDevReq+0x1e>
 800614e:	2b40      	cmp	r3, #64	; 0x40
 8006150:	d003      	beq.n	800615a <USBD_StdDevReq+0x1e>
 8006152:	b15b      	cbz	r3, 800616c <USBD_StdDevReq+0x30>
      USBD_CtlError(pdev, req);
 8006154:	f7ff ffe8 	bl	8006128 <USBD_CtlError>
      break;
 8006158:	e005      	b.n	8006166 <USBD_StdDevReq+0x2a>
      pdev->pClass->Setup(pdev, req);
 800615a:	f8d5 32b4 	ldr.w	r3, [r5, #692]	; 0x2b4
 800615e:	689b      	ldr	r3, [r3, #8]
 8006160:	4621      	mov	r1, r4
 8006162:	4628      	mov	r0, r5
 8006164:	4798      	blx	r3
}
 8006166:	2000      	movs	r0, #0
 8006168:	b003      	add	sp, #12
 800616a:	bd30      	pop	{r4, r5, pc}
      switch (req->bRequest)
 800616c:	784b      	ldrb	r3, [r1, #1]
 800616e:	2b09      	cmp	r3, #9
 8006170:	f200 8198 	bhi.w	80064a4 <USBD_StdDevReq+0x368>
 8006174:	e8df f013 	tbh	[pc, r3, lsl #1]
 8006178:	0184015f 	.word	0x0184015f
 800617c:	017b0196 	.word	0x017b0196
 8006180:	00c90196 	.word	0x00c90196
 8006184:	0196000a 	.word	0x0196000a
 8006188:	00ee0140 	.word	0x00ee0140
  uint16_t len = 0U;
 800618c:	2300      	movs	r3, #0
 800618e:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8006192:	884a      	ldrh	r2, [r1, #2]
 8006194:	0a13      	lsrs	r3, r2, #8
 8006196:	3b01      	subs	r3, #1
 8006198:	2b06      	cmp	r3, #6
 800619a:	f200 80a4 	bhi.w	80062e6 <USBD_StdDevReq+0x1aa>
 800619e:	e8df f003 	tbb	[pc, r3]
 80061a2:	1804      	.short	0x1804
 80061a4:	86a2a22c 	.word	0x86a2a22c
 80061a8:	93          	.byte	0x93
 80061a9:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80061aa:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f10d 0106 	add.w	r1, sp, #6
 80061b4:	7c00      	ldrb	r0, [r0, #16]
 80061b6:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 80061b8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80061bc:	2a00      	cmp	r2, #0
 80061be:	f000 809f 	beq.w	8006300 <USBD_StdDevReq+0x1c4>
 80061c2:	88e3      	ldrh	r3, [r4, #6]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	f040 8092 	bne.w	80062ee <USBD_StdDevReq+0x1b2>
      (void)USBD_CtlSendStatus(pdev);
 80061ca:	4628      	mov	r0, r5
 80061cc:	f000 fac6 	bl	800675c <USBD_CtlSendStatus>
 80061d0:	e7c9      	b.n	8006166 <USBD_StdDevReq+0x2a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80061d2:	7c03      	ldrb	r3, [r0, #16]
 80061d4:	b943      	cbnz	r3, 80061e8 <USBD_StdDevReq+0xac>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80061d6:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80061da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061dc:	f10d 0006 	add.w	r0, sp, #6
 80061e0:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80061e2:	2302      	movs	r3, #2
 80061e4:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 80061e6:	e7e7      	b.n	80061b8 <USBD_StdDevReq+0x7c>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80061e8:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80061ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ee:	f10d 0006 	add.w	r0, sp, #6
 80061f2:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80061f4:	2302      	movs	r3, #2
 80061f6:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 80061f8:	e7de      	b.n	80061b8 <USBD_StdDevReq+0x7c>
      switch ((uint8_t)(req->wValue))
 80061fa:	b2d2      	uxtb	r2, r2
 80061fc:	2a05      	cmp	r2, #5
 80061fe:	d852      	bhi.n	80062a6 <USBD_StdDevReq+0x16a>
 8006200:	e8df f002 	tbb	[pc, r2]
 8006204:	2a1d1003 	.word	0x2a1d1003
 8006208:	4437      	.short	0x4437
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800620a:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	b123      	cbz	r3, 800621c <USBD_StdDevReq+0xe0>
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006212:	f10d 0106 	add.w	r1, sp, #6
 8006216:	7c00      	ldrb	r0, [r0, #16]
 8006218:	4798      	blx	r3
  if (err != 0U)
 800621a:	e7cd      	b.n	80061b8 <USBD_StdDevReq+0x7c>
            USBD_CtlError(pdev, req);
 800621c:	4621      	mov	r1, r4
 800621e:	f7ff ff83 	bl	8006128 <USBD_CtlError>
  if (err != 0U)
 8006222:	e7a0      	b.n	8006166 <USBD_StdDevReq+0x2a>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006224:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8006228:	689b      	ldr	r3, [r3, #8]
 800622a:	b123      	cbz	r3, 8006236 <USBD_StdDevReq+0xfa>
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800622c:	f10d 0106 	add.w	r1, sp, #6
 8006230:	7c00      	ldrb	r0, [r0, #16]
 8006232:	4798      	blx	r3
  if (err != 0U)
 8006234:	e7c0      	b.n	80061b8 <USBD_StdDevReq+0x7c>
            USBD_CtlError(pdev, req);
 8006236:	4621      	mov	r1, r4
 8006238:	f7ff ff76 	bl	8006128 <USBD_CtlError>
  if (err != 0U)
 800623c:	e793      	b.n	8006166 <USBD_StdDevReq+0x2a>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800623e:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8006242:	68db      	ldr	r3, [r3, #12]
 8006244:	b123      	cbz	r3, 8006250 <USBD_StdDevReq+0x114>
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006246:	f10d 0106 	add.w	r1, sp, #6
 800624a:	7c00      	ldrb	r0, [r0, #16]
 800624c:	4798      	blx	r3
  if (err != 0U)
 800624e:	e7b3      	b.n	80061b8 <USBD_StdDevReq+0x7c>
            USBD_CtlError(pdev, req);
 8006250:	4621      	mov	r1, r4
 8006252:	f7ff ff69 	bl	8006128 <USBD_CtlError>
  if (err != 0U)
 8006256:	e786      	b.n	8006166 <USBD_StdDevReq+0x2a>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006258:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800625c:	691b      	ldr	r3, [r3, #16]
 800625e:	b123      	cbz	r3, 800626a <USBD_StdDevReq+0x12e>
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006260:	f10d 0106 	add.w	r1, sp, #6
 8006264:	7c00      	ldrb	r0, [r0, #16]
 8006266:	4798      	blx	r3
  if (err != 0U)
 8006268:	e7a6      	b.n	80061b8 <USBD_StdDevReq+0x7c>
            USBD_CtlError(pdev, req);
 800626a:	4621      	mov	r1, r4
 800626c:	f7ff ff5c 	bl	8006128 <USBD_CtlError>
  if (err != 0U)
 8006270:	e779      	b.n	8006166 <USBD_StdDevReq+0x2a>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006272:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8006276:	695b      	ldr	r3, [r3, #20]
 8006278:	b123      	cbz	r3, 8006284 <USBD_StdDevReq+0x148>
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800627a:	f10d 0106 	add.w	r1, sp, #6
 800627e:	7c00      	ldrb	r0, [r0, #16]
 8006280:	4798      	blx	r3
  if (err != 0U)
 8006282:	e799      	b.n	80061b8 <USBD_StdDevReq+0x7c>
            USBD_CtlError(pdev, req);
 8006284:	4621      	mov	r1, r4
 8006286:	f7ff ff4f 	bl	8006128 <USBD_CtlError>
  if (err != 0U)
 800628a:	e76c      	b.n	8006166 <USBD_StdDevReq+0x2a>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800628c:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8006290:	699b      	ldr	r3, [r3, #24]
 8006292:	b123      	cbz	r3, 800629e <USBD_StdDevReq+0x162>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006294:	f10d 0106 	add.w	r1, sp, #6
 8006298:	7c00      	ldrb	r0, [r0, #16]
 800629a:	4798      	blx	r3
  if (err != 0U)
 800629c:	e78c      	b.n	80061b8 <USBD_StdDevReq+0x7c>
            USBD_CtlError(pdev, req);
 800629e:	4621      	mov	r1, r4
 80062a0:	f7ff ff42 	bl	8006128 <USBD_CtlError>
  if (err != 0U)
 80062a4:	e75f      	b.n	8006166 <USBD_StdDevReq+0x2a>
          USBD_CtlError(pdev, req);
 80062a6:	4621      	mov	r1, r4
 80062a8:	f7ff ff3e 	bl	8006128 <USBD_CtlError>
  if (err != 0U)
 80062ac:	e75b      	b.n	8006166 <USBD_StdDevReq+0x2a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80062ae:	7c03      	ldrb	r3, [r0, #16]
 80062b0:	b933      	cbnz	r3, 80062c0 <USBD_StdDevReq+0x184>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80062b2:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80062b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062b8:	f10d 0006 	add.w	r0, sp, #6
 80062bc:	4798      	blx	r3
  if (err != 0U)
 80062be:	e77b      	b.n	80061b8 <USBD_StdDevReq+0x7c>
        USBD_CtlError(pdev, req);
 80062c0:	4621      	mov	r1, r4
 80062c2:	f7ff ff31 	bl	8006128 <USBD_CtlError>
  if (err != 0U)
 80062c6:	e74e      	b.n	8006166 <USBD_StdDevReq+0x2a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80062c8:	7c03      	ldrb	r3, [r0, #16]
 80062ca:	b943      	cbnz	r3, 80062de <USBD_StdDevReq+0x1a2>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80062cc:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80062d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062d2:	f10d 0006 	add.w	r0, sp, #6
 80062d6:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80062d8:	2307      	movs	r3, #7
 80062da:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 80062dc:	e76c      	b.n	80061b8 <USBD_StdDevReq+0x7c>
        USBD_CtlError(pdev, req);
 80062de:	4621      	mov	r1, r4
 80062e0:	f7ff ff22 	bl	8006128 <USBD_CtlError>
  if (err != 0U)
 80062e4:	e73f      	b.n	8006166 <USBD_StdDevReq+0x2a>
      USBD_CtlError(pdev, req);
 80062e6:	4621      	mov	r1, r4
 80062e8:	f7ff ff1e 	bl	8006128 <USBD_CtlError>
    return;
 80062ec:	e73b      	b.n	8006166 <USBD_StdDevReq+0x2a>
      len = MIN(len, req->wLength);
 80062ee:	429a      	cmp	r2, r3
 80062f0:	bf28      	it	cs
 80062f2:	461a      	movcs	r2, r3
 80062f4:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80062f8:	4601      	mov	r1, r0
 80062fa:	4628      	mov	r0, r5
 80062fc:	f000 fa02 	bl	8006704 <USBD_CtlSendData>
    if (req->wLength == 0U)
 8006300:	88e3      	ldrh	r3, [r4, #6]
 8006302:	2b00      	cmp	r3, #0
 8006304:	f47f af2f 	bne.w	8006166 <USBD_StdDevReq+0x2a>
 8006308:	e75f      	b.n	80061ca <USBD_StdDevReq+0x8e>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800630a:	888b      	ldrh	r3, [r1, #4]
 800630c:	b9eb      	cbnz	r3, 800634a <USBD_StdDevReq+0x20e>
 800630e:	88cb      	ldrh	r3, [r1, #6]
 8006310:	b9db      	cbnz	r3, 800634a <USBD_StdDevReq+0x20e>
 8006312:	884b      	ldrh	r3, [r1, #2]
 8006314:	2b7f      	cmp	r3, #127	; 0x7f
 8006316:	d818      	bhi.n	800634a <USBD_StdDevReq+0x20e>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006318:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800631c:	2a03      	cmp	r2, #3
 800631e:	d00d      	beq.n	800633c <USBD_StdDevReq+0x200>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006320:	b2dc      	uxtb	r4, r3
      pdev->dev_address = dev_addr;
 8006322:	f880 429e 	strb.w	r4, [r0, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006326:	4621      	mov	r1, r4
 8006328:	f000 fc02 	bl	8006b30 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800632c:	4628      	mov	r0, r5
 800632e:	f000 fa15 	bl	800675c <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8006332:	b134      	cbz	r4, 8006342 <USBD_StdDevReq+0x206>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006334:	2302      	movs	r3, #2
 8006336:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 800633a:	e714      	b.n	8006166 <USBD_StdDevReq+0x2a>
      USBD_CtlError(pdev, req);
 800633c:	f7ff fef4 	bl	8006128 <USBD_CtlError>
 8006340:	e711      	b.n	8006166 <USBD_StdDevReq+0x2a>
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006342:	2301      	movs	r3, #1
 8006344:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 8006348:	e70d      	b.n	8006166 <USBD_StdDevReq+0x2a>
    USBD_CtlError(pdev, req);
 800634a:	4621      	mov	r1, r4
 800634c:	4628      	mov	r0, r5
 800634e:	f7ff feeb 	bl	8006128 <USBD_CtlError>
 8006352:	e708      	b.n	8006166 <USBD_StdDevReq+0x2a>
  cfgidx = (uint8_t)(req->wValue);
 8006354:	788b      	ldrb	r3, [r1, #2]
 8006356:	4a55      	ldr	r2, [pc, #340]	; (80064ac <USBD_StdDevReq+0x370>)
 8006358:	7013      	strb	r3, [r2, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800635a:	2b01      	cmp	r3, #1
 800635c:	d80d      	bhi.n	800637a <USBD_StdDevReq+0x23e>
    switch (pdev->dev_state)
 800635e:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8006362:	2a02      	cmp	r2, #2
 8006364:	d00c      	beq.n	8006380 <USBD_StdDevReq+0x244>
 8006366:	2a03      	cmp	r2, #3
 8006368:	d020      	beq.n	80063ac <USBD_StdDevReq+0x270>
        USBD_CtlError(pdev, req);
 800636a:	f7ff fedd 	bl	8006128 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800636e:	4b4f      	ldr	r3, [pc, #316]	; (80064ac <USBD_StdDevReq+0x370>)
 8006370:	7819      	ldrb	r1, [r3, #0]
 8006372:	4628      	mov	r0, r5
 8006374:	f7ff fd99 	bl	8005eaa <USBD_ClrClassConfig>
        break;
 8006378:	e6f5      	b.n	8006166 <USBD_StdDevReq+0x2a>
    USBD_CtlError(pdev, req);
 800637a:	f7ff fed5 	bl	8006128 <USBD_CtlError>
 800637e:	e6f2      	b.n	8006166 <USBD_StdDevReq+0x2a>
        if (cfgidx)
 8006380:	b18b      	cbz	r3, 80063a6 <USBD_StdDevReq+0x26a>
          pdev->dev_config = cfgidx;
 8006382:	2101      	movs	r1, #1
 8006384:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006386:	2303      	movs	r3, #3
 8006388:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800638c:	f7ff fd81 	bl	8005e92 <USBD_SetClassConfig>
 8006390:	2802      	cmp	r0, #2
 8006392:	d003      	beq.n	800639c <USBD_StdDevReq+0x260>
          USBD_CtlSendStatus(pdev);
 8006394:	4628      	mov	r0, r5
 8006396:	f000 f9e1 	bl	800675c <USBD_CtlSendStatus>
 800639a:	e6e4      	b.n	8006166 <USBD_StdDevReq+0x2a>
            USBD_CtlError(pdev, req);
 800639c:	4621      	mov	r1, r4
 800639e:	4628      	mov	r0, r5
 80063a0:	f7ff fec2 	bl	8006128 <USBD_CtlError>
            return;
 80063a4:	e6df      	b.n	8006166 <USBD_StdDevReq+0x2a>
          USBD_CtlSendStatus(pdev);
 80063a6:	f000 f9d9 	bl	800675c <USBD_CtlSendStatus>
 80063aa:	e6dc      	b.n	8006166 <USBD_StdDevReq+0x2a>
        if (cfgidx == 0U)
 80063ac:	b18b      	cbz	r3, 80063d2 <USBD_StdDevReq+0x296>
        else if (cfgidx != pdev->dev_config)
 80063ae:	6841      	ldr	r1, [r0, #4]
 80063b0:	2901      	cmp	r1, #1
 80063b2:	d01e      	beq.n	80063f2 <USBD_StdDevReq+0x2b6>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80063b4:	b2c9      	uxtb	r1, r1
 80063b6:	f7ff fd78 	bl	8005eaa <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80063ba:	4b3c      	ldr	r3, [pc, #240]	; (80064ac <USBD_StdDevReq+0x370>)
 80063bc:	7819      	ldrb	r1, [r3, #0]
 80063be:	6069      	str	r1, [r5, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80063c0:	4628      	mov	r0, r5
 80063c2:	f7ff fd66 	bl	8005e92 <USBD_SetClassConfig>
 80063c6:	2802      	cmp	r0, #2
 80063c8:	d00e      	beq.n	80063e8 <USBD_StdDevReq+0x2ac>
          USBD_CtlSendStatus(pdev);
 80063ca:	4628      	mov	r0, r5
 80063cc:	f000 f9c6 	bl	800675c <USBD_CtlSendStatus>
 80063d0:	e6c9      	b.n	8006166 <USBD_StdDevReq+0x2a>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80063d2:	2302      	movs	r3, #2
 80063d4:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80063d8:	2100      	movs	r1, #0
 80063da:	6041      	str	r1, [r0, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80063dc:	f7ff fd65 	bl	8005eaa <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80063e0:	4628      	mov	r0, r5
 80063e2:	f000 f9bb 	bl	800675c <USBD_CtlSendStatus>
 80063e6:	e6be      	b.n	8006166 <USBD_StdDevReq+0x2a>
            USBD_CtlError(pdev, req);
 80063e8:	4621      	mov	r1, r4
 80063ea:	4628      	mov	r0, r5
 80063ec:	f7ff fe9c 	bl	8006128 <USBD_CtlError>
            return;
 80063f0:	e6b9      	b.n	8006166 <USBD_StdDevReq+0x2a>
          USBD_CtlSendStatus(pdev);
 80063f2:	f000 f9b3 	bl	800675c <USBD_CtlSendStatus>
 80063f6:	e6b6      	b.n	8006166 <USBD_StdDevReq+0x2a>
  if (req->wLength != 1U)
 80063f8:	88cb      	ldrh	r3, [r1, #6]
 80063fa:	2b01      	cmp	r3, #1
 80063fc:	d10a      	bne.n	8006414 <USBD_StdDevReq+0x2d8>
    switch (pdev->dev_state)
 80063fe:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006402:	2b02      	cmp	r3, #2
 8006404:	d909      	bls.n	800641a <USBD_StdDevReq+0x2de>
 8006406:	2b03      	cmp	r3, #3
 8006408:	d108      	bne.n	800641c <USBD_StdDevReq+0x2e0>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800640a:	2201      	movs	r2, #1
 800640c:	1d01      	adds	r1, r0, #4
 800640e:	f000 f979 	bl	8006704 <USBD_CtlSendData>
        break;
 8006412:	e6a8      	b.n	8006166 <USBD_StdDevReq+0x2a>
    USBD_CtlError(pdev, req);
 8006414:	f7ff fe88 	bl	8006128 <USBD_CtlError>
 8006418:	e6a5      	b.n	8006166 <USBD_StdDevReq+0x2a>
    switch (pdev->dev_state)
 800641a:	b923      	cbnz	r3, 8006426 <USBD_StdDevReq+0x2ea>
        USBD_CtlError(pdev, req);
 800641c:	4621      	mov	r1, r4
 800641e:	4628      	mov	r0, r5
 8006420:	f7ff fe82 	bl	8006128 <USBD_CtlError>
        break;
 8006424:	e69f      	b.n	8006166 <USBD_StdDevReq+0x2a>
        pdev->dev_default_config = 0U;
 8006426:	4601      	mov	r1, r0
 8006428:	2300      	movs	r3, #0
 800642a:	f841 3f08 	str.w	r3, [r1, #8]!
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800642e:	2201      	movs	r2, #1
 8006430:	f000 f968 	bl	8006704 <USBD_CtlSendData>
        break;
 8006434:	e697      	b.n	8006166 <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 8006436:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800643a:	3b01      	subs	r3, #1
 800643c:	2b02      	cmp	r3, #2
 800643e:	d813      	bhi.n	8006468 <USBD_StdDevReq+0x32c>
      if (req->wLength != 0x2U)
 8006440:	88cb      	ldrh	r3, [r1, #6]
 8006442:	2b02      	cmp	r3, #2
 8006444:	d10d      	bne.n	8006462 <USBD_StdDevReq+0x326>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006446:	2301      	movs	r3, #1
 8006448:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup)
 800644a:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 800644e:	b10b      	cbz	r3, 8006454 <USBD_StdDevReq+0x318>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006450:	2303      	movs	r3, #3
 8006452:	60c3      	str	r3, [r0, #12]
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006454:	2202      	movs	r2, #2
 8006456:	f105 010c 	add.w	r1, r5, #12
 800645a:	4628      	mov	r0, r5
 800645c:	f000 f952 	bl	8006704 <USBD_CtlSendData>
      break;
 8006460:	e681      	b.n	8006166 <USBD_StdDevReq+0x2a>
        USBD_CtlError(pdev, req);
 8006462:	f7ff fe61 	bl	8006128 <USBD_CtlError>
        break;
 8006466:	e67e      	b.n	8006166 <USBD_StdDevReq+0x2a>
      USBD_CtlError(pdev, req);
 8006468:	f7ff fe5e 	bl	8006128 <USBD_CtlError>
      break;
 800646c:	e67b      	b.n	8006166 <USBD_StdDevReq+0x2a>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800646e:	884b      	ldrh	r3, [r1, #2]
 8006470:	2b01      	cmp	r3, #1
 8006472:	f47f ae78 	bne.w	8006166 <USBD_StdDevReq+0x2a>
    pdev->dev_remote_wakeup = 1U;
 8006476:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800647a:	f000 f96f 	bl	800675c <USBD_CtlSendStatus>
 800647e:	e672      	b.n	8006166 <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 8006480:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006484:	3b01      	subs	r3, #1
 8006486:	2b02      	cmp	r3, #2
 8006488:	d809      	bhi.n	800649e <USBD_StdDevReq+0x362>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800648a:	884b      	ldrh	r3, [r1, #2]
 800648c:	2b01      	cmp	r3, #1
 800648e:	f47f ae6a 	bne.w	8006166 <USBD_StdDevReq+0x2a>
        pdev->dev_remote_wakeup = 0U;
 8006492:	2300      	movs	r3, #0
 8006494:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8006498:	f000 f960 	bl	800675c <USBD_CtlSendStatus>
 800649c:	e663      	b.n	8006166 <USBD_StdDevReq+0x2a>
      USBD_CtlError(pdev, req);
 800649e:	f7ff fe43 	bl	8006128 <USBD_CtlError>
      break;
 80064a2:	e660      	b.n	8006166 <USBD_StdDevReq+0x2a>
          USBD_CtlError(pdev, req);
 80064a4:	f7ff fe40 	bl	8006128 <USBD_CtlError>
          break;
 80064a8:	e65d      	b.n	8006166 <USBD_StdDevReq+0x2a>
 80064aa:	bf00      	nop
 80064ac:	20001828 	.word	0x20001828

080064b0 <USBD_StdItfReq>:
{
 80064b0:	b538      	push	{r3, r4, r5, lr}
 80064b2:	4605      	mov	r5, r0
 80064b4:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80064b6:	780b      	ldrb	r3, [r1, #0]
 80064b8:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80064bc:	2a40      	cmp	r2, #64	; 0x40
 80064be:	d006      	beq.n	80064ce <USBD_StdItfReq+0x1e>
 80064c0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80064c4:	d003      	beq.n	80064ce <USBD_StdItfReq+0x1e>
      USBD_CtlError(pdev, req);
 80064c6:	f7ff fe2f 	bl	8006128 <USBD_CtlError>
}
 80064ca:	2000      	movs	r0, #0
 80064cc:	bd38      	pop	{r3, r4, r5, pc}
      switch (pdev->dev_state)
 80064ce:	f895 329c 	ldrb.w	r3, [r5, #668]	; 0x29c
 80064d2:	3b01      	subs	r3, #1
 80064d4:	2b02      	cmp	r3, #2
 80064d6:	d816      	bhi.n	8006506 <USBD_StdItfReq+0x56>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80064d8:	7923      	ldrb	r3, [r4, #4]
 80064da:	2b01      	cmp	r3, #1
 80064dc:	d80e      	bhi.n	80064fc <USBD_StdItfReq+0x4c>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80064de:	f8d5 32b4 	ldr.w	r3, [r5, #692]	; 0x2b4
 80064e2:	689b      	ldr	r3, [r3, #8]
 80064e4:	4621      	mov	r1, r4
 80064e6:	4628      	mov	r0, r5
 80064e8:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 80064ea:	88e3      	ldrh	r3, [r4, #6]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d1ec      	bne.n	80064ca <USBD_StdItfReq+0x1a>
 80064f0:	2800      	cmp	r0, #0
 80064f2:	d1ea      	bne.n	80064ca <USBD_StdItfReq+0x1a>
              USBD_CtlSendStatus(pdev);
 80064f4:	4628      	mov	r0, r5
 80064f6:	f000 f931 	bl	800675c <USBD_CtlSendStatus>
 80064fa:	e7e6      	b.n	80064ca <USBD_StdItfReq+0x1a>
            USBD_CtlError(pdev, req);
 80064fc:	4621      	mov	r1, r4
 80064fe:	4628      	mov	r0, r5
 8006500:	f7ff fe12 	bl	8006128 <USBD_CtlError>
 8006504:	e7e1      	b.n	80064ca <USBD_StdItfReq+0x1a>
          USBD_CtlError(pdev, req);
 8006506:	4621      	mov	r1, r4
 8006508:	4628      	mov	r0, r5
 800650a:	f7ff fe0d 	bl	8006128 <USBD_CtlError>
          break;
 800650e:	e7dc      	b.n	80064ca <USBD_StdItfReq+0x1a>

08006510 <USBD_StdEPReq>:
{
 8006510:	b538      	push	{r3, r4, r5, lr}
 8006512:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006514:	780b      	ldrb	r3, [r1, #0]
 8006516:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800651a:	2b20      	cmp	r3, #32
 800651c:	d005      	beq.n	800652a <USBD_StdEPReq+0x1a>
 800651e:	2b40      	cmp	r3, #64	; 0x40
 8006520:	d003      	beq.n	800652a <USBD_StdEPReq+0x1a>
 8006522:	b14b      	cbz	r3, 8006538 <USBD_StdEPReq+0x28>
      USBD_CtlError(pdev, req);
 8006524:	f7ff fe00 	bl	8006128 <USBD_CtlError>
      break;
 8006528:	e004      	b.n	8006534 <USBD_StdEPReq+0x24>
      pdev->pClass->Setup(pdev, req);
 800652a:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 800652e:	689b      	ldr	r3, [r3, #8]
 8006530:	4620      	mov	r0, r4
 8006532:	4798      	blx	r3
}
 8006534:	2000      	movs	r0, #0
 8006536:	bd38      	pop	{r3, r4, r5, pc}
  ep_addr  = LOBYTE(req->wIndex);
 8006538:	888a      	ldrh	r2, [r1, #4]
 800653a:	b2d0      	uxtb	r0, r2
      switch (req->bRequest)
 800653c:	784b      	ldrb	r3, [r1, #1]
 800653e:	2b01      	cmp	r3, #1
 8006540:	d031      	beq.n	80065a6 <USBD_StdEPReq+0x96>
 8006542:	2b03      	cmp	r3, #3
 8006544:	d005      	beq.n	8006552 <USBD_StdEPReq+0x42>
 8006546:	2b00      	cmp	r3, #0
 8006548:	d056      	beq.n	80065f8 <USBD_StdEPReq+0xe8>
          USBD_CtlError(pdev, req);
 800654a:	4620      	mov	r0, r4
 800654c:	f7ff fdec 	bl	8006128 <USBD_CtlError>
          break;
 8006550:	e7f0      	b.n	8006534 <USBD_StdEPReq+0x24>
          switch (pdev->dev_state)
 8006552:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8006556:	2b02      	cmp	r3, #2
 8006558:	d005      	beq.n	8006566 <USBD_StdEPReq+0x56>
 800655a:	2b03      	cmp	r3, #3
 800655c:	d013      	beq.n	8006586 <USBD_StdEPReq+0x76>
              USBD_CtlError(pdev, req);
 800655e:	4620      	mov	r0, r4
 8006560:	f7ff fde2 	bl	8006128 <USBD_CtlError>
              break;
 8006564:	e7e6      	b.n	8006534 <USBD_StdEPReq+0x24>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006566:	f010 0f7f 	tst.w	r0, #127	; 0x7f
 800656a:	d008      	beq.n	800657e <USBD_StdEPReq+0x6e>
                USBD_LL_StallEP(pdev, ep_addr);
 800656c:	4601      	mov	r1, r0
 800656e:	4620      	mov	r0, r4
 8006570:	f000 fab7 	bl	8006ae2 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006574:	2180      	movs	r1, #128	; 0x80
 8006576:	4620      	mov	r0, r4
 8006578:	f000 fab3 	bl	8006ae2 <USBD_LL_StallEP>
 800657c:	e7da      	b.n	8006534 <USBD_StdEPReq+0x24>
                USBD_CtlError(pdev, req);
 800657e:	4620      	mov	r0, r4
 8006580:	f7ff fdd2 	bl	8006128 <USBD_CtlError>
 8006584:	e7d6      	b.n	8006534 <USBD_StdEPReq+0x24>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006586:	884b      	ldrh	r3, [r1, #2]
 8006588:	b923      	cbnz	r3, 8006594 <USBD_StdEPReq+0x84>
                if ((ep_addr != 0x00U) &&
 800658a:	f010 0f7f 	tst.w	r0, #127	; 0x7f
 800658e:	d001      	beq.n	8006594 <USBD_StdEPReq+0x84>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006590:	88cb      	ldrh	r3, [r1, #6]
 8006592:	b11b      	cbz	r3, 800659c <USBD_StdEPReq+0x8c>
              USBD_CtlSendStatus(pdev);
 8006594:	4620      	mov	r0, r4
 8006596:	f000 f8e1 	bl	800675c <USBD_CtlSendStatus>
              break;
 800659a:	e7cb      	b.n	8006534 <USBD_StdEPReq+0x24>
                  USBD_LL_StallEP(pdev, ep_addr);
 800659c:	4601      	mov	r1, r0
 800659e:	4620      	mov	r0, r4
 80065a0:	f000 fa9f 	bl	8006ae2 <USBD_LL_StallEP>
 80065a4:	e7f6      	b.n	8006594 <USBD_StdEPReq+0x84>
          switch (pdev->dev_state)
 80065a6:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 80065aa:	2b02      	cmp	r3, #2
 80065ac:	d005      	beq.n	80065ba <USBD_StdEPReq+0xaa>
 80065ae:	2b03      	cmp	r3, #3
 80065b0:	d013      	beq.n	80065da <USBD_StdEPReq+0xca>
              USBD_CtlError(pdev, req);
 80065b2:	4620      	mov	r0, r4
 80065b4:	f7ff fdb8 	bl	8006128 <USBD_CtlError>
              break;
 80065b8:	e7bc      	b.n	8006534 <USBD_StdEPReq+0x24>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80065ba:	f010 0f7f 	tst.w	r0, #127	; 0x7f
 80065be:	d008      	beq.n	80065d2 <USBD_StdEPReq+0xc2>
                USBD_LL_StallEP(pdev, ep_addr);
 80065c0:	4601      	mov	r1, r0
 80065c2:	4620      	mov	r0, r4
 80065c4:	f000 fa8d 	bl	8006ae2 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80065c8:	2180      	movs	r1, #128	; 0x80
 80065ca:	4620      	mov	r0, r4
 80065cc:	f000 fa89 	bl	8006ae2 <USBD_LL_StallEP>
 80065d0:	e7b0      	b.n	8006534 <USBD_StdEPReq+0x24>
                USBD_CtlError(pdev, req);
 80065d2:	4620      	mov	r0, r4
 80065d4:	f7ff fda8 	bl	8006128 <USBD_CtlError>
 80065d8:	e7ac      	b.n	8006534 <USBD_StdEPReq+0x24>
              if (req->wValue == USB_FEATURE_EP_HALT)
 80065da:	884b      	ldrh	r3, [r1, #2]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d1a9      	bne.n	8006534 <USBD_StdEPReq+0x24>
                if ((ep_addr & 0x7FU) != 0x00U)
 80065e0:	f010 0f7f 	tst.w	r0, #127	; 0x7f
 80065e4:	d103      	bne.n	80065ee <USBD_StdEPReq+0xde>
                USBD_CtlSendStatus(pdev);
 80065e6:	4620      	mov	r0, r4
 80065e8:	f000 f8b8 	bl	800675c <USBD_CtlSendStatus>
 80065ec:	e7a2      	b.n	8006534 <USBD_StdEPReq+0x24>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80065ee:	4601      	mov	r1, r0
 80065f0:	4620      	mov	r0, r4
 80065f2:	f000 fa7e 	bl	8006af2 <USBD_LL_ClearStallEP>
 80065f6:	e7f6      	b.n	80065e6 <USBD_StdEPReq+0xd6>
          switch (pdev->dev_state)
 80065f8:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 80065fc:	2b02      	cmp	r3, #2
 80065fe:	d005      	beq.n	800660c <USBD_StdEPReq+0xfc>
 8006600:	2b03      	cmp	r3, #3
 8006602:	d018      	beq.n	8006636 <USBD_StdEPReq+0x126>
              USBD_CtlError(pdev, req);
 8006604:	4620      	mov	r0, r4
 8006606:	f7ff fd8f 	bl	8006128 <USBD_CtlError>
              break;
 800660a:	e793      	b.n	8006534 <USBD_StdEPReq+0x24>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800660c:	f010 0f7f 	tst.w	r0, #127	; 0x7f
 8006610:	d003      	beq.n	800661a <USBD_StdEPReq+0x10a>
                USBD_CtlError(pdev, req);
 8006612:	4620      	mov	r0, r4
 8006614:	f7ff fd88 	bl	8006128 <USBD_CtlError>
                break;
 8006618:	e78c      	b.n	8006534 <USBD_StdEPReq+0x24>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800661a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800661e:	bf14      	ite	ne
 8006620:	f104 0114 	addne.w	r1, r4, #20
 8006624:	f504 71aa 	addeq.w	r1, r4, #340	; 0x154
              pep->status = 0x0000U;
 8006628:	2300      	movs	r3, #0
 800662a:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800662c:	2202      	movs	r2, #2
 800662e:	4620      	mov	r0, r4
 8006630:	f000 f868 	bl	8006704 <USBD_CtlSendData>
              break;
 8006634:	e77e      	b.n	8006534 <USBD_StdEPReq+0x24>
              if ((ep_addr & 0x80U) == 0x80U)
 8006636:	f012 0f80 	tst.w	r2, #128	; 0x80
 800663a:	d11b      	bne.n	8006674 <USBD_StdEPReq+0x164>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800663c:	f000 030f 	and.w	r3, r0, #15
 8006640:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006644:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006648:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800664c:	b333      	cbz	r3, 800669c <USBD_StdEPReq+0x18c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800664e:	f000 037f 	and.w	r3, r0, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006652:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006656:	eb04 0583 	add.w	r5, r4, r3, lsl #2
 800665a:	f505 75aa 	add.w	r5, r5, #340	; 0x154
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800665e:	f010 0f7f 	tst.w	r0, #127	; 0x7f
 8006662:	d11f      	bne.n	80066a4 <USBD_StdEPReq+0x194>
                pep->status = 0x0000U;
 8006664:	2300      	movs	r3, #0
 8006666:	602b      	str	r3, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006668:	2202      	movs	r2, #2
 800666a:	4629      	mov	r1, r5
 800666c:	4620      	mov	r0, r4
 800666e:	f000 f849 	bl	8006704 <USBD_CtlSendData>
              break;
 8006672:	e75f      	b.n	8006534 <USBD_StdEPReq+0x24>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006674:	f000 030f 	and.w	r3, r0, #15
 8006678:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800667c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006680:	699b      	ldr	r3, [r3, #24]
 8006682:	b13b      	cbz	r3, 8006694 <USBD_StdEPReq+0x184>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006684:	f000 057f 	and.w	r5, r0, #127	; 0x7f
 8006688:	3501      	adds	r5, #1
 800668a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800668e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8006692:	e7e4      	b.n	800665e <USBD_StdEPReq+0x14e>
                  USBD_CtlError(pdev, req);
 8006694:	4620      	mov	r0, r4
 8006696:	f7ff fd47 	bl	8006128 <USBD_CtlError>
                  break;
 800669a:	e74b      	b.n	8006534 <USBD_StdEPReq+0x24>
                  USBD_CtlError(pdev, req);
 800669c:	4620      	mov	r0, r4
 800669e:	f7ff fd43 	bl	8006128 <USBD_CtlError>
                  break;
 80066a2:	e747      	b.n	8006534 <USBD_StdEPReq+0x24>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80066a4:	4601      	mov	r1, r0
 80066a6:	4620      	mov	r0, r4
 80066a8:	f000 fa2b 	bl	8006b02 <USBD_LL_IsStallEP>
 80066ac:	b110      	cbz	r0, 80066b4 <USBD_StdEPReq+0x1a4>
                pep->status = 0x0001U;
 80066ae:	2301      	movs	r3, #1
 80066b0:	602b      	str	r3, [r5, #0]
 80066b2:	e7d9      	b.n	8006668 <USBD_StdEPReq+0x158>
                pep->status = 0x0000U;
 80066b4:	2300      	movs	r3, #0
 80066b6:	602b      	str	r3, [r5, #0]
 80066b8:	e7d6      	b.n	8006668 <USBD_StdEPReq+0x158>

080066ba <USBD_GetString>:
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;

  if (desc != NULL)
 80066ba:	b310      	cbz	r0, 8006702 <USBD_GetString+0x48>
{
 80066bc:	b510      	push	{r4, lr}
 80066be:	4684      	mov	ip, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 80066c0:	7803      	ldrb	r3, [r0, #0]
 80066c2:	b143      	cbz	r3, 80066d6 <USBD_GetString+0x1c>
 80066c4:	f1c0 0e01 	rsb	lr, r0, #1
  {
    len++;
 80066c8:	eb00 030e 	add.w	r3, r0, lr
 80066cc:	b2db      	uxtb	r3, r3
  while (*buf != '\0')
 80066ce:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 80066d2:	2c00      	cmp	r4, #0
 80066d4:	d1f8      	bne.n	80066c8 <USBD_GetString+0xe>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80066d6:	005b      	lsls	r3, r3, #1
 80066d8:	3302      	adds	r3, #2
 80066da:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80066dc:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80066de:	2303      	movs	r3, #3
 80066e0:	704b      	strb	r3, [r1, #1]
    while (*desc != '\0')
 80066e2:	f89c 0000 	ldrb.w	r0, [ip]
 80066e6:	b158      	cbz	r0, 8006700 <USBD_GetString+0x46>
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80066e8:	2302      	movs	r3, #2
      unicode[idx++] =  0U;
 80066ea:	2400      	movs	r4, #0
      unicode[idx++] = *desc++;
 80066ec:	1c5a      	adds	r2, r3, #1
 80066ee:	b2d2      	uxtb	r2, r2
 80066f0:	54c8      	strb	r0, [r1, r3]
      unicode[idx++] =  0U;
 80066f2:	3302      	adds	r3, #2
 80066f4:	b2db      	uxtb	r3, r3
 80066f6:	548c      	strb	r4, [r1, r2]
    while (*desc != '\0')
 80066f8:	f81c 0f01 	ldrb.w	r0, [ip, #1]!
 80066fc:	2800      	cmp	r0, #0
 80066fe:	d1f5      	bne.n	80066ec <USBD_GetString+0x32>
}
 8006700:	bd10      	pop	{r4, pc}
 8006702:	4770      	bx	lr

08006704 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8006704:	b508      	push	{r3, lr}
 8006706:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006708:	2202      	movs	r2, #2
 800670a:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800670e:	61c3      	str	r3, [r0, #28]
  pdev->ep_in[0].rem_length   = len;
 8006710:	6203      	str	r3, [r0, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006712:	460a      	mov	r2, r1
 8006714:	2100      	movs	r1, #0
 8006716:	f000 fa13 	bl	8006b40 <USBD_LL_Transmit>

  return USBD_OK;
}
 800671a:	2000      	movs	r0, #0
 800671c:	bd08      	pop	{r3, pc}

0800671e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800671e:	b508      	push	{r3, lr}
 8006720:	4613      	mov	r3, r2
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006722:	460a      	mov	r2, r1
 8006724:	2100      	movs	r1, #0
 8006726:	f000 fa0b 	bl	8006b40 <USBD_LL_Transmit>

  return USBD_OK;
}
 800672a:	2000      	movs	r0, #0
 800672c:	bd08      	pop	{r3, pc}

0800672e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800672e:	b508      	push	{r3, lr}
 8006730:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006732:	2203      	movs	r2, #3
 8006734:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006738:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800673c:	f8c0 3160 	str.w	r3, [r0, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006740:	460a      	mov	r2, r1
 8006742:	2100      	movs	r1, #0
 8006744:	f000 fa04 	bl	8006b50 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8006748:	2000      	movs	r0, #0
 800674a:	bd08      	pop	{r3, pc}

0800674c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800674c:	b508      	push	{r3, lr}
 800674e:	4613      	mov	r3, r2
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006750:	460a      	mov	r2, r1
 8006752:	2100      	movs	r1, #0
 8006754:	f000 f9fc 	bl	8006b50 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8006758:	2000      	movs	r0, #0
 800675a:	bd08      	pop	{r3, pc}

0800675c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800675c:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800675e:	2304      	movs	r3, #4
 8006760:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006764:	2300      	movs	r3, #0
 8006766:	461a      	mov	r2, r3
 8006768:	4619      	mov	r1, r3
 800676a:	f000 f9e9 	bl	8006b40 <USBD_LL_Transmit>

  return USBD_OK;
}
 800676e:	2000      	movs	r0, #0
 8006770:	bd08      	pop	{r3, pc}

08006772 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006772:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006774:	2305      	movs	r3, #5
 8006776:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800677a:	2300      	movs	r3, #0
 800677c:	461a      	mov	r2, r3
 800677e:	4619      	mov	r1, r3
 8006780:	f000 f9e6 	bl	8006b50 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8006784:	2000      	movs	r0, #0
 8006786:	bd08      	pop	{r3, pc}

08006788 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006788:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800678a:	2200      	movs	r2, #0
 800678c:	490f      	ldr	r1, [pc, #60]	; (80067cc <MX_USB_DEVICE_Init+0x44>)
 800678e:	4810      	ldr	r0, [pc, #64]	; (80067d0 <MX_USB_DEVICE_Init+0x48>)
 8006790:	f7ff fb5c 	bl	8005e4c <USBD_Init>
 8006794:	b970      	cbnz	r0, 80067b4 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006796:	490f      	ldr	r1, [pc, #60]	; (80067d4 <MX_USB_DEVICE_Init+0x4c>)
 8006798:	480d      	ldr	r0, [pc, #52]	; (80067d0 <MX_USB_DEVICE_Init+0x48>)
 800679a:	f7ff fb6e 	bl	8005e7a <USBD_RegisterClass>
 800679e:	b960      	cbnz	r0, 80067ba <MX_USB_DEVICE_Init+0x32>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80067a0:	490d      	ldr	r1, [pc, #52]	; (80067d8 <MX_USB_DEVICE_Init+0x50>)
 80067a2:	480b      	ldr	r0, [pc, #44]	; (80067d0 <MX_USB_DEVICE_Init+0x48>)
 80067a4:	f7ff fb24 	bl	8005df0 <USBD_CDC_RegisterInterface>
 80067a8:	b950      	cbnz	r0, 80067c0 <MX_USB_DEVICE_Init+0x38>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80067aa:	4809      	ldr	r0, [pc, #36]	; (80067d0 <MX_USB_DEVICE_Init+0x48>)
 80067ac:	f7ff fb6c 	bl	8005e88 <USBD_Start>
 80067b0:	b948      	cbnz	r0, 80067c6 <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80067b2:	bd08      	pop	{r3, pc}
    Error_Handler();
 80067b4:	f7fb f848 	bl	8001848 <Error_Handler>
 80067b8:	e7ed      	b.n	8006796 <MX_USB_DEVICE_Init+0xe>
    Error_Handler();
 80067ba:	f7fb f845 	bl	8001848 <Error_Handler>
 80067be:	e7ef      	b.n	80067a0 <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 80067c0:	f7fb f842 	bl	8001848 <Error_Handler>
 80067c4:	e7f1      	b.n	80067aa <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 80067c6:	f7fb f83f 	bl	8001848 <Error_Handler>
}
 80067ca:	e7f2      	b.n	80067b2 <MX_USB_DEVICE_Init+0x2a>
 80067cc:	20000140 	.word	0x20000140
 80067d0:	2000182c 	.word	0x2000182c
 80067d4:	20000018 	.word	0x20000018
 80067d8:	20000128 	.word	0x20000128

080067dc <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 80067dc:	2000      	movs	r0, #0
 80067de:	4770      	bx	lr

080067e0 <CDC_Control_FS>:
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80067e0:	2820      	cmp	r0, #32
 80067e2:	d003      	beq.n	80067ec <CDC_Control_FS+0xc>
 80067e4:	2821      	cmp	r0, #33	; 0x21
 80067e6:	d009      	beq.n	80067fc <CDC_Control_FS+0x1c>
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 80067e8:	2000      	movs	r0, #0
 80067ea:	4770      	bx	lr
    	memcpy(lineCoding, pbuf, sizeof(lineCoding));
 80067ec:	4b07      	ldr	r3, [pc, #28]	; (800680c <CDC_Control_FS+0x2c>)
 80067ee:	6808      	ldr	r0, [r1, #0]
 80067f0:	6018      	str	r0, [r3, #0]
 80067f2:	8888      	ldrh	r0, [r1, #4]
 80067f4:	798a      	ldrb	r2, [r1, #6]
 80067f6:	8098      	strh	r0, [r3, #4]
 80067f8:	719a      	strb	r2, [r3, #6]
    break;
 80067fa:	e7f5      	b.n	80067e8 <CDC_Control_FS+0x8>
    	memcpy(pbuf, lineCoding, sizeof(lineCoding));
 80067fc:	4b03      	ldr	r3, [pc, #12]	; (800680c <CDC_Control_FS+0x2c>)
 80067fe:	6818      	ldr	r0, [r3, #0]
 8006800:	6008      	str	r0, [r1, #0]
 8006802:	889a      	ldrh	r2, [r3, #4]
 8006804:	799b      	ldrb	r3, [r3, #6]
 8006806:	808a      	strh	r2, [r1, #4]
 8006808:	718b      	strb	r3, [r1, #6]
    break;
 800680a:	e7ed      	b.n	80067e8 <CDC_Control_FS+0x8>
 800680c:	20000138 	.word	0x20000138

08006810 <CDC_Init_FS>:
{
 8006810:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006812:	4c06      	ldr	r4, [pc, #24]	; (800682c <CDC_Init_FS+0x1c>)
 8006814:	2200      	movs	r2, #0
 8006816:	4906      	ldr	r1, [pc, #24]	; (8006830 <CDC_Init_FS+0x20>)
 8006818:	4620      	mov	r0, r4
 800681a:	f7ff faf0 	bl	8005dfe <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800681e:	4905      	ldr	r1, [pc, #20]	; (8006834 <CDC_Init_FS+0x24>)
 8006820:	4620      	mov	r0, r4
 8006822:	f7ff faf4 	bl	8005e0e <USBD_CDC_SetRxBuffer>
}
 8006826:	2000      	movs	r0, #0
 8006828:	bd10      	pop	{r4, pc}
 800682a:	bf00      	nop
 800682c:	2000182c 	.word	0x2000182c
 8006830:	20001cf0 	.word	0x20001cf0
 8006834:	20001af0 	.word	0x20001af0

08006838 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006838:	b570      	push	{r4, r5, r6, lr}
 800683a:	4604      	mov	r4, r0
 800683c:	460d      	mov	r5, r1
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800683e:	4e07      	ldr	r6, [pc, #28]	; (800685c <CDC_Receive_FS+0x24>)
 8006840:	4601      	mov	r1, r0
 8006842:	4630      	mov	r0, r6
 8006844:	f7ff fae3 	bl	8005e0e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006848:	4630      	mov	r0, r6
 800684a:	f7ff fae6 	bl	8005e1a <USBD_CDC_ReceivePacket>
  CDC_ReveiveCallback(Buf, Len[0]); // My callback function
 800684e:	7829      	ldrb	r1, [r5, #0]
 8006850:	4620      	mov	r0, r4
 8006852:	f7fa ffb7 	bl	80017c4 <CDC_ReveiveCallback>
  return (USBD_OK);
  /* USER CODE END 6 */
}
 8006856:	2000      	movs	r0, #0
 8006858:	bd70      	pop	{r4, r5, r6, pc}
 800685a:	bf00      	nop
 800685c:	2000182c 	.word	0x2000182c

08006860 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006860:	2312      	movs	r3, #18
 8006862:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 8006864:	4800      	ldr	r0, [pc, #0]	; (8006868 <USBD_FS_DeviceDescriptor+0x8>)
 8006866:	4770      	bx	lr
 8006868:	2000015c 	.word	0x2000015c

0800686c <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800686c:	2304      	movs	r3, #4
 800686e:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 8006870:	4800      	ldr	r0, [pc, #0]	; (8006874 <USBD_FS_LangIDStrDescriptor+0x8>)
 8006872:	4770      	bx	lr
 8006874:	20000170 	.word	0x20000170

08006878 <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 8006878:	b1b2      	cbz	r2, 80068a8 <IntToUnicode+0x30>
 800687a:	1c4b      	adds	r3, r1, #1
 800687c:	f102 3cff 	add.w	ip, r2, #4294967295
 8006880:	fa5f fc8c 	uxtb.w	ip, ip
 8006884:	3103      	adds	r1, #3
 8006886:	eb01 014c 	add.w	r1, r1, ip, lsl #1
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 800688a:	f04f 0c00 	mov.w	ip, #0
    if (((value >> 28)) < 0xA)
 800688e:	0f02      	lsrs	r2, r0, #28
 8006890:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
      pbuf[2 * idx] = (value >> 28) + '0';
 8006894:	bf34      	ite	cc
 8006896:	3230      	addcc	r2, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006898:	3237      	addcs	r2, #55	; 0x37
 800689a:	f803 2c01 	strb.w	r2, [r3, #-1]
    value = value << 4;
 800689e:	0100      	lsls	r0, r0, #4
    pbuf[2 * idx + 1] = 0;
 80068a0:	f803 cb02 	strb.w	ip, [r3], #2
  for (idx = 0; idx < len; idx++)
 80068a4:	428b      	cmp	r3, r1
 80068a6:	d1f2      	bne.n	800688e <IntToUnicode+0x16>
  }
}
 80068a8:	4770      	bx	lr
	...

080068ac <USBD_FS_SerialStrDescriptor>:
{
 80068ac:	b538      	push	{r3, r4, r5, lr}
  *length = USB_SIZ_STRING_SERIAL;
 80068ae:	231a      	movs	r3, #26
 80068b0:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80068b2:	4b0c      	ldr	r3, [pc, #48]	; (80068e4 <USBD_FS_SerialStrDescriptor+0x38>)
 80068b4:	f8d3 07e8 	ldr.w	r0, [r3, #2024]	; 0x7e8
  deviceserial0 += deviceserial2;
 80068b8:	f8d3 37f0 	ldr.w	r3, [r3, #2032]	; 0x7f0
  if (deviceserial0 != 0)
 80068bc:	18c0      	adds	r0, r0, r3
 80068be:	d101      	bne.n	80068c4 <USBD_FS_SerialStrDescriptor+0x18>
}
 80068c0:	4809      	ldr	r0, [pc, #36]	; (80068e8 <USBD_FS_SerialStrDescriptor+0x3c>)
 80068c2:	bd38      	pop	{r3, r4, r5, pc}
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80068c4:	4b07      	ldr	r3, [pc, #28]	; (80068e4 <USBD_FS_SerialStrDescriptor+0x38>)
 80068c6:	f8d3 57ec 	ldr.w	r5, [r3, #2028]	; 0x7ec
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80068ca:	4c07      	ldr	r4, [pc, #28]	; (80068e8 <USBD_FS_SerialStrDescriptor+0x3c>)
 80068cc:	2208      	movs	r2, #8
 80068ce:	1ca1      	adds	r1, r4, #2
 80068d0:	f7ff ffd2 	bl	8006878 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80068d4:	2204      	movs	r2, #4
 80068d6:	f104 0112 	add.w	r1, r4, #18
 80068da:	4628      	mov	r0, r5
 80068dc:	f7ff ffcc 	bl	8006878 <IntToUnicode>
 80068e0:	e7ee      	b.n	80068c0 <USBD_FS_SerialStrDescriptor+0x14>
 80068e2:	bf00      	nop
 80068e4:	1ffff000 	.word	0x1ffff000
 80068e8:	20000174 	.word	0x20000174

080068ec <USBD_FS_ProductStrDescriptor>:
{
 80068ec:	b508      	push	{r3, lr}
 80068ee:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80068f0:	4902      	ldr	r1, [pc, #8]	; (80068fc <USBD_FS_ProductStrDescriptor+0x10>)
 80068f2:	4803      	ldr	r0, [pc, #12]	; (8006900 <USBD_FS_ProductStrDescriptor+0x14>)
 80068f4:	f7ff fee1 	bl	80066ba <USBD_GetString>
}
 80068f8:	4800      	ldr	r0, [pc, #0]	; (80068fc <USBD_FS_ProductStrDescriptor+0x10>)
 80068fa:	bd08      	pop	{r3, pc}
 80068fc:	20001ef0 	.word	0x20001ef0
 8006900:	0800b418 	.word	0x0800b418

08006904 <USBD_FS_ManufacturerStrDescriptor>:
{
 8006904:	b510      	push	{r4, lr}
 8006906:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006908:	4c03      	ldr	r4, [pc, #12]	; (8006918 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 800690a:	4621      	mov	r1, r4
 800690c:	4803      	ldr	r0, [pc, #12]	; (800691c <USBD_FS_ManufacturerStrDescriptor+0x18>)
 800690e:	f7ff fed4 	bl	80066ba <USBD_GetString>
}
 8006912:	4620      	mov	r0, r4
 8006914:	bd10      	pop	{r4, pc}
 8006916:	bf00      	nop
 8006918:	20001ef0 	.word	0x20001ef0
 800691c:	0800b428 	.word	0x0800b428

08006920 <USBD_FS_ConfigStrDescriptor>:
{
 8006920:	b508      	push	{r3, lr}
 8006922:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006924:	4902      	ldr	r1, [pc, #8]	; (8006930 <USBD_FS_ConfigStrDescriptor+0x10>)
 8006926:	4803      	ldr	r0, [pc, #12]	; (8006934 <USBD_FS_ConfigStrDescriptor+0x14>)
 8006928:	f7ff fec7 	bl	80066ba <USBD_GetString>
}
 800692c:	4800      	ldr	r0, [pc, #0]	; (8006930 <USBD_FS_ConfigStrDescriptor+0x10>)
 800692e:	bd08      	pop	{r3, pc}
 8006930:	20001ef0 	.word	0x20001ef0
 8006934:	0800b430 	.word	0x0800b430

08006938 <USBD_FS_InterfaceStrDescriptor>:
{
 8006938:	b508      	push	{r3, lr}
 800693a:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800693c:	4902      	ldr	r1, [pc, #8]	; (8006948 <USBD_FS_InterfaceStrDescriptor+0x10>)
 800693e:	4803      	ldr	r0, [pc, #12]	; (800694c <USBD_FS_InterfaceStrDescriptor+0x14>)
 8006940:	f7ff febb 	bl	80066ba <USBD_GetString>
}
 8006944:	4800      	ldr	r0, [pc, #0]	; (8006948 <USBD_FS_InterfaceStrDescriptor+0x10>)
 8006946:	bd08      	pop	{r3, pc}
 8006948:	20001ef0 	.word	0x20001ef0
 800694c:	0800b43c 	.word	0x0800b43c

08006950 <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 8006950:	b120      	cbz	r0, 800695c <USBD_Get_USB_Status+0xc>
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
    break;
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006952:	2802      	cmp	r0, #2
 8006954:	bf14      	ite	ne
 8006956:	2002      	movne	r0, #2
 8006958:	2001      	moveq	r0, #1
 800695a:	4770      	bx	lr
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 800695c:	4770      	bx	lr
	...

08006960 <HAL_PCD_MspInit>:
  if(pcdHandle->Instance==USB)
 8006960:	6802      	ldr	r2, [r0, #0]
 8006962:	4b09      	ldr	r3, [pc, #36]	; (8006988 <HAL_PCD_MspInit+0x28>)
 8006964:	429a      	cmp	r2, r3
 8006966:	d000      	beq.n	800696a <HAL_PCD_MspInit+0xa>
 8006968:	4770      	bx	lr
{
 800696a:	b082      	sub	sp, #8
    __HAL_RCC_USB_CLK_ENABLE();
 800696c:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8006970:	69da      	ldr	r2, [r3, #28]
 8006972:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8006976:	61da      	str	r2, [r3, #28]
 8006978:	69db      	ldr	r3, [r3, #28]
 800697a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800697e:	9301      	str	r3, [sp, #4]
 8006980:	9b01      	ldr	r3, [sp, #4]
}
 8006982:	b002      	add	sp, #8
 8006984:	4770      	bx	lr
 8006986:	bf00      	nop
 8006988:	40005c00 	.word	0x40005c00

0800698c <HAL_PCD_SetupStageCallback>:
{
 800698c:	b508      	push	{r3, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800698e:	f500 712c 	add.w	r1, r0, #688	; 0x2b0
 8006992:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8006996:	f7ff fa8f 	bl	8005eb8 <USBD_LL_SetupStage>
}
 800699a:	bd08      	pop	{r3, pc}

0800699c <HAL_PCD_DataOutStageCallback>:
{
 800699c:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800699e:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 80069a2:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 80069a6:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 80069aa:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 80069ae:	f7ff fab0 	bl	8005f12 <USBD_LL_DataOutStage>
}
 80069b2:	bd08      	pop	{r3, pc}

080069b4 <HAL_PCD_DataInStageCallback>:
{
 80069b4:	b508      	push	{r3, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80069b6:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 80069ba:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 80069be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80069c0:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 80069c4:	f7ff fae9 	bl	8005f9a <USBD_LL_DataInStage>
}
 80069c8:	bd08      	pop	{r3, pc}

080069ca <HAL_PCD_SOFCallback>:
{
 80069ca:	b508      	push	{r3, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80069cc:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 80069d0:	f7ff fb88 	bl	80060e4 <USBD_LL_SOF>
}
 80069d4:	bd08      	pop	{r3, pc}

080069d6 <HAL_PCD_ResetCallback>:
{
 80069d6:	b510      	push	{r4, lr}
 80069d8:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80069da:	6883      	ldr	r3, [r0, #8]
 80069dc:	2b02      	cmp	r3, #2
 80069de:	d109      	bne.n	80069f4 <HAL_PCD_ResetCallback+0x1e>
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80069e0:	2101      	movs	r1, #1
 80069e2:	f8d4 02e8 	ldr.w	r0, [r4, #744]	; 0x2e8
 80069e6:	f7ff fb67 	bl	80060b8 <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80069ea:	f8d4 02e8 	ldr.w	r0, [r4, #744]	; 0x2e8
 80069ee:	f7ff fb3b 	bl	8006068 <USBD_LL_Reset>
}
 80069f2:	bd10      	pop	{r4, pc}
    Error_Handler();
 80069f4:	f7fa ff28 	bl	8001848 <Error_Handler>
 80069f8:	e7f2      	b.n	80069e0 <HAL_PCD_ResetCallback+0xa>
	...

080069fc <HAL_PCD_SuspendCallback>:
{
 80069fc:	b510      	push	{r4, lr}
 80069fe:	4604      	mov	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006a00:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8006a04:	f7ff fb5b 	bl	80060be <USBD_LL_Suspend>
  if (hpcd->Init.low_power_enable)
 8006a08:	69a3      	ldr	r3, [r4, #24]
 8006a0a:	b123      	cbz	r3, 8006a16 <HAL_PCD_SuspendCallback+0x1a>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006a0c:	4a02      	ldr	r2, [pc, #8]	; (8006a18 <HAL_PCD_SuspendCallback+0x1c>)
 8006a0e:	6913      	ldr	r3, [r2, #16]
 8006a10:	f043 0306 	orr.w	r3, r3, #6
 8006a14:	6113      	str	r3, [r2, #16]
}
 8006a16:	bd10      	pop	{r4, pc}
 8006a18:	e000ed00 	.word	0xe000ed00

08006a1c <HAL_PCD_ResumeCallback>:
{
 8006a1c:	b508      	push	{r3, lr}
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006a1e:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8006a22:	f7ff fb55 	bl	80060d0 <USBD_LL_Resume>
}
 8006a26:	bd08      	pop	{r3, pc}

08006a28 <USBD_LL_Init>:
{
 8006a28:	b510      	push	{r4, lr}
 8006a2a:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 8006a2c:	481d      	ldr	r0, [pc, #116]	; (8006aa4 <USBD_LL_Init+0x7c>)
 8006a2e:	f8c0 42e8 	str.w	r4, [r0, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8006a32:	f8c4 02c0 	str.w	r0, [r4, #704]	; 0x2c0
  hpcd_USB_FS.Instance = USB;
 8006a36:	4b1c      	ldr	r3, [pc, #112]	; (8006aa8 <USBD_LL_Init+0x80>)
 8006a38:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8006a3a:	2308      	movs	r3, #8
 8006a3c:	6043      	str	r3, [r0, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8006a3e:	2302      	movs	r3, #2
 8006a40:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8006a42:	2300      	movs	r3, #0
 8006a44:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8006a46:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8006a48:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8006a4a:	f7fb fec9 	bl	80027e0 <HAL_PCD_Init>
 8006a4e:	bb30      	cbnz	r0, 8006a9e <USBD_LL_Init+0x76>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8006a50:	2318      	movs	r3, #24
 8006a52:	2200      	movs	r2, #0
 8006a54:	4611      	mov	r1, r2
 8006a56:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8006a5a:	f7fc fec1 	bl	80037e0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8006a5e:	2358      	movs	r3, #88	; 0x58
 8006a60:	2200      	movs	r2, #0
 8006a62:	2180      	movs	r1, #128	; 0x80
 8006a64:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8006a68:	f7fc feba 	bl	80037e0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8006a6c:	23c0      	movs	r3, #192	; 0xc0
 8006a6e:	2200      	movs	r2, #0
 8006a70:	2181      	movs	r1, #129	; 0x81
 8006a72:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8006a76:	f7fc feb3 	bl	80037e0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8006a7a:	f44f 7388 	mov.w	r3, #272	; 0x110
 8006a7e:	2200      	movs	r2, #0
 8006a80:	2101      	movs	r1, #1
 8006a82:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8006a86:	f7fc feab 	bl	80037e0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8006a8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006a8e:	2200      	movs	r2, #0
 8006a90:	2182      	movs	r1, #130	; 0x82
 8006a92:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8006a96:	f7fc fea3 	bl	80037e0 <HAL_PCDEx_PMAConfig>
}
 8006a9a:	2000      	movs	r0, #0
 8006a9c:	bd10      	pop	{r4, pc}
    Error_Handler( );
 8006a9e:	f7fa fed3 	bl	8001848 <Error_Handler>
 8006aa2:	e7d5      	b.n	8006a50 <USBD_LL_Init+0x28>
 8006aa4:	200020f0 	.word	0x200020f0
 8006aa8:	40005c00 	.word	0x40005c00

08006aac <USBD_LL_Start>:
{
 8006aac:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8006aae:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8006ab2:	f7fb ff1b 	bl	80028ec <HAL_PCD_Start>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006ab6:	f7ff ff4b 	bl	8006950 <USBD_Get_USB_Status>
}
 8006aba:	bd08      	pop	{r3, pc}

08006abc <USBD_LL_OpenEP>:
{
 8006abc:	b508      	push	{r3, lr}
 8006abe:	4694      	mov	ip, r2
 8006ac0:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006ac2:	4663      	mov	r3, ip
 8006ac4:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8006ac8:	f7fc fd5d 	bl	8003586 <HAL_PCD_EP_Open>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006acc:	f7ff ff40 	bl	8006950 <USBD_Get_USB_Status>
}
 8006ad0:	bd08      	pop	{r3, pc}

08006ad2 <USBD_LL_CloseEP>:
{
 8006ad2:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006ad4:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8006ad8:	f7fc fd95 	bl	8003606 <HAL_PCD_EP_Close>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006adc:	f7ff ff38 	bl	8006950 <USBD_Get_USB_Status>
}
 8006ae0:	bd08      	pop	{r3, pc}

08006ae2 <USBD_LL_StallEP>:
{
 8006ae2:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006ae4:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8006ae8:	f7fc fe03 	bl	80036f2 <HAL_PCD_EP_SetStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006aec:	f7ff ff30 	bl	8006950 <USBD_Get_USB_Status>
}
 8006af0:	bd08      	pop	{r3, pc}

08006af2 <USBD_LL_ClearStallEP>:
{
 8006af2:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006af4:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8006af8:	f7fc fe37 	bl	800376a <HAL_PCD_EP_ClrStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006afc:	f7ff ff28 	bl	8006950 <USBD_Get_USB_Status>
}
 8006b00:	bd08      	pop	{r3, pc}

08006b02 <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006b02:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
  if((ep_addr & 0x80) == 0x80)
 8006b06:	f011 0f80 	tst.w	r1, #128	; 0x80
 8006b0a:	d108      	bne.n	8006b1e <USBD_LL_IsStallEP+0x1c>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006b0c:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8006b10:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8006b14:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8006b18:	f891 016a 	ldrb.w	r0, [r1, #362]	; 0x16a
}
 8006b1c:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006b1e:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8006b22:	3101      	adds	r1, #1
 8006b24:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8006b28:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8006b2c:	7888      	ldrb	r0, [r1, #2]
 8006b2e:	4770      	bx	lr

08006b30 <USBD_LL_SetUSBAddress>:
{
 8006b30:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006b32:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8006b36:	f7fb fef2 	bl	800291e <HAL_PCD_SetAddress>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006b3a:	f7ff ff09 	bl	8006950 <USBD_Get_USB_Status>
}
 8006b3e:	bd08      	pop	{r3, pc}

08006b40 <USBD_LL_Transmit>:
{
 8006b40:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006b42:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8006b46:	f7fc fdb3 	bl	80036b0 <HAL_PCD_EP_Transmit>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006b4a:	f7ff ff01 	bl	8006950 <USBD_Get_USB_Status>
}
 8006b4e:	bd08      	pop	{r3, pc}

08006b50 <USBD_LL_PrepareReceive>:
{
 8006b50:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006b52:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8006b56:	f7fc fd85 	bl	8003664 <HAL_PCD_EP_Receive>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006b5a:	f7ff fef9 	bl	8006950 <USBD_Get_USB_Status>
}
 8006b5e:	bd08      	pop	{r3, pc}

08006b60 <USBD_LL_GetRxDataSize>:
{
 8006b60:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006b62:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8006b66:	f7fc fd9a 	bl	800369e <HAL_PCD_EP_GetRxCount>
}
 8006b6a:	bd08      	pop	{r3, pc}

08006b6c <USBD_static_malloc>:
}
 8006b6c:	4800      	ldr	r0, [pc, #0]	; (8006b70 <USBD_static_malloc+0x4>)
 8006b6e:	4770      	bx	lr
 8006b70:	200023dc 	.word	0x200023dc

08006b74 <USBD_static_free>:
}
 8006b74:	4770      	bx	lr

08006b76 <HAL_PCDEx_SetConnectionState>:
}
 8006b76:	4770      	bx	lr

08006b78 <atof>:
 8006b78:	2100      	movs	r1, #0
 8006b7a:	f001 bae5 	b.w	8008148 <strtod>

08006b7e <atoi>:
 8006b7e:	220a      	movs	r2, #10
 8006b80:	2100      	movs	r1, #0
 8006b82:	f001 bbc5 	b.w	8008310 <strtol>
	...

08006b88 <__errno>:
 8006b88:	4b01      	ldr	r3, [pc, #4]	; (8006b90 <__errno+0x8>)
 8006b8a:	6818      	ldr	r0, [r3, #0]
 8006b8c:	4770      	bx	lr
 8006b8e:	bf00      	nop
 8006b90:	20000190 	.word	0x20000190

08006b94 <__libc_init_array>:
 8006b94:	b570      	push	{r4, r5, r6, lr}
 8006b96:	2600      	movs	r6, #0
 8006b98:	4d0c      	ldr	r5, [pc, #48]	; (8006bcc <__libc_init_array+0x38>)
 8006b9a:	4c0d      	ldr	r4, [pc, #52]	; (8006bd0 <__libc_init_array+0x3c>)
 8006b9c:	1b64      	subs	r4, r4, r5
 8006b9e:	10a4      	asrs	r4, r4, #2
 8006ba0:	42a6      	cmp	r6, r4
 8006ba2:	d109      	bne.n	8006bb8 <__libc_init_array+0x24>
 8006ba4:	f004 fac0 	bl	800b128 <_init>
 8006ba8:	2600      	movs	r6, #0
 8006baa:	4d0a      	ldr	r5, [pc, #40]	; (8006bd4 <__libc_init_array+0x40>)
 8006bac:	4c0a      	ldr	r4, [pc, #40]	; (8006bd8 <__libc_init_array+0x44>)
 8006bae:	1b64      	subs	r4, r4, r5
 8006bb0:	10a4      	asrs	r4, r4, #2
 8006bb2:	42a6      	cmp	r6, r4
 8006bb4:	d105      	bne.n	8006bc2 <__libc_init_array+0x2e>
 8006bb6:	bd70      	pop	{r4, r5, r6, pc}
 8006bb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bbc:	4798      	blx	r3
 8006bbe:	3601      	adds	r6, #1
 8006bc0:	e7ee      	b.n	8006ba0 <__libc_init_array+0xc>
 8006bc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bc6:	4798      	blx	r3
 8006bc8:	3601      	adds	r6, #1
 8006bca:	e7f2      	b.n	8006bb2 <__libc_init_array+0x1e>
 8006bcc:	0800b948 	.word	0x0800b948
 8006bd0:	0800b948 	.word	0x0800b948
 8006bd4:	0800b948 	.word	0x0800b948
 8006bd8:	0800b94c 	.word	0x0800b94c

08006bdc <memcpy>:
 8006bdc:	440a      	add	r2, r1
 8006bde:	4291      	cmp	r1, r2
 8006be0:	f100 33ff 	add.w	r3, r0, #4294967295
 8006be4:	d100      	bne.n	8006be8 <memcpy+0xc>
 8006be6:	4770      	bx	lr
 8006be8:	b510      	push	{r4, lr}
 8006bea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006bee:	4291      	cmp	r1, r2
 8006bf0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006bf4:	d1f9      	bne.n	8006bea <memcpy+0xe>
 8006bf6:	bd10      	pop	{r4, pc}

08006bf8 <memset>:
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	4402      	add	r2, r0
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d100      	bne.n	8006c02 <memset+0xa>
 8006c00:	4770      	bx	lr
 8006c02:	f803 1b01 	strb.w	r1, [r3], #1
 8006c06:	e7f9      	b.n	8006bfc <memset+0x4>

08006c08 <__cvt>:
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c0e:	461f      	mov	r7, r3
 8006c10:	bfbb      	ittet	lt
 8006c12:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8006c16:	461f      	movlt	r7, r3
 8006c18:	2300      	movge	r3, #0
 8006c1a:	232d      	movlt	r3, #45	; 0x2d
 8006c1c:	b088      	sub	sp, #32
 8006c1e:	4614      	mov	r4, r2
 8006c20:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006c22:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006c24:	7013      	strb	r3, [r2, #0]
 8006c26:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006c28:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8006c2c:	f023 0820 	bic.w	r8, r3, #32
 8006c30:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006c34:	d005      	beq.n	8006c42 <__cvt+0x3a>
 8006c36:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006c3a:	d100      	bne.n	8006c3e <__cvt+0x36>
 8006c3c:	3501      	adds	r5, #1
 8006c3e:	2302      	movs	r3, #2
 8006c40:	e000      	b.n	8006c44 <__cvt+0x3c>
 8006c42:	2303      	movs	r3, #3
 8006c44:	aa07      	add	r2, sp, #28
 8006c46:	9204      	str	r2, [sp, #16]
 8006c48:	aa06      	add	r2, sp, #24
 8006c4a:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006c4e:	e9cd 3500 	strd	r3, r5, [sp]
 8006c52:	4622      	mov	r2, r4
 8006c54:	463b      	mov	r3, r7
 8006c56:	f001 fc0f 	bl	8008478 <_dtoa_r>
 8006c5a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006c5e:	4606      	mov	r6, r0
 8006c60:	d102      	bne.n	8006c68 <__cvt+0x60>
 8006c62:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006c64:	07db      	lsls	r3, r3, #31
 8006c66:	d522      	bpl.n	8006cae <__cvt+0xa6>
 8006c68:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006c6c:	eb06 0905 	add.w	r9, r6, r5
 8006c70:	d110      	bne.n	8006c94 <__cvt+0x8c>
 8006c72:	7833      	ldrb	r3, [r6, #0]
 8006c74:	2b30      	cmp	r3, #48	; 0x30
 8006c76:	d10a      	bne.n	8006c8e <__cvt+0x86>
 8006c78:	2200      	movs	r2, #0
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	4620      	mov	r0, r4
 8006c7e:	4639      	mov	r1, r7
 8006c80:	f7f9 fe9c 	bl	80009bc <__aeabi_dcmpeq>
 8006c84:	b918      	cbnz	r0, 8006c8e <__cvt+0x86>
 8006c86:	f1c5 0501 	rsb	r5, r5, #1
 8006c8a:	f8ca 5000 	str.w	r5, [sl]
 8006c8e:	f8da 3000 	ldr.w	r3, [sl]
 8006c92:	4499      	add	r9, r3
 8006c94:	2200      	movs	r2, #0
 8006c96:	2300      	movs	r3, #0
 8006c98:	4620      	mov	r0, r4
 8006c9a:	4639      	mov	r1, r7
 8006c9c:	f7f9 fe8e 	bl	80009bc <__aeabi_dcmpeq>
 8006ca0:	b108      	cbz	r0, 8006ca6 <__cvt+0x9e>
 8006ca2:	f8cd 901c 	str.w	r9, [sp, #28]
 8006ca6:	2230      	movs	r2, #48	; 0x30
 8006ca8:	9b07      	ldr	r3, [sp, #28]
 8006caa:	454b      	cmp	r3, r9
 8006cac:	d307      	bcc.n	8006cbe <__cvt+0xb6>
 8006cae:	4630      	mov	r0, r6
 8006cb0:	9b07      	ldr	r3, [sp, #28]
 8006cb2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006cb4:	1b9b      	subs	r3, r3, r6
 8006cb6:	6013      	str	r3, [r2, #0]
 8006cb8:	b008      	add	sp, #32
 8006cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cbe:	1c59      	adds	r1, r3, #1
 8006cc0:	9107      	str	r1, [sp, #28]
 8006cc2:	701a      	strb	r2, [r3, #0]
 8006cc4:	e7f0      	b.n	8006ca8 <__cvt+0xa0>

08006cc6 <__exponent>:
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006cca:	2900      	cmp	r1, #0
 8006ccc:	f803 2b02 	strb.w	r2, [r3], #2
 8006cd0:	bfb6      	itet	lt
 8006cd2:	222d      	movlt	r2, #45	; 0x2d
 8006cd4:	222b      	movge	r2, #43	; 0x2b
 8006cd6:	4249      	neglt	r1, r1
 8006cd8:	2909      	cmp	r1, #9
 8006cda:	7042      	strb	r2, [r0, #1]
 8006cdc:	dd2b      	ble.n	8006d36 <__exponent+0x70>
 8006cde:	f10d 0407 	add.w	r4, sp, #7
 8006ce2:	46a4      	mov	ip, r4
 8006ce4:	270a      	movs	r7, #10
 8006ce6:	fb91 f6f7 	sdiv	r6, r1, r7
 8006cea:	460a      	mov	r2, r1
 8006cec:	46a6      	mov	lr, r4
 8006cee:	fb07 1516 	mls	r5, r7, r6, r1
 8006cf2:	2a63      	cmp	r2, #99	; 0x63
 8006cf4:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8006cf8:	4631      	mov	r1, r6
 8006cfa:	f104 34ff 	add.w	r4, r4, #4294967295
 8006cfe:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006d02:	dcf0      	bgt.n	8006ce6 <__exponent+0x20>
 8006d04:	3130      	adds	r1, #48	; 0x30
 8006d06:	f1ae 0502 	sub.w	r5, lr, #2
 8006d0a:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006d0e:	4629      	mov	r1, r5
 8006d10:	1c44      	adds	r4, r0, #1
 8006d12:	4561      	cmp	r1, ip
 8006d14:	d30a      	bcc.n	8006d2c <__exponent+0x66>
 8006d16:	f10d 0209 	add.w	r2, sp, #9
 8006d1a:	eba2 020e 	sub.w	r2, r2, lr
 8006d1e:	4565      	cmp	r5, ip
 8006d20:	bf88      	it	hi
 8006d22:	2200      	movhi	r2, #0
 8006d24:	4413      	add	r3, r2
 8006d26:	1a18      	subs	r0, r3, r0
 8006d28:	b003      	add	sp, #12
 8006d2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d2c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006d30:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006d34:	e7ed      	b.n	8006d12 <__exponent+0x4c>
 8006d36:	2330      	movs	r3, #48	; 0x30
 8006d38:	3130      	adds	r1, #48	; 0x30
 8006d3a:	7083      	strb	r3, [r0, #2]
 8006d3c:	70c1      	strb	r1, [r0, #3]
 8006d3e:	1d03      	adds	r3, r0, #4
 8006d40:	e7f1      	b.n	8006d26 <__exponent+0x60>
	...

08006d44 <_printf_float>:
 8006d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d48:	b091      	sub	sp, #68	; 0x44
 8006d4a:	460c      	mov	r4, r1
 8006d4c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8006d50:	4616      	mov	r6, r2
 8006d52:	461f      	mov	r7, r3
 8006d54:	4605      	mov	r5, r0
 8006d56:	f002 fcf5 	bl	8009744 <_localeconv_r>
 8006d5a:	6803      	ldr	r3, [r0, #0]
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	9309      	str	r3, [sp, #36]	; 0x24
 8006d60:	f7f9 fa00 	bl	8000164 <strlen>
 8006d64:	2300      	movs	r3, #0
 8006d66:	930e      	str	r3, [sp, #56]	; 0x38
 8006d68:	f8d8 3000 	ldr.w	r3, [r8]
 8006d6c:	900a      	str	r0, [sp, #40]	; 0x28
 8006d6e:	3307      	adds	r3, #7
 8006d70:	f023 0307 	bic.w	r3, r3, #7
 8006d74:	f103 0208 	add.w	r2, r3, #8
 8006d78:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006d7c:	f8d4 b000 	ldr.w	fp, [r4]
 8006d80:	f8c8 2000 	str.w	r2, [r8]
 8006d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d88:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006d8c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8006d90:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8006d94:	930b      	str	r3, [sp, #44]	; 0x2c
 8006d96:	f04f 32ff 	mov.w	r2, #4294967295
 8006d9a:	4640      	mov	r0, r8
 8006d9c:	4b9c      	ldr	r3, [pc, #624]	; (8007010 <_printf_float+0x2cc>)
 8006d9e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006da0:	f7f9 fe3e 	bl	8000a20 <__aeabi_dcmpun>
 8006da4:	bb70      	cbnz	r0, 8006e04 <_printf_float+0xc0>
 8006da6:	f04f 32ff 	mov.w	r2, #4294967295
 8006daa:	4640      	mov	r0, r8
 8006dac:	4b98      	ldr	r3, [pc, #608]	; (8007010 <_printf_float+0x2cc>)
 8006dae:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006db0:	f7f9 fe18 	bl	80009e4 <__aeabi_dcmple>
 8006db4:	bb30      	cbnz	r0, 8006e04 <_printf_float+0xc0>
 8006db6:	2200      	movs	r2, #0
 8006db8:	2300      	movs	r3, #0
 8006dba:	4640      	mov	r0, r8
 8006dbc:	4651      	mov	r1, sl
 8006dbe:	f7f9 fe07 	bl	80009d0 <__aeabi_dcmplt>
 8006dc2:	b110      	cbz	r0, 8006dca <_printf_float+0x86>
 8006dc4:	232d      	movs	r3, #45	; 0x2d
 8006dc6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006dca:	4b92      	ldr	r3, [pc, #584]	; (8007014 <_printf_float+0x2d0>)
 8006dcc:	4892      	ldr	r0, [pc, #584]	; (8007018 <_printf_float+0x2d4>)
 8006dce:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006dd2:	bf94      	ite	ls
 8006dd4:	4698      	movls	r8, r3
 8006dd6:	4680      	movhi	r8, r0
 8006dd8:	2303      	movs	r3, #3
 8006dda:	f04f 0a00 	mov.w	sl, #0
 8006dde:	6123      	str	r3, [r4, #16]
 8006de0:	f02b 0304 	bic.w	r3, fp, #4
 8006de4:	6023      	str	r3, [r4, #0]
 8006de6:	4633      	mov	r3, r6
 8006de8:	4621      	mov	r1, r4
 8006dea:	4628      	mov	r0, r5
 8006dec:	9700      	str	r7, [sp, #0]
 8006dee:	aa0f      	add	r2, sp, #60	; 0x3c
 8006df0:	f000 f9d4 	bl	800719c <_printf_common>
 8006df4:	3001      	adds	r0, #1
 8006df6:	f040 8090 	bne.w	8006f1a <_printf_float+0x1d6>
 8006dfa:	f04f 30ff 	mov.w	r0, #4294967295
 8006dfe:	b011      	add	sp, #68	; 0x44
 8006e00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e04:	4642      	mov	r2, r8
 8006e06:	4653      	mov	r3, sl
 8006e08:	4640      	mov	r0, r8
 8006e0a:	4651      	mov	r1, sl
 8006e0c:	f7f9 fe08 	bl	8000a20 <__aeabi_dcmpun>
 8006e10:	b148      	cbz	r0, 8006e26 <_printf_float+0xe2>
 8006e12:	f1ba 0f00 	cmp.w	sl, #0
 8006e16:	bfb8      	it	lt
 8006e18:	232d      	movlt	r3, #45	; 0x2d
 8006e1a:	4880      	ldr	r0, [pc, #512]	; (800701c <_printf_float+0x2d8>)
 8006e1c:	bfb8      	it	lt
 8006e1e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006e22:	4b7f      	ldr	r3, [pc, #508]	; (8007020 <_printf_float+0x2dc>)
 8006e24:	e7d3      	b.n	8006dce <_printf_float+0x8a>
 8006e26:	6863      	ldr	r3, [r4, #4]
 8006e28:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006e2c:	1c5a      	adds	r2, r3, #1
 8006e2e:	d142      	bne.n	8006eb6 <_printf_float+0x172>
 8006e30:	2306      	movs	r3, #6
 8006e32:	6063      	str	r3, [r4, #4]
 8006e34:	2200      	movs	r2, #0
 8006e36:	9206      	str	r2, [sp, #24]
 8006e38:	aa0e      	add	r2, sp, #56	; 0x38
 8006e3a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8006e3e:	aa0d      	add	r2, sp, #52	; 0x34
 8006e40:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8006e44:	9203      	str	r2, [sp, #12]
 8006e46:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8006e4a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006e4e:	6023      	str	r3, [r4, #0]
 8006e50:	6863      	ldr	r3, [r4, #4]
 8006e52:	4642      	mov	r2, r8
 8006e54:	9300      	str	r3, [sp, #0]
 8006e56:	4628      	mov	r0, r5
 8006e58:	4653      	mov	r3, sl
 8006e5a:	910b      	str	r1, [sp, #44]	; 0x2c
 8006e5c:	f7ff fed4 	bl	8006c08 <__cvt>
 8006e60:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006e62:	4680      	mov	r8, r0
 8006e64:	2947      	cmp	r1, #71	; 0x47
 8006e66:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006e68:	d108      	bne.n	8006e7c <_printf_float+0x138>
 8006e6a:	1cc8      	adds	r0, r1, #3
 8006e6c:	db02      	blt.n	8006e74 <_printf_float+0x130>
 8006e6e:	6863      	ldr	r3, [r4, #4]
 8006e70:	4299      	cmp	r1, r3
 8006e72:	dd40      	ble.n	8006ef6 <_printf_float+0x1b2>
 8006e74:	f1a9 0902 	sub.w	r9, r9, #2
 8006e78:	fa5f f989 	uxtb.w	r9, r9
 8006e7c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006e80:	d81f      	bhi.n	8006ec2 <_printf_float+0x17e>
 8006e82:	464a      	mov	r2, r9
 8006e84:	3901      	subs	r1, #1
 8006e86:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006e8a:	910d      	str	r1, [sp, #52]	; 0x34
 8006e8c:	f7ff ff1b 	bl	8006cc6 <__exponent>
 8006e90:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006e92:	4682      	mov	sl, r0
 8006e94:	1813      	adds	r3, r2, r0
 8006e96:	2a01      	cmp	r2, #1
 8006e98:	6123      	str	r3, [r4, #16]
 8006e9a:	dc02      	bgt.n	8006ea2 <_printf_float+0x15e>
 8006e9c:	6822      	ldr	r2, [r4, #0]
 8006e9e:	07d2      	lsls	r2, r2, #31
 8006ea0:	d501      	bpl.n	8006ea6 <_printf_float+0x162>
 8006ea2:	3301      	adds	r3, #1
 8006ea4:	6123      	str	r3, [r4, #16]
 8006ea6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d09b      	beq.n	8006de6 <_printf_float+0xa2>
 8006eae:	232d      	movs	r3, #45	; 0x2d
 8006eb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006eb4:	e797      	b.n	8006de6 <_printf_float+0xa2>
 8006eb6:	2947      	cmp	r1, #71	; 0x47
 8006eb8:	d1bc      	bne.n	8006e34 <_printf_float+0xf0>
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d1ba      	bne.n	8006e34 <_printf_float+0xf0>
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	e7b7      	b.n	8006e32 <_printf_float+0xee>
 8006ec2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8006ec6:	d118      	bne.n	8006efa <_printf_float+0x1b6>
 8006ec8:	2900      	cmp	r1, #0
 8006eca:	6863      	ldr	r3, [r4, #4]
 8006ecc:	dd0b      	ble.n	8006ee6 <_printf_float+0x1a2>
 8006ece:	6121      	str	r1, [r4, #16]
 8006ed0:	b913      	cbnz	r3, 8006ed8 <_printf_float+0x194>
 8006ed2:	6822      	ldr	r2, [r4, #0]
 8006ed4:	07d0      	lsls	r0, r2, #31
 8006ed6:	d502      	bpl.n	8006ede <_printf_float+0x19a>
 8006ed8:	3301      	adds	r3, #1
 8006eda:	440b      	add	r3, r1
 8006edc:	6123      	str	r3, [r4, #16]
 8006ede:	f04f 0a00 	mov.w	sl, #0
 8006ee2:	65a1      	str	r1, [r4, #88]	; 0x58
 8006ee4:	e7df      	b.n	8006ea6 <_printf_float+0x162>
 8006ee6:	b913      	cbnz	r3, 8006eee <_printf_float+0x1aa>
 8006ee8:	6822      	ldr	r2, [r4, #0]
 8006eea:	07d2      	lsls	r2, r2, #31
 8006eec:	d501      	bpl.n	8006ef2 <_printf_float+0x1ae>
 8006eee:	3302      	adds	r3, #2
 8006ef0:	e7f4      	b.n	8006edc <_printf_float+0x198>
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	e7f2      	b.n	8006edc <_printf_float+0x198>
 8006ef6:	f04f 0967 	mov.w	r9, #103	; 0x67
 8006efa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006efc:	4299      	cmp	r1, r3
 8006efe:	db05      	blt.n	8006f0c <_printf_float+0x1c8>
 8006f00:	6823      	ldr	r3, [r4, #0]
 8006f02:	6121      	str	r1, [r4, #16]
 8006f04:	07d8      	lsls	r0, r3, #31
 8006f06:	d5ea      	bpl.n	8006ede <_printf_float+0x19a>
 8006f08:	1c4b      	adds	r3, r1, #1
 8006f0a:	e7e7      	b.n	8006edc <_printf_float+0x198>
 8006f0c:	2900      	cmp	r1, #0
 8006f0e:	bfcc      	ite	gt
 8006f10:	2201      	movgt	r2, #1
 8006f12:	f1c1 0202 	rsble	r2, r1, #2
 8006f16:	4413      	add	r3, r2
 8006f18:	e7e0      	b.n	8006edc <_printf_float+0x198>
 8006f1a:	6823      	ldr	r3, [r4, #0]
 8006f1c:	055a      	lsls	r2, r3, #21
 8006f1e:	d407      	bmi.n	8006f30 <_printf_float+0x1ec>
 8006f20:	6923      	ldr	r3, [r4, #16]
 8006f22:	4642      	mov	r2, r8
 8006f24:	4631      	mov	r1, r6
 8006f26:	4628      	mov	r0, r5
 8006f28:	47b8      	blx	r7
 8006f2a:	3001      	adds	r0, #1
 8006f2c:	d12b      	bne.n	8006f86 <_printf_float+0x242>
 8006f2e:	e764      	b.n	8006dfa <_printf_float+0xb6>
 8006f30:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006f34:	f240 80dd 	bls.w	80070f2 <_printf_float+0x3ae>
 8006f38:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	2300      	movs	r3, #0
 8006f40:	f7f9 fd3c 	bl	80009bc <__aeabi_dcmpeq>
 8006f44:	2800      	cmp	r0, #0
 8006f46:	d033      	beq.n	8006fb0 <_printf_float+0x26c>
 8006f48:	2301      	movs	r3, #1
 8006f4a:	4631      	mov	r1, r6
 8006f4c:	4628      	mov	r0, r5
 8006f4e:	4a35      	ldr	r2, [pc, #212]	; (8007024 <_printf_float+0x2e0>)
 8006f50:	47b8      	blx	r7
 8006f52:	3001      	adds	r0, #1
 8006f54:	f43f af51 	beq.w	8006dfa <_printf_float+0xb6>
 8006f58:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006f5c:	429a      	cmp	r2, r3
 8006f5e:	db02      	blt.n	8006f66 <_printf_float+0x222>
 8006f60:	6823      	ldr	r3, [r4, #0]
 8006f62:	07d8      	lsls	r0, r3, #31
 8006f64:	d50f      	bpl.n	8006f86 <_printf_float+0x242>
 8006f66:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006f6a:	4631      	mov	r1, r6
 8006f6c:	4628      	mov	r0, r5
 8006f6e:	47b8      	blx	r7
 8006f70:	3001      	adds	r0, #1
 8006f72:	f43f af42 	beq.w	8006dfa <_printf_float+0xb6>
 8006f76:	f04f 0800 	mov.w	r8, #0
 8006f7a:	f104 091a 	add.w	r9, r4, #26
 8006f7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006f80:	3b01      	subs	r3, #1
 8006f82:	4543      	cmp	r3, r8
 8006f84:	dc09      	bgt.n	8006f9a <_printf_float+0x256>
 8006f86:	6823      	ldr	r3, [r4, #0]
 8006f88:	079b      	lsls	r3, r3, #30
 8006f8a:	f100 8102 	bmi.w	8007192 <_printf_float+0x44e>
 8006f8e:	68e0      	ldr	r0, [r4, #12]
 8006f90:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006f92:	4298      	cmp	r0, r3
 8006f94:	bfb8      	it	lt
 8006f96:	4618      	movlt	r0, r3
 8006f98:	e731      	b.n	8006dfe <_printf_float+0xba>
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	464a      	mov	r2, r9
 8006f9e:	4631      	mov	r1, r6
 8006fa0:	4628      	mov	r0, r5
 8006fa2:	47b8      	blx	r7
 8006fa4:	3001      	adds	r0, #1
 8006fa6:	f43f af28 	beq.w	8006dfa <_printf_float+0xb6>
 8006faa:	f108 0801 	add.w	r8, r8, #1
 8006fae:	e7e6      	b.n	8006f7e <_printf_float+0x23a>
 8006fb0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	dc38      	bgt.n	8007028 <_printf_float+0x2e4>
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	4631      	mov	r1, r6
 8006fba:	4628      	mov	r0, r5
 8006fbc:	4a19      	ldr	r2, [pc, #100]	; (8007024 <_printf_float+0x2e0>)
 8006fbe:	47b8      	blx	r7
 8006fc0:	3001      	adds	r0, #1
 8006fc2:	f43f af1a 	beq.w	8006dfa <_printf_float+0xb6>
 8006fc6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006fca:	4313      	orrs	r3, r2
 8006fcc:	d102      	bne.n	8006fd4 <_printf_float+0x290>
 8006fce:	6823      	ldr	r3, [r4, #0]
 8006fd0:	07d9      	lsls	r1, r3, #31
 8006fd2:	d5d8      	bpl.n	8006f86 <_printf_float+0x242>
 8006fd4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006fd8:	4631      	mov	r1, r6
 8006fda:	4628      	mov	r0, r5
 8006fdc:	47b8      	blx	r7
 8006fde:	3001      	adds	r0, #1
 8006fe0:	f43f af0b 	beq.w	8006dfa <_printf_float+0xb6>
 8006fe4:	f04f 0900 	mov.w	r9, #0
 8006fe8:	f104 0a1a 	add.w	sl, r4, #26
 8006fec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006fee:	425b      	negs	r3, r3
 8006ff0:	454b      	cmp	r3, r9
 8006ff2:	dc01      	bgt.n	8006ff8 <_printf_float+0x2b4>
 8006ff4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006ff6:	e794      	b.n	8006f22 <_printf_float+0x1de>
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	4652      	mov	r2, sl
 8006ffc:	4631      	mov	r1, r6
 8006ffe:	4628      	mov	r0, r5
 8007000:	47b8      	blx	r7
 8007002:	3001      	adds	r0, #1
 8007004:	f43f aef9 	beq.w	8006dfa <_printf_float+0xb6>
 8007008:	f109 0901 	add.w	r9, r9, #1
 800700c:	e7ee      	b.n	8006fec <_printf_float+0x2a8>
 800700e:	bf00      	nop
 8007010:	7fefffff 	.word	0x7fefffff
 8007014:	0800b450 	.word	0x0800b450
 8007018:	0800b454 	.word	0x0800b454
 800701c:	0800b45c 	.word	0x0800b45c
 8007020:	0800b458 	.word	0x0800b458
 8007024:	0800b460 	.word	0x0800b460
 8007028:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800702a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800702c:	429a      	cmp	r2, r3
 800702e:	bfa8      	it	ge
 8007030:	461a      	movge	r2, r3
 8007032:	2a00      	cmp	r2, #0
 8007034:	4691      	mov	r9, r2
 8007036:	dc37      	bgt.n	80070a8 <_printf_float+0x364>
 8007038:	f04f 0b00 	mov.w	fp, #0
 800703c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007040:	f104 021a 	add.w	r2, r4, #26
 8007044:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8007048:	ebaa 0309 	sub.w	r3, sl, r9
 800704c:	455b      	cmp	r3, fp
 800704e:	dc33      	bgt.n	80070b8 <_printf_float+0x374>
 8007050:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007054:	429a      	cmp	r2, r3
 8007056:	db3b      	blt.n	80070d0 <_printf_float+0x38c>
 8007058:	6823      	ldr	r3, [r4, #0]
 800705a:	07da      	lsls	r2, r3, #31
 800705c:	d438      	bmi.n	80070d0 <_printf_float+0x38c>
 800705e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007060:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007062:	eba3 020a 	sub.w	r2, r3, sl
 8007066:	eba3 0901 	sub.w	r9, r3, r1
 800706a:	4591      	cmp	r9, r2
 800706c:	bfa8      	it	ge
 800706e:	4691      	movge	r9, r2
 8007070:	f1b9 0f00 	cmp.w	r9, #0
 8007074:	dc34      	bgt.n	80070e0 <_printf_float+0x39c>
 8007076:	f04f 0800 	mov.w	r8, #0
 800707a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800707e:	f104 0a1a 	add.w	sl, r4, #26
 8007082:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007086:	1a9b      	subs	r3, r3, r2
 8007088:	eba3 0309 	sub.w	r3, r3, r9
 800708c:	4543      	cmp	r3, r8
 800708e:	f77f af7a 	ble.w	8006f86 <_printf_float+0x242>
 8007092:	2301      	movs	r3, #1
 8007094:	4652      	mov	r2, sl
 8007096:	4631      	mov	r1, r6
 8007098:	4628      	mov	r0, r5
 800709a:	47b8      	blx	r7
 800709c:	3001      	adds	r0, #1
 800709e:	f43f aeac 	beq.w	8006dfa <_printf_float+0xb6>
 80070a2:	f108 0801 	add.w	r8, r8, #1
 80070a6:	e7ec      	b.n	8007082 <_printf_float+0x33e>
 80070a8:	4613      	mov	r3, r2
 80070aa:	4631      	mov	r1, r6
 80070ac:	4642      	mov	r2, r8
 80070ae:	4628      	mov	r0, r5
 80070b0:	47b8      	blx	r7
 80070b2:	3001      	adds	r0, #1
 80070b4:	d1c0      	bne.n	8007038 <_printf_float+0x2f4>
 80070b6:	e6a0      	b.n	8006dfa <_printf_float+0xb6>
 80070b8:	2301      	movs	r3, #1
 80070ba:	4631      	mov	r1, r6
 80070bc:	4628      	mov	r0, r5
 80070be:	920b      	str	r2, [sp, #44]	; 0x2c
 80070c0:	47b8      	blx	r7
 80070c2:	3001      	adds	r0, #1
 80070c4:	f43f ae99 	beq.w	8006dfa <_printf_float+0xb6>
 80070c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80070ca:	f10b 0b01 	add.w	fp, fp, #1
 80070ce:	e7b9      	b.n	8007044 <_printf_float+0x300>
 80070d0:	4631      	mov	r1, r6
 80070d2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80070d6:	4628      	mov	r0, r5
 80070d8:	47b8      	blx	r7
 80070da:	3001      	adds	r0, #1
 80070dc:	d1bf      	bne.n	800705e <_printf_float+0x31a>
 80070de:	e68c      	b.n	8006dfa <_printf_float+0xb6>
 80070e0:	464b      	mov	r3, r9
 80070e2:	4631      	mov	r1, r6
 80070e4:	4628      	mov	r0, r5
 80070e6:	eb08 020a 	add.w	r2, r8, sl
 80070ea:	47b8      	blx	r7
 80070ec:	3001      	adds	r0, #1
 80070ee:	d1c2      	bne.n	8007076 <_printf_float+0x332>
 80070f0:	e683      	b.n	8006dfa <_printf_float+0xb6>
 80070f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80070f4:	2a01      	cmp	r2, #1
 80070f6:	dc01      	bgt.n	80070fc <_printf_float+0x3b8>
 80070f8:	07db      	lsls	r3, r3, #31
 80070fa:	d537      	bpl.n	800716c <_printf_float+0x428>
 80070fc:	2301      	movs	r3, #1
 80070fe:	4642      	mov	r2, r8
 8007100:	4631      	mov	r1, r6
 8007102:	4628      	mov	r0, r5
 8007104:	47b8      	blx	r7
 8007106:	3001      	adds	r0, #1
 8007108:	f43f ae77 	beq.w	8006dfa <_printf_float+0xb6>
 800710c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007110:	4631      	mov	r1, r6
 8007112:	4628      	mov	r0, r5
 8007114:	47b8      	blx	r7
 8007116:	3001      	adds	r0, #1
 8007118:	f43f ae6f 	beq.w	8006dfa <_printf_float+0xb6>
 800711c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007120:	2200      	movs	r2, #0
 8007122:	2300      	movs	r3, #0
 8007124:	f7f9 fc4a 	bl	80009bc <__aeabi_dcmpeq>
 8007128:	b9d8      	cbnz	r0, 8007162 <_printf_float+0x41e>
 800712a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800712c:	f108 0201 	add.w	r2, r8, #1
 8007130:	3b01      	subs	r3, #1
 8007132:	4631      	mov	r1, r6
 8007134:	4628      	mov	r0, r5
 8007136:	47b8      	blx	r7
 8007138:	3001      	adds	r0, #1
 800713a:	d10e      	bne.n	800715a <_printf_float+0x416>
 800713c:	e65d      	b.n	8006dfa <_printf_float+0xb6>
 800713e:	2301      	movs	r3, #1
 8007140:	464a      	mov	r2, r9
 8007142:	4631      	mov	r1, r6
 8007144:	4628      	mov	r0, r5
 8007146:	47b8      	blx	r7
 8007148:	3001      	adds	r0, #1
 800714a:	f43f ae56 	beq.w	8006dfa <_printf_float+0xb6>
 800714e:	f108 0801 	add.w	r8, r8, #1
 8007152:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007154:	3b01      	subs	r3, #1
 8007156:	4543      	cmp	r3, r8
 8007158:	dcf1      	bgt.n	800713e <_printf_float+0x3fa>
 800715a:	4653      	mov	r3, sl
 800715c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007160:	e6e0      	b.n	8006f24 <_printf_float+0x1e0>
 8007162:	f04f 0800 	mov.w	r8, #0
 8007166:	f104 091a 	add.w	r9, r4, #26
 800716a:	e7f2      	b.n	8007152 <_printf_float+0x40e>
 800716c:	2301      	movs	r3, #1
 800716e:	4642      	mov	r2, r8
 8007170:	e7df      	b.n	8007132 <_printf_float+0x3ee>
 8007172:	2301      	movs	r3, #1
 8007174:	464a      	mov	r2, r9
 8007176:	4631      	mov	r1, r6
 8007178:	4628      	mov	r0, r5
 800717a:	47b8      	blx	r7
 800717c:	3001      	adds	r0, #1
 800717e:	f43f ae3c 	beq.w	8006dfa <_printf_float+0xb6>
 8007182:	f108 0801 	add.w	r8, r8, #1
 8007186:	68e3      	ldr	r3, [r4, #12]
 8007188:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800718a:	1a5b      	subs	r3, r3, r1
 800718c:	4543      	cmp	r3, r8
 800718e:	dcf0      	bgt.n	8007172 <_printf_float+0x42e>
 8007190:	e6fd      	b.n	8006f8e <_printf_float+0x24a>
 8007192:	f04f 0800 	mov.w	r8, #0
 8007196:	f104 0919 	add.w	r9, r4, #25
 800719a:	e7f4      	b.n	8007186 <_printf_float+0x442>

0800719c <_printf_common>:
 800719c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071a0:	4616      	mov	r6, r2
 80071a2:	4699      	mov	r9, r3
 80071a4:	688a      	ldr	r2, [r1, #8]
 80071a6:	690b      	ldr	r3, [r1, #16]
 80071a8:	4607      	mov	r7, r0
 80071aa:	4293      	cmp	r3, r2
 80071ac:	bfb8      	it	lt
 80071ae:	4613      	movlt	r3, r2
 80071b0:	6033      	str	r3, [r6, #0]
 80071b2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80071b6:	460c      	mov	r4, r1
 80071b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80071bc:	b10a      	cbz	r2, 80071c2 <_printf_common+0x26>
 80071be:	3301      	adds	r3, #1
 80071c0:	6033      	str	r3, [r6, #0]
 80071c2:	6823      	ldr	r3, [r4, #0]
 80071c4:	0699      	lsls	r1, r3, #26
 80071c6:	bf42      	ittt	mi
 80071c8:	6833      	ldrmi	r3, [r6, #0]
 80071ca:	3302      	addmi	r3, #2
 80071cc:	6033      	strmi	r3, [r6, #0]
 80071ce:	6825      	ldr	r5, [r4, #0]
 80071d0:	f015 0506 	ands.w	r5, r5, #6
 80071d4:	d106      	bne.n	80071e4 <_printf_common+0x48>
 80071d6:	f104 0a19 	add.w	sl, r4, #25
 80071da:	68e3      	ldr	r3, [r4, #12]
 80071dc:	6832      	ldr	r2, [r6, #0]
 80071de:	1a9b      	subs	r3, r3, r2
 80071e0:	42ab      	cmp	r3, r5
 80071e2:	dc28      	bgt.n	8007236 <_printf_common+0x9a>
 80071e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80071e8:	1e13      	subs	r3, r2, #0
 80071ea:	6822      	ldr	r2, [r4, #0]
 80071ec:	bf18      	it	ne
 80071ee:	2301      	movne	r3, #1
 80071f0:	0692      	lsls	r2, r2, #26
 80071f2:	d42d      	bmi.n	8007250 <_printf_common+0xb4>
 80071f4:	4649      	mov	r1, r9
 80071f6:	4638      	mov	r0, r7
 80071f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80071fc:	47c0      	blx	r8
 80071fe:	3001      	adds	r0, #1
 8007200:	d020      	beq.n	8007244 <_printf_common+0xa8>
 8007202:	6823      	ldr	r3, [r4, #0]
 8007204:	68e5      	ldr	r5, [r4, #12]
 8007206:	f003 0306 	and.w	r3, r3, #6
 800720a:	2b04      	cmp	r3, #4
 800720c:	bf18      	it	ne
 800720e:	2500      	movne	r5, #0
 8007210:	6832      	ldr	r2, [r6, #0]
 8007212:	f04f 0600 	mov.w	r6, #0
 8007216:	68a3      	ldr	r3, [r4, #8]
 8007218:	bf08      	it	eq
 800721a:	1aad      	subeq	r5, r5, r2
 800721c:	6922      	ldr	r2, [r4, #16]
 800721e:	bf08      	it	eq
 8007220:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007224:	4293      	cmp	r3, r2
 8007226:	bfc4      	itt	gt
 8007228:	1a9b      	subgt	r3, r3, r2
 800722a:	18ed      	addgt	r5, r5, r3
 800722c:	341a      	adds	r4, #26
 800722e:	42b5      	cmp	r5, r6
 8007230:	d11a      	bne.n	8007268 <_printf_common+0xcc>
 8007232:	2000      	movs	r0, #0
 8007234:	e008      	b.n	8007248 <_printf_common+0xac>
 8007236:	2301      	movs	r3, #1
 8007238:	4652      	mov	r2, sl
 800723a:	4649      	mov	r1, r9
 800723c:	4638      	mov	r0, r7
 800723e:	47c0      	blx	r8
 8007240:	3001      	adds	r0, #1
 8007242:	d103      	bne.n	800724c <_printf_common+0xb0>
 8007244:	f04f 30ff 	mov.w	r0, #4294967295
 8007248:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800724c:	3501      	adds	r5, #1
 800724e:	e7c4      	b.n	80071da <_printf_common+0x3e>
 8007250:	2030      	movs	r0, #48	; 0x30
 8007252:	18e1      	adds	r1, r4, r3
 8007254:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007258:	1c5a      	adds	r2, r3, #1
 800725a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800725e:	4422      	add	r2, r4
 8007260:	3302      	adds	r3, #2
 8007262:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007266:	e7c5      	b.n	80071f4 <_printf_common+0x58>
 8007268:	2301      	movs	r3, #1
 800726a:	4622      	mov	r2, r4
 800726c:	4649      	mov	r1, r9
 800726e:	4638      	mov	r0, r7
 8007270:	47c0      	blx	r8
 8007272:	3001      	adds	r0, #1
 8007274:	d0e6      	beq.n	8007244 <_printf_common+0xa8>
 8007276:	3601      	adds	r6, #1
 8007278:	e7d9      	b.n	800722e <_printf_common+0x92>
	...

0800727c <_printf_i>:
 800727c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007280:	7e0f      	ldrb	r7, [r1, #24]
 8007282:	4691      	mov	r9, r2
 8007284:	2f78      	cmp	r7, #120	; 0x78
 8007286:	4680      	mov	r8, r0
 8007288:	460c      	mov	r4, r1
 800728a:	469a      	mov	sl, r3
 800728c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800728e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007292:	d807      	bhi.n	80072a4 <_printf_i+0x28>
 8007294:	2f62      	cmp	r7, #98	; 0x62
 8007296:	d80a      	bhi.n	80072ae <_printf_i+0x32>
 8007298:	2f00      	cmp	r7, #0
 800729a:	f000 80d9 	beq.w	8007450 <_printf_i+0x1d4>
 800729e:	2f58      	cmp	r7, #88	; 0x58
 80072a0:	f000 80a4 	beq.w	80073ec <_printf_i+0x170>
 80072a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80072a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80072ac:	e03a      	b.n	8007324 <_printf_i+0xa8>
 80072ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80072b2:	2b15      	cmp	r3, #21
 80072b4:	d8f6      	bhi.n	80072a4 <_printf_i+0x28>
 80072b6:	a101      	add	r1, pc, #4	; (adr r1, 80072bc <_printf_i+0x40>)
 80072b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80072bc:	08007315 	.word	0x08007315
 80072c0:	08007329 	.word	0x08007329
 80072c4:	080072a5 	.word	0x080072a5
 80072c8:	080072a5 	.word	0x080072a5
 80072cc:	080072a5 	.word	0x080072a5
 80072d0:	080072a5 	.word	0x080072a5
 80072d4:	08007329 	.word	0x08007329
 80072d8:	080072a5 	.word	0x080072a5
 80072dc:	080072a5 	.word	0x080072a5
 80072e0:	080072a5 	.word	0x080072a5
 80072e4:	080072a5 	.word	0x080072a5
 80072e8:	08007437 	.word	0x08007437
 80072ec:	08007359 	.word	0x08007359
 80072f0:	08007419 	.word	0x08007419
 80072f4:	080072a5 	.word	0x080072a5
 80072f8:	080072a5 	.word	0x080072a5
 80072fc:	08007459 	.word	0x08007459
 8007300:	080072a5 	.word	0x080072a5
 8007304:	08007359 	.word	0x08007359
 8007308:	080072a5 	.word	0x080072a5
 800730c:	080072a5 	.word	0x080072a5
 8007310:	08007421 	.word	0x08007421
 8007314:	682b      	ldr	r3, [r5, #0]
 8007316:	1d1a      	adds	r2, r3, #4
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	602a      	str	r2, [r5, #0]
 800731c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007320:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007324:	2301      	movs	r3, #1
 8007326:	e0a4      	b.n	8007472 <_printf_i+0x1f6>
 8007328:	6820      	ldr	r0, [r4, #0]
 800732a:	6829      	ldr	r1, [r5, #0]
 800732c:	0606      	lsls	r6, r0, #24
 800732e:	f101 0304 	add.w	r3, r1, #4
 8007332:	d50a      	bpl.n	800734a <_printf_i+0xce>
 8007334:	680e      	ldr	r6, [r1, #0]
 8007336:	602b      	str	r3, [r5, #0]
 8007338:	2e00      	cmp	r6, #0
 800733a:	da03      	bge.n	8007344 <_printf_i+0xc8>
 800733c:	232d      	movs	r3, #45	; 0x2d
 800733e:	4276      	negs	r6, r6
 8007340:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007344:	230a      	movs	r3, #10
 8007346:	485e      	ldr	r0, [pc, #376]	; (80074c0 <_printf_i+0x244>)
 8007348:	e019      	b.n	800737e <_printf_i+0x102>
 800734a:	680e      	ldr	r6, [r1, #0]
 800734c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007350:	602b      	str	r3, [r5, #0]
 8007352:	bf18      	it	ne
 8007354:	b236      	sxthne	r6, r6
 8007356:	e7ef      	b.n	8007338 <_printf_i+0xbc>
 8007358:	682b      	ldr	r3, [r5, #0]
 800735a:	6820      	ldr	r0, [r4, #0]
 800735c:	1d19      	adds	r1, r3, #4
 800735e:	6029      	str	r1, [r5, #0]
 8007360:	0601      	lsls	r1, r0, #24
 8007362:	d501      	bpl.n	8007368 <_printf_i+0xec>
 8007364:	681e      	ldr	r6, [r3, #0]
 8007366:	e002      	b.n	800736e <_printf_i+0xf2>
 8007368:	0646      	lsls	r6, r0, #25
 800736a:	d5fb      	bpl.n	8007364 <_printf_i+0xe8>
 800736c:	881e      	ldrh	r6, [r3, #0]
 800736e:	2f6f      	cmp	r7, #111	; 0x6f
 8007370:	bf0c      	ite	eq
 8007372:	2308      	moveq	r3, #8
 8007374:	230a      	movne	r3, #10
 8007376:	4852      	ldr	r0, [pc, #328]	; (80074c0 <_printf_i+0x244>)
 8007378:	2100      	movs	r1, #0
 800737a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800737e:	6865      	ldr	r5, [r4, #4]
 8007380:	2d00      	cmp	r5, #0
 8007382:	bfa8      	it	ge
 8007384:	6821      	ldrge	r1, [r4, #0]
 8007386:	60a5      	str	r5, [r4, #8]
 8007388:	bfa4      	itt	ge
 800738a:	f021 0104 	bicge.w	r1, r1, #4
 800738e:	6021      	strge	r1, [r4, #0]
 8007390:	b90e      	cbnz	r6, 8007396 <_printf_i+0x11a>
 8007392:	2d00      	cmp	r5, #0
 8007394:	d04d      	beq.n	8007432 <_printf_i+0x1b6>
 8007396:	4615      	mov	r5, r2
 8007398:	fbb6 f1f3 	udiv	r1, r6, r3
 800739c:	fb03 6711 	mls	r7, r3, r1, r6
 80073a0:	5dc7      	ldrb	r7, [r0, r7]
 80073a2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80073a6:	4637      	mov	r7, r6
 80073a8:	42bb      	cmp	r3, r7
 80073aa:	460e      	mov	r6, r1
 80073ac:	d9f4      	bls.n	8007398 <_printf_i+0x11c>
 80073ae:	2b08      	cmp	r3, #8
 80073b0:	d10b      	bne.n	80073ca <_printf_i+0x14e>
 80073b2:	6823      	ldr	r3, [r4, #0]
 80073b4:	07de      	lsls	r6, r3, #31
 80073b6:	d508      	bpl.n	80073ca <_printf_i+0x14e>
 80073b8:	6923      	ldr	r3, [r4, #16]
 80073ba:	6861      	ldr	r1, [r4, #4]
 80073bc:	4299      	cmp	r1, r3
 80073be:	bfde      	ittt	le
 80073c0:	2330      	movle	r3, #48	; 0x30
 80073c2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80073c6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80073ca:	1b52      	subs	r2, r2, r5
 80073cc:	6122      	str	r2, [r4, #16]
 80073ce:	464b      	mov	r3, r9
 80073d0:	4621      	mov	r1, r4
 80073d2:	4640      	mov	r0, r8
 80073d4:	f8cd a000 	str.w	sl, [sp]
 80073d8:	aa03      	add	r2, sp, #12
 80073da:	f7ff fedf 	bl	800719c <_printf_common>
 80073de:	3001      	adds	r0, #1
 80073e0:	d14c      	bne.n	800747c <_printf_i+0x200>
 80073e2:	f04f 30ff 	mov.w	r0, #4294967295
 80073e6:	b004      	add	sp, #16
 80073e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073ec:	4834      	ldr	r0, [pc, #208]	; (80074c0 <_printf_i+0x244>)
 80073ee:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80073f2:	6829      	ldr	r1, [r5, #0]
 80073f4:	6823      	ldr	r3, [r4, #0]
 80073f6:	f851 6b04 	ldr.w	r6, [r1], #4
 80073fa:	6029      	str	r1, [r5, #0]
 80073fc:	061d      	lsls	r5, r3, #24
 80073fe:	d514      	bpl.n	800742a <_printf_i+0x1ae>
 8007400:	07df      	lsls	r7, r3, #31
 8007402:	bf44      	itt	mi
 8007404:	f043 0320 	orrmi.w	r3, r3, #32
 8007408:	6023      	strmi	r3, [r4, #0]
 800740a:	b91e      	cbnz	r6, 8007414 <_printf_i+0x198>
 800740c:	6823      	ldr	r3, [r4, #0]
 800740e:	f023 0320 	bic.w	r3, r3, #32
 8007412:	6023      	str	r3, [r4, #0]
 8007414:	2310      	movs	r3, #16
 8007416:	e7af      	b.n	8007378 <_printf_i+0xfc>
 8007418:	6823      	ldr	r3, [r4, #0]
 800741a:	f043 0320 	orr.w	r3, r3, #32
 800741e:	6023      	str	r3, [r4, #0]
 8007420:	2378      	movs	r3, #120	; 0x78
 8007422:	4828      	ldr	r0, [pc, #160]	; (80074c4 <_printf_i+0x248>)
 8007424:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007428:	e7e3      	b.n	80073f2 <_printf_i+0x176>
 800742a:	0659      	lsls	r1, r3, #25
 800742c:	bf48      	it	mi
 800742e:	b2b6      	uxthmi	r6, r6
 8007430:	e7e6      	b.n	8007400 <_printf_i+0x184>
 8007432:	4615      	mov	r5, r2
 8007434:	e7bb      	b.n	80073ae <_printf_i+0x132>
 8007436:	682b      	ldr	r3, [r5, #0]
 8007438:	6826      	ldr	r6, [r4, #0]
 800743a:	1d18      	adds	r0, r3, #4
 800743c:	6961      	ldr	r1, [r4, #20]
 800743e:	6028      	str	r0, [r5, #0]
 8007440:	0635      	lsls	r5, r6, #24
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	d501      	bpl.n	800744a <_printf_i+0x1ce>
 8007446:	6019      	str	r1, [r3, #0]
 8007448:	e002      	b.n	8007450 <_printf_i+0x1d4>
 800744a:	0670      	lsls	r0, r6, #25
 800744c:	d5fb      	bpl.n	8007446 <_printf_i+0x1ca>
 800744e:	8019      	strh	r1, [r3, #0]
 8007450:	2300      	movs	r3, #0
 8007452:	4615      	mov	r5, r2
 8007454:	6123      	str	r3, [r4, #16]
 8007456:	e7ba      	b.n	80073ce <_printf_i+0x152>
 8007458:	682b      	ldr	r3, [r5, #0]
 800745a:	2100      	movs	r1, #0
 800745c:	1d1a      	adds	r2, r3, #4
 800745e:	602a      	str	r2, [r5, #0]
 8007460:	681d      	ldr	r5, [r3, #0]
 8007462:	6862      	ldr	r2, [r4, #4]
 8007464:	4628      	mov	r0, r5
 8007466:	f002 f98b 	bl	8009780 <memchr>
 800746a:	b108      	cbz	r0, 8007470 <_printf_i+0x1f4>
 800746c:	1b40      	subs	r0, r0, r5
 800746e:	6060      	str	r0, [r4, #4]
 8007470:	6863      	ldr	r3, [r4, #4]
 8007472:	6123      	str	r3, [r4, #16]
 8007474:	2300      	movs	r3, #0
 8007476:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800747a:	e7a8      	b.n	80073ce <_printf_i+0x152>
 800747c:	462a      	mov	r2, r5
 800747e:	4649      	mov	r1, r9
 8007480:	4640      	mov	r0, r8
 8007482:	6923      	ldr	r3, [r4, #16]
 8007484:	47d0      	blx	sl
 8007486:	3001      	adds	r0, #1
 8007488:	d0ab      	beq.n	80073e2 <_printf_i+0x166>
 800748a:	6823      	ldr	r3, [r4, #0]
 800748c:	079b      	lsls	r3, r3, #30
 800748e:	d413      	bmi.n	80074b8 <_printf_i+0x23c>
 8007490:	68e0      	ldr	r0, [r4, #12]
 8007492:	9b03      	ldr	r3, [sp, #12]
 8007494:	4298      	cmp	r0, r3
 8007496:	bfb8      	it	lt
 8007498:	4618      	movlt	r0, r3
 800749a:	e7a4      	b.n	80073e6 <_printf_i+0x16a>
 800749c:	2301      	movs	r3, #1
 800749e:	4632      	mov	r2, r6
 80074a0:	4649      	mov	r1, r9
 80074a2:	4640      	mov	r0, r8
 80074a4:	47d0      	blx	sl
 80074a6:	3001      	adds	r0, #1
 80074a8:	d09b      	beq.n	80073e2 <_printf_i+0x166>
 80074aa:	3501      	adds	r5, #1
 80074ac:	68e3      	ldr	r3, [r4, #12]
 80074ae:	9903      	ldr	r1, [sp, #12]
 80074b0:	1a5b      	subs	r3, r3, r1
 80074b2:	42ab      	cmp	r3, r5
 80074b4:	dcf2      	bgt.n	800749c <_printf_i+0x220>
 80074b6:	e7eb      	b.n	8007490 <_printf_i+0x214>
 80074b8:	2500      	movs	r5, #0
 80074ba:	f104 0619 	add.w	r6, r4, #25
 80074be:	e7f5      	b.n	80074ac <_printf_i+0x230>
 80074c0:	0800b462 	.word	0x0800b462
 80074c4:	0800b473 	.word	0x0800b473

080074c8 <siprintf>:
 80074c8:	b40e      	push	{r1, r2, r3}
 80074ca:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80074ce:	b500      	push	{lr}
 80074d0:	b09c      	sub	sp, #112	; 0x70
 80074d2:	ab1d      	add	r3, sp, #116	; 0x74
 80074d4:	9002      	str	r0, [sp, #8]
 80074d6:	9006      	str	r0, [sp, #24]
 80074d8:	9107      	str	r1, [sp, #28]
 80074da:	9104      	str	r1, [sp, #16]
 80074dc:	4808      	ldr	r0, [pc, #32]	; (8007500 <siprintf+0x38>)
 80074de:	4909      	ldr	r1, [pc, #36]	; (8007504 <siprintf+0x3c>)
 80074e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80074e4:	9105      	str	r1, [sp, #20]
 80074e6:	6800      	ldr	r0, [r0, #0]
 80074e8:	a902      	add	r1, sp, #8
 80074ea:	9301      	str	r3, [sp, #4]
 80074ec:	f002 ff5a 	bl	800a3a4 <_svfiprintf_r>
 80074f0:	2200      	movs	r2, #0
 80074f2:	9b02      	ldr	r3, [sp, #8]
 80074f4:	701a      	strb	r2, [r3, #0]
 80074f6:	b01c      	add	sp, #112	; 0x70
 80074f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80074fc:	b003      	add	sp, #12
 80074fe:	4770      	bx	lr
 8007500:	20000190 	.word	0x20000190
 8007504:	ffff0208 	.word	0xffff0208

08007508 <strcat>:
 8007508:	4602      	mov	r2, r0
 800750a:	b510      	push	{r4, lr}
 800750c:	7814      	ldrb	r4, [r2, #0]
 800750e:	4613      	mov	r3, r2
 8007510:	3201      	adds	r2, #1
 8007512:	2c00      	cmp	r4, #0
 8007514:	d1fa      	bne.n	800750c <strcat+0x4>
 8007516:	3b01      	subs	r3, #1
 8007518:	f811 2b01 	ldrb.w	r2, [r1], #1
 800751c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007520:	2a00      	cmp	r2, #0
 8007522:	d1f9      	bne.n	8007518 <strcat+0x10>
 8007524:	bd10      	pop	{r4, pc}

08007526 <strcpy>:
 8007526:	4603      	mov	r3, r0
 8007528:	f811 2b01 	ldrb.w	r2, [r1], #1
 800752c:	f803 2b01 	strb.w	r2, [r3], #1
 8007530:	2a00      	cmp	r2, #0
 8007532:	d1f9      	bne.n	8007528 <strcpy+0x2>
 8007534:	4770      	bx	lr

08007536 <sulp>:
 8007536:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800753a:	460f      	mov	r7, r1
 800753c:	4690      	mov	r8, r2
 800753e:	f002 fc9d 	bl	8009e7c <__ulp>
 8007542:	4604      	mov	r4, r0
 8007544:	460d      	mov	r5, r1
 8007546:	f1b8 0f00 	cmp.w	r8, #0
 800754a:	d011      	beq.n	8007570 <sulp+0x3a>
 800754c:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8007550:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007554:	2b00      	cmp	r3, #0
 8007556:	dd0b      	ble.n	8007570 <sulp+0x3a>
 8007558:	2400      	movs	r4, #0
 800755a:	051b      	lsls	r3, r3, #20
 800755c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007560:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007564:	4622      	mov	r2, r4
 8007566:	462b      	mov	r3, r5
 8007568:	f7f8 ffc0 	bl	80004ec <__aeabi_dmul>
 800756c:	4604      	mov	r4, r0
 800756e:	460d      	mov	r5, r1
 8007570:	4620      	mov	r0, r4
 8007572:	4629      	mov	r1, r5
 8007574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007578 <_strtod_l>:
 8007578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800757c:	469b      	mov	fp, r3
 800757e:	2300      	movs	r3, #0
 8007580:	b09f      	sub	sp, #124	; 0x7c
 8007582:	931a      	str	r3, [sp, #104]	; 0x68
 8007584:	4b9e      	ldr	r3, [pc, #632]	; (8007800 <_strtod_l+0x288>)
 8007586:	4682      	mov	sl, r0
 8007588:	681f      	ldr	r7, [r3, #0]
 800758a:	460e      	mov	r6, r1
 800758c:	4638      	mov	r0, r7
 800758e:	9215      	str	r2, [sp, #84]	; 0x54
 8007590:	f7f8 fde8 	bl	8000164 <strlen>
 8007594:	f04f 0800 	mov.w	r8, #0
 8007598:	4604      	mov	r4, r0
 800759a:	f04f 0900 	mov.w	r9, #0
 800759e:	9619      	str	r6, [sp, #100]	; 0x64
 80075a0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80075a2:	781a      	ldrb	r2, [r3, #0]
 80075a4:	2a2b      	cmp	r2, #43	; 0x2b
 80075a6:	d04c      	beq.n	8007642 <_strtod_l+0xca>
 80075a8:	d83a      	bhi.n	8007620 <_strtod_l+0xa8>
 80075aa:	2a0d      	cmp	r2, #13
 80075ac:	d833      	bhi.n	8007616 <_strtod_l+0x9e>
 80075ae:	2a08      	cmp	r2, #8
 80075b0:	d833      	bhi.n	800761a <_strtod_l+0xa2>
 80075b2:	2a00      	cmp	r2, #0
 80075b4:	d03d      	beq.n	8007632 <_strtod_l+0xba>
 80075b6:	2300      	movs	r3, #0
 80075b8:	930a      	str	r3, [sp, #40]	; 0x28
 80075ba:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80075bc:	782b      	ldrb	r3, [r5, #0]
 80075be:	2b30      	cmp	r3, #48	; 0x30
 80075c0:	f040 80aa 	bne.w	8007718 <_strtod_l+0x1a0>
 80075c4:	786b      	ldrb	r3, [r5, #1]
 80075c6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80075ca:	2b58      	cmp	r3, #88	; 0x58
 80075cc:	d166      	bne.n	800769c <_strtod_l+0x124>
 80075ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075d0:	4650      	mov	r0, sl
 80075d2:	9301      	str	r3, [sp, #4]
 80075d4:	ab1a      	add	r3, sp, #104	; 0x68
 80075d6:	9300      	str	r3, [sp, #0]
 80075d8:	4a8a      	ldr	r2, [pc, #552]	; (8007804 <_strtod_l+0x28c>)
 80075da:	f8cd b008 	str.w	fp, [sp, #8]
 80075de:	ab1b      	add	r3, sp, #108	; 0x6c
 80075e0:	a919      	add	r1, sp, #100	; 0x64
 80075e2:	f001 fdb1 	bl	8009148 <__gethex>
 80075e6:	f010 0607 	ands.w	r6, r0, #7
 80075ea:	4604      	mov	r4, r0
 80075ec:	d005      	beq.n	80075fa <_strtod_l+0x82>
 80075ee:	2e06      	cmp	r6, #6
 80075f0:	d129      	bne.n	8007646 <_strtod_l+0xce>
 80075f2:	2300      	movs	r3, #0
 80075f4:	3501      	adds	r5, #1
 80075f6:	9519      	str	r5, [sp, #100]	; 0x64
 80075f8:	930a      	str	r3, [sp, #40]	; 0x28
 80075fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	f040 858a 	bne.w	8008116 <_strtod_l+0xb9e>
 8007602:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007604:	b1d3      	cbz	r3, 800763c <_strtod_l+0xc4>
 8007606:	4642      	mov	r2, r8
 8007608:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800760c:	4610      	mov	r0, r2
 800760e:	4619      	mov	r1, r3
 8007610:	b01f      	add	sp, #124	; 0x7c
 8007612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007616:	2a20      	cmp	r2, #32
 8007618:	d1cd      	bne.n	80075b6 <_strtod_l+0x3e>
 800761a:	3301      	adds	r3, #1
 800761c:	9319      	str	r3, [sp, #100]	; 0x64
 800761e:	e7bf      	b.n	80075a0 <_strtod_l+0x28>
 8007620:	2a2d      	cmp	r2, #45	; 0x2d
 8007622:	d1c8      	bne.n	80075b6 <_strtod_l+0x3e>
 8007624:	2201      	movs	r2, #1
 8007626:	920a      	str	r2, [sp, #40]	; 0x28
 8007628:	1c5a      	adds	r2, r3, #1
 800762a:	9219      	str	r2, [sp, #100]	; 0x64
 800762c:	785b      	ldrb	r3, [r3, #1]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d1c3      	bne.n	80075ba <_strtod_l+0x42>
 8007632:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007634:	9619      	str	r6, [sp, #100]	; 0x64
 8007636:	2b00      	cmp	r3, #0
 8007638:	f040 856b 	bne.w	8008112 <_strtod_l+0xb9a>
 800763c:	4642      	mov	r2, r8
 800763e:	464b      	mov	r3, r9
 8007640:	e7e4      	b.n	800760c <_strtod_l+0x94>
 8007642:	2200      	movs	r2, #0
 8007644:	e7ef      	b.n	8007626 <_strtod_l+0xae>
 8007646:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007648:	b13a      	cbz	r2, 800765a <_strtod_l+0xe2>
 800764a:	2135      	movs	r1, #53	; 0x35
 800764c:	a81c      	add	r0, sp, #112	; 0x70
 800764e:	f002 fd19 	bl	800a084 <__copybits>
 8007652:	4650      	mov	r0, sl
 8007654:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007656:	f002 f8e1 	bl	800981c <_Bfree>
 800765a:	3e01      	subs	r6, #1
 800765c:	2e04      	cmp	r6, #4
 800765e:	d806      	bhi.n	800766e <_strtod_l+0xf6>
 8007660:	e8df f006 	tbb	[pc, r6]
 8007664:	1714030a 	.word	0x1714030a
 8007668:	0a          	.byte	0x0a
 8007669:	00          	.byte	0x00
 800766a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800766e:	0721      	lsls	r1, r4, #28
 8007670:	d5c3      	bpl.n	80075fa <_strtod_l+0x82>
 8007672:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8007676:	e7c0      	b.n	80075fa <_strtod_l+0x82>
 8007678:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800767a:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 800767e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007682:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007686:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800768a:	e7f0      	b.n	800766e <_strtod_l+0xf6>
 800768c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8007808 <_strtod_l+0x290>
 8007690:	e7ed      	b.n	800766e <_strtod_l+0xf6>
 8007692:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8007696:	f04f 38ff 	mov.w	r8, #4294967295
 800769a:	e7e8      	b.n	800766e <_strtod_l+0xf6>
 800769c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800769e:	1c5a      	adds	r2, r3, #1
 80076a0:	9219      	str	r2, [sp, #100]	; 0x64
 80076a2:	785b      	ldrb	r3, [r3, #1]
 80076a4:	2b30      	cmp	r3, #48	; 0x30
 80076a6:	d0f9      	beq.n	800769c <_strtod_l+0x124>
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d0a6      	beq.n	80075fa <_strtod_l+0x82>
 80076ac:	2301      	movs	r3, #1
 80076ae:	9307      	str	r3, [sp, #28]
 80076b0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80076b2:	220a      	movs	r2, #10
 80076b4:	9308      	str	r3, [sp, #32]
 80076b6:	2300      	movs	r3, #0
 80076b8:	469b      	mov	fp, r3
 80076ba:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80076be:	9819      	ldr	r0, [sp, #100]	; 0x64
 80076c0:	7805      	ldrb	r5, [r0, #0]
 80076c2:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 80076c6:	b2d9      	uxtb	r1, r3
 80076c8:	2909      	cmp	r1, #9
 80076ca:	d927      	bls.n	800771c <_strtod_l+0x1a4>
 80076cc:	4622      	mov	r2, r4
 80076ce:	4639      	mov	r1, r7
 80076d0:	f003 f8d6 	bl	800a880 <strncmp>
 80076d4:	2800      	cmp	r0, #0
 80076d6:	d033      	beq.n	8007740 <_strtod_l+0x1c8>
 80076d8:	2000      	movs	r0, #0
 80076da:	462a      	mov	r2, r5
 80076dc:	465c      	mov	r4, fp
 80076de:	4603      	mov	r3, r0
 80076e0:	9004      	str	r0, [sp, #16]
 80076e2:	2a65      	cmp	r2, #101	; 0x65
 80076e4:	d001      	beq.n	80076ea <_strtod_l+0x172>
 80076e6:	2a45      	cmp	r2, #69	; 0x45
 80076e8:	d114      	bne.n	8007714 <_strtod_l+0x19c>
 80076ea:	b91c      	cbnz	r4, 80076f4 <_strtod_l+0x17c>
 80076ec:	9a07      	ldr	r2, [sp, #28]
 80076ee:	4302      	orrs	r2, r0
 80076f0:	d09f      	beq.n	8007632 <_strtod_l+0xba>
 80076f2:	2400      	movs	r4, #0
 80076f4:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80076f6:	1c72      	adds	r2, r6, #1
 80076f8:	9219      	str	r2, [sp, #100]	; 0x64
 80076fa:	7872      	ldrb	r2, [r6, #1]
 80076fc:	2a2b      	cmp	r2, #43	; 0x2b
 80076fe:	d079      	beq.n	80077f4 <_strtod_l+0x27c>
 8007700:	2a2d      	cmp	r2, #45	; 0x2d
 8007702:	f000 8083 	beq.w	800780c <_strtod_l+0x294>
 8007706:	2700      	movs	r7, #0
 8007708:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800770c:	2909      	cmp	r1, #9
 800770e:	f240 8083 	bls.w	8007818 <_strtod_l+0x2a0>
 8007712:	9619      	str	r6, [sp, #100]	; 0x64
 8007714:	2500      	movs	r5, #0
 8007716:	e09f      	b.n	8007858 <_strtod_l+0x2e0>
 8007718:	2300      	movs	r3, #0
 800771a:	e7c8      	b.n	80076ae <_strtod_l+0x136>
 800771c:	f1bb 0f08 	cmp.w	fp, #8
 8007720:	bfd5      	itete	le
 8007722:	9906      	ldrle	r1, [sp, #24]
 8007724:	9905      	ldrgt	r1, [sp, #20]
 8007726:	fb02 3301 	mlale	r3, r2, r1, r3
 800772a:	fb02 3301 	mlagt	r3, r2, r1, r3
 800772e:	f100 0001 	add.w	r0, r0, #1
 8007732:	bfd4      	ite	le
 8007734:	9306      	strle	r3, [sp, #24]
 8007736:	9305      	strgt	r3, [sp, #20]
 8007738:	f10b 0b01 	add.w	fp, fp, #1
 800773c:	9019      	str	r0, [sp, #100]	; 0x64
 800773e:	e7be      	b.n	80076be <_strtod_l+0x146>
 8007740:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007742:	191a      	adds	r2, r3, r4
 8007744:	9219      	str	r2, [sp, #100]	; 0x64
 8007746:	5d1a      	ldrb	r2, [r3, r4]
 8007748:	f1bb 0f00 	cmp.w	fp, #0
 800774c:	d036      	beq.n	80077bc <_strtod_l+0x244>
 800774e:	465c      	mov	r4, fp
 8007750:	9004      	str	r0, [sp, #16]
 8007752:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007756:	2b09      	cmp	r3, #9
 8007758:	d912      	bls.n	8007780 <_strtod_l+0x208>
 800775a:	2301      	movs	r3, #1
 800775c:	e7c1      	b.n	80076e2 <_strtod_l+0x16a>
 800775e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007760:	3001      	adds	r0, #1
 8007762:	1c5a      	adds	r2, r3, #1
 8007764:	9219      	str	r2, [sp, #100]	; 0x64
 8007766:	785a      	ldrb	r2, [r3, #1]
 8007768:	2a30      	cmp	r2, #48	; 0x30
 800776a:	d0f8      	beq.n	800775e <_strtod_l+0x1e6>
 800776c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007770:	2b08      	cmp	r3, #8
 8007772:	f200 84d5 	bhi.w	8008120 <_strtod_l+0xba8>
 8007776:	9004      	str	r0, [sp, #16]
 8007778:	2000      	movs	r0, #0
 800777a:	4604      	mov	r4, r0
 800777c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800777e:	9308      	str	r3, [sp, #32]
 8007780:	3a30      	subs	r2, #48	; 0x30
 8007782:	f100 0301 	add.w	r3, r0, #1
 8007786:	d013      	beq.n	80077b0 <_strtod_l+0x238>
 8007788:	9904      	ldr	r1, [sp, #16]
 800778a:	1905      	adds	r5, r0, r4
 800778c:	4419      	add	r1, r3
 800778e:	9104      	str	r1, [sp, #16]
 8007790:	4623      	mov	r3, r4
 8007792:	210a      	movs	r1, #10
 8007794:	42ab      	cmp	r3, r5
 8007796:	d113      	bne.n	80077c0 <_strtod_l+0x248>
 8007798:	1823      	adds	r3, r4, r0
 800779a:	2b08      	cmp	r3, #8
 800779c:	f104 0401 	add.w	r4, r4, #1
 80077a0:	4404      	add	r4, r0
 80077a2:	dc1b      	bgt.n	80077dc <_strtod_l+0x264>
 80077a4:	230a      	movs	r3, #10
 80077a6:	9906      	ldr	r1, [sp, #24]
 80077a8:	fb03 2301 	mla	r3, r3, r1, r2
 80077ac:	9306      	str	r3, [sp, #24]
 80077ae:	2300      	movs	r3, #0
 80077b0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80077b2:	4618      	mov	r0, r3
 80077b4:	1c51      	adds	r1, r2, #1
 80077b6:	9119      	str	r1, [sp, #100]	; 0x64
 80077b8:	7852      	ldrb	r2, [r2, #1]
 80077ba:	e7ca      	b.n	8007752 <_strtod_l+0x1da>
 80077bc:	4658      	mov	r0, fp
 80077be:	e7d3      	b.n	8007768 <_strtod_l+0x1f0>
 80077c0:	2b08      	cmp	r3, #8
 80077c2:	dc04      	bgt.n	80077ce <_strtod_l+0x256>
 80077c4:	9f06      	ldr	r7, [sp, #24]
 80077c6:	434f      	muls	r7, r1
 80077c8:	9706      	str	r7, [sp, #24]
 80077ca:	3301      	adds	r3, #1
 80077cc:	e7e2      	b.n	8007794 <_strtod_l+0x21c>
 80077ce:	1c5f      	adds	r7, r3, #1
 80077d0:	2f10      	cmp	r7, #16
 80077d2:	bfde      	ittt	le
 80077d4:	9f05      	ldrle	r7, [sp, #20]
 80077d6:	434f      	mulle	r7, r1
 80077d8:	9705      	strle	r7, [sp, #20]
 80077da:	e7f6      	b.n	80077ca <_strtod_l+0x252>
 80077dc:	2c10      	cmp	r4, #16
 80077de:	bfdf      	itttt	le
 80077e0:	230a      	movle	r3, #10
 80077e2:	9905      	ldrle	r1, [sp, #20]
 80077e4:	fb03 2301 	mlale	r3, r3, r1, r2
 80077e8:	9305      	strle	r3, [sp, #20]
 80077ea:	e7e0      	b.n	80077ae <_strtod_l+0x236>
 80077ec:	2300      	movs	r3, #0
 80077ee:	9304      	str	r3, [sp, #16]
 80077f0:	2301      	movs	r3, #1
 80077f2:	e77b      	b.n	80076ec <_strtod_l+0x174>
 80077f4:	2700      	movs	r7, #0
 80077f6:	1cb2      	adds	r2, r6, #2
 80077f8:	9219      	str	r2, [sp, #100]	; 0x64
 80077fa:	78b2      	ldrb	r2, [r6, #2]
 80077fc:	e784      	b.n	8007708 <_strtod_l+0x190>
 80077fe:	bf00      	nop
 8007800:	0800b768 	.word	0x0800b768
 8007804:	0800b484 	.word	0x0800b484
 8007808:	7ff00000 	.word	0x7ff00000
 800780c:	2701      	movs	r7, #1
 800780e:	e7f2      	b.n	80077f6 <_strtod_l+0x27e>
 8007810:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007812:	1c51      	adds	r1, r2, #1
 8007814:	9119      	str	r1, [sp, #100]	; 0x64
 8007816:	7852      	ldrb	r2, [r2, #1]
 8007818:	2a30      	cmp	r2, #48	; 0x30
 800781a:	d0f9      	beq.n	8007810 <_strtod_l+0x298>
 800781c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007820:	2908      	cmp	r1, #8
 8007822:	f63f af77 	bhi.w	8007714 <_strtod_l+0x19c>
 8007826:	f04f 0e0a 	mov.w	lr, #10
 800782a:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800782e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007830:	9209      	str	r2, [sp, #36]	; 0x24
 8007832:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007834:	1c51      	adds	r1, r2, #1
 8007836:	9119      	str	r1, [sp, #100]	; 0x64
 8007838:	7852      	ldrb	r2, [r2, #1]
 800783a:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800783e:	2d09      	cmp	r5, #9
 8007840:	d935      	bls.n	80078ae <_strtod_l+0x336>
 8007842:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007844:	1b49      	subs	r1, r1, r5
 8007846:	2908      	cmp	r1, #8
 8007848:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800784c:	dc02      	bgt.n	8007854 <_strtod_l+0x2dc>
 800784e:	4565      	cmp	r5, ip
 8007850:	bfa8      	it	ge
 8007852:	4665      	movge	r5, ip
 8007854:	b107      	cbz	r7, 8007858 <_strtod_l+0x2e0>
 8007856:	426d      	negs	r5, r5
 8007858:	2c00      	cmp	r4, #0
 800785a:	d14c      	bne.n	80078f6 <_strtod_l+0x37e>
 800785c:	9907      	ldr	r1, [sp, #28]
 800785e:	4301      	orrs	r1, r0
 8007860:	f47f aecb 	bne.w	80075fa <_strtod_l+0x82>
 8007864:	2b00      	cmp	r3, #0
 8007866:	f47f aee4 	bne.w	8007632 <_strtod_l+0xba>
 800786a:	2a69      	cmp	r2, #105	; 0x69
 800786c:	d026      	beq.n	80078bc <_strtod_l+0x344>
 800786e:	dc23      	bgt.n	80078b8 <_strtod_l+0x340>
 8007870:	2a49      	cmp	r2, #73	; 0x49
 8007872:	d023      	beq.n	80078bc <_strtod_l+0x344>
 8007874:	2a4e      	cmp	r2, #78	; 0x4e
 8007876:	f47f aedc 	bne.w	8007632 <_strtod_l+0xba>
 800787a:	499d      	ldr	r1, [pc, #628]	; (8007af0 <_strtod_l+0x578>)
 800787c:	a819      	add	r0, sp, #100	; 0x64
 800787e:	f001 feb1 	bl	80095e4 <__match>
 8007882:	2800      	cmp	r0, #0
 8007884:	f43f aed5 	beq.w	8007632 <_strtod_l+0xba>
 8007888:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800788a:	781b      	ldrb	r3, [r3, #0]
 800788c:	2b28      	cmp	r3, #40	; 0x28
 800788e:	d12c      	bne.n	80078ea <_strtod_l+0x372>
 8007890:	4998      	ldr	r1, [pc, #608]	; (8007af4 <_strtod_l+0x57c>)
 8007892:	aa1c      	add	r2, sp, #112	; 0x70
 8007894:	a819      	add	r0, sp, #100	; 0x64
 8007896:	f001 feb9 	bl	800960c <__hexnan>
 800789a:	2805      	cmp	r0, #5
 800789c:	d125      	bne.n	80078ea <_strtod_l+0x372>
 800789e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80078a0:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 80078a4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80078a8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80078ac:	e6a5      	b.n	80075fa <_strtod_l+0x82>
 80078ae:	fb0e 2c0c 	mla	ip, lr, ip, r2
 80078b2:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 80078b6:	e7bc      	b.n	8007832 <_strtod_l+0x2ba>
 80078b8:	2a6e      	cmp	r2, #110	; 0x6e
 80078ba:	e7dc      	b.n	8007876 <_strtod_l+0x2fe>
 80078bc:	498e      	ldr	r1, [pc, #568]	; (8007af8 <_strtod_l+0x580>)
 80078be:	a819      	add	r0, sp, #100	; 0x64
 80078c0:	f001 fe90 	bl	80095e4 <__match>
 80078c4:	2800      	cmp	r0, #0
 80078c6:	f43f aeb4 	beq.w	8007632 <_strtod_l+0xba>
 80078ca:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80078cc:	498b      	ldr	r1, [pc, #556]	; (8007afc <_strtod_l+0x584>)
 80078ce:	3b01      	subs	r3, #1
 80078d0:	a819      	add	r0, sp, #100	; 0x64
 80078d2:	9319      	str	r3, [sp, #100]	; 0x64
 80078d4:	f001 fe86 	bl	80095e4 <__match>
 80078d8:	b910      	cbnz	r0, 80078e0 <_strtod_l+0x368>
 80078da:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80078dc:	3301      	adds	r3, #1
 80078de:	9319      	str	r3, [sp, #100]	; 0x64
 80078e0:	f04f 0800 	mov.w	r8, #0
 80078e4:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8007b00 <_strtod_l+0x588>
 80078e8:	e687      	b.n	80075fa <_strtod_l+0x82>
 80078ea:	4886      	ldr	r0, [pc, #536]	; (8007b04 <_strtod_l+0x58c>)
 80078ec:	f002 ffb2 	bl	800a854 <nan>
 80078f0:	4680      	mov	r8, r0
 80078f2:	4689      	mov	r9, r1
 80078f4:	e681      	b.n	80075fa <_strtod_l+0x82>
 80078f6:	9b04      	ldr	r3, [sp, #16]
 80078f8:	f1bb 0f00 	cmp.w	fp, #0
 80078fc:	bf08      	it	eq
 80078fe:	46a3      	moveq	fp, r4
 8007900:	1aeb      	subs	r3, r5, r3
 8007902:	2c10      	cmp	r4, #16
 8007904:	9806      	ldr	r0, [sp, #24]
 8007906:	4626      	mov	r6, r4
 8007908:	9307      	str	r3, [sp, #28]
 800790a:	bfa8      	it	ge
 800790c:	2610      	movge	r6, #16
 800790e:	f7f8 fd73 	bl	80003f8 <__aeabi_ui2d>
 8007912:	2c09      	cmp	r4, #9
 8007914:	4680      	mov	r8, r0
 8007916:	4689      	mov	r9, r1
 8007918:	dd13      	ble.n	8007942 <_strtod_l+0x3ca>
 800791a:	4b7b      	ldr	r3, [pc, #492]	; (8007b08 <_strtod_l+0x590>)
 800791c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007920:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007924:	f7f8 fde2 	bl	80004ec <__aeabi_dmul>
 8007928:	4680      	mov	r8, r0
 800792a:	9805      	ldr	r0, [sp, #20]
 800792c:	4689      	mov	r9, r1
 800792e:	f7f8 fd63 	bl	80003f8 <__aeabi_ui2d>
 8007932:	4602      	mov	r2, r0
 8007934:	460b      	mov	r3, r1
 8007936:	4640      	mov	r0, r8
 8007938:	4649      	mov	r1, r9
 800793a:	f7f8 fc21 	bl	8000180 <__adddf3>
 800793e:	4680      	mov	r8, r0
 8007940:	4689      	mov	r9, r1
 8007942:	2c0f      	cmp	r4, #15
 8007944:	dc36      	bgt.n	80079b4 <_strtod_l+0x43c>
 8007946:	9b07      	ldr	r3, [sp, #28]
 8007948:	2b00      	cmp	r3, #0
 800794a:	f43f ae56 	beq.w	80075fa <_strtod_l+0x82>
 800794e:	dd22      	ble.n	8007996 <_strtod_l+0x41e>
 8007950:	2b16      	cmp	r3, #22
 8007952:	dc09      	bgt.n	8007968 <_strtod_l+0x3f0>
 8007954:	496c      	ldr	r1, [pc, #432]	; (8007b08 <_strtod_l+0x590>)
 8007956:	4642      	mov	r2, r8
 8007958:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800795c:	464b      	mov	r3, r9
 800795e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007962:	f7f8 fdc3 	bl	80004ec <__aeabi_dmul>
 8007966:	e7c3      	b.n	80078f0 <_strtod_l+0x378>
 8007968:	9a07      	ldr	r2, [sp, #28]
 800796a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800796e:	4293      	cmp	r3, r2
 8007970:	db20      	blt.n	80079b4 <_strtod_l+0x43c>
 8007972:	4d65      	ldr	r5, [pc, #404]	; (8007b08 <_strtod_l+0x590>)
 8007974:	f1c4 040f 	rsb	r4, r4, #15
 8007978:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800797c:	4642      	mov	r2, r8
 800797e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007982:	464b      	mov	r3, r9
 8007984:	f7f8 fdb2 	bl	80004ec <__aeabi_dmul>
 8007988:	9b07      	ldr	r3, [sp, #28]
 800798a:	1b1c      	subs	r4, r3, r4
 800798c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8007990:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007994:	e7e5      	b.n	8007962 <_strtod_l+0x3ea>
 8007996:	9b07      	ldr	r3, [sp, #28]
 8007998:	3316      	adds	r3, #22
 800799a:	db0b      	blt.n	80079b4 <_strtod_l+0x43c>
 800799c:	9b04      	ldr	r3, [sp, #16]
 800799e:	4640      	mov	r0, r8
 80079a0:	1b5d      	subs	r5, r3, r5
 80079a2:	4b59      	ldr	r3, [pc, #356]	; (8007b08 <_strtod_l+0x590>)
 80079a4:	4649      	mov	r1, r9
 80079a6:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80079aa:	e9d5 2300 	ldrd	r2, r3, [r5]
 80079ae:	f7f8 fec7 	bl	8000740 <__aeabi_ddiv>
 80079b2:	e79d      	b.n	80078f0 <_strtod_l+0x378>
 80079b4:	9b07      	ldr	r3, [sp, #28]
 80079b6:	1ba6      	subs	r6, r4, r6
 80079b8:	441e      	add	r6, r3
 80079ba:	2e00      	cmp	r6, #0
 80079bc:	dd74      	ble.n	8007aa8 <_strtod_l+0x530>
 80079be:	f016 030f 	ands.w	r3, r6, #15
 80079c2:	d00a      	beq.n	80079da <_strtod_l+0x462>
 80079c4:	4950      	ldr	r1, [pc, #320]	; (8007b08 <_strtod_l+0x590>)
 80079c6:	4642      	mov	r2, r8
 80079c8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80079cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80079d0:	464b      	mov	r3, r9
 80079d2:	f7f8 fd8b 	bl	80004ec <__aeabi_dmul>
 80079d6:	4680      	mov	r8, r0
 80079d8:	4689      	mov	r9, r1
 80079da:	f036 060f 	bics.w	r6, r6, #15
 80079de:	d052      	beq.n	8007a86 <_strtod_l+0x50e>
 80079e0:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 80079e4:	dd27      	ble.n	8007a36 <_strtod_l+0x4be>
 80079e6:	f04f 0b00 	mov.w	fp, #0
 80079ea:	f8cd b010 	str.w	fp, [sp, #16]
 80079ee:	f8cd b020 	str.w	fp, [sp, #32]
 80079f2:	f8cd b018 	str.w	fp, [sp, #24]
 80079f6:	2322      	movs	r3, #34	; 0x22
 80079f8:	f04f 0800 	mov.w	r8, #0
 80079fc:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8007b00 <_strtod_l+0x588>
 8007a00:	f8ca 3000 	str.w	r3, [sl]
 8007a04:	9b08      	ldr	r3, [sp, #32]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	f43f adf7 	beq.w	80075fa <_strtod_l+0x82>
 8007a0c:	4650      	mov	r0, sl
 8007a0e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007a10:	f001 ff04 	bl	800981c <_Bfree>
 8007a14:	4650      	mov	r0, sl
 8007a16:	9906      	ldr	r1, [sp, #24]
 8007a18:	f001 ff00 	bl	800981c <_Bfree>
 8007a1c:	4650      	mov	r0, sl
 8007a1e:	9904      	ldr	r1, [sp, #16]
 8007a20:	f001 fefc 	bl	800981c <_Bfree>
 8007a24:	4650      	mov	r0, sl
 8007a26:	9908      	ldr	r1, [sp, #32]
 8007a28:	f001 fef8 	bl	800981c <_Bfree>
 8007a2c:	4659      	mov	r1, fp
 8007a2e:	4650      	mov	r0, sl
 8007a30:	f001 fef4 	bl	800981c <_Bfree>
 8007a34:	e5e1      	b.n	80075fa <_strtod_l+0x82>
 8007a36:	4b35      	ldr	r3, [pc, #212]	; (8007b0c <_strtod_l+0x594>)
 8007a38:	4640      	mov	r0, r8
 8007a3a:	9305      	str	r3, [sp, #20]
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	4649      	mov	r1, r9
 8007a40:	461f      	mov	r7, r3
 8007a42:	1136      	asrs	r6, r6, #4
 8007a44:	2e01      	cmp	r6, #1
 8007a46:	dc21      	bgt.n	8007a8c <_strtod_l+0x514>
 8007a48:	b10b      	cbz	r3, 8007a4e <_strtod_l+0x4d6>
 8007a4a:	4680      	mov	r8, r0
 8007a4c:	4689      	mov	r9, r1
 8007a4e:	4b2f      	ldr	r3, [pc, #188]	; (8007b0c <_strtod_l+0x594>)
 8007a50:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8007a54:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007a58:	4642      	mov	r2, r8
 8007a5a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007a5e:	464b      	mov	r3, r9
 8007a60:	f7f8 fd44 	bl	80004ec <__aeabi_dmul>
 8007a64:	4b26      	ldr	r3, [pc, #152]	; (8007b00 <_strtod_l+0x588>)
 8007a66:	460a      	mov	r2, r1
 8007a68:	400b      	ands	r3, r1
 8007a6a:	4929      	ldr	r1, [pc, #164]	; (8007b10 <_strtod_l+0x598>)
 8007a6c:	4680      	mov	r8, r0
 8007a6e:	428b      	cmp	r3, r1
 8007a70:	d8b9      	bhi.n	80079e6 <_strtod_l+0x46e>
 8007a72:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007a76:	428b      	cmp	r3, r1
 8007a78:	bf86      	itte	hi
 8007a7a:	f04f 38ff 	movhi.w	r8, #4294967295
 8007a7e:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8007b14 <_strtod_l+0x59c>
 8007a82:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8007a86:	2300      	movs	r3, #0
 8007a88:	9305      	str	r3, [sp, #20]
 8007a8a:	e07f      	b.n	8007b8c <_strtod_l+0x614>
 8007a8c:	07f2      	lsls	r2, r6, #31
 8007a8e:	d505      	bpl.n	8007a9c <_strtod_l+0x524>
 8007a90:	9b05      	ldr	r3, [sp, #20]
 8007a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a96:	f7f8 fd29 	bl	80004ec <__aeabi_dmul>
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	9a05      	ldr	r2, [sp, #20]
 8007a9e:	3701      	adds	r7, #1
 8007aa0:	3208      	adds	r2, #8
 8007aa2:	1076      	asrs	r6, r6, #1
 8007aa4:	9205      	str	r2, [sp, #20]
 8007aa6:	e7cd      	b.n	8007a44 <_strtod_l+0x4cc>
 8007aa8:	d0ed      	beq.n	8007a86 <_strtod_l+0x50e>
 8007aaa:	4276      	negs	r6, r6
 8007aac:	f016 020f 	ands.w	r2, r6, #15
 8007ab0:	d00a      	beq.n	8007ac8 <_strtod_l+0x550>
 8007ab2:	4b15      	ldr	r3, [pc, #84]	; (8007b08 <_strtod_l+0x590>)
 8007ab4:	4640      	mov	r0, r8
 8007ab6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007aba:	4649      	mov	r1, r9
 8007abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ac0:	f7f8 fe3e 	bl	8000740 <__aeabi_ddiv>
 8007ac4:	4680      	mov	r8, r0
 8007ac6:	4689      	mov	r9, r1
 8007ac8:	1136      	asrs	r6, r6, #4
 8007aca:	d0dc      	beq.n	8007a86 <_strtod_l+0x50e>
 8007acc:	2e1f      	cmp	r6, #31
 8007ace:	dd23      	ble.n	8007b18 <_strtod_l+0x5a0>
 8007ad0:	f04f 0b00 	mov.w	fp, #0
 8007ad4:	f8cd b010 	str.w	fp, [sp, #16]
 8007ad8:	f8cd b020 	str.w	fp, [sp, #32]
 8007adc:	f8cd b018 	str.w	fp, [sp, #24]
 8007ae0:	2322      	movs	r3, #34	; 0x22
 8007ae2:	f04f 0800 	mov.w	r8, #0
 8007ae6:	f04f 0900 	mov.w	r9, #0
 8007aea:	f8ca 3000 	str.w	r3, [sl]
 8007aee:	e789      	b.n	8007a04 <_strtod_l+0x48c>
 8007af0:	0800b45d 	.word	0x0800b45d
 8007af4:	0800b498 	.word	0x0800b498
 8007af8:	0800b455 	.word	0x0800b455
 8007afc:	0800b68c 	.word	0x0800b68c
 8007b00:	7ff00000 	.word	0x7ff00000
 8007b04:	0800b587 	.word	0x0800b587
 8007b08:	0800b800 	.word	0x0800b800
 8007b0c:	0800b7d8 	.word	0x0800b7d8
 8007b10:	7ca00000 	.word	0x7ca00000
 8007b14:	7fefffff 	.word	0x7fefffff
 8007b18:	f016 0310 	ands.w	r3, r6, #16
 8007b1c:	bf18      	it	ne
 8007b1e:	236a      	movne	r3, #106	; 0x6a
 8007b20:	4640      	mov	r0, r8
 8007b22:	9305      	str	r3, [sp, #20]
 8007b24:	4649      	mov	r1, r9
 8007b26:	2300      	movs	r3, #0
 8007b28:	4fb0      	ldr	r7, [pc, #704]	; (8007dec <_strtod_l+0x874>)
 8007b2a:	07f2      	lsls	r2, r6, #31
 8007b2c:	d504      	bpl.n	8007b38 <_strtod_l+0x5c0>
 8007b2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b32:	f7f8 fcdb 	bl	80004ec <__aeabi_dmul>
 8007b36:	2301      	movs	r3, #1
 8007b38:	1076      	asrs	r6, r6, #1
 8007b3a:	f107 0708 	add.w	r7, r7, #8
 8007b3e:	d1f4      	bne.n	8007b2a <_strtod_l+0x5b2>
 8007b40:	b10b      	cbz	r3, 8007b46 <_strtod_l+0x5ce>
 8007b42:	4680      	mov	r8, r0
 8007b44:	4689      	mov	r9, r1
 8007b46:	9b05      	ldr	r3, [sp, #20]
 8007b48:	b1c3      	cbz	r3, 8007b7c <_strtod_l+0x604>
 8007b4a:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8007b4e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	4649      	mov	r1, r9
 8007b56:	dd11      	ble.n	8007b7c <_strtod_l+0x604>
 8007b58:	2b1f      	cmp	r3, #31
 8007b5a:	f340 8127 	ble.w	8007dac <_strtod_l+0x834>
 8007b5e:	2b34      	cmp	r3, #52	; 0x34
 8007b60:	bfd8      	it	le
 8007b62:	f04f 33ff 	movle.w	r3, #4294967295
 8007b66:	f04f 0800 	mov.w	r8, #0
 8007b6a:	bfcf      	iteee	gt
 8007b6c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8007b70:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007b74:	fa03 f202 	lslle.w	r2, r3, r2
 8007b78:	ea02 0901 	andle.w	r9, r2, r1
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	2300      	movs	r3, #0
 8007b80:	4640      	mov	r0, r8
 8007b82:	4649      	mov	r1, r9
 8007b84:	f7f8 ff1a 	bl	80009bc <__aeabi_dcmpeq>
 8007b88:	2800      	cmp	r0, #0
 8007b8a:	d1a1      	bne.n	8007ad0 <_strtod_l+0x558>
 8007b8c:	9b06      	ldr	r3, [sp, #24]
 8007b8e:	465a      	mov	r2, fp
 8007b90:	9300      	str	r3, [sp, #0]
 8007b92:	4650      	mov	r0, sl
 8007b94:	4623      	mov	r3, r4
 8007b96:	9908      	ldr	r1, [sp, #32]
 8007b98:	f001 fea8 	bl	80098ec <__s2b>
 8007b9c:	9008      	str	r0, [sp, #32]
 8007b9e:	2800      	cmp	r0, #0
 8007ba0:	f43f af21 	beq.w	80079e6 <_strtod_l+0x46e>
 8007ba4:	9b04      	ldr	r3, [sp, #16]
 8007ba6:	f04f 0b00 	mov.w	fp, #0
 8007baa:	1b5d      	subs	r5, r3, r5
 8007bac:	9b07      	ldr	r3, [sp, #28]
 8007bae:	f8cd b010 	str.w	fp, [sp, #16]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	bfb4      	ite	lt
 8007bb6:	462b      	movlt	r3, r5
 8007bb8:	2300      	movge	r3, #0
 8007bba:	930e      	str	r3, [sp, #56]	; 0x38
 8007bbc:	9b07      	ldr	r3, [sp, #28]
 8007bbe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007bc2:	9314      	str	r3, [sp, #80]	; 0x50
 8007bc4:	9b08      	ldr	r3, [sp, #32]
 8007bc6:	4650      	mov	r0, sl
 8007bc8:	6859      	ldr	r1, [r3, #4]
 8007bca:	f001 fde7 	bl	800979c <_Balloc>
 8007bce:	9006      	str	r0, [sp, #24]
 8007bd0:	2800      	cmp	r0, #0
 8007bd2:	f43f af10 	beq.w	80079f6 <_strtod_l+0x47e>
 8007bd6:	9b08      	ldr	r3, [sp, #32]
 8007bd8:	300c      	adds	r0, #12
 8007bda:	691a      	ldr	r2, [r3, #16]
 8007bdc:	f103 010c 	add.w	r1, r3, #12
 8007be0:	3202      	adds	r2, #2
 8007be2:	0092      	lsls	r2, r2, #2
 8007be4:	f7fe fffa 	bl	8006bdc <memcpy>
 8007be8:	ab1c      	add	r3, sp, #112	; 0x70
 8007bea:	9301      	str	r3, [sp, #4]
 8007bec:	ab1b      	add	r3, sp, #108	; 0x6c
 8007bee:	9300      	str	r3, [sp, #0]
 8007bf0:	4642      	mov	r2, r8
 8007bf2:	464b      	mov	r3, r9
 8007bf4:	4650      	mov	r0, sl
 8007bf6:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8007bfa:	f002 f9b9 	bl	8009f70 <__d2b>
 8007bfe:	901a      	str	r0, [sp, #104]	; 0x68
 8007c00:	2800      	cmp	r0, #0
 8007c02:	f43f aef8 	beq.w	80079f6 <_strtod_l+0x47e>
 8007c06:	2101      	movs	r1, #1
 8007c08:	4650      	mov	r0, sl
 8007c0a:	f001 ff07 	bl	8009a1c <__i2b>
 8007c0e:	4603      	mov	r3, r0
 8007c10:	9004      	str	r0, [sp, #16]
 8007c12:	2800      	cmp	r0, #0
 8007c14:	f43f aeef 	beq.w	80079f6 <_strtod_l+0x47e>
 8007c18:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8007c1a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007c1c:	2d00      	cmp	r5, #0
 8007c1e:	bfab      	itete	ge
 8007c20:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8007c22:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 8007c24:	18ee      	addge	r6, r5, r3
 8007c26:	1b5c      	sublt	r4, r3, r5
 8007c28:	9b05      	ldr	r3, [sp, #20]
 8007c2a:	bfa8      	it	ge
 8007c2c:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 8007c2e:	eba5 0503 	sub.w	r5, r5, r3
 8007c32:	4415      	add	r5, r2
 8007c34:	4b6e      	ldr	r3, [pc, #440]	; (8007df0 <_strtod_l+0x878>)
 8007c36:	f105 35ff 	add.w	r5, r5, #4294967295
 8007c3a:	bfb8      	it	lt
 8007c3c:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8007c3e:	429d      	cmp	r5, r3
 8007c40:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007c44:	f280 80c4 	bge.w	8007dd0 <_strtod_l+0x858>
 8007c48:	1b5b      	subs	r3, r3, r5
 8007c4a:	2b1f      	cmp	r3, #31
 8007c4c:	f04f 0701 	mov.w	r7, #1
 8007c50:	eba2 0203 	sub.w	r2, r2, r3
 8007c54:	f300 80b1 	bgt.w	8007dba <_strtod_l+0x842>
 8007c58:	2500      	movs	r5, #0
 8007c5a:	fa07 f303 	lsl.w	r3, r7, r3
 8007c5e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007c60:	18b7      	adds	r7, r6, r2
 8007c62:	9b05      	ldr	r3, [sp, #20]
 8007c64:	42be      	cmp	r6, r7
 8007c66:	4414      	add	r4, r2
 8007c68:	441c      	add	r4, r3
 8007c6a:	4633      	mov	r3, r6
 8007c6c:	bfa8      	it	ge
 8007c6e:	463b      	movge	r3, r7
 8007c70:	42a3      	cmp	r3, r4
 8007c72:	bfa8      	it	ge
 8007c74:	4623      	movge	r3, r4
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	bfc2      	ittt	gt
 8007c7a:	1aff      	subgt	r7, r7, r3
 8007c7c:	1ae4      	subgt	r4, r4, r3
 8007c7e:	1af6      	subgt	r6, r6, r3
 8007c80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	dd17      	ble.n	8007cb6 <_strtod_l+0x73e>
 8007c86:	461a      	mov	r2, r3
 8007c88:	4650      	mov	r0, sl
 8007c8a:	9904      	ldr	r1, [sp, #16]
 8007c8c:	f001 ff84 	bl	8009b98 <__pow5mult>
 8007c90:	9004      	str	r0, [sp, #16]
 8007c92:	2800      	cmp	r0, #0
 8007c94:	f43f aeaf 	beq.w	80079f6 <_strtod_l+0x47e>
 8007c98:	4601      	mov	r1, r0
 8007c9a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007c9c:	4650      	mov	r0, sl
 8007c9e:	f001 fed3 	bl	8009a48 <__multiply>
 8007ca2:	9009      	str	r0, [sp, #36]	; 0x24
 8007ca4:	2800      	cmp	r0, #0
 8007ca6:	f43f aea6 	beq.w	80079f6 <_strtod_l+0x47e>
 8007caa:	4650      	mov	r0, sl
 8007cac:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007cae:	f001 fdb5 	bl	800981c <_Bfree>
 8007cb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cb4:	931a      	str	r3, [sp, #104]	; 0x68
 8007cb6:	2f00      	cmp	r7, #0
 8007cb8:	f300 808e 	bgt.w	8007dd8 <_strtod_l+0x860>
 8007cbc:	9b07      	ldr	r3, [sp, #28]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	dd08      	ble.n	8007cd4 <_strtod_l+0x75c>
 8007cc2:	4650      	mov	r0, sl
 8007cc4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007cc6:	9906      	ldr	r1, [sp, #24]
 8007cc8:	f001 ff66 	bl	8009b98 <__pow5mult>
 8007ccc:	9006      	str	r0, [sp, #24]
 8007cce:	2800      	cmp	r0, #0
 8007cd0:	f43f ae91 	beq.w	80079f6 <_strtod_l+0x47e>
 8007cd4:	2c00      	cmp	r4, #0
 8007cd6:	dd08      	ble.n	8007cea <_strtod_l+0x772>
 8007cd8:	4622      	mov	r2, r4
 8007cda:	4650      	mov	r0, sl
 8007cdc:	9906      	ldr	r1, [sp, #24]
 8007cde:	f001 ffb5 	bl	8009c4c <__lshift>
 8007ce2:	9006      	str	r0, [sp, #24]
 8007ce4:	2800      	cmp	r0, #0
 8007ce6:	f43f ae86 	beq.w	80079f6 <_strtod_l+0x47e>
 8007cea:	2e00      	cmp	r6, #0
 8007cec:	dd08      	ble.n	8007d00 <_strtod_l+0x788>
 8007cee:	4632      	mov	r2, r6
 8007cf0:	4650      	mov	r0, sl
 8007cf2:	9904      	ldr	r1, [sp, #16]
 8007cf4:	f001 ffaa 	bl	8009c4c <__lshift>
 8007cf8:	9004      	str	r0, [sp, #16]
 8007cfa:	2800      	cmp	r0, #0
 8007cfc:	f43f ae7b 	beq.w	80079f6 <_strtod_l+0x47e>
 8007d00:	4650      	mov	r0, sl
 8007d02:	9a06      	ldr	r2, [sp, #24]
 8007d04:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007d06:	f002 f82d 	bl	8009d64 <__mdiff>
 8007d0a:	4683      	mov	fp, r0
 8007d0c:	2800      	cmp	r0, #0
 8007d0e:	f43f ae72 	beq.w	80079f6 <_strtod_l+0x47e>
 8007d12:	2400      	movs	r4, #0
 8007d14:	68c3      	ldr	r3, [r0, #12]
 8007d16:	9904      	ldr	r1, [sp, #16]
 8007d18:	60c4      	str	r4, [r0, #12]
 8007d1a:	930b      	str	r3, [sp, #44]	; 0x2c
 8007d1c:	f002 f806 	bl	8009d2c <__mcmp>
 8007d20:	42a0      	cmp	r0, r4
 8007d22:	da6b      	bge.n	8007dfc <_strtod_l+0x884>
 8007d24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d26:	ea53 0308 	orrs.w	r3, r3, r8
 8007d2a:	f040 8091 	bne.w	8007e50 <_strtod_l+0x8d8>
 8007d2e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	f040 808c 	bne.w	8007e50 <_strtod_l+0x8d8>
 8007d38:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007d3c:	0d1b      	lsrs	r3, r3, #20
 8007d3e:	051b      	lsls	r3, r3, #20
 8007d40:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007d44:	f240 8084 	bls.w	8007e50 <_strtod_l+0x8d8>
 8007d48:	f8db 3014 	ldr.w	r3, [fp, #20]
 8007d4c:	b91b      	cbnz	r3, 8007d56 <_strtod_l+0x7de>
 8007d4e:	f8db 3010 	ldr.w	r3, [fp, #16]
 8007d52:	2b01      	cmp	r3, #1
 8007d54:	dd7c      	ble.n	8007e50 <_strtod_l+0x8d8>
 8007d56:	4659      	mov	r1, fp
 8007d58:	2201      	movs	r2, #1
 8007d5a:	4650      	mov	r0, sl
 8007d5c:	f001 ff76 	bl	8009c4c <__lshift>
 8007d60:	9904      	ldr	r1, [sp, #16]
 8007d62:	4683      	mov	fp, r0
 8007d64:	f001 ffe2 	bl	8009d2c <__mcmp>
 8007d68:	2800      	cmp	r0, #0
 8007d6a:	dd71      	ble.n	8007e50 <_strtod_l+0x8d8>
 8007d6c:	9905      	ldr	r1, [sp, #20]
 8007d6e:	464b      	mov	r3, r9
 8007d70:	4a20      	ldr	r2, [pc, #128]	; (8007df4 <_strtod_l+0x87c>)
 8007d72:	2900      	cmp	r1, #0
 8007d74:	f000 808c 	beq.w	8007e90 <_strtod_l+0x918>
 8007d78:	ea02 0109 	and.w	r1, r2, r9
 8007d7c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007d80:	f300 8086 	bgt.w	8007e90 <_strtod_l+0x918>
 8007d84:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007d88:	f77f aeaa 	ble.w	8007ae0 <_strtod_l+0x568>
 8007d8c:	4640      	mov	r0, r8
 8007d8e:	4649      	mov	r1, r9
 8007d90:	4b19      	ldr	r3, [pc, #100]	; (8007df8 <_strtod_l+0x880>)
 8007d92:	2200      	movs	r2, #0
 8007d94:	f7f8 fbaa 	bl	80004ec <__aeabi_dmul>
 8007d98:	460b      	mov	r3, r1
 8007d9a:	4303      	orrs	r3, r0
 8007d9c:	bf08      	it	eq
 8007d9e:	2322      	moveq	r3, #34	; 0x22
 8007da0:	4680      	mov	r8, r0
 8007da2:	4689      	mov	r9, r1
 8007da4:	bf08      	it	eq
 8007da6:	f8ca 3000 	streq.w	r3, [sl]
 8007daa:	e62f      	b.n	8007a0c <_strtod_l+0x494>
 8007dac:	f04f 32ff 	mov.w	r2, #4294967295
 8007db0:	fa02 f303 	lsl.w	r3, r2, r3
 8007db4:	ea03 0808 	and.w	r8, r3, r8
 8007db8:	e6e0      	b.n	8007b7c <_strtod_l+0x604>
 8007dba:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8007dbe:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8007dc2:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8007dc6:	35e2      	adds	r5, #226	; 0xe2
 8007dc8:	fa07 f505 	lsl.w	r5, r7, r5
 8007dcc:	970f      	str	r7, [sp, #60]	; 0x3c
 8007dce:	e747      	b.n	8007c60 <_strtod_l+0x6e8>
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	2500      	movs	r5, #0
 8007dd4:	930f      	str	r3, [sp, #60]	; 0x3c
 8007dd6:	e743      	b.n	8007c60 <_strtod_l+0x6e8>
 8007dd8:	463a      	mov	r2, r7
 8007dda:	4650      	mov	r0, sl
 8007ddc:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007dde:	f001 ff35 	bl	8009c4c <__lshift>
 8007de2:	901a      	str	r0, [sp, #104]	; 0x68
 8007de4:	2800      	cmp	r0, #0
 8007de6:	f47f af69 	bne.w	8007cbc <_strtod_l+0x744>
 8007dea:	e604      	b.n	80079f6 <_strtod_l+0x47e>
 8007dec:	0800b4b0 	.word	0x0800b4b0
 8007df0:	fffffc02 	.word	0xfffffc02
 8007df4:	7ff00000 	.word	0x7ff00000
 8007df8:	39500000 	.word	0x39500000
 8007dfc:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007e00:	d165      	bne.n	8007ece <_strtod_l+0x956>
 8007e02:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007e04:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007e08:	b35a      	cbz	r2, 8007e62 <_strtod_l+0x8ea>
 8007e0a:	4a99      	ldr	r2, [pc, #612]	; (8008070 <_strtod_l+0xaf8>)
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d12b      	bne.n	8007e68 <_strtod_l+0x8f0>
 8007e10:	9b05      	ldr	r3, [sp, #20]
 8007e12:	4641      	mov	r1, r8
 8007e14:	b303      	cbz	r3, 8007e58 <_strtod_l+0x8e0>
 8007e16:	464a      	mov	r2, r9
 8007e18:	4b96      	ldr	r3, [pc, #600]	; (8008074 <_strtod_l+0xafc>)
 8007e1a:	4013      	ands	r3, r2
 8007e1c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007e20:	f04f 32ff 	mov.w	r2, #4294967295
 8007e24:	d81b      	bhi.n	8007e5e <_strtod_l+0x8e6>
 8007e26:	0d1b      	lsrs	r3, r3, #20
 8007e28:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8007e30:	4299      	cmp	r1, r3
 8007e32:	d119      	bne.n	8007e68 <_strtod_l+0x8f0>
 8007e34:	4b90      	ldr	r3, [pc, #576]	; (8008078 <_strtod_l+0xb00>)
 8007e36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e38:	429a      	cmp	r2, r3
 8007e3a:	d102      	bne.n	8007e42 <_strtod_l+0x8ca>
 8007e3c:	3101      	adds	r1, #1
 8007e3e:	f43f adda 	beq.w	80079f6 <_strtod_l+0x47e>
 8007e42:	f04f 0800 	mov.w	r8, #0
 8007e46:	4b8b      	ldr	r3, [pc, #556]	; (8008074 <_strtod_l+0xafc>)
 8007e48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e4a:	401a      	ands	r2, r3
 8007e4c:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8007e50:	9b05      	ldr	r3, [sp, #20]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d19a      	bne.n	8007d8c <_strtod_l+0x814>
 8007e56:	e5d9      	b.n	8007a0c <_strtod_l+0x494>
 8007e58:	f04f 33ff 	mov.w	r3, #4294967295
 8007e5c:	e7e8      	b.n	8007e30 <_strtod_l+0x8b8>
 8007e5e:	4613      	mov	r3, r2
 8007e60:	e7e6      	b.n	8007e30 <_strtod_l+0x8b8>
 8007e62:	ea53 0308 	orrs.w	r3, r3, r8
 8007e66:	d081      	beq.n	8007d6c <_strtod_l+0x7f4>
 8007e68:	b1e5      	cbz	r5, 8007ea4 <_strtod_l+0x92c>
 8007e6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e6c:	421d      	tst	r5, r3
 8007e6e:	d0ef      	beq.n	8007e50 <_strtod_l+0x8d8>
 8007e70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e72:	4640      	mov	r0, r8
 8007e74:	4649      	mov	r1, r9
 8007e76:	9a05      	ldr	r2, [sp, #20]
 8007e78:	b1c3      	cbz	r3, 8007eac <_strtod_l+0x934>
 8007e7a:	f7ff fb5c 	bl	8007536 <sulp>
 8007e7e:	4602      	mov	r2, r0
 8007e80:	460b      	mov	r3, r1
 8007e82:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007e86:	f7f8 f97b 	bl	8000180 <__adddf3>
 8007e8a:	4680      	mov	r8, r0
 8007e8c:	4689      	mov	r9, r1
 8007e8e:	e7df      	b.n	8007e50 <_strtod_l+0x8d8>
 8007e90:	4013      	ands	r3, r2
 8007e92:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007e96:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8007e9a:	f04f 38ff 	mov.w	r8, #4294967295
 8007e9e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8007ea2:	e7d5      	b.n	8007e50 <_strtod_l+0x8d8>
 8007ea4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007ea6:	ea13 0f08 	tst.w	r3, r8
 8007eaa:	e7e0      	b.n	8007e6e <_strtod_l+0x8f6>
 8007eac:	f7ff fb43 	bl	8007536 <sulp>
 8007eb0:	4602      	mov	r2, r0
 8007eb2:	460b      	mov	r3, r1
 8007eb4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007eb8:	f7f8 f960 	bl	800017c <__aeabi_dsub>
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	4680      	mov	r8, r0
 8007ec2:	4689      	mov	r9, r1
 8007ec4:	f7f8 fd7a 	bl	80009bc <__aeabi_dcmpeq>
 8007ec8:	2800      	cmp	r0, #0
 8007eca:	d0c1      	beq.n	8007e50 <_strtod_l+0x8d8>
 8007ecc:	e608      	b.n	8007ae0 <_strtod_l+0x568>
 8007ece:	4658      	mov	r0, fp
 8007ed0:	9904      	ldr	r1, [sp, #16]
 8007ed2:	f002 f8a9 	bl	800a028 <__ratio>
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007edc:	4606      	mov	r6, r0
 8007ede:	460f      	mov	r7, r1
 8007ee0:	f7f8 fd80 	bl	80009e4 <__aeabi_dcmple>
 8007ee4:	2800      	cmp	r0, #0
 8007ee6:	d070      	beq.n	8007fca <_strtod_l+0xa52>
 8007ee8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d042      	beq.n	8007f74 <_strtod_l+0x9fc>
 8007eee:	2600      	movs	r6, #0
 8007ef0:	4f62      	ldr	r7, [pc, #392]	; (800807c <_strtod_l+0xb04>)
 8007ef2:	4d62      	ldr	r5, [pc, #392]	; (800807c <_strtod_l+0xb04>)
 8007ef4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ef6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007efa:	0d1b      	lsrs	r3, r3, #20
 8007efc:	051b      	lsls	r3, r3, #20
 8007efe:	930f      	str	r3, [sp, #60]	; 0x3c
 8007f00:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007f02:	4b5f      	ldr	r3, [pc, #380]	; (8008080 <_strtod_l+0xb08>)
 8007f04:	429a      	cmp	r2, r3
 8007f06:	f040 80c3 	bne.w	8008090 <_strtod_l+0xb18>
 8007f0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f0c:	4640      	mov	r0, r8
 8007f0e:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8007f12:	4649      	mov	r1, r9
 8007f14:	f001 ffb2 	bl	8009e7c <__ulp>
 8007f18:	4602      	mov	r2, r0
 8007f1a:	460b      	mov	r3, r1
 8007f1c:	4630      	mov	r0, r6
 8007f1e:	4639      	mov	r1, r7
 8007f20:	f7f8 fae4 	bl	80004ec <__aeabi_dmul>
 8007f24:	4642      	mov	r2, r8
 8007f26:	464b      	mov	r3, r9
 8007f28:	f7f8 f92a 	bl	8000180 <__adddf3>
 8007f2c:	460b      	mov	r3, r1
 8007f2e:	4951      	ldr	r1, [pc, #324]	; (8008074 <_strtod_l+0xafc>)
 8007f30:	4a54      	ldr	r2, [pc, #336]	; (8008084 <_strtod_l+0xb0c>)
 8007f32:	4019      	ands	r1, r3
 8007f34:	4291      	cmp	r1, r2
 8007f36:	4680      	mov	r8, r0
 8007f38:	d95d      	bls.n	8007ff6 <_strtod_l+0xa7e>
 8007f3a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007f3c:	4b4e      	ldr	r3, [pc, #312]	; (8008078 <_strtod_l+0xb00>)
 8007f3e:	429a      	cmp	r2, r3
 8007f40:	d103      	bne.n	8007f4a <_strtod_l+0x9d2>
 8007f42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007f44:	3301      	adds	r3, #1
 8007f46:	f43f ad56 	beq.w	80079f6 <_strtod_l+0x47e>
 8007f4a:	f04f 38ff 	mov.w	r8, #4294967295
 8007f4e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8008078 <_strtod_l+0xb00>
 8007f52:	4650      	mov	r0, sl
 8007f54:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007f56:	f001 fc61 	bl	800981c <_Bfree>
 8007f5a:	4650      	mov	r0, sl
 8007f5c:	9906      	ldr	r1, [sp, #24]
 8007f5e:	f001 fc5d 	bl	800981c <_Bfree>
 8007f62:	4650      	mov	r0, sl
 8007f64:	9904      	ldr	r1, [sp, #16]
 8007f66:	f001 fc59 	bl	800981c <_Bfree>
 8007f6a:	4659      	mov	r1, fp
 8007f6c:	4650      	mov	r0, sl
 8007f6e:	f001 fc55 	bl	800981c <_Bfree>
 8007f72:	e627      	b.n	8007bc4 <_strtod_l+0x64c>
 8007f74:	f1b8 0f00 	cmp.w	r8, #0
 8007f78:	d119      	bne.n	8007fae <_strtod_l+0xa36>
 8007f7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007f80:	b9e3      	cbnz	r3, 8007fbc <_strtod_l+0xa44>
 8007f82:	2200      	movs	r2, #0
 8007f84:	4630      	mov	r0, r6
 8007f86:	4639      	mov	r1, r7
 8007f88:	4b3c      	ldr	r3, [pc, #240]	; (800807c <_strtod_l+0xb04>)
 8007f8a:	f7f8 fd21 	bl	80009d0 <__aeabi_dcmplt>
 8007f8e:	b9c8      	cbnz	r0, 8007fc4 <_strtod_l+0xa4c>
 8007f90:	2200      	movs	r2, #0
 8007f92:	4630      	mov	r0, r6
 8007f94:	4639      	mov	r1, r7
 8007f96:	4b3c      	ldr	r3, [pc, #240]	; (8008088 <_strtod_l+0xb10>)
 8007f98:	f7f8 faa8 	bl	80004ec <__aeabi_dmul>
 8007f9c:	4604      	mov	r4, r0
 8007f9e:	460d      	mov	r5, r1
 8007fa0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8007fa4:	9416      	str	r4, [sp, #88]	; 0x58
 8007fa6:	9317      	str	r3, [sp, #92]	; 0x5c
 8007fa8:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 8007fac:	e7a2      	b.n	8007ef4 <_strtod_l+0x97c>
 8007fae:	f1b8 0f01 	cmp.w	r8, #1
 8007fb2:	d103      	bne.n	8007fbc <_strtod_l+0xa44>
 8007fb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	f43f ad92 	beq.w	8007ae0 <_strtod_l+0x568>
 8007fbc:	2600      	movs	r6, #0
 8007fbe:	2400      	movs	r4, #0
 8007fc0:	4f32      	ldr	r7, [pc, #200]	; (800808c <_strtod_l+0xb14>)
 8007fc2:	e796      	b.n	8007ef2 <_strtod_l+0x97a>
 8007fc4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8007fc6:	4d30      	ldr	r5, [pc, #192]	; (8008088 <_strtod_l+0xb10>)
 8007fc8:	e7ea      	b.n	8007fa0 <_strtod_l+0xa28>
 8007fca:	4b2f      	ldr	r3, [pc, #188]	; (8008088 <_strtod_l+0xb10>)
 8007fcc:	2200      	movs	r2, #0
 8007fce:	4630      	mov	r0, r6
 8007fd0:	4639      	mov	r1, r7
 8007fd2:	f7f8 fa8b 	bl	80004ec <__aeabi_dmul>
 8007fd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007fd8:	4604      	mov	r4, r0
 8007fda:	460d      	mov	r5, r1
 8007fdc:	b933      	cbnz	r3, 8007fec <_strtod_l+0xa74>
 8007fde:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007fe2:	9010      	str	r0, [sp, #64]	; 0x40
 8007fe4:	9311      	str	r3, [sp, #68]	; 0x44
 8007fe6:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007fea:	e783      	b.n	8007ef4 <_strtod_l+0x97c>
 8007fec:	4602      	mov	r2, r0
 8007fee:	460b      	mov	r3, r1
 8007ff0:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8007ff4:	e7f7      	b.n	8007fe6 <_strtod_l+0xa6e>
 8007ff6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8007ffa:	9b05      	ldr	r3, [sp, #20]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d1a8      	bne.n	8007f52 <_strtod_l+0x9da>
 8008000:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008004:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008006:	0d1b      	lsrs	r3, r3, #20
 8008008:	051b      	lsls	r3, r3, #20
 800800a:	429a      	cmp	r2, r3
 800800c:	d1a1      	bne.n	8007f52 <_strtod_l+0x9da>
 800800e:	4620      	mov	r0, r4
 8008010:	4629      	mov	r1, r5
 8008012:	f7f8 fd63 	bl	8000adc <__aeabi_d2lz>
 8008016:	f7f8 fa3b 	bl	8000490 <__aeabi_l2d>
 800801a:	4602      	mov	r2, r0
 800801c:	460b      	mov	r3, r1
 800801e:	4620      	mov	r0, r4
 8008020:	4629      	mov	r1, r5
 8008022:	f7f8 f8ab 	bl	800017c <__aeabi_dsub>
 8008026:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008028:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800802c:	ea43 0308 	orr.w	r3, r3, r8
 8008030:	4313      	orrs	r3, r2
 8008032:	4604      	mov	r4, r0
 8008034:	460d      	mov	r5, r1
 8008036:	d066      	beq.n	8008106 <_strtod_l+0xb8e>
 8008038:	a309      	add	r3, pc, #36	; (adr r3, 8008060 <_strtod_l+0xae8>)
 800803a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800803e:	f7f8 fcc7 	bl	80009d0 <__aeabi_dcmplt>
 8008042:	2800      	cmp	r0, #0
 8008044:	f47f ace2 	bne.w	8007a0c <_strtod_l+0x494>
 8008048:	a307      	add	r3, pc, #28	; (adr r3, 8008068 <_strtod_l+0xaf0>)
 800804a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800804e:	4620      	mov	r0, r4
 8008050:	4629      	mov	r1, r5
 8008052:	f7f8 fcdb 	bl	8000a0c <__aeabi_dcmpgt>
 8008056:	2800      	cmp	r0, #0
 8008058:	f43f af7b 	beq.w	8007f52 <_strtod_l+0x9da>
 800805c:	e4d6      	b.n	8007a0c <_strtod_l+0x494>
 800805e:	bf00      	nop
 8008060:	94a03595 	.word	0x94a03595
 8008064:	3fdfffff 	.word	0x3fdfffff
 8008068:	35afe535 	.word	0x35afe535
 800806c:	3fe00000 	.word	0x3fe00000
 8008070:	000fffff 	.word	0x000fffff
 8008074:	7ff00000 	.word	0x7ff00000
 8008078:	7fefffff 	.word	0x7fefffff
 800807c:	3ff00000 	.word	0x3ff00000
 8008080:	7fe00000 	.word	0x7fe00000
 8008084:	7c9fffff 	.word	0x7c9fffff
 8008088:	3fe00000 	.word	0x3fe00000
 800808c:	bff00000 	.word	0xbff00000
 8008090:	9b05      	ldr	r3, [sp, #20]
 8008092:	b313      	cbz	r3, 80080da <_strtod_l+0xb62>
 8008094:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008096:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800809a:	d81e      	bhi.n	80080da <_strtod_l+0xb62>
 800809c:	a326      	add	r3, pc, #152	; (adr r3, 8008138 <_strtod_l+0xbc0>)
 800809e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080a2:	4620      	mov	r0, r4
 80080a4:	4629      	mov	r1, r5
 80080a6:	f7f8 fc9d 	bl	80009e4 <__aeabi_dcmple>
 80080aa:	b190      	cbz	r0, 80080d2 <_strtod_l+0xb5a>
 80080ac:	4629      	mov	r1, r5
 80080ae:	4620      	mov	r0, r4
 80080b0:	f7f8 fcf4 	bl	8000a9c <__aeabi_d2uiz>
 80080b4:	2801      	cmp	r0, #1
 80080b6:	bf38      	it	cc
 80080b8:	2001      	movcc	r0, #1
 80080ba:	f7f8 f99d 	bl	80003f8 <__aeabi_ui2d>
 80080be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80080c0:	4604      	mov	r4, r0
 80080c2:	460d      	mov	r5, r1
 80080c4:	b9d3      	cbnz	r3, 80080fc <_strtod_l+0xb84>
 80080c6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80080ca:	9012      	str	r0, [sp, #72]	; 0x48
 80080cc:	9313      	str	r3, [sp, #76]	; 0x4c
 80080ce:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 80080d2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80080d4:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 80080d8:	1a9f      	subs	r7, r3, r2
 80080da:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80080de:	f001 fecd 	bl	8009e7c <__ulp>
 80080e2:	4602      	mov	r2, r0
 80080e4:	460b      	mov	r3, r1
 80080e6:	4630      	mov	r0, r6
 80080e8:	4639      	mov	r1, r7
 80080ea:	f7f8 f9ff 	bl	80004ec <__aeabi_dmul>
 80080ee:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80080f2:	f7f8 f845 	bl	8000180 <__adddf3>
 80080f6:	4680      	mov	r8, r0
 80080f8:	4689      	mov	r9, r1
 80080fa:	e77e      	b.n	8007ffa <_strtod_l+0xa82>
 80080fc:	4602      	mov	r2, r0
 80080fe:	460b      	mov	r3, r1
 8008100:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8008104:	e7e3      	b.n	80080ce <_strtod_l+0xb56>
 8008106:	a30e      	add	r3, pc, #56	; (adr r3, 8008140 <_strtod_l+0xbc8>)
 8008108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800810c:	f7f8 fc60 	bl	80009d0 <__aeabi_dcmplt>
 8008110:	e7a1      	b.n	8008056 <_strtod_l+0xade>
 8008112:	2300      	movs	r3, #0
 8008114:	930a      	str	r3, [sp, #40]	; 0x28
 8008116:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008118:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800811a:	6013      	str	r3, [r2, #0]
 800811c:	f7ff ba71 	b.w	8007602 <_strtod_l+0x8a>
 8008120:	2a65      	cmp	r2, #101	; 0x65
 8008122:	f43f ab63 	beq.w	80077ec <_strtod_l+0x274>
 8008126:	2a45      	cmp	r2, #69	; 0x45
 8008128:	f43f ab60 	beq.w	80077ec <_strtod_l+0x274>
 800812c:	2301      	movs	r3, #1
 800812e:	f7ff bb95 	b.w	800785c <_strtod_l+0x2e4>
 8008132:	bf00      	nop
 8008134:	f3af 8000 	nop.w
 8008138:	ffc00000 	.word	0xffc00000
 800813c:	41dfffff 	.word	0x41dfffff
 8008140:	94a03595 	.word	0x94a03595
 8008144:	3fcfffff 	.word	0x3fcfffff

08008148 <strtod>:
 8008148:	460a      	mov	r2, r1
 800814a:	4601      	mov	r1, r0
 800814c:	4802      	ldr	r0, [pc, #8]	; (8008158 <strtod+0x10>)
 800814e:	4b03      	ldr	r3, [pc, #12]	; (800815c <strtod+0x14>)
 8008150:	6800      	ldr	r0, [r0, #0]
 8008152:	f7ff ba11 	b.w	8007578 <_strtod_l>
 8008156:	bf00      	nop
 8008158:	20000190 	.word	0x20000190
 800815c:	200001f8 	.word	0x200001f8

08008160 <strtok>:
 8008160:	4b16      	ldr	r3, [pc, #88]	; (80081bc <strtok+0x5c>)
 8008162:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008166:	681f      	ldr	r7, [r3, #0]
 8008168:	4605      	mov	r5, r0
 800816a:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 800816c:	460e      	mov	r6, r1
 800816e:	b9ec      	cbnz	r4, 80081ac <strtok+0x4c>
 8008170:	2050      	movs	r0, #80	; 0x50
 8008172:	f001 faeb 	bl	800974c <malloc>
 8008176:	4602      	mov	r2, r0
 8008178:	65b8      	str	r0, [r7, #88]	; 0x58
 800817a:	b920      	cbnz	r0, 8008186 <strtok+0x26>
 800817c:	2157      	movs	r1, #87	; 0x57
 800817e:	4b10      	ldr	r3, [pc, #64]	; (80081c0 <strtok+0x60>)
 8008180:	4810      	ldr	r0, [pc, #64]	; (80081c4 <strtok+0x64>)
 8008182:	f000 f8cf 	bl	8008324 <__assert_func>
 8008186:	e9c0 4400 	strd	r4, r4, [r0]
 800818a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800818e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8008192:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8008196:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800819a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800819e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80081a2:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80081a6:	6184      	str	r4, [r0, #24]
 80081a8:	7704      	strb	r4, [r0, #28]
 80081aa:	6244      	str	r4, [r0, #36]	; 0x24
 80081ac:	4631      	mov	r1, r6
 80081ae:	4628      	mov	r0, r5
 80081b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80081b2:	2301      	movs	r3, #1
 80081b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80081b8:	f000 b806 	b.w	80081c8 <__strtok_r>
 80081bc:	20000190 	.word	0x20000190
 80081c0:	0800b4d8 	.word	0x0800b4d8
 80081c4:	0800b4ef 	.word	0x0800b4ef

080081c8 <__strtok_r>:
 80081c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80081ca:	b908      	cbnz	r0, 80081d0 <__strtok_r+0x8>
 80081cc:	6810      	ldr	r0, [r2, #0]
 80081ce:	b188      	cbz	r0, 80081f4 <__strtok_r+0x2c>
 80081d0:	4604      	mov	r4, r0
 80081d2:	460f      	mov	r7, r1
 80081d4:	4620      	mov	r0, r4
 80081d6:	f814 5b01 	ldrb.w	r5, [r4], #1
 80081da:	f817 6b01 	ldrb.w	r6, [r7], #1
 80081de:	b91e      	cbnz	r6, 80081e8 <__strtok_r+0x20>
 80081e0:	b965      	cbnz	r5, 80081fc <__strtok_r+0x34>
 80081e2:	4628      	mov	r0, r5
 80081e4:	6015      	str	r5, [r2, #0]
 80081e6:	e005      	b.n	80081f4 <__strtok_r+0x2c>
 80081e8:	42b5      	cmp	r5, r6
 80081ea:	d1f6      	bne.n	80081da <__strtok_r+0x12>
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d1f0      	bne.n	80081d2 <__strtok_r+0xa>
 80081f0:	6014      	str	r4, [r2, #0]
 80081f2:	7003      	strb	r3, [r0, #0]
 80081f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081f6:	461c      	mov	r4, r3
 80081f8:	e00c      	b.n	8008214 <__strtok_r+0x4c>
 80081fa:	b915      	cbnz	r5, 8008202 <__strtok_r+0x3a>
 80081fc:	460e      	mov	r6, r1
 80081fe:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008202:	f816 5b01 	ldrb.w	r5, [r6], #1
 8008206:	42ab      	cmp	r3, r5
 8008208:	d1f7      	bne.n	80081fa <__strtok_r+0x32>
 800820a:	2b00      	cmp	r3, #0
 800820c:	d0f3      	beq.n	80081f6 <__strtok_r+0x2e>
 800820e:	2300      	movs	r3, #0
 8008210:	f804 3c01 	strb.w	r3, [r4, #-1]
 8008214:	6014      	str	r4, [r2, #0]
 8008216:	e7ed      	b.n	80081f4 <__strtok_r+0x2c>

08008218 <_strtol_l.constprop.0>:
 8008218:	2b01      	cmp	r3, #1
 800821a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800821e:	4680      	mov	r8, r0
 8008220:	d001      	beq.n	8008226 <_strtol_l.constprop.0+0xe>
 8008222:	2b24      	cmp	r3, #36	; 0x24
 8008224:	d906      	bls.n	8008234 <_strtol_l.constprop.0+0x1c>
 8008226:	f7fe fcaf 	bl	8006b88 <__errno>
 800822a:	2316      	movs	r3, #22
 800822c:	6003      	str	r3, [r0, #0]
 800822e:	2000      	movs	r0, #0
 8008230:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008234:	460d      	mov	r5, r1
 8008236:	4f35      	ldr	r7, [pc, #212]	; (800830c <_strtol_l.constprop.0+0xf4>)
 8008238:	4628      	mov	r0, r5
 800823a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800823e:	5de6      	ldrb	r6, [r4, r7]
 8008240:	f016 0608 	ands.w	r6, r6, #8
 8008244:	d1f8      	bne.n	8008238 <_strtol_l.constprop.0+0x20>
 8008246:	2c2d      	cmp	r4, #45	; 0x2d
 8008248:	d12f      	bne.n	80082aa <_strtol_l.constprop.0+0x92>
 800824a:	2601      	movs	r6, #1
 800824c:	782c      	ldrb	r4, [r5, #0]
 800824e:	1c85      	adds	r5, r0, #2
 8008250:	2b00      	cmp	r3, #0
 8008252:	d057      	beq.n	8008304 <_strtol_l.constprop.0+0xec>
 8008254:	2b10      	cmp	r3, #16
 8008256:	d109      	bne.n	800826c <_strtol_l.constprop.0+0x54>
 8008258:	2c30      	cmp	r4, #48	; 0x30
 800825a:	d107      	bne.n	800826c <_strtol_l.constprop.0+0x54>
 800825c:	7828      	ldrb	r0, [r5, #0]
 800825e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8008262:	2858      	cmp	r0, #88	; 0x58
 8008264:	d149      	bne.n	80082fa <_strtol_l.constprop.0+0xe2>
 8008266:	2310      	movs	r3, #16
 8008268:	786c      	ldrb	r4, [r5, #1]
 800826a:	3502      	adds	r5, #2
 800826c:	2700      	movs	r7, #0
 800826e:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8008272:	f10e 3eff 	add.w	lr, lr, #4294967295
 8008276:	fbbe f9f3 	udiv	r9, lr, r3
 800827a:	4638      	mov	r0, r7
 800827c:	fb03 ea19 	mls	sl, r3, r9, lr
 8008280:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8008284:	f1bc 0f09 	cmp.w	ip, #9
 8008288:	d814      	bhi.n	80082b4 <_strtol_l.constprop.0+0x9c>
 800828a:	4664      	mov	r4, ip
 800828c:	42a3      	cmp	r3, r4
 800828e:	dd22      	ble.n	80082d6 <_strtol_l.constprop.0+0xbe>
 8008290:	2f00      	cmp	r7, #0
 8008292:	db1d      	blt.n	80082d0 <_strtol_l.constprop.0+0xb8>
 8008294:	4581      	cmp	r9, r0
 8008296:	d31b      	bcc.n	80082d0 <_strtol_l.constprop.0+0xb8>
 8008298:	d101      	bne.n	800829e <_strtol_l.constprop.0+0x86>
 800829a:	45a2      	cmp	sl, r4
 800829c:	db18      	blt.n	80082d0 <_strtol_l.constprop.0+0xb8>
 800829e:	2701      	movs	r7, #1
 80082a0:	fb00 4003 	mla	r0, r0, r3, r4
 80082a4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80082a8:	e7ea      	b.n	8008280 <_strtol_l.constprop.0+0x68>
 80082aa:	2c2b      	cmp	r4, #43	; 0x2b
 80082ac:	bf04      	itt	eq
 80082ae:	782c      	ldrbeq	r4, [r5, #0]
 80082b0:	1c85      	addeq	r5, r0, #2
 80082b2:	e7cd      	b.n	8008250 <_strtol_l.constprop.0+0x38>
 80082b4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80082b8:	f1bc 0f19 	cmp.w	ip, #25
 80082bc:	d801      	bhi.n	80082c2 <_strtol_l.constprop.0+0xaa>
 80082be:	3c37      	subs	r4, #55	; 0x37
 80082c0:	e7e4      	b.n	800828c <_strtol_l.constprop.0+0x74>
 80082c2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80082c6:	f1bc 0f19 	cmp.w	ip, #25
 80082ca:	d804      	bhi.n	80082d6 <_strtol_l.constprop.0+0xbe>
 80082cc:	3c57      	subs	r4, #87	; 0x57
 80082ce:	e7dd      	b.n	800828c <_strtol_l.constprop.0+0x74>
 80082d0:	f04f 37ff 	mov.w	r7, #4294967295
 80082d4:	e7e6      	b.n	80082a4 <_strtol_l.constprop.0+0x8c>
 80082d6:	2f00      	cmp	r7, #0
 80082d8:	da07      	bge.n	80082ea <_strtol_l.constprop.0+0xd2>
 80082da:	2322      	movs	r3, #34	; 0x22
 80082dc:	4670      	mov	r0, lr
 80082de:	f8c8 3000 	str.w	r3, [r8]
 80082e2:	2a00      	cmp	r2, #0
 80082e4:	d0a4      	beq.n	8008230 <_strtol_l.constprop.0+0x18>
 80082e6:	1e69      	subs	r1, r5, #1
 80082e8:	e005      	b.n	80082f6 <_strtol_l.constprop.0+0xde>
 80082ea:	b106      	cbz	r6, 80082ee <_strtol_l.constprop.0+0xd6>
 80082ec:	4240      	negs	r0, r0
 80082ee:	2a00      	cmp	r2, #0
 80082f0:	d09e      	beq.n	8008230 <_strtol_l.constprop.0+0x18>
 80082f2:	2f00      	cmp	r7, #0
 80082f4:	d1f7      	bne.n	80082e6 <_strtol_l.constprop.0+0xce>
 80082f6:	6011      	str	r1, [r2, #0]
 80082f8:	e79a      	b.n	8008230 <_strtol_l.constprop.0+0x18>
 80082fa:	2430      	movs	r4, #48	; 0x30
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d1b5      	bne.n	800826c <_strtol_l.constprop.0+0x54>
 8008300:	2308      	movs	r3, #8
 8008302:	e7b3      	b.n	800826c <_strtol_l.constprop.0+0x54>
 8008304:	2c30      	cmp	r4, #48	; 0x30
 8008306:	d0a9      	beq.n	800825c <_strtol_l.constprop.0+0x44>
 8008308:	230a      	movs	r3, #10
 800830a:	e7af      	b.n	800826c <_strtol_l.constprop.0+0x54>
 800830c:	0800b589 	.word	0x0800b589

08008310 <strtol>:
 8008310:	4613      	mov	r3, r2
 8008312:	460a      	mov	r2, r1
 8008314:	4601      	mov	r1, r0
 8008316:	4802      	ldr	r0, [pc, #8]	; (8008320 <strtol+0x10>)
 8008318:	6800      	ldr	r0, [r0, #0]
 800831a:	f7ff bf7d 	b.w	8008218 <_strtol_l.constprop.0>
 800831e:	bf00      	nop
 8008320:	20000190 	.word	0x20000190

08008324 <__assert_func>:
 8008324:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008326:	4614      	mov	r4, r2
 8008328:	461a      	mov	r2, r3
 800832a:	4b09      	ldr	r3, [pc, #36]	; (8008350 <__assert_func+0x2c>)
 800832c:	4605      	mov	r5, r0
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	68d8      	ldr	r0, [r3, #12]
 8008332:	b14c      	cbz	r4, 8008348 <__assert_func+0x24>
 8008334:	4b07      	ldr	r3, [pc, #28]	; (8008354 <__assert_func+0x30>)
 8008336:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800833a:	9100      	str	r1, [sp, #0]
 800833c:	462b      	mov	r3, r5
 800833e:	4906      	ldr	r1, [pc, #24]	; (8008358 <__assert_func+0x34>)
 8008340:	f000 fe88 	bl	8009054 <fiprintf>
 8008344:	f002 fb7e 	bl	800aa44 <abort>
 8008348:	4b04      	ldr	r3, [pc, #16]	; (800835c <__assert_func+0x38>)
 800834a:	461c      	mov	r4, r3
 800834c:	e7f3      	b.n	8008336 <__assert_func+0x12>
 800834e:	bf00      	nop
 8008350:	20000190 	.word	0x20000190
 8008354:	0800b54c 	.word	0x0800b54c
 8008358:	0800b559 	.word	0x0800b559
 800835c:	0800b587 	.word	0x0800b587

08008360 <quorem>:
 8008360:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008364:	6903      	ldr	r3, [r0, #16]
 8008366:	690c      	ldr	r4, [r1, #16]
 8008368:	4607      	mov	r7, r0
 800836a:	42a3      	cmp	r3, r4
 800836c:	f2c0 8082 	blt.w	8008474 <quorem+0x114>
 8008370:	3c01      	subs	r4, #1
 8008372:	f100 0514 	add.w	r5, r0, #20
 8008376:	f101 0814 	add.w	r8, r1, #20
 800837a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800837e:	9301      	str	r3, [sp, #4]
 8008380:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008384:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008388:	3301      	adds	r3, #1
 800838a:	429a      	cmp	r2, r3
 800838c:	fbb2 f6f3 	udiv	r6, r2, r3
 8008390:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008394:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008398:	d331      	bcc.n	80083fe <quorem+0x9e>
 800839a:	f04f 0e00 	mov.w	lr, #0
 800839e:	4640      	mov	r0, r8
 80083a0:	46ac      	mov	ip, r5
 80083a2:	46f2      	mov	sl, lr
 80083a4:	f850 2b04 	ldr.w	r2, [r0], #4
 80083a8:	b293      	uxth	r3, r2
 80083aa:	fb06 e303 	mla	r3, r6, r3, lr
 80083ae:	0c12      	lsrs	r2, r2, #16
 80083b0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80083b4:	b29b      	uxth	r3, r3
 80083b6:	fb06 e202 	mla	r2, r6, r2, lr
 80083ba:	ebaa 0303 	sub.w	r3, sl, r3
 80083be:	f8dc a000 	ldr.w	sl, [ip]
 80083c2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80083c6:	fa1f fa8a 	uxth.w	sl, sl
 80083ca:	4453      	add	r3, sl
 80083cc:	f8dc a000 	ldr.w	sl, [ip]
 80083d0:	b292      	uxth	r2, r2
 80083d2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80083d6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80083da:	b29b      	uxth	r3, r3
 80083dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80083e0:	4581      	cmp	r9, r0
 80083e2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80083e6:	f84c 3b04 	str.w	r3, [ip], #4
 80083ea:	d2db      	bcs.n	80083a4 <quorem+0x44>
 80083ec:	f855 300b 	ldr.w	r3, [r5, fp]
 80083f0:	b92b      	cbnz	r3, 80083fe <quorem+0x9e>
 80083f2:	9b01      	ldr	r3, [sp, #4]
 80083f4:	3b04      	subs	r3, #4
 80083f6:	429d      	cmp	r5, r3
 80083f8:	461a      	mov	r2, r3
 80083fa:	d32f      	bcc.n	800845c <quorem+0xfc>
 80083fc:	613c      	str	r4, [r7, #16]
 80083fe:	4638      	mov	r0, r7
 8008400:	f001 fc94 	bl	8009d2c <__mcmp>
 8008404:	2800      	cmp	r0, #0
 8008406:	db25      	blt.n	8008454 <quorem+0xf4>
 8008408:	4628      	mov	r0, r5
 800840a:	f04f 0c00 	mov.w	ip, #0
 800840e:	3601      	adds	r6, #1
 8008410:	f858 1b04 	ldr.w	r1, [r8], #4
 8008414:	f8d0 e000 	ldr.w	lr, [r0]
 8008418:	b28b      	uxth	r3, r1
 800841a:	ebac 0303 	sub.w	r3, ip, r3
 800841e:	fa1f f28e 	uxth.w	r2, lr
 8008422:	4413      	add	r3, r2
 8008424:	0c0a      	lsrs	r2, r1, #16
 8008426:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800842a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800842e:	b29b      	uxth	r3, r3
 8008430:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008434:	45c1      	cmp	r9, r8
 8008436:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800843a:	f840 3b04 	str.w	r3, [r0], #4
 800843e:	d2e7      	bcs.n	8008410 <quorem+0xb0>
 8008440:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008444:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008448:	b922      	cbnz	r2, 8008454 <quorem+0xf4>
 800844a:	3b04      	subs	r3, #4
 800844c:	429d      	cmp	r5, r3
 800844e:	461a      	mov	r2, r3
 8008450:	d30a      	bcc.n	8008468 <quorem+0x108>
 8008452:	613c      	str	r4, [r7, #16]
 8008454:	4630      	mov	r0, r6
 8008456:	b003      	add	sp, #12
 8008458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800845c:	6812      	ldr	r2, [r2, #0]
 800845e:	3b04      	subs	r3, #4
 8008460:	2a00      	cmp	r2, #0
 8008462:	d1cb      	bne.n	80083fc <quorem+0x9c>
 8008464:	3c01      	subs	r4, #1
 8008466:	e7c6      	b.n	80083f6 <quorem+0x96>
 8008468:	6812      	ldr	r2, [r2, #0]
 800846a:	3b04      	subs	r3, #4
 800846c:	2a00      	cmp	r2, #0
 800846e:	d1f0      	bne.n	8008452 <quorem+0xf2>
 8008470:	3c01      	subs	r4, #1
 8008472:	e7eb      	b.n	800844c <quorem+0xec>
 8008474:	2000      	movs	r0, #0
 8008476:	e7ee      	b.n	8008456 <quorem+0xf6>

08008478 <_dtoa_r>:
 8008478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800847c:	4616      	mov	r6, r2
 800847e:	461f      	mov	r7, r3
 8008480:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008482:	b099      	sub	sp, #100	; 0x64
 8008484:	4605      	mov	r5, r0
 8008486:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800848a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800848e:	b974      	cbnz	r4, 80084ae <_dtoa_r+0x36>
 8008490:	2010      	movs	r0, #16
 8008492:	f001 f95b 	bl	800974c <malloc>
 8008496:	4602      	mov	r2, r0
 8008498:	6268      	str	r0, [r5, #36]	; 0x24
 800849a:	b920      	cbnz	r0, 80084a6 <_dtoa_r+0x2e>
 800849c:	21ea      	movs	r1, #234	; 0xea
 800849e:	4ba8      	ldr	r3, [pc, #672]	; (8008740 <_dtoa_r+0x2c8>)
 80084a0:	48a8      	ldr	r0, [pc, #672]	; (8008744 <_dtoa_r+0x2cc>)
 80084a2:	f7ff ff3f 	bl	8008324 <__assert_func>
 80084a6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80084aa:	6004      	str	r4, [r0, #0]
 80084ac:	60c4      	str	r4, [r0, #12]
 80084ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80084b0:	6819      	ldr	r1, [r3, #0]
 80084b2:	b151      	cbz	r1, 80084ca <_dtoa_r+0x52>
 80084b4:	685a      	ldr	r2, [r3, #4]
 80084b6:	2301      	movs	r3, #1
 80084b8:	4093      	lsls	r3, r2
 80084ba:	604a      	str	r2, [r1, #4]
 80084bc:	608b      	str	r3, [r1, #8]
 80084be:	4628      	mov	r0, r5
 80084c0:	f001 f9ac 	bl	800981c <_Bfree>
 80084c4:	2200      	movs	r2, #0
 80084c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80084c8:	601a      	str	r2, [r3, #0]
 80084ca:	1e3b      	subs	r3, r7, #0
 80084cc:	bfaf      	iteee	ge
 80084ce:	2300      	movge	r3, #0
 80084d0:	2201      	movlt	r2, #1
 80084d2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80084d6:	9305      	strlt	r3, [sp, #20]
 80084d8:	bfa8      	it	ge
 80084da:	f8c8 3000 	strge.w	r3, [r8]
 80084de:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80084e2:	4b99      	ldr	r3, [pc, #612]	; (8008748 <_dtoa_r+0x2d0>)
 80084e4:	bfb8      	it	lt
 80084e6:	f8c8 2000 	strlt.w	r2, [r8]
 80084ea:	ea33 0309 	bics.w	r3, r3, r9
 80084ee:	d119      	bne.n	8008524 <_dtoa_r+0xac>
 80084f0:	f242 730f 	movw	r3, #9999	; 0x270f
 80084f4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80084f6:	6013      	str	r3, [r2, #0]
 80084f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80084fc:	4333      	orrs	r3, r6
 80084fe:	f000 857f 	beq.w	8009000 <_dtoa_r+0xb88>
 8008502:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008504:	b953      	cbnz	r3, 800851c <_dtoa_r+0xa4>
 8008506:	4b91      	ldr	r3, [pc, #580]	; (800874c <_dtoa_r+0x2d4>)
 8008508:	e022      	b.n	8008550 <_dtoa_r+0xd8>
 800850a:	4b91      	ldr	r3, [pc, #580]	; (8008750 <_dtoa_r+0x2d8>)
 800850c:	9303      	str	r3, [sp, #12]
 800850e:	3308      	adds	r3, #8
 8008510:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008512:	6013      	str	r3, [r2, #0]
 8008514:	9803      	ldr	r0, [sp, #12]
 8008516:	b019      	add	sp, #100	; 0x64
 8008518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800851c:	4b8b      	ldr	r3, [pc, #556]	; (800874c <_dtoa_r+0x2d4>)
 800851e:	9303      	str	r3, [sp, #12]
 8008520:	3303      	adds	r3, #3
 8008522:	e7f5      	b.n	8008510 <_dtoa_r+0x98>
 8008524:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008528:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800852c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008530:	2200      	movs	r2, #0
 8008532:	2300      	movs	r3, #0
 8008534:	f7f8 fa42 	bl	80009bc <__aeabi_dcmpeq>
 8008538:	4680      	mov	r8, r0
 800853a:	b158      	cbz	r0, 8008554 <_dtoa_r+0xdc>
 800853c:	2301      	movs	r3, #1
 800853e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008540:	6013      	str	r3, [r2, #0]
 8008542:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008544:	2b00      	cmp	r3, #0
 8008546:	f000 8558 	beq.w	8008ffa <_dtoa_r+0xb82>
 800854a:	4882      	ldr	r0, [pc, #520]	; (8008754 <_dtoa_r+0x2dc>)
 800854c:	6018      	str	r0, [r3, #0]
 800854e:	1e43      	subs	r3, r0, #1
 8008550:	9303      	str	r3, [sp, #12]
 8008552:	e7df      	b.n	8008514 <_dtoa_r+0x9c>
 8008554:	ab16      	add	r3, sp, #88	; 0x58
 8008556:	9301      	str	r3, [sp, #4]
 8008558:	ab17      	add	r3, sp, #92	; 0x5c
 800855a:	9300      	str	r3, [sp, #0]
 800855c:	4628      	mov	r0, r5
 800855e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008562:	f001 fd05 	bl	8009f70 <__d2b>
 8008566:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800856a:	4683      	mov	fp, r0
 800856c:	2c00      	cmp	r4, #0
 800856e:	d07f      	beq.n	8008670 <_dtoa_r+0x1f8>
 8008570:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008574:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008576:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800857a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800857e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8008582:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8008586:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800858a:	2200      	movs	r2, #0
 800858c:	4b72      	ldr	r3, [pc, #456]	; (8008758 <_dtoa_r+0x2e0>)
 800858e:	f7f7 fdf5 	bl	800017c <__aeabi_dsub>
 8008592:	a365      	add	r3, pc, #404	; (adr r3, 8008728 <_dtoa_r+0x2b0>)
 8008594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008598:	f7f7 ffa8 	bl	80004ec <__aeabi_dmul>
 800859c:	a364      	add	r3, pc, #400	; (adr r3, 8008730 <_dtoa_r+0x2b8>)
 800859e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085a2:	f7f7 fded 	bl	8000180 <__adddf3>
 80085a6:	4606      	mov	r6, r0
 80085a8:	4620      	mov	r0, r4
 80085aa:	460f      	mov	r7, r1
 80085ac:	f7f7 ff34 	bl	8000418 <__aeabi_i2d>
 80085b0:	a361      	add	r3, pc, #388	; (adr r3, 8008738 <_dtoa_r+0x2c0>)
 80085b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085b6:	f7f7 ff99 	bl	80004ec <__aeabi_dmul>
 80085ba:	4602      	mov	r2, r0
 80085bc:	460b      	mov	r3, r1
 80085be:	4630      	mov	r0, r6
 80085c0:	4639      	mov	r1, r7
 80085c2:	f7f7 fddd 	bl	8000180 <__adddf3>
 80085c6:	4606      	mov	r6, r0
 80085c8:	460f      	mov	r7, r1
 80085ca:	f7f8 fa3f 	bl	8000a4c <__aeabi_d2iz>
 80085ce:	2200      	movs	r2, #0
 80085d0:	4682      	mov	sl, r0
 80085d2:	2300      	movs	r3, #0
 80085d4:	4630      	mov	r0, r6
 80085d6:	4639      	mov	r1, r7
 80085d8:	f7f8 f9fa 	bl	80009d0 <__aeabi_dcmplt>
 80085dc:	b148      	cbz	r0, 80085f2 <_dtoa_r+0x17a>
 80085de:	4650      	mov	r0, sl
 80085e0:	f7f7 ff1a 	bl	8000418 <__aeabi_i2d>
 80085e4:	4632      	mov	r2, r6
 80085e6:	463b      	mov	r3, r7
 80085e8:	f7f8 f9e8 	bl	80009bc <__aeabi_dcmpeq>
 80085ec:	b908      	cbnz	r0, 80085f2 <_dtoa_r+0x17a>
 80085ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 80085f2:	f1ba 0f16 	cmp.w	sl, #22
 80085f6:	d858      	bhi.n	80086aa <_dtoa_r+0x232>
 80085f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80085fc:	4b57      	ldr	r3, [pc, #348]	; (800875c <_dtoa_r+0x2e4>)
 80085fe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008606:	f7f8 f9e3 	bl	80009d0 <__aeabi_dcmplt>
 800860a:	2800      	cmp	r0, #0
 800860c:	d04f      	beq.n	80086ae <_dtoa_r+0x236>
 800860e:	2300      	movs	r3, #0
 8008610:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008614:	930f      	str	r3, [sp, #60]	; 0x3c
 8008616:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008618:	1b1c      	subs	r4, r3, r4
 800861a:	1e63      	subs	r3, r4, #1
 800861c:	9309      	str	r3, [sp, #36]	; 0x24
 800861e:	bf49      	itett	mi
 8008620:	f1c4 0301 	rsbmi	r3, r4, #1
 8008624:	2300      	movpl	r3, #0
 8008626:	9306      	strmi	r3, [sp, #24]
 8008628:	2300      	movmi	r3, #0
 800862a:	bf54      	ite	pl
 800862c:	9306      	strpl	r3, [sp, #24]
 800862e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8008630:	f1ba 0f00 	cmp.w	sl, #0
 8008634:	db3d      	blt.n	80086b2 <_dtoa_r+0x23a>
 8008636:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008638:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800863c:	4453      	add	r3, sl
 800863e:	9309      	str	r3, [sp, #36]	; 0x24
 8008640:	2300      	movs	r3, #0
 8008642:	930a      	str	r3, [sp, #40]	; 0x28
 8008644:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008646:	2b09      	cmp	r3, #9
 8008648:	f200 808c 	bhi.w	8008764 <_dtoa_r+0x2ec>
 800864c:	2b05      	cmp	r3, #5
 800864e:	bfc4      	itt	gt
 8008650:	3b04      	subgt	r3, #4
 8008652:	9322      	strgt	r3, [sp, #136]	; 0x88
 8008654:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008656:	bfc8      	it	gt
 8008658:	2400      	movgt	r4, #0
 800865a:	f1a3 0302 	sub.w	r3, r3, #2
 800865e:	bfd8      	it	le
 8008660:	2401      	movle	r4, #1
 8008662:	2b03      	cmp	r3, #3
 8008664:	f200 808a 	bhi.w	800877c <_dtoa_r+0x304>
 8008668:	e8df f003 	tbb	[pc, r3]
 800866c:	5b4d4f2d 	.word	0x5b4d4f2d
 8008670:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8008674:	441c      	add	r4, r3
 8008676:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800867a:	2b20      	cmp	r3, #32
 800867c:	bfc3      	ittte	gt
 800867e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008682:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8008686:	fa09 f303 	lslgt.w	r3, r9, r3
 800868a:	f1c3 0320 	rsble	r3, r3, #32
 800868e:	bfc6      	itte	gt
 8008690:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008694:	4318      	orrgt	r0, r3
 8008696:	fa06 f003 	lslle.w	r0, r6, r3
 800869a:	f7f7 fead 	bl	80003f8 <__aeabi_ui2d>
 800869e:	2301      	movs	r3, #1
 80086a0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80086a4:	3c01      	subs	r4, #1
 80086a6:	9313      	str	r3, [sp, #76]	; 0x4c
 80086a8:	e76f      	b.n	800858a <_dtoa_r+0x112>
 80086aa:	2301      	movs	r3, #1
 80086ac:	e7b2      	b.n	8008614 <_dtoa_r+0x19c>
 80086ae:	900f      	str	r0, [sp, #60]	; 0x3c
 80086b0:	e7b1      	b.n	8008616 <_dtoa_r+0x19e>
 80086b2:	9b06      	ldr	r3, [sp, #24]
 80086b4:	eba3 030a 	sub.w	r3, r3, sl
 80086b8:	9306      	str	r3, [sp, #24]
 80086ba:	f1ca 0300 	rsb	r3, sl, #0
 80086be:	930a      	str	r3, [sp, #40]	; 0x28
 80086c0:	2300      	movs	r3, #0
 80086c2:	930e      	str	r3, [sp, #56]	; 0x38
 80086c4:	e7be      	b.n	8008644 <_dtoa_r+0x1cc>
 80086c6:	2300      	movs	r3, #0
 80086c8:	930b      	str	r3, [sp, #44]	; 0x2c
 80086ca:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	dc58      	bgt.n	8008782 <_dtoa_r+0x30a>
 80086d0:	f04f 0901 	mov.w	r9, #1
 80086d4:	464b      	mov	r3, r9
 80086d6:	f8cd 9020 	str.w	r9, [sp, #32]
 80086da:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 80086de:	2200      	movs	r2, #0
 80086e0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80086e2:	6042      	str	r2, [r0, #4]
 80086e4:	2204      	movs	r2, #4
 80086e6:	f102 0614 	add.w	r6, r2, #20
 80086ea:	429e      	cmp	r6, r3
 80086ec:	6841      	ldr	r1, [r0, #4]
 80086ee:	d94e      	bls.n	800878e <_dtoa_r+0x316>
 80086f0:	4628      	mov	r0, r5
 80086f2:	f001 f853 	bl	800979c <_Balloc>
 80086f6:	9003      	str	r0, [sp, #12]
 80086f8:	2800      	cmp	r0, #0
 80086fa:	d14c      	bne.n	8008796 <_dtoa_r+0x31e>
 80086fc:	4602      	mov	r2, r0
 80086fe:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008702:	4b17      	ldr	r3, [pc, #92]	; (8008760 <_dtoa_r+0x2e8>)
 8008704:	e6cc      	b.n	80084a0 <_dtoa_r+0x28>
 8008706:	2301      	movs	r3, #1
 8008708:	e7de      	b.n	80086c8 <_dtoa_r+0x250>
 800870a:	2300      	movs	r3, #0
 800870c:	930b      	str	r3, [sp, #44]	; 0x2c
 800870e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008710:	eb0a 0903 	add.w	r9, sl, r3
 8008714:	f109 0301 	add.w	r3, r9, #1
 8008718:	2b01      	cmp	r3, #1
 800871a:	9308      	str	r3, [sp, #32]
 800871c:	bfb8      	it	lt
 800871e:	2301      	movlt	r3, #1
 8008720:	e7dd      	b.n	80086de <_dtoa_r+0x266>
 8008722:	2301      	movs	r3, #1
 8008724:	e7f2      	b.n	800870c <_dtoa_r+0x294>
 8008726:	bf00      	nop
 8008728:	636f4361 	.word	0x636f4361
 800872c:	3fd287a7 	.word	0x3fd287a7
 8008730:	8b60c8b3 	.word	0x8b60c8b3
 8008734:	3fc68a28 	.word	0x3fc68a28
 8008738:	509f79fb 	.word	0x509f79fb
 800873c:	3fd34413 	.word	0x3fd34413
 8008740:	0800b4d8 	.word	0x0800b4d8
 8008744:	0800b696 	.word	0x0800b696
 8008748:	7ff00000 	.word	0x7ff00000
 800874c:	0800b692 	.word	0x0800b692
 8008750:	0800b689 	.word	0x0800b689
 8008754:	0800b461 	.word	0x0800b461
 8008758:	3ff80000 	.word	0x3ff80000
 800875c:	0800b800 	.word	0x0800b800
 8008760:	0800b6f1 	.word	0x0800b6f1
 8008764:	2401      	movs	r4, #1
 8008766:	2300      	movs	r3, #0
 8008768:	940b      	str	r4, [sp, #44]	; 0x2c
 800876a:	9322      	str	r3, [sp, #136]	; 0x88
 800876c:	f04f 39ff 	mov.w	r9, #4294967295
 8008770:	2200      	movs	r2, #0
 8008772:	2312      	movs	r3, #18
 8008774:	f8cd 9020 	str.w	r9, [sp, #32]
 8008778:	9223      	str	r2, [sp, #140]	; 0x8c
 800877a:	e7b0      	b.n	80086de <_dtoa_r+0x266>
 800877c:	2301      	movs	r3, #1
 800877e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008780:	e7f4      	b.n	800876c <_dtoa_r+0x2f4>
 8008782:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8008786:	464b      	mov	r3, r9
 8008788:	f8cd 9020 	str.w	r9, [sp, #32]
 800878c:	e7a7      	b.n	80086de <_dtoa_r+0x266>
 800878e:	3101      	adds	r1, #1
 8008790:	6041      	str	r1, [r0, #4]
 8008792:	0052      	lsls	r2, r2, #1
 8008794:	e7a7      	b.n	80086e6 <_dtoa_r+0x26e>
 8008796:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008798:	9a03      	ldr	r2, [sp, #12]
 800879a:	601a      	str	r2, [r3, #0]
 800879c:	9b08      	ldr	r3, [sp, #32]
 800879e:	2b0e      	cmp	r3, #14
 80087a0:	f200 80a8 	bhi.w	80088f4 <_dtoa_r+0x47c>
 80087a4:	2c00      	cmp	r4, #0
 80087a6:	f000 80a5 	beq.w	80088f4 <_dtoa_r+0x47c>
 80087aa:	f1ba 0f00 	cmp.w	sl, #0
 80087ae:	dd34      	ble.n	800881a <_dtoa_r+0x3a2>
 80087b0:	4a9a      	ldr	r2, [pc, #616]	; (8008a1c <_dtoa_r+0x5a4>)
 80087b2:	f00a 030f 	and.w	r3, sl, #15
 80087b6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80087ba:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80087be:	e9d3 3400 	ldrd	r3, r4, [r3]
 80087c2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80087c6:	ea4f 142a 	mov.w	r4, sl, asr #4
 80087ca:	d016      	beq.n	80087fa <_dtoa_r+0x382>
 80087cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80087d0:	4b93      	ldr	r3, [pc, #588]	; (8008a20 <_dtoa_r+0x5a8>)
 80087d2:	2703      	movs	r7, #3
 80087d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80087d8:	f7f7 ffb2 	bl	8000740 <__aeabi_ddiv>
 80087dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80087e0:	f004 040f 	and.w	r4, r4, #15
 80087e4:	4e8e      	ldr	r6, [pc, #568]	; (8008a20 <_dtoa_r+0x5a8>)
 80087e6:	b954      	cbnz	r4, 80087fe <_dtoa_r+0x386>
 80087e8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80087ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80087f0:	f7f7 ffa6 	bl	8000740 <__aeabi_ddiv>
 80087f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80087f8:	e029      	b.n	800884e <_dtoa_r+0x3d6>
 80087fa:	2702      	movs	r7, #2
 80087fc:	e7f2      	b.n	80087e4 <_dtoa_r+0x36c>
 80087fe:	07e1      	lsls	r1, r4, #31
 8008800:	d508      	bpl.n	8008814 <_dtoa_r+0x39c>
 8008802:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008806:	e9d6 2300 	ldrd	r2, r3, [r6]
 800880a:	f7f7 fe6f 	bl	80004ec <__aeabi_dmul>
 800880e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008812:	3701      	adds	r7, #1
 8008814:	1064      	asrs	r4, r4, #1
 8008816:	3608      	adds	r6, #8
 8008818:	e7e5      	b.n	80087e6 <_dtoa_r+0x36e>
 800881a:	f000 80a5 	beq.w	8008968 <_dtoa_r+0x4f0>
 800881e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008822:	f1ca 0400 	rsb	r4, sl, #0
 8008826:	4b7d      	ldr	r3, [pc, #500]	; (8008a1c <_dtoa_r+0x5a4>)
 8008828:	f004 020f 	and.w	r2, r4, #15
 800882c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008834:	f7f7 fe5a 	bl	80004ec <__aeabi_dmul>
 8008838:	2702      	movs	r7, #2
 800883a:	2300      	movs	r3, #0
 800883c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008840:	4e77      	ldr	r6, [pc, #476]	; (8008a20 <_dtoa_r+0x5a8>)
 8008842:	1124      	asrs	r4, r4, #4
 8008844:	2c00      	cmp	r4, #0
 8008846:	f040 8084 	bne.w	8008952 <_dtoa_r+0x4da>
 800884a:	2b00      	cmp	r3, #0
 800884c:	d1d2      	bne.n	80087f4 <_dtoa_r+0x37c>
 800884e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008850:	2b00      	cmp	r3, #0
 8008852:	f000 808b 	beq.w	800896c <_dtoa_r+0x4f4>
 8008856:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800885a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800885e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008862:	2200      	movs	r2, #0
 8008864:	4b6f      	ldr	r3, [pc, #444]	; (8008a24 <_dtoa_r+0x5ac>)
 8008866:	f7f8 f8b3 	bl	80009d0 <__aeabi_dcmplt>
 800886a:	2800      	cmp	r0, #0
 800886c:	d07e      	beq.n	800896c <_dtoa_r+0x4f4>
 800886e:	9b08      	ldr	r3, [sp, #32]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d07b      	beq.n	800896c <_dtoa_r+0x4f4>
 8008874:	f1b9 0f00 	cmp.w	r9, #0
 8008878:	dd38      	ble.n	80088ec <_dtoa_r+0x474>
 800887a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800887e:	2200      	movs	r2, #0
 8008880:	4b69      	ldr	r3, [pc, #420]	; (8008a28 <_dtoa_r+0x5b0>)
 8008882:	f7f7 fe33 	bl	80004ec <__aeabi_dmul>
 8008886:	464c      	mov	r4, r9
 8008888:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800888c:	f10a 38ff 	add.w	r8, sl, #4294967295
 8008890:	3701      	adds	r7, #1
 8008892:	4638      	mov	r0, r7
 8008894:	f7f7 fdc0 	bl	8000418 <__aeabi_i2d>
 8008898:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800889c:	f7f7 fe26 	bl	80004ec <__aeabi_dmul>
 80088a0:	2200      	movs	r2, #0
 80088a2:	4b62      	ldr	r3, [pc, #392]	; (8008a2c <_dtoa_r+0x5b4>)
 80088a4:	f7f7 fc6c 	bl	8000180 <__adddf3>
 80088a8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80088ac:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80088b0:	9611      	str	r6, [sp, #68]	; 0x44
 80088b2:	2c00      	cmp	r4, #0
 80088b4:	d15d      	bne.n	8008972 <_dtoa_r+0x4fa>
 80088b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80088ba:	2200      	movs	r2, #0
 80088bc:	4b5c      	ldr	r3, [pc, #368]	; (8008a30 <_dtoa_r+0x5b8>)
 80088be:	f7f7 fc5d 	bl	800017c <__aeabi_dsub>
 80088c2:	4602      	mov	r2, r0
 80088c4:	460b      	mov	r3, r1
 80088c6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80088ca:	4633      	mov	r3, r6
 80088cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80088ce:	f7f8 f89d 	bl	8000a0c <__aeabi_dcmpgt>
 80088d2:	2800      	cmp	r0, #0
 80088d4:	f040 829c 	bne.w	8008e10 <_dtoa_r+0x998>
 80088d8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80088dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80088de:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80088e2:	f7f8 f875 	bl	80009d0 <__aeabi_dcmplt>
 80088e6:	2800      	cmp	r0, #0
 80088e8:	f040 8290 	bne.w	8008e0c <_dtoa_r+0x994>
 80088ec:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80088f0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80088f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	f2c0 8152 	blt.w	8008ba0 <_dtoa_r+0x728>
 80088fc:	f1ba 0f0e 	cmp.w	sl, #14
 8008900:	f300 814e 	bgt.w	8008ba0 <_dtoa_r+0x728>
 8008904:	4b45      	ldr	r3, [pc, #276]	; (8008a1c <_dtoa_r+0x5a4>)
 8008906:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800890a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800890e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8008912:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008914:	2b00      	cmp	r3, #0
 8008916:	f280 80db 	bge.w	8008ad0 <_dtoa_r+0x658>
 800891a:	9b08      	ldr	r3, [sp, #32]
 800891c:	2b00      	cmp	r3, #0
 800891e:	f300 80d7 	bgt.w	8008ad0 <_dtoa_r+0x658>
 8008922:	f040 8272 	bne.w	8008e0a <_dtoa_r+0x992>
 8008926:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800892a:	2200      	movs	r2, #0
 800892c:	4b40      	ldr	r3, [pc, #256]	; (8008a30 <_dtoa_r+0x5b8>)
 800892e:	f7f7 fddd 	bl	80004ec <__aeabi_dmul>
 8008932:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008936:	f7f8 f85f 	bl	80009f8 <__aeabi_dcmpge>
 800893a:	9c08      	ldr	r4, [sp, #32]
 800893c:	4626      	mov	r6, r4
 800893e:	2800      	cmp	r0, #0
 8008940:	f040 8248 	bne.w	8008dd4 <_dtoa_r+0x95c>
 8008944:	2331      	movs	r3, #49	; 0x31
 8008946:	9f03      	ldr	r7, [sp, #12]
 8008948:	f10a 0a01 	add.w	sl, sl, #1
 800894c:	f807 3b01 	strb.w	r3, [r7], #1
 8008950:	e244      	b.n	8008ddc <_dtoa_r+0x964>
 8008952:	07e2      	lsls	r2, r4, #31
 8008954:	d505      	bpl.n	8008962 <_dtoa_r+0x4ea>
 8008956:	e9d6 2300 	ldrd	r2, r3, [r6]
 800895a:	f7f7 fdc7 	bl	80004ec <__aeabi_dmul>
 800895e:	2301      	movs	r3, #1
 8008960:	3701      	adds	r7, #1
 8008962:	1064      	asrs	r4, r4, #1
 8008964:	3608      	adds	r6, #8
 8008966:	e76d      	b.n	8008844 <_dtoa_r+0x3cc>
 8008968:	2702      	movs	r7, #2
 800896a:	e770      	b.n	800884e <_dtoa_r+0x3d6>
 800896c:	46d0      	mov	r8, sl
 800896e:	9c08      	ldr	r4, [sp, #32]
 8008970:	e78f      	b.n	8008892 <_dtoa_r+0x41a>
 8008972:	9903      	ldr	r1, [sp, #12]
 8008974:	4b29      	ldr	r3, [pc, #164]	; (8008a1c <_dtoa_r+0x5a4>)
 8008976:	4421      	add	r1, r4
 8008978:	9112      	str	r1, [sp, #72]	; 0x48
 800897a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800897c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008980:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8008984:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008988:	2900      	cmp	r1, #0
 800898a:	d055      	beq.n	8008a38 <_dtoa_r+0x5c0>
 800898c:	2000      	movs	r0, #0
 800898e:	4929      	ldr	r1, [pc, #164]	; (8008a34 <_dtoa_r+0x5bc>)
 8008990:	f7f7 fed6 	bl	8000740 <__aeabi_ddiv>
 8008994:	463b      	mov	r3, r7
 8008996:	4632      	mov	r2, r6
 8008998:	f7f7 fbf0 	bl	800017c <__aeabi_dsub>
 800899c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80089a0:	9f03      	ldr	r7, [sp, #12]
 80089a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80089a6:	f7f8 f851 	bl	8000a4c <__aeabi_d2iz>
 80089aa:	4604      	mov	r4, r0
 80089ac:	f7f7 fd34 	bl	8000418 <__aeabi_i2d>
 80089b0:	4602      	mov	r2, r0
 80089b2:	460b      	mov	r3, r1
 80089b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80089b8:	f7f7 fbe0 	bl	800017c <__aeabi_dsub>
 80089bc:	4602      	mov	r2, r0
 80089be:	460b      	mov	r3, r1
 80089c0:	3430      	adds	r4, #48	; 0x30
 80089c2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80089c6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80089ca:	f807 4b01 	strb.w	r4, [r7], #1
 80089ce:	f7f7 ffff 	bl	80009d0 <__aeabi_dcmplt>
 80089d2:	2800      	cmp	r0, #0
 80089d4:	d174      	bne.n	8008ac0 <_dtoa_r+0x648>
 80089d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80089da:	2000      	movs	r0, #0
 80089dc:	4911      	ldr	r1, [pc, #68]	; (8008a24 <_dtoa_r+0x5ac>)
 80089de:	f7f7 fbcd 	bl	800017c <__aeabi_dsub>
 80089e2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80089e6:	f7f7 fff3 	bl	80009d0 <__aeabi_dcmplt>
 80089ea:	2800      	cmp	r0, #0
 80089ec:	f040 80b7 	bne.w	8008b5e <_dtoa_r+0x6e6>
 80089f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80089f2:	429f      	cmp	r7, r3
 80089f4:	f43f af7a 	beq.w	80088ec <_dtoa_r+0x474>
 80089f8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80089fc:	2200      	movs	r2, #0
 80089fe:	4b0a      	ldr	r3, [pc, #40]	; (8008a28 <_dtoa_r+0x5b0>)
 8008a00:	f7f7 fd74 	bl	80004ec <__aeabi_dmul>
 8008a04:	2200      	movs	r2, #0
 8008a06:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008a0a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008a0e:	4b06      	ldr	r3, [pc, #24]	; (8008a28 <_dtoa_r+0x5b0>)
 8008a10:	f7f7 fd6c 	bl	80004ec <__aeabi_dmul>
 8008a14:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008a18:	e7c3      	b.n	80089a2 <_dtoa_r+0x52a>
 8008a1a:	bf00      	nop
 8008a1c:	0800b800 	.word	0x0800b800
 8008a20:	0800b7d8 	.word	0x0800b7d8
 8008a24:	3ff00000 	.word	0x3ff00000
 8008a28:	40240000 	.word	0x40240000
 8008a2c:	401c0000 	.word	0x401c0000
 8008a30:	40140000 	.word	0x40140000
 8008a34:	3fe00000 	.word	0x3fe00000
 8008a38:	4630      	mov	r0, r6
 8008a3a:	4639      	mov	r1, r7
 8008a3c:	f7f7 fd56 	bl	80004ec <__aeabi_dmul>
 8008a40:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008a42:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008a46:	9c03      	ldr	r4, [sp, #12]
 8008a48:	9314      	str	r3, [sp, #80]	; 0x50
 8008a4a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008a4e:	f7f7 fffd 	bl	8000a4c <__aeabi_d2iz>
 8008a52:	9015      	str	r0, [sp, #84]	; 0x54
 8008a54:	f7f7 fce0 	bl	8000418 <__aeabi_i2d>
 8008a58:	4602      	mov	r2, r0
 8008a5a:	460b      	mov	r3, r1
 8008a5c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008a60:	f7f7 fb8c 	bl	800017c <__aeabi_dsub>
 8008a64:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008a66:	4606      	mov	r6, r0
 8008a68:	3330      	adds	r3, #48	; 0x30
 8008a6a:	f804 3b01 	strb.w	r3, [r4], #1
 8008a6e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008a70:	460f      	mov	r7, r1
 8008a72:	429c      	cmp	r4, r3
 8008a74:	f04f 0200 	mov.w	r2, #0
 8008a78:	d124      	bne.n	8008ac4 <_dtoa_r+0x64c>
 8008a7a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008a7e:	4bb0      	ldr	r3, [pc, #704]	; (8008d40 <_dtoa_r+0x8c8>)
 8008a80:	f7f7 fb7e 	bl	8000180 <__adddf3>
 8008a84:	4602      	mov	r2, r0
 8008a86:	460b      	mov	r3, r1
 8008a88:	4630      	mov	r0, r6
 8008a8a:	4639      	mov	r1, r7
 8008a8c:	f7f7 ffbe 	bl	8000a0c <__aeabi_dcmpgt>
 8008a90:	2800      	cmp	r0, #0
 8008a92:	d163      	bne.n	8008b5c <_dtoa_r+0x6e4>
 8008a94:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008a98:	2000      	movs	r0, #0
 8008a9a:	49a9      	ldr	r1, [pc, #676]	; (8008d40 <_dtoa_r+0x8c8>)
 8008a9c:	f7f7 fb6e 	bl	800017c <__aeabi_dsub>
 8008aa0:	4602      	mov	r2, r0
 8008aa2:	460b      	mov	r3, r1
 8008aa4:	4630      	mov	r0, r6
 8008aa6:	4639      	mov	r1, r7
 8008aa8:	f7f7 ff92 	bl	80009d0 <__aeabi_dcmplt>
 8008aac:	2800      	cmp	r0, #0
 8008aae:	f43f af1d 	beq.w	80088ec <_dtoa_r+0x474>
 8008ab2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8008ab4:	1e7b      	subs	r3, r7, #1
 8008ab6:	9314      	str	r3, [sp, #80]	; 0x50
 8008ab8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8008abc:	2b30      	cmp	r3, #48	; 0x30
 8008abe:	d0f8      	beq.n	8008ab2 <_dtoa_r+0x63a>
 8008ac0:	46c2      	mov	sl, r8
 8008ac2:	e03b      	b.n	8008b3c <_dtoa_r+0x6c4>
 8008ac4:	4b9f      	ldr	r3, [pc, #636]	; (8008d44 <_dtoa_r+0x8cc>)
 8008ac6:	f7f7 fd11 	bl	80004ec <__aeabi_dmul>
 8008aca:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008ace:	e7bc      	b.n	8008a4a <_dtoa_r+0x5d2>
 8008ad0:	9f03      	ldr	r7, [sp, #12]
 8008ad2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8008ad6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008ada:	4640      	mov	r0, r8
 8008adc:	4649      	mov	r1, r9
 8008ade:	f7f7 fe2f 	bl	8000740 <__aeabi_ddiv>
 8008ae2:	f7f7 ffb3 	bl	8000a4c <__aeabi_d2iz>
 8008ae6:	4604      	mov	r4, r0
 8008ae8:	f7f7 fc96 	bl	8000418 <__aeabi_i2d>
 8008aec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008af0:	f7f7 fcfc 	bl	80004ec <__aeabi_dmul>
 8008af4:	4602      	mov	r2, r0
 8008af6:	460b      	mov	r3, r1
 8008af8:	4640      	mov	r0, r8
 8008afa:	4649      	mov	r1, r9
 8008afc:	f7f7 fb3e 	bl	800017c <__aeabi_dsub>
 8008b00:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8008b04:	f807 6b01 	strb.w	r6, [r7], #1
 8008b08:	9e03      	ldr	r6, [sp, #12]
 8008b0a:	f8dd c020 	ldr.w	ip, [sp, #32]
 8008b0e:	1bbe      	subs	r6, r7, r6
 8008b10:	45b4      	cmp	ip, r6
 8008b12:	4602      	mov	r2, r0
 8008b14:	460b      	mov	r3, r1
 8008b16:	d136      	bne.n	8008b86 <_dtoa_r+0x70e>
 8008b18:	f7f7 fb32 	bl	8000180 <__adddf3>
 8008b1c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008b20:	4680      	mov	r8, r0
 8008b22:	4689      	mov	r9, r1
 8008b24:	f7f7 ff72 	bl	8000a0c <__aeabi_dcmpgt>
 8008b28:	bb58      	cbnz	r0, 8008b82 <_dtoa_r+0x70a>
 8008b2a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008b2e:	4640      	mov	r0, r8
 8008b30:	4649      	mov	r1, r9
 8008b32:	f7f7 ff43 	bl	80009bc <__aeabi_dcmpeq>
 8008b36:	b108      	cbz	r0, 8008b3c <_dtoa_r+0x6c4>
 8008b38:	07e1      	lsls	r1, r4, #31
 8008b3a:	d422      	bmi.n	8008b82 <_dtoa_r+0x70a>
 8008b3c:	4628      	mov	r0, r5
 8008b3e:	4659      	mov	r1, fp
 8008b40:	f000 fe6c 	bl	800981c <_Bfree>
 8008b44:	2300      	movs	r3, #0
 8008b46:	703b      	strb	r3, [r7, #0]
 8008b48:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008b4a:	f10a 0001 	add.w	r0, sl, #1
 8008b4e:	6018      	str	r0, [r3, #0]
 8008b50:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	f43f acde 	beq.w	8008514 <_dtoa_r+0x9c>
 8008b58:	601f      	str	r7, [r3, #0]
 8008b5a:	e4db      	b.n	8008514 <_dtoa_r+0x9c>
 8008b5c:	4627      	mov	r7, r4
 8008b5e:	463b      	mov	r3, r7
 8008b60:	461f      	mov	r7, r3
 8008b62:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008b66:	2a39      	cmp	r2, #57	; 0x39
 8008b68:	d107      	bne.n	8008b7a <_dtoa_r+0x702>
 8008b6a:	9a03      	ldr	r2, [sp, #12]
 8008b6c:	429a      	cmp	r2, r3
 8008b6e:	d1f7      	bne.n	8008b60 <_dtoa_r+0x6e8>
 8008b70:	2230      	movs	r2, #48	; 0x30
 8008b72:	9903      	ldr	r1, [sp, #12]
 8008b74:	f108 0801 	add.w	r8, r8, #1
 8008b78:	700a      	strb	r2, [r1, #0]
 8008b7a:	781a      	ldrb	r2, [r3, #0]
 8008b7c:	3201      	adds	r2, #1
 8008b7e:	701a      	strb	r2, [r3, #0]
 8008b80:	e79e      	b.n	8008ac0 <_dtoa_r+0x648>
 8008b82:	46d0      	mov	r8, sl
 8008b84:	e7eb      	b.n	8008b5e <_dtoa_r+0x6e6>
 8008b86:	2200      	movs	r2, #0
 8008b88:	4b6e      	ldr	r3, [pc, #440]	; (8008d44 <_dtoa_r+0x8cc>)
 8008b8a:	f7f7 fcaf 	bl	80004ec <__aeabi_dmul>
 8008b8e:	2200      	movs	r2, #0
 8008b90:	2300      	movs	r3, #0
 8008b92:	4680      	mov	r8, r0
 8008b94:	4689      	mov	r9, r1
 8008b96:	f7f7 ff11 	bl	80009bc <__aeabi_dcmpeq>
 8008b9a:	2800      	cmp	r0, #0
 8008b9c:	d09b      	beq.n	8008ad6 <_dtoa_r+0x65e>
 8008b9e:	e7cd      	b.n	8008b3c <_dtoa_r+0x6c4>
 8008ba0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008ba2:	2a00      	cmp	r2, #0
 8008ba4:	f000 80d0 	beq.w	8008d48 <_dtoa_r+0x8d0>
 8008ba8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008baa:	2a01      	cmp	r2, #1
 8008bac:	f300 80ae 	bgt.w	8008d0c <_dtoa_r+0x894>
 8008bb0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008bb2:	2a00      	cmp	r2, #0
 8008bb4:	f000 80a6 	beq.w	8008d04 <_dtoa_r+0x88c>
 8008bb8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008bbc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008bbe:	9f06      	ldr	r7, [sp, #24]
 8008bc0:	9a06      	ldr	r2, [sp, #24]
 8008bc2:	2101      	movs	r1, #1
 8008bc4:	441a      	add	r2, r3
 8008bc6:	9206      	str	r2, [sp, #24]
 8008bc8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008bca:	4628      	mov	r0, r5
 8008bcc:	441a      	add	r2, r3
 8008bce:	9209      	str	r2, [sp, #36]	; 0x24
 8008bd0:	f000 ff24 	bl	8009a1c <__i2b>
 8008bd4:	4606      	mov	r6, r0
 8008bd6:	2f00      	cmp	r7, #0
 8008bd8:	dd0c      	ble.n	8008bf4 <_dtoa_r+0x77c>
 8008bda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	dd09      	ble.n	8008bf4 <_dtoa_r+0x77c>
 8008be0:	42bb      	cmp	r3, r7
 8008be2:	bfa8      	it	ge
 8008be4:	463b      	movge	r3, r7
 8008be6:	9a06      	ldr	r2, [sp, #24]
 8008be8:	1aff      	subs	r7, r7, r3
 8008bea:	1ad2      	subs	r2, r2, r3
 8008bec:	9206      	str	r2, [sp, #24]
 8008bee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008bf0:	1ad3      	subs	r3, r2, r3
 8008bf2:	9309      	str	r3, [sp, #36]	; 0x24
 8008bf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008bf6:	b1f3      	cbz	r3, 8008c36 <_dtoa_r+0x7be>
 8008bf8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	f000 80a8 	beq.w	8008d50 <_dtoa_r+0x8d8>
 8008c00:	2c00      	cmp	r4, #0
 8008c02:	dd10      	ble.n	8008c26 <_dtoa_r+0x7ae>
 8008c04:	4631      	mov	r1, r6
 8008c06:	4622      	mov	r2, r4
 8008c08:	4628      	mov	r0, r5
 8008c0a:	f000 ffc5 	bl	8009b98 <__pow5mult>
 8008c0e:	465a      	mov	r2, fp
 8008c10:	4601      	mov	r1, r0
 8008c12:	4606      	mov	r6, r0
 8008c14:	4628      	mov	r0, r5
 8008c16:	f000 ff17 	bl	8009a48 <__multiply>
 8008c1a:	4680      	mov	r8, r0
 8008c1c:	4659      	mov	r1, fp
 8008c1e:	4628      	mov	r0, r5
 8008c20:	f000 fdfc 	bl	800981c <_Bfree>
 8008c24:	46c3      	mov	fp, r8
 8008c26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c28:	1b1a      	subs	r2, r3, r4
 8008c2a:	d004      	beq.n	8008c36 <_dtoa_r+0x7be>
 8008c2c:	4659      	mov	r1, fp
 8008c2e:	4628      	mov	r0, r5
 8008c30:	f000 ffb2 	bl	8009b98 <__pow5mult>
 8008c34:	4683      	mov	fp, r0
 8008c36:	2101      	movs	r1, #1
 8008c38:	4628      	mov	r0, r5
 8008c3a:	f000 feef 	bl	8009a1c <__i2b>
 8008c3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008c40:	4604      	mov	r4, r0
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	f340 8086 	ble.w	8008d54 <_dtoa_r+0x8dc>
 8008c48:	461a      	mov	r2, r3
 8008c4a:	4601      	mov	r1, r0
 8008c4c:	4628      	mov	r0, r5
 8008c4e:	f000 ffa3 	bl	8009b98 <__pow5mult>
 8008c52:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008c54:	4604      	mov	r4, r0
 8008c56:	2b01      	cmp	r3, #1
 8008c58:	dd7f      	ble.n	8008d5a <_dtoa_r+0x8e2>
 8008c5a:	f04f 0800 	mov.w	r8, #0
 8008c5e:	6923      	ldr	r3, [r4, #16]
 8008c60:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008c64:	6918      	ldr	r0, [r3, #16]
 8008c66:	f000 fe8b 	bl	8009980 <__hi0bits>
 8008c6a:	f1c0 0020 	rsb	r0, r0, #32
 8008c6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c70:	4418      	add	r0, r3
 8008c72:	f010 001f 	ands.w	r0, r0, #31
 8008c76:	f000 8092 	beq.w	8008d9e <_dtoa_r+0x926>
 8008c7a:	f1c0 0320 	rsb	r3, r0, #32
 8008c7e:	2b04      	cmp	r3, #4
 8008c80:	f340 808a 	ble.w	8008d98 <_dtoa_r+0x920>
 8008c84:	f1c0 001c 	rsb	r0, r0, #28
 8008c88:	9b06      	ldr	r3, [sp, #24]
 8008c8a:	4407      	add	r7, r0
 8008c8c:	4403      	add	r3, r0
 8008c8e:	9306      	str	r3, [sp, #24]
 8008c90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c92:	4403      	add	r3, r0
 8008c94:	9309      	str	r3, [sp, #36]	; 0x24
 8008c96:	9b06      	ldr	r3, [sp, #24]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	dd05      	ble.n	8008ca8 <_dtoa_r+0x830>
 8008c9c:	4659      	mov	r1, fp
 8008c9e:	461a      	mov	r2, r3
 8008ca0:	4628      	mov	r0, r5
 8008ca2:	f000 ffd3 	bl	8009c4c <__lshift>
 8008ca6:	4683      	mov	fp, r0
 8008ca8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	dd05      	ble.n	8008cba <_dtoa_r+0x842>
 8008cae:	4621      	mov	r1, r4
 8008cb0:	461a      	mov	r2, r3
 8008cb2:	4628      	mov	r0, r5
 8008cb4:	f000 ffca 	bl	8009c4c <__lshift>
 8008cb8:	4604      	mov	r4, r0
 8008cba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d070      	beq.n	8008da2 <_dtoa_r+0x92a>
 8008cc0:	4621      	mov	r1, r4
 8008cc2:	4658      	mov	r0, fp
 8008cc4:	f001 f832 	bl	8009d2c <__mcmp>
 8008cc8:	2800      	cmp	r0, #0
 8008cca:	da6a      	bge.n	8008da2 <_dtoa_r+0x92a>
 8008ccc:	2300      	movs	r3, #0
 8008cce:	4659      	mov	r1, fp
 8008cd0:	220a      	movs	r2, #10
 8008cd2:	4628      	mov	r0, r5
 8008cd4:	f000 fdc4 	bl	8009860 <__multadd>
 8008cd8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008cda:	4683      	mov	fp, r0
 8008cdc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	f000 8194 	beq.w	800900e <_dtoa_r+0xb96>
 8008ce6:	4631      	mov	r1, r6
 8008ce8:	2300      	movs	r3, #0
 8008cea:	220a      	movs	r2, #10
 8008cec:	4628      	mov	r0, r5
 8008cee:	f000 fdb7 	bl	8009860 <__multadd>
 8008cf2:	f1b9 0f00 	cmp.w	r9, #0
 8008cf6:	4606      	mov	r6, r0
 8008cf8:	f300 8093 	bgt.w	8008e22 <_dtoa_r+0x9aa>
 8008cfc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008cfe:	2b02      	cmp	r3, #2
 8008d00:	dc57      	bgt.n	8008db2 <_dtoa_r+0x93a>
 8008d02:	e08e      	b.n	8008e22 <_dtoa_r+0x9aa>
 8008d04:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008d06:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008d0a:	e757      	b.n	8008bbc <_dtoa_r+0x744>
 8008d0c:	9b08      	ldr	r3, [sp, #32]
 8008d0e:	1e5c      	subs	r4, r3, #1
 8008d10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d12:	42a3      	cmp	r3, r4
 8008d14:	bfb7      	itett	lt
 8008d16:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008d18:	1b1c      	subge	r4, r3, r4
 8008d1a:	1ae2      	sublt	r2, r4, r3
 8008d1c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8008d1e:	bfbe      	ittt	lt
 8008d20:	940a      	strlt	r4, [sp, #40]	; 0x28
 8008d22:	189b      	addlt	r3, r3, r2
 8008d24:	930e      	strlt	r3, [sp, #56]	; 0x38
 8008d26:	9b08      	ldr	r3, [sp, #32]
 8008d28:	bfb8      	it	lt
 8008d2a:	2400      	movlt	r4, #0
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	bfbb      	ittet	lt
 8008d30:	9b06      	ldrlt	r3, [sp, #24]
 8008d32:	9a08      	ldrlt	r2, [sp, #32]
 8008d34:	9f06      	ldrge	r7, [sp, #24]
 8008d36:	1a9f      	sublt	r7, r3, r2
 8008d38:	bfac      	ite	ge
 8008d3a:	9b08      	ldrge	r3, [sp, #32]
 8008d3c:	2300      	movlt	r3, #0
 8008d3e:	e73f      	b.n	8008bc0 <_dtoa_r+0x748>
 8008d40:	3fe00000 	.word	0x3fe00000
 8008d44:	40240000 	.word	0x40240000
 8008d48:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008d4a:	9f06      	ldr	r7, [sp, #24]
 8008d4c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8008d4e:	e742      	b.n	8008bd6 <_dtoa_r+0x75e>
 8008d50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008d52:	e76b      	b.n	8008c2c <_dtoa_r+0x7b4>
 8008d54:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008d56:	2b01      	cmp	r3, #1
 8008d58:	dc19      	bgt.n	8008d8e <_dtoa_r+0x916>
 8008d5a:	9b04      	ldr	r3, [sp, #16]
 8008d5c:	b9bb      	cbnz	r3, 8008d8e <_dtoa_r+0x916>
 8008d5e:	9b05      	ldr	r3, [sp, #20]
 8008d60:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008d64:	b99b      	cbnz	r3, 8008d8e <_dtoa_r+0x916>
 8008d66:	9b05      	ldr	r3, [sp, #20]
 8008d68:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008d6c:	0d1b      	lsrs	r3, r3, #20
 8008d6e:	051b      	lsls	r3, r3, #20
 8008d70:	b183      	cbz	r3, 8008d94 <_dtoa_r+0x91c>
 8008d72:	f04f 0801 	mov.w	r8, #1
 8008d76:	9b06      	ldr	r3, [sp, #24]
 8008d78:	3301      	adds	r3, #1
 8008d7a:	9306      	str	r3, [sp, #24]
 8008d7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d7e:	3301      	adds	r3, #1
 8008d80:	9309      	str	r3, [sp, #36]	; 0x24
 8008d82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	f47f af6a 	bne.w	8008c5e <_dtoa_r+0x7e6>
 8008d8a:	2001      	movs	r0, #1
 8008d8c:	e76f      	b.n	8008c6e <_dtoa_r+0x7f6>
 8008d8e:	f04f 0800 	mov.w	r8, #0
 8008d92:	e7f6      	b.n	8008d82 <_dtoa_r+0x90a>
 8008d94:	4698      	mov	r8, r3
 8008d96:	e7f4      	b.n	8008d82 <_dtoa_r+0x90a>
 8008d98:	f43f af7d 	beq.w	8008c96 <_dtoa_r+0x81e>
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	301c      	adds	r0, #28
 8008da0:	e772      	b.n	8008c88 <_dtoa_r+0x810>
 8008da2:	9b08      	ldr	r3, [sp, #32]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	dc36      	bgt.n	8008e16 <_dtoa_r+0x99e>
 8008da8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008daa:	2b02      	cmp	r3, #2
 8008dac:	dd33      	ble.n	8008e16 <_dtoa_r+0x99e>
 8008dae:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008db2:	f1b9 0f00 	cmp.w	r9, #0
 8008db6:	d10d      	bne.n	8008dd4 <_dtoa_r+0x95c>
 8008db8:	4621      	mov	r1, r4
 8008dba:	464b      	mov	r3, r9
 8008dbc:	2205      	movs	r2, #5
 8008dbe:	4628      	mov	r0, r5
 8008dc0:	f000 fd4e 	bl	8009860 <__multadd>
 8008dc4:	4601      	mov	r1, r0
 8008dc6:	4604      	mov	r4, r0
 8008dc8:	4658      	mov	r0, fp
 8008dca:	f000 ffaf 	bl	8009d2c <__mcmp>
 8008dce:	2800      	cmp	r0, #0
 8008dd0:	f73f adb8 	bgt.w	8008944 <_dtoa_r+0x4cc>
 8008dd4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008dd6:	9f03      	ldr	r7, [sp, #12]
 8008dd8:	ea6f 0a03 	mvn.w	sl, r3
 8008ddc:	f04f 0800 	mov.w	r8, #0
 8008de0:	4621      	mov	r1, r4
 8008de2:	4628      	mov	r0, r5
 8008de4:	f000 fd1a 	bl	800981c <_Bfree>
 8008de8:	2e00      	cmp	r6, #0
 8008dea:	f43f aea7 	beq.w	8008b3c <_dtoa_r+0x6c4>
 8008dee:	f1b8 0f00 	cmp.w	r8, #0
 8008df2:	d005      	beq.n	8008e00 <_dtoa_r+0x988>
 8008df4:	45b0      	cmp	r8, r6
 8008df6:	d003      	beq.n	8008e00 <_dtoa_r+0x988>
 8008df8:	4641      	mov	r1, r8
 8008dfa:	4628      	mov	r0, r5
 8008dfc:	f000 fd0e 	bl	800981c <_Bfree>
 8008e00:	4631      	mov	r1, r6
 8008e02:	4628      	mov	r0, r5
 8008e04:	f000 fd0a 	bl	800981c <_Bfree>
 8008e08:	e698      	b.n	8008b3c <_dtoa_r+0x6c4>
 8008e0a:	2400      	movs	r4, #0
 8008e0c:	4626      	mov	r6, r4
 8008e0e:	e7e1      	b.n	8008dd4 <_dtoa_r+0x95c>
 8008e10:	46c2      	mov	sl, r8
 8008e12:	4626      	mov	r6, r4
 8008e14:	e596      	b.n	8008944 <_dtoa_r+0x4cc>
 8008e16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e18:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	f000 80fd 	beq.w	800901c <_dtoa_r+0xba4>
 8008e22:	2f00      	cmp	r7, #0
 8008e24:	dd05      	ble.n	8008e32 <_dtoa_r+0x9ba>
 8008e26:	4631      	mov	r1, r6
 8008e28:	463a      	mov	r2, r7
 8008e2a:	4628      	mov	r0, r5
 8008e2c:	f000 ff0e 	bl	8009c4c <__lshift>
 8008e30:	4606      	mov	r6, r0
 8008e32:	f1b8 0f00 	cmp.w	r8, #0
 8008e36:	d05c      	beq.n	8008ef2 <_dtoa_r+0xa7a>
 8008e38:	4628      	mov	r0, r5
 8008e3a:	6871      	ldr	r1, [r6, #4]
 8008e3c:	f000 fcae 	bl	800979c <_Balloc>
 8008e40:	4607      	mov	r7, r0
 8008e42:	b928      	cbnz	r0, 8008e50 <_dtoa_r+0x9d8>
 8008e44:	4602      	mov	r2, r0
 8008e46:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008e4a:	4b7f      	ldr	r3, [pc, #508]	; (8009048 <_dtoa_r+0xbd0>)
 8008e4c:	f7ff bb28 	b.w	80084a0 <_dtoa_r+0x28>
 8008e50:	6932      	ldr	r2, [r6, #16]
 8008e52:	f106 010c 	add.w	r1, r6, #12
 8008e56:	3202      	adds	r2, #2
 8008e58:	0092      	lsls	r2, r2, #2
 8008e5a:	300c      	adds	r0, #12
 8008e5c:	f7fd febe 	bl	8006bdc <memcpy>
 8008e60:	2201      	movs	r2, #1
 8008e62:	4639      	mov	r1, r7
 8008e64:	4628      	mov	r0, r5
 8008e66:	f000 fef1 	bl	8009c4c <__lshift>
 8008e6a:	46b0      	mov	r8, r6
 8008e6c:	4606      	mov	r6, r0
 8008e6e:	9b03      	ldr	r3, [sp, #12]
 8008e70:	3301      	adds	r3, #1
 8008e72:	9308      	str	r3, [sp, #32]
 8008e74:	9b03      	ldr	r3, [sp, #12]
 8008e76:	444b      	add	r3, r9
 8008e78:	930a      	str	r3, [sp, #40]	; 0x28
 8008e7a:	9b04      	ldr	r3, [sp, #16]
 8008e7c:	f003 0301 	and.w	r3, r3, #1
 8008e80:	9309      	str	r3, [sp, #36]	; 0x24
 8008e82:	9b08      	ldr	r3, [sp, #32]
 8008e84:	4621      	mov	r1, r4
 8008e86:	3b01      	subs	r3, #1
 8008e88:	4658      	mov	r0, fp
 8008e8a:	9304      	str	r3, [sp, #16]
 8008e8c:	f7ff fa68 	bl	8008360 <quorem>
 8008e90:	4603      	mov	r3, r0
 8008e92:	4641      	mov	r1, r8
 8008e94:	3330      	adds	r3, #48	; 0x30
 8008e96:	9006      	str	r0, [sp, #24]
 8008e98:	4658      	mov	r0, fp
 8008e9a:	930b      	str	r3, [sp, #44]	; 0x2c
 8008e9c:	f000 ff46 	bl	8009d2c <__mcmp>
 8008ea0:	4632      	mov	r2, r6
 8008ea2:	4681      	mov	r9, r0
 8008ea4:	4621      	mov	r1, r4
 8008ea6:	4628      	mov	r0, r5
 8008ea8:	f000 ff5c 	bl	8009d64 <__mdiff>
 8008eac:	68c2      	ldr	r2, [r0, #12]
 8008eae:	4607      	mov	r7, r0
 8008eb0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008eb2:	bb02      	cbnz	r2, 8008ef6 <_dtoa_r+0xa7e>
 8008eb4:	4601      	mov	r1, r0
 8008eb6:	4658      	mov	r0, fp
 8008eb8:	f000 ff38 	bl	8009d2c <__mcmp>
 8008ebc:	4602      	mov	r2, r0
 8008ebe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ec0:	4639      	mov	r1, r7
 8008ec2:	4628      	mov	r0, r5
 8008ec4:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8008ec8:	f000 fca8 	bl	800981c <_Bfree>
 8008ecc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008ece:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008ed0:	9f08      	ldr	r7, [sp, #32]
 8008ed2:	ea43 0102 	orr.w	r1, r3, r2
 8008ed6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ed8:	430b      	orrs	r3, r1
 8008eda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008edc:	d10d      	bne.n	8008efa <_dtoa_r+0xa82>
 8008ede:	2b39      	cmp	r3, #57	; 0x39
 8008ee0:	d029      	beq.n	8008f36 <_dtoa_r+0xabe>
 8008ee2:	f1b9 0f00 	cmp.w	r9, #0
 8008ee6:	dd01      	ble.n	8008eec <_dtoa_r+0xa74>
 8008ee8:	9b06      	ldr	r3, [sp, #24]
 8008eea:	3331      	adds	r3, #49	; 0x31
 8008eec:	9a04      	ldr	r2, [sp, #16]
 8008eee:	7013      	strb	r3, [r2, #0]
 8008ef0:	e776      	b.n	8008de0 <_dtoa_r+0x968>
 8008ef2:	4630      	mov	r0, r6
 8008ef4:	e7b9      	b.n	8008e6a <_dtoa_r+0x9f2>
 8008ef6:	2201      	movs	r2, #1
 8008ef8:	e7e2      	b.n	8008ec0 <_dtoa_r+0xa48>
 8008efa:	f1b9 0f00 	cmp.w	r9, #0
 8008efe:	db06      	blt.n	8008f0e <_dtoa_r+0xa96>
 8008f00:	9922      	ldr	r1, [sp, #136]	; 0x88
 8008f02:	ea41 0909 	orr.w	r9, r1, r9
 8008f06:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008f08:	ea59 0101 	orrs.w	r1, r9, r1
 8008f0c:	d120      	bne.n	8008f50 <_dtoa_r+0xad8>
 8008f0e:	2a00      	cmp	r2, #0
 8008f10:	ddec      	ble.n	8008eec <_dtoa_r+0xa74>
 8008f12:	4659      	mov	r1, fp
 8008f14:	2201      	movs	r2, #1
 8008f16:	4628      	mov	r0, r5
 8008f18:	9308      	str	r3, [sp, #32]
 8008f1a:	f000 fe97 	bl	8009c4c <__lshift>
 8008f1e:	4621      	mov	r1, r4
 8008f20:	4683      	mov	fp, r0
 8008f22:	f000 ff03 	bl	8009d2c <__mcmp>
 8008f26:	2800      	cmp	r0, #0
 8008f28:	9b08      	ldr	r3, [sp, #32]
 8008f2a:	dc02      	bgt.n	8008f32 <_dtoa_r+0xaba>
 8008f2c:	d1de      	bne.n	8008eec <_dtoa_r+0xa74>
 8008f2e:	07da      	lsls	r2, r3, #31
 8008f30:	d5dc      	bpl.n	8008eec <_dtoa_r+0xa74>
 8008f32:	2b39      	cmp	r3, #57	; 0x39
 8008f34:	d1d8      	bne.n	8008ee8 <_dtoa_r+0xa70>
 8008f36:	2339      	movs	r3, #57	; 0x39
 8008f38:	9a04      	ldr	r2, [sp, #16]
 8008f3a:	7013      	strb	r3, [r2, #0]
 8008f3c:	463b      	mov	r3, r7
 8008f3e:	461f      	mov	r7, r3
 8008f40:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8008f44:	3b01      	subs	r3, #1
 8008f46:	2a39      	cmp	r2, #57	; 0x39
 8008f48:	d050      	beq.n	8008fec <_dtoa_r+0xb74>
 8008f4a:	3201      	adds	r2, #1
 8008f4c:	701a      	strb	r2, [r3, #0]
 8008f4e:	e747      	b.n	8008de0 <_dtoa_r+0x968>
 8008f50:	2a00      	cmp	r2, #0
 8008f52:	dd03      	ble.n	8008f5c <_dtoa_r+0xae4>
 8008f54:	2b39      	cmp	r3, #57	; 0x39
 8008f56:	d0ee      	beq.n	8008f36 <_dtoa_r+0xabe>
 8008f58:	3301      	adds	r3, #1
 8008f5a:	e7c7      	b.n	8008eec <_dtoa_r+0xa74>
 8008f5c:	9a08      	ldr	r2, [sp, #32]
 8008f5e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008f60:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008f64:	428a      	cmp	r2, r1
 8008f66:	d02a      	beq.n	8008fbe <_dtoa_r+0xb46>
 8008f68:	4659      	mov	r1, fp
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	220a      	movs	r2, #10
 8008f6e:	4628      	mov	r0, r5
 8008f70:	f000 fc76 	bl	8009860 <__multadd>
 8008f74:	45b0      	cmp	r8, r6
 8008f76:	4683      	mov	fp, r0
 8008f78:	f04f 0300 	mov.w	r3, #0
 8008f7c:	f04f 020a 	mov.w	r2, #10
 8008f80:	4641      	mov	r1, r8
 8008f82:	4628      	mov	r0, r5
 8008f84:	d107      	bne.n	8008f96 <_dtoa_r+0xb1e>
 8008f86:	f000 fc6b 	bl	8009860 <__multadd>
 8008f8a:	4680      	mov	r8, r0
 8008f8c:	4606      	mov	r6, r0
 8008f8e:	9b08      	ldr	r3, [sp, #32]
 8008f90:	3301      	adds	r3, #1
 8008f92:	9308      	str	r3, [sp, #32]
 8008f94:	e775      	b.n	8008e82 <_dtoa_r+0xa0a>
 8008f96:	f000 fc63 	bl	8009860 <__multadd>
 8008f9a:	4631      	mov	r1, r6
 8008f9c:	4680      	mov	r8, r0
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	220a      	movs	r2, #10
 8008fa2:	4628      	mov	r0, r5
 8008fa4:	f000 fc5c 	bl	8009860 <__multadd>
 8008fa8:	4606      	mov	r6, r0
 8008faa:	e7f0      	b.n	8008f8e <_dtoa_r+0xb16>
 8008fac:	f1b9 0f00 	cmp.w	r9, #0
 8008fb0:	bfcc      	ite	gt
 8008fb2:	464f      	movgt	r7, r9
 8008fb4:	2701      	movle	r7, #1
 8008fb6:	f04f 0800 	mov.w	r8, #0
 8008fba:	9a03      	ldr	r2, [sp, #12]
 8008fbc:	4417      	add	r7, r2
 8008fbe:	4659      	mov	r1, fp
 8008fc0:	2201      	movs	r2, #1
 8008fc2:	4628      	mov	r0, r5
 8008fc4:	9308      	str	r3, [sp, #32]
 8008fc6:	f000 fe41 	bl	8009c4c <__lshift>
 8008fca:	4621      	mov	r1, r4
 8008fcc:	4683      	mov	fp, r0
 8008fce:	f000 fead 	bl	8009d2c <__mcmp>
 8008fd2:	2800      	cmp	r0, #0
 8008fd4:	dcb2      	bgt.n	8008f3c <_dtoa_r+0xac4>
 8008fd6:	d102      	bne.n	8008fde <_dtoa_r+0xb66>
 8008fd8:	9b08      	ldr	r3, [sp, #32]
 8008fda:	07db      	lsls	r3, r3, #31
 8008fdc:	d4ae      	bmi.n	8008f3c <_dtoa_r+0xac4>
 8008fde:	463b      	mov	r3, r7
 8008fe0:	461f      	mov	r7, r3
 8008fe2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008fe6:	2a30      	cmp	r2, #48	; 0x30
 8008fe8:	d0fa      	beq.n	8008fe0 <_dtoa_r+0xb68>
 8008fea:	e6f9      	b.n	8008de0 <_dtoa_r+0x968>
 8008fec:	9a03      	ldr	r2, [sp, #12]
 8008fee:	429a      	cmp	r2, r3
 8008ff0:	d1a5      	bne.n	8008f3e <_dtoa_r+0xac6>
 8008ff2:	2331      	movs	r3, #49	; 0x31
 8008ff4:	f10a 0a01 	add.w	sl, sl, #1
 8008ff8:	e779      	b.n	8008eee <_dtoa_r+0xa76>
 8008ffa:	4b14      	ldr	r3, [pc, #80]	; (800904c <_dtoa_r+0xbd4>)
 8008ffc:	f7ff baa8 	b.w	8008550 <_dtoa_r+0xd8>
 8009000:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009002:	2b00      	cmp	r3, #0
 8009004:	f47f aa81 	bne.w	800850a <_dtoa_r+0x92>
 8009008:	4b11      	ldr	r3, [pc, #68]	; (8009050 <_dtoa_r+0xbd8>)
 800900a:	f7ff baa1 	b.w	8008550 <_dtoa_r+0xd8>
 800900e:	f1b9 0f00 	cmp.w	r9, #0
 8009012:	dc03      	bgt.n	800901c <_dtoa_r+0xba4>
 8009014:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009016:	2b02      	cmp	r3, #2
 8009018:	f73f aecb 	bgt.w	8008db2 <_dtoa_r+0x93a>
 800901c:	9f03      	ldr	r7, [sp, #12]
 800901e:	4621      	mov	r1, r4
 8009020:	4658      	mov	r0, fp
 8009022:	f7ff f99d 	bl	8008360 <quorem>
 8009026:	9a03      	ldr	r2, [sp, #12]
 8009028:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800902c:	f807 3b01 	strb.w	r3, [r7], #1
 8009030:	1aba      	subs	r2, r7, r2
 8009032:	4591      	cmp	r9, r2
 8009034:	ddba      	ble.n	8008fac <_dtoa_r+0xb34>
 8009036:	4659      	mov	r1, fp
 8009038:	2300      	movs	r3, #0
 800903a:	220a      	movs	r2, #10
 800903c:	4628      	mov	r0, r5
 800903e:	f000 fc0f 	bl	8009860 <__multadd>
 8009042:	4683      	mov	fp, r0
 8009044:	e7eb      	b.n	800901e <_dtoa_r+0xba6>
 8009046:	bf00      	nop
 8009048:	0800b6f1 	.word	0x0800b6f1
 800904c:	0800b460 	.word	0x0800b460
 8009050:	0800b689 	.word	0x0800b689

08009054 <fiprintf>:
 8009054:	b40e      	push	{r1, r2, r3}
 8009056:	b503      	push	{r0, r1, lr}
 8009058:	4601      	mov	r1, r0
 800905a:	ab03      	add	r3, sp, #12
 800905c:	4805      	ldr	r0, [pc, #20]	; (8009074 <fiprintf+0x20>)
 800905e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009062:	6800      	ldr	r0, [r0, #0]
 8009064:	9301      	str	r3, [sp, #4]
 8009066:	f001 fac5 	bl	800a5f4 <_vfiprintf_r>
 800906a:	b002      	add	sp, #8
 800906c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009070:	b003      	add	sp, #12
 8009072:	4770      	bx	lr
 8009074:	20000190 	.word	0x20000190

08009078 <rshift>:
 8009078:	6903      	ldr	r3, [r0, #16]
 800907a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800907e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009082:	f100 0414 	add.w	r4, r0, #20
 8009086:	ea4f 1261 	mov.w	r2, r1, asr #5
 800908a:	dd46      	ble.n	800911a <rshift+0xa2>
 800908c:	f011 011f 	ands.w	r1, r1, #31
 8009090:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009094:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009098:	d10c      	bne.n	80090b4 <rshift+0x3c>
 800909a:	4629      	mov	r1, r5
 800909c:	f100 0710 	add.w	r7, r0, #16
 80090a0:	42b1      	cmp	r1, r6
 80090a2:	d335      	bcc.n	8009110 <rshift+0x98>
 80090a4:	1a9b      	subs	r3, r3, r2
 80090a6:	009b      	lsls	r3, r3, #2
 80090a8:	1eea      	subs	r2, r5, #3
 80090aa:	4296      	cmp	r6, r2
 80090ac:	bf38      	it	cc
 80090ae:	2300      	movcc	r3, #0
 80090b0:	4423      	add	r3, r4
 80090b2:	e015      	b.n	80090e0 <rshift+0x68>
 80090b4:	46a1      	mov	r9, r4
 80090b6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80090ba:	f1c1 0820 	rsb	r8, r1, #32
 80090be:	40cf      	lsrs	r7, r1
 80090c0:	f105 0e04 	add.w	lr, r5, #4
 80090c4:	4576      	cmp	r6, lr
 80090c6:	46f4      	mov	ip, lr
 80090c8:	d816      	bhi.n	80090f8 <rshift+0x80>
 80090ca:	1a9a      	subs	r2, r3, r2
 80090cc:	0092      	lsls	r2, r2, #2
 80090ce:	3a04      	subs	r2, #4
 80090d0:	3501      	adds	r5, #1
 80090d2:	42ae      	cmp	r6, r5
 80090d4:	bf38      	it	cc
 80090d6:	2200      	movcc	r2, #0
 80090d8:	18a3      	adds	r3, r4, r2
 80090da:	50a7      	str	r7, [r4, r2]
 80090dc:	b107      	cbz	r7, 80090e0 <rshift+0x68>
 80090de:	3304      	adds	r3, #4
 80090e0:	42a3      	cmp	r3, r4
 80090e2:	eba3 0204 	sub.w	r2, r3, r4
 80090e6:	bf08      	it	eq
 80090e8:	2300      	moveq	r3, #0
 80090ea:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80090ee:	6102      	str	r2, [r0, #16]
 80090f0:	bf08      	it	eq
 80090f2:	6143      	streq	r3, [r0, #20]
 80090f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80090f8:	f8dc c000 	ldr.w	ip, [ip]
 80090fc:	fa0c fc08 	lsl.w	ip, ip, r8
 8009100:	ea4c 0707 	orr.w	r7, ip, r7
 8009104:	f849 7b04 	str.w	r7, [r9], #4
 8009108:	f85e 7b04 	ldr.w	r7, [lr], #4
 800910c:	40cf      	lsrs	r7, r1
 800910e:	e7d9      	b.n	80090c4 <rshift+0x4c>
 8009110:	f851 cb04 	ldr.w	ip, [r1], #4
 8009114:	f847 cf04 	str.w	ip, [r7, #4]!
 8009118:	e7c2      	b.n	80090a0 <rshift+0x28>
 800911a:	4623      	mov	r3, r4
 800911c:	e7e0      	b.n	80090e0 <rshift+0x68>

0800911e <__hexdig_fun>:
 800911e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009122:	2b09      	cmp	r3, #9
 8009124:	d802      	bhi.n	800912c <__hexdig_fun+0xe>
 8009126:	3820      	subs	r0, #32
 8009128:	b2c0      	uxtb	r0, r0
 800912a:	4770      	bx	lr
 800912c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009130:	2b05      	cmp	r3, #5
 8009132:	d801      	bhi.n	8009138 <__hexdig_fun+0x1a>
 8009134:	3847      	subs	r0, #71	; 0x47
 8009136:	e7f7      	b.n	8009128 <__hexdig_fun+0xa>
 8009138:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800913c:	2b05      	cmp	r3, #5
 800913e:	d801      	bhi.n	8009144 <__hexdig_fun+0x26>
 8009140:	3827      	subs	r0, #39	; 0x27
 8009142:	e7f1      	b.n	8009128 <__hexdig_fun+0xa>
 8009144:	2000      	movs	r0, #0
 8009146:	4770      	bx	lr

08009148 <__gethex>:
 8009148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800914c:	b08b      	sub	sp, #44	; 0x2c
 800914e:	9305      	str	r3, [sp, #20]
 8009150:	4bb2      	ldr	r3, [pc, #712]	; (800941c <__gethex+0x2d4>)
 8009152:	9002      	str	r0, [sp, #8]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	468b      	mov	fp, r1
 8009158:	4618      	mov	r0, r3
 800915a:	4690      	mov	r8, r2
 800915c:	9303      	str	r3, [sp, #12]
 800915e:	f7f7 f801 	bl	8000164 <strlen>
 8009162:	4682      	mov	sl, r0
 8009164:	9b03      	ldr	r3, [sp, #12]
 8009166:	f8db 2000 	ldr.w	r2, [fp]
 800916a:	4403      	add	r3, r0
 800916c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009170:	9306      	str	r3, [sp, #24]
 8009172:	1c93      	adds	r3, r2, #2
 8009174:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009178:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800917c:	32fe      	adds	r2, #254	; 0xfe
 800917e:	18d1      	adds	r1, r2, r3
 8009180:	461f      	mov	r7, r3
 8009182:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009186:	9101      	str	r1, [sp, #4]
 8009188:	2830      	cmp	r0, #48	; 0x30
 800918a:	d0f8      	beq.n	800917e <__gethex+0x36>
 800918c:	f7ff ffc7 	bl	800911e <__hexdig_fun>
 8009190:	4604      	mov	r4, r0
 8009192:	2800      	cmp	r0, #0
 8009194:	d13a      	bne.n	800920c <__gethex+0xc4>
 8009196:	4652      	mov	r2, sl
 8009198:	4638      	mov	r0, r7
 800919a:	9903      	ldr	r1, [sp, #12]
 800919c:	f001 fb70 	bl	800a880 <strncmp>
 80091a0:	4605      	mov	r5, r0
 80091a2:	2800      	cmp	r0, #0
 80091a4:	d166      	bne.n	8009274 <__gethex+0x12c>
 80091a6:	f817 000a 	ldrb.w	r0, [r7, sl]
 80091aa:	eb07 060a 	add.w	r6, r7, sl
 80091ae:	f7ff ffb6 	bl	800911e <__hexdig_fun>
 80091b2:	2800      	cmp	r0, #0
 80091b4:	d060      	beq.n	8009278 <__gethex+0x130>
 80091b6:	4633      	mov	r3, r6
 80091b8:	7818      	ldrb	r0, [r3, #0]
 80091ba:	461f      	mov	r7, r3
 80091bc:	2830      	cmp	r0, #48	; 0x30
 80091be:	f103 0301 	add.w	r3, r3, #1
 80091c2:	d0f9      	beq.n	80091b8 <__gethex+0x70>
 80091c4:	f7ff ffab 	bl	800911e <__hexdig_fun>
 80091c8:	2301      	movs	r3, #1
 80091ca:	fab0 f480 	clz	r4, r0
 80091ce:	4635      	mov	r5, r6
 80091d0:	0964      	lsrs	r4, r4, #5
 80091d2:	9301      	str	r3, [sp, #4]
 80091d4:	463a      	mov	r2, r7
 80091d6:	4616      	mov	r6, r2
 80091d8:	7830      	ldrb	r0, [r6, #0]
 80091da:	3201      	adds	r2, #1
 80091dc:	f7ff ff9f 	bl	800911e <__hexdig_fun>
 80091e0:	2800      	cmp	r0, #0
 80091e2:	d1f8      	bne.n	80091d6 <__gethex+0x8e>
 80091e4:	4652      	mov	r2, sl
 80091e6:	4630      	mov	r0, r6
 80091e8:	9903      	ldr	r1, [sp, #12]
 80091ea:	f001 fb49 	bl	800a880 <strncmp>
 80091ee:	b980      	cbnz	r0, 8009212 <__gethex+0xca>
 80091f0:	b94d      	cbnz	r5, 8009206 <__gethex+0xbe>
 80091f2:	eb06 050a 	add.w	r5, r6, sl
 80091f6:	462a      	mov	r2, r5
 80091f8:	4616      	mov	r6, r2
 80091fa:	7830      	ldrb	r0, [r6, #0]
 80091fc:	3201      	adds	r2, #1
 80091fe:	f7ff ff8e 	bl	800911e <__hexdig_fun>
 8009202:	2800      	cmp	r0, #0
 8009204:	d1f8      	bne.n	80091f8 <__gethex+0xb0>
 8009206:	1bad      	subs	r5, r5, r6
 8009208:	00ad      	lsls	r5, r5, #2
 800920a:	e004      	b.n	8009216 <__gethex+0xce>
 800920c:	2400      	movs	r4, #0
 800920e:	4625      	mov	r5, r4
 8009210:	e7e0      	b.n	80091d4 <__gethex+0x8c>
 8009212:	2d00      	cmp	r5, #0
 8009214:	d1f7      	bne.n	8009206 <__gethex+0xbe>
 8009216:	7833      	ldrb	r3, [r6, #0]
 8009218:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800921c:	2b50      	cmp	r3, #80	; 0x50
 800921e:	d139      	bne.n	8009294 <__gethex+0x14c>
 8009220:	7873      	ldrb	r3, [r6, #1]
 8009222:	2b2b      	cmp	r3, #43	; 0x2b
 8009224:	d02a      	beq.n	800927c <__gethex+0x134>
 8009226:	2b2d      	cmp	r3, #45	; 0x2d
 8009228:	d02c      	beq.n	8009284 <__gethex+0x13c>
 800922a:	f04f 0900 	mov.w	r9, #0
 800922e:	1c71      	adds	r1, r6, #1
 8009230:	7808      	ldrb	r0, [r1, #0]
 8009232:	f7ff ff74 	bl	800911e <__hexdig_fun>
 8009236:	1e43      	subs	r3, r0, #1
 8009238:	b2db      	uxtb	r3, r3
 800923a:	2b18      	cmp	r3, #24
 800923c:	d82a      	bhi.n	8009294 <__gethex+0x14c>
 800923e:	f1a0 0210 	sub.w	r2, r0, #16
 8009242:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009246:	f7ff ff6a 	bl	800911e <__hexdig_fun>
 800924a:	1e43      	subs	r3, r0, #1
 800924c:	b2db      	uxtb	r3, r3
 800924e:	2b18      	cmp	r3, #24
 8009250:	d91b      	bls.n	800928a <__gethex+0x142>
 8009252:	f1b9 0f00 	cmp.w	r9, #0
 8009256:	d000      	beq.n	800925a <__gethex+0x112>
 8009258:	4252      	negs	r2, r2
 800925a:	4415      	add	r5, r2
 800925c:	f8cb 1000 	str.w	r1, [fp]
 8009260:	b1d4      	cbz	r4, 8009298 <__gethex+0x150>
 8009262:	9b01      	ldr	r3, [sp, #4]
 8009264:	2b00      	cmp	r3, #0
 8009266:	bf14      	ite	ne
 8009268:	2700      	movne	r7, #0
 800926a:	2706      	moveq	r7, #6
 800926c:	4638      	mov	r0, r7
 800926e:	b00b      	add	sp, #44	; 0x2c
 8009270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009274:	463e      	mov	r6, r7
 8009276:	4625      	mov	r5, r4
 8009278:	2401      	movs	r4, #1
 800927a:	e7cc      	b.n	8009216 <__gethex+0xce>
 800927c:	f04f 0900 	mov.w	r9, #0
 8009280:	1cb1      	adds	r1, r6, #2
 8009282:	e7d5      	b.n	8009230 <__gethex+0xe8>
 8009284:	f04f 0901 	mov.w	r9, #1
 8009288:	e7fa      	b.n	8009280 <__gethex+0x138>
 800928a:	230a      	movs	r3, #10
 800928c:	fb03 0202 	mla	r2, r3, r2, r0
 8009290:	3a10      	subs	r2, #16
 8009292:	e7d6      	b.n	8009242 <__gethex+0xfa>
 8009294:	4631      	mov	r1, r6
 8009296:	e7e1      	b.n	800925c <__gethex+0x114>
 8009298:	4621      	mov	r1, r4
 800929a:	1bf3      	subs	r3, r6, r7
 800929c:	3b01      	subs	r3, #1
 800929e:	2b07      	cmp	r3, #7
 80092a0:	dc0a      	bgt.n	80092b8 <__gethex+0x170>
 80092a2:	9802      	ldr	r0, [sp, #8]
 80092a4:	f000 fa7a 	bl	800979c <_Balloc>
 80092a8:	4604      	mov	r4, r0
 80092aa:	b940      	cbnz	r0, 80092be <__gethex+0x176>
 80092ac:	4602      	mov	r2, r0
 80092ae:	21de      	movs	r1, #222	; 0xde
 80092b0:	4b5b      	ldr	r3, [pc, #364]	; (8009420 <__gethex+0x2d8>)
 80092b2:	485c      	ldr	r0, [pc, #368]	; (8009424 <__gethex+0x2dc>)
 80092b4:	f7ff f836 	bl	8008324 <__assert_func>
 80092b8:	3101      	adds	r1, #1
 80092ba:	105b      	asrs	r3, r3, #1
 80092bc:	e7ef      	b.n	800929e <__gethex+0x156>
 80092be:	f04f 0b00 	mov.w	fp, #0
 80092c2:	f100 0914 	add.w	r9, r0, #20
 80092c6:	f1ca 0301 	rsb	r3, sl, #1
 80092ca:	f8cd 9010 	str.w	r9, [sp, #16]
 80092ce:	f8cd b004 	str.w	fp, [sp, #4]
 80092d2:	9308      	str	r3, [sp, #32]
 80092d4:	42b7      	cmp	r7, r6
 80092d6:	d33f      	bcc.n	8009358 <__gethex+0x210>
 80092d8:	9f04      	ldr	r7, [sp, #16]
 80092da:	9b01      	ldr	r3, [sp, #4]
 80092dc:	f847 3b04 	str.w	r3, [r7], #4
 80092e0:	eba7 0709 	sub.w	r7, r7, r9
 80092e4:	10bf      	asrs	r7, r7, #2
 80092e6:	6127      	str	r7, [r4, #16]
 80092e8:	4618      	mov	r0, r3
 80092ea:	f000 fb49 	bl	8009980 <__hi0bits>
 80092ee:	017f      	lsls	r7, r7, #5
 80092f0:	f8d8 6000 	ldr.w	r6, [r8]
 80092f4:	1a3f      	subs	r7, r7, r0
 80092f6:	42b7      	cmp	r7, r6
 80092f8:	dd62      	ble.n	80093c0 <__gethex+0x278>
 80092fa:	1bbf      	subs	r7, r7, r6
 80092fc:	4639      	mov	r1, r7
 80092fe:	4620      	mov	r0, r4
 8009300:	f000 fee3 	bl	800a0ca <__any_on>
 8009304:	4682      	mov	sl, r0
 8009306:	b1a8      	cbz	r0, 8009334 <__gethex+0x1ec>
 8009308:	f04f 0a01 	mov.w	sl, #1
 800930c:	1e7b      	subs	r3, r7, #1
 800930e:	1159      	asrs	r1, r3, #5
 8009310:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009314:	f003 021f 	and.w	r2, r3, #31
 8009318:	fa0a f202 	lsl.w	r2, sl, r2
 800931c:	420a      	tst	r2, r1
 800931e:	d009      	beq.n	8009334 <__gethex+0x1ec>
 8009320:	4553      	cmp	r3, sl
 8009322:	dd05      	ble.n	8009330 <__gethex+0x1e8>
 8009324:	4620      	mov	r0, r4
 8009326:	1eb9      	subs	r1, r7, #2
 8009328:	f000 fecf 	bl	800a0ca <__any_on>
 800932c:	2800      	cmp	r0, #0
 800932e:	d144      	bne.n	80093ba <__gethex+0x272>
 8009330:	f04f 0a02 	mov.w	sl, #2
 8009334:	4639      	mov	r1, r7
 8009336:	4620      	mov	r0, r4
 8009338:	f7ff fe9e 	bl	8009078 <rshift>
 800933c:	443d      	add	r5, r7
 800933e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009342:	42ab      	cmp	r3, r5
 8009344:	da4a      	bge.n	80093dc <__gethex+0x294>
 8009346:	4621      	mov	r1, r4
 8009348:	9802      	ldr	r0, [sp, #8]
 800934a:	f000 fa67 	bl	800981c <_Bfree>
 800934e:	2300      	movs	r3, #0
 8009350:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009352:	27a3      	movs	r7, #163	; 0xa3
 8009354:	6013      	str	r3, [r2, #0]
 8009356:	e789      	b.n	800926c <__gethex+0x124>
 8009358:	1e73      	subs	r3, r6, #1
 800935a:	9a06      	ldr	r2, [sp, #24]
 800935c:	9307      	str	r3, [sp, #28]
 800935e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009362:	4293      	cmp	r3, r2
 8009364:	d019      	beq.n	800939a <__gethex+0x252>
 8009366:	f1bb 0f20 	cmp.w	fp, #32
 800936a:	d107      	bne.n	800937c <__gethex+0x234>
 800936c:	9b04      	ldr	r3, [sp, #16]
 800936e:	9a01      	ldr	r2, [sp, #4]
 8009370:	f843 2b04 	str.w	r2, [r3], #4
 8009374:	9304      	str	r3, [sp, #16]
 8009376:	2300      	movs	r3, #0
 8009378:	469b      	mov	fp, r3
 800937a:	9301      	str	r3, [sp, #4]
 800937c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009380:	f7ff fecd 	bl	800911e <__hexdig_fun>
 8009384:	9b01      	ldr	r3, [sp, #4]
 8009386:	f000 000f 	and.w	r0, r0, #15
 800938a:	fa00 f00b 	lsl.w	r0, r0, fp
 800938e:	4303      	orrs	r3, r0
 8009390:	9301      	str	r3, [sp, #4]
 8009392:	f10b 0b04 	add.w	fp, fp, #4
 8009396:	9b07      	ldr	r3, [sp, #28]
 8009398:	e00d      	b.n	80093b6 <__gethex+0x26e>
 800939a:	9a08      	ldr	r2, [sp, #32]
 800939c:	1e73      	subs	r3, r6, #1
 800939e:	4413      	add	r3, r2
 80093a0:	42bb      	cmp	r3, r7
 80093a2:	d3e0      	bcc.n	8009366 <__gethex+0x21e>
 80093a4:	4618      	mov	r0, r3
 80093a6:	4652      	mov	r2, sl
 80093a8:	9903      	ldr	r1, [sp, #12]
 80093aa:	9309      	str	r3, [sp, #36]	; 0x24
 80093ac:	f001 fa68 	bl	800a880 <strncmp>
 80093b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093b2:	2800      	cmp	r0, #0
 80093b4:	d1d7      	bne.n	8009366 <__gethex+0x21e>
 80093b6:	461e      	mov	r6, r3
 80093b8:	e78c      	b.n	80092d4 <__gethex+0x18c>
 80093ba:	f04f 0a03 	mov.w	sl, #3
 80093be:	e7b9      	b.n	8009334 <__gethex+0x1ec>
 80093c0:	da09      	bge.n	80093d6 <__gethex+0x28e>
 80093c2:	1bf7      	subs	r7, r6, r7
 80093c4:	4621      	mov	r1, r4
 80093c6:	463a      	mov	r2, r7
 80093c8:	9802      	ldr	r0, [sp, #8]
 80093ca:	f000 fc3f 	bl	8009c4c <__lshift>
 80093ce:	4604      	mov	r4, r0
 80093d0:	1bed      	subs	r5, r5, r7
 80093d2:	f100 0914 	add.w	r9, r0, #20
 80093d6:	f04f 0a00 	mov.w	sl, #0
 80093da:	e7b0      	b.n	800933e <__gethex+0x1f6>
 80093dc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80093e0:	42a8      	cmp	r0, r5
 80093e2:	dd72      	ble.n	80094ca <__gethex+0x382>
 80093e4:	1b45      	subs	r5, r0, r5
 80093e6:	42ae      	cmp	r6, r5
 80093e8:	dc35      	bgt.n	8009456 <__gethex+0x30e>
 80093ea:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80093ee:	2b02      	cmp	r3, #2
 80093f0:	d029      	beq.n	8009446 <__gethex+0x2fe>
 80093f2:	2b03      	cmp	r3, #3
 80093f4:	d02b      	beq.n	800944e <__gethex+0x306>
 80093f6:	2b01      	cmp	r3, #1
 80093f8:	d11c      	bne.n	8009434 <__gethex+0x2ec>
 80093fa:	42ae      	cmp	r6, r5
 80093fc:	d11a      	bne.n	8009434 <__gethex+0x2ec>
 80093fe:	2e01      	cmp	r6, #1
 8009400:	d112      	bne.n	8009428 <__gethex+0x2e0>
 8009402:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009406:	9a05      	ldr	r2, [sp, #20]
 8009408:	2762      	movs	r7, #98	; 0x62
 800940a:	6013      	str	r3, [r2, #0]
 800940c:	2301      	movs	r3, #1
 800940e:	6123      	str	r3, [r4, #16]
 8009410:	f8c9 3000 	str.w	r3, [r9]
 8009414:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009416:	601c      	str	r4, [r3, #0]
 8009418:	e728      	b.n	800926c <__gethex+0x124>
 800941a:	bf00      	nop
 800941c:	0800b768 	.word	0x0800b768
 8009420:	0800b6f1 	.word	0x0800b6f1
 8009424:	0800b702 	.word	0x0800b702
 8009428:	4620      	mov	r0, r4
 800942a:	1e71      	subs	r1, r6, #1
 800942c:	f000 fe4d 	bl	800a0ca <__any_on>
 8009430:	2800      	cmp	r0, #0
 8009432:	d1e6      	bne.n	8009402 <__gethex+0x2ba>
 8009434:	4621      	mov	r1, r4
 8009436:	9802      	ldr	r0, [sp, #8]
 8009438:	f000 f9f0 	bl	800981c <_Bfree>
 800943c:	2300      	movs	r3, #0
 800943e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009440:	2750      	movs	r7, #80	; 0x50
 8009442:	6013      	str	r3, [r2, #0]
 8009444:	e712      	b.n	800926c <__gethex+0x124>
 8009446:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009448:	2b00      	cmp	r3, #0
 800944a:	d1f3      	bne.n	8009434 <__gethex+0x2ec>
 800944c:	e7d9      	b.n	8009402 <__gethex+0x2ba>
 800944e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009450:	2b00      	cmp	r3, #0
 8009452:	d1d6      	bne.n	8009402 <__gethex+0x2ba>
 8009454:	e7ee      	b.n	8009434 <__gethex+0x2ec>
 8009456:	1e6f      	subs	r7, r5, #1
 8009458:	f1ba 0f00 	cmp.w	sl, #0
 800945c:	d132      	bne.n	80094c4 <__gethex+0x37c>
 800945e:	b127      	cbz	r7, 800946a <__gethex+0x322>
 8009460:	4639      	mov	r1, r7
 8009462:	4620      	mov	r0, r4
 8009464:	f000 fe31 	bl	800a0ca <__any_on>
 8009468:	4682      	mov	sl, r0
 800946a:	2101      	movs	r1, #1
 800946c:	117b      	asrs	r3, r7, #5
 800946e:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009472:	f007 071f 	and.w	r7, r7, #31
 8009476:	fa01 f707 	lsl.w	r7, r1, r7
 800947a:	421f      	tst	r7, r3
 800947c:	f04f 0702 	mov.w	r7, #2
 8009480:	4629      	mov	r1, r5
 8009482:	4620      	mov	r0, r4
 8009484:	bf18      	it	ne
 8009486:	f04a 0a02 	orrne.w	sl, sl, #2
 800948a:	1b76      	subs	r6, r6, r5
 800948c:	f7ff fdf4 	bl	8009078 <rshift>
 8009490:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009494:	f1ba 0f00 	cmp.w	sl, #0
 8009498:	d048      	beq.n	800952c <__gethex+0x3e4>
 800949a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800949e:	2b02      	cmp	r3, #2
 80094a0:	d015      	beq.n	80094ce <__gethex+0x386>
 80094a2:	2b03      	cmp	r3, #3
 80094a4:	d017      	beq.n	80094d6 <__gethex+0x38e>
 80094a6:	2b01      	cmp	r3, #1
 80094a8:	d109      	bne.n	80094be <__gethex+0x376>
 80094aa:	f01a 0f02 	tst.w	sl, #2
 80094ae:	d006      	beq.n	80094be <__gethex+0x376>
 80094b0:	f8d9 0000 	ldr.w	r0, [r9]
 80094b4:	ea4a 0a00 	orr.w	sl, sl, r0
 80094b8:	f01a 0f01 	tst.w	sl, #1
 80094bc:	d10e      	bne.n	80094dc <__gethex+0x394>
 80094be:	f047 0710 	orr.w	r7, r7, #16
 80094c2:	e033      	b.n	800952c <__gethex+0x3e4>
 80094c4:	f04f 0a01 	mov.w	sl, #1
 80094c8:	e7cf      	b.n	800946a <__gethex+0x322>
 80094ca:	2701      	movs	r7, #1
 80094cc:	e7e2      	b.n	8009494 <__gethex+0x34c>
 80094ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80094d0:	f1c3 0301 	rsb	r3, r3, #1
 80094d4:	9315      	str	r3, [sp, #84]	; 0x54
 80094d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d0f0      	beq.n	80094be <__gethex+0x376>
 80094dc:	f04f 0c00 	mov.w	ip, #0
 80094e0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80094e4:	f104 0314 	add.w	r3, r4, #20
 80094e8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80094ec:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80094f0:	4618      	mov	r0, r3
 80094f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80094f6:	f1b2 3fff 	cmp.w	r2, #4294967295
 80094fa:	d01c      	beq.n	8009536 <__gethex+0x3ee>
 80094fc:	3201      	adds	r2, #1
 80094fe:	6002      	str	r2, [r0, #0]
 8009500:	2f02      	cmp	r7, #2
 8009502:	f104 0314 	add.w	r3, r4, #20
 8009506:	d13d      	bne.n	8009584 <__gethex+0x43c>
 8009508:	f8d8 2000 	ldr.w	r2, [r8]
 800950c:	3a01      	subs	r2, #1
 800950e:	42b2      	cmp	r2, r6
 8009510:	d10a      	bne.n	8009528 <__gethex+0x3e0>
 8009512:	2201      	movs	r2, #1
 8009514:	1171      	asrs	r1, r6, #5
 8009516:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800951a:	f006 061f 	and.w	r6, r6, #31
 800951e:	fa02 f606 	lsl.w	r6, r2, r6
 8009522:	421e      	tst	r6, r3
 8009524:	bf18      	it	ne
 8009526:	4617      	movne	r7, r2
 8009528:	f047 0720 	orr.w	r7, r7, #32
 800952c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800952e:	601c      	str	r4, [r3, #0]
 8009530:	9b05      	ldr	r3, [sp, #20]
 8009532:	601d      	str	r5, [r3, #0]
 8009534:	e69a      	b.n	800926c <__gethex+0x124>
 8009536:	4299      	cmp	r1, r3
 8009538:	f843 cc04 	str.w	ip, [r3, #-4]
 800953c:	d8d8      	bhi.n	80094f0 <__gethex+0x3a8>
 800953e:	68a3      	ldr	r3, [r4, #8]
 8009540:	459b      	cmp	fp, r3
 8009542:	db17      	blt.n	8009574 <__gethex+0x42c>
 8009544:	6861      	ldr	r1, [r4, #4]
 8009546:	9802      	ldr	r0, [sp, #8]
 8009548:	3101      	adds	r1, #1
 800954a:	f000 f927 	bl	800979c <_Balloc>
 800954e:	4681      	mov	r9, r0
 8009550:	b918      	cbnz	r0, 800955a <__gethex+0x412>
 8009552:	4602      	mov	r2, r0
 8009554:	2184      	movs	r1, #132	; 0x84
 8009556:	4b19      	ldr	r3, [pc, #100]	; (80095bc <__gethex+0x474>)
 8009558:	e6ab      	b.n	80092b2 <__gethex+0x16a>
 800955a:	6922      	ldr	r2, [r4, #16]
 800955c:	f104 010c 	add.w	r1, r4, #12
 8009560:	3202      	adds	r2, #2
 8009562:	0092      	lsls	r2, r2, #2
 8009564:	300c      	adds	r0, #12
 8009566:	f7fd fb39 	bl	8006bdc <memcpy>
 800956a:	4621      	mov	r1, r4
 800956c:	9802      	ldr	r0, [sp, #8]
 800956e:	f000 f955 	bl	800981c <_Bfree>
 8009572:	464c      	mov	r4, r9
 8009574:	6923      	ldr	r3, [r4, #16]
 8009576:	1c5a      	adds	r2, r3, #1
 8009578:	6122      	str	r2, [r4, #16]
 800957a:	2201      	movs	r2, #1
 800957c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009580:	615a      	str	r2, [r3, #20]
 8009582:	e7bd      	b.n	8009500 <__gethex+0x3b8>
 8009584:	6922      	ldr	r2, [r4, #16]
 8009586:	455a      	cmp	r2, fp
 8009588:	dd0b      	ble.n	80095a2 <__gethex+0x45a>
 800958a:	2101      	movs	r1, #1
 800958c:	4620      	mov	r0, r4
 800958e:	f7ff fd73 	bl	8009078 <rshift>
 8009592:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009596:	3501      	adds	r5, #1
 8009598:	42ab      	cmp	r3, r5
 800959a:	f6ff aed4 	blt.w	8009346 <__gethex+0x1fe>
 800959e:	2701      	movs	r7, #1
 80095a0:	e7c2      	b.n	8009528 <__gethex+0x3e0>
 80095a2:	f016 061f 	ands.w	r6, r6, #31
 80095a6:	d0fa      	beq.n	800959e <__gethex+0x456>
 80095a8:	4453      	add	r3, sl
 80095aa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80095ae:	f000 f9e7 	bl	8009980 <__hi0bits>
 80095b2:	f1c6 0620 	rsb	r6, r6, #32
 80095b6:	42b0      	cmp	r0, r6
 80095b8:	dbe7      	blt.n	800958a <__gethex+0x442>
 80095ba:	e7f0      	b.n	800959e <__gethex+0x456>
 80095bc:	0800b6f1 	.word	0x0800b6f1

080095c0 <L_shift>:
 80095c0:	f1c2 0208 	rsb	r2, r2, #8
 80095c4:	0092      	lsls	r2, r2, #2
 80095c6:	b570      	push	{r4, r5, r6, lr}
 80095c8:	f1c2 0620 	rsb	r6, r2, #32
 80095cc:	6843      	ldr	r3, [r0, #4]
 80095ce:	6804      	ldr	r4, [r0, #0]
 80095d0:	fa03 f506 	lsl.w	r5, r3, r6
 80095d4:	432c      	orrs	r4, r5
 80095d6:	40d3      	lsrs	r3, r2
 80095d8:	6004      	str	r4, [r0, #0]
 80095da:	f840 3f04 	str.w	r3, [r0, #4]!
 80095de:	4288      	cmp	r0, r1
 80095e0:	d3f4      	bcc.n	80095cc <L_shift+0xc>
 80095e2:	bd70      	pop	{r4, r5, r6, pc}

080095e4 <__match>:
 80095e4:	b530      	push	{r4, r5, lr}
 80095e6:	6803      	ldr	r3, [r0, #0]
 80095e8:	3301      	adds	r3, #1
 80095ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80095ee:	b914      	cbnz	r4, 80095f6 <__match+0x12>
 80095f0:	6003      	str	r3, [r0, #0]
 80095f2:	2001      	movs	r0, #1
 80095f4:	bd30      	pop	{r4, r5, pc}
 80095f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80095fa:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80095fe:	2d19      	cmp	r5, #25
 8009600:	bf98      	it	ls
 8009602:	3220      	addls	r2, #32
 8009604:	42a2      	cmp	r2, r4
 8009606:	d0f0      	beq.n	80095ea <__match+0x6>
 8009608:	2000      	movs	r0, #0
 800960a:	e7f3      	b.n	80095f4 <__match+0x10>

0800960c <__hexnan>:
 800960c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009610:	2500      	movs	r5, #0
 8009612:	680b      	ldr	r3, [r1, #0]
 8009614:	4682      	mov	sl, r0
 8009616:	115e      	asrs	r6, r3, #5
 8009618:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800961c:	f013 031f 	ands.w	r3, r3, #31
 8009620:	bf18      	it	ne
 8009622:	3604      	addne	r6, #4
 8009624:	1f37      	subs	r7, r6, #4
 8009626:	46b9      	mov	r9, r7
 8009628:	463c      	mov	r4, r7
 800962a:	46ab      	mov	fp, r5
 800962c:	b087      	sub	sp, #28
 800962e:	4690      	mov	r8, r2
 8009630:	6802      	ldr	r2, [r0, #0]
 8009632:	9301      	str	r3, [sp, #4]
 8009634:	f846 5c04 	str.w	r5, [r6, #-4]
 8009638:	9502      	str	r5, [sp, #8]
 800963a:	7851      	ldrb	r1, [r2, #1]
 800963c:	1c53      	adds	r3, r2, #1
 800963e:	9303      	str	r3, [sp, #12]
 8009640:	b341      	cbz	r1, 8009694 <__hexnan+0x88>
 8009642:	4608      	mov	r0, r1
 8009644:	9205      	str	r2, [sp, #20]
 8009646:	9104      	str	r1, [sp, #16]
 8009648:	f7ff fd69 	bl	800911e <__hexdig_fun>
 800964c:	2800      	cmp	r0, #0
 800964e:	d14f      	bne.n	80096f0 <__hexnan+0xe4>
 8009650:	9904      	ldr	r1, [sp, #16]
 8009652:	9a05      	ldr	r2, [sp, #20]
 8009654:	2920      	cmp	r1, #32
 8009656:	d818      	bhi.n	800968a <__hexnan+0x7e>
 8009658:	9b02      	ldr	r3, [sp, #8]
 800965a:	459b      	cmp	fp, r3
 800965c:	dd13      	ble.n	8009686 <__hexnan+0x7a>
 800965e:	454c      	cmp	r4, r9
 8009660:	d206      	bcs.n	8009670 <__hexnan+0x64>
 8009662:	2d07      	cmp	r5, #7
 8009664:	dc04      	bgt.n	8009670 <__hexnan+0x64>
 8009666:	462a      	mov	r2, r5
 8009668:	4649      	mov	r1, r9
 800966a:	4620      	mov	r0, r4
 800966c:	f7ff ffa8 	bl	80095c0 <L_shift>
 8009670:	4544      	cmp	r4, r8
 8009672:	d950      	bls.n	8009716 <__hexnan+0x10a>
 8009674:	2300      	movs	r3, #0
 8009676:	f1a4 0904 	sub.w	r9, r4, #4
 800967a:	f844 3c04 	str.w	r3, [r4, #-4]
 800967e:	461d      	mov	r5, r3
 8009680:	464c      	mov	r4, r9
 8009682:	f8cd b008 	str.w	fp, [sp, #8]
 8009686:	9a03      	ldr	r2, [sp, #12]
 8009688:	e7d7      	b.n	800963a <__hexnan+0x2e>
 800968a:	2929      	cmp	r1, #41	; 0x29
 800968c:	d156      	bne.n	800973c <__hexnan+0x130>
 800968e:	3202      	adds	r2, #2
 8009690:	f8ca 2000 	str.w	r2, [sl]
 8009694:	f1bb 0f00 	cmp.w	fp, #0
 8009698:	d050      	beq.n	800973c <__hexnan+0x130>
 800969a:	454c      	cmp	r4, r9
 800969c:	d206      	bcs.n	80096ac <__hexnan+0xa0>
 800969e:	2d07      	cmp	r5, #7
 80096a0:	dc04      	bgt.n	80096ac <__hexnan+0xa0>
 80096a2:	462a      	mov	r2, r5
 80096a4:	4649      	mov	r1, r9
 80096a6:	4620      	mov	r0, r4
 80096a8:	f7ff ff8a 	bl	80095c0 <L_shift>
 80096ac:	4544      	cmp	r4, r8
 80096ae:	d934      	bls.n	800971a <__hexnan+0x10e>
 80096b0:	4623      	mov	r3, r4
 80096b2:	f1a8 0204 	sub.w	r2, r8, #4
 80096b6:	f853 1b04 	ldr.w	r1, [r3], #4
 80096ba:	429f      	cmp	r7, r3
 80096bc:	f842 1f04 	str.w	r1, [r2, #4]!
 80096c0:	d2f9      	bcs.n	80096b6 <__hexnan+0xaa>
 80096c2:	1b3b      	subs	r3, r7, r4
 80096c4:	f023 0303 	bic.w	r3, r3, #3
 80096c8:	3304      	adds	r3, #4
 80096ca:	3401      	adds	r4, #1
 80096cc:	3e03      	subs	r6, #3
 80096ce:	42b4      	cmp	r4, r6
 80096d0:	bf88      	it	hi
 80096d2:	2304      	movhi	r3, #4
 80096d4:	2200      	movs	r2, #0
 80096d6:	4443      	add	r3, r8
 80096d8:	f843 2b04 	str.w	r2, [r3], #4
 80096dc:	429f      	cmp	r7, r3
 80096de:	d2fb      	bcs.n	80096d8 <__hexnan+0xcc>
 80096e0:	683b      	ldr	r3, [r7, #0]
 80096e2:	b91b      	cbnz	r3, 80096ec <__hexnan+0xe0>
 80096e4:	4547      	cmp	r7, r8
 80096e6:	d127      	bne.n	8009738 <__hexnan+0x12c>
 80096e8:	2301      	movs	r3, #1
 80096ea:	603b      	str	r3, [r7, #0]
 80096ec:	2005      	movs	r0, #5
 80096ee:	e026      	b.n	800973e <__hexnan+0x132>
 80096f0:	3501      	adds	r5, #1
 80096f2:	2d08      	cmp	r5, #8
 80096f4:	f10b 0b01 	add.w	fp, fp, #1
 80096f8:	dd06      	ble.n	8009708 <__hexnan+0xfc>
 80096fa:	4544      	cmp	r4, r8
 80096fc:	d9c3      	bls.n	8009686 <__hexnan+0x7a>
 80096fe:	2300      	movs	r3, #0
 8009700:	2501      	movs	r5, #1
 8009702:	f844 3c04 	str.w	r3, [r4, #-4]
 8009706:	3c04      	subs	r4, #4
 8009708:	6822      	ldr	r2, [r4, #0]
 800970a:	f000 000f 	and.w	r0, r0, #15
 800970e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8009712:	6022      	str	r2, [r4, #0]
 8009714:	e7b7      	b.n	8009686 <__hexnan+0x7a>
 8009716:	2508      	movs	r5, #8
 8009718:	e7b5      	b.n	8009686 <__hexnan+0x7a>
 800971a:	9b01      	ldr	r3, [sp, #4]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d0df      	beq.n	80096e0 <__hexnan+0xd4>
 8009720:	f04f 32ff 	mov.w	r2, #4294967295
 8009724:	f1c3 0320 	rsb	r3, r3, #32
 8009728:	fa22 f303 	lsr.w	r3, r2, r3
 800972c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009730:	401a      	ands	r2, r3
 8009732:	f846 2c04 	str.w	r2, [r6, #-4]
 8009736:	e7d3      	b.n	80096e0 <__hexnan+0xd4>
 8009738:	3f04      	subs	r7, #4
 800973a:	e7d1      	b.n	80096e0 <__hexnan+0xd4>
 800973c:	2004      	movs	r0, #4
 800973e:	b007      	add	sp, #28
 8009740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009744 <_localeconv_r>:
 8009744:	4800      	ldr	r0, [pc, #0]	; (8009748 <_localeconv_r+0x4>)
 8009746:	4770      	bx	lr
 8009748:	200002e8 	.word	0x200002e8

0800974c <malloc>:
 800974c:	4b02      	ldr	r3, [pc, #8]	; (8009758 <malloc+0xc>)
 800974e:	4601      	mov	r1, r0
 8009750:	6818      	ldr	r0, [r3, #0]
 8009752:	f000 bd57 	b.w	800a204 <_malloc_r>
 8009756:	bf00      	nop
 8009758:	20000190 	.word	0x20000190

0800975c <__ascii_mbtowc>:
 800975c:	b082      	sub	sp, #8
 800975e:	b901      	cbnz	r1, 8009762 <__ascii_mbtowc+0x6>
 8009760:	a901      	add	r1, sp, #4
 8009762:	b142      	cbz	r2, 8009776 <__ascii_mbtowc+0x1a>
 8009764:	b14b      	cbz	r3, 800977a <__ascii_mbtowc+0x1e>
 8009766:	7813      	ldrb	r3, [r2, #0]
 8009768:	600b      	str	r3, [r1, #0]
 800976a:	7812      	ldrb	r2, [r2, #0]
 800976c:	1e10      	subs	r0, r2, #0
 800976e:	bf18      	it	ne
 8009770:	2001      	movne	r0, #1
 8009772:	b002      	add	sp, #8
 8009774:	4770      	bx	lr
 8009776:	4610      	mov	r0, r2
 8009778:	e7fb      	b.n	8009772 <__ascii_mbtowc+0x16>
 800977a:	f06f 0001 	mvn.w	r0, #1
 800977e:	e7f8      	b.n	8009772 <__ascii_mbtowc+0x16>

08009780 <memchr>:
 8009780:	4603      	mov	r3, r0
 8009782:	b510      	push	{r4, lr}
 8009784:	b2c9      	uxtb	r1, r1
 8009786:	4402      	add	r2, r0
 8009788:	4293      	cmp	r3, r2
 800978a:	4618      	mov	r0, r3
 800978c:	d101      	bne.n	8009792 <memchr+0x12>
 800978e:	2000      	movs	r0, #0
 8009790:	e003      	b.n	800979a <memchr+0x1a>
 8009792:	7804      	ldrb	r4, [r0, #0]
 8009794:	3301      	adds	r3, #1
 8009796:	428c      	cmp	r4, r1
 8009798:	d1f6      	bne.n	8009788 <memchr+0x8>
 800979a:	bd10      	pop	{r4, pc}

0800979c <_Balloc>:
 800979c:	b570      	push	{r4, r5, r6, lr}
 800979e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80097a0:	4604      	mov	r4, r0
 80097a2:	460d      	mov	r5, r1
 80097a4:	b976      	cbnz	r6, 80097c4 <_Balloc+0x28>
 80097a6:	2010      	movs	r0, #16
 80097a8:	f7ff ffd0 	bl	800974c <malloc>
 80097ac:	4602      	mov	r2, r0
 80097ae:	6260      	str	r0, [r4, #36]	; 0x24
 80097b0:	b920      	cbnz	r0, 80097bc <_Balloc+0x20>
 80097b2:	2166      	movs	r1, #102	; 0x66
 80097b4:	4b17      	ldr	r3, [pc, #92]	; (8009814 <_Balloc+0x78>)
 80097b6:	4818      	ldr	r0, [pc, #96]	; (8009818 <_Balloc+0x7c>)
 80097b8:	f7fe fdb4 	bl	8008324 <__assert_func>
 80097bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80097c0:	6006      	str	r6, [r0, #0]
 80097c2:	60c6      	str	r6, [r0, #12]
 80097c4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80097c6:	68f3      	ldr	r3, [r6, #12]
 80097c8:	b183      	cbz	r3, 80097ec <_Balloc+0x50>
 80097ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80097cc:	68db      	ldr	r3, [r3, #12]
 80097ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80097d2:	b9b8      	cbnz	r0, 8009804 <_Balloc+0x68>
 80097d4:	2101      	movs	r1, #1
 80097d6:	fa01 f605 	lsl.w	r6, r1, r5
 80097da:	1d72      	adds	r2, r6, #5
 80097dc:	4620      	mov	r0, r4
 80097de:	0092      	lsls	r2, r2, #2
 80097e0:	f000 fc94 	bl	800a10c <_calloc_r>
 80097e4:	b160      	cbz	r0, 8009800 <_Balloc+0x64>
 80097e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80097ea:	e00e      	b.n	800980a <_Balloc+0x6e>
 80097ec:	2221      	movs	r2, #33	; 0x21
 80097ee:	2104      	movs	r1, #4
 80097f0:	4620      	mov	r0, r4
 80097f2:	f000 fc8b 	bl	800a10c <_calloc_r>
 80097f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80097f8:	60f0      	str	r0, [r6, #12]
 80097fa:	68db      	ldr	r3, [r3, #12]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d1e4      	bne.n	80097ca <_Balloc+0x2e>
 8009800:	2000      	movs	r0, #0
 8009802:	bd70      	pop	{r4, r5, r6, pc}
 8009804:	6802      	ldr	r2, [r0, #0]
 8009806:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800980a:	2300      	movs	r3, #0
 800980c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009810:	e7f7      	b.n	8009802 <_Balloc+0x66>
 8009812:	bf00      	nop
 8009814:	0800b4d8 	.word	0x0800b4d8
 8009818:	0800b77c 	.word	0x0800b77c

0800981c <_Bfree>:
 800981c:	b570      	push	{r4, r5, r6, lr}
 800981e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009820:	4605      	mov	r5, r0
 8009822:	460c      	mov	r4, r1
 8009824:	b976      	cbnz	r6, 8009844 <_Bfree+0x28>
 8009826:	2010      	movs	r0, #16
 8009828:	f7ff ff90 	bl	800974c <malloc>
 800982c:	4602      	mov	r2, r0
 800982e:	6268      	str	r0, [r5, #36]	; 0x24
 8009830:	b920      	cbnz	r0, 800983c <_Bfree+0x20>
 8009832:	218a      	movs	r1, #138	; 0x8a
 8009834:	4b08      	ldr	r3, [pc, #32]	; (8009858 <_Bfree+0x3c>)
 8009836:	4809      	ldr	r0, [pc, #36]	; (800985c <_Bfree+0x40>)
 8009838:	f7fe fd74 	bl	8008324 <__assert_func>
 800983c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009840:	6006      	str	r6, [r0, #0]
 8009842:	60c6      	str	r6, [r0, #12]
 8009844:	b13c      	cbz	r4, 8009856 <_Bfree+0x3a>
 8009846:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009848:	6862      	ldr	r2, [r4, #4]
 800984a:	68db      	ldr	r3, [r3, #12]
 800984c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009850:	6021      	str	r1, [r4, #0]
 8009852:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009856:	bd70      	pop	{r4, r5, r6, pc}
 8009858:	0800b4d8 	.word	0x0800b4d8
 800985c:	0800b77c 	.word	0x0800b77c

08009860 <__multadd>:
 8009860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009864:	4607      	mov	r7, r0
 8009866:	460c      	mov	r4, r1
 8009868:	461e      	mov	r6, r3
 800986a:	2000      	movs	r0, #0
 800986c:	690d      	ldr	r5, [r1, #16]
 800986e:	f101 0c14 	add.w	ip, r1, #20
 8009872:	f8dc 3000 	ldr.w	r3, [ip]
 8009876:	3001      	adds	r0, #1
 8009878:	b299      	uxth	r1, r3
 800987a:	fb02 6101 	mla	r1, r2, r1, r6
 800987e:	0c1e      	lsrs	r6, r3, #16
 8009880:	0c0b      	lsrs	r3, r1, #16
 8009882:	fb02 3306 	mla	r3, r2, r6, r3
 8009886:	b289      	uxth	r1, r1
 8009888:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800988c:	4285      	cmp	r5, r0
 800988e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009892:	f84c 1b04 	str.w	r1, [ip], #4
 8009896:	dcec      	bgt.n	8009872 <__multadd+0x12>
 8009898:	b30e      	cbz	r6, 80098de <__multadd+0x7e>
 800989a:	68a3      	ldr	r3, [r4, #8]
 800989c:	42ab      	cmp	r3, r5
 800989e:	dc19      	bgt.n	80098d4 <__multadd+0x74>
 80098a0:	6861      	ldr	r1, [r4, #4]
 80098a2:	4638      	mov	r0, r7
 80098a4:	3101      	adds	r1, #1
 80098a6:	f7ff ff79 	bl	800979c <_Balloc>
 80098aa:	4680      	mov	r8, r0
 80098ac:	b928      	cbnz	r0, 80098ba <__multadd+0x5a>
 80098ae:	4602      	mov	r2, r0
 80098b0:	21b5      	movs	r1, #181	; 0xb5
 80098b2:	4b0c      	ldr	r3, [pc, #48]	; (80098e4 <__multadd+0x84>)
 80098b4:	480c      	ldr	r0, [pc, #48]	; (80098e8 <__multadd+0x88>)
 80098b6:	f7fe fd35 	bl	8008324 <__assert_func>
 80098ba:	6922      	ldr	r2, [r4, #16]
 80098bc:	f104 010c 	add.w	r1, r4, #12
 80098c0:	3202      	adds	r2, #2
 80098c2:	0092      	lsls	r2, r2, #2
 80098c4:	300c      	adds	r0, #12
 80098c6:	f7fd f989 	bl	8006bdc <memcpy>
 80098ca:	4621      	mov	r1, r4
 80098cc:	4638      	mov	r0, r7
 80098ce:	f7ff ffa5 	bl	800981c <_Bfree>
 80098d2:	4644      	mov	r4, r8
 80098d4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80098d8:	3501      	adds	r5, #1
 80098da:	615e      	str	r6, [r3, #20]
 80098dc:	6125      	str	r5, [r4, #16]
 80098de:	4620      	mov	r0, r4
 80098e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098e4:	0800b6f1 	.word	0x0800b6f1
 80098e8:	0800b77c 	.word	0x0800b77c

080098ec <__s2b>:
 80098ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098f0:	4615      	mov	r5, r2
 80098f2:	2209      	movs	r2, #9
 80098f4:	461f      	mov	r7, r3
 80098f6:	3308      	adds	r3, #8
 80098f8:	460c      	mov	r4, r1
 80098fa:	fb93 f3f2 	sdiv	r3, r3, r2
 80098fe:	4606      	mov	r6, r0
 8009900:	2201      	movs	r2, #1
 8009902:	2100      	movs	r1, #0
 8009904:	429a      	cmp	r2, r3
 8009906:	db09      	blt.n	800991c <__s2b+0x30>
 8009908:	4630      	mov	r0, r6
 800990a:	f7ff ff47 	bl	800979c <_Balloc>
 800990e:	b940      	cbnz	r0, 8009922 <__s2b+0x36>
 8009910:	4602      	mov	r2, r0
 8009912:	21ce      	movs	r1, #206	; 0xce
 8009914:	4b18      	ldr	r3, [pc, #96]	; (8009978 <__s2b+0x8c>)
 8009916:	4819      	ldr	r0, [pc, #100]	; (800997c <__s2b+0x90>)
 8009918:	f7fe fd04 	bl	8008324 <__assert_func>
 800991c:	0052      	lsls	r2, r2, #1
 800991e:	3101      	adds	r1, #1
 8009920:	e7f0      	b.n	8009904 <__s2b+0x18>
 8009922:	9b08      	ldr	r3, [sp, #32]
 8009924:	2d09      	cmp	r5, #9
 8009926:	6143      	str	r3, [r0, #20]
 8009928:	f04f 0301 	mov.w	r3, #1
 800992c:	6103      	str	r3, [r0, #16]
 800992e:	dd16      	ble.n	800995e <__s2b+0x72>
 8009930:	f104 0909 	add.w	r9, r4, #9
 8009934:	46c8      	mov	r8, r9
 8009936:	442c      	add	r4, r5
 8009938:	f818 3b01 	ldrb.w	r3, [r8], #1
 800993c:	4601      	mov	r1, r0
 800993e:	220a      	movs	r2, #10
 8009940:	4630      	mov	r0, r6
 8009942:	3b30      	subs	r3, #48	; 0x30
 8009944:	f7ff ff8c 	bl	8009860 <__multadd>
 8009948:	45a0      	cmp	r8, r4
 800994a:	d1f5      	bne.n	8009938 <__s2b+0x4c>
 800994c:	f1a5 0408 	sub.w	r4, r5, #8
 8009950:	444c      	add	r4, r9
 8009952:	1b2d      	subs	r5, r5, r4
 8009954:	1963      	adds	r3, r4, r5
 8009956:	42bb      	cmp	r3, r7
 8009958:	db04      	blt.n	8009964 <__s2b+0x78>
 800995a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800995e:	2509      	movs	r5, #9
 8009960:	340a      	adds	r4, #10
 8009962:	e7f6      	b.n	8009952 <__s2b+0x66>
 8009964:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009968:	4601      	mov	r1, r0
 800996a:	220a      	movs	r2, #10
 800996c:	4630      	mov	r0, r6
 800996e:	3b30      	subs	r3, #48	; 0x30
 8009970:	f7ff ff76 	bl	8009860 <__multadd>
 8009974:	e7ee      	b.n	8009954 <__s2b+0x68>
 8009976:	bf00      	nop
 8009978:	0800b6f1 	.word	0x0800b6f1
 800997c:	0800b77c 	.word	0x0800b77c

08009980 <__hi0bits>:
 8009980:	0c02      	lsrs	r2, r0, #16
 8009982:	0412      	lsls	r2, r2, #16
 8009984:	4603      	mov	r3, r0
 8009986:	b9ca      	cbnz	r2, 80099bc <__hi0bits+0x3c>
 8009988:	0403      	lsls	r3, r0, #16
 800998a:	2010      	movs	r0, #16
 800998c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009990:	bf04      	itt	eq
 8009992:	021b      	lsleq	r3, r3, #8
 8009994:	3008      	addeq	r0, #8
 8009996:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800999a:	bf04      	itt	eq
 800999c:	011b      	lsleq	r3, r3, #4
 800999e:	3004      	addeq	r0, #4
 80099a0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80099a4:	bf04      	itt	eq
 80099a6:	009b      	lsleq	r3, r3, #2
 80099a8:	3002      	addeq	r0, #2
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	db05      	blt.n	80099ba <__hi0bits+0x3a>
 80099ae:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80099b2:	f100 0001 	add.w	r0, r0, #1
 80099b6:	bf08      	it	eq
 80099b8:	2020      	moveq	r0, #32
 80099ba:	4770      	bx	lr
 80099bc:	2000      	movs	r0, #0
 80099be:	e7e5      	b.n	800998c <__hi0bits+0xc>

080099c0 <__lo0bits>:
 80099c0:	6803      	ldr	r3, [r0, #0]
 80099c2:	4602      	mov	r2, r0
 80099c4:	f013 0007 	ands.w	r0, r3, #7
 80099c8:	d00b      	beq.n	80099e2 <__lo0bits+0x22>
 80099ca:	07d9      	lsls	r1, r3, #31
 80099cc:	d421      	bmi.n	8009a12 <__lo0bits+0x52>
 80099ce:	0798      	lsls	r0, r3, #30
 80099d0:	bf49      	itett	mi
 80099d2:	085b      	lsrmi	r3, r3, #1
 80099d4:	089b      	lsrpl	r3, r3, #2
 80099d6:	2001      	movmi	r0, #1
 80099d8:	6013      	strmi	r3, [r2, #0]
 80099da:	bf5c      	itt	pl
 80099dc:	2002      	movpl	r0, #2
 80099de:	6013      	strpl	r3, [r2, #0]
 80099e0:	4770      	bx	lr
 80099e2:	b299      	uxth	r1, r3
 80099e4:	b909      	cbnz	r1, 80099ea <__lo0bits+0x2a>
 80099e6:	2010      	movs	r0, #16
 80099e8:	0c1b      	lsrs	r3, r3, #16
 80099ea:	b2d9      	uxtb	r1, r3
 80099ec:	b909      	cbnz	r1, 80099f2 <__lo0bits+0x32>
 80099ee:	3008      	adds	r0, #8
 80099f0:	0a1b      	lsrs	r3, r3, #8
 80099f2:	0719      	lsls	r1, r3, #28
 80099f4:	bf04      	itt	eq
 80099f6:	091b      	lsreq	r3, r3, #4
 80099f8:	3004      	addeq	r0, #4
 80099fa:	0799      	lsls	r1, r3, #30
 80099fc:	bf04      	itt	eq
 80099fe:	089b      	lsreq	r3, r3, #2
 8009a00:	3002      	addeq	r0, #2
 8009a02:	07d9      	lsls	r1, r3, #31
 8009a04:	d403      	bmi.n	8009a0e <__lo0bits+0x4e>
 8009a06:	085b      	lsrs	r3, r3, #1
 8009a08:	f100 0001 	add.w	r0, r0, #1
 8009a0c:	d003      	beq.n	8009a16 <__lo0bits+0x56>
 8009a0e:	6013      	str	r3, [r2, #0]
 8009a10:	4770      	bx	lr
 8009a12:	2000      	movs	r0, #0
 8009a14:	4770      	bx	lr
 8009a16:	2020      	movs	r0, #32
 8009a18:	4770      	bx	lr
	...

08009a1c <__i2b>:
 8009a1c:	b510      	push	{r4, lr}
 8009a1e:	460c      	mov	r4, r1
 8009a20:	2101      	movs	r1, #1
 8009a22:	f7ff febb 	bl	800979c <_Balloc>
 8009a26:	4602      	mov	r2, r0
 8009a28:	b928      	cbnz	r0, 8009a36 <__i2b+0x1a>
 8009a2a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009a2e:	4b04      	ldr	r3, [pc, #16]	; (8009a40 <__i2b+0x24>)
 8009a30:	4804      	ldr	r0, [pc, #16]	; (8009a44 <__i2b+0x28>)
 8009a32:	f7fe fc77 	bl	8008324 <__assert_func>
 8009a36:	2301      	movs	r3, #1
 8009a38:	6144      	str	r4, [r0, #20]
 8009a3a:	6103      	str	r3, [r0, #16]
 8009a3c:	bd10      	pop	{r4, pc}
 8009a3e:	bf00      	nop
 8009a40:	0800b6f1 	.word	0x0800b6f1
 8009a44:	0800b77c 	.word	0x0800b77c

08009a48 <__multiply>:
 8009a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a4c:	4691      	mov	r9, r2
 8009a4e:	690a      	ldr	r2, [r1, #16]
 8009a50:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009a54:	460c      	mov	r4, r1
 8009a56:	429a      	cmp	r2, r3
 8009a58:	bfbe      	ittt	lt
 8009a5a:	460b      	movlt	r3, r1
 8009a5c:	464c      	movlt	r4, r9
 8009a5e:	4699      	movlt	r9, r3
 8009a60:	6927      	ldr	r7, [r4, #16]
 8009a62:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009a66:	68a3      	ldr	r3, [r4, #8]
 8009a68:	6861      	ldr	r1, [r4, #4]
 8009a6a:	eb07 060a 	add.w	r6, r7, sl
 8009a6e:	42b3      	cmp	r3, r6
 8009a70:	b085      	sub	sp, #20
 8009a72:	bfb8      	it	lt
 8009a74:	3101      	addlt	r1, #1
 8009a76:	f7ff fe91 	bl	800979c <_Balloc>
 8009a7a:	b930      	cbnz	r0, 8009a8a <__multiply+0x42>
 8009a7c:	4602      	mov	r2, r0
 8009a7e:	f240 115d 	movw	r1, #349	; 0x15d
 8009a82:	4b43      	ldr	r3, [pc, #268]	; (8009b90 <__multiply+0x148>)
 8009a84:	4843      	ldr	r0, [pc, #268]	; (8009b94 <__multiply+0x14c>)
 8009a86:	f7fe fc4d 	bl	8008324 <__assert_func>
 8009a8a:	f100 0514 	add.w	r5, r0, #20
 8009a8e:	462b      	mov	r3, r5
 8009a90:	2200      	movs	r2, #0
 8009a92:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009a96:	4543      	cmp	r3, r8
 8009a98:	d321      	bcc.n	8009ade <__multiply+0x96>
 8009a9a:	f104 0314 	add.w	r3, r4, #20
 8009a9e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009aa2:	f109 0314 	add.w	r3, r9, #20
 8009aa6:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009aaa:	9202      	str	r2, [sp, #8]
 8009aac:	1b3a      	subs	r2, r7, r4
 8009aae:	3a15      	subs	r2, #21
 8009ab0:	f022 0203 	bic.w	r2, r2, #3
 8009ab4:	3204      	adds	r2, #4
 8009ab6:	f104 0115 	add.w	r1, r4, #21
 8009aba:	428f      	cmp	r7, r1
 8009abc:	bf38      	it	cc
 8009abe:	2204      	movcc	r2, #4
 8009ac0:	9201      	str	r2, [sp, #4]
 8009ac2:	9a02      	ldr	r2, [sp, #8]
 8009ac4:	9303      	str	r3, [sp, #12]
 8009ac6:	429a      	cmp	r2, r3
 8009ac8:	d80c      	bhi.n	8009ae4 <__multiply+0x9c>
 8009aca:	2e00      	cmp	r6, #0
 8009acc:	dd03      	ble.n	8009ad6 <__multiply+0x8e>
 8009ace:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d059      	beq.n	8009b8a <__multiply+0x142>
 8009ad6:	6106      	str	r6, [r0, #16]
 8009ad8:	b005      	add	sp, #20
 8009ada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ade:	f843 2b04 	str.w	r2, [r3], #4
 8009ae2:	e7d8      	b.n	8009a96 <__multiply+0x4e>
 8009ae4:	f8b3 a000 	ldrh.w	sl, [r3]
 8009ae8:	f1ba 0f00 	cmp.w	sl, #0
 8009aec:	d023      	beq.n	8009b36 <__multiply+0xee>
 8009aee:	46a9      	mov	r9, r5
 8009af0:	f04f 0c00 	mov.w	ip, #0
 8009af4:	f104 0e14 	add.w	lr, r4, #20
 8009af8:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009afc:	f8d9 1000 	ldr.w	r1, [r9]
 8009b00:	fa1f fb82 	uxth.w	fp, r2
 8009b04:	b289      	uxth	r1, r1
 8009b06:	fb0a 110b 	mla	r1, sl, fp, r1
 8009b0a:	4461      	add	r1, ip
 8009b0c:	f8d9 c000 	ldr.w	ip, [r9]
 8009b10:	0c12      	lsrs	r2, r2, #16
 8009b12:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8009b16:	fb0a c202 	mla	r2, sl, r2, ip
 8009b1a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009b1e:	b289      	uxth	r1, r1
 8009b20:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009b24:	4577      	cmp	r7, lr
 8009b26:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009b2a:	f849 1b04 	str.w	r1, [r9], #4
 8009b2e:	d8e3      	bhi.n	8009af8 <__multiply+0xb0>
 8009b30:	9a01      	ldr	r2, [sp, #4]
 8009b32:	f845 c002 	str.w	ip, [r5, r2]
 8009b36:	9a03      	ldr	r2, [sp, #12]
 8009b38:	3304      	adds	r3, #4
 8009b3a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009b3e:	f1b9 0f00 	cmp.w	r9, #0
 8009b42:	d020      	beq.n	8009b86 <__multiply+0x13e>
 8009b44:	46ae      	mov	lr, r5
 8009b46:	f04f 0a00 	mov.w	sl, #0
 8009b4a:	6829      	ldr	r1, [r5, #0]
 8009b4c:	f104 0c14 	add.w	ip, r4, #20
 8009b50:	f8bc b000 	ldrh.w	fp, [ip]
 8009b54:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009b58:	b289      	uxth	r1, r1
 8009b5a:	fb09 220b 	mla	r2, r9, fp, r2
 8009b5e:	4492      	add	sl, r2
 8009b60:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009b64:	f84e 1b04 	str.w	r1, [lr], #4
 8009b68:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009b6c:	f8be 1000 	ldrh.w	r1, [lr]
 8009b70:	0c12      	lsrs	r2, r2, #16
 8009b72:	fb09 1102 	mla	r1, r9, r2, r1
 8009b76:	4567      	cmp	r7, ip
 8009b78:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009b7c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009b80:	d8e6      	bhi.n	8009b50 <__multiply+0x108>
 8009b82:	9a01      	ldr	r2, [sp, #4]
 8009b84:	50a9      	str	r1, [r5, r2]
 8009b86:	3504      	adds	r5, #4
 8009b88:	e79b      	b.n	8009ac2 <__multiply+0x7a>
 8009b8a:	3e01      	subs	r6, #1
 8009b8c:	e79d      	b.n	8009aca <__multiply+0x82>
 8009b8e:	bf00      	nop
 8009b90:	0800b6f1 	.word	0x0800b6f1
 8009b94:	0800b77c 	.word	0x0800b77c

08009b98 <__pow5mult>:
 8009b98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b9c:	4615      	mov	r5, r2
 8009b9e:	f012 0203 	ands.w	r2, r2, #3
 8009ba2:	4606      	mov	r6, r0
 8009ba4:	460f      	mov	r7, r1
 8009ba6:	d007      	beq.n	8009bb8 <__pow5mult+0x20>
 8009ba8:	4c25      	ldr	r4, [pc, #148]	; (8009c40 <__pow5mult+0xa8>)
 8009baa:	3a01      	subs	r2, #1
 8009bac:	2300      	movs	r3, #0
 8009bae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009bb2:	f7ff fe55 	bl	8009860 <__multadd>
 8009bb6:	4607      	mov	r7, r0
 8009bb8:	10ad      	asrs	r5, r5, #2
 8009bba:	d03d      	beq.n	8009c38 <__pow5mult+0xa0>
 8009bbc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009bbe:	b97c      	cbnz	r4, 8009be0 <__pow5mult+0x48>
 8009bc0:	2010      	movs	r0, #16
 8009bc2:	f7ff fdc3 	bl	800974c <malloc>
 8009bc6:	4602      	mov	r2, r0
 8009bc8:	6270      	str	r0, [r6, #36]	; 0x24
 8009bca:	b928      	cbnz	r0, 8009bd8 <__pow5mult+0x40>
 8009bcc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009bd0:	4b1c      	ldr	r3, [pc, #112]	; (8009c44 <__pow5mult+0xac>)
 8009bd2:	481d      	ldr	r0, [pc, #116]	; (8009c48 <__pow5mult+0xb0>)
 8009bd4:	f7fe fba6 	bl	8008324 <__assert_func>
 8009bd8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009bdc:	6004      	str	r4, [r0, #0]
 8009bde:	60c4      	str	r4, [r0, #12]
 8009be0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009be4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009be8:	b94c      	cbnz	r4, 8009bfe <__pow5mult+0x66>
 8009bea:	f240 2171 	movw	r1, #625	; 0x271
 8009bee:	4630      	mov	r0, r6
 8009bf0:	f7ff ff14 	bl	8009a1c <__i2b>
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	4604      	mov	r4, r0
 8009bf8:	f8c8 0008 	str.w	r0, [r8, #8]
 8009bfc:	6003      	str	r3, [r0, #0]
 8009bfe:	f04f 0900 	mov.w	r9, #0
 8009c02:	07eb      	lsls	r3, r5, #31
 8009c04:	d50a      	bpl.n	8009c1c <__pow5mult+0x84>
 8009c06:	4639      	mov	r1, r7
 8009c08:	4622      	mov	r2, r4
 8009c0a:	4630      	mov	r0, r6
 8009c0c:	f7ff ff1c 	bl	8009a48 <__multiply>
 8009c10:	4680      	mov	r8, r0
 8009c12:	4639      	mov	r1, r7
 8009c14:	4630      	mov	r0, r6
 8009c16:	f7ff fe01 	bl	800981c <_Bfree>
 8009c1a:	4647      	mov	r7, r8
 8009c1c:	106d      	asrs	r5, r5, #1
 8009c1e:	d00b      	beq.n	8009c38 <__pow5mult+0xa0>
 8009c20:	6820      	ldr	r0, [r4, #0]
 8009c22:	b938      	cbnz	r0, 8009c34 <__pow5mult+0x9c>
 8009c24:	4622      	mov	r2, r4
 8009c26:	4621      	mov	r1, r4
 8009c28:	4630      	mov	r0, r6
 8009c2a:	f7ff ff0d 	bl	8009a48 <__multiply>
 8009c2e:	6020      	str	r0, [r4, #0]
 8009c30:	f8c0 9000 	str.w	r9, [r0]
 8009c34:	4604      	mov	r4, r0
 8009c36:	e7e4      	b.n	8009c02 <__pow5mult+0x6a>
 8009c38:	4638      	mov	r0, r7
 8009c3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c3e:	bf00      	nop
 8009c40:	0800b8c8 	.word	0x0800b8c8
 8009c44:	0800b4d8 	.word	0x0800b4d8
 8009c48:	0800b77c 	.word	0x0800b77c

08009c4c <__lshift>:
 8009c4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c50:	460c      	mov	r4, r1
 8009c52:	4607      	mov	r7, r0
 8009c54:	4691      	mov	r9, r2
 8009c56:	6923      	ldr	r3, [r4, #16]
 8009c58:	6849      	ldr	r1, [r1, #4]
 8009c5a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009c5e:	68a3      	ldr	r3, [r4, #8]
 8009c60:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009c64:	f108 0601 	add.w	r6, r8, #1
 8009c68:	42b3      	cmp	r3, r6
 8009c6a:	db0b      	blt.n	8009c84 <__lshift+0x38>
 8009c6c:	4638      	mov	r0, r7
 8009c6e:	f7ff fd95 	bl	800979c <_Balloc>
 8009c72:	4605      	mov	r5, r0
 8009c74:	b948      	cbnz	r0, 8009c8a <__lshift+0x3e>
 8009c76:	4602      	mov	r2, r0
 8009c78:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009c7c:	4b29      	ldr	r3, [pc, #164]	; (8009d24 <__lshift+0xd8>)
 8009c7e:	482a      	ldr	r0, [pc, #168]	; (8009d28 <__lshift+0xdc>)
 8009c80:	f7fe fb50 	bl	8008324 <__assert_func>
 8009c84:	3101      	adds	r1, #1
 8009c86:	005b      	lsls	r3, r3, #1
 8009c88:	e7ee      	b.n	8009c68 <__lshift+0x1c>
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	f100 0114 	add.w	r1, r0, #20
 8009c90:	f100 0210 	add.w	r2, r0, #16
 8009c94:	4618      	mov	r0, r3
 8009c96:	4553      	cmp	r3, sl
 8009c98:	db37      	blt.n	8009d0a <__lshift+0xbe>
 8009c9a:	6920      	ldr	r0, [r4, #16]
 8009c9c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009ca0:	f104 0314 	add.w	r3, r4, #20
 8009ca4:	f019 091f 	ands.w	r9, r9, #31
 8009ca8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009cac:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009cb0:	d02f      	beq.n	8009d12 <__lshift+0xc6>
 8009cb2:	468a      	mov	sl, r1
 8009cb4:	f04f 0c00 	mov.w	ip, #0
 8009cb8:	f1c9 0e20 	rsb	lr, r9, #32
 8009cbc:	681a      	ldr	r2, [r3, #0]
 8009cbe:	fa02 f209 	lsl.w	r2, r2, r9
 8009cc2:	ea42 020c 	orr.w	r2, r2, ip
 8009cc6:	f84a 2b04 	str.w	r2, [sl], #4
 8009cca:	f853 2b04 	ldr.w	r2, [r3], #4
 8009cce:	4298      	cmp	r0, r3
 8009cd0:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009cd4:	d8f2      	bhi.n	8009cbc <__lshift+0x70>
 8009cd6:	1b03      	subs	r3, r0, r4
 8009cd8:	3b15      	subs	r3, #21
 8009cda:	f023 0303 	bic.w	r3, r3, #3
 8009cde:	3304      	adds	r3, #4
 8009ce0:	f104 0215 	add.w	r2, r4, #21
 8009ce4:	4290      	cmp	r0, r2
 8009ce6:	bf38      	it	cc
 8009ce8:	2304      	movcc	r3, #4
 8009cea:	f841 c003 	str.w	ip, [r1, r3]
 8009cee:	f1bc 0f00 	cmp.w	ip, #0
 8009cf2:	d001      	beq.n	8009cf8 <__lshift+0xac>
 8009cf4:	f108 0602 	add.w	r6, r8, #2
 8009cf8:	3e01      	subs	r6, #1
 8009cfa:	4638      	mov	r0, r7
 8009cfc:	4621      	mov	r1, r4
 8009cfe:	612e      	str	r6, [r5, #16]
 8009d00:	f7ff fd8c 	bl	800981c <_Bfree>
 8009d04:	4628      	mov	r0, r5
 8009d06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d0a:	f842 0f04 	str.w	r0, [r2, #4]!
 8009d0e:	3301      	adds	r3, #1
 8009d10:	e7c1      	b.n	8009c96 <__lshift+0x4a>
 8009d12:	3904      	subs	r1, #4
 8009d14:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d18:	4298      	cmp	r0, r3
 8009d1a:	f841 2f04 	str.w	r2, [r1, #4]!
 8009d1e:	d8f9      	bhi.n	8009d14 <__lshift+0xc8>
 8009d20:	e7ea      	b.n	8009cf8 <__lshift+0xac>
 8009d22:	bf00      	nop
 8009d24:	0800b6f1 	.word	0x0800b6f1
 8009d28:	0800b77c 	.word	0x0800b77c

08009d2c <__mcmp>:
 8009d2c:	4603      	mov	r3, r0
 8009d2e:	690a      	ldr	r2, [r1, #16]
 8009d30:	6900      	ldr	r0, [r0, #16]
 8009d32:	b530      	push	{r4, r5, lr}
 8009d34:	1a80      	subs	r0, r0, r2
 8009d36:	d10d      	bne.n	8009d54 <__mcmp+0x28>
 8009d38:	3314      	adds	r3, #20
 8009d3a:	3114      	adds	r1, #20
 8009d3c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009d40:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009d44:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009d48:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009d4c:	4295      	cmp	r5, r2
 8009d4e:	d002      	beq.n	8009d56 <__mcmp+0x2a>
 8009d50:	d304      	bcc.n	8009d5c <__mcmp+0x30>
 8009d52:	2001      	movs	r0, #1
 8009d54:	bd30      	pop	{r4, r5, pc}
 8009d56:	42a3      	cmp	r3, r4
 8009d58:	d3f4      	bcc.n	8009d44 <__mcmp+0x18>
 8009d5a:	e7fb      	b.n	8009d54 <__mcmp+0x28>
 8009d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8009d60:	e7f8      	b.n	8009d54 <__mcmp+0x28>
	...

08009d64 <__mdiff>:
 8009d64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d68:	460d      	mov	r5, r1
 8009d6a:	4607      	mov	r7, r0
 8009d6c:	4611      	mov	r1, r2
 8009d6e:	4628      	mov	r0, r5
 8009d70:	4614      	mov	r4, r2
 8009d72:	f7ff ffdb 	bl	8009d2c <__mcmp>
 8009d76:	1e06      	subs	r6, r0, #0
 8009d78:	d111      	bne.n	8009d9e <__mdiff+0x3a>
 8009d7a:	4631      	mov	r1, r6
 8009d7c:	4638      	mov	r0, r7
 8009d7e:	f7ff fd0d 	bl	800979c <_Balloc>
 8009d82:	4602      	mov	r2, r0
 8009d84:	b928      	cbnz	r0, 8009d92 <__mdiff+0x2e>
 8009d86:	f240 2132 	movw	r1, #562	; 0x232
 8009d8a:	4b3a      	ldr	r3, [pc, #232]	; (8009e74 <__mdiff+0x110>)
 8009d8c:	483a      	ldr	r0, [pc, #232]	; (8009e78 <__mdiff+0x114>)
 8009d8e:	f7fe fac9 	bl	8008324 <__assert_func>
 8009d92:	2301      	movs	r3, #1
 8009d94:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009d98:	4610      	mov	r0, r2
 8009d9a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d9e:	bfa4      	itt	ge
 8009da0:	4623      	movge	r3, r4
 8009da2:	462c      	movge	r4, r5
 8009da4:	4638      	mov	r0, r7
 8009da6:	6861      	ldr	r1, [r4, #4]
 8009da8:	bfa6      	itte	ge
 8009daa:	461d      	movge	r5, r3
 8009dac:	2600      	movge	r6, #0
 8009dae:	2601      	movlt	r6, #1
 8009db0:	f7ff fcf4 	bl	800979c <_Balloc>
 8009db4:	4602      	mov	r2, r0
 8009db6:	b918      	cbnz	r0, 8009dc0 <__mdiff+0x5c>
 8009db8:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009dbc:	4b2d      	ldr	r3, [pc, #180]	; (8009e74 <__mdiff+0x110>)
 8009dbe:	e7e5      	b.n	8009d8c <__mdiff+0x28>
 8009dc0:	f102 0814 	add.w	r8, r2, #20
 8009dc4:	46c2      	mov	sl, r8
 8009dc6:	f04f 0c00 	mov.w	ip, #0
 8009dca:	6927      	ldr	r7, [r4, #16]
 8009dcc:	60c6      	str	r6, [r0, #12]
 8009dce:	692e      	ldr	r6, [r5, #16]
 8009dd0:	f104 0014 	add.w	r0, r4, #20
 8009dd4:	f105 0914 	add.w	r9, r5, #20
 8009dd8:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8009ddc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009de0:	3410      	adds	r4, #16
 8009de2:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8009de6:	f859 3b04 	ldr.w	r3, [r9], #4
 8009dea:	fa1f f18b 	uxth.w	r1, fp
 8009dee:	448c      	add	ip, r1
 8009df0:	b299      	uxth	r1, r3
 8009df2:	0c1b      	lsrs	r3, r3, #16
 8009df4:	ebac 0101 	sub.w	r1, ip, r1
 8009df8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009dfc:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009e00:	b289      	uxth	r1, r1
 8009e02:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8009e06:	454e      	cmp	r6, r9
 8009e08:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009e0c:	f84a 3b04 	str.w	r3, [sl], #4
 8009e10:	d8e7      	bhi.n	8009de2 <__mdiff+0x7e>
 8009e12:	1b73      	subs	r3, r6, r5
 8009e14:	3b15      	subs	r3, #21
 8009e16:	f023 0303 	bic.w	r3, r3, #3
 8009e1a:	3515      	adds	r5, #21
 8009e1c:	3304      	adds	r3, #4
 8009e1e:	42ae      	cmp	r6, r5
 8009e20:	bf38      	it	cc
 8009e22:	2304      	movcc	r3, #4
 8009e24:	4418      	add	r0, r3
 8009e26:	4443      	add	r3, r8
 8009e28:	461e      	mov	r6, r3
 8009e2a:	4605      	mov	r5, r0
 8009e2c:	4575      	cmp	r5, lr
 8009e2e:	d30e      	bcc.n	8009e4e <__mdiff+0xea>
 8009e30:	f10e 0103 	add.w	r1, lr, #3
 8009e34:	1a09      	subs	r1, r1, r0
 8009e36:	f021 0103 	bic.w	r1, r1, #3
 8009e3a:	3803      	subs	r0, #3
 8009e3c:	4586      	cmp	lr, r0
 8009e3e:	bf38      	it	cc
 8009e40:	2100      	movcc	r1, #0
 8009e42:	4419      	add	r1, r3
 8009e44:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8009e48:	b18b      	cbz	r3, 8009e6e <__mdiff+0x10a>
 8009e4a:	6117      	str	r7, [r2, #16]
 8009e4c:	e7a4      	b.n	8009d98 <__mdiff+0x34>
 8009e4e:	f855 8b04 	ldr.w	r8, [r5], #4
 8009e52:	fa1f f188 	uxth.w	r1, r8
 8009e56:	4461      	add	r1, ip
 8009e58:	140c      	asrs	r4, r1, #16
 8009e5a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009e5e:	b289      	uxth	r1, r1
 8009e60:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009e64:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8009e68:	f846 1b04 	str.w	r1, [r6], #4
 8009e6c:	e7de      	b.n	8009e2c <__mdiff+0xc8>
 8009e6e:	3f01      	subs	r7, #1
 8009e70:	e7e8      	b.n	8009e44 <__mdiff+0xe0>
 8009e72:	bf00      	nop
 8009e74:	0800b6f1 	.word	0x0800b6f1
 8009e78:	0800b77c 	.word	0x0800b77c

08009e7c <__ulp>:
 8009e7c:	4b11      	ldr	r3, [pc, #68]	; (8009ec4 <__ulp+0x48>)
 8009e7e:	400b      	ands	r3, r1
 8009e80:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	dd02      	ble.n	8009e8e <__ulp+0x12>
 8009e88:	2000      	movs	r0, #0
 8009e8a:	4619      	mov	r1, r3
 8009e8c:	4770      	bx	lr
 8009e8e:	425b      	negs	r3, r3
 8009e90:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8009e94:	f04f 0000 	mov.w	r0, #0
 8009e98:	f04f 0100 	mov.w	r1, #0
 8009e9c:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009ea0:	da04      	bge.n	8009eac <__ulp+0x30>
 8009ea2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009ea6:	fa43 f102 	asr.w	r1, r3, r2
 8009eaa:	4770      	bx	lr
 8009eac:	f1a2 0314 	sub.w	r3, r2, #20
 8009eb0:	2b1e      	cmp	r3, #30
 8009eb2:	bfd6      	itet	le
 8009eb4:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8009eb8:	2301      	movgt	r3, #1
 8009eba:	fa22 f303 	lsrle.w	r3, r2, r3
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	4770      	bx	lr
 8009ec2:	bf00      	nop
 8009ec4:	7ff00000 	.word	0x7ff00000

08009ec8 <__b2d>:
 8009ec8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ecc:	6907      	ldr	r7, [r0, #16]
 8009ece:	f100 0914 	add.w	r9, r0, #20
 8009ed2:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8009ed6:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8009eda:	f1a7 0804 	sub.w	r8, r7, #4
 8009ede:	4630      	mov	r0, r6
 8009ee0:	f7ff fd4e 	bl	8009980 <__hi0bits>
 8009ee4:	f1c0 0320 	rsb	r3, r0, #32
 8009ee8:	280a      	cmp	r0, #10
 8009eea:	600b      	str	r3, [r1, #0]
 8009eec:	491f      	ldr	r1, [pc, #124]	; (8009f6c <__b2d+0xa4>)
 8009eee:	dc17      	bgt.n	8009f20 <__b2d+0x58>
 8009ef0:	45c1      	cmp	r9, r8
 8009ef2:	bf28      	it	cs
 8009ef4:	2200      	movcs	r2, #0
 8009ef6:	f1c0 0c0b 	rsb	ip, r0, #11
 8009efa:	fa26 f30c 	lsr.w	r3, r6, ip
 8009efe:	bf38      	it	cc
 8009f00:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8009f04:	ea43 0501 	orr.w	r5, r3, r1
 8009f08:	f100 0315 	add.w	r3, r0, #21
 8009f0c:	fa06 f303 	lsl.w	r3, r6, r3
 8009f10:	fa22 f20c 	lsr.w	r2, r2, ip
 8009f14:	ea43 0402 	orr.w	r4, r3, r2
 8009f18:	4620      	mov	r0, r4
 8009f1a:	4629      	mov	r1, r5
 8009f1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f20:	45c1      	cmp	r9, r8
 8009f22:	bf2e      	itee	cs
 8009f24:	2200      	movcs	r2, #0
 8009f26:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8009f2a:	f1a7 0808 	subcc.w	r8, r7, #8
 8009f2e:	f1b0 030b 	subs.w	r3, r0, #11
 8009f32:	d016      	beq.n	8009f62 <__b2d+0x9a>
 8009f34:	f1c3 0720 	rsb	r7, r3, #32
 8009f38:	fa22 f107 	lsr.w	r1, r2, r7
 8009f3c:	45c8      	cmp	r8, r9
 8009f3e:	fa06 f603 	lsl.w	r6, r6, r3
 8009f42:	ea46 0601 	orr.w	r6, r6, r1
 8009f46:	bf94      	ite	ls
 8009f48:	2100      	movls	r1, #0
 8009f4a:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8009f4e:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8009f52:	fa02 f003 	lsl.w	r0, r2, r3
 8009f56:	40f9      	lsrs	r1, r7
 8009f58:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009f5c:	ea40 0401 	orr.w	r4, r0, r1
 8009f60:	e7da      	b.n	8009f18 <__b2d+0x50>
 8009f62:	4614      	mov	r4, r2
 8009f64:	ea46 0501 	orr.w	r5, r6, r1
 8009f68:	e7d6      	b.n	8009f18 <__b2d+0x50>
 8009f6a:	bf00      	nop
 8009f6c:	3ff00000 	.word	0x3ff00000

08009f70 <__d2b>:
 8009f70:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009f74:	2101      	movs	r1, #1
 8009f76:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8009f7a:	4690      	mov	r8, r2
 8009f7c:	461d      	mov	r5, r3
 8009f7e:	f7ff fc0d 	bl	800979c <_Balloc>
 8009f82:	4604      	mov	r4, r0
 8009f84:	b930      	cbnz	r0, 8009f94 <__d2b+0x24>
 8009f86:	4602      	mov	r2, r0
 8009f88:	f240 310a 	movw	r1, #778	; 0x30a
 8009f8c:	4b24      	ldr	r3, [pc, #144]	; (800a020 <__d2b+0xb0>)
 8009f8e:	4825      	ldr	r0, [pc, #148]	; (800a024 <__d2b+0xb4>)
 8009f90:	f7fe f9c8 	bl	8008324 <__assert_func>
 8009f94:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8009f98:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8009f9c:	bb2d      	cbnz	r5, 8009fea <__d2b+0x7a>
 8009f9e:	9301      	str	r3, [sp, #4]
 8009fa0:	f1b8 0300 	subs.w	r3, r8, #0
 8009fa4:	d026      	beq.n	8009ff4 <__d2b+0x84>
 8009fa6:	4668      	mov	r0, sp
 8009fa8:	9300      	str	r3, [sp, #0]
 8009faa:	f7ff fd09 	bl	80099c0 <__lo0bits>
 8009fae:	9900      	ldr	r1, [sp, #0]
 8009fb0:	b1f0      	cbz	r0, 8009ff0 <__d2b+0x80>
 8009fb2:	9a01      	ldr	r2, [sp, #4]
 8009fb4:	f1c0 0320 	rsb	r3, r0, #32
 8009fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8009fbc:	430b      	orrs	r3, r1
 8009fbe:	40c2      	lsrs	r2, r0
 8009fc0:	6163      	str	r3, [r4, #20]
 8009fc2:	9201      	str	r2, [sp, #4]
 8009fc4:	9b01      	ldr	r3, [sp, #4]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	bf14      	ite	ne
 8009fca:	2102      	movne	r1, #2
 8009fcc:	2101      	moveq	r1, #1
 8009fce:	61a3      	str	r3, [r4, #24]
 8009fd0:	6121      	str	r1, [r4, #16]
 8009fd2:	b1c5      	cbz	r5, 800a006 <__d2b+0x96>
 8009fd4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009fd8:	4405      	add	r5, r0
 8009fda:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009fde:	603d      	str	r5, [r7, #0]
 8009fe0:	6030      	str	r0, [r6, #0]
 8009fe2:	4620      	mov	r0, r4
 8009fe4:	b002      	add	sp, #8
 8009fe6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009fee:	e7d6      	b.n	8009f9e <__d2b+0x2e>
 8009ff0:	6161      	str	r1, [r4, #20]
 8009ff2:	e7e7      	b.n	8009fc4 <__d2b+0x54>
 8009ff4:	a801      	add	r0, sp, #4
 8009ff6:	f7ff fce3 	bl	80099c0 <__lo0bits>
 8009ffa:	2101      	movs	r1, #1
 8009ffc:	9b01      	ldr	r3, [sp, #4]
 8009ffe:	6121      	str	r1, [r4, #16]
 800a000:	6163      	str	r3, [r4, #20]
 800a002:	3020      	adds	r0, #32
 800a004:	e7e5      	b.n	8009fd2 <__d2b+0x62>
 800a006:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800a00a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a00e:	6038      	str	r0, [r7, #0]
 800a010:	6918      	ldr	r0, [r3, #16]
 800a012:	f7ff fcb5 	bl	8009980 <__hi0bits>
 800a016:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800a01a:	6031      	str	r1, [r6, #0]
 800a01c:	e7e1      	b.n	8009fe2 <__d2b+0x72>
 800a01e:	bf00      	nop
 800a020:	0800b6f1 	.word	0x0800b6f1
 800a024:	0800b77c 	.word	0x0800b77c

0800a028 <__ratio>:
 800a028:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a02c:	4688      	mov	r8, r1
 800a02e:	4669      	mov	r1, sp
 800a030:	4681      	mov	r9, r0
 800a032:	f7ff ff49 	bl	8009ec8 <__b2d>
 800a036:	460f      	mov	r7, r1
 800a038:	4604      	mov	r4, r0
 800a03a:	460d      	mov	r5, r1
 800a03c:	4640      	mov	r0, r8
 800a03e:	a901      	add	r1, sp, #4
 800a040:	f7ff ff42 	bl	8009ec8 <__b2d>
 800a044:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a048:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a04c:	468b      	mov	fp, r1
 800a04e:	eba3 0c02 	sub.w	ip, r3, r2
 800a052:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a056:	1a9b      	subs	r3, r3, r2
 800a058:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	bfd5      	itete	le
 800a060:	460a      	movle	r2, r1
 800a062:	462a      	movgt	r2, r5
 800a064:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a068:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a06c:	bfd8      	it	le
 800a06e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a072:	465b      	mov	r3, fp
 800a074:	4602      	mov	r2, r0
 800a076:	4639      	mov	r1, r7
 800a078:	4620      	mov	r0, r4
 800a07a:	f7f6 fb61 	bl	8000740 <__aeabi_ddiv>
 800a07e:	b003      	add	sp, #12
 800a080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a084 <__copybits>:
 800a084:	3901      	subs	r1, #1
 800a086:	b570      	push	{r4, r5, r6, lr}
 800a088:	1149      	asrs	r1, r1, #5
 800a08a:	6914      	ldr	r4, [r2, #16]
 800a08c:	3101      	adds	r1, #1
 800a08e:	f102 0314 	add.w	r3, r2, #20
 800a092:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a096:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a09a:	1f05      	subs	r5, r0, #4
 800a09c:	42a3      	cmp	r3, r4
 800a09e:	d30c      	bcc.n	800a0ba <__copybits+0x36>
 800a0a0:	1aa3      	subs	r3, r4, r2
 800a0a2:	3b11      	subs	r3, #17
 800a0a4:	f023 0303 	bic.w	r3, r3, #3
 800a0a8:	3211      	adds	r2, #17
 800a0aa:	42a2      	cmp	r2, r4
 800a0ac:	bf88      	it	hi
 800a0ae:	2300      	movhi	r3, #0
 800a0b0:	4418      	add	r0, r3
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	4288      	cmp	r0, r1
 800a0b6:	d305      	bcc.n	800a0c4 <__copybits+0x40>
 800a0b8:	bd70      	pop	{r4, r5, r6, pc}
 800a0ba:	f853 6b04 	ldr.w	r6, [r3], #4
 800a0be:	f845 6f04 	str.w	r6, [r5, #4]!
 800a0c2:	e7eb      	b.n	800a09c <__copybits+0x18>
 800a0c4:	f840 3b04 	str.w	r3, [r0], #4
 800a0c8:	e7f4      	b.n	800a0b4 <__copybits+0x30>

0800a0ca <__any_on>:
 800a0ca:	f100 0214 	add.w	r2, r0, #20
 800a0ce:	6900      	ldr	r0, [r0, #16]
 800a0d0:	114b      	asrs	r3, r1, #5
 800a0d2:	4298      	cmp	r0, r3
 800a0d4:	b510      	push	{r4, lr}
 800a0d6:	db11      	blt.n	800a0fc <__any_on+0x32>
 800a0d8:	dd0a      	ble.n	800a0f0 <__any_on+0x26>
 800a0da:	f011 011f 	ands.w	r1, r1, #31
 800a0de:	d007      	beq.n	800a0f0 <__any_on+0x26>
 800a0e0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a0e4:	fa24 f001 	lsr.w	r0, r4, r1
 800a0e8:	fa00 f101 	lsl.w	r1, r0, r1
 800a0ec:	428c      	cmp	r4, r1
 800a0ee:	d10b      	bne.n	800a108 <__any_on+0x3e>
 800a0f0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a0f4:	4293      	cmp	r3, r2
 800a0f6:	d803      	bhi.n	800a100 <__any_on+0x36>
 800a0f8:	2000      	movs	r0, #0
 800a0fa:	bd10      	pop	{r4, pc}
 800a0fc:	4603      	mov	r3, r0
 800a0fe:	e7f7      	b.n	800a0f0 <__any_on+0x26>
 800a100:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a104:	2900      	cmp	r1, #0
 800a106:	d0f5      	beq.n	800a0f4 <__any_on+0x2a>
 800a108:	2001      	movs	r0, #1
 800a10a:	e7f6      	b.n	800a0fa <__any_on+0x30>

0800a10c <_calloc_r>:
 800a10c:	b570      	push	{r4, r5, r6, lr}
 800a10e:	fba1 5402 	umull	r5, r4, r1, r2
 800a112:	b934      	cbnz	r4, 800a122 <_calloc_r+0x16>
 800a114:	4629      	mov	r1, r5
 800a116:	f000 f875 	bl	800a204 <_malloc_r>
 800a11a:	4606      	mov	r6, r0
 800a11c:	b928      	cbnz	r0, 800a12a <_calloc_r+0x1e>
 800a11e:	4630      	mov	r0, r6
 800a120:	bd70      	pop	{r4, r5, r6, pc}
 800a122:	220c      	movs	r2, #12
 800a124:	2600      	movs	r6, #0
 800a126:	6002      	str	r2, [r0, #0]
 800a128:	e7f9      	b.n	800a11e <_calloc_r+0x12>
 800a12a:	462a      	mov	r2, r5
 800a12c:	4621      	mov	r1, r4
 800a12e:	f7fc fd63 	bl	8006bf8 <memset>
 800a132:	e7f4      	b.n	800a11e <_calloc_r+0x12>

0800a134 <_free_r>:
 800a134:	b538      	push	{r3, r4, r5, lr}
 800a136:	4605      	mov	r5, r0
 800a138:	2900      	cmp	r1, #0
 800a13a:	d040      	beq.n	800a1be <_free_r+0x8a>
 800a13c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a140:	1f0c      	subs	r4, r1, #4
 800a142:	2b00      	cmp	r3, #0
 800a144:	bfb8      	it	lt
 800a146:	18e4      	addlt	r4, r4, r3
 800a148:	f000 feba 	bl	800aec0 <__malloc_lock>
 800a14c:	4a1c      	ldr	r2, [pc, #112]	; (800a1c0 <_free_r+0x8c>)
 800a14e:	6813      	ldr	r3, [r2, #0]
 800a150:	b933      	cbnz	r3, 800a160 <_free_r+0x2c>
 800a152:	6063      	str	r3, [r4, #4]
 800a154:	6014      	str	r4, [r2, #0]
 800a156:	4628      	mov	r0, r5
 800a158:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a15c:	f000 beb6 	b.w	800aecc <__malloc_unlock>
 800a160:	42a3      	cmp	r3, r4
 800a162:	d908      	bls.n	800a176 <_free_r+0x42>
 800a164:	6820      	ldr	r0, [r4, #0]
 800a166:	1821      	adds	r1, r4, r0
 800a168:	428b      	cmp	r3, r1
 800a16a:	bf01      	itttt	eq
 800a16c:	6819      	ldreq	r1, [r3, #0]
 800a16e:	685b      	ldreq	r3, [r3, #4]
 800a170:	1809      	addeq	r1, r1, r0
 800a172:	6021      	streq	r1, [r4, #0]
 800a174:	e7ed      	b.n	800a152 <_free_r+0x1e>
 800a176:	461a      	mov	r2, r3
 800a178:	685b      	ldr	r3, [r3, #4]
 800a17a:	b10b      	cbz	r3, 800a180 <_free_r+0x4c>
 800a17c:	42a3      	cmp	r3, r4
 800a17e:	d9fa      	bls.n	800a176 <_free_r+0x42>
 800a180:	6811      	ldr	r1, [r2, #0]
 800a182:	1850      	adds	r0, r2, r1
 800a184:	42a0      	cmp	r0, r4
 800a186:	d10b      	bne.n	800a1a0 <_free_r+0x6c>
 800a188:	6820      	ldr	r0, [r4, #0]
 800a18a:	4401      	add	r1, r0
 800a18c:	1850      	adds	r0, r2, r1
 800a18e:	4283      	cmp	r3, r0
 800a190:	6011      	str	r1, [r2, #0]
 800a192:	d1e0      	bne.n	800a156 <_free_r+0x22>
 800a194:	6818      	ldr	r0, [r3, #0]
 800a196:	685b      	ldr	r3, [r3, #4]
 800a198:	4401      	add	r1, r0
 800a19a:	6011      	str	r1, [r2, #0]
 800a19c:	6053      	str	r3, [r2, #4]
 800a19e:	e7da      	b.n	800a156 <_free_r+0x22>
 800a1a0:	d902      	bls.n	800a1a8 <_free_r+0x74>
 800a1a2:	230c      	movs	r3, #12
 800a1a4:	602b      	str	r3, [r5, #0]
 800a1a6:	e7d6      	b.n	800a156 <_free_r+0x22>
 800a1a8:	6820      	ldr	r0, [r4, #0]
 800a1aa:	1821      	adds	r1, r4, r0
 800a1ac:	428b      	cmp	r3, r1
 800a1ae:	bf01      	itttt	eq
 800a1b0:	6819      	ldreq	r1, [r3, #0]
 800a1b2:	685b      	ldreq	r3, [r3, #4]
 800a1b4:	1809      	addeq	r1, r1, r0
 800a1b6:	6021      	streq	r1, [r4, #0]
 800a1b8:	6063      	str	r3, [r4, #4]
 800a1ba:	6054      	str	r4, [r2, #4]
 800a1bc:	e7cb      	b.n	800a156 <_free_r+0x22>
 800a1be:	bd38      	pop	{r3, r4, r5, pc}
 800a1c0:	200025fc 	.word	0x200025fc

0800a1c4 <sbrk_aligned>:
 800a1c4:	b570      	push	{r4, r5, r6, lr}
 800a1c6:	4e0e      	ldr	r6, [pc, #56]	; (800a200 <sbrk_aligned+0x3c>)
 800a1c8:	460c      	mov	r4, r1
 800a1ca:	6831      	ldr	r1, [r6, #0]
 800a1cc:	4605      	mov	r5, r0
 800a1ce:	b911      	cbnz	r1, 800a1d6 <sbrk_aligned+0x12>
 800a1d0:	f000 fb46 	bl	800a860 <_sbrk_r>
 800a1d4:	6030      	str	r0, [r6, #0]
 800a1d6:	4621      	mov	r1, r4
 800a1d8:	4628      	mov	r0, r5
 800a1da:	f000 fb41 	bl	800a860 <_sbrk_r>
 800a1de:	1c43      	adds	r3, r0, #1
 800a1e0:	d00a      	beq.n	800a1f8 <sbrk_aligned+0x34>
 800a1e2:	1cc4      	adds	r4, r0, #3
 800a1e4:	f024 0403 	bic.w	r4, r4, #3
 800a1e8:	42a0      	cmp	r0, r4
 800a1ea:	d007      	beq.n	800a1fc <sbrk_aligned+0x38>
 800a1ec:	1a21      	subs	r1, r4, r0
 800a1ee:	4628      	mov	r0, r5
 800a1f0:	f000 fb36 	bl	800a860 <_sbrk_r>
 800a1f4:	3001      	adds	r0, #1
 800a1f6:	d101      	bne.n	800a1fc <sbrk_aligned+0x38>
 800a1f8:	f04f 34ff 	mov.w	r4, #4294967295
 800a1fc:	4620      	mov	r0, r4
 800a1fe:	bd70      	pop	{r4, r5, r6, pc}
 800a200:	20002600 	.word	0x20002600

0800a204 <_malloc_r>:
 800a204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a208:	1ccd      	adds	r5, r1, #3
 800a20a:	f025 0503 	bic.w	r5, r5, #3
 800a20e:	3508      	adds	r5, #8
 800a210:	2d0c      	cmp	r5, #12
 800a212:	bf38      	it	cc
 800a214:	250c      	movcc	r5, #12
 800a216:	2d00      	cmp	r5, #0
 800a218:	4607      	mov	r7, r0
 800a21a:	db01      	blt.n	800a220 <_malloc_r+0x1c>
 800a21c:	42a9      	cmp	r1, r5
 800a21e:	d905      	bls.n	800a22c <_malloc_r+0x28>
 800a220:	230c      	movs	r3, #12
 800a222:	2600      	movs	r6, #0
 800a224:	603b      	str	r3, [r7, #0]
 800a226:	4630      	mov	r0, r6
 800a228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a22c:	4e2e      	ldr	r6, [pc, #184]	; (800a2e8 <_malloc_r+0xe4>)
 800a22e:	f000 fe47 	bl	800aec0 <__malloc_lock>
 800a232:	6833      	ldr	r3, [r6, #0]
 800a234:	461c      	mov	r4, r3
 800a236:	bb34      	cbnz	r4, 800a286 <_malloc_r+0x82>
 800a238:	4629      	mov	r1, r5
 800a23a:	4638      	mov	r0, r7
 800a23c:	f7ff ffc2 	bl	800a1c4 <sbrk_aligned>
 800a240:	1c43      	adds	r3, r0, #1
 800a242:	4604      	mov	r4, r0
 800a244:	d14d      	bne.n	800a2e2 <_malloc_r+0xde>
 800a246:	6834      	ldr	r4, [r6, #0]
 800a248:	4626      	mov	r6, r4
 800a24a:	2e00      	cmp	r6, #0
 800a24c:	d140      	bne.n	800a2d0 <_malloc_r+0xcc>
 800a24e:	6823      	ldr	r3, [r4, #0]
 800a250:	4631      	mov	r1, r6
 800a252:	4638      	mov	r0, r7
 800a254:	eb04 0803 	add.w	r8, r4, r3
 800a258:	f000 fb02 	bl	800a860 <_sbrk_r>
 800a25c:	4580      	cmp	r8, r0
 800a25e:	d13a      	bne.n	800a2d6 <_malloc_r+0xd2>
 800a260:	6821      	ldr	r1, [r4, #0]
 800a262:	3503      	adds	r5, #3
 800a264:	1a6d      	subs	r5, r5, r1
 800a266:	f025 0503 	bic.w	r5, r5, #3
 800a26a:	3508      	adds	r5, #8
 800a26c:	2d0c      	cmp	r5, #12
 800a26e:	bf38      	it	cc
 800a270:	250c      	movcc	r5, #12
 800a272:	4638      	mov	r0, r7
 800a274:	4629      	mov	r1, r5
 800a276:	f7ff ffa5 	bl	800a1c4 <sbrk_aligned>
 800a27a:	3001      	adds	r0, #1
 800a27c:	d02b      	beq.n	800a2d6 <_malloc_r+0xd2>
 800a27e:	6823      	ldr	r3, [r4, #0]
 800a280:	442b      	add	r3, r5
 800a282:	6023      	str	r3, [r4, #0]
 800a284:	e00e      	b.n	800a2a4 <_malloc_r+0xa0>
 800a286:	6822      	ldr	r2, [r4, #0]
 800a288:	1b52      	subs	r2, r2, r5
 800a28a:	d41e      	bmi.n	800a2ca <_malloc_r+0xc6>
 800a28c:	2a0b      	cmp	r2, #11
 800a28e:	d916      	bls.n	800a2be <_malloc_r+0xba>
 800a290:	1961      	adds	r1, r4, r5
 800a292:	42a3      	cmp	r3, r4
 800a294:	6025      	str	r5, [r4, #0]
 800a296:	bf18      	it	ne
 800a298:	6059      	strne	r1, [r3, #4]
 800a29a:	6863      	ldr	r3, [r4, #4]
 800a29c:	bf08      	it	eq
 800a29e:	6031      	streq	r1, [r6, #0]
 800a2a0:	5162      	str	r2, [r4, r5]
 800a2a2:	604b      	str	r3, [r1, #4]
 800a2a4:	4638      	mov	r0, r7
 800a2a6:	f104 060b 	add.w	r6, r4, #11
 800a2aa:	f000 fe0f 	bl	800aecc <__malloc_unlock>
 800a2ae:	f026 0607 	bic.w	r6, r6, #7
 800a2b2:	1d23      	adds	r3, r4, #4
 800a2b4:	1af2      	subs	r2, r6, r3
 800a2b6:	d0b6      	beq.n	800a226 <_malloc_r+0x22>
 800a2b8:	1b9b      	subs	r3, r3, r6
 800a2ba:	50a3      	str	r3, [r4, r2]
 800a2bc:	e7b3      	b.n	800a226 <_malloc_r+0x22>
 800a2be:	6862      	ldr	r2, [r4, #4]
 800a2c0:	42a3      	cmp	r3, r4
 800a2c2:	bf0c      	ite	eq
 800a2c4:	6032      	streq	r2, [r6, #0]
 800a2c6:	605a      	strne	r2, [r3, #4]
 800a2c8:	e7ec      	b.n	800a2a4 <_malloc_r+0xa0>
 800a2ca:	4623      	mov	r3, r4
 800a2cc:	6864      	ldr	r4, [r4, #4]
 800a2ce:	e7b2      	b.n	800a236 <_malloc_r+0x32>
 800a2d0:	4634      	mov	r4, r6
 800a2d2:	6876      	ldr	r6, [r6, #4]
 800a2d4:	e7b9      	b.n	800a24a <_malloc_r+0x46>
 800a2d6:	230c      	movs	r3, #12
 800a2d8:	4638      	mov	r0, r7
 800a2da:	603b      	str	r3, [r7, #0]
 800a2dc:	f000 fdf6 	bl	800aecc <__malloc_unlock>
 800a2e0:	e7a1      	b.n	800a226 <_malloc_r+0x22>
 800a2e2:	6025      	str	r5, [r4, #0]
 800a2e4:	e7de      	b.n	800a2a4 <_malloc_r+0xa0>
 800a2e6:	bf00      	nop
 800a2e8:	200025fc 	.word	0x200025fc

0800a2ec <__ssputs_r>:
 800a2ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2f0:	688e      	ldr	r6, [r1, #8]
 800a2f2:	4682      	mov	sl, r0
 800a2f4:	429e      	cmp	r6, r3
 800a2f6:	460c      	mov	r4, r1
 800a2f8:	4690      	mov	r8, r2
 800a2fa:	461f      	mov	r7, r3
 800a2fc:	d838      	bhi.n	800a370 <__ssputs_r+0x84>
 800a2fe:	898a      	ldrh	r2, [r1, #12]
 800a300:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a304:	d032      	beq.n	800a36c <__ssputs_r+0x80>
 800a306:	6825      	ldr	r5, [r4, #0]
 800a308:	6909      	ldr	r1, [r1, #16]
 800a30a:	3301      	adds	r3, #1
 800a30c:	eba5 0901 	sub.w	r9, r5, r1
 800a310:	6965      	ldr	r5, [r4, #20]
 800a312:	444b      	add	r3, r9
 800a314:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a318:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a31c:	106d      	asrs	r5, r5, #1
 800a31e:	429d      	cmp	r5, r3
 800a320:	bf38      	it	cc
 800a322:	461d      	movcc	r5, r3
 800a324:	0553      	lsls	r3, r2, #21
 800a326:	d531      	bpl.n	800a38c <__ssputs_r+0xa0>
 800a328:	4629      	mov	r1, r5
 800a32a:	f7ff ff6b 	bl	800a204 <_malloc_r>
 800a32e:	4606      	mov	r6, r0
 800a330:	b950      	cbnz	r0, 800a348 <__ssputs_r+0x5c>
 800a332:	230c      	movs	r3, #12
 800a334:	f04f 30ff 	mov.w	r0, #4294967295
 800a338:	f8ca 3000 	str.w	r3, [sl]
 800a33c:	89a3      	ldrh	r3, [r4, #12]
 800a33e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a342:	81a3      	strh	r3, [r4, #12]
 800a344:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a348:	464a      	mov	r2, r9
 800a34a:	6921      	ldr	r1, [r4, #16]
 800a34c:	f7fc fc46 	bl	8006bdc <memcpy>
 800a350:	89a3      	ldrh	r3, [r4, #12]
 800a352:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a356:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a35a:	81a3      	strh	r3, [r4, #12]
 800a35c:	6126      	str	r6, [r4, #16]
 800a35e:	444e      	add	r6, r9
 800a360:	6026      	str	r6, [r4, #0]
 800a362:	463e      	mov	r6, r7
 800a364:	6165      	str	r5, [r4, #20]
 800a366:	eba5 0509 	sub.w	r5, r5, r9
 800a36a:	60a5      	str	r5, [r4, #8]
 800a36c:	42be      	cmp	r6, r7
 800a36e:	d900      	bls.n	800a372 <__ssputs_r+0x86>
 800a370:	463e      	mov	r6, r7
 800a372:	4632      	mov	r2, r6
 800a374:	4641      	mov	r1, r8
 800a376:	6820      	ldr	r0, [r4, #0]
 800a378:	f000 fd88 	bl	800ae8c <memmove>
 800a37c:	68a3      	ldr	r3, [r4, #8]
 800a37e:	2000      	movs	r0, #0
 800a380:	1b9b      	subs	r3, r3, r6
 800a382:	60a3      	str	r3, [r4, #8]
 800a384:	6823      	ldr	r3, [r4, #0]
 800a386:	4433      	add	r3, r6
 800a388:	6023      	str	r3, [r4, #0]
 800a38a:	e7db      	b.n	800a344 <__ssputs_r+0x58>
 800a38c:	462a      	mov	r2, r5
 800a38e:	f000 fda3 	bl	800aed8 <_realloc_r>
 800a392:	4606      	mov	r6, r0
 800a394:	2800      	cmp	r0, #0
 800a396:	d1e1      	bne.n	800a35c <__ssputs_r+0x70>
 800a398:	4650      	mov	r0, sl
 800a39a:	6921      	ldr	r1, [r4, #16]
 800a39c:	f7ff feca 	bl	800a134 <_free_r>
 800a3a0:	e7c7      	b.n	800a332 <__ssputs_r+0x46>
	...

0800a3a4 <_svfiprintf_r>:
 800a3a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3a8:	4698      	mov	r8, r3
 800a3aa:	898b      	ldrh	r3, [r1, #12]
 800a3ac:	4607      	mov	r7, r0
 800a3ae:	061b      	lsls	r3, r3, #24
 800a3b0:	460d      	mov	r5, r1
 800a3b2:	4614      	mov	r4, r2
 800a3b4:	b09d      	sub	sp, #116	; 0x74
 800a3b6:	d50e      	bpl.n	800a3d6 <_svfiprintf_r+0x32>
 800a3b8:	690b      	ldr	r3, [r1, #16]
 800a3ba:	b963      	cbnz	r3, 800a3d6 <_svfiprintf_r+0x32>
 800a3bc:	2140      	movs	r1, #64	; 0x40
 800a3be:	f7ff ff21 	bl	800a204 <_malloc_r>
 800a3c2:	6028      	str	r0, [r5, #0]
 800a3c4:	6128      	str	r0, [r5, #16]
 800a3c6:	b920      	cbnz	r0, 800a3d2 <_svfiprintf_r+0x2e>
 800a3c8:	230c      	movs	r3, #12
 800a3ca:	603b      	str	r3, [r7, #0]
 800a3cc:	f04f 30ff 	mov.w	r0, #4294967295
 800a3d0:	e0d1      	b.n	800a576 <_svfiprintf_r+0x1d2>
 800a3d2:	2340      	movs	r3, #64	; 0x40
 800a3d4:	616b      	str	r3, [r5, #20]
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	9309      	str	r3, [sp, #36]	; 0x24
 800a3da:	2320      	movs	r3, #32
 800a3dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a3e0:	2330      	movs	r3, #48	; 0x30
 800a3e2:	f04f 0901 	mov.w	r9, #1
 800a3e6:	f8cd 800c 	str.w	r8, [sp, #12]
 800a3ea:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a590 <_svfiprintf_r+0x1ec>
 800a3ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a3f2:	4623      	mov	r3, r4
 800a3f4:	469a      	mov	sl, r3
 800a3f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a3fa:	b10a      	cbz	r2, 800a400 <_svfiprintf_r+0x5c>
 800a3fc:	2a25      	cmp	r2, #37	; 0x25
 800a3fe:	d1f9      	bne.n	800a3f4 <_svfiprintf_r+0x50>
 800a400:	ebba 0b04 	subs.w	fp, sl, r4
 800a404:	d00b      	beq.n	800a41e <_svfiprintf_r+0x7a>
 800a406:	465b      	mov	r3, fp
 800a408:	4622      	mov	r2, r4
 800a40a:	4629      	mov	r1, r5
 800a40c:	4638      	mov	r0, r7
 800a40e:	f7ff ff6d 	bl	800a2ec <__ssputs_r>
 800a412:	3001      	adds	r0, #1
 800a414:	f000 80aa 	beq.w	800a56c <_svfiprintf_r+0x1c8>
 800a418:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a41a:	445a      	add	r2, fp
 800a41c:	9209      	str	r2, [sp, #36]	; 0x24
 800a41e:	f89a 3000 	ldrb.w	r3, [sl]
 800a422:	2b00      	cmp	r3, #0
 800a424:	f000 80a2 	beq.w	800a56c <_svfiprintf_r+0x1c8>
 800a428:	2300      	movs	r3, #0
 800a42a:	f04f 32ff 	mov.w	r2, #4294967295
 800a42e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a432:	f10a 0a01 	add.w	sl, sl, #1
 800a436:	9304      	str	r3, [sp, #16]
 800a438:	9307      	str	r3, [sp, #28]
 800a43a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a43e:	931a      	str	r3, [sp, #104]	; 0x68
 800a440:	4654      	mov	r4, sl
 800a442:	2205      	movs	r2, #5
 800a444:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a448:	4851      	ldr	r0, [pc, #324]	; (800a590 <_svfiprintf_r+0x1ec>)
 800a44a:	f7ff f999 	bl	8009780 <memchr>
 800a44e:	9a04      	ldr	r2, [sp, #16]
 800a450:	b9d8      	cbnz	r0, 800a48a <_svfiprintf_r+0xe6>
 800a452:	06d0      	lsls	r0, r2, #27
 800a454:	bf44      	itt	mi
 800a456:	2320      	movmi	r3, #32
 800a458:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a45c:	0711      	lsls	r1, r2, #28
 800a45e:	bf44      	itt	mi
 800a460:	232b      	movmi	r3, #43	; 0x2b
 800a462:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a466:	f89a 3000 	ldrb.w	r3, [sl]
 800a46a:	2b2a      	cmp	r3, #42	; 0x2a
 800a46c:	d015      	beq.n	800a49a <_svfiprintf_r+0xf6>
 800a46e:	4654      	mov	r4, sl
 800a470:	2000      	movs	r0, #0
 800a472:	f04f 0c0a 	mov.w	ip, #10
 800a476:	9a07      	ldr	r2, [sp, #28]
 800a478:	4621      	mov	r1, r4
 800a47a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a47e:	3b30      	subs	r3, #48	; 0x30
 800a480:	2b09      	cmp	r3, #9
 800a482:	d94e      	bls.n	800a522 <_svfiprintf_r+0x17e>
 800a484:	b1b0      	cbz	r0, 800a4b4 <_svfiprintf_r+0x110>
 800a486:	9207      	str	r2, [sp, #28]
 800a488:	e014      	b.n	800a4b4 <_svfiprintf_r+0x110>
 800a48a:	eba0 0308 	sub.w	r3, r0, r8
 800a48e:	fa09 f303 	lsl.w	r3, r9, r3
 800a492:	4313      	orrs	r3, r2
 800a494:	46a2      	mov	sl, r4
 800a496:	9304      	str	r3, [sp, #16]
 800a498:	e7d2      	b.n	800a440 <_svfiprintf_r+0x9c>
 800a49a:	9b03      	ldr	r3, [sp, #12]
 800a49c:	1d19      	adds	r1, r3, #4
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	9103      	str	r1, [sp, #12]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	bfbb      	ittet	lt
 800a4a6:	425b      	neglt	r3, r3
 800a4a8:	f042 0202 	orrlt.w	r2, r2, #2
 800a4ac:	9307      	strge	r3, [sp, #28]
 800a4ae:	9307      	strlt	r3, [sp, #28]
 800a4b0:	bfb8      	it	lt
 800a4b2:	9204      	strlt	r2, [sp, #16]
 800a4b4:	7823      	ldrb	r3, [r4, #0]
 800a4b6:	2b2e      	cmp	r3, #46	; 0x2e
 800a4b8:	d10c      	bne.n	800a4d4 <_svfiprintf_r+0x130>
 800a4ba:	7863      	ldrb	r3, [r4, #1]
 800a4bc:	2b2a      	cmp	r3, #42	; 0x2a
 800a4be:	d135      	bne.n	800a52c <_svfiprintf_r+0x188>
 800a4c0:	9b03      	ldr	r3, [sp, #12]
 800a4c2:	3402      	adds	r4, #2
 800a4c4:	1d1a      	adds	r2, r3, #4
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	9203      	str	r2, [sp, #12]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	bfb8      	it	lt
 800a4ce:	f04f 33ff 	movlt.w	r3, #4294967295
 800a4d2:	9305      	str	r3, [sp, #20]
 800a4d4:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800a594 <_svfiprintf_r+0x1f0>
 800a4d8:	2203      	movs	r2, #3
 800a4da:	4650      	mov	r0, sl
 800a4dc:	7821      	ldrb	r1, [r4, #0]
 800a4de:	f7ff f94f 	bl	8009780 <memchr>
 800a4e2:	b140      	cbz	r0, 800a4f6 <_svfiprintf_r+0x152>
 800a4e4:	2340      	movs	r3, #64	; 0x40
 800a4e6:	eba0 000a 	sub.w	r0, r0, sl
 800a4ea:	fa03 f000 	lsl.w	r0, r3, r0
 800a4ee:	9b04      	ldr	r3, [sp, #16]
 800a4f0:	3401      	adds	r4, #1
 800a4f2:	4303      	orrs	r3, r0
 800a4f4:	9304      	str	r3, [sp, #16]
 800a4f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4fa:	2206      	movs	r2, #6
 800a4fc:	4826      	ldr	r0, [pc, #152]	; (800a598 <_svfiprintf_r+0x1f4>)
 800a4fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a502:	f7ff f93d 	bl	8009780 <memchr>
 800a506:	2800      	cmp	r0, #0
 800a508:	d038      	beq.n	800a57c <_svfiprintf_r+0x1d8>
 800a50a:	4b24      	ldr	r3, [pc, #144]	; (800a59c <_svfiprintf_r+0x1f8>)
 800a50c:	bb1b      	cbnz	r3, 800a556 <_svfiprintf_r+0x1b2>
 800a50e:	9b03      	ldr	r3, [sp, #12]
 800a510:	3307      	adds	r3, #7
 800a512:	f023 0307 	bic.w	r3, r3, #7
 800a516:	3308      	adds	r3, #8
 800a518:	9303      	str	r3, [sp, #12]
 800a51a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a51c:	4433      	add	r3, r6
 800a51e:	9309      	str	r3, [sp, #36]	; 0x24
 800a520:	e767      	b.n	800a3f2 <_svfiprintf_r+0x4e>
 800a522:	460c      	mov	r4, r1
 800a524:	2001      	movs	r0, #1
 800a526:	fb0c 3202 	mla	r2, ip, r2, r3
 800a52a:	e7a5      	b.n	800a478 <_svfiprintf_r+0xd4>
 800a52c:	2300      	movs	r3, #0
 800a52e:	f04f 0c0a 	mov.w	ip, #10
 800a532:	4619      	mov	r1, r3
 800a534:	3401      	adds	r4, #1
 800a536:	9305      	str	r3, [sp, #20]
 800a538:	4620      	mov	r0, r4
 800a53a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a53e:	3a30      	subs	r2, #48	; 0x30
 800a540:	2a09      	cmp	r2, #9
 800a542:	d903      	bls.n	800a54c <_svfiprintf_r+0x1a8>
 800a544:	2b00      	cmp	r3, #0
 800a546:	d0c5      	beq.n	800a4d4 <_svfiprintf_r+0x130>
 800a548:	9105      	str	r1, [sp, #20]
 800a54a:	e7c3      	b.n	800a4d4 <_svfiprintf_r+0x130>
 800a54c:	4604      	mov	r4, r0
 800a54e:	2301      	movs	r3, #1
 800a550:	fb0c 2101 	mla	r1, ip, r1, r2
 800a554:	e7f0      	b.n	800a538 <_svfiprintf_r+0x194>
 800a556:	ab03      	add	r3, sp, #12
 800a558:	9300      	str	r3, [sp, #0]
 800a55a:	462a      	mov	r2, r5
 800a55c:	4638      	mov	r0, r7
 800a55e:	4b10      	ldr	r3, [pc, #64]	; (800a5a0 <_svfiprintf_r+0x1fc>)
 800a560:	a904      	add	r1, sp, #16
 800a562:	f7fc fbef 	bl	8006d44 <_printf_float>
 800a566:	1c42      	adds	r2, r0, #1
 800a568:	4606      	mov	r6, r0
 800a56a:	d1d6      	bne.n	800a51a <_svfiprintf_r+0x176>
 800a56c:	89ab      	ldrh	r3, [r5, #12]
 800a56e:	065b      	lsls	r3, r3, #25
 800a570:	f53f af2c 	bmi.w	800a3cc <_svfiprintf_r+0x28>
 800a574:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a576:	b01d      	add	sp, #116	; 0x74
 800a578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a57c:	ab03      	add	r3, sp, #12
 800a57e:	9300      	str	r3, [sp, #0]
 800a580:	462a      	mov	r2, r5
 800a582:	4638      	mov	r0, r7
 800a584:	4b06      	ldr	r3, [pc, #24]	; (800a5a0 <_svfiprintf_r+0x1fc>)
 800a586:	a904      	add	r1, sp, #16
 800a588:	f7fc fe78 	bl	800727c <_printf_i>
 800a58c:	e7eb      	b.n	800a566 <_svfiprintf_r+0x1c2>
 800a58e:	bf00      	nop
 800a590:	0800b8d4 	.word	0x0800b8d4
 800a594:	0800b8da 	.word	0x0800b8da
 800a598:	0800b8de 	.word	0x0800b8de
 800a59c:	08006d45 	.word	0x08006d45
 800a5a0:	0800a2ed 	.word	0x0800a2ed

0800a5a4 <__sfputc_r>:
 800a5a4:	6893      	ldr	r3, [r2, #8]
 800a5a6:	b410      	push	{r4}
 800a5a8:	3b01      	subs	r3, #1
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	6093      	str	r3, [r2, #8]
 800a5ae:	da07      	bge.n	800a5c0 <__sfputc_r+0x1c>
 800a5b0:	6994      	ldr	r4, [r2, #24]
 800a5b2:	42a3      	cmp	r3, r4
 800a5b4:	db01      	blt.n	800a5ba <__sfputc_r+0x16>
 800a5b6:	290a      	cmp	r1, #10
 800a5b8:	d102      	bne.n	800a5c0 <__sfputc_r+0x1c>
 800a5ba:	bc10      	pop	{r4}
 800a5bc:	f000 b974 	b.w	800a8a8 <__swbuf_r>
 800a5c0:	6813      	ldr	r3, [r2, #0]
 800a5c2:	1c58      	adds	r0, r3, #1
 800a5c4:	6010      	str	r0, [r2, #0]
 800a5c6:	7019      	strb	r1, [r3, #0]
 800a5c8:	4608      	mov	r0, r1
 800a5ca:	bc10      	pop	{r4}
 800a5cc:	4770      	bx	lr

0800a5ce <__sfputs_r>:
 800a5ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5d0:	4606      	mov	r6, r0
 800a5d2:	460f      	mov	r7, r1
 800a5d4:	4614      	mov	r4, r2
 800a5d6:	18d5      	adds	r5, r2, r3
 800a5d8:	42ac      	cmp	r4, r5
 800a5da:	d101      	bne.n	800a5e0 <__sfputs_r+0x12>
 800a5dc:	2000      	movs	r0, #0
 800a5de:	e007      	b.n	800a5f0 <__sfputs_r+0x22>
 800a5e0:	463a      	mov	r2, r7
 800a5e2:	4630      	mov	r0, r6
 800a5e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5e8:	f7ff ffdc 	bl	800a5a4 <__sfputc_r>
 800a5ec:	1c43      	adds	r3, r0, #1
 800a5ee:	d1f3      	bne.n	800a5d8 <__sfputs_r+0xa>
 800a5f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a5f4 <_vfiprintf_r>:
 800a5f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5f8:	460d      	mov	r5, r1
 800a5fa:	4614      	mov	r4, r2
 800a5fc:	4698      	mov	r8, r3
 800a5fe:	4606      	mov	r6, r0
 800a600:	b09d      	sub	sp, #116	; 0x74
 800a602:	b118      	cbz	r0, 800a60c <_vfiprintf_r+0x18>
 800a604:	6983      	ldr	r3, [r0, #24]
 800a606:	b90b      	cbnz	r3, 800a60c <_vfiprintf_r+0x18>
 800a608:	f000 fb3a 	bl	800ac80 <__sinit>
 800a60c:	4b89      	ldr	r3, [pc, #548]	; (800a834 <_vfiprintf_r+0x240>)
 800a60e:	429d      	cmp	r5, r3
 800a610:	d11b      	bne.n	800a64a <_vfiprintf_r+0x56>
 800a612:	6875      	ldr	r5, [r6, #4]
 800a614:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a616:	07d9      	lsls	r1, r3, #31
 800a618:	d405      	bmi.n	800a626 <_vfiprintf_r+0x32>
 800a61a:	89ab      	ldrh	r3, [r5, #12]
 800a61c:	059a      	lsls	r2, r3, #22
 800a61e:	d402      	bmi.n	800a626 <_vfiprintf_r+0x32>
 800a620:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a622:	f000 fbcb 	bl	800adbc <__retarget_lock_acquire_recursive>
 800a626:	89ab      	ldrh	r3, [r5, #12]
 800a628:	071b      	lsls	r3, r3, #28
 800a62a:	d501      	bpl.n	800a630 <_vfiprintf_r+0x3c>
 800a62c:	692b      	ldr	r3, [r5, #16]
 800a62e:	b9eb      	cbnz	r3, 800a66c <_vfiprintf_r+0x78>
 800a630:	4629      	mov	r1, r5
 800a632:	4630      	mov	r0, r6
 800a634:	f000 f998 	bl	800a968 <__swsetup_r>
 800a638:	b1c0      	cbz	r0, 800a66c <_vfiprintf_r+0x78>
 800a63a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a63c:	07dc      	lsls	r4, r3, #31
 800a63e:	d50e      	bpl.n	800a65e <_vfiprintf_r+0x6a>
 800a640:	f04f 30ff 	mov.w	r0, #4294967295
 800a644:	b01d      	add	sp, #116	; 0x74
 800a646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a64a:	4b7b      	ldr	r3, [pc, #492]	; (800a838 <_vfiprintf_r+0x244>)
 800a64c:	429d      	cmp	r5, r3
 800a64e:	d101      	bne.n	800a654 <_vfiprintf_r+0x60>
 800a650:	68b5      	ldr	r5, [r6, #8]
 800a652:	e7df      	b.n	800a614 <_vfiprintf_r+0x20>
 800a654:	4b79      	ldr	r3, [pc, #484]	; (800a83c <_vfiprintf_r+0x248>)
 800a656:	429d      	cmp	r5, r3
 800a658:	bf08      	it	eq
 800a65a:	68f5      	ldreq	r5, [r6, #12]
 800a65c:	e7da      	b.n	800a614 <_vfiprintf_r+0x20>
 800a65e:	89ab      	ldrh	r3, [r5, #12]
 800a660:	0598      	lsls	r0, r3, #22
 800a662:	d4ed      	bmi.n	800a640 <_vfiprintf_r+0x4c>
 800a664:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a666:	f000 fbaa 	bl	800adbe <__retarget_lock_release_recursive>
 800a66a:	e7e9      	b.n	800a640 <_vfiprintf_r+0x4c>
 800a66c:	2300      	movs	r3, #0
 800a66e:	9309      	str	r3, [sp, #36]	; 0x24
 800a670:	2320      	movs	r3, #32
 800a672:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a676:	2330      	movs	r3, #48	; 0x30
 800a678:	f04f 0901 	mov.w	r9, #1
 800a67c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a680:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800a840 <_vfiprintf_r+0x24c>
 800a684:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a688:	4623      	mov	r3, r4
 800a68a:	469a      	mov	sl, r3
 800a68c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a690:	b10a      	cbz	r2, 800a696 <_vfiprintf_r+0xa2>
 800a692:	2a25      	cmp	r2, #37	; 0x25
 800a694:	d1f9      	bne.n	800a68a <_vfiprintf_r+0x96>
 800a696:	ebba 0b04 	subs.w	fp, sl, r4
 800a69a:	d00b      	beq.n	800a6b4 <_vfiprintf_r+0xc0>
 800a69c:	465b      	mov	r3, fp
 800a69e:	4622      	mov	r2, r4
 800a6a0:	4629      	mov	r1, r5
 800a6a2:	4630      	mov	r0, r6
 800a6a4:	f7ff ff93 	bl	800a5ce <__sfputs_r>
 800a6a8:	3001      	adds	r0, #1
 800a6aa:	f000 80aa 	beq.w	800a802 <_vfiprintf_r+0x20e>
 800a6ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a6b0:	445a      	add	r2, fp
 800a6b2:	9209      	str	r2, [sp, #36]	; 0x24
 800a6b4:	f89a 3000 	ldrb.w	r3, [sl]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	f000 80a2 	beq.w	800a802 <_vfiprintf_r+0x20e>
 800a6be:	2300      	movs	r3, #0
 800a6c0:	f04f 32ff 	mov.w	r2, #4294967295
 800a6c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a6c8:	f10a 0a01 	add.w	sl, sl, #1
 800a6cc:	9304      	str	r3, [sp, #16]
 800a6ce:	9307      	str	r3, [sp, #28]
 800a6d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a6d4:	931a      	str	r3, [sp, #104]	; 0x68
 800a6d6:	4654      	mov	r4, sl
 800a6d8:	2205      	movs	r2, #5
 800a6da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6de:	4858      	ldr	r0, [pc, #352]	; (800a840 <_vfiprintf_r+0x24c>)
 800a6e0:	f7ff f84e 	bl	8009780 <memchr>
 800a6e4:	9a04      	ldr	r2, [sp, #16]
 800a6e6:	b9d8      	cbnz	r0, 800a720 <_vfiprintf_r+0x12c>
 800a6e8:	06d1      	lsls	r1, r2, #27
 800a6ea:	bf44      	itt	mi
 800a6ec:	2320      	movmi	r3, #32
 800a6ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a6f2:	0713      	lsls	r3, r2, #28
 800a6f4:	bf44      	itt	mi
 800a6f6:	232b      	movmi	r3, #43	; 0x2b
 800a6f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a6fc:	f89a 3000 	ldrb.w	r3, [sl]
 800a700:	2b2a      	cmp	r3, #42	; 0x2a
 800a702:	d015      	beq.n	800a730 <_vfiprintf_r+0x13c>
 800a704:	4654      	mov	r4, sl
 800a706:	2000      	movs	r0, #0
 800a708:	f04f 0c0a 	mov.w	ip, #10
 800a70c:	9a07      	ldr	r2, [sp, #28]
 800a70e:	4621      	mov	r1, r4
 800a710:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a714:	3b30      	subs	r3, #48	; 0x30
 800a716:	2b09      	cmp	r3, #9
 800a718:	d94e      	bls.n	800a7b8 <_vfiprintf_r+0x1c4>
 800a71a:	b1b0      	cbz	r0, 800a74a <_vfiprintf_r+0x156>
 800a71c:	9207      	str	r2, [sp, #28]
 800a71e:	e014      	b.n	800a74a <_vfiprintf_r+0x156>
 800a720:	eba0 0308 	sub.w	r3, r0, r8
 800a724:	fa09 f303 	lsl.w	r3, r9, r3
 800a728:	4313      	orrs	r3, r2
 800a72a:	46a2      	mov	sl, r4
 800a72c:	9304      	str	r3, [sp, #16]
 800a72e:	e7d2      	b.n	800a6d6 <_vfiprintf_r+0xe2>
 800a730:	9b03      	ldr	r3, [sp, #12]
 800a732:	1d19      	adds	r1, r3, #4
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	9103      	str	r1, [sp, #12]
 800a738:	2b00      	cmp	r3, #0
 800a73a:	bfbb      	ittet	lt
 800a73c:	425b      	neglt	r3, r3
 800a73e:	f042 0202 	orrlt.w	r2, r2, #2
 800a742:	9307      	strge	r3, [sp, #28]
 800a744:	9307      	strlt	r3, [sp, #28]
 800a746:	bfb8      	it	lt
 800a748:	9204      	strlt	r2, [sp, #16]
 800a74a:	7823      	ldrb	r3, [r4, #0]
 800a74c:	2b2e      	cmp	r3, #46	; 0x2e
 800a74e:	d10c      	bne.n	800a76a <_vfiprintf_r+0x176>
 800a750:	7863      	ldrb	r3, [r4, #1]
 800a752:	2b2a      	cmp	r3, #42	; 0x2a
 800a754:	d135      	bne.n	800a7c2 <_vfiprintf_r+0x1ce>
 800a756:	9b03      	ldr	r3, [sp, #12]
 800a758:	3402      	adds	r4, #2
 800a75a:	1d1a      	adds	r2, r3, #4
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	9203      	str	r2, [sp, #12]
 800a760:	2b00      	cmp	r3, #0
 800a762:	bfb8      	it	lt
 800a764:	f04f 33ff 	movlt.w	r3, #4294967295
 800a768:	9305      	str	r3, [sp, #20]
 800a76a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800a844 <_vfiprintf_r+0x250>
 800a76e:	2203      	movs	r2, #3
 800a770:	4650      	mov	r0, sl
 800a772:	7821      	ldrb	r1, [r4, #0]
 800a774:	f7ff f804 	bl	8009780 <memchr>
 800a778:	b140      	cbz	r0, 800a78c <_vfiprintf_r+0x198>
 800a77a:	2340      	movs	r3, #64	; 0x40
 800a77c:	eba0 000a 	sub.w	r0, r0, sl
 800a780:	fa03 f000 	lsl.w	r0, r3, r0
 800a784:	9b04      	ldr	r3, [sp, #16]
 800a786:	3401      	adds	r4, #1
 800a788:	4303      	orrs	r3, r0
 800a78a:	9304      	str	r3, [sp, #16]
 800a78c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a790:	2206      	movs	r2, #6
 800a792:	482d      	ldr	r0, [pc, #180]	; (800a848 <_vfiprintf_r+0x254>)
 800a794:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a798:	f7fe fff2 	bl	8009780 <memchr>
 800a79c:	2800      	cmp	r0, #0
 800a79e:	d03f      	beq.n	800a820 <_vfiprintf_r+0x22c>
 800a7a0:	4b2a      	ldr	r3, [pc, #168]	; (800a84c <_vfiprintf_r+0x258>)
 800a7a2:	bb1b      	cbnz	r3, 800a7ec <_vfiprintf_r+0x1f8>
 800a7a4:	9b03      	ldr	r3, [sp, #12]
 800a7a6:	3307      	adds	r3, #7
 800a7a8:	f023 0307 	bic.w	r3, r3, #7
 800a7ac:	3308      	adds	r3, #8
 800a7ae:	9303      	str	r3, [sp, #12]
 800a7b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7b2:	443b      	add	r3, r7
 800a7b4:	9309      	str	r3, [sp, #36]	; 0x24
 800a7b6:	e767      	b.n	800a688 <_vfiprintf_r+0x94>
 800a7b8:	460c      	mov	r4, r1
 800a7ba:	2001      	movs	r0, #1
 800a7bc:	fb0c 3202 	mla	r2, ip, r2, r3
 800a7c0:	e7a5      	b.n	800a70e <_vfiprintf_r+0x11a>
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	f04f 0c0a 	mov.w	ip, #10
 800a7c8:	4619      	mov	r1, r3
 800a7ca:	3401      	adds	r4, #1
 800a7cc:	9305      	str	r3, [sp, #20]
 800a7ce:	4620      	mov	r0, r4
 800a7d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a7d4:	3a30      	subs	r2, #48	; 0x30
 800a7d6:	2a09      	cmp	r2, #9
 800a7d8:	d903      	bls.n	800a7e2 <_vfiprintf_r+0x1ee>
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d0c5      	beq.n	800a76a <_vfiprintf_r+0x176>
 800a7de:	9105      	str	r1, [sp, #20]
 800a7e0:	e7c3      	b.n	800a76a <_vfiprintf_r+0x176>
 800a7e2:	4604      	mov	r4, r0
 800a7e4:	2301      	movs	r3, #1
 800a7e6:	fb0c 2101 	mla	r1, ip, r1, r2
 800a7ea:	e7f0      	b.n	800a7ce <_vfiprintf_r+0x1da>
 800a7ec:	ab03      	add	r3, sp, #12
 800a7ee:	9300      	str	r3, [sp, #0]
 800a7f0:	462a      	mov	r2, r5
 800a7f2:	4630      	mov	r0, r6
 800a7f4:	4b16      	ldr	r3, [pc, #88]	; (800a850 <_vfiprintf_r+0x25c>)
 800a7f6:	a904      	add	r1, sp, #16
 800a7f8:	f7fc faa4 	bl	8006d44 <_printf_float>
 800a7fc:	4607      	mov	r7, r0
 800a7fe:	1c78      	adds	r0, r7, #1
 800a800:	d1d6      	bne.n	800a7b0 <_vfiprintf_r+0x1bc>
 800a802:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a804:	07d9      	lsls	r1, r3, #31
 800a806:	d405      	bmi.n	800a814 <_vfiprintf_r+0x220>
 800a808:	89ab      	ldrh	r3, [r5, #12]
 800a80a:	059a      	lsls	r2, r3, #22
 800a80c:	d402      	bmi.n	800a814 <_vfiprintf_r+0x220>
 800a80e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a810:	f000 fad5 	bl	800adbe <__retarget_lock_release_recursive>
 800a814:	89ab      	ldrh	r3, [r5, #12]
 800a816:	065b      	lsls	r3, r3, #25
 800a818:	f53f af12 	bmi.w	800a640 <_vfiprintf_r+0x4c>
 800a81c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a81e:	e711      	b.n	800a644 <_vfiprintf_r+0x50>
 800a820:	ab03      	add	r3, sp, #12
 800a822:	9300      	str	r3, [sp, #0]
 800a824:	462a      	mov	r2, r5
 800a826:	4630      	mov	r0, r6
 800a828:	4b09      	ldr	r3, [pc, #36]	; (800a850 <_vfiprintf_r+0x25c>)
 800a82a:	a904      	add	r1, sp, #16
 800a82c:	f7fc fd26 	bl	800727c <_printf_i>
 800a830:	e7e4      	b.n	800a7fc <_vfiprintf_r+0x208>
 800a832:	bf00      	nop
 800a834:	0800b908 	.word	0x0800b908
 800a838:	0800b928 	.word	0x0800b928
 800a83c:	0800b8e8 	.word	0x0800b8e8
 800a840:	0800b8d4 	.word	0x0800b8d4
 800a844:	0800b8da 	.word	0x0800b8da
 800a848:	0800b8de 	.word	0x0800b8de
 800a84c:	08006d45 	.word	0x08006d45
 800a850:	0800a5cf 	.word	0x0800a5cf

0800a854 <nan>:
 800a854:	2000      	movs	r0, #0
 800a856:	4901      	ldr	r1, [pc, #4]	; (800a85c <nan+0x8>)
 800a858:	4770      	bx	lr
 800a85a:	bf00      	nop
 800a85c:	7ff80000 	.word	0x7ff80000

0800a860 <_sbrk_r>:
 800a860:	b538      	push	{r3, r4, r5, lr}
 800a862:	2300      	movs	r3, #0
 800a864:	4d05      	ldr	r5, [pc, #20]	; (800a87c <_sbrk_r+0x1c>)
 800a866:	4604      	mov	r4, r0
 800a868:	4608      	mov	r0, r1
 800a86a:	602b      	str	r3, [r5, #0]
 800a86c:	f7f7 fa32 	bl	8001cd4 <_sbrk>
 800a870:	1c43      	adds	r3, r0, #1
 800a872:	d102      	bne.n	800a87a <_sbrk_r+0x1a>
 800a874:	682b      	ldr	r3, [r5, #0]
 800a876:	b103      	cbz	r3, 800a87a <_sbrk_r+0x1a>
 800a878:	6023      	str	r3, [r4, #0]
 800a87a:	bd38      	pop	{r3, r4, r5, pc}
 800a87c:	20002608 	.word	0x20002608

0800a880 <strncmp>:
 800a880:	4603      	mov	r3, r0
 800a882:	b510      	push	{r4, lr}
 800a884:	b172      	cbz	r2, 800a8a4 <strncmp+0x24>
 800a886:	3901      	subs	r1, #1
 800a888:	1884      	adds	r4, r0, r2
 800a88a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a88e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a892:	4290      	cmp	r0, r2
 800a894:	d101      	bne.n	800a89a <strncmp+0x1a>
 800a896:	42a3      	cmp	r3, r4
 800a898:	d101      	bne.n	800a89e <strncmp+0x1e>
 800a89a:	1a80      	subs	r0, r0, r2
 800a89c:	bd10      	pop	{r4, pc}
 800a89e:	2800      	cmp	r0, #0
 800a8a0:	d1f3      	bne.n	800a88a <strncmp+0xa>
 800a8a2:	e7fa      	b.n	800a89a <strncmp+0x1a>
 800a8a4:	4610      	mov	r0, r2
 800a8a6:	e7f9      	b.n	800a89c <strncmp+0x1c>

0800a8a8 <__swbuf_r>:
 800a8a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8aa:	460e      	mov	r6, r1
 800a8ac:	4614      	mov	r4, r2
 800a8ae:	4605      	mov	r5, r0
 800a8b0:	b118      	cbz	r0, 800a8ba <__swbuf_r+0x12>
 800a8b2:	6983      	ldr	r3, [r0, #24]
 800a8b4:	b90b      	cbnz	r3, 800a8ba <__swbuf_r+0x12>
 800a8b6:	f000 f9e3 	bl	800ac80 <__sinit>
 800a8ba:	4b21      	ldr	r3, [pc, #132]	; (800a940 <__swbuf_r+0x98>)
 800a8bc:	429c      	cmp	r4, r3
 800a8be:	d12b      	bne.n	800a918 <__swbuf_r+0x70>
 800a8c0:	686c      	ldr	r4, [r5, #4]
 800a8c2:	69a3      	ldr	r3, [r4, #24]
 800a8c4:	60a3      	str	r3, [r4, #8]
 800a8c6:	89a3      	ldrh	r3, [r4, #12]
 800a8c8:	071a      	lsls	r2, r3, #28
 800a8ca:	d52f      	bpl.n	800a92c <__swbuf_r+0x84>
 800a8cc:	6923      	ldr	r3, [r4, #16]
 800a8ce:	b36b      	cbz	r3, 800a92c <__swbuf_r+0x84>
 800a8d0:	6923      	ldr	r3, [r4, #16]
 800a8d2:	6820      	ldr	r0, [r4, #0]
 800a8d4:	b2f6      	uxtb	r6, r6
 800a8d6:	1ac0      	subs	r0, r0, r3
 800a8d8:	6963      	ldr	r3, [r4, #20]
 800a8da:	4637      	mov	r7, r6
 800a8dc:	4283      	cmp	r3, r0
 800a8de:	dc04      	bgt.n	800a8ea <__swbuf_r+0x42>
 800a8e0:	4621      	mov	r1, r4
 800a8e2:	4628      	mov	r0, r5
 800a8e4:	f000 f938 	bl	800ab58 <_fflush_r>
 800a8e8:	bb30      	cbnz	r0, 800a938 <__swbuf_r+0x90>
 800a8ea:	68a3      	ldr	r3, [r4, #8]
 800a8ec:	3001      	adds	r0, #1
 800a8ee:	3b01      	subs	r3, #1
 800a8f0:	60a3      	str	r3, [r4, #8]
 800a8f2:	6823      	ldr	r3, [r4, #0]
 800a8f4:	1c5a      	adds	r2, r3, #1
 800a8f6:	6022      	str	r2, [r4, #0]
 800a8f8:	701e      	strb	r6, [r3, #0]
 800a8fa:	6963      	ldr	r3, [r4, #20]
 800a8fc:	4283      	cmp	r3, r0
 800a8fe:	d004      	beq.n	800a90a <__swbuf_r+0x62>
 800a900:	89a3      	ldrh	r3, [r4, #12]
 800a902:	07db      	lsls	r3, r3, #31
 800a904:	d506      	bpl.n	800a914 <__swbuf_r+0x6c>
 800a906:	2e0a      	cmp	r6, #10
 800a908:	d104      	bne.n	800a914 <__swbuf_r+0x6c>
 800a90a:	4621      	mov	r1, r4
 800a90c:	4628      	mov	r0, r5
 800a90e:	f000 f923 	bl	800ab58 <_fflush_r>
 800a912:	b988      	cbnz	r0, 800a938 <__swbuf_r+0x90>
 800a914:	4638      	mov	r0, r7
 800a916:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a918:	4b0a      	ldr	r3, [pc, #40]	; (800a944 <__swbuf_r+0x9c>)
 800a91a:	429c      	cmp	r4, r3
 800a91c:	d101      	bne.n	800a922 <__swbuf_r+0x7a>
 800a91e:	68ac      	ldr	r4, [r5, #8]
 800a920:	e7cf      	b.n	800a8c2 <__swbuf_r+0x1a>
 800a922:	4b09      	ldr	r3, [pc, #36]	; (800a948 <__swbuf_r+0xa0>)
 800a924:	429c      	cmp	r4, r3
 800a926:	bf08      	it	eq
 800a928:	68ec      	ldreq	r4, [r5, #12]
 800a92a:	e7ca      	b.n	800a8c2 <__swbuf_r+0x1a>
 800a92c:	4621      	mov	r1, r4
 800a92e:	4628      	mov	r0, r5
 800a930:	f000 f81a 	bl	800a968 <__swsetup_r>
 800a934:	2800      	cmp	r0, #0
 800a936:	d0cb      	beq.n	800a8d0 <__swbuf_r+0x28>
 800a938:	f04f 37ff 	mov.w	r7, #4294967295
 800a93c:	e7ea      	b.n	800a914 <__swbuf_r+0x6c>
 800a93e:	bf00      	nop
 800a940:	0800b908 	.word	0x0800b908
 800a944:	0800b928 	.word	0x0800b928
 800a948:	0800b8e8 	.word	0x0800b8e8

0800a94c <__ascii_wctomb>:
 800a94c:	4603      	mov	r3, r0
 800a94e:	4608      	mov	r0, r1
 800a950:	b141      	cbz	r1, 800a964 <__ascii_wctomb+0x18>
 800a952:	2aff      	cmp	r2, #255	; 0xff
 800a954:	d904      	bls.n	800a960 <__ascii_wctomb+0x14>
 800a956:	228a      	movs	r2, #138	; 0x8a
 800a958:	f04f 30ff 	mov.w	r0, #4294967295
 800a95c:	601a      	str	r2, [r3, #0]
 800a95e:	4770      	bx	lr
 800a960:	2001      	movs	r0, #1
 800a962:	700a      	strb	r2, [r1, #0]
 800a964:	4770      	bx	lr
	...

0800a968 <__swsetup_r>:
 800a968:	4b32      	ldr	r3, [pc, #200]	; (800aa34 <__swsetup_r+0xcc>)
 800a96a:	b570      	push	{r4, r5, r6, lr}
 800a96c:	681d      	ldr	r5, [r3, #0]
 800a96e:	4606      	mov	r6, r0
 800a970:	460c      	mov	r4, r1
 800a972:	b125      	cbz	r5, 800a97e <__swsetup_r+0x16>
 800a974:	69ab      	ldr	r3, [r5, #24]
 800a976:	b913      	cbnz	r3, 800a97e <__swsetup_r+0x16>
 800a978:	4628      	mov	r0, r5
 800a97a:	f000 f981 	bl	800ac80 <__sinit>
 800a97e:	4b2e      	ldr	r3, [pc, #184]	; (800aa38 <__swsetup_r+0xd0>)
 800a980:	429c      	cmp	r4, r3
 800a982:	d10f      	bne.n	800a9a4 <__swsetup_r+0x3c>
 800a984:	686c      	ldr	r4, [r5, #4]
 800a986:	89a3      	ldrh	r3, [r4, #12]
 800a988:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a98c:	0719      	lsls	r1, r3, #28
 800a98e:	d42c      	bmi.n	800a9ea <__swsetup_r+0x82>
 800a990:	06dd      	lsls	r5, r3, #27
 800a992:	d411      	bmi.n	800a9b8 <__swsetup_r+0x50>
 800a994:	2309      	movs	r3, #9
 800a996:	6033      	str	r3, [r6, #0]
 800a998:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a99c:	f04f 30ff 	mov.w	r0, #4294967295
 800a9a0:	81a3      	strh	r3, [r4, #12]
 800a9a2:	e03e      	b.n	800aa22 <__swsetup_r+0xba>
 800a9a4:	4b25      	ldr	r3, [pc, #148]	; (800aa3c <__swsetup_r+0xd4>)
 800a9a6:	429c      	cmp	r4, r3
 800a9a8:	d101      	bne.n	800a9ae <__swsetup_r+0x46>
 800a9aa:	68ac      	ldr	r4, [r5, #8]
 800a9ac:	e7eb      	b.n	800a986 <__swsetup_r+0x1e>
 800a9ae:	4b24      	ldr	r3, [pc, #144]	; (800aa40 <__swsetup_r+0xd8>)
 800a9b0:	429c      	cmp	r4, r3
 800a9b2:	bf08      	it	eq
 800a9b4:	68ec      	ldreq	r4, [r5, #12]
 800a9b6:	e7e6      	b.n	800a986 <__swsetup_r+0x1e>
 800a9b8:	0758      	lsls	r0, r3, #29
 800a9ba:	d512      	bpl.n	800a9e2 <__swsetup_r+0x7a>
 800a9bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a9be:	b141      	cbz	r1, 800a9d2 <__swsetup_r+0x6a>
 800a9c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a9c4:	4299      	cmp	r1, r3
 800a9c6:	d002      	beq.n	800a9ce <__swsetup_r+0x66>
 800a9c8:	4630      	mov	r0, r6
 800a9ca:	f7ff fbb3 	bl	800a134 <_free_r>
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	6363      	str	r3, [r4, #52]	; 0x34
 800a9d2:	89a3      	ldrh	r3, [r4, #12]
 800a9d4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a9d8:	81a3      	strh	r3, [r4, #12]
 800a9da:	2300      	movs	r3, #0
 800a9dc:	6063      	str	r3, [r4, #4]
 800a9de:	6923      	ldr	r3, [r4, #16]
 800a9e0:	6023      	str	r3, [r4, #0]
 800a9e2:	89a3      	ldrh	r3, [r4, #12]
 800a9e4:	f043 0308 	orr.w	r3, r3, #8
 800a9e8:	81a3      	strh	r3, [r4, #12]
 800a9ea:	6923      	ldr	r3, [r4, #16]
 800a9ec:	b94b      	cbnz	r3, 800aa02 <__swsetup_r+0x9a>
 800a9ee:	89a3      	ldrh	r3, [r4, #12]
 800a9f0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a9f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a9f8:	d003      	beq.n	800aa02 <__swsetup_r+0x9a>
 800a9fa:	4621      	mov	r1, r4
 800a9fc:	4630      	mov	r0, r6
 800a9fe:	f000 fa05 	bl	800ae0c <__smakebuf_r>
 800aa02:	89a0      	ldrh	r0, [r4, #12]
 800aa04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aa08:	f010 0301 	ands.w	r3, r0, #1
 800aa0c:	d00a      	beq.n	800aa24 <__swsetup_r+0xbc>
 800aa0e:	2300      	movs	r3, #0
 800aa10:	60a3      	str	r3, [r4, #8]
 800aa12:	6963      	ldr	r3, [r4, #20]
 800aa14:	425b      	negs	r3, r3
 800aa16:	61a3      	str	r3, [r4, #24]
 800aa18:	6923      	ldr	r3, [r4, #16]
 800aa1a:	b943      	cbnz	r3, 800aa2e <__swsetup_r+0xc6>
 800aa1c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800aa20:	d1ba      	bne.n	800a998 <__swsetup_r+0x30>
 800aa22:	bd70      	pop	{r4, r5, r6, pc}
 800aa24:	0781      	lsls	r1, r0, #30
 800aa26:	bf58      	it	pl
 800aa28:	6963      	ldrpl	r3, [r4, #20]
 800aa2a:	60a3      	str	r3, [r4, #8]
 800aa2c:	e7f4      	b.n	800aa18 <__swsetup_r+0xb0>
 800aa2e:	2000      	movs	r0, #0
 800aa30:	e7f7      	b.n	800aa22 <__swsetup_r+0xba>
 800aa32:	bf00      	nop
 800aa34:	20000190 	.word	0x20000190
 800aa38:	0800b908 	.word	0x0800b908
 800aa3c:	0800b928 	.word	0x0800b928
 800aa40:	0800b8e8 	.word	0x0800b8e8

0800aa44 <abort>:
 800aa44:	2006      	movs	r0, #6
 800aa46:	b508      	push	{r3, lr}
 800aa48:	f000 fa9e 	bl	800af88 <raise>
 800aa4c:	2001      	movs	r0, #1
 800aa4e:	f7f7 f915 	bl	8001c7c <_exit>
	...

0800aa54 <__sflush_r>:
 800aa54:	898a      	ldrh	r2, [r1, #12]
 800aa56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa58:	4605      	mov	r5, r0
 800aa5a:	0710      	lsls	r0, r2, #28
 800aa5c:	460c      	mov	r4, r1
 800aa5e:	d457      	bmi.n	800ab10 <__sflush_r+0xbc>
 800aa60:	684b      	ldr	r3, [r1, #4]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	dc04      	bgt.n	800aa70 <__sflush_r+0x1c>
 800aa66:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	dc01      	bgt.n	800aa70 <__sflush_r+0x1c>
 800aa6c:	2000      	movs	r0, #0
 800aa6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aa72:	2e00      	cmp	r6, #0
 800aa74:	d0fa      	beq.n	800aa6c <__sflush_r+0x18>
 800aa76:	2300      	movs	r3, #0
 800aa78:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800aa7c:	682f      	ldr	r7, [r5, #0]
 800aa7e:	602b      	str	r3, [r5, #0]
 800aa80:	d032      	beq.n	800aae8 <__sflush_r+0x94>
 800aa82:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800aa84:	89a3      	ldrh	r3, [r4, #12]
 800aa86:	075a      	lsls	r2, r3, #29
 800aa88:	d505      	bpl.n	800aa96 <__sflush_r+0x42>
 800aa8a:	6863      	ldr	r3, [r4, #4]
 800aa8c:	1ac0      	subs	r0, r0, r3
 800aa8e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800aa90:	b10b      	cbz	r3, 800aa96 <__sflush_r+0x42>
 800aa92:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800aa94:	1ac0      	subs	r0, r0, r3
 800aa96:	2300      	movs	r3, #0
 800aa98:	4602      	mov	r2, r0
 800aa9a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aa9c:	4628      	mov	r0, r5
 800aa9e:	6a21      	ldr	r1, [r4, #32]
 800aaa0:	47b0      	blx	r6
 800aaa2:	1c43      	adds	r3, r0, #1
 800aaa4:	89a3      	ldrh	r3, [r4, #12]
 800aaa6:	d106      	bne.n	800aab6 <__sflush_r+0x62>
 800aaa8:	6829      	ldr	r1, [r5, #0]
 800aaaa:	291d      	cmp	r1, #29
 800aaac:	d82c      	bhi.n	800ab08 <__sflush_r+0xb4>
 800aaae:	4a29      	ldr	r2, [pc, #164]	; (800ab54 <__sflush_r+0x100>)
 800aab0:	40ca      	lsrs	r2, r1
 800aab2:	07d6      	lsls	r6, r2, #31
 800aab4:	d528      	bpl.n	800ab08 <__sflush_r+0xb4>
 800aab6:	2200      	movs	r2, #0
 800aab8:	6062      	str	r2, [r4, #4]
 800aaba:	6922      	ldr	r2, [r4, #16]
 800aabc:	04d9      	lsls	r1, r3, #19
 800aabe:	6022      	str	r2, [r4, #0]
 800aac0:	d504      	bpl.n	800aacc <__sflush_r+0x78>
 800aac2:	1c42      	adds	r2, r0, #1
 800aac4:	d101      	bne.n	800aaca <__sflush_r+0x76>
 800aac6:	682b      	ldr	r3, [r5, #0]
 800aac8:	b903      	cbnz	r3, 800aacc <__sflush_r+0x78>
 800aaca:	6560      	str	r0, [r4, #84]	; 0x54
 800aacc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aace:	602f      	str	r7, [r5, #0]
 800aad0:	2900      	cmp	r1, #0
 800aad2:	d0cb      	beq.n	800aa6c <__sflush_r+0x18>
 800aad4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aad8:	4299      	cmp	r1, r3
 800aada:	d002      	beq.n	800aae2 <__sflush_r+0x8e>
 800aadc:	4628      	mov	r0, r5
 800aade:	f7ff fb29 	bl	800a134 <_free_r>
 800aae2:	2000      	movs	r0, #0
 800aae4:	6360      	str	r0, [r4, #52]	; 0x34
 800aae6:	e7c2      	b.n	800aa6e <__sflush_r+0x1a>
 800aae8:	6a21      	ldr	r1, [r4, #32]
 800aaea:	2301      	movs	r3, #1
 800aaec:	4628      	mov	r0, r5
 800aaee:	47b0      	blx	r6
 800aaf0:	1c41      	adds	r1, r0, #1
 800aaf2:	d1c7      	bne.n	800aa84 <__sflush_r+0x30>
 800aaf4:	682b      	ldr	r3, [r5, #0]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d0c4      	beq.n	800aa84 <__sflush_r+0x30>
 800aafa:	2b1d      	cmp	r3, #29
 800aafc:	d001      	beq.n	800ab02 <__sflush_r+0xae>
 800aafe:	2b16      	cmp	r3, #22
 800ab00:	d101      	bne.n	800ab06 <__sflush_r+0xb2>
 800ab02:	602f      	str	r7, [r5, #0]
 800ab04:	e7b2      	b.n	800aa6c <__sflush_r+0x18>
 800ab06:	89a3      	ldrh	r3, [r4, #12]
 800ab08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab0c:	81a3      	strh	r3, [r4, #12]
 800ab0e:	e7ae      	b.n	800aa6e <__sflush_r+0x1a>
 800ab10:	690f      	ldr	r7, [r1, #16]
 800ab12:	2f00      	cmp	r7, #0
 800ab14:	d0aa      	beq.n	800aa6c <__sflush_r+0x18>
 800ab16:	0793      	lsls	r3, r2, #30
 800ab18:	bf18      	it	ne
 800ab1a:	2300      	movne	r3, #0
 800ab1c:	680e      	ldr	r6, [r1, #0]
 800ab1e:	bf08      	it	eq
 800ab20:	694b      	ldreq	r3, [r1, #20]
 800ab22:	1bf6      	subs	r6, r6, r7
 800ab24:	600f      	str	r7, [r1, #0]
 800ab26:	608b      	str	r3, [r1, #8]
 800ab28:	2e00      	cmp	r6, #0
 800ab2a:	dd9f      	ble.n	800aa6c <__sflush_r+0x18>
 800ab2c:	4633      	mov	r3, r6
 800ab2e:	463a      	mov	r2, r7
 800ab30:	4628      	mov	r0, r5
 800ab32:	6a21      	ldr	r1, [r4, #32]
 800ab34:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800ab38:	47e0      	blx	ip
 800ab3a:	2800      	cmp	r0, #0
 800ab3c:	dc06      	bgt.n	800ab4c <__sflush_r+0xf8>
 800ab3e:	89a3      	ldrh	r3, [r4, #12]
 800ab40:	f04f 30ff 	mov.w	r0, #4294967295
 800ab44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab48:	81a3      	strh	r3, [r4, #12]
 800ab4a:	e790      	b.n	800aa6e <__sflush_r+0x1a>
 800ab4c:	4407      	add	r7, r0
 800ab4e:	1a36      	subs	r6, r6, r0
 800ab50:	e7ea      	b.n	800ab28 <__sflush_r+0xd4>
 800ab52:	bf00      	nop
 800ab54:	20400001 	.word	0x20400001

0800ab58 <_fflush_r>:
 800ab58:	b538      	push	{r3, r4, r5, lr}
 800ab5a:	690b      	ldr	r3, [r1, #16]
 800ab5c:	4605      	mov	r5, r0
 800ab5e:	460c      	mov	r4, r1
 800ab60:	b913      	cbnz	r3, 800ab68 <_fflush_r+0x10>
 800ab62:	2500      	movs	r5, #0
 800ab64:	4628      	mov	r0, r5
 800ab66:	bd38      	pop	{r3, r4, r5, pc}
 800ab68:	b118      	cbz	r0, 800ab72 <_fflush_r+0x1a>
 800ab6a:	6983      	ldr	r3, [r0, #24]
 800ab6c:	b90b      	cbnz	r3, 800ab72 <_fflush_r+0x1a>
 800ab6e:	f000 f887 	bl	800ac80 <__sinit>
 800ab72:	4b14      	ldr	r3, [pc, #80]	; (800abc4 <_fflush_r+0x6c>)
 800ab74:	429c      	cmp	r4, r3
 800ab76:	d11b      	bne.n	800abb0 <_fflush_r+0x58>
 800ab78:	686c      	ldr	r4, [r5, #4]
 800ab7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d0ef      	beq.n	800ab62 <_fflush_r+0xa>
 800ab82:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ab84:	07d0      	lsls	r0, r2, #31
 800ab86:	d404      	bmi.n	800ab92 <_fflush_r+0x3a>
 800ab88:	0599      	lsls	r1, r3, #22
 800ab8a:	d402      	bmi.n	800ab92 <_fflush_r+0x3a>
 800ab8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ab8e:	f000 f915 	bl	800adbc <__retarget_lock_acquire_recursive>
 800ab92:	4628      	mov	r0, r5
 800ab94:	4621      	mov	r1, r4
 800ab96:	f7ff ff5d 	bl	800aa54 <__sflush_r>
 800ab9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ab9c:	4605      	mov	r5, r0
 800ab9e:	07da      	lsls	r2, r3, #31
 800aba0:	d4e0      	bmi.n	800ab64 <_fflush_r+0xc>
 800aba2:	89a3      	ldrh	r3, [r4, #12]
 800aba4:	059b      	lsls	r3, r3, #22
 800aba6:	d4dd      	bmi.n	800ab64 <_fflush_r+0xc>
 800aba8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800abaa:	f000 f908 	bl	800adbe <__retarget_lock_release_recursive>
 800abae:	e7d9      	b.n	800ab64 <_fflush_r+0xc>
 800abb0:	4b05      	ldr	r3, [pc, #20]	; (800abc8 <_fflush_r+0x70>)
 800abb2:	429c      	cmp	r4, r3
 800abb4:	d101      	bne.n	800abba <_fflush_r+0x62>
 800abb6:	68ac      	ldr	r4, [r5, #8]
 800abb8:	e7df      	b.n	800ab7a <_fflush_r+0x22>
 800abba:	4b04      	ldr	r3, [pc, #16]	; (800abcc <_fflush_r+0x74>)
 800abbc:	429c      	cmp	r4, r3
 800abbe:	bf08      	it	eq
 800abc0:	68ec      	ldreq	r4, [r5, #12]
 800abc2:	e7da      	b.n	800ab7a <_fflush_r+0x22>
 800abc4:	0800b908 	.word	0x0800b908
 800abc8:	0800b928 	.word	0x0800b928
 800abcc:	0800b8e8 	.word	0x0800b8e8

0800abd0 <std>:
 800abd0:	2300      	movs	r3, #0
 800abd2:	b510      	push	{r4, lr}
 800abd4:	4604      	mov	r4, r0
 800abd6:	e9c0 3300 	strd	r3, r3, [r0]
 800abda:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800abde:	6083      	str	r3, [r0, #8]
 800abe0:	8181      	strh	r1, [r0, #12]
 800abe2:	6643      	str	r3, [r0, #100]	; 0x64
 800abe4:	81c2      	strh	r2, [r0, #14]
 800abe6:	6183      	str	r3, [r0, #24]
 800abe8:	4619      	mov	r1, r3
 800abea:	2208      	movs	r2, #8
 800abec:	305c      	adds	r0, #92	; 0x5c
 800abee:	f7fc f803 	bl	8006bf8 <memset>
 800abf2:	4b05      	ldr	r3, [pc, #20]	; (800ac08 <std+0x38>)
 800abf4:	6224      	str	r4, [r4, #32]
 800abf6:	6263      	str	r3, [r4, #36]	; 0x24
 800abf8:	4b04      	ldr	r3, [pc, #16]	; (800ac0c <std+0x3c>)
 800abfa:	62a3      	str	r3, [r4, #40]	; 0x28
 800abfc:	4b04      	ldr	r3, [pc, #16]	; (800ac10 <std+0x40>)
 800abfe:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ac00:	4b04      	ldr	r3, [pc, #16]	; (800ac14 <std+0x44>)
 800ac02:	6323      	str	r3, [r4, #48]	; 0x30
 800ac04:	bd10      	pop	{r4, pc}
 800ac06:	bf00      	nop
 800ac08:	0800afc1 	.word	0x0800afc1
 800ac0c:	0800afe3 	.word	0x0800afe3
 800ac10:	0800b01b 	.word	0x0800b01b
 800ac14:	0800b03f 	.word	0x0800b03f

0800ac18 <_cleanup_r>:
 800ac18:	4901      	ldr	r1, [pc, #4]	; (800ac20 <_cleanup_r+0x8>)
 800ac1a:	f000 b8af 	b.w	800ad7c <_fwalk_reent>
 800ac1e:	bf00      	nop
 800ac20:	0800ab59 	.word	0x0800ab59

0800ac24 <__sfmoreglue>:
 800ac24:	2268      	movs	r2, #104	; 0x68
 800ac26:	b570      	push	{r4, r5, r6, lr}
 800ac28:	1e4d      	subs	r5, r1, #1
 800ac2a:	4355      	muls	r5, r2
 800ac2c:	460e      	mov	r6, r1
 800ac2e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ac32:	f7ff fae7 	bl	800a204 <_malloc_r>
 800ac36:	4604      	mov	r4, r0
 800ac38:	b140      	cbz	r0, 800ac4c <__sfmoreglue+0x28>
 800ac3a:	2100      	movs	r1, #0
 800ac3c:	e9c0 1600 	strd	r1, r6, [r0]
 800ac40:	300c      	adds	r0, #12
 800ac42:	60a0      	str	r0, [r4, #8]
 800ac44:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ac48:	f7fb ffd6 	bl	8006bf8 <memset>
 800ac4c:	4620      	mov	r0, r4
 800ac4e:	bd70      	pop	{r4, r5, r6, pc}

0800ac50 <__sfp_lock_acquire>:
 800ac50:	4801      	ldr	r0, [pc, #4]	; (800ac58 <__sfp_lock_acquire+0x8>)
 800ac52:	f000 b8b3 	b.w	800adbc <__retarget_lock_acquire_recursive>
 800ac56:	bf00      	nop
 800ac58:	20002605 	.word	0x20002605

0800ac5c <__sfp_lock_release>:
 800ac5c:	4801      	ldr	r0, [pc, #4]	; (800ac64 <__sfp_lock_release+0x8>)
 800ac5e:	f000 b8ae 	b.w	800adbe <__retarget_lock_release_recursive>
 800ac62:	bf00      	nop
 800ac64:	20002605 	.word	0x20002605

0800ac68 <__sinit_lock_acquire>:
 800ac68:	4801      	ldr	r0, [pc, #4]	; (800ac70 <__sinit_lock_acquire+0x8>)
 800ac6a:	f000 b8a7 	b.w	800adbc <__retarget_lock_acquire_recursive>
 800ac6e:	bf00      	nop
 800ac70:	20002606 	.word	0x20002606

0800ac74 <__sinit_lock_release>:
 800ac74:	4801      	ldr	r0, [pc, #4]	; (800ac7c <__sinit_lock_release+0x8>)
 800ac76:	f000 b8a2 	b.w	800adbe <__retarget_lock_release_recursive>
 800ac7a:	bf00      	nop
 800ac7c:	20002606 	.word	0x20002606

0800ac80 <__sinit>:
 800ac80:	b510      	push	{r4, lr}
 800ac82:	4604      	mov	r4, r0
 800ac84:	f7ff fff0 	bl	800ac68 <__sinit_lock_acquire>
 800ac88:	69a3      	ldr	r3, [r4, #24]
 800ac8a:	b11b      	cbz	r3, 800ac94 <__sinit+0x14>
 800ac8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac90:	f7ff bff0 	b.w	800ac74 <__sinit_lock_release>
 800ac94:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ac98:	6523      	str	r3, [r4, #80]	; 0x50
 800ac9a:	4b13      	ldr	r3, [pc, #76]	; (800ace8 <__sinit+0x68>)
 800ac9c:	4a13      	ldr	r2, [pc, #76]	; (800acec <__sinit+0x6c>)
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	62a2      	str	r2, [r4, #40]	; 0x28
 800aca2:	42a3      	cmp	r3, r4
 800aca4:	bf08      	it	eq
 800aca6:	2301      	moveq	r3, #1
 800aca8:	4620      	mov	r0, r4
 800acaa:	bf08      	it	eq
 800acac:	61a3      	streq	r3, [r4, #24]
 800acae:	f000 f81f 	bl	800acf0 <__sfp>
 800acb2:	6060      	str	r0, [r4, #4]
 800acb4:	4620      	mov	r0, r4
 800acb6:	f000 f81b 	bl	800acf0 <__sfp>
 800acba:	60a0      	str	r0, [r4, #8]
 800acbc:	4620      	mov	r0, r4
 800acbe:	f000 f817 	bl	800acf0 <__sfp>
 800acc2:	2200      	movs	r2, #0
 800acc4:	2104      	movs	r1, #4
 800acc6:	60e0      	str	r0, [r4, #12]
 800acc8:	6860      	ldr	r0, [r4, #4]
 800acca:	f7ff ff81 	bl	800abd0 <std>
 800acce:	2201      	movs	r2, #1
 800acd0:	2109      	movs	r1, #9
 800acd2:	68a0      	ldr	r0, [r4, #8]
 800acd4:	f7ff ff7c 	bl	800abd0 <std>
 800acd8:	2202      	movs	r2, #2
 800acda:	2112      	movs	r1, #18
 800acdc:	68e0      	ldr	r0, [r4, #12]
 800acde:	f7ff ff77 	bl	800abd0 <std>
 800ace2:	2301      	movs	r3, #1
 800ace4:	61a3      	str	r3, [r4, #24]
 800ace6:	e7d1      	b.n	800ac8c <__sinit+0xc>
 800ace8:	0800b44c 	.word	0x0800b44c
 800acec:	0800ac19 	.word	0x0800ac19

0800acf0 <__sfp>:
 800acf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acf2:	4607      	mov	r7, r0
 800acf4:	f7ff ffac 	bl	800ac50 <__sfp_lock_acquire>
 800acf8:	4b1e      	ldr	r3, [pc, #120]	; (800ad74 <__sfp+0x84>)
 800acfa:	681e      	ldr	r6, [r3, #0]
 800acfc:	69b3      	ldr	r3, [r6, #24]
 800acfe:	b913      	cbnz	r3, 800ad06 <__sfp+0x16>
 800ad00:	4630      	mov	r0, r6
 800ad02:	f7ff ffbd 	bl	800ac80 <__sinit>
 800ad06:	3648      	adds	r6, #72	; 0x48
 800ad08:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ad0c:	3b01      	subs	r3, #1
 800ad0e:	d503      	bpl.n	800ad18 <__sfp+0x28>
 800ad10:	6833      	ldr	r3, [r6, #0]
 800ad12:	b30b      	cbz	r3, 800ad58 <__sfp+0x68>
 800ad14:	6836      	ldr	r6, [r6, #0]
 800ad16:	e7f7      	b.n	800ad08 <__sfp+0x18>
 800ad18:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ad1c:	b9d5      	cbnz	r5, 800ad54 <__sfp+0x64>
 800ad1e:	4b16      	ldr	r3, [pc, #88]	; (800ad78 <__sfp+0x88>)
 800ad20:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ad24:	60e3      	str	r3, [r4, #12]
 800ad26:	6665      	str	r5, [r4, #100]	; 0x64
 800ad28:	f000 f847 	bl	800adba <__retarget_lock_init_recursive>
 800ad2c:	f7ff ff96 	bl	800ac5c <__sfp_lock_release>
 800ad30:	2208      	movs	r2, #8
 800ad32:	4629      	mov	r1, r5
 800ad34:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ad38:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ad3c:	6025      	str	r5, [r4, #0]
 800ad3e:	61a5      	str	r5, [r4, #24]
 800ad40:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ad44:	f7fb ff58 	bl	8006bf8 <memset>
 800ad48:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ad4c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ad50:	4620      	mov	r0, r4
 800ad52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad54:	3468      	adds	r4, #104	; 0x68
 800ad56:	e7d9      	b.n	800ad0c <__sfp+0x1c>
 800ad58:	2104      	movs	r1, #4
 800ad5a:	4638      	mov	r0, r7
 800ad5c:	f7ff ff62 	bl	800ac24 <__sfmoreglue>
 800ad60:	4604      	mov	r4, r0
 800ad62:	6030      	str	r0, [r6, #0]
 800ad64:	2800      	cmp	r0, #0
 800ad66:	d1d5      	bne.n	800ad14 <__sfp+0x24>
 800ad68:	f7ff ff78 	bl	800ac5c <__sfp_lock_release>
 800ad6c:	230c      	movs	r3, #12
 800ad6e:	603b      	str	r3, [r7, #0]
 800ad70:	e7ee      	b.n	800ad50 <__sfp+0x60>
 800ad72:	bf00      	nop
 800ad74:	0800b44c 	.word	0x0800b44c
 800ad78:	ffff0001 	.word	0xffff0001

0800ad7c <_fwalk_reent>:
 800ad7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad80:	4606      	mov	r6, r0
 800ad82:	4688      	mov	r8, r1
 800ad84:	2700      	movs	r7, #0
 800ad86:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ad8a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ad8e:	f1b9 0901 	subs.w	r9, r9, #1
 800ad92:	d505      	bpl.n	800ada0 <_fwalk_reent+0x24>
 800ad94:	6824      	ldr	r4, [r4, #0]
 800ad96:	2c00      	cmp	r4, #0
 800ad98:	d1f7      	bne.n	800ad8a <_fwalk_reent+0xe>
 800ad9a:	4638      	mov	r0, r7
 800ad9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ada0:	89ab      	ldrh	r3, [r5, #12]
 800ada2:	2b01      	cmp	r3, #1
 800ada4:	d907      	bls.n	800adb6 <_fwalk_reent+0x3a>
 800ada6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800adaa:	3301      	adds	r3, #1
 800adac:	d003      	beq.n	800adb6 <_fwalk_reent+0x3a>
 800adae:	4629      	mov	r1, r5
 800adb0:	4630      	mov	r0, r6
 800adb2:	47c0      	blx	r8
 800adb4:	4307      	orrs	r7, r0
 800adb6:	3568      	adds	r5, #104	; 0x68
 800adb8:	e7e9      	b.n	800ad8e <_fwalk_reent+0x12>

0800adba <__retarget_lock_init_recursive>:
 800adba:	4770      	bx	lr

0800adbc <__retarget_lock_acquire_recursive>:
 800adbc:	4770      	bx	lr

0800adbe <__retarget_lock_release_recursive>:
 800adbe:	4770      	bx	lr

0800adc0 <__swhatbuf_r>:
 800adc0:	b570      	push	{r4, r5, r6, lr}
 800adc2:	460e      	mov	r6, r1
 800adc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800adc8:	4614      	mov	r4, r2
 800adca:	2900      	cmp	r1, #0
 800adcc:	461d      	mov	r5, r3
 800adce:	b096      	sub	sp, #88	; 0x58
 800add0:	da08      	bge.n	800ade4 <__swhatbuf_r+0x24>
 800add2:	2200      	movs	r2, #0
 800add4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800add8:	602a      	str	r2, [r5, #0]
 800adda:	061a      	lsls	r2, r3, #24
 800addc:	d410      	bmi.n	800ae00 <__swhatbuf_r+0x40>
 800adde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ade2:	e00e      	b.n	800ae02 <__swhatbuf_r+0x42>
 800ade4:	466a      	mov	r2, sp
 800ade6:	f000 f951 	bl	800b08c <_fstat_r>
 800adea:	2800      	cmp	r0, #0
 800adec:	dbf1      	blt.n	800add2 <__swhatbuf_r+0x12>
 800adee:	9a01      	ldr	r2, [sp, #4]
 800adf0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800adf4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800adf8:	425a      	negs	r2, r3
 800adfa:	415a      	adcs	r2, r3
 800adfc:	602a      	str	r2, [r5, #0]
 800adfe:	e7ee      	b.n	800adde <__swhatbuf_r+0x1e>
 800ae00:	2340      	movs	r3, #64	; 0x40
 800ae02:	2000      	movs	r0, #0
 800ae04:	6023      	str	r3, [r4, #0]
 800ae06:	b016      	add	sp, #88	; 0x58
 800ae08:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ae0c <__smakebuf_r>:
 800ae0c:	898b      	ldrh	r3, [r1, #12]
 800ae0e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ae10:	079d      	lsls	r5, r3, #30
 800ae12:	4606      	mov	r6, r0
 800ae14:	460c      	mov	r4, r1
 800ae16:	d507      	bpl.n	800ae28 <__smakebuf_r+0x1c>
 800ae18:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ae1c:	6023      	str	r3, [r4, #0]
 800ae1e:	6123      	str	r3, [r4, #16]
 800ae20:	2301      	movs	r3, #1
 800ae22:	6163      	str	r3, [r4, #20]
 800ae24:	b002      	add	sp, #8
 800ae26:	bd70      	pop	{r4, r5, r6, pc}
 800ae28:	466a      	mov	r2, sp
 800ae2a:	ab01      	add	r3, sp, #4
 800ae2c:	f7ff ffc8 	bl	800adc0 <__swhatbuf_r>
 800ae30:	9900      	ldr	r1, [sp, #0]
 800ae32:	4605      	mov	r5, r0
 800ae34:	4630      	mov	r0, r6
 800ae36:	f7ff f9e5 	bl	800a204 <_malloc_r>
 800ae3a:	b948      	cbnz	r0, 800ae50 <__smakebuf_r+0x44>
 800ae3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae40:	059a      	lsls	r2, r3, #22
 800ae42:	d4ef      	bmi.n	800ae24 <__smakebuf_r+0x18>
 800ae44:	f023 0303 	bic.w	r3, r3, #3
 800ae48:	f043 0302 	orr.w	r3, r3, #2
 800ae4c:	81a3      	strh	r3, [r4, #12]
 800ae4e:	e7e3      	b.n	800ae18 <__smakebuf_r+0xc>
 800ae50:	4b0d      	ldr	r3, [pc, #52]	; (800ae88 <__smakebuf_r+0x7c>)
 800ae52:	62b3      	str	r3, [r6, #40]	; 0x28
 800ae54:	89a3      	ldrh	r3, [r4, #12]
 800ae56:	6020      	str	r0, [r4, #0]
 800ae58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae5c:	81a3      	strh	r3, [r4, #12]
 800ae5e:	9b00      	ldr	r3, [sp, #0]
 800ae60:	6120      	str	r0, [r4, #16]
 800ae62:	6163      	str	r3, [r4, #20]
 800ae64:	9b01      	ldr	r3, [sp, #4]
 800ae66:	b15b      	cbz	r3, 800ae80 <__smakebuf_r+0x74>
 800ae68:	4630      	mov	r0, r6
 800ae6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae6e:	f000 f91f 	bl	800b0b0 <_isatty_r>
 800ae72:	b128      	cbz	r0, 800ae80 <__smakebuf_r+0x74>
 800ae74:	89a3      	ldrh	r3, [r4, #12]
 800ae76:	f023 0303 	bic.w	r3, r3, #3
 800ae7a:	f043 0301 	orr.w	r3, r3, #1
 800ae7e:	81a3      	strh	r3, [r4, #12]
 800ae80:	89a0      	ldrh	r0, [r4, #12]
 800ae82:	4305      	orrs	r5, r0
 800ae84:	81a5      	strh	r5, [r4, #12]
 800ae86:	e7cd      	b.n	800ae24 <__smakebuf_r+0x18>
 800ae88:	0800ac19 	.word	0x0800ac19

0800ae8c <memmove>:
 800ae8c:	4288      	cmp	r0, r1
 800ae8e:	b510      	push	{r4, lr}
 800ae90:	eb01 0402 	add.w	r4, r1, r2
 800ae94:	d902      	bls.n	800ae9c <memmove+0x10>
 800ae96:	4284      	cmp	r4, r0
 800ae98:	4623      	mov	r3, r4
 800ae9a:	d807      	bhi.n	800aeac <memmove+0x20>
 800ae9c:	1e43      	subs	r3, r0, #1
 800ae9e:	42a1      	cmp	r1, r4
 800aea0:	d008      	beq.n	800aeb4 <memmove+0x28>
 800aea2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aea6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aeaa:	e7f8      	b.n	800ae9e <memmove+0x12>
 800aeac:	4601      	mov	r1, r0
 800aeae:	4402      	add	r2, r0
 800aeb0:	428a      	cmp	r2, r1
 800aeb2:	d100      	bne.n	800aeb6 <memmove+0x2a>
 800aeb4:	bd10      	pop	{r4, pc}
 800aeb6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aeba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aebe:	e7f7      	b.n	800aeb0 <memmove+0x24>

0800aec0 <__malloc_lock>:
 800aec0:	4801      	ldr	r0, [pc, #4]	; (800aec8 <__malloc_lock+0x8>)
 800aec2:	f7ff bf7b 	b.w	800adbc <__retarget_lock_acquire_recursive>
 800aec6:	bf00      	nop
 800aec8:	20002604 	.word	0x20002604

0800aecc <__malloc_unlock>:
 800aecc:	4801      	ldr	r0, [pc, #4]	; (800aed4 <__malloc_unlock+0x8>)
 800aece:	f7ff bf76 	b.w	800adbe <__retarget_lock_release_recursive>
 800aed2:	bf00      	nop
 800aed4:	20002604 	.word	0x20002604

0800aed8 <_realloc_r>:
 800aed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aedc:	4680      	mov	r8, r0
 800aede:	4614      	mov	r4, r2
 800aee0:	460e      	mov	r6, r1
 800aee2:	b921      	cbnz	r1, 800aeee <_realloc_r+0x16>
 800aee4:	4611      	mov	r1, r2
 800aee6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aeea:	f7ff b98b 	b.w	800a204 <_malloc_r>
 800aeee:	b92a      	cbnz	r2, 800aefc <_realloc_r+0x24>
 800aef0:	f7ff f920 	bl	800a134 <_free_r>
 800aef4:	4625      	mov	r5, r4
 800aef6:	4628      	mov	r0, r5
 800aef8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aefc:	f000 f8fa 	bl	800b0f4 <_malloc_usable_size_r>
 800af00:	4284      	cmp	r4, r0
 800af02:	4607      	mov	r7, r0
 800af04:	d802      	bhi.n	800af0c <_realloc_r+0x34>
 800af06:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800af0a:	d812      	bhi.n	800af32 <_realloc_r+0x5a>
 800af0c:	4621      	mov	r1, r4
 800af0e:	4640      	mov	r0, r8
 800af10:	f7ff f978 	bl	800a204 <_malloc_r>
 800af14:	4605      	mov	r5, r0
 800af16:	2800      	cmp	r0, #0
 800af18:	d0ed      	beq.n	800aef6 <_realloc_r+0x1e>
 800af1a:	42bc      	cmp	r4, r7
 800af1c:	4622      	mov	r2, r4
 800af1e:	4631      	mov	r1, r6
 800af20:	bf28      	it	cs
 800af22:	463a      	movcs	r2, r7
 800af24:	f7fb fe5a 	bl	8006bdc <memcpy>
 800af28:	4631      	mov	r1, r6
 800af2a:	4640      	mov	r0, r8
 800af2c:	f7ff f902 	bl	800a134 <_free_r>
 800af30:	e7e1      	b.n	800aef6 <_realloc_r+0x1e>
 800af32:	4635      	mov	r5, r6
 800af34:	e7df      	b.n	800aef6 <_realloc_r+0x1e>

0800af36 <_raise_r>:
 800af36:	291f      	cmp	r1, #31
 800af38:	b538      	push	{r3, r4, r5, lr}
 800af3a:	4604      	mov	r4, r0
 800af3c:	460d      	mov	r5, r1
 800af3e:	d904      	bls.n	800af4a <_raise_r+0x14>
 800af40:	2316      	movs	r3, #22
 800af42:	6003      	str	r3, [r0, #0]
 800af44:	f04f 30ff 	mov.w	r0, #4294967295
 800af48:	bd38      	pop	{r3, r4, r5, pc}
 800af4a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800af4c:	b112      	cbz	r2, 800af54 <_raise_r+0x1e>
 800af4e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800af52:	b94b      	cbnz	r3, 800af68 <_raise_r+0x32>
 800af54:	4620      	mov	r0, r4
 800af56:	f000 f831 	bl	800afbc <_getpid_r>
 800af5a:	462a      	mov	r2, r5
 800af5c:	4601      	mov	r1, r0
 800af5e:	4620      	mov	r0, r4
 800af60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800af64:	f000 b818 	b.w	800af98 <_kill_r>
 800af68:	2b01      	cmp	r3, #1
 800af6a:	d00a      	beq.n	800af82 <_raise_r+0x4c>
 800af6c:	1c59      	adds	r1, r3, #1
 800af6e:	d103      	bne.n	800af78 <_raise_r+0x42>
 800af70:	2316      	movs	r3, #22
 800af72:	6003      	str	r3, [r0, #0]
 800af74:	2001      	movs	r0, #1
 800af76:	e7e7      	b.n	800af48 <_raise_r+0x12>
 800af78:	2400      	movs	r4, #0
 800af7a:	4628      	mov	r0, r5
 800af7c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800af80:	4798      	blx	r3
 800af82:	2000      	movs	r0, #0
 800af84:	e7e0      	b.n	800af48 <_raise_r+0x12>
	...

0800af88 <raise>:
 800af88:	4b02      	ldr	r3, [pc, #8]	; (800af94 <raise+0xc>)
 800af8a:	4601      	mov	r1, r0
 800af8c:	6818      	ldr	r0, [r3, #0]
 800af8e:	f7ff bfd2 	b.w	800af36 <_raise_r>
 800af92:	bf00      	nop
 800af94:	20000190 	.word	0x20000190

0800af98 <_kill_r>:
 800af98:	b538      	push	{r3, r4, r5, lr}
 800af9a:	2300      	movs	r3, #0
 800af9c:	4d06      	ldr	r5, [pc, #24]	; (800afb8 <_kill_r+0x20>)
 800af9e:	4604      	mov	r4, r0
 800afa0:	4608      	mov	r0, r1
 800afa2:	4611      	mov	r1, r2
 800afa4:	602b      	str	r3, [r5, #0]
 800afa6:	f7f6 fe61 	bl	8001c6c <_kill>
 800afaa:	1c43      	adds	r3, r0, #1
 800afac:	d102      	bne.n	800afb4 <_kill_r+0x1c>
 800afae:	682b      	ldr	r3, [r5, #0]
 800afb0:	b103      	cbz	r3, 800afb4 <_kill_r+0x1c>
 800afb2:	6023      	str	r3, [r4, #0]
 800afb4:	bd38      	pop	{r3, r4, r5, pc}
 800afb6:	bf00      	nop
 800afb8:	20002608 	.word	0x20002608

0800afbc <_getpid_r>:
 800afbc:	f7f6 be54 	b.w	8001c68 <_getpid>

0800afc0 <__sread>:
 800afc0:	b510      	push	{r4, lr}
 800afc2:	460c      	mov	r4, r1
 800afc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afc8:	f000 f89c 	bl	800b104 <_read_r>
 800afcc:	2800      	cmp	r0, #0
 800afce:	bfab      	itete	ge
 800afd0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800afd2:	89a3      	ldrhlt	r3, [r4, #12]
 800afd4:	181b      	addge	r3, r3, r0
 800afd6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800afda:	bfac      	ite	ge
 800afdc:	6563      	strge	r3, [r4, #84]	; 0x54
 800afde:	81a3      	strhlt	r3, [r4, #12]
 800afe0:	bd10      	pop	{r4, pc}

0800afe2 <__swrite>:
 800afe2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afe6:	461f      	mov	r7, r3
 800afe8:	898b      	ldrh	r3, [r1, #12]
 800afea:	4605      	mov	r5, r0
 800afec:	05db      	lsls	r3, r3, #23
 800afee:	460c      	mov	r4, r1
 800aff0:	4616      	mov	r6, r2
 800aff2:	d505      	bpl.n	800b000 <__swrite+0x1e>
 800aff4:	2302      	movs	r3, #2
 800aff6:	2200      	movs	r2, #0
 800aff8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800affc:	f000 f868 	bl	800b0d0 <_lseek_r>
 800b000:	89a3      	ldrh	r3, [r4, #12]
 800b002:	4632      	mov	r2, r6
 800b004:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b008:	81a3      	strh	r3, [r4, #12]
 800b00a:	4628      	mov	r0, r5
 800b00c:	463b      	mov	r3, r7
 800b00e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b012:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b016:	f000 b817 	b.w	800b048 <_write_r>

0800b01a <__sseek>:
 800b01a:	b510      	push	{r4, lr}
 800b01c:	460c      	mov	r4, r1
 800b01e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b022:	f000 f855 	bl	800b0d0 <_lseek_r>
 800b026:	1c43      	adds	r3, r0, #1
 800b028:	89a3      	ldrh	r3, [r4, #12]
 800b02a:	bf15      	itete	ne
 800b02c:	6560      	strne	r0, [r4, #84]	; 0x54
 800b02e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b032:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b036:	81a3      	strheq	r3, [r4, #12]
 800b038:	bf18      	it	ne
 800b03a:	81a3      	strhne	r3, [r4, #12]
 800b03c:	bd10      	pop	{r4, pc}

0800b03e <__sclose>:
 800b03e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b042:	f000 b813 	b.w	800b06c <_close_r>
	...

0800b048 <_write_r>:
 800b048:	b538      	push	{r3, r4, r5, lr}
 800b04a:	4604      	mov	r4, r0
 800b04c:	4608      	mov	r0, r1
 800b04e:	4611      	mov	r1, r2
 800b050:	2200      	movs	r2, #0
 800b052:	4d05      	ldr	r5, [pc, #20]	; (800b068 <_write_r+0x20>)
 800b054:	602a      	str	r2, [r5, #0]
 800b056:	461a      	mov	r2, r3
 800b058:	f7f6 fe23 	bl	8001ca2 <_write>
 800b05c:	1c43      	adds	r3, r0, #1
 800b05e:	d102      	bne.n	800b066 <_write_r+0x1e>
 800b060:	682b      	ldr	r3, [r5, #0]
 800b062:	b103      	cbz	r3, 800b066 <_write_r+0x1e>
 800b064:	6023      	str	r3, [r4, #0]
 800b066:	bd38      	pop	{r3, r4, r5, pc}
 800b068:	20002608 	.word	0x20002608

0800b06c <_close_r>:
 800b06c:	b538      	push	{r3, r4, r5, lr}
 800b06e:	2300      	movs	r3, #0
 800b070:	4d05      	ldr	r5, [pc, #20]	; (800b088 <_close_r+0x1c>)
 800b072:	4604      	mov	r4, r0
 800b074:	4608      	mov	r0, r1
 800b076:	602b      	str	r3, [r5, #0]
 800b078:	f7f6 fe20 	bl	8001cbc <_close>
 800b07c:	1c43      	adds	r3, r0, #1
 800b07e:	d102      	bne.n	800b086 <_close_r+0x1a>
 800b080:	682b      	ldr	r3, [r5, #0]
 800b082:	b103      	cbz	r3, 800b086 <_close_r+0x1a>
 800b084:	6023      	str	r3, [r4, #0]
 800b086:	bd38      	pop	{r3, r4, r5, pc}
 800b088:	20002608 	.word	0x20002608

0800b08c <_fstat_r>:
 800b08c:	b538      	push	{r3, r4, r5, lr}
 800b08e:	2300      	movs	r3, #0
 800b090:	4d06      	ldr	r5, [pc, #24]	; (800b0ac <_fstat_r+0x20>)
 800b092:	4604      	mov	r4, r0
 800b094:	4608      	mov	r0, r1
 800b096:	4611      	mov	r1, r2
 800b098:	602b      	str	r3, [r5, #0]
 800b09a:	f7f6 fe12 	bl	8001cc2 <_fstat>
 800b09e:	1c43      	adds	r3, r0, #1
 800b0a0:	d102      	bne.n	800b0a8 <_fstat_r+0x1c>
 800b0a2:	682b      	ldr	r3, [r5, #0]
 800b0a4:	b103      	cbz	r3, 800b0a8 <_fstat_r+0x1c>
 800b0a6:	6023      	str	r3, [r4, #0]
 800b0a8:	bd38      	pop	{r3, r4, r5, pc}
 800b0aa:	bf00      	nop
 800b0ac:	20002608 	.word	0x20002608

0800b0b0 <_isatty_r>:
 800b0b0:	b538      	push	{r3, r4, r5, lr}
 800b0b2:	2300      	movs	r3, #0
 800b0b4:	4d05      	ldr	r5, [pc, #20]	; (800b0cc <_isatty_r+0x1c>)
 800b0b6:	4604      	mov	r4, r0
 800b0b8:	4608      	mov	r0, r1
 800b0ba:	602b      	str	r3, [r5, #0]
 800b0bc:	f7f6 fe06 	bl	8001ccc <_isatty>
 800b0c0:	1c43      	adds	r3, r0, #1
 800b0c2:	d102      	bne.n	800b0ca <_isatty_r+0x1a>
 800b0c4:	682b      	ldr	r3, [r5, #0]
 800b0c6:	b103      	cbz	r3, 800b0ca <_isatty_r+0x1a>
 800b0c8:	6023      	str	r3, [r4, #0]
 800b0ca:	bd38      	pop	{r3, r4, r5, pc}
 800b0cc:	20002608 	.word	0x20002608

0800b0d0 <_lseek_r>:
 800b0d0:	b538      	push	{r3, r4, r5, lr}
 800b0d2:	4604      	mov	r4, r0
 800b0d4:	4608      	mov	r0, r1
 800b0d6:	4611      	mov	r1, r2
 800b0d8:	2200      	movs	r2, #0
 800b0da:	4d05      	ldr	r5, [pc, #20]	; (800b0f0 <_lseek_r+0x20>)
 800b0dc:	602a      	str	r2, [r5, #0]
 800b0de:	461a      	mov	r2, r3
 800b0e0:	f7f6 fdf6 	bl	8001cd0 <_lseek>
 800b0e4:	1c43      	adds	r3, r0, #1
 800b0e6:	d102      	bne.n	800b0ee <_lseek_r+0x1e>
 800b0e8:	682b      	ldr	r3, [r5, #0]
 800b0ea:	b103      	cbz	r3, 800b0ee <_lseek_r+0x1e>
 800b0ec:	6023      	str	r3, [r4, #0]
 800b0ee:	bd38      	pop	{r3, r4, r5, pc}
 800b0f0:	20002608 	.word	0x20002608

0800b0f4 <_malloc_usable_size_r>:
 800b0f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b0f8:	1f18      	subs	r0, r3, #4
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	bfbc      	itt	lt
 800b0fe:	580b      	ldrlt	r3, [r1, r0]
 800b100:	18c0      	addlt	r0, r0, r3
 800b102:	4770      	bx	lr

0800b104 <_read_r>:
 800b104:	b538      	push	{r3, r4, r5, lr}
 800b106:	4604      	mov	r4, r0
 800b108:	4608      	mov	r0, r1
 800b10a:	4611      	mov	r1, r2
 800b10c:	2200      	movs	r2, #0
 800b10e:	4d05      	ldr	r5, [pc, #20]	; (800b124 <_read_r+0x20>)
 800b110:	602a      	str	r2, [r5, #0]
 800b112:	461a      	mov	r2, r3
 800b114:	f7f6 fdb8 	bl	8001c88 <_read>
 800b118:	1c43      	adds	r3, r0, #1
 800b11a:	d102      	bne.n	800b122 <_read_r+0x1e>
 800b11c:	682b      	ldr	r3, [r5, #0]
 800b11e:	b103      	cbz	r3, 800b122 <_read_r+0x1e>
 800b120:	6023      	str	r3, [r4, #0]
 800b122:	bd38      	pop	{r3, r4, r5, pc}
 800b124:	20002608 	.word	0x20002608

0800b128 <_init>:
 800b128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b12a:	bf00      	nop
 800b12c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b12e:	bc08      	pop	{r3}
 800b130:	469e      	mov	lr, r3
 800b132:	4770      	bx	lr

0800b134 <_fini>:
 800b134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b136:	bf00      	nop
 800b138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b13a:	bc08      	pop	{r3}
 800b13c:	469e      	mov	lr, r3
 800b13e:	4770      	bx	lr
