
Temperature_GMS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b320  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000868  0800b430  0800b430  0001b430  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bc98  0800bc98  00020364  2**0
                  CONTENTS
  4 .ARM          00000000  0800bc98  0800bc98  00020364  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bc98  0800bc98  00020364  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bc98  0800bc98  0001bc98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bc9c  0800bc9c  0001bc9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000364  20000000  0800bca0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002324  20000368  0800c004  00020368  2**3
                  ALLOC
 10 ._user_heap_stack 00001804  2000268c  0800c004  0002268c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020364  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ee5c  00000000  00000000  0002038d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005300  00000000  00000000  0003f1e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00012ec8  00000000  00000000  000444e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001658  00000000  00000000  000573b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000018b0  00000000  00000000  00058a10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001db0b  00000000  00000000  0005a2c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00024043  00000000  00000000  00077dcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009263c  00000000  00000000  0009be0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012e44a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004e34  00000000  00000000  0012e49c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000368 	.word	0x20000368
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b418 	.word	0x0800b418

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000036c 	.word	0x2000036c
 800014c:	0800b418 	.word	0x0800b418

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2uiz>:
 8000a9c:	004a      	lsls	r2, r1, #1
 8000a9e:	d211      	bcs.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d211      	bcs.n	8000aca <__aeabi_d2uiz+0x2e>
 8000aa6:	d50d      	bpl.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d40e      	bmi.n	8000ad0 <__aeabi_d2uiz+0x34>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d102      	bne.n	8000ad6 <__aeabi_d2uiz+0x3a>
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	4770      	bx	lr
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	4770      	bx	lr

08000adc <__aeabi_d2lz>:
 8000adc:	b538      	push	{r3, r4, r5, lr}
 8000ade:	4605      	mov	r5, r0
 8000ae0:	460c      	mov	r4, r1
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	4628      	mov	r0, r5
 8000ae8:	4621      	mov	r1, r4
 8000aea:	f7ff ff71 	bl	80009d0 <__aeabi_dcmplt>
 8000aee:	b928      	cbnz	r0, 8000afc <__aeabi_d2lz+0x20>
 8000af0:	4628      	mov	r0, r5
 8000af2:	4621      	mov	r1, r4
 8000af4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000af8:	f000 b80a 	b.w	8000b10 <__aeabi_d2ulz>
 8000afc:	4628      	mov	r0, r5
 8000afe:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000b02:	f000 f805 	bl	8000b10 <__aeabi_d2ulz>
 8000b06:	4240      	negs	r0, r0
 8000b08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b0c:	bd38      	pop	{r3, r4, r5, pc}
 8000b0e:	bf00      	nop

08000b10 <__aeabi_d2ulz>:
 8000b10:	b5d0      	push	{r4, r6, r7, lr}
 8000b12:	2200      	movs	r2, #0
 8000b14:	4b0b      	ldr	r3, [pc, #44]	; (8000b44 <__aeabi_d2ulz+0x34>)
 8000b16:	4606      	mov	r6, r0
 8000b18:	460f      	mov	r7, r1
 8000b1a:	f7ff fce7 	bl	80004ec <__aeabi_dmul>
 8000b1e:	f7ff ffbd 	bl	8000a9c <__aeabi_d2uiz>
 8000b22:	4604      	mov	r4, r0
 8000b24:	f7ff fc68 	bl	80003f8 <__aeabi_ui2d>
 8000b28:	2200      	movs	r2, #0
 8000b2a:	4b07      	ldr	r3, [pc, #28]	; (8000b48 <__aeabi_d2ulz+0x38>)
 8000b2c:	f7ff fcde 	bl	80004ec <__aeabi_dmul>
 8000b30:	4602      	mov	r2, r0
 8000b32:	460b      	mov	r3, r1
 8000b34:	4630      	mov	r0, r6
 8000b36:	4639      	mov	r1, r7
 8000b38:	f7ff fb20 	bl	800017c <__aeabi_dsub>
 8000b3c:	f7ff ffae 	bl	8000a9c <__aeabi_d2uiz>
 8000b40:	4621      	mov	r1, r4
 8000b42:	bdd0      	pop	{r4, r6, r7, pc}
 8000b44:	3df00000 	.word	0x3df00000
 8000b48:	41f00000 	.word	0x41f00000

08000b4c <byte_crc>:
}

static uint8_t byte_crc(uint8_t crc, uint8_t byte)
{
  int i;
  for (i = 0; i < 8; i++) {
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	e001      	b.n	8000b54 <byte_crc+0x8>
    uint8_t b = crc ^ byte;
    crc >>= 1;
    if (b & 0x01)
      crc ^= 0x8c;
    byte >>= 1;
 8000b50:	0849      	lsrs	r1, r1, #1
  for (i = 0; i < 8; i++) {
 8000b52:	3201      	adds	r2, #1
 8000b54:	2a07      	cmp	r2, #7
 8000b56:	dc0a      	bgt.n	8000b6e <byte_crc+0x22>
    uint8_t b = crc ^ byte;
 8000b58:	ea80 0301 	eor.w	r3, r0, r1
    if (b & 0x01)
 8000b5c:	f013 0f01 	tst.w	r3, #1
 8000b60:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8000b64:	d0f4      	beq.n	8000b50 <byte_crc+0x4>
      crc ^= 0x8c;
 8000b66:	f080 008c 	eor.w	r0, r0, #140	; 0x8c
 8000b6a:	b2c0      	uxtb	r0, r0
 8000b6c:	e7f0      	b.n	8000b50 <byte_crc+0x4>
  }
  return crc;
}
 8000b6e:	4770      	bx	lr

08000b70 <write_bit>:
{
 8000b70:	b500      	push	{lr}
 8000b72:	b083      	sub	sp, #12
  if (value)
 8000b74:	b168      	cbz	r0, 8000b92 <write_bit+0x22>
    uint8_t data_out = 0xff;
 8000b76:	23ff      	movs	r3, #255	; 0xff
 8000b78:	f88d 3007 	strb.w	r3, [sp, #7]
    HAL_UART_Transmit(&UART, &data_out, 1, HAL_MAX_DELAY);
 8000b7c:	f04f 33ff 	mov.w	r3, #4294967295
 8000b80:	2201      	movs	r2, #1
 8000b82:	f10d 0107 	add.w	r1, sp, #7
 8000b86:	4809      	ldr	r0, [pc, #36]	; (8000bac <write_bit+0x3c>)
 8000b88:	f003 fe66 	bl	8004858 <HAL_UART_Transmit>
}
 8000b8c:	b003      	add	sp, #12
 8000b8e:	f85d fb04 	ldr.w	pc, [sp], #4
    uint8_t data_out = 0x0;
 8000b92:	2300      	movs	r3, #0
 8000b94:	f88d 3007 	strb.w	r3, [sp, #7]
    HAL_UART_Transmit(&UART, &data_out, 1, HAL_MAX_DELAY);
 8000b98:	f04f 33ff 	mov.w	r3, #4294967295
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	f10d 0107 	add.w	r1, sp, #7
 8000ba2:	4802      	ldr	r0, [pc, #8]	; (8000bac <write_bit+0x3c>)
 8000ba4:	f003 fe58 	bl	8004858 <HAL_UART_Transmit>
}
 8000ba8:	e7f0      	b.n	8000b8c <write_bit+0x1c>
 8000baa:	bf00      	nop
 8000bac:	2000183c 	.word	0x2000183c

08000bb0 <read_bit>:
{
 8000bb0:	b510      	push	{r4, lr}
 8000bb2:	b082      	sub	sp, #8
	uint8_t data_out = 0xff;
 8000bb4:	23ff      	movs	r3, #255	; 0xff
 8000bb6:	f88d 3007 	strb.w	r3, [sp, #7]
	uint8_t data_in = 0x0;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	f88d 3006 	strb.w	r3, [sp, #6]
	if(USARTn -> SR & (1<<5))
 8000bc0:	4b0e      	ldr	r3, [pc, #56]	; (8000bfc <read_bit+0x4c>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	f013 0f20 	tst.w	r3, #32
 8000bc8:	d001      	beq.n	8000bce <read_bit+0x1e>
		USARTn -> DR;
 8000bca:	4b0c      	ldr	r3, [pc, #48]	; (8000bfc <read_bit+0x4c>)
 8000bcc:	685b      	ldr	r3, [r3, #4]
	HAL_UART_Transmit(&UART, &data_out, 1, HAL_MAX_DELAY);
 8000bce:	4c0c      	ldr	r4, [pc, #48]	; (8000c00 <read_bit+0x50>)
 8000bd0:	f04f 33ff 	mov.w	r3, #4294967295
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	f10d 0107 	add.w	r1, sp, #7
 8000bda:	4620      	mov	r0, r4
 8000bdc:	f003 fe3c 	bl	8004858 <HAL_UART_Transmit>
	HAL_UART_Receive(&UART, &data_in, 1, HAL_MAX_DELAY);
 8000be0:	f04f 33ff 	mov.w	r3, #4294967295
 8000be4:	2201      	movs	r2, #1
 8000be6:	f10d 0106 	add.w	r1, sp, #6
 8000bea:	4620      	mov	r0, r4
 8000bec:	f003 fea0 	bl	8004930 <HAL_UART_Receive>
	return data_in & 0x01;
 8000bf0:	f89d 0006 	ldrb.w	r0, [sp, #6]
}
 8000bf4:	f000 0001 	and.w	r0, r0, #1
 8000bf8:	b002      	add	sp, #8
 8000bfa:	bd10      	pop	{r4, pc}
 8000bfc:	40004400 	.word	0x40004400
 8000c00:	2000183c 	.word	0x2000183c

08000c04 <set_baudrate>:
{
 8000c04:	b508      	push	{r3, lr}
	  huart2.Instance = USART2;
 8000c06:	4b0a      	ldr	r3, [pc, #40]	; (8000c30 <set_baudrate+0x2c>)
 8000c08:	4a0a      	ldr	r2, [pc, #40]	; (8000c34 <set_baudrate+0x30>)
 8000c0a:	601a      	str	r2, [r3, #0]
	  huart2.Init.BaudRate = baudrate;
 8000c0c:	6058      	str	r0, [r3, #4]
	  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c0e:	2200      	movs	r2, #0
 8000c10:	609a      	str	r2, [r3, #8]
	  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c12:	60da      	str	r2, [r3, #12]
	  huart2.Init.Parity = UART_PARITY_NONE;
 8000c14:	611a      	str	r2, [r3, #16]
	  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c16:	210c      	movs	r1, #12
 8000c18:	6159      	str	r1, [r3, #20]
	  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c1a:	619a      	str	r2, [r3, #24]
	  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c1c:	61da      	str	r2, [r3, #28]
	  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f003 fde5 	bl	80047ee <HAL_HalfDuplex_Init>
 8000c24:	b900      	cbnz	r0, 8000c28 <set_baudrate+0x24>
}
 8000c26:	bd08      	pop	{r3, pc}
	    Error_Handler();
 8000c28:	f000 fd56 	bl	80016d8 <Error_Handler>
}
 8000c2c:	e7fb      	b.n	8000c26 <set_baudrate+0x22>
 8000c2e:	bf00      	nop
 8000c30:	2000183c 	.word	0x2000183c
 8000c34:	40004400 	.word	0x40004400

08000c38 <wire_reset>:
{
 8000c38:	b510      	push	{r4, lr}
 8000c3a:	b082      	sub	sp, #8
	uint8_t data_out = 0xF0;
 8000c3c:	23f0      	movs	r3, #240	; 0xf0
 8000c3e:	f88d 3007 	strb.w	r3, [sp, #7]
	uint8_t data_in = 0;
 8000c42:	2300      	movs	r3, #0
 8000c44:	f88d 3006 	strb.w	r3, [sp, #6]
	set_baudrate(9600);
 8000c48:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8000c4c:	f7ff ffda 	bl	8000c04 <set_baudrate>
	HAL_UART_Transmit(&UART, &data_out, 1, HAL_MAX_DELAY);
 8000c50:	4c0e      	ldr	r4, [pc, #56]	; (8000c8c <wire_reset+0x54>)
 8000c52:	f04f 33ff 	mov.w	r3, #4294967295
 8000c56:	2201      	movs	r2, #1
 8000c58:	f10d 0107 	add.w	r1, sp, #7
 8000c5c:	4620      	mov	r0, r4
 8000c5e:	f003 fdfb 	bl	8004858 <HAL_UART_Transmit>
	HAL_UART_Receive(&UART, &data_in, 1, HAL_MAX_DELAY);
 8000c62:	f04f 33ff 	mov.w	r3, #4294967295
 8000c66:	2201      	movs	r2, #1
 8000c68:	f10d 0106 	add.w	r1, sp, #6
 8000c6c:	4620      	mov	r0, r4
 8000c6e:	f003 fe5f 	bl	8004930 <HAL_UART_Receive>
	set_baudrate(115200);
 8000c72:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 8000c76:	f7ff ffc5 	bl	8000c04 <set_baudrate>
	if (data_in != 0xF0)
 8000c7a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8000c7e:	2bf0      	cmp	r3, #240	; 0xf0
 8000c80:	d002      	beq.n	8000c88 <wire_reset+0x50>
		return HAL_OK;
 8000c82:	2000      	movs	r0, #0
}
 8000c84:	b002      	add	sp, #8
 8000c86:	bd10      	pop	{r4, pc}
		return HAL_ERROR;
 8000c88:	2001      	movs	r0, #1
 8000c8a:	e7fb      	b.n	8000c84 <wire_reset+0x4c>
 8000c8c:	2000183c 	.word	0x2000183c

08000c90 <wire_read>:
{
 8000c90:	b538      	push	{r3, r4, r5, lr}
  for (i = 0; i < 8; i++)
 8000c92:	2500      	movs	r5, #0
  uint8_t value = 0;
 8000c94:	462c      	mov	r4, r5
  for (i = 0; i < 8; i++)
 8000c96:	e000      	b.n	8000c9a <wire_read+0xa>
 8000c98:	3501      	adds	r5, #1
 8000c9a:	2d07      	cmp	r5, #7
 8000c9c:	dc08      	bgt.n	8000cb0 <wire_read+0x20>
    value >>= 1;
 8000c9e:	0864      	lsrs	r4, r4, #1
    if (read_bit())
 8000ca0:	f7ff ff86 	bl	8000bb0 <read_bit>
 8000ca4:	2800      	cmp	r0, #0
 8000ca6:	d0f7      	beq.n	8000c98 <wire_read+0x8>
      value |= 0x80;
 8000ca8:	f064 047f 	orn	r4, r4, #127	; 0x7f
 8000cac:	b2e4      	uxtb	r4, r4
 8000cae:	e7f3      	b.n	8000c98 <wire_read+0x8>
}
 8000cb0:	4620      	mov	r0, r4
 8000cb2:	bd38      	pop	{r3, r4, r5, pc}

08000cb4 <wire_write>:
{
 8000cb4:	b538      	push	{r3, r4, r5, lr}
 8000cb6:	4604      	mov	r4, r0
  for (i = 0; i < 8; i++) {
 8000cb8:	2500      	movs	r5, #0
 8000cba:	e005      	b.n	8000cc8 <wire_write+0x14>
    write_bit(byte & 0x01);
 8000cbc:	f004 0001 	and.w	r0, r4, #1
 8000cc0:	f7ff ff56 	bl	8000b70 <write_bit>
    byte >>= 1;
 8000cc4:	0864      	lsrs	r4, r4, #1
  for (i = 0; i < 8; i++) {
 8000cc6:	3501      	adds	r5, #1
 8000cc8:	2d07      	cmp	r5, #7
 8000cca:	ddf7      	ble.n	8000cbc <wire_write+0x8>
}
 8000ccc:	bd38      	pop	{r3, r4, r5, pc}

08000cce <wire_crc>:

uint8_t wire_crc(const uint8_t* data, int len)
{
 8000cce:	b570      	push	{r4, r5, r6, lr}
 8000cd0:	4606      	mov	r6, r0
 8000cd2:	460d      	mov	r5, r1
  int i;
    uint8_t crc = 0;
 8000cd4:	2000      	movs	r0, #0

    for (i = 0; i < len; i++)
 8000cd6:	4604      	mov	r4, r0
 8000cd8:	e003      	b.n	8000ce2 <wire_crc+0x14>
      crc = byte_crc(crc, data[i]);
 8000cda:	5d31      	ldrb	r1, [r6, r4]
 8000cdc:	f7ff ff36 	bl	8000b4c <byte_crc>
    for (i = 0; i < len; i++)
 8000ce0:	3401      	adds	r4, #1
 8000ce2:	42ac      	cmp	r4, r5
 8000ce4:	dbf9      	blt.n	8000cda <wire_crc+0xc>

    return crc;
}
 8000ce6:	bd70      	pop	{r4, r5, r6, pc}

08000ce8 <GetPage>:
 * Some STM32F103C8 have 64 KB FLASH Memory, so I guess they have Page 0 to Page 63 only.
 */

/* FLASH_PAGE_SIZE should be able to get the size of the Page according to the controller */
static uint32_t GetPage(uint32_t Address)
{
 8000ce8:	4601      	mov	r1, r0
  for (int indx=0; indx<128; indx++)
 8000cea:	2300      	movs	r3, #0
 8000cec:	e000      	b.n	8000cf0 <GetPage+0x8>
 8000cee:	3301      	adds	r3, #1
 8000cf0:	2b7f      	cmp	r3, #127	; 0x7f
 8000cf2:	dc0c      	bgt.n	8000d0e <GetPage+0x26>
  {
	  if((Address < (0x08000000 + (FLASH_PAGE_SIZE *(indx+1))) ) && (Address >= (0x08000000 + FLASH_PAGE_SIZE*indx)))
 8000cf4:	f503 3200 	add.w	r2, r3, #131072	; 0x20000
 8000cf8:	3201      	adds	r2, #1
 8000cfa:	ebb1 2f82 	cmp.w	r1, r2, lsl #10
 8000cfe:	d2f6      	bcs.n	8000cee <GetPage+0x6>
 8000d00:	f503 3200 	add.w	r2, r3, #131072	; 0x20000
 8000d04:	0290      	lsls	r0, r2, #10
 8000d06:	ebb1 2f82 	cmp.w	r1, r2, lsl #10
 8000d0a:	d3f0      	bcc.n	8000cee <GetPage+0x6>
		  return (0x08000000 + FLASH_PAGE_SIZE*indx);
	  }
  }

  return 0;
}
 8000d0c:	4770      	bx	lr
  return 0;
 8000d0e:	2000      	movs	r0, #0
 8000d10:	e7fc      	b.n	8000d0c <GetPage+0x24>
	...

08000d14 <Flash_Write_Data>:
   float float_variable =  thing.a;
   return float_variable;
}

uint32_t Flash_Write_Data (uint32_t StartPageAddress, uint32_t *Data, uint16_t numberofwords)
{
 8000d14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d16:	b083      	sub	sp, #12
 8000d18:	4605      	mov	r5, r0
 8000d1a:	460f      	mov	r7, r1
 8000d1c:	4616      	mov	r6, r2
	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t PAGEError;
	int sofar=0;

	  /* Unlock the Flash to enable the flash control register access *************/
	   HAL_FLASH_Unlock();
 8000d1e:	f001 fc47 	bl	80025b0 <HAL_FLASH_Unlock>

	   /* Erase the user Flash area*/

	  uint32_t StartPage = GetPage(StartPageAddress);
 8000d22:	4628      	mov	r0, r5
 8000d24:	f7ff ffe0 	bl	8000ce8 <GetPage>
 8000d28:	4604      	mov	r4, r0
	  uint32_t EndPageAdress = StartPageAddress + numberofwords*4;
	  uint32_t EndPage = GetPage(EndPageAdress);
 8000d2a:	eb05 0086 	add.w	r0, r5, r6, lsl #2
 8000d2e:	f7ff ffdb 	bl	8000ce8 <GetPage>
 8000d32:	4603      	mov	r3, r0

	   /* Fill EraseInit structure*/
	   EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 8000d34:	4812      	ldr	r0, [pc, #72]	; (8000d80 <Flash_Write_Data+0x6c>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	6002      	str	r2, [r0, #0]
	   EraseInitStruct.PageAddress = StartPage;
 8000d3a:	6084      	str	r4, [r0, #8]
	   EraseInitStruct.NbPages     = ((EndPage - StartPage)/FLASH_PAGE_SIZE) +1;
 8000d3c:	1b1b      	subs	r3, r3, r4
 8000d3e:	0a9b      	lsrs	r3, r3, #10
 8000d40:	3301      	adds	r3, #1
 8000d42:	60c3      	str	r3, [r0, #12]

	   if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)
 8000d44:	a901      	add	r1, sp, #4
 8000d46:	f001 fd05 	bl	8002754 <HAL_FLASHEx_Erase>
 8000d4a:	b968      	cbnz	r0, 8000d68 <Flash_Write_Data+0x54>
	int sofar=0;
 8000d4c:	2400      	movs	r4, #0
		  return HAL_FLASH_GetError ();
	   }

	   /* Program the user Flash area word by word*/

	   while (sofar<numberofwords)
 8000d4e:	42a6      	cmp	r6, r4
 8000d50:	dd10      	ble.n	8000d74 <Flash_Write_Data+0x60>
	   {
	     if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartPageAddress, Data[sofar]) == HAL_OK)
 8000d52:	f857 2024 	ldr.w	r2, [r7, r4, lsl #2]
 8000d56:	2300      	movs	r3, #0
 8000d58:	4629      	mov	r1, r5
 8000d5a:	2002      	movs	r0, #2
 8000d5c:	f001 fc86 	bl	800266c <HAL_FLASH_Program>
 8000d60:	b928      	cbnz	r0, 8000d6e <Flash_Write_Data+0x5a>
	     {
	    	 StartPageAddress += 4;  // use StartPageAddress += 2 for half word and 8 for double word
 8000d62:	3504      	adds	r5, #4
	    	 sofar++;
 8000d64:	3401      	adds	r4, #1
 8000d66:	e7f2      	b.n	8000d4e <Flash_Write_Data+0x3a>
		  return HAL_FLASH_GetError ();
 8000d68:	f001 fc46 	bl	80025f8 <HAL_FLASH_GetError>
 8000d6c:	e005      	b.n	8000d7a <Flash_Write_Data+0x66>
	     }
	     else
	     {
	       /* Error occurred while writing data in Flash memory*/
	    	 return HAL_FLASH_GetError ();
 8000d6e:	f001 fc43 	bl	80025f8 <HAL_FLASH_GetError>
 8000d72:	e002      	b.n	8000d7a <Flash_Write_Data+0x66>
	     }
	   }

	   /* Lock the Flash to disable the flash control register access (recommended
	      to protect the FLASH memory against possible unwanted operation) *********/
	   HAL_FLASH_Lock();
 8000d74:	f001 fc36 	bl	80025e4 <HAL_FLASH_Lock>

	   return 0;
 8000d78:	2000      	movs	r0, #0
}
 8000d7a:	b003      	add	sp, #12
 8000d7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	20000384 	.word	0x20000384

08000d84 <send_cmd>:
  else
    return HAL_ERROR;
}

static HAL_StatusTypeDef send_cmd(const uint8_t* rom_code, uint8_t cmd)
{
 8000d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d86:	4605      	mov	r5, r0
 8000d88:	460e      	mov	r6, r1
  int i;

  if (wire_reset() != HAL_OK)
 8000d8a:	f7ff ff55 	bl	8000c38 <wire_reset>
 8000d8e:	b9a8      	cbnz	r0, 8000dbc <send_cmd+0x38>
 8000d90:	4607      	mov	r7, r0
    return HAL_ERROR;

  if (!rom_code) {
 8000d92:	b125      	cbz	r5, 8000d9e <send_cmd+0x1a>
    wire_write(DS18B20_SKIP_ROM);
  } else {
    wire_write(DS18B20_MATCH_ROM);
 8000d94:	2055      	movs	r0, #85	; 0x55
 8000d96:	f7ff ff8d 	bl	8000cb4 <wire_write>
    for (i = 0; i < DS18B20_ROM_CODE_SIZE; i++)
 8000d9a:	2400      	movs	r4, #0
 8000d9c:	e007      	b.n	8000dae <send_cmd+0x2a>
    wire_write(DS18B20_SKIP_ROM);
 8000d9e:	20cc      	movs	r0, #204	; 0xcc
 8000da0:	f7ff ff88 	bl	8000cb4 <wire_write>
 8000da4:	e005      	b.n	8000db2 <send_cmd+0x2e>
      wire_write(rom_code[i]);
 8000da6:	5d28      	ldrb	r0, [r5, r4]
 8000da8:	f7ff ff84 	bl	8000cb4 <wire_write>
    for (i = 0; i < DS18B20_ROM_CODE_SIZE; i++)
 8000dac:	3401      	adds	r4, #1
 8000dae:	2c07      	cmp	r4, #7
 8000db0:	ddf9      	ble.n	8000da6 <send_cmd+0x22>
  }
  wire_write(cmd);
 8000db2:	4630      	mov	r0, r6
 8000db4:	f7ff ff7e 	bl	8000cb4 <wire_write>
  return HAL_OK;
}
 8000db8:	4638      	mov	r0, r7
 8000dba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8000dbc:	2701      	movs	r7, #1
 8000dbe:	e7fb      	b.n	8000db8 <send_cmd+0x34>

08000dc0 <ds18b20_read_scratchpad>:
{
  return send_cmd(rom_code, DS18B20_CONVERT_T);
}

static HAL_StatusTypeDef ds18b20_read_scratchpad(const uint8_t* rom_code, uint8_t* scratchpad)
{
 8000dc0:	b570      	push	{r4, r5, r6, lr}
 8000dc2:	460d      	mov	r5, r1
  int i;
  uint8_t crc;

  if (send_cmd(rom_code, DS18B20_READ_SCRATCHPAD) != HAL_OK)
 8000dc4:	21be      	movs	r1, #190	; 0xbe
 8000dc6:	f7ff ffdd 	bl	8000d84 <send_cmd>
 8000dca:	b990      	cbnz	r0, 8000df2 <ds18b20_read_scratchpad+0x32>
 8000dcc:	4606      	mov	r6, r0
    return HAL_ERROR;

  for (i = 0; i < DS18B20_SCRATCHPAD_SIZE; i++)
 8000dce:	2400      	movs	r4, #0
 8000dd0:	e003      	b.n	8000dda <ds18b20_read_scratchpad+0x1a>
    scratchpad[i] = wire_read();
 8000dd2:	f7ff ff5d 	bl	8000c90 <wire_read>
 8000dd6:	5528      	strb	r0, [r5, r4]
  for (i = 0; i < DS18B20_SCRATCHPAD_SIZE; i++)
 8000dd8:	3401      	adds	r4, #1
 8000dda:	2c08      	cmp	r4, #8
 8000ddc:	ddf9      	ble.n	8000dd2 <ds18b20_read_scratchpad+0x12>

  crc = wire_crc(scratchpad, DS18B20_SCRATCHPAD_SIZE - 1);
 8000dde:	2108      	movs	r1, #8
 8000de0:	4628      	mov	r0, r5
 8000de2:	f7ff ff74 	bl	8000cce <wire_crc>
  if (scratchpad[DS18B20_SCRATCHPAD_SIZE - 1] == crc)
 8000de6:	7a2b      	ldrb	r3, [r5, #8]
 8000de8:	4283      	cmp	r3, r0
 8000dea:	d000      	beq.n	8000dee <ds18b20_read_scratchpad+0x2e>
    return HAL_OK;
  else
    return HAL_ERROR;
 8000dec:	2601      	movs	r6, #1
}
 8000dee:	4630      	mov	r0, r6
 8000df0:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8000df2:	2601      	movs	r6, #1
 8000df4:	e7fb      	b.n	8000dee <ds18b20_read_scratchpad+0x2e>

08000df6 <ds18b20_read_address>:
{
 8000df6:	b570      	push	{r4, r5, r6, lr}
 8000df8:	4605      	mov	r5, r0
  if (wire_reset() != HAL_OK)
 8000dfa:	f7ff ff1d 	bl	8000c38 <wire_reset>
 8000dfe:	b110      	cbz	r0, 8000e06 <ds18b20_read_address+0x10>
    return HAL_ERROR;
 8000e00:	2601      	movs	r6, #1
}
 8000e02:	4630      	mov	r0, r6
 8000e04:	bd70      	pop	{r4, r5, r6, pc}
 8000e06:	4606      	mov	r6, r0
  wire_write(DS18B20_READ_ROM);
 8000e08:	2033      	movs	r0, #51	; 0x33
 8000e0a:	f7ff ff53 	bl	8000cb4 <wire_write>
  for (i = 0; i < DS18B20_ROM_CODE_SIZE; i++)
 8000e0e:	2400      	movs	r4, #0
 8000e10:	e003      	b.n	8000e1a <ds18b20_read_address+0x24>
    rom_code[i] = wire_read();
 8000e12:	f7ff ff3d 	bl	8000c90 <wire_read>
 8000e16:	5528      	strb	r0, [r5, r4]
  for (i = 0; i < DS18B20_ROM_CODE_SIZE; i++)
 8000e18:	3401      	adds	r4, #1
 8000e1a:	2c07      	cmp	r4, #7
 8000e1c:	ddf9      	ble.n	8000e12 <ds18b20_read_address+0x1c>
  crc = wire_crc(rom_code, DS18B20_ROM_CODE_SIZE - 1);
 8000e1e:	2107      	movs	r1, #7
 8000e20:	4628      	mov	r0, r5
 8000e22:	f7ff ff54 	bl	8000cce <wire_crc>
  if (rom_code[DS18B20_ROM_CODE_SIZE - 1] == crc)
 8000e26:	79eb      	ldrb	r3, [r5, #7]
 8000e28:	4283      	cmp	r3, r0
 8000e2a:	d0ea      	beq.n	8000e02 <ds18b20_read_address+0xc>
    return HAL_ERROR;
 8000e2c:	2601      	movs	r6, #1
 8000e2e:	e7e8      	b.n	8000e02 <ds18b20_read_address+0xc>

08000e30 <ds18b20_start_measure>:
{
 8000e30:	b508      	push	{r3, lr}
  return send_cmd(rom_code, DS18B20_CONVERT_T);
 8000e32:	2144      	movs	r1, #68	; 0x44
 8000e34:	f7ff ffa6 	bl	8000d84 <send_cmd>
}
 8000e38:	bd08      	pop	{r3, pc}

08000e3a <ds18b20_get_temp_wo_fp>:

  return temp / 16.0f;
}

int32_t ds18b20_get_temp_wo_fp(const uint8_t* rom_code)
{
 8000e3a:	b500      	push	{lr}
 8000e3c:	b085      	sub	sp, #20
  uint8_t scratchpad[DS18B20_SCRATCHPAD_SIZE];
  int16_t temp;

  if (ds18b20_read_scratchpad(rom_code, scratchpad) != HAL_OK)
 8000e3e:	a901      	add	r1, sp, #4
 8000e40:	f7ff ffbe 	bl	8000dc0 <ds18b20_read_scratchpad>
 8000e44:	b960      	cbnz	r0, 8000e60 <ds18b20_get_temp_wo_fp+0x26>
    return 8500;

  memcpy(&temp, &scratchpad[0], sizeof(temp));
 8000e46:	f9bd 0004 	ldrsh.w	r0, [sp, #4]

  return (temp * 100) / 16;
 8000e4a:	2364      	movs	r3, #100	; 0x64
 8000e4c:	fb03 f000 	mul.w	r0, r3, r0
 8000e50:	2800      	cmp	r0, #0
 8000e52:	db03      	blt.n	8000e5c <ds18b20_get_temp_wo_fp+0x22>
 8000e54:	1100      	asrs	r0, r0, #4
}
 8000e56:	b005      	add	sp, #20
 8000e58:	f85d fb04 	ldr.w	pc, [sp], #4
  return (temp * 100) / 16;
 8000e5c:	300f      	adds	r0, #15
 8000e5e:	e7f9      	b.n	8000e54 <ds18b20_get_temp_wo_fp+0x1a>
    return 8500;
 8000e60:	f242 1034 	movw	r0, #8500	; 0x2134
 8000e64:	e7f7      	b.n	8000e56 <ds18b20_get_temp_wo_fp+0x1c>
	...

08000e68 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e6c:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6e:	2400      	movs	r4, #0
 8000e70:	9404      	str	r4, [sp, #16]
 8000e72:	9405      	str	r4, [sp, #20]
 8000e74:	9406      	str	r4, [sp, #24]
 8000e76:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e78:	4b2c      	ldr	r3, [pc, #176]	; (8000f2c <MX_GPIO_Init+0xc4>)
 8000e7a:	699a      	ldr	r2, [r3, #24]
 8000e7c:	f042 0210 	orr.w	r2, r2, #16
 8000e80:	619a      	str	r2, [r3, #24]
 8000e82:	699a      	ldr	r2, [r3, #24]
 8000e84:	f002 0210 	and.w	r2, r2, #16
 8000e88:	9200      	str	r2, [sp, #0]
 8000e8a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e8c:	699a      	ldr	r2, [r3, #24]
 8000e8e:	f042 0220 	orr.w	r2, r2, #32
 8000e92:	619a      	str	r2, [r3, #24]
 8000e94:	699a      	ldr	r2, [r3, #24]
 8000e96:	f002 0220 	and.w	r2, r2, #32
 8000e9a:	9201      	str	r2, [sp, #4]
 8000e9c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e9e:	699a      	ldr	r2, [r3, #24]
 8000ea0:	f042 0204 	orr.w	r2, r2, #4
 8000ea4:	619a      	str	r2, [r3, #24]
 8000ea6:	699a      	ldr	r2, [r3, #24]
 8000ea8:	f002 0204 	and.w	r2, r2, #4
 8000eac:	9202      	str	r2, [sp, #8]
 8000eae:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eb0:	699a      	ldr	r2, [r3, #24]
 8000eb2:	f042 0208 	orr.w	r2, r2, #8
 8000eb6:	619a      	str	r2, [r3, #24]
 8000eb8:	699b      	ldr	r3, [r3, #24]
 8000eba:	f003 0308 	and.w	r3, r3, #8
 8000ebe:	9303      	str	r3, [sp, #12]
 8000ec0:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000ec2:	4d1b      	ldr	r5, [pc, #108]	; (8000f30 <MX_GPIO_Init+0xc8>)
 8000ec4:	4622      	mov	r2, r4
 8000ec6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000eca:	4628      	mov	r0, r5
 8000ecc:	f001 fdad 	bl	8002a2a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GSM_RESET_GPIO_Port, GSM_RESET_Pin, GPIO_PIN_SET);
 8000ed0:	4e18      	ldr	r6, [pc, #96]	; (8000f34 <MX_GPIO_Init+0xcc>)
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ed8:	4630      	mov	r0, r6
 8000eda:	f001 fda6 	bl	8002a2a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000ede:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ee2:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee4:	f04f 0801 	mov.w	r8, #1
 8000ee8:	f8cd 8014 	str.w	r8, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eec:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eee:	2702      	movs	r7, #2
 8000ef0:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000ef2:	a904      	add	r1, sp, #16
 8000ef4:	4628      	mov	r0, r5
 8000ef6:	f001 fc7f 	bl	80027f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8000efa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000efe:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f00:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f02:	f8cd 8018 	str.w	r8, [sp, #24]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000f06:	a904      	add	r1, sp, #16
 8000f08:	4628      	mov	r0, r5
 8000f0a:	f001 fc75 	bl	80027f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GSM_RESET_Pin;
 8000f0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f12:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000f14:	2311      	movs	r3, #17
 8000f16:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f18:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1a:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(GSM_RESET_GPIO_Port, &GPIO_InitStruct);
 8000f1c:	a904      	add	r1, sp, #16
 8000f1e:	4630      	mov	r0, r6
 8000f20:	f001 fc6a 	bl	80027f8 <HAL_GPIO_Init>

}
 8000f24:	b008      	add	sp, #32
 8000f26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000f2a:	bf00      	nop
 8000f2c:	40021000 	.word	0x40021000
 8000f30:	40011000 	.word	0x40011000
 8000f34:	40010c00 	.word	0x40010c00

08000f38 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8000f38:	b508      	push	{r3, lr}
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8000f3a:	4807      	ldr	r0, [pc, #28]	; (8000f58 <MX_IWDG_Init+0x20>)
 8000f3c:	4b07      	ldr	r3, [pc, #28]	; (8000f5c <MX_IWDG_Init+0x24>)
 8000f3e:	6003      	str	r3, [r0, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 8000f40:	2300      	movs	r3, #0
 8000f42:	6043      	str	r3, [r0, #4]
  hiwdg.Init.Reload = 4095;
 8000f44:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000f48:	6083      	str	r3, [r0, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000f4a:	f001 fd74 	bl	8002a36 <HAL_IWDG_Init>
 8000f4e:	b900      	cbnz	r0, 8000f52 <MX_IWDG_Init+0x1a>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8000f50:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000f52:	f000 fbc1 	bl	80016d8 <Error_Handler>
}
 8000f56:	e7fb      	b.n	8000f50 <MX_IWDG_Init+0x18>
 8000f58:	20000394 	.word	0x20000394
 8000f5c:	40003000 	.word	0x40003000

08000f60 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000f60:	b508      	push	{r3, lr}
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000f62:	2200      	movs	r2, #0
 8000f64:	4611      	mov	r1, r2
 8000f66:	2025      	movs	r0, #37	; 0x25
 8000f68:	f001 fa02 	bl	8002370 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000f6c:	2025      	movs	r0, #37	; 0x25
 8000f6e:	f001 fa37 	bl	80023e0 <HAL_NVIC_EnableIRQ>
  /* USB_LP_CAN1_RX0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8000f72:	2200      	movs	r2, #0
 8000f74:	4611      	mov	r1, r2
 8000f76:	2014      	movs	r0, #20
 8000f78:	f001 f9fa 	bl	8002370 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000f7c:	2014      	movs	r0, #20
 8000f7e:	f001 fa2f 	bl	80023e0 <HAL_NVIC_EnableIRQ>
}
 8000f82:	bd08      	pop	{r3, pc}

08000f84 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000f84:	b508      	push	{r3, lr}
	if(huart->Instance == USART1)
 8000f86:	6802      	ldr	r2, [r0, #0]
 8000f88:	4b10      	ldr	r3, [pc, #64]	; (8000fcc <HAL_UART_RxCpltCallback+0x48>)
 8000f8a:	429a      	cmp	r2, r3
 8000f8c:	d000      	beq.n	8000f90 <HAL_UART_RxCpltCallback+0xc>
			}
		}
		HAL_UART_Receive_IT(&huart1, &ReceiveTmp, 1);
	}

}
 8000f8e:	bd08      	pop	{r3, pc}
		GSM.LastTickReceive = HAL_GetTick();
 8000f90:	f001 f9d6 	bl	8002340 <HAL_GetTick>
 8000f94:	4b0e      	ldr	r3, [pc, #56]	; (8000fd0 <HAL_UART_RxCpltCallback+0x4c>)
 8000f96:	f8c3 0228 	str.w	r0, [r3, #552]	; 0x228
		if(ReceiveTmp != 0xd)
 8000f9a:	4b0e      	ldr	r3, [pc, #56]	; (8000fd4 <HAL_UART_RxCpltCallback+0x50>)
 8000f9c:	7819      	ldrb	r1, [r3, #0]
 8000f9e:	290d      	cmp	r1, #13
 8000fa0:	d105      	bne.n	8000fae <HAL_UART_RxCpltCallback+0x2a>
		HAL_UART_Receive_IT(&huart1, &ReceiveTmp, 1);
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	490b      	ldr	r1, [pc, #44]	; (8000fd4 <HAL_UART_RxCpltCallback+0x50>)
 8000fa6:	480c      	ldr	r0, [pc, #48]	; (8000fd8 <HAL_UART_RxCpltCallback+0x54>)
 8000fa8:	f003 fef9 	bl	8004d9e <HAL_UART_Receive_IT>
}
 8000fac:	e7ef      	b.n	8000f8e <HAL_UART_RxCpltCallback+0xa>
			if (RB_OK == Ring_Buffer_Write(&ReceiveBuffer, ReceiveTmp))
 8000fae:	480b      	ldr	r0, [pc, #44]	; (8000fdc <HAL_UART_RxCpltCallback+0x58>)
 8000fb0:	f000 ff1d 	bl	8001dee <Ring_Buffer_Write>
 8000fb4:	2800      	cmp	r0, #0
 8000fb6:	d1f4      	bne.n	8000fa2 <HAL_UART_RxCpltCallback+0x1e>
				if(ReceiveTmp == ENDLINE)
 8000fb8:	4b06      	ldr	r3, [pc, #24]	; (8000fd4 <HAL_UART_RxCpltCallback+0x50>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	2b0a      	cmp	r3, #10
 8000fbe:	d1f0      	bne.n	8000fa2 <HAL_UART_RxCpltCallback+0x1e>
					LineCounter++;
 8000fc0:	4a07      	ldr	r2, [pc, #28]	; (8000fe0 <HAL_UART_RxCpltCallback+0x5c>)
 8000fc2:	7813      	ldrb	r3, [r2, #0]
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	7013      	strb	r3, [r2, #0]
 8000fc8:	e7eb      	b.n	8000fa2 <HAL_UART_RxCpltCallback+0x1e>
 8000fca:	bf00      	nop
 8000fcc:	40013800 	.word	0x40013800
 8000fd0:	20000f08 	.word	0x20000f08
 8000fd4:	20001348 	.word	0x20001348
 8000fd8:	200017f8 	.word	0x200017f8
 8000fdc:	20001144 	.word	0x20001144
 8000fe0:	20001140 	.word	0x20001140

08000fe4 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
	*Uart1isBusyPtr = 0;
 8000fe4:	4b02      	ldr	r3, [pc, #8]	; (8000ff0 <HAL_UART_TxCpltCallback+0xc>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	2200      	movs	r2, #0
 8000fea:	701a      	strb	r2, [r3, #0]
}
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	20000004 	.word	0x20000004

08000ff4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
	if(htim->Instance == TIM3)
 8000ff4:	6802      	ldr	r2, [r0, #0]
 8000ff6:	4b2c      	ldr	r3, [pc, #176]	; (80010a8 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	d000      	beq.n	8000ffe <HAL_TIM_PeriodElapsedCallback+0xa>
 8000ffc:	4770      	bx	lr
{
 8000ffe:	b510      	push	{r4, lr}
 8001000:	b090      	sub	sp, #64	; 0x40
	{   //Period elapsed 128,57s
		timPeriodCounter++;
 8001002:	4a2a      	ldr	r2, [pc, #168]	; (80010ac <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001004:	7813      	ldrb	r3, [r2, #0]
 8001006:	3301      	adds	r3, #1
 8001008:	7013      	strb	r3, [r2, #0]
		char OneSample[32];
		char TemperatureString[7];
		Temperature100ToString(temperature, TemperatureString);
 800100a:	ac06      	add	r4, sp, #24
 800100c:	4621      	mov	r1, r4
 800100e:	4b28      	ldr	r3, [pc, #160]	; (80010b0 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001010:	6818      	ldr	r0, [r3, #0]
 8001012:	f001 f8fd 	bl	8002210 <Temperature100ToString>
		sprintf(OneSample, "%.2u/%.2u/%.2u,%.2u:%.2u:%.2u,%s\n", year, month, day, hour, minute, second, TemperatureString);
 8001016:	9404      	str	r4, [sp, #16]
 8001018:	4b26      	ldr	r3, [pc, #152]	; (80010b4 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	9303      	str	r3, [sp, #12]
 800101e:	4b26      	ldr	r3, [pc, #152]	; (80010b8 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	9302      	str	r3, [sp, #8]
 8001024:	4b25      	ldr	r3, [pc, #148]	; (80010bc <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	9301      	str	r3, [sp, #4]
 800102a:	4b25      	ldr	r3, [pc, #148]	; (80010c0 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	9300      	str	r3, [sp, #0]
 8001030:	4b24      	ldr	r3, [pc, #144]	; (80010c4 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	4a24      	ldr	r2, [pc, #144]	; (80010c8 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001036:	7812      	ldrb	r2, [r2, #0]
 8001038:	4924      	ldr	r1, [pc, #144]	; (80010cc <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800103a:	a808      	add	r0, sp, #32
 800103c:	f006 fbba 	bl	80077b4 <siprintf>
		if(FTPMessageBoxRecordSwitch == 1)
 8001040:	4b23      	ldr	r3, [pc, #140]	; (80010d0 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001042:	781c      	ldrb	r4, [r3, #0]
 8001044:	2c01      	cmp	r4, #1
 8001046:	d007      	beq.n	8001058 <HAL_TIM_PeriodElapsedCallback+0x64>
		{
			strcat(FTPMessageBox1, OneSample);
		}
		else if(FTPMessageBoxRecordSwitch == 2)
 8001048:	2c02      	cmp	r4, #2
 800104a:	d00a      	beq.n	8001062 <HAL_TIM_PeriodElapsedCallback+0x6e>
		{
			strcat(FTPMessageBox2, OneSample);
		}


		if(timPeriodCounter == 42)
 800104c:	4b17      	ldr	r3, [pc, #92]	; (80010ac <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	2b2a      	cmp	r3, #42	; 0x2a
 8001052:	d00b      	beq.n	800106c <HAL_TIM_PeriodElapsedCallback+0x78>
			}

			timPeriodCounter = 0;
		}
	}
}
 8001054:	b010      	add	sp, #64	; 0x40
 8001056:	bd10      	pop	{r4, pc}
			strcat(FTPMessageBox1, OneSample);
 8001058:	a908      	add	r1, sp, #32
 800105a:	481e      	ldr	r0, [pc, #120]	; (80010d4 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800105c:	f006 fbca 	bl	80077f4 <strcat>
 8001060:	e7f4      	b.n	800104c <HAL_TIM_PeriodElapsedCallback+0x58>
			strcat(FTPMessageBox2, OneSample);
 8001062:	a908      	add	r1, sp, #32
 8001064:	481c      	ldr	r0, [pc, #112]	; (80010d8 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001066:	f006 fbc5 	bl	80077f4 <strcat>
 800106a:	e7ef      	b.n	800104c <HAL_TIM_PeriodElapsedCallback+0x58>
			GSM.TaskToDo.FtpMsgToSend = 1;
 800106c:	4a1b      	ldr	r2, [pc, #108]	; (80010dc <HAL_TIM_PeriodElapsedCallback+0xe8>)
 800106e:	f892 322c 	ldrb.w	r3, [r2, #556]	; 0x22c
 8001072:	f043 0301 	orr.w	r3, r3, #1
 8001076:	f882 322c 	strb.w	r3, [r2, #556]	; 0x22c
			if(FTPMessageBoxRecordSwitch == 1)
 800107a:	2c01      	cmp	r4, #1
 800107c:	d005      	beq.n	800108a <HAL_TIM_PeriodElapsedCallback+0x96>
			else if(FTPMessageBoxRecordSwitch == 2)
 800107e:	2c02      	cmp	r4, #2
 8001080:	d00a      	beq.n	8001098 <HAL_TIM_PeriodElapsedCallback+0xa4>
			timPeriodCounter = 0;
 8001082:	4b0a      	ldr	r3, [pc, #40]	; (80010ac <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001084:	2200      	movs	r2, #0
 8001086:	701a      	strb	r2, [r3, #0]
}
 8001088:	e7e4      	b.n	8001054 <HAL_TIM_PeriodElapsedCallback+0x60>
				FTPMessageBox2[0] = '\0';
 800108a:	4b13      	ldr	r3, [pc, #76]	; (80010d8 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 800108c:	2200      	movs	r2, #0
 800108e:	701a      	strb	r2, [r3, #0]
				FTPMessageBoxRecordSwitch = 2;
 8001090:	4b0f      	ldr	r3, [pc, #60]	; (80010d0 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001092:	2202      	movs	r2, #2
 8001094:	701a      	strb	r2, [r3, #0]
 8001096:	e7f4      	b.n	8001082 <HAL_TIM_PeriodElapsedCallback+0x8e>
				FTPMessageBox1[0] = '\0';
 8001098:	4b0e      	ldr	r3, [pc, #56]	; (80010d4 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800109a:	2200      	movs	r2, #0
 800109c:	701a      	strb	r2, [r3, #0]
				FTPMessageBoxRecordSwitch = 1;
 800109e:	4b0c      	ldr	r3, [pc, #48]	; (80010d0 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80010a0:	2201      	movs	r2, #1
 80010a2:	701a      	strb	r2, [r3, #0]
 80010a4:	e7ed      	b.n	8001082 <HAL_TIM_PeriodElapsedCallback+0x8e>
 80010a6:	bf00      	nop
 80010a8:	40000400 	.word	0x40000400
 80010ac:	20001760 	.word	0x20001760
 80010b0:	2000175c 	.word	0x2000175c
 80010b4:	20001757 	.word	0x20001757
 80010b8:	20001755 	.word	0x20001755
 80010bc:	20001754 	.word	0x20001754
 80010c0:	2000174a 	.word	0x2000174a
 80010c4:	20001756 	.word	0x20001756
 80010c8:	20001761 	.word	0x20001761
 80010cc:	0800b430 	.word	0x0800b430
 80010d0:	20000000 	.word	0x20000000
 80010d4:	200004a0 	.word	0x200004a0
 80010d8:	200009d4 	.word	0x200009d4
 80010dc:	20000f08 	.word	0x20000f08

080010e0 <CommStateMachineTask>:

void CommStateMachineTask(void)
{
	  if(Uart1isBusy == 0 && HAL_GetTick() - LastTickForSim800 >= inquiryTimeVar)
 80010e0:	4b98      	ldr	r3, [pc, #608]	; (8001344 <CommStateMachineTask+0x264>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	b103      	cbz	r3, 80010e8 <CommStateMachineTask+0x8>
 80010e6:	4770      	bx	lr
{
 80010e8:	b530      	push	{r4, r5, lr}
 80010ea:	b087      	sub	sp, #28
 80010ec:	2400      	movs	r4, #0
	  if(Uart1isBusy == 0 && HAL_GetTick() - LastTickForSim800 >= inquiryTimeVar)
 80010ee:	f001 f927 	bl	8002340 <HAL_GetTick>
 80010f2:	4b95      	ldr	r3, [pc, #596]	; (8001348 <CommStateMachineTask+0x268>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	1ac0      	subs	r0, r0, r3
 80010f8:	4b94      	ldr	r3, [pc, #592]	; (800134c <CommStateMachineTask+0x26c>)
 80010fa:	881b      	ldrh	r3, [r3, #0]
 80010fc:	4298      	cmp	r0, r3
 80010fe:	d201      	bcs.n	8001104 <CommStateMachineTask+0x24>

	  			}

	  		}
	  	}
}
 8001100:	b007      	add	sp, #28
 8001102:	bd30      	pop	{r4, r5, pc}
	  	{LastTickForSim800 = HAL_GetTick();
 8001104:	f001 f91c 	bl	8002340 <HAL_GetTick>
 8001108:	4b8f      	ldr	r3, [pc, #572]	; (8001348 <CommStateMachineTask+0x268>)
 800110a:	6018      	str	r0, [r3, #0]
	  		if(SMSUartTxState == Control)
 800110c:	4b90      	ldr	r3, [pc, #576]	; (8001350 <CommStateMachineTask+0x270>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	2b03      	cmp	r3, #3
 8001112:	d017      	beq.n	8001144 <CommStateMachineTask+0x64>
	  		else if(SMSUartTxState == Reset)
 8001114:	2b00      	cmp	r3, #0
 8001116:	d167      	bne.n	80011e8 <CommStateMachineTask+0x108>
	  			switch(TaskState)
 8001118:	4b8e      	ldr	r3, [pc, #568]	; (8001354 <CommStateMachineTask+0x274>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	2b01      	cmp	r3, #1
 800111e:	d04b      	beq.n	80011b8 <CommStateMachineTask+0xd8>
 8001120:	2b02      	cmp	r3, #2
 8001122:	d057      	beq.n	80011d4 <CommStateMachineTask+0xf4>
 8001124:	2b00      	cmp	r3, #0
 8001126:	d1eb      	bne.n	8001100 <CommStateMachineTask+0x20>
	  				inquiryTimeVar = 500;
 8001128:	4b88      	ldr	r3, [pc, #544]	; (800134c <CommStateMachineTask+0x26c>)
 800112a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800112e:	801a      	strh	r2, [r3, #0]
	  				HAL_GPIO_WritePin(GSM_RESET_GPIO_Port, GSM_RESET_Pin, RESET);
 8001130:	2200      	movs	r2, #0
 8001132:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001136:	4888      	ldr	r0, [pc, #544]	; (8001358 <CommStateMachineTask+0x278>)
 8001138:	f001 fc77 	bl	8002a2a <HAL_GPIO_WritePin>
	  				TaskState = 1;
 800113c:	4b85      	ldr	r3, [pc, #532]	; (8001354 <CommStateMachineTask+0x274>)
 800113e:	2201      	movs	r2, #1
 8001140:	701a      	strb	r2, [r3, #0]
	  				break;
 8001142:	e7dd      	b.n	8001100 <CommStateMachineTask+0x20>
	  			switch(TaskState)
 8001144:	4b85      	ldr	r3, [pc, #532]	; (800135c <CommStateMachineTask+0x27c>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	2b03      	cmp	r3, #3
 800114a:	d8d9      	bhi.n	8001100 <CommStateMachineTask+0x20>
 800114c:	e8df f003 	tbb	[pc, r3]
 8001150:	17100902 	.word	0x17100902
	  				UartSend("AT+CSQ\r\n");
 8001154:	4882      	ldr	r0, [pc, #520]	; (8001360 <CommStateMachineTask+0x280>)
 8001156:	f001 f831 	bl	80021bc <UartSend>
	  				TaskState = 1;
 800115a:	4b80      	ldr	r3, [pc, #512]	; (800135c <CommStateMachineTask+0x27c>)
 800115c:	2201      	movs	r2, #1
 800115e:	701a      	strb	r2, [r3, #0]
	  				break;
 8001160:	e7ce      	b.n	8001100 <CommStateMachineTask+0x20>
	  				UartSend("AT+CREG?\r\n");
 8001162:	4880      	ldr	r0, [pc, #512]	; (8001364 <CommStateMachineTask+0x284>)
 8001164:	f001 f82a 	bl	80021bc <UartSend>
	  				TaskState = 2;
 8001168:	4b7c      	ldr	r3, [pc, #496]	; (800135c <CommStateMachineTask+0x27c>)
 800116a:	2202      	movs	r2, #2
 800116c:	701a      	strb	r2, [r3, #0]
	  				break;
 800116e:	e7c7      	b.n	8001100 <CommStateMachineTask+0x20>
	  				 UartSend("AT+CMGL=\"REC UNREAD\",0\r\n");
 8001170:	487d      	ldr	r0, [pc, #500]	; (8001368 <CommStateMachineTask+0x288>)
 8001172:	f001 f823 	bl	80021bc <UartSend>
	  				 TaskState = 3;
 8001176:	4b79      	ldr	r3, [pc, #484]	; (800135c <CommStateMachineTask+0x27c>)
 8001178:	2203      	movs	r2, #3
 800117a:	701a      	strb	r2, [r3, #0]
	  				 break;
 800117c:	e7c0      	b.n	8001100 <CommStateMachineTask+0x20>
	  				UartSend("AT+CCLK?\r\n");
 800117e:	487b      	ldr	r0, [pc, #492]	; (800136c <CommStateMachineTask+0x28c>)
 8001180:	f001 f81c 	bl	80021bc <UartSend>
	  				TaskState = 0;
 8001184:	4b75      	ldr	r3, [pc, #468]	; (800135c <CommStateMachineTask+0x27c>)
 8001186:	2200      	movs	r2, #0
 8001188:	701a      	strb	r2, [r3, #0]
	  				if(!GSM.TaskToDo.FtpMsgToSend && !GSM.TaskToDo.SmsMsgToSend)
 800118a:	4b79      	ldr	r3, [pc, #484]	; (8001370 <CommStateMachineTask+0x290>)
 800118c:	f893 322c 	ldrb.w	r3, [r3, #556]	; 0x22c
 8001190:	f013 0203 	ands.w	r2, r3, #3
 8001194:	d103      	bne.n	800119e <CommStateMachineTask+0xbe>
	  					SMSUartTxState = Control;
 8001196:	4b6e      	ldr	r3, [pc, #440]	; (8001350 <CommStateMachineTask+0x270>)
 8001198:	2203      	movs	r2, #3
 800119a:	701a      	strb	r2, [r3, #0]
 800119c:	e7b0      	b.n	8001100 <CommStateMachineTask+0x20>
	  				else if(GSM.TaskToDo.FtpMsgToSend)
 800119e:	f013 0f01 	tst.w	r3, #1
 80011a2:	d003      	beq.n	80011ac <CommStateMachineTask+0xcc>
	  					SMSUartTxState = FTPMsgWrite;
 80011a4:	4b6a      	ldr	r3, [pc, #424]	; (8001350 <CommStateMachineTask+0x270>)
 80011a6:	2205      	movs	r2, #5
 80011a8:	701a      	strb	r2, [r3, #0]
 80011aa:	e7a9      	b.n	8001100 <CommStateMachineTask+0x20>
	  				else if(GSM.TaskToDo.SmsMsgToSend && !GSM.TaskToDo.FtpMsgToSend)
 80011ac:	2a02      	cmp	r2, #2
 80011ae:	d1a7      	bne.n	8001100 <CommStateMachineTask+0x20>
	  					SMSUartTxState = SMSMsgWrite;
 80011b0:	4b67      	ldr	r3, [pc, #412]	; (8001350 <CommStateMachineTask+0x270>)
 80011b2:	2204      	movs	r2, #4
 80011b4:	701a      	strb	r2, [r3, #0]
 80011b6:	e7a3      	b.n	8001100 <CommStateMachineTask+0x20>
	  				inquiryTimeVar = 5000;
 80011b8:	4b64      	ldr	r3, [pc, #400]	; (800134c <CommStateMachineTask+0x26c>)
 80011ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80011be:	801a      	strh	r2, [r3, #0]
	  				HAL_GPIO_WritePin(GSM_RESET_GPIO_Port, GSM_RESET_Pin, SET);
 80011c0:	2201      	movs	r2, #1
 80011c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011c6:	4864      	ldr	r0, [pc, #400]	; (8001358 <CommStateMachineTask+0x278>)
 80011c8:	f001 fc2f 	bl	8002a2a <HAL_GPIO_WritePin>
	  				TaskState = 2;
 80011cc:	4b61      	ldr	r3, [pc, #388]	; (8001354 <CommStateMachineTask+0x274>)
 80011ce:	2202      	movs	r2, #2
 80011d0:	701a      	strb	r2, [r3, #0]
	  				break;
 80011d2:	e795      	b.n	8001100 <CommStateMachineTask+0x20>
	  				inquiryTimeVar = INQUIRY_TIME;
 80011d4:	4b5d      	ldr	r3, [pc, #372]	; (800134c <CommStateMachineTask+0x26c>)
 80011d6:	228c      	movs	r2, #140	; 0x8c
 80011d8:	801a      	strh	r2, [r3, #0]
	  				TaskState = 0;
 80011da:	4b5e      	ldr	r3, [pc, #376]	; (8001354 <CommStateMachineTask+0x274>)
 80011dc:	2200      	movs	r2, #0
 80011de:	701a      	strb	r2, [r3, #0]
	  				SMSUartTxState = Config;
 80011e0:	4b5b      	ldr	r3, [pc, #364]	; (8001350 <CommStateMachineTask+0x270>)
 80011e2:	2202      	movs	r2, #2
 80011e4:	701a      	strb	r2, [r3, #0]
	  				break;
 80011e6:	e78b      	b.n	8001100 <CommStateMachineTask+0x20>
	  		else if(SMSUartTxState == Start)
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d020      	beq.n	800122e <CommStateMachineTask+0x14e>
	  		else if(SMSUartTxState == SMSMsgWrite)
 80011ec:	2b04      	cmp	r3, #4
 80011ee:	d047      	beq.n	8001280 <CommStateMachineTask+0x1a0>
	  		else if(SMSUartTxState == Config)
 80011f0:	2b02      	cmp	r3, #2
 80011f2:	f000 808e 	beq.w	8001312 <CommStateMachineTask+0x232>
	  		else if(SMSUartTxState == FTPMsgWrite)
 80011f6:	2b05      	cmp	r3, #5
 80011f8:	d182      	bne.n	8001100 <CommStateMachineTask+0x20>
	  			inquiryTimeVar = INQUIRY_TIME;
 80011fa:	4b54      	ldr	r3, [pc, #336]	; (800134c <CommStateMachineTask+0x26c>)
 80011fc:	228c      	movs	r2, #140	; 0x8c
 80011fe:	801a      	strh	r2, [r3, #0]
	  			switch(TaskState)
 8001200:	4b5c      	ldr	r3, [pc, #368]	; (8001374 <CommStateMachineTask+0x294>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	2b0f      	cmp	r3, #15
 8001206:	f63f af7b 	bhi.w	8001100 <CommStateMachineTask+0x20>
 800120a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800120e:	00ec      	.short	0x00ec
 8001210:	010000f3 	.word	0x010000f3
 8001214:	011a010b 	.word	0x011a010b
 8001218:	012b0124 	.word	0x012b0124
 800121c:	01450138 	.word	0x01450138
 8001220:	01700152 	.word	0x01700152
 8001224:	0188017d 	.word	0x0188017d
 8001228:	01bf01ad 	.word	0x01bf01ad
 800122c:	01c6      	.short	0x01c6
	  			inquiryTimeVar = 2000;
 800122e:	4b47      	ldr	r3, [pc, #284]	; (800134c <CommStateMachineTask+0x26c>)
 8001230:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001234:	801a      	strh	r2, [r3, #0]
	  			switch(TaskState)
 8001236:	4b50      	ldr	r3, [pc, #320]	; (8001378 <CommStateMachineTask+0x298>)
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	b153      	cbz	r3, 8001252 <CommStateMachineTask+0x172>
 800123c:	2b01      	cmp	r3, #1
 800123e:	f47f af5f 	bne.w	8001100 <CommStateMachineTask+0x20>
	  				if(GSM.CRegStat == 1)
 8001242:	4b4b      	ldr	r3, [pc, #300]	; (8001370 <CommStateMachineTask+0x290>)
 8001244:	7a9b      	ldrb	r3, [r3, #10]
 8001246:	2b01      	cmp	r3, #1
 8001248:	d00a      	beq.n	8001260 <CommStateMachineTask+0x180>
	  					TaskState = 0;
 800124a:	4b4b      	ldr	r3, [pc, #300]	; (8001378 <CommStateMachineTask+0x298>)
 800124c:	2200      	movs	r2, #0
 800124e:	701a      	strb	r2, [r3, #0]
 8001250:	e756      	b.n	8001100 <CommStateMachineTask+0x20>
	  				UartSend("AT+CREG?\r\n");
 8001252:	4844      	ldr	r0, [pc, #272]	; (8001364 <CommStateMachineTask+0x284>)
 8001254:	f000 ffb2 	bl	80021bc <UartSend>
	  				TaskState = 1;
 8001258:	4b47      	ldr	r3, [pc, #284]	; (8001378 <CommStateMachineTask+0x298>)
 800125a:	2201      	movs	r2, #1
 800125c:	701a      	strb	r2, [r3, #0]
	  				break;
 800125e:	e74f      	b.n	8001100 <CommStateMachineTask+0x20>
	  					inquiryTimeVar = INQUIRY_TIME;
 8001260:	4b3a      	ldr	r3, [pc, #232]	; (800134c <CommStateMachineTask+0x26c>)
 8001262:	228c      	movs	r2, #140	; 0x8c
 8001264:	801a      	strh	r2, [r3, #0]
	  					TaskState = 0;
 8001266:	4b44      	ldr	r3, [pc, #272]	; (8001378 <CommStateMachineTask+0x298>)
 8001268:	2200      	movs	r2, #0
 800126a:	701a      	strb	r2, [r3, #0]
	  					SMSUartTxState = Control;
 800126c:	4b38      	ldr	r3, [pc, #224]	; (8001350 <CommStateMachineTask+0x270>)
 800126e:	2203      	movs	r2, #3
 8001270:	701a      	strb	r2, [r3, #0]
	  					GSM.ResetCounter++;
 8001272:	4a3f      	ldr	r2, [pc, #252]	; (8001370 <CommStateMachineTask+0x290>)
 8001274:	f8b2 322e 	ldrh.w	r3, [r2, #558]	; 0x22e
 8001278:	3301      	adds	r3, #1
 800127a:	f8a2 322e 	strh.w	r3, [r2, #558]	; 0x22e
 800127e:	e73f      	b.n	8001100 <CommStateMachineTask+0x20>
	  			switch(TaskState)
 8001280:	4b3e      	ldr	r3, [pc, #248]	; (800137c <CommStateMachineTask+0x29c>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	2b03      	cmp	r3, #3
 8001286:	f63f af3b 	bhi.w	8001100 <CommStateMachineTask+0x20>
 800128a:	e8df f003 	tbb	[pc, r3]
 800128e:	1302      	.short	0x1302
 8001290:	3124      	.short	0x3124
	  				sprintf(ATcmdSMS, "AT+CMGS=\"%s\"\r\n", GSM.SMSNumber);
 8001292:	4c3b      	ldr	r4, [pc, #236]	; (8001380 <CommStateMachineTask+0x2a0>)
 8001294:	4a3b      	ldr	r2, [pc, #236]	; (8001384 <CommStateMachineTask+0x2a4>)
 8001296:	493c      	ldr	r1, [pc, #240]	; (8001388 <CommStateMachineTask+0x2a8>)
 8001298:	4620      	mov	r0, r4
 800129a:	f006 fa8b 	bl	80077b4 <siprintf>
	  				UartSendWoRxCtrl(ATcmdSMS);
 800129e:	4620      	mov	r0, r4
 80012a0:	f000 ffa4 	bl	80021ec <UartSendWoRxCtrl>
	  				inquiryTimeVar = 2000;
 80012a4:	4b29      	ldr	r3, [pc, #164]	; (800134c <CommStateMachineTask+0x26c>)
 80012a6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80012aa:	801a      	strh	r2, [r3, #0]
	  				TaskState = 1;
 80012ac:	4b33      	ldr	r3, [pc, #204]	; (800137c <CommStateMachineTask+0x29c>)
 80012ae:	2201      	movs	r2, #1
 80012b0:	701a      	strb	r2, [r3, #0]
	  				break;
 80012b2:	e725      	b.n	8001100 <CommStateMachineTask+0x20>
	  				HAL_UART_Transmit_IT(&huart1, (uint8_t*) SMSMessage, strlen(SMSMessage));
 80012b4:	4c35      	ldr	r4, [pc, #212]	; (800138c <CommStateMachineTask+0x2ac>)
 80012b6:	4620      	mov	r0, r4
 80012b8:	f7fe ff54 	bl	8000164 <strlen>
 80012bc:	b282      	uxth	r2, r0
 80012be:	4621      	mov	r1, r4
 80012c0:	4833      	ldr	r0, [pc, #204]	; (8001390 <CommStateMachineTask+0x2b0>)
 80012c2:	f003 fba7 	bl	8004a14 <HAL_UART_Transmit_IT>
	  				*Uart1isBusyPtr = 1;
 80012c6:	4b33      	ldr	r3, [pc, #204]	; (8001394 <CommStateMachineTask+0x2b4>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	2201      	movs	r2, #1
 80012cc:	701a      	strb	r2, [r3, #0]
	  				TaskState = 2;
 80012ce:	4b2b      	ldr	r3, [pc, #172]	; (800137c <CommStateMachineTask+0x29c>)
 80012d0:	2202      	movs	r2, #2
 80012d2:	701a      	strb	r2, [r3, #0]
	  				break;
 80012d4:	e714      	b.n	8001100 <CommStateMachineTask+0x20>
	  				HAL_UART_Transmit_IT(&huart1, (uint8_t*) &ctrlZ, 1);
 80012d6:	2201      	movs	r2, #1
 80012d8:	492f      	ldr	r1, [pc, #188]	; (8001398 <CommStateMachineTask+0x2b8>)
 80012da:	482d      	ldr	r0, [pc, #180]	; (8001390 <CommStateMachineTask+0x2b0>)
 80012dc:	f003 fb9a 	bl	8004a14 <HAL_UART_Transmit_IT>
	  				*Uart1isBusyPtr = 1;
 80012e0:	4b2c      	ldr	r3, [pc, #176]	; (8001394 <CommStateMachineTask+0x2b4>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2201      	movs	r2, #1
 80012e6:	701a      	strb	r2, [r3, #0]
	  				TaskState = 3;
 80012e8:	4b24      	ldr	r3, [pc, #144]	; (800137c <CommStateMachineTask+0x29c>)
 80012ea:	2203      	movs	r2, #3
 80012ec:	701a      	strb	r2, [r3, #0]
	  				break;
 80012ee:	e707      	b.n	8001100 <CommStateMachineTask+0x20>
	  				inquiryTimeVar = INQUIRY_TIME;
 80012f0:	4b16      	ldr	r3, [pc, #88]	; (800134c <CommStateMachineTask+0x26c>)
 80012f2:	228c      	movs	r2, #140	; 0x8c
 80012f4:	801a      	strh	r2, [r3, #0]
	  				TaskState = 0;
 80012f6:	2100      	movs	r1, #0
 80012f8:	4b20      	ldr	r3, [pc, #128]	; (800137c <CommStateMachineTask+0x29c>)
 80012fa:	7019      	strb	r1, [r3, #0]
	  				GSM.TaskToDo.SmsMsgToSend = 0;
 80012fc:	4b1c      	ldr	r3, [pc, #112]	; (8001370 <CommStateMachineTask+0x290>)
 80012fe:	f893 222c 	ldrb.w	r2, [r3, #556]	; 0x22c
 8001302:	f361 0241 	bfi	r2, r1, #1, #1
 8001306:	f883 222c 	strb.w	r2, [r3, #556]	; 0x22c
	  				SMSUartTxState = Control;
 800130a:	4b11      	ldr	r3, [pc, #68]	; (8001350 <CommStateMachineTask+0x270>)
 800130c:	2203      	movs	r2, #3
 800130e:	701a      	strb	r2, [r3, #0]
	  				break;
 8001310:	e6f6      	b.n	8001100 <CommStateMachineTask+0x20>
	  			switch(TaskState)
 8001312:	4b22      	ldr	r3, [pc, #136]	; (800139c <CommStateMachineTask+0x2bc>)
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	2b05      	cmp	r3, #5
 8001318:	f63f aef2 	bhi.w	8001100 <CommStateMachineTask+0x20>
 800131c:	e8df f003 	tbb	[pc, r3]
 8001320:	4b440a03 	.word	0x4b440a03
 8001324:	5952      	.short	0x5952
	  				UartSend("ATE0\r\n");
 8001326:	481e      	ldr	r0, [pc, #120]	; (80013a0 <CommStateMachineTask+0x2c0>)
 8001328:	f000 ff48 	bl	80021bc <UartSend>
	  				TaskState = 1;
 800132c:	4b1b      	ldr	r3, [pc, #108]	; (800139c <CommStateMachineTask+0x2bc>)
 800132e:	2201      	movs	r2, #1
 8001330:	701a      	strb	r2, [r3, #0]
	  				break;
 8001332:	e6e5      	b.n	8001100 <CommStateMachineTask+0x20>
	  				UartSend("AT+CMGF=1\r\n");
 8001334:	481b      	ldr	r0, [pc, #108]	; (80013a4 <CommStateMachineTask+0x2c4>)
 8001336:	f000 ff41 	bl	80021bc <UartSend>
	  				TaskState = 2;
 800133a:	4b18      	ldr	r3, [pc, #96]	; (800139c <CommStateMachineTask+0x2bc>)
 800133c:	2202      	movs	r2, #2
 800133e:	701a      	strb	r2, [r3, #0]
	  				break;
 8001340:	e6de      	b.n	8001100 <CommStateMachineTask+0x20>
 8001342:	bf00      	nop
 8001344:	20001749 	.word	0x20001749
 8001348:	20001138 	.word	0x20001138
 800134c:	20000008 	.word	0x20000008
 8001350:	2000153c 	.word	0x2000153c
 8001354:	20001541 	.word	0x20001541
 8001358:	40010c00 	.word	0x40010c00
 800135c:	20001542 	.word	0x20001542
 8001360:	0800b454 	.word	0x0800b454
 8001364:	0800b460 	.word	0x0800b460
 8001368:	0800b46c 	.word	0x0800b46c
 800136c:	0800b488 	.word	0x0800b488
 8001370:	20000f08 	.word	0x20000f08
 8001374:	2000153d 	.word	0x2000153d
 8001378:	20001540 	.word	0x20001540
 800137c:	2000153f 	.word	0x2000153f
 8001380:	20000420 	.word	0x20000420
 8001384:	20000f1a 	.word	0x20000f1a
 8001388:	0800b494 	.word	0x0800b494
 800138c:	2000144c 	.word	0x2000144c
 8001390:	200017f8 	.word	0x200017f8
 8001394:	20000004 	.word	0x20000004
 8001398:	0800b635 	.word	0x0800b635
 800139c:	2000153e 	.word	0x2000153e
 80013a0:	0800b4a4 	.word	0x0800b4a4
 80013a4:	0800b4ac 	.word	0x0800b4ac
	  				UartSend("AT+CLTS=1\r\n");
 80013a8:	4886      	ldr	r0, [pc, #536]	; (80015c4 <CommStateMachineTask+0x4e4>)
 80013aa:	f000 ff07 	bl	80021bc <UartSend>
	  				TaskState = 3;
 80013ae:	4b86      	ldr	r3, [pc, #536]	; (80015c8 <CommStateMachineTask+0x4e8>)
 80013b0:	2203      	movs	r2, #3
 80013b2:	701a      	strb	r2, [r3, #0]
	  				break;
 80013b4:	e6a4      	b.n	8001100 <CommStateMachineTask+0x20>
	  				UartSend("AT+CNMI=0,0,0,0,0\r\n");
 80013b6:	4885      	ldr	r0, [pc, #532]	; (80015cc <CommStateMachineTask+0x4ec>)
 80013b8:	f000 ff00 	bl	80021bc <UartSend>
	  				TaskState = 4;
 80013bc:	4b82      	ldr	r3, [pc, #520]	; (80015c8 <CommStateMachineTask+0x4e8>)
 80013be:	2204      	movs	r2, #4
 80013c0:	701a      	strb	r2, [r3, #0]
	  				break;
 80013c2:	e69d      	b.n	8001100 <CommStateMachineTask+0x20>
	  				UartSend("AT+CIURC=0\r\n");
 80013c4:	4882      	ldr	r0, [pc, #520]	; (80015d0 <CommStateMachineTask+0x4f0>)
 80013c6:	f000 fef9 	bl	80021bc <UartSend>
	  				TaskState = 5;
 80013ca:	4b7f      	ldr	r3, [pc, #508]	; (80015c8 <CommStateMachineTask+0x4e8>)
 80013cc:	2205      	movs	r2, #5
 80013ce:	701a      	strb	r2, [r3, #0]
	  				break;
 80013d0:	e696      	b.n	8001100 <CommStateMachineTask+0x20>
	  				UartSend("AT&W\r\n");
 80013d2:	4880      	ldr	r0, [pc, #512]	; (80015d4 <CommStateMachineTask+0x4f4>)
 80013d4:	f000 fef2 	bl	80021bc <UartSend>
	  				TaskState = 0;
 80013d8:	4b7b      	ldr	r3, [pc, #492]	; (80015c8 <CommStateMachineTask+0x4e8>)
 80013da:	2200      	movs	r2, #0
 80013dc:	701a      	strb	r2, [r3, #0]
	  				SMSUartTxState = Start;
 80013de:	4b7e      	ldr	r3, [pc, #504]	; (80015d8 <CommStateMachineTask+0x4f8>)
 80013e0:	2201      	movs	r2, #1
 80013e2:	701a      	strb	r2, [r3, #0]
	  				break;
 80013e4:	e68c      	b.n	8001100 <CommStateMachineTask+0x20>
	  				UartSend("AT+SAPBR=3,1,\"Contype\",\"GPRS\"\r\n");
 80013e6:	487d      	ldr	r0, [pc, #500]	; (80015dc <CommStateMachineTask+0x4fc>)
 80013e8:	f000 fee8 	bl	80021bc <UartSend>
	  				TaskState = 1;
 80013ec:	4b7c      	ldr	r3, [pc, #496]	; (80015e0 <CommStateMachineTask+0x500>)
 80013ee:	2201      	movs	r2, #1
 80013f0:	701a      	strb	r2, [r3, #0]
	  				break;
 80013f2:	e685      	b.n	8001100 <CommStateMachineTask+0x20>
	  				sprintf(ATcmdFtp, "AT+SAPBR=3,1,\"APN\",\"%s\"\r\n", GSM.ConfigFlash.apn);
 80013f4:	4c7b      	ldr	r4, [pc, #492]	; (80015e4 <CommStateMachineTask+0x504>)
 80013f6:	4a7c      	ldr	r2, [pc, #496]	; (80015e8 <CommStateMachineTask+0x508>)
 80013f8:	497c      	ldr	r1, [pc, #496]	; (80015ec <CommStateMachineTask+0x50c>)
 80013fa:	4620      	mov	r0, r4
 80013fc:	f006 f9da 	bl	80077b4 <siprintf>
					UartSend(ATcmdFtp);
 8001400:	4620      	mov	r0, r4
 8001402:	f000 fedb 	bl	80021bc <UartSend>
	  				TaskState = 2;
 8001406:	4b76      	ldr	r3, [pc, #472]	; (80015e0 <CommStateMachineTask+0x500>)
 8001408:	2202      	movs	r2, #2
 800140a:	701a      	strb	r2, [r3, #0]
	  				break;
 800140c:	e678      	b.n	8001100 <CommStateMachineTask+0x20>
	  				UartSend("AT+SAPBR=1,1\r\n");
 800140e:	4878      	ldr	r0, [pc, #480]	; (80015f0 <CommStateMachineTask+0x510>)
 8001410:	f000 fed4 	bl	80021bc <UartSend>
	  				inquiryTimeVar = 5000;
 8001414:	4b77      	ldr	r3, [pc, #476]	; (80015f4 <CommStateMachineTask+0x514>)
 8001416:	f241 3288 	movw	r2, #5000	; 0x1388
 800141a:	801a      	strh	r2, [r3, #0]
	  				TaskState = 3;
 800141c:	4b70      	ldr	r3, [pc, #448]	; (80015e0 <CommStateMachineTask+0x500>)
 800141e:	2203      	movs	r2, #3
 8001420:	701a      	strb	r2, [r3, #0]
	  				break;
 8001422:	e66d      	b.n	8001100 <CommStateMachineTask+0x20>
	  				if(GSM.ReceivedState == 1)
 8001424:	4b74      	ldr	r3, [pc, #464]	; (80015f8 <CommStateMachineTask+0x518>)
 8001426:	7a1b      	ldrb	r3, [r3, #8]
 8001428:	2b01      	cmp	r3, #1
 800142a:	d103      	bne.n	8001434 <CommStateMachineTask+0x354>
	  					TaskState = 4;
 800142c:	4b6c      	ldr	r3, [pc, #432]	; (80015e0 <CommStateMachineTask+0x500>)
 800142e:	2204      	movs	r2, #4
 8001430:	701a      	strb	r2, [r3, #0]
 8001432:	e665      	b.n	8001100 <CommStateMachineTask+0x20>
	  					TaskState = 0;
 8001434:	4b6a      	ldr	r3, [pc, #424]	; (80015e0 <CommStateMachineTask+0x500>)
 8001436:	2200      	movs	r2, #0
 8001438:	701a      	strb	r2, [r3, #0]
	  					UartSend("AT+SAPBR=0,1\r\n");
 800143a:	4870      	ldr	r0, [pc, #448]	; (80015fc <CommStateMachineTask+0x51c>)
 800143c:	f000 febe 	bl	80021bc <UartSend>
 8001440:	e65e      	b.n	8001100 <CommStateMachineTask+0x20>
	  				UartSend("AT+SAPBR=2,1\r\n");
 8001442:	486f      	ldr	r0, [pc, #444]	; (8001600 <CommStateMachineTask+0x520>)
 8001444:	f000 feba 	bl	80021bc <UartSend>
	  				inquiryTimeVar = INQUIRY_TIME;
 8001448:	4b6a      	ldr	r3, [pc, #424]	; (80015f4 <CommStateMachineTask+0x514>)
 800144a:	228c      	movs	r2, #140	; 0x8c
 800144c:	801a      	strh	r2, [r3, #0]
	  				TaskState = 5;
 800144e:	4b64      	ldr	r3, [pc, #400]	; (80015e0 <CommStateMachineTask+0x500>)
 8001450:	2205      	movs	r2, #5
 8001452:	701a      	strb	r2, [r3, #0]
	  				break;
 8001454:	e654      	b.n	8001100 <CommStateMachineTask+0x20>
	  				UartSend("AT+FTPCID=1\r\n");
 8001456:	486b      	ldr	r0, [pc, #428]	; (8001604 <CommStateMachineTask+0x524>)
 8001458:	f000 feb0 	bl	80021bc <UartSend>
	  				TaskState = 6;
 800145c:	4b60      	ldr	r3, [pc, #384]	; (80015e0 <CommStateMachineTask+0x500>)
 800145e:	2206      	movs	r2, #6
 8001460:	701a      	strb	r2, [r3, #0]
	  				break;
 8001462:	e64d      	b.n	8001100 <CommStateMachineTask+0x20>
	  				sprintf(ATcmdFtp, "AT+FTPSERV=\"%s\"\r\n", GSM.ConfigFlash.server);
 8001464:	4c5f      	ldr	r4, [pc, #380]	; (80015e4 <CommStateMachineTask+0x504>)
 8001466:	4a68      	ldr	r2, [pc, #416]	; (8001608 <CommStateMachineTask+0x528>)
 8001468:	4968      	ldr	r1, [pc, #416]	; (800160c <CommStateMachineTask+0x52c>)
 800146a:	4620      	mov	r0, r4
 800146c:	f006 f9a2 	bl	80077b4 <siprintf>
	  				UartSend(ATcmdFtp);
 8001470:	4620      	mov	r0, r4
 8001472:	f000 fea3 	bl	80021bc <UartSend>
	  				TaskState = 7;
 8001476:	4b5a      	ldr	r3, [pc, #360]	; (80015e0 <CommStateMachineTask+0x500>)
 8001478:	2207      	movs	r2, #7
 800147a:	701a      	strb	r2, [r3, #0]
	  				break;
 800147c:	e640      	b.n	8001100 <CommStateMachineTask+0x20>
	  				sprintf(ATcmdFtp, "AT+FTPUN=\"%s\"\r\n", GSM.ConfigFlash.login);
 800147e:	4c59      	ldr	r4, [pc, #356]	; (80015e4 <CommStateMachineTask+0x504>)
 8001480:	4a63      	ldr	r2, [pc, #396]	; (8001610 <CommStateMachineTask+0x530>)
 8001482:	4964      	ldr	r1, [pc, #400]	; (8001614 <CommStateMachineTask+0x534>)
 8001484:	4620      	mov	r0, r4
 8001486:	f006 f995 	bl	80077b4 <siprintf>
	  				UartSend(ATcmdFtp);
 800148a:	4620      	mov	r0, r4
 800148c:	f000 fe96 	bl	80021bc <UartSend>
	  				TaskState = 8;
 8001490:	4b53      	ldr	r3, [pc, #332]	; (80015e0 <CommStateMachineTask+0x500>)
 8001492:	2208      	movs	r2, #8
 8001494:	701a      	strb	r2, [r3, #0]
	  				break;
 8001496:	e633      	b.n	8001100 <CommStateMachineTask+0x20>
	  				sprintf(ATcmdFtp, "AT+FTPPW=\"%s\"\r\n", GSM.ConfigFlash.password);
 8001498:	4c52      	ldr	r4, [pc, #328]	; (80015e4 <CommStateMachineTask+0x504>)
 800149a:	4a5f      	ldr	r2, [pc, #380]	; (8001618 <CommStateMachineTask+0x538>)
 800149c:	495f      	ldr	r1, [pc, #380]	; (800161c <CommStateMachineTask+0x53c>)
 800149e:	4620      	mov	r0, r4
 80014a0:	f006 f988 	bl	80077b4 <siprintf>
	  				UartSend(ATcmdFtp);
 80014a4:	4620      	mov	r0, r4
 80014a6:	f000 fe89 	bl	80021bc <UartSend>
	  				TaskState = 9;
 80014aa:	4b4d      	ldr	r3, [pc, #308]	; (80015e0 <CommStateMachineTask+0x500>)
 80014ac:	2209      	movs	r2, #9
 80014ae:	701a      	strb	r2, [r3, #0]
	  				break;
 80014b0:	e626      	b.n	8001100 <CommStateMachineTask+0x20>
	  				sprintf(ATcmdFtp, "AT+FTPPUTNAME=\"Termo%s%.2u%.2u%.2u%.2u%.2u%.2u.txt\"\r\n",GSM.ConfigFlash.deviceNumber, year, month, day, hour, minute, second);
 80014b2:	4c4c      	ldr	r4, [pc, #304]	; (80015e4 <CommStateMachineTask+0x504>)
 80014b4:	4b5a      	ldr	r3, [pc, #360]	; (8001620 <CommStateMachineTask+0x540>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	9304      	str	r3, [sp, #16]
 80014ba:	4b5a      	ldr	r3, [pc, #360]	; (8001624 <CommStateMachineTask+0x544>)
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	9303      	str	r3, [sp, #12]
 80014c0:	4b59      	ldr	r3, [pc, #356]	; (8001628 <CommStateMachineTask+0x548>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	9302      	str	r3, [sp, #8]
 80014c6:	4b59      	ldr	r3, [pc, #356]	; (800162c <CommStateMachineTask+0x54c>)
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	9301      	str	r3, [sp, #4]
 80014cc:	4b58      	ldr	r3, [pc, #352]	; (8001630 <CommStateMachineTask+0x550>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	9300      	str	r3, [sp, #0]
 80014d2:	4b58      	ldr	r3, [pc, #352]	; (8001634 <CommStateMachineTask+0x554>)
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	4a58      	ldr	r2, [pc, #352]	; (8001638 <CommStateMachineTask+0x558>)
 80014d8:	4958      	ldr	r1, [pc, #352]	; (800163c <CommStateMachineTask+0x55c>)
 80014da:	4620      	mov	r0, r4
 80014dc:	f006 f96a 	bl	80077b4 <siprintf>
	  				UartSend(ATcmdFtp);
 80014e0:	4620      	mov	r0, r4
 80014e2:	f000 fe6b 	bl	80021bc <UartSend>
	  				TaskState = 10;
 80014e6:	4b3e      	ldr	r3, [pc, #248]	; (80015e0 <CommStateMachineTask+0x500>)
 80014e8:	220a      	movs	r2, #10
 80014ea:	701a      	strb	r2, [r3, #0]
	  				break;
 80014ec:	e608      	b.n	8001100 <CommStateMachineTask+0x20>
	  				sprintf(ATcmdFtp, "AT+FTPPUTPATH=\"%s\"\r\n", GSM.ConfigFlash.path);
 80014ee:	4c3d      	ldr	r4, [pc, #244]	; (80015e4 <CommStateMachineTask+0x504>)
 80014f0:	4a53      	ldr	r2, [pc, #332]	; (8001640 <CommStateMachineTask+0x560>)
 80014f2:	4954      	ldr	r1, [pc, #336]	; (8001644 <CommStateMachineTask+0x564>)
 80014f4:	4620      	mov	r0, r4
 80014f6:	f006 f95d 	bl	80077b4 <siprintf>
	  				UartSend(ATcmdFtp);
 80014fa:	4620      	mov	r0, r4
 80014fc:	f000 fe5e 	bl	80021bc <UartSend>
	  				TaskState = 11;
 8001500:	4b37      	ldr	r3, [pc, #220]	; (80015e0 <CommStateMachineTask+0x500>)
 8001502:	220b      	movs	r2, #11
 8001504:	701a      	strb	r2, [r3, #0]
	  				break;
 8001506:	e5fb      	b.n	8001100 <CommStateMachineTask+0x20>
	  				UartSend("AT+FTPPUT=1\r\n");
 8001508:	484f      	ldr	r0, [pc, #316]	; (8001648 <CommStateMachineTask+0x568>)
 800150a:	f000 fe57 	bl	80021bc <UartSend>
	  				inquiryTimeVar = 5000;
 800150e:	4b39      	ldr	r3, [pc, #228]	; (80015f4 <CommStateMachineTask+0x514>)
 8001510:	f241 3288 	movw	r2, #5000	; 0x1388
 8001514:	801a      	strh	r2, [r3, #0]
	  				TaskState = 12;
 8001516:	4b32      	ldr	r3, [pc, #200]	; (80015e0 <CommStateMachineTask+0x500>)
 8001518:	220c      	movs	r2, #12
 800151a:	701a      	strb	r2, [r3, #0]
	  				break;
 800151c:	e5f0      	b.n	8001100 <CommStateMachineTask+0x20>
	  				if(GSM.FtpPut.status != 1)
 800151e:	4b36      	ldr	r3, [pc, #216]	; (80015f8 <CommStateMachineTask+0x518>)
 8001520:	7b5b      	ldrb	r3, [r3, #13]
 8001522:	2b01      	cmp	r3, #1
 8001524:	d003      	beq.n	800152e <CommStateMachineTask+0x44e>
	  					TaskState = 0;
 8001526:	4b2e      	ldr	r3, [pc, #184]	; (80015e0 <CommStateMachineTask+0x500>)
 8001528:	2200      	movs	r2, #0
 800152a:	701a      	strb	r2, [r3, #0]
	  					break;
 800152c:	e5e8      	b.n	8001100 <CommStateMachineTask+0x20>
	  				if(FTPMessageBoxRecordSwitch == 2)
 800152e:	4b47      	ldr	r3, [pc, #284]	; (800164c <CommStateMachineTask+0x56c>)
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	2b02      	cmp	r3, #2
 8001534:	d00e      	beq.n	8001554 <CommStateMachineTask+0x474>
	  				else if(FTPMessageBoxRecordSwitch == 1)
 8001536:	2b01      	cmp	r3, #1
 8001538:	d011      	beq.n	800155e <CommStateMachineTask+0x47e>
	  				sprintf(ATcmdFtp,"AT+FTPPUT=2,%u\r\n", MsgLen);
 800153a:	4d2a      	ldr	r5, [pc, #168]	; (80015e4 <CommStateMachineTask+0x504>)
 800153c:	4622      	mov	r2, r4
 800153e:	4944      	ldr	r1, [pc, #272]	; (8001650 <CommStateMachineTask+0x570>)
 8001540:	4628      	mov	r0, r5
 8001542:	f006 f937 	bl	80077b4 <siprintf>
	  				UartSendWoRxCtrl(ATcmdFtp);
 8001546:	4628      	mov	r0, r5
 8001548:	f000 fe50 	bl	80021ec <UartSendWoRxCtrl>
					TaskState = 13;
 800154c:	4b24      	ldr	r3, [pc, #144]	; (80015e0 <CommStateMachineTask+0x500>)
 800154e:	220d      	movs	r2, #13
 8001550:	701a      	strb	r2, [r3, #0]
					break;
 8001552:	e5d5      	b.n	8001100 <CommStateMachineTask+0x20>
	  					MsgLen = strlen(FTPMessageBox1);
 8001554:	483f      	ldr	r0, [pc, #252]	; (8001654 <CommStateMachineTask+0x574>)
 8001556:	f7fe fe05 	bl	8000164 <strlen>
 800155a:	b284      	uxth	r4, r0
 800155c:	e7ed      	b.n	800153a <CommStateMachineTask+0x45a>
	  					MsgLen = strlen(FTPMessageBox2);
 800155e:	483e      	ldr	r0, [pc, #248]	; (8001658 <CommStateMachineTask+0x578>)
 8001560:	f7fe fe00 	bl	8000164 <strlen>
 8001564:	b284      	uxth	r4, r0
 8001566:	e7e8      	b.n	800153a <CommStateMachineTask+0x45a>
	  				if(FTPMessageBoxRecordSwitch == 2)
 8001568:	4b38      	ldr	r3, [pc, #224]	; (800164c <CommStateMachineTask+0x56c>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	2b02      	cmp	r3, #2
 800156e:	d005      	beq.n	800157c <CommStateMachineTask+0x49c>
	  				else if(FTPMessageBoxRecordSwitch == 1)
 8001570:	2b01      	cmp	r3, #1
 8001572:	d007      	beq.n	8001584 <CommStateMachineTask+0x4a4>
	  				TaskState = 14;
 8001574:	4b1a      	ldr	r3, [pc, #104]	; (80015e0 <CommStateMachineTask+0x500>)
 8001576:	220e      	movs	r2, #14
 8001578:	701a      	strb	r2, [r3, #0]
	  				break;
 800157a:	e5c1      	b.n	8001100 <CommStateMachineTask+0x20>
	  					UartSendWoRxCtrl(FTPMessageBox1);
 800157c:	4835      	ldr	r0, [pc, #212]	; (8001654 <CommStateMachineTask+0x574>)
 800157e:	f000 fe35 	bl	80021ec <UartSendWoRxCtrl>
 8001582:	e7f7      	b.n	8001574 <CommStateMachineTask+0x494>
	  					UartSendWoRxCtrl(FTPMessageBox2);
 8001584:	4834      	ldr	r0, [pc, #208]	; (8001658 <CommStateMachineTask+0x578>)
 8001586:	f000 fe31 	bl	80021ec <UartSendWoRxCtrl>
 800158a:	e7f3      	b.n	8001574 <CommStateMachineTask+0x494>
	  				UartSend("AT+FTPPUT=2,0\r\n");
 800158c:	4833      	ldr	r0, [pc, #204]	; (800165c <CommStateMachineTask+0x57c>)
 800158e:	f000 fe15 	bl	80021bc <UartSend>
	  				TaskState = 15;
 8001592:	4b13      	ldr	r3, [pc, #76]	; (80015e0 <CommStateMachineTask+0x500>)
 8001594:	220f      	movs	r2, #15
 8001596:	701a      	strb	r2, [r3, #0]
	  				break;
 8001598:	e5b2      	b.n	8001100 <CommStateMachineTask+0x20>
	  				UartSend("AT+SAPBR=0,1\r\n");
 800159a:	4818      	ldr	r0, [pc, #96]	; (80015fc <CommStateMachineTask+0x51c>)
 800159c:	f000 fe0e 	bl	80021bc <UartSend>
	  				TaskState = 0;
 80015a0:	2100      	movs	r1, #0
 80015a2:	4b0f      	ldr	r3, [pc, #60]	; (80015e0 <CommStateMachineTask+0x500>)
 80015a4:	7019      	strb	r1, [r3, #0]
	  				GSM.TaskToDo.FtpMsgToSend = 0;
 80015a6:	4b14      	ldr	r3, [pc, #80]	; (80015f8 <CommStateMachineTask+0x518>)
 80015a8:	f893 222c 	ldrb.w	r2, [r3, #556]	; 0x22c
 80015ac:	f361 0200 	bfi	r2, r1, #0, #1
 80015b0:	f883 222c 	strb.w	r2, [r3, #556]	; 0x22c
	  				SMSUartTxState = Control;
 80015b4:	4b08      	ldr	r3, [pc, #32]	; (80015d8 <CommStateMachineTask+0x4f8>)
 80015b6:	2203      	movs	r2, #3
 80015b8:	701a      	strb	r2, [r3, #0]
	  				inquiryTimeVar = INQUIRY_TIME;
 80015ba:	4b0e      	ldr	r3, [pc, #56]	; (80015f4 <CommStateMachineTask+0x514>)
 80015bc:	228c      	movs	r2, #140	; 0x8c
 80015be:	801a      	strh	r2, [r3, #0]
}
 80015c0:	e59e      	b.n	8001100 <CommStateMachineTask+0x20>
 80015c2:	bf00      	nop
 80015c4:	0800b4b8 	.word	0x0800b4b8
 80015c8:	2000153e 	.word	0x2000153e
 80015cc:	0800b4c4 	.word	0x0800b4c4
 80015d0:	0800b4d8 	.word	0x0800b4d8
 80015d4:	0800b4e8 	.word	0x0800b4e8
 80015d8:	2000153c 	.word	0x2000153c
 80015dc:	0800b4f0 	.word	0x0800b4f0
 80015e0:	2000153d 	.word	0x2000153d
 80015e4:	200003a0 	.word	0x200003a0
 80015e8:	20000ff1 	.word	0x20000ff1
 80015ec:	0800b510 	.word	0x0800b510
 80015f0:	0800b52c 	.word	0x0800b52c
 80015f4:	20000008 	.word	0x20000008
 80015f8:	20000f08 	.word	0x20000f08
 80015fc:	0800b53c 	.word	0x0800b53c
 8001600:	0800b54c 	.word	0x0800b54c
 8001604:	0800b55c 	.word	0x0800b55c
 8001608:	20000f68 	.word	0x20000f68
 800160c:	0800b56c 	.word	0x0800b56c
 8001610:	20000f2c 	.word	0x20000f2c
 8001614:	0800b580 	.word	0x0800b580
 8001618:	20000f4a 	.word	0x20000f4a
 800161c:	0800b590 	.word	0x0800b590
 8001620:	20001757 	.word	0x20001757
 8001624:	20001755 	.word	0x20001755
 8001628:	20001754 	.word	0x20001754
 800162c:	2000174a 	.word	0x2000174a
 8001630:	20001756 	.word	0x20001756
 8001634:	20001761 	.word	0x20001761
 8001638:	20000fec 	.word	0x20000fec
 800163c:	0800b5a0 	.word	0x0800b5a0
 8001640:	20000f9a 	.word	0x20000f9a
 8001644:	0800b5d8 	.word	0x0800b5d8
 8001648:	0800b5f0 	.word	0x0800b5f0
 800164c:	20000000 	.word	0x20000000
 8001650:	0800b600 	.word	0x0800b600
 8001654:	200004a0 	.word	0x200004a0
 8001658:	200009d4 	.word	0x200009d4
 800165c:	0800b614 	.word	0x0800b614

08001660 <CDC_ReveiveCallback>:

void CDC_ReveiveCallback(uint8_t *Buffer, uint8_t Length)
{
	if(Length > 0)
 8001660:	2900      	cmp	r1, #0
 8001662:	d034      	beq.n	80016ce <CDC_ReveiveCallback+0x6e>
{
 8001664:	b530      	push	{r4, r5, lr}
 8001666:	b083      	sub	sp, #12
 8001668:	4604      	mov	r4, r0
 800166a:	460d      	mov	r5, r1
		{
			volatile uint8_t i = 0;
 800166c:	2300      	movs	r3, #0
 800166e:	f88d 3007 	strb.w	r3, [sp, #7]
			while(i < Length)
 8001672:	e013      	b.n	800169c <CDC_ReveiveCallback+0x3c>
			{
				if(Buffer[i] != '\r')
				{
					if (RB_OK == Ring_Buffer_Write(&USBConfBuffer, Buffer[i]))
 8001674:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001678:	b2db      	uxtb	r3, r3
 800167a:	5ce1      	ldrb	r1, [r4, r3]
 800167c:	4814      	ldr	r0, [pc, #80]	; (80016d0 <CDC_ReveiveCallback+0x70>)
 800167e:	f000 fbb6 	bl	8001dee <Ring_Buffer_Write>
 8001682:	b958      	cbnz	r0, 800169c <CDC_ReveiveCallback+0x3c>
					{
						if(Buffer[i] == ENDLINE)
 8001684:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001688:	b2db      	uxtb	r3, r3
 800168a:	5ce3      	ldrb	r3, [r4, r3]
 800168c:	2b0a      	cmp	r3, #10
 800168e:	d017      	beq.n	80016c0 <CDC_ReveiveCallback+0x60>
						{
							USBLineCounter++;
						}
						i++;
 8001690:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001694:	3301      	adds	r3, #1
 8001696:	b2db      	uxtb	r3, r3
 8001698:	f88d 3007 	strb.w	r3, [sp, #7]
			while(i < Length)
 800169c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	42ab      	cmp	r3, r5
 80016a4:	d211      	bcs.n	80016ca <CDC_ReveiveCallback+0x6a>
				if(Buffer[i] != '\r')
 80016a6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	5ce3      	ldrb	r3, [r4, r3]
 80016ae:	2b0d      	cmp	r3, #13
 80016b0:	d1e0      	bne.n	8001674 <CDC_ReveiveCallback+0x14>
					}
				}
				else i++;
 80016b2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80016b6:	3301      	adds	r3, #1
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	f88d 3007 	strb.w	r3, [sp, #7]
 80016be:	e7ed      	b.n	800169c <CDC_ReveiveCallback+0x3c>
							USBLineCounter++;
 80016c0:	4a04      	ldr	r2, [pc, #16]	; (80016d4 <CDC_ReveiveCallback+0x74>)
 80016c2:	7813      	ldrb	r3, [r2, #0]
 80016c4:	3301      	adds	r3, #1
 80016c6:	7013      	strb	r3, [r2, #0]
 80016c8:	e7e2      	b.n	8001690 <CDC_ReveiveCallback+0x30>
			}
		}


}
 80016ca:	b003      	add	sp, #12
 80016cc:	bd30      	pop	{r4, r5, pc}
 80016ce:	4770      	bx	lr
 80016d0:	20001544 	.word	0x20001544
 80016d4:	20001748 	.word	0x20001748

080016d8 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016d8:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016da:	e7fe      	b.n	80016da <Error_Handler+0x2>

080016dc <SystemClock_Config>:
{
 80016dc:	b500      	push	{lr}
 80016de:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016e0:	2228      	movs	r2, #40	; 0x28
 80016e2:	2100      	movs	r1, #0
 80016e4:	eb0d 0002 	add.w	r0, sp, r2
 80016e8:	f005 fbfc 	bl	8006ee4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016ec:	2300      	movs	r3, #0
 80016ee:	9305      	str	r3, [sp, #20]
 80016f0:	9306      	str	r3, [sp, #24]
 80016f2:	9307      	str	r3, [sp, #28]
 80016f4:	9308      	str	r3, [sp, #32]
 80016f6:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016f8:	9301      	str	r3, [sp, #4]
 80016fa:	9302      	str	r3, [sp, #8]
 80016fc:	9303      	str	r3, [sp, #12]
 80016fe:	9304      	str	r3, [sp, #16]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001700:	2309      	movs	r3, #9
 8001702:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001704:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001708:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800170a:	2201      	movs	r2, #1
 800170c:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800170e:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001710:	2202      	movs	r2, #2
 8001712:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001714:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001716:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800171a:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800171c:	a80a      	add	r0, sp, #40	; 0x28
 800171e:	f002 f989 	bl	8003a34 <HAL_RCC_OscConfig>
 8001722:	b9c0      	cbnz	r0, 8001756 <SystemClock_Config+0x7a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001724:	230f      	movs	r3, #15
 8001726:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001728:	2102      	movs	r1, #2
 800172a:	9106      	str	r1, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800172c:	2300      	movs	r3, #0
 800172e:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001730:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001734:	9208      	str	r2, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001736:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001738:	a805      	add	r0, sp, #20
 800173a:	f002 fbbb 	bl	8003eb4 <HAL_RCC_ClockConfig>
 800173e:	b960      	cbnz	r0, 800175a <SystemClock_Config+0x7e>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001740:	2310      	movs	r3, #16
 8001742:	9301      	str	r3, [sp, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8001744:	2300      	movs	r3, #0
 8001746:	9304      	str	r3, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001748:	a801      	add	r0, sp, #4
 800174a:	f002 fc8f 	bl	800406c <HAL_RCCEx_PeriphCLKConfig>
 800174e:	b930      	cbnz	r0, 800175e <SystemClock_Config+0x82>
}
 8001750:	b015      	add	sp, #84	; 0x54
 8001752:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001756:	f7ff ffbf 	bl	80016d8 <Error_Handler>
    Error_Handler();
 800175a:	f7ff ffbd 	bl	80016d8 <Error_Handler>
    Error_Handler();
 800175e:	f7ff ffbb 	bl	80016d8 <Error_Handler>
	...

08001764 <main>:
{
 8001764:	b500      	push	{lr}
 8001766:	b085      	sub	sp, #20
  HAL_Init();
 8001768:	f000 fdcc 	bl	8002304 <HAL_Init>
  SystemClock_Config();
 800176c:	f7ff ffb6 	bl	80016dc <SystemClock_Config>
  MX_GPIO_Init();
 8001770:	f7ff fb7a 	bl	8000e68 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001774:	f000 fc8e 	bl	8002094 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 8001778:	f000 fc24 	bl	8001fc4 <MX_TIM4_Init>
  MX_TIM3_Init();
 800177c:	f000 fbea 	bl	8001f54 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8001780:	f000 fca2 	bl	80020c8 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 8001784:	f005 f952 	bl	8006a2c <MX_USB_DEVICE_Init>
  MX_IWDG_Init();
 8001788:	f7ff fbd6 	bl	8000f38 <MX_IWDG_Init>
  MX_NVIC_Init();
 800178c:	f7ff fbe8 	bl	8000f60 <MX_NVIC_Init>
  HAL_UART_Receive_IT(&huart1, &ReceiveTmp, 1);
 8001790:	2201      	movs	r2, #1
 8001792:	495c      	ldr	r1, [pc, #368]	; (8001904 <main+0x1a0>)
 8001794:	485c      	ldr	r0, [pc, #368]	; (8001908 <main+0x1a4>)
 8001796:	f003 fb02 	bl	8004d9e <HAL_UART_Receive_IT>
  if (ds18b20_read_address(ds_address) != HAL_OK)
 800179a:	485c      	ldr	r0, [pc, #368]	; (800190c <main+0x1a8>)
 800179c:	f7ff fb2b 	bl	8000df6 <ds18b20_read_address>
 80017a0:	b108      	cbz	r0, 80017a6 <main+0x42>
      Error_Handler();
 80017a2:	f7ff ff99 	bl	80016d8 <Error_Handler>
  SMSUartTxState = Reset;
 80017a6:	4b5a      	ldr	r3, [pc, #360]	; (8001910 <main+0x1ac>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	701a      	strb	r2, [r3, #0]
  LastTickForSim800 = HAL_GetTick();
 80017ac:	f000 fdc8 	bl	8002340 <HAL_GetTick>
 80017b0:	4b58      	ldr	r3, [pc, #352]	; (8001914 <main+0x1b0>)
 80017b2:	6018      	str	r0, [r3, #0]
  LastTickTempMeasure = HAL_GetTick();
 80017b4:	f000 fdc4 	bl	8002340 <HAL_GetTick>
 80017b8:	4b57      	ldr	r3, [pc, #348]	; (8001918 <main+0x1b4>)
 80017ba:	6018      	str	r0, [r3, #0]
  memcpy(GSM.FlashBuff, 0x0801FC00, 128*4);
 80017bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017c0:	4956      	ldr	r1, [pc, #344]	; (800191c <main+0x1b8>)
 80017c2:	4857      	ldr	r0, [pc, #348]	; (8001920 <main+0x1bc>)
 80017c4:	f005 fb80 	bl	8006ec8 <memcpy>
  HAL_TIM_Base_Start_IT(&htim3);
 80017c8:	4856      	ldr	r0, [pc, #344]	; (8001924 <main+0x1c0>)
 80017ca:	f002 fd09 	bl	80041e0 <HAL_TIM_Base_Start_IT>
 80017ce:	e030      	b.n	8001832 <main+0xce>
			  temperature = ds18b20_get_temp_wo_fp(NULL);
 80017d0:	2000      	movs	r0, #0
 80017d2:	f7ff fb32 	bl	8000e3a <ds18b20_get_temp_wo_fp>
 80017d6:	4b54      	ldr	r3, [pc, #336]	; (8001928 <main+0x1c4>)
 80017d8:	6018      	str	r0, [r3, #0]
			  tempMeasureFlag = 0;
 80017da:	4b54      	ldr	r3, [pc, #336]	; (800192c <main+0x1c8>)
 80017dc:	2200      	movs	r2, #0
 80017de:	701a      	strb	r2, [r3, #0]
	  if(LineCounter)
 80017e0:	4b53      	ldr	r3, [pc, #332]	; (8001930 <main+0x1cc>)
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d13a      	bne.n	800185e <main+0xfa>
	  if(USBLineCounter)
 80017e8:	4b52      	ldr	r3, [pc, #328]	; (8001934 <main+0x1d0>)
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d143      	bne.n	8001878 <main+0x114>
	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GSM.ReceivedState);
 80017f0:	4c51      	ldr	r4, [pc, #324]	; (8001938 <main+0x1d4>)
 80017f2:	7a22      	ldrb	r2, [r4, #8]
 80017f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017f8:	4850      	ldr	r0, [pc, #320]	; (800193c <main+0x1d8>)
 80017fa:	f001 f916 	bl	8002a2a <HAL_GPIO_WritePin>
	  CommStateMachineTask();
 80017fe:	f7ff fc6f 	bl	80010e0 <CommStateMachineTask>
	  if(GSM.ErrorCounter > 10)
 8001802:	f894 3224 	ldrb.w	r3, [r4, #548]	; 0x224
 8001806:	2b0a      	cmp	r3, #10
 8001808:	d904      	bls.n	8001814 <main+0xb0>
		  SMSUartTxState = Reset;
 800180a:	2300      	movs	r3, #0
 800180c:	4a40      	ldr	r2, [pc, #256]	; (8001910 <main+0x1ac>)
 800180e:	7013      	strb	r3, [r2, #0]
		  GSM.ErrorCounter = 0;
 8001810:	f884 3224 	strb.w	r3, [r4, #548]	; 0x224
	  if(SMSUartTxState != Idle && HAL_GetTick() - GSM.LastTickReceive >= 30000)
 8001814:	4b3e      	ldr	r3, [pc, #248]	; (8001910 <main+0x1ac>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	2b06      	cmp	r3, #6
 800181a:	d13a      	bne.n	8001892 <main+0x12e>
	  if(!HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin))
 800181c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001820:	4846      	ldr	r0, [pc, #280]	; (800193c <main+0x1d8>)
 8001822:	f001 f8fb 	bl	8002a1c <HAL_GPIO_ReadPin>
 8001826:	2800      	cmp	r0, #0
 8001828:	d046      	beq.n	80018b8 <main+0x154>
	  if(GSM.CRegStat == 2)
 800182a:	4b43      	ldr	r3, [pc, #268]	; (8001938 <main+0x1d4>)
 800182c:	7a9b      	ldrb	r3, [r3, #10]
 800182e:	2b02      	cmp	r3, #2
 8001830:	d063      	beq.n	80018fa <main+0x196>
	  HAL_IWDG_Refresh(&hiwdg);
 8001832:	4843      	ldr	r0, [pc, #268]	; (8001940 <main+0x1dc>)
 8001834:	f001 f92b 	bl	8002a8e <HAL_IWDG_Refresh>
	  if(HAL_GetTick() - LastTickTempMeasure >= 800)
 8001838:	f000 fd82 	bl	8002340 <HAL_GetTick>
 800183c:	4b36      	ldr	r3, [pc, #216]	; (8001918 <main+0x1b4>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	1ac0      	subs	r0, r0, r3
 8001842:	f5b0 7f48 	cmp.w	r0, #800	; 0x320
 8001846:	d3cb      	bcc.n	80017e0 <main+0x7c>
		  if(!tempMeasureFlag)
 8001848:	4b38      	ldr	r3, [pc, #224]	; (800192c <main+0x1c8>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d1bf      	bne.n	80017d0 <main+0x6c>
			  ds18b20_start_measure(NULL);
 8001850:	2000      	movs	r0, #0
 8001852:	f7ff faed 	bl	8000e30 <ds18b20_start_measure>
			  tempMeasureFlag = 1;
 8001856:	4b35      	ldr	r3, [pc, #212]	; (800192c <main+0x1c8>)
 8001858:	2201      	movs	r2, #1
 800185a:	701a      	strb	r2, [r3, #0]
 800185c:	e7c0      	b.n	80017e0 <main+0x7c>
		  Parser_TakeLine(&ReceiveBuffer, ReceivedData);
 800185e:	4c39      	ldr	r4, [pc, #228]	; (8001944 <main+0x1e0>)
 8001860:	4621      	mov	r1, r4
 8001862:	4839      	ldr	r0, [pc, #228]	; (8001948 <main+0x1e4>)
 8001864:	f000 f932 	bl	8001acc <Parser_TakeLine>
		  LineCounter--;
 8001868:	4a31      	ldr	r2, [pc, #196]	; (8001930 <main+0x1cc>)
 800186a:	7813      	ldrb	r3, [r2, #0]
 800186c:	3b01      	subs	r3, #1
 800186e:	7013      	strb	r3, [r2, #0]
		  Parser_parse(ReceivedData);
 8001870:	4620      	mov	r0, r4
 8001872:	f000 f949 	bl	8001b08 <Parser_parse>
 8001876:	e7b7      	b.n	80017e8 <main+0x84>
		  Parser_TakeLine(&USBConfBuffer, ReceivedData);
 8001878:	4c32      	ldr	r4, [pc, #200]	; (8001944 <main+0x1e0>)
 800187a:	4621      	mov	r1, r4
 800187c:	4833      	ldr	r0, [pc, #204]	; (800194c <main+0x1e8>)
 800187e:	f000 f925 	bl	8001acc <Parser_TakeLine>
		  USBLineCounter--;
 8001882:	4a2c      	ldr	r2, [pc, #176]	; (8001934 <main+0x1d0>)
 8001884:	7813      	ldrb	r3, [r2, #0]
 8001886:	3b01      	subs	r3, #1
 8001888:	7013      	strb	r3, [r2, #0]
		  Parser_parse(ReceivedData);
 800188a:	4620      	mov	r0, r4
 800188c:	f000 f93c 	bl	8001b08 <Parser_parse>
 8001890:	e7ae      	b.n	80017f0 <main+0x8c>
	  if(SMSUartTxState != Idle && HAL_GetTick() - GSM.LastTickReceive >= 30000)
 8001892:	f000 fd55 	bl	8002340 <HAL_GetTick>
 8001896:	4b28      	ldr	r3, [pc, #160]	; (8001938 <main+0x1d4>)
 8001898:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 800189c:	1ac0      	subs	r0, r0, r3
 800189e:	f247 532f 	movw	r3, #29999	; 0x752f
 80018a2:	4298      	cmp	r0, r3
 80018a4:	d9ba      	bls.n	800181c <main+0xb8>
		  SMSUartTxState = Reset;
 80018a6:	4b1a      	ldr	r3, [pc, #104]	; (8001910 <main+0x1ac>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	701a      	strb	r2, [r3, #0]
		  GSM.LastTickReceive = HAL_GetTick();
 80018ac:	f000 fd48 	bl	8002340 <HAL_GetTick>
 80018b0:	4b21      	ldr	r3, [pc, #132]	; (8001938 <main+0x1d4>)
 80018b2:	f8c3 0228 	str.w	r0, [r3, #552]	; 0x228
 80018b6:	e7b1      	b.n	800181c <main+0xb8>
		  sprintf(SMSMessage, "%.1f\n%d\n%s\n%s\n%s", GSM.SignalQuality, GSM.ErrorCounter, GSM.ConfigFlash.apn, GSM.ConfigFlash.path, GSM.ConfigFlash.server);
 80018b8:	4c1f      	ldr	r4, [pc, #124]	; (8001938 <main+0x1d4>)
 80018ba:	f894 2224 	ldrb.w	r2, [r4, #548]	; 0x224
 80018be:	4623      	mov	r3, r4
 80018c0:	e8f3 0118 	ldrd	r0, r1, [r3], #96	; 0x60
 80018c4:	9303      	str	r3, [sp, #12]
 80018c6:	f104 0392 	add.w	r3, r4, #146	; 0x92
 80018ca:	9302      	str	r3, [sp, #8]
 80018cc:	f104 03e9 	add.w	r3, r4, #233	; 0xe9
 80018d0:	9301      	str	r3, [sp, #4]
 80018d2:	9200      	str	r2, [sp, #0]
 80018d4:	4602      	mov	r2, r0
 80018d6:	460b      	mov	r3, r1
 80018d8:	491d      	ldr	r1, [pc, #116]	; (8001950 <main+0x1ec>)
 80018da:	481e      	ldr	r0, [pc, #120]	; (8001954 <main+0x1f0>)
 80018dc:	f005 ff6a 	bl	80077b4 <siprintf>
		  strcpy(GSM.SMSNumber, GSM.ConfigFlash.number1);
 80018e0:	f104 01c4 	add.w	r1, r4, #196	; 0xc4
 80018e4:	f104 0012 	add.w	r0, r4, #18
 80018e8:	f005 ff93 	bl	8007812 <strcpy>
		  GSM.TaskToDo.SmsMsgToSend = 1;
 80018ec:	f894 322c 	ldrb.w	r3, [r4, #556]	; 0x22c
 80018f0:	f043 0302 	orr.w	r3, r3, #2
 80018f4:	f884 322c 	strb.w	r3, [r4, #556]	; 0x22c
 80018f8:	e797      	b.n	800182a <main+0xc6>
		  SMSUartTxState = Start;
 80018fa:	4b05      	ldr	r3, [pc, #20]	; (8001910 <main+0x1ac>)
 80018fc:	2201      	movs	r2, #1
 80018fe:	701a      	strb	r2, [r3, #0]
 8001900:	e797      	b.n	8001832 <main+0xce>
 8001902:	bf00      	nop
 8001904:	20001348 	.word	0x20001348
 8001908:	200017f8 	.word	0x200017f8
 800190c:	2000174c 	.word	0x2000174c
 8001910:	2000153c 	.word	0x2000153c
 8001914:	20001138 	.word	0x20001138
 8001918:	2000113c 	.word	0x2000113c
 800191c:	0801fc00 	.word	0x0801fc00
 8001920:	20000f2c 	.word	0x20000f2c
 8001924:	20001768 	.word	0x20001768
 8001928:	2000175c 	.word	0x2000175c
 800192c:	20001758 	.word	0x20001758
 8001930:	20001140 	.word	0x20001140
 8001934:	20001748 	.word	0x20001748
 8001938:	20000f08 	.word	0x20000f08
 800193c:	40011000 	.word	0x40011000
 8001940:	20000394 	.word	0x20000394
 8001944:	2000134c 	.word	0x2000134c
 8001948:	20001144 	.word	0x20001144
 800194c:	20001544 	.word	0x20001544
 8001950:	0800b624 	.word	0x0800b624
 8001954:	2000144c 	.word	0x2000144c

08001958 <Parser_ParseCMGL>:
		GSM.FtpPut.CnfLength = atoi(ParsePointer);
	}
}

static void Parser_ParseCMGL(void)
{
 8001958:	b538      	push	{r3, r4, r5, lr}
	char *ParsePointer = strtok(NULL, "\"");
 800195a:	4d0b      	ldr	r5, [pc, #44]	; (8001988 <Parser_ParseCMGL+0x30>)
 800195c:	4629      	mov	r1, r5
 800195e:	2000      	movs	r0, #0
 8001960:	f006 fd76 	bl	8008450 <strtok>
	ParsePointer = strtok(NULL, "\"");
 8001964:	4629      	mov	r1, r5
 8001966:	2000      	movs	r0, #0
 8001968:	f006 fd72 	bl	8008450 <strtok>
	ParsePointer = strtok(NULL, ",") +1;
 800196c:	4907      	ldr	r1, [pc, #28]	; (800198c <Parser_ParseCMGL+0x34>)
 800196e:	2000      	movs	r0, #0
 8001970:	f006 fd6e 	bl	8008450 <strtok>
 8001974:	1c44      	adds	r4, r0, #1
	strtok(ParsePointer, "\"");
 8001976:	4629      	mov	r1, r5
 8001978:	4620      	mov	r0, r4
 800197a:	f006 fd69 	bl	8008450 <strtok>
	strcpy(GSM.SMSNumber,ParsePointer);
 800197e:	4621      	mov	r1, r4
 8001980:	4803      	ldr	r0, [pc, #12]	; (8001990 <Parser_ParseCMGL+0x38>)
 8001982:	f005 ff46 	bl	8007812 <strcpy>
}
 8001986:	bd38      	pop	{r3, r4, r5, pc}
 8001988:	0800b638 	.word	0x0800b638
 800198c:	0800b63c 	.word	0x0800b63c
 8001990:	20000f1a 	.word	0x20000f1a

08001994 <Parser_ParseCSQ>:
{
 8001994:	b508      	push	{r3, lr}
	char * ParsePointer = strtok(NULL, ",");
 8001996:	4905      	ldr	r1, [pc, #20]	; (80019ac <Parser_ParseCSQ+0x18>)
 8001998:	2000      	movs	r0, #0
 800199a:	f006 fd59 	bl	8008450 <strtok>
	GSM.SignalQuality = atof(ParsePointer);
 800199e:	f005 fa61 	bl	8006e64 <atof>
 80019a2:	4b03      	ldr	r3, [pc, #12]	; (80019b0 <Parser_ParseCSQ+0x1c>)
 80019a4:	e9c3 0100 	strd	r0, r1, [r3]
}
 80019a8:	bd08      	pop	{r3, pc}
 80019aa:	bf00      	nop
 80019ac:	0800b63c 	.word	0x0800b63c
 80019b0:	20000f08 	.word	0x20000f08

080019b4 <Parser_ParseCREG>:
{
 80019b4:	b538      	push	{r3, r4, r5, lr}
	char * ParsePointer = strtok(NULL, ",");
 80019b6:	4d08      	ldr	r5, [pc, #32]	; (80019d8 <Parser_ParseCREG+0x24>)
 80019b8:	4629      	mov	r1, r5
 80019ba:	2000      	movs	r0, #0
 80019bc:	f006 fd48 	bl	8008450 <strtok>
	GSM.CRegN = atoi(ParsePointer);
 80019c0:	f005 fa53 	bl	8006e6a <atoi>
 80019c4:	4c05      	ldr	r4, [pc, #20]	; (80019dc <Parser_ParseCREG+0x28>)
 80019c6:	7260      	strb	r0, [r4, #9]
	ParsePointer = strtok(NULL, ",");
 80019c8:	4629      	mov	r1, r5
 80019ca:	2000      	movs	r0, #0
 80019cc:	f006 fd40 	bl	8008450 <strtok>
	GSM.CRegStat = atoi(ParsePointer);
 80019d0:	f005 fa4b 	bl	8006e6a <atoi>
 80019d4:	72a0      	strb	r0, [r4, #10]
}
 80019d6:	bd38      	pop	{r3, r4, r5, pc}
 80019d8:	0800b63c 	.word	0x0800b63c
 80019dc:	20000f08 	.word	0x20000f08

080019e0 <Parser_ParseCCLK>:
{
 80019e0:	b510      	push	{r4, lr}
	char * ParsePointer = strtok(NULL, "/");
 80019e2:	4c1a      	ldr	r4, [pc, #104]	; (8001a4c <Parser_ParseCCLK+0x6c>)
 80019e4:	4621      	mov	r1, r4
 80019e6:	2000      	movs	r0, #0
 80019e8:	f006 fd32 	bl	8008450 <strtok>
	year = atoi(ParsePointer+1);
 80019ec:	3001      	adds	r0, #1
 80019ee:	f005 fa3c 	bl	8006e6a <atoi>
 80019f2:	4b17      	ldr	r3, [pc, #92]	; (8001a50 <Parser_ParseCCLK+0x70>)
 80019f4:	7018      	strb	r0, [r3, #0]
	ParsePointer = strtok(NULL, "/");
 80019f6:	4621      	mov	r1, r4
 80019f8:	2000      	movs	r0, #0
 80019fa:	f006 fd29 	bl	8008450 <strtok>
	month = atoi(ParsePointer);
 80019fe:	f005 fa34 	bl	8006e6a <atoi>
 8001a02:	4b14      	ldr	r3, [pc, #80]	; (8001a54 <Parser_ParseCCLK+0x74>)
 8001a04:	7018      	strb	r0, [r3, #0]
	ParsePointer = strtok(NULL, ",");
 8001a06:	4914      	ldr	r1, [pc, #80]	; (8001a58 <Parser_ParseCCLK+0x78>)
 8001a08:	2000      	movs	r0, #0
 8001a0a:	f006 fd21 	bl	8008450 <strtok>
	day = atoi(ParsePointer);
 8001a0e:	f005 fa2c 	bl	8006e6a <atoi>
 8001a12:	4b12      	ldr	r3, [pc, #72]	; (8001a5c <Parser_ParseCCLK+0x7c>)
 8001a14:	7018      	strb	r0, [r3, #0]
	ParsePointer = strtok(NULL, ":");
 8001a16:	4c12      	ldr	r4, [pc, #72]	; (8001a60 <Parser_ParseCCLK+0x80>)
 8001a18:	4621      	mov	r1, r4
 8001a1a:	2000      	movs	r0, #0
 8001a1c:	f006 fd18 	bl	8008450 <strtok>
	hour = atoi(ParsePointer);
 8001a20:	f005 fa23 	bl	8006e6a <atoi>
 8001a24:	4b0f      	ldr	r3, [pc, #60]	; (8001a64 <Parser_ParseCCLK+0x84>)
 8001a26:	7018      	strb	r0, [r3, #0]
	ParsePointer = strtok(NULL, ":");
 8001a28:	4621      	mov	r1, r4
 8001a2a:	2000      	movs	r0, #0
 8001a2c:	f006 fd10 	bl	8008450 <strtok>
	minute = atoi(ParsePointer);
 8001a30:	f005 fa1b 	bl	8006e6a <atoi>
 8001a34:	4b0c      	ldr	r3, [pc, #48]	; (8001a68 <Parser_ParseCCLK+0x88>)
 8001a36:	7018      	strb	r0, [r3, #0]
	ParsePointer = strtok(NULL, "+");
 8001a38:	490c      	ldr	r1, [pc, #48]	; (8001a6c <Parser_ParseCCLK+0x8c>)
 8001a3a:	2000      	movs	r0, #0
 8001a3c:	f006 fd08 	bl	8008450 <strtok>
	second = atoi(ParsePointer);
 8001a40:	f005 fa13 	bl	8006e6a <atoi>
 8001a44:	4b0a      	ldr	r3, [pc, #40]	; (8001a70 <Parser_ParseCCLK+0x90>)
 8001a46:	7018      	strb	r0, [r3, #0]
}
 8001a48:	bd10      	pop	{r4, pc}
 8001a4a:	bf00      	nop
 8001a4c:	0800b640 	.word	0x0800b640
 8001a50:	20001761 	.word	0x20001761
 8001a54:	20001756 	.word	0x20001756
 8001a58:	0800b63c 	.word	0x0800b63c
 8001a5c:	2000174a 	.word	0x2000174a
 8001a60:	0800b6b8 	.word	0x0800b6b8
 8001a64:	20001754 	.word	0x20001754
 8001a68:	20001755 	.word	0x20001755
 8001a6c:	0800b644 	.word	0x0800b644
 8001a70:	20001757 	.word	0x20001757

08001a74 <Parser_ParseFTPPUT>:
{
 8001a74:	b538      	push	{r3, r4, r5, lr}
	char * ParsePointer = strtok(NULL, ",");
 8001a76:	4d13      	ldr	r5, [pc, #76]	; (8001ac4 <Parser_ParseFTPPUT+0x50>)
 8001a78:	4629      	mov	r1, r5
 8001a7a:	2000      	movs	r0, #0
 8001a7c:	f006 fce8 	bl	8008450 <strtok>
	GSM.FtpPut.mode = atoi(ParsePointer);
 8001a80:	f005 f9f3 	bl	8006e6a <atoi>
 8001a84:	4c10      	ldr	r4, [pc, #64]	; (8001ac8 <Parser_ParseFTPPUT+0x54>)
 8001a86:	7320      	strb	r0, [r4, #12]
	ParsePointer = strtok(NULL, ",");
 8001a88:	4629      	mov	r1, r5
 8001a8a:	2000      	movs	r0, #0
 8001a8c:	f006 fce0 	bl	8008450 <strtok>
	if(GSM.FtpPut.mode == 1)
 8001a90:	7b23      	ldrb	r3, [r4, #12]
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d002      	beq.n	8001a9c <Parser_ParseFTPPUT+0x28>
	else if(GSM.FtpPut.mode == 2)
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	d00e      	beq.n	8001ab8 <Parser_ParseFTPPUT+0x44>
}
 8001a9a:	bd38      	pop	{r3, r4, r5, pc}
		GSM.FtpPut.status = atoi(ParsePointer);
 8001a9c:	f005 f9e5 	bl	8006e6a <atoi>
 8001aa0:	b2c0      	uxtb	r0, r0
 8001aa2:	7360      	strb	r0, [r4, #13]
		if(GSM.FtpPut.status == 1)
 8001aa4:	2801      	cmp	r0, #1
 8001aa6:	d1f8      	bne.n	8001a9a <Parser_ParseFTPPUT+0x26>
			ParsePointer = strtok(NULL, ",");
 8001aa8:	4629      	mov	r1, r5
 8001aaa:	2000      	movs	r0, #0
 8001aac:	f006 fcd0 	bl	8008450 <strtok>
			GSM.FtpPut.maxLength = atoi(ParsePointer);
 8001ab0:	f005 f9db 	bl	8006e6a <atoi>
 8001ab4:	81e0      	strh	r0, [r4, #14]
 8001ab6:	e7f0      	b.n	8001a9a <Parser_ParseFTPPUT+0x26>
		GSM.FtpPut.CnfLength = atoi(ParsePointer);
 8001ab8:	f005 f9d7 	bl	8006e6a <atoi>
 8001abc:	4b02      	ldr	r3, [pc, #8]	; (8001ac8 <Parser_ParseFTPPUT+0x54>)
 8001abe:	8218      	strh	r0, [r3, #16]
}
 8001ac0:	e7eb      	b.n	8001a9a <Parser_ParseFTPPUT+0x26>
 8001ac2:	bf00      	nop
 8001ac4:	0800b63c 	.word	0x0800b63c
 8001ac8:	20000f08 	.word	0x20000f08

08001acc <Parser_TakeLine>:
{
 8001acc:	b570      	push	{r4, r5, r6, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	4606      	mov	r6, r0
 8001ad2:	460d      	mov	r5, r1
	  uint8_t tmp = 0;
 8001ad4:	2400      	movs	r4, #0
 8001ad6:	f88d 4007 	strb.w	r4, [sp, #7]
 8001ada:	e006      	b.n	8001aea <Parser_TakeLine+0x1e>
			Destination[i] = tmp;
 8001adc:	552b      	strb	r3, [r5, r4]
			i++;
 8001ade:	3401      	adds	r4, #1
 8001ae0:	b2e4      	uxtb	r4, r4
	} while(tmp != ENDLINE);
 8001ae2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001ae6:	2b0a      	cmp	r3, #10
 8001ae8:	d00b      	beq.n	8001b02 <Parser_TakeLine+0x36>
		 Ring_Buffer_Read(Buff, &tmp);
 8001aea:	f10d 0107 	add.w	r1, sp, #7
 8001aee:	4630      	mov	r0, r6
 8001af0:	f000 f968 	bl	8001dc4 <Ring_Buffer_Read>
		 if(tmp == ENDLINE)
 8001af4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001af8:	2b0a      	cmp	r3, #10
 8001afa:	d1ef      	bne.n	8001adc <Parser_TakeLine+0x10>
			 Destination[i] = 0;
 8001afc:	2300      	movs	r3, #0
 8001afe:	552b      	strb	r3, [r5, r4]
 8001b00:	e7ed      	b.n	8001ade <Parser_TakeLine+0x12>
}
 8001b02:	b002      	add	sp, #8
 8001b04:	bd70      	pop	{r4, r5, r6, pc}
	...

08001b08 <Parser_parse>:


void Parser_parse(uint8_t * DataToParse)
{
 8001b08:	b530      	push	{r4, r5, lr}
 8001b0a:	b089      	sub	sp, #36	; 0x24
 8001b0c:	4604      	mov	r4, r0

	if(strcmp("OK", (char*)DataToParse) == 0)
 8001b0e:	4601      	mov	r1, r0
 8001b10:	4887      	ldr	r0, [pc, #540]	; (8001d30 <Parser_parse+0x228>)
 8001b12:	f7fe fb1d 	bl	8000150 <strcmp>
 8001b16:	b920      	cbnz	r0, 8001b22 <Parser_parse+0x1a>
	{
		GSM.ReceivedState = 1;
 8001b18:	4b86      	ldr	r3, [pc, #536]	; (8001d34 <Parser_parse+0x22c>)
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	721a      	strb	r2, [r3, #8]
//	  	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
//	  	UartLog("led_off\n\r");
//	  }


}
 8001b1e:	b009      	add	sp, #36	; 0x24
 8001b20:	bd30      	pop	{r4, r5, pc}
	else if(strcmp("save", (char*)DataToParse) == 0)
 8001b22:	4621      	mov	r1, r4
 8001b24:	4884      	ldr	r0, [pc, #528]	; (8001d38 <Parser_parse+0x230>)
 8001b26:	f7fe fb13 	bl	8000150 <strcmp>
 8001b2a:	b198      	cbz	r0, 8001b54 <Parser_parse+0x4c>
	else if(strcmp("Log", (char*)DataToParse) == 0)
 8001b2c:	4621      	mov	r1, r4
 8001b2e:	4883      	ldr	r0, [pc, #524]	; (8001d3c <Parser_parse+0x234>)
 8001b30:	f7fe fb0e 	bl	8000150 <strcmp>
 8001b34:	b1a0      	cbz	r0, 8001b60 <Parser_parse+0x58>
	else if(strcmp("Temp", (char*)DataToParse) == 0)
 8001b36:	4621      	mov	r1, r4
 8001b38:	4881      	ldr	r0, [pc, #516]	; (8001d40 <Parser_parse+0x238>)
 8001b3a:	f7fe fb09 	bl	8000150 <strcmp>
 8001b3e:	b368      	cbz	r0, 8001b9c <Parser_parse+0x94>
	else if(strcmp("ResetGsm", (char*)DataToParse) == 0)
 8001b40:	4621      	mov	r1, r4
 8001b42:	4880      	ldr	r0, [pc, #512]	; (8001d44 <Parser_parse+0x23c>)
 8001b44:	f7fe fb04 	bl	8000150 <strcmp>
 8001b48:	2800      	cmp	r0, #0
 8001b4a:	d139      	bne.n	8001bc0 <Parser_parse+0xb8>
		SMSUartTxState = Reset;
 8001b4c:	4b7e      	ldr	r3, [pc, #504]	; (8001d48 <Parser_parse+0x240>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	701a      	strb	r2, [r3, #0]
 8001b52:	e7e4      	b.n	8001b1e <Parser_parse+0x16>
		Flash_Write_Data(0x0801FC00, GSM.FlashBuff, 128);
 8001b54:	2280      	movs	r2, #128	; 0x80
 8001b56:	497d      	ldr	r1, [pc, #500]	; (8001d4c <Parser_parse+0x244>)
 8001b58:	487d      	ldr	r0, [pc, #500]	; (8001d50 <Parser_parse+0x248>)
 8001b5a:	f7ff f8db 	bl	8000d14 <Flash_Write_Data>
 8001b5e:	e7de      	b.n	8001b1e <Parser_parse+0x16>
		sprintf(SMSMessage, "CSQ:%.1f\nERROR:%d\n%d\nAPN:%s\n%s\n%s", GSM.SignalQuality, GSM.ErrorCounter, GSM.ResetCounter, GSM.ConfigFlash.apn, GSM.ConfigFlash.path, GSM.ConfigFlash.server);
 8001b60:	4c74      	ldr	r4, [pc, #464]	; (8001d34 <Parser_parse+0x22c>)
 8001b62:	f894 2224 	ldrb.w	r2, [r4, #548]	; 0x224
 8001b66:	f8b4 522e 	ldrh.w	r5, [r4, #558]	; 0x22e
 8001b6a:	4623      	mov	r3, r4
 8001b6c:	e8f3 0118 	ldrd	r0, r1, [r3], #96	; 0x60
 8001b70:	9304      	str	r3, [sp, #16]
 8001b72:	f104 0392 	add.w	r3, r4, #146	; 0x92
 8001b76:	9303      	str	r3, [sp, #12]
 8001b78:	f104 03e9 	add.w	r3, r4, #233	; 0xe9
 8001b7c:	9302      	str	r3, [sp, #8]
 8001b7e:	9501      	str	r5, [sp, #4]
 8001b80:	9200      	str	r2, [sp, #0]
 8001b82:	4602      	mov	r2, r0
 8001b84:	460b      	mov	r3, r1
 8001b86:	4973      	ldr	r1, [pc, #460]	; (8001d54 <Parser_parse+0x24c>)
 8001b88:	4873      	ldr	r0, [pc, #460]	; (8001d58 <Parser_parse+0x250>)
 8001b8a:	f005 fe13 	bl	80077b4 <siprintf>
		GSM.TaskToDo.SmsMsgToSend = 1;
 8001b8e:	f894 322c 	ldrb.w	r3, [r4, #556]	; 0x22c
 8001b92:	f043 0302 	orr.w	r3, r3, #2
 8001b96:	f884 322c 	strb.w	r3, [r4, #556]	; 0x22c
 8001b9a:	e7c0      	b.n	8001b1e <Parser_parse+0x16>
		Temperature100ToString(temperature, TemperatureString);
 8001b9c:	a906      	add	r1, sp, #24
 8001b9e:	4b6f      	ldr	r3, [pc, #444]	; (8001d5c <Parser_parse+0x254>)
 8001ba0:	6818      	ldr	r0, [r3, #0]
 8001ba2:	f000 fb35 	bl	8002210 <Temperature100ToString>
		sprintf(SMSMessage, "Temperature: %s", TemperatureString);
 8001ba6:	aa06      	add	r2, sp, #24
 8001ba8:	496d      	ldr	r1, [pc, #436]	; (8001d60 <Parser_parse+0x258>)
 8001baa:	486b      	ldr	r0, [pc, #428]	; (8001d58 <Parser_parse+0x250>)
 8001bac:	f005 fe02 	bl	80077b4 <siprintf>
		GSM.TaskToDo.SmsMsgToSend = 1;
 8001bb0:	4a60      	ldr	r2, [pc, #384]	; (8001d34 <Parser_parse+0x22c>)
 8001bb2:	f892 322c 	ldrb.w	r3, [r2, #556]	; 0x22c
 8001bb6:	f043 0302 	orr.w	r3, r3, #2
 8001bba:	f882 322c 	strb.w	r3, [r2, #556]	; 0x22c
 8001bbe:	e7ae      	b.n	8001b1e <Parser_parse+0x16>
	else if(strcmp("ResetUc", (char*)DataToParse) == 0)
 8001bc0:	4621      	mov	r1, r4
 8001bc2:	4868      	ldr	r0, [pc, #416]	; (8001d64 <Parser_parse+0x25c>)
 8001bc4:	f7fe fac4 	bl	8000150 <strcmp>
 8001bc8:	b158      	cbz	r0, 8001be2 <Parser_parse+0xda>
	else if(strcmp("ERROR", (char*)DataToParse) == 0)
 8001bca:	4621      	mov	r1, r4
 8001bcc:	4866      	ldr	r0, [pc, #408]	; (8001d68 <Parser_parse+0x260>)
 8001bce:	f7fe fabf 	bl	8000150 <strcmp>
 8001bd2:	b948      	cbnz	r0, 8001be8 <Parser_parse+0xe0>
		GSM.ErrorCounter++;
 8001bd4:	4a57      	ldr	r2, [pc, #348]	; (8001d34 <Parser_parse+0x22c>)
 8001bd6:	f892 3224 	ldrb.w	r3, [r2, #548]	; 0x224
 8001bda:	3301      	adds	r3, #1
 8001bdc:	f882 3224 	strb.w	r3, [r2, #548]	; 0x224
 8001be0:	e79d      	b.n	8001b1e <Parser_parse+0x16>
		HAL_NVIC_SystemReset();
 8001be2:	f000 fc0b 	bl	80023fc <HAL_NVIC_SystemReset>
 8001be6:	e79a      	b.n	8001b1e <Parser_parse+0x16>
		char * ParsePointer = strtok((char*)DataToParse, " ");
 8001be8:	4960      	ldr	r1, [pc, #384]	; (8001d6c <Parser_parse+0x264>)
 8001bea:	4620      	mov	r0, r4
 8001bec:	f006 fc30 	bl	8008450 <strtok>
 8001bf0:	4604      	mov	r4, r0
		if(strcmp("+CSQ:", ParsePointer) == 0)
 8001bf2:	4601      	mov	r1, r0
 8001bf4:	485e      	ldr	r0, [pc, #376]	; (8001d70 <Parser_parse+0x268>)
 8001bf6:	f7fe faab 	bl	8000150 <strcmp>
 8001bfa:	2800      	cmp	r0, #0
 8001bfc:	d050      	beq.n	8001ca0 <Parser_parse+0x198>
		else if(strcmp("+CREG:", ParsePointer) == 0)
 8001bfe:	4621      	mov	r1, r4
 8001c00:	485c      	ldr	r0, [pc, #368]	; (8001d74 <Parser_parse+0x26c>)
 8001c02:	f7fe faa5 	bl	8000150 <strcmp>
 8001c06:	2800      	cmp	r0, #0
 8001c08:	d04d      	beq.n	8001ca6 <Parser_parse+0x19e>
		else if(strcmp("+CCLK:", ParsePointer) == 0)
 8001c0a:	4621      	mov	r1, r4
 8001c0c:	485a      	ldr	r0, [pc, #360]	; (8001d78 <Parser_parse+0x270>)
 8001c0e:	f7fe fa9f 	bl	8000150 <strcmp>
 8001c12:	2800      	cmp	r0, #0
 8001c14:	d04a      	beq.n	8001cac <Parser_parse+0x1a4>
		else if(strcmp("+FTPPUT:", ParsePointer) == 0)
 8001c16:	4621      	mov	r1, r4
 8001c18:	4858      	ldr	r0, [pc, #352]	; (8001d7c <Parser_parse+0x274>)
 8001c1a:	f7fe fa99 	bl	8000150 <strcmp>
 8001c1e:	2800      	cmp	r0, #0
 8001c20:	d047      	beq.n	8001cb2 <Parser_parse+0x1aa>
		else if(strcmp("+CMGL:", ParsePointer) == 0)
 8001c22:	4621      	mov	r1, r4
 8001c24:	4856      	ldr	r0, [pc, #344]	; (8001d80 <Parser_parse+0x278>)
 8001c26:	f7fe fa93 	bl	8000150 <strcmp>
 8001c2a:	2800      	cmp	r0, #0
 8001c2c:	d044      	beq.n	8001cb8 <Parser_parse+0x1b0>
		else if(strcmp("login:", ParsePointer) == 0)
 8001c2e:	4621      	mov	r1, r4
 8001c30:	4854      	ldr	r0, [pc, #336]	; (8001d84 <Parser_parse+0x27c>)
 8001c32:	f7fe fa8d 	bl	8000150 <strcmp>
 8001c36:	2800      	cmp	r0, #0
 8001c38:	d041      	beq.n	8001cbe <Parser_parse+0x1b6>
		else if(strcmp("password:", ParsePointer) == 0)
 8001c3a:	4621      	mov	r1, r4
 8001c3c:	4852      	ldr	r0, [pc, #328]	; (8001d88 <Parser_parse+0x280>)
 8001c3e:	f7fe fa87 	bl	8000150 <strcmp>
 8001c42:	2800      	cmp	r0, #0
 8001c44:	d043      	beq.n	8001cce <Parser_parse+0x1c6>
		else if(strcmp("server:", ParsePointer) == 0)
 8001c46:	4621      	mov	r1, r4
 8001c48:	4850      	ldr	r0, [pc, #320]	; (8001d8c <Parser_parse+0x284>)
 8001c4a:	f7fe fa81 	bl	8000150 <strcmp>
 8001c4e:	2800      	cmp	r0, #0
 8001c50:	d045      	beq.n	8001cde <Parser_parse+0x1d6>
		else if(strcmp("path:", ParsePointer) == 0)
 8001c52:	4621      	mov	r1, r4
 8001c54:	484e      	ldr	r0, [pc, #312]	; (8001d90 <Parser_parse+0x288>)
 8001c56:	f7fe fa7b 	bl	8000150 <strcmp>
 8001c5a:	2800      	cmp	r0, #0
 8001c5c:	d047      	beq.n	8001cee <Parser_parse+0x1e6>
		else if(strcmp("device:", ParsePointer) == 0)
 8001c5e:	4621      	mov	r1, r4
 8001c60:	484c      	ldr	r0, [pc, #304]	; (8001d94 <Parser_parse+0x28c>)
 8001c62:	f7fe fa75 	bl	8000150 <strcmp>
 8001c66:	2800      	cmp	r0, #0
 8001c68:	d049      	beq.n	8001cfe <Parser_parse+0x1f6>
		else if(strcmp("number1:", ParsePointer) == 0)
 8001c6a:	4621      	mov	r1, r4
 8001c6c:	484a      	ldr	r0, [pc, #296]	; (8001d98 <Parser_parse+0x290>)
 8001c6e:	f7fe fa6f 	bl	8000150 <strcmp>
 8001c72:	2800      	cmp	r0, #0
 8001c74:	d04b      	beq.n	8001d0e <Parser_parse+0x206>
		else if(strcmp("number2:", ParsePointer) == 0)
 8001c76:	4621      	mov	r1, r4
 8001c78:	4848      	ldr	r0, [pc, #288]	; (8001d9c <Parser_parse+0x294>)
 8001c7a:	f7fe fa69 	bl	8000150 <strcmp>
 8001c7e:	2800      	cmp	r0, #0
 8001c80:	d04d      	beq.n	8001d1e <Parser_parse+0x216>
		else if(strcmp("apn:", ParsePointer) == 0)
 8001c82:	4621      	mov	r1, r4
 8001c84:	4846      	ldr	r0, [pc, #280]	; (8001da0 <Parser_parse+0x298>)
 8001c86:	f7fe fa63 	bl	8000150 <strcmp>
 8001c8a:	2800      	cmp	r0, #0
 8001c8c:	f47f af47 	bne.w	8001b1e <Parser_parse+0x16>
			ParsePointer = strtok(NULL, "\r");
 8001c90:	4944      	ldr	r1, [pc, #272]	; (8001da4 <Parser_parse+0x29c>)
 8001c92:	f006 fbdd 	bl	8008450 <strtok>
 8001c96:	4601      	mov	r1, r0
			strcpy(GSM.ConfigFlash.apn, ParsePointer);
 8001c98:	4843      	ldr	r0, [pc, #268]	; (8001da8 <Parser_parse+0x2a0>)
 8001c9a:	f005 fdba 	bl	8007812 <strcpy>
}
 8001c9e:	e73e      	b.n	8001b1e <Parser_parse+0x16>
			Parser_ParseCSQ();
 8001ca0:	f7ff fe78 	bl	8001994 <Parser_ParseCSQ>
 8001ca4:	e73b      	b.n	8001b1e <Parser_parse+0x16>
			Parser_ParseCREG();
 8001ca6:	f7ff fe85 	bl	80019b4 <Parser_ParseCREG>
 8001caa:	e738      	b.n	8001b1e <Parser_parse+0x16>
			Parser_ParseCCLK();
 8001cac:	f7ff fe98 	bl	80019e0 <Parser_ParseCCLK>
 8001cb0:	e735      	b.n	8001b1e <Parser_parse+0x16>
			Parser_ParseFTPPUT();
 8001cb2:	f7ff fedf 	bl	8001a74 <Parser_ParseFTPPUT>
 8001cb6:	e732      	b.n	8001b1e <Parser_parse+0x16>
			Parser_ParseCMGL();
 8001cb8:	f7ff fe4e 	bl	8001958 <Parser_ParseCMGL>
 8001cbc:	e72f      	b.n	8001b1e <Parser_parse+0x16>
			ParsePointer = strtok(NULL, "\r");
 8001cbe:	4939      	ldr	r1, [pc, #228]	; (8001da4 <Parser_parse+0x29c>)
 8001cc0:	f006 fbc6 	bl	8008450 <strtok>
 8001cc4:	4601      	mov	r1, r0
			strcpy(GSM.ConfigFlash.login, ParsePointer);
 8001cc6:	4821      	ldr	r0, [pc, #132]	; (8001d4c <Parser_parse+0x244>)
 8001cc8:	f005 fda3 	bl	8007812 <strcpy>
 8001ccc:	e727      	b.n	8001b1e <Parser_parse+0x16>
			ParsePointer = strtok(NULL, "\r");
 8001cce:	4935      	ldr	r1, [pc, #212]	; (8001da4 <Parser_parse+0x29c>)
 8001cd0:	f006 fbbe 	bl	8008450 <strtok>
 8001cd4:	4601      	mov	r1, r0
			strcpy(GSM.ConfigFlash.password, ParsePointer);
 8001cd6:	4835      	ldr	r0, [pc, #212]	; (8001dac <Parser_parse+0x2a4>)
 8001cd8:	f005 fd9b 	bl	8007812 <strcpy>
 8001cdc:	e71f      	b.n	8001b1e <Parser_parse+0x16>
			ParsePointer = strtok(NULL, "\r");
 8001cde:	4931      	ldr	r1, [pc, #196]	; (8001da4 <Parser_parse+0x29c>)
 8001ce0:	f006 fbb6 	bl	8008450 <strtok>
 8001ce4:	4601      	mov	r1, r0
			strcpy(GSM.ConfigFlash.server, ParsePointer);
 8001ce6:	4832      	ldr	r0, [pc, #200]	; (8001db0 <Parser_parse+0x2a8>)
 8001ce8:	f005 fd93 	bl	8007812 <strcpy>
 8001cec:	e717      	b.n	8001b1e <Parser_parse+0x16>
			ParsePointer = strtok(NULL, "\r");
 8001cee:	492d      	ldr	r1, [pc, #180]	; (8001da4 <Parser_parse+0x29c>)
 8001cf0:	f006 fbae 	bl	8008450 <strtok>
 8001cf4:	4601      	mov	r1, r0
			strcpy(GSM.ConfigFlash.path, ParsePointer);
 8001cf6:	482f      	ldr	r0, [pc, #188]	; (8001db4 <Parser_parse+0x2ac>)
 8001cf8:	f005 fd8b 	bl	8007812 <strcpy>
 8001cfc:	e70f      	b.n	8001b1e <Parser_parse+0x16>
			ParsePointer = strtok(NULL, "\r");
 8001cfe:	4929      	ldr	r1, [pc, #164]	; (8001da4 <Parser_parse+0x29c>)
 8001d00:	f006 fba6 	bl	8008450 <strtok>
 8001d04:	4601      	mov	r1, r0
			strcpy(GSM.ConfigFlash.deviceNumber, ParsePointer);
 8001d06:	482c      	ldr	r0, [pc, #176]	; (8001db8 <Parser_parse+0x2b0>)
 8001d08:	f005 fd83 	bl	8007812 <strcpy>
 8001d0c:	e707      	b.n	8001b1e <Parser_parse+0x16>
			ParsePointer = strtok(NULL, "\r");
 8001d0e:	4925      	ldr	r1, [pc, #148]	; (8001da4 <Parser_parse+0x29c>)
 8001d10:	f006 fb9e 	bl	8008450 <strtok>
 8001d14:	4601      	mov	r1, r0
			strcpy(GSM.ConfigFlash.number1, ParsePointer);
 8001d16:	4829      	ldr	r0, [pc, #164]	; (8001dbc <Parser_parse+0x2b4>)
 8001d18:	f005 fd7b 	bl	8007812 <strcpy>
 8001d1c:	e6ff      	b.n	8001b1e <Parser_parse+0x16>
			ParsePointer = strtok(NULL, "\r");
 8001d1e:	4921      	ldr	r1, [pc, #132]	; (8001da4 <Parser_parse+0x29c>)
 8001d20:	f006 fb96 	bl	8008450 <strtok>
 8001d24:	4601      	mov	r1, r0
			strcpy(GSM.ConfigFlash.number2, ParsePointer);
 8001d26:	4826      	ldr	r0, [pc, #152]	; (8001dc0 <Parser_parse+0x2b8>)
 8001d28:	f005 fd73 	bl	8007812 <strcpy>
 8001d2c:	e6f7      	b.n	8001b1e <Parser_parse+0x16>
 8001d2e:	bf00      	nop
 8001d30:	0800b648 	.word	0x0800b648
 8001d34:	20000f08 	.word	0x20000f08
 8001d38:	0800b64c 	.word	0x0800b64c
 8001d3c:	0800b654 	.word	0x0800b654
 8001d40:	0800b67c 	.word	0x0800b67c
 8001d44:	0800b694 	.word	0x0800b694
 8001d48:	2000153c 	.word	0x2000153c
 8001d4c:	20000f2c 	.word	0x20000f2c
 8001d50:	0801fc00 	.word	0x0801fc00
 8001d54:	0800b658 	.word	0x0800b658
 8001d58:	2000144c 	.word	0x2000144c
 8001d5c:	2000175c 	.word	0x2000175c
 8001d60:	0800b684 	.word	0x0800b684
 8001d64:	0800b6a0 	.word	0x0800b6a0
 8001d68:	0800b6a8 	.word	0x0800b6a8
 8001d6c:	0800b6b0 	.word	0x0800b6b0
 8001d70:	0800b6b4 	.word	0x0800b6b4
 8001d74:	0800b6bc 	.word	0x0800b6bc
 8001d78:	0800b6c4 	.word	0x0800b6c4
 8001d7c:	0800b6cc 	.word	0x0800b6cc
 8001d80:	0800b6d8 	.word	0x0800b6d8
 8001d84:	0800b6e0 	.word	0x0800b6e0
 8001d88:	0800b6ec 	.word	0x0800b6ec
 8001d8c:	0800b6f8 	.word	0x0800b6f8
 8001d90:	0800b700 	.word	0x0800b700
 8001d94:	0800b708 	.word	0x0800b708
 8001d98:	0800b710 	.word	0x0800b710
 8001d9c:	0800b71c 	.word	0x0800b71c
 8001da0:	0800b728 	.word	0x0800b728
 8001da4:	0800b6e8 	.word	0x0800b6e8
 8001da8:	20000ff1 	.word	0x20000ff1
 8001dac:	20000f4a 	.word	0x20000f4a
 8001db0:	20000f68 	.word	0x20000f68
 8001db4:	20000f9a 	.word	0x20000f9a
 8001db8:	20000fec 	.word	0x20000fec
 8001dbc:	20000fcc 	.word	0x20000fcc
 8001dc0:	20000fdc 	.word	0x20000fdc

08001dc4 <Ring_Buffer_Read>:
#include "main.h"
#include "ring_buffer.h"

RbStatus_t Ring_Buffer_Read(RingBuffer_t * Buff, uint8_t *value)
{
	if(Buff->Head == Buff->Tail)
 8001dc4:	8802      	ldrh	r2, [r0, #0]
 8001dc6:	8843      	ldrh	r3, [r0, #2]
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d00e      	beq.n	8001dea <Ring_Buffer_Read+0x26>
	{
		return RB_ERROR;
	}
	*value = Buff->Buffer[Buff->Tail];
 8001dcc:	4403      	add	r3, r0
 8001dce:	791b      	ldrb	r3, [r3, #4]
 8001dd0:	700b      	strb	r3, [r1, #0]

	Buff->Tail = (Buff->Tail + 1) % RING_BUFFER_SIZE;
 8001dd2:	8843      	ldrh	r3, [r0, #2]
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	425a      	negs	r2, r3
 8001dd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ddc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001de0:	bf58      	it	pl
 8001de2:	4253      	negpl	r3, r2
 8001de4:	8043      	strh	r3, [r0, #2]

	return RB_OK;
 8001de6:	2000      	movs	r0, #0
 8001de8:	4770      	bx	lr
		return RB_ERROR;
 8001dea:	2001      	movs	r0, #1
}
 8001dec:	4770      	bx	lr

08001dee <Ring_Buffer_Write>:

RbStatus_t Ring_Buffer_Write(RingBuffer_t * Buff, uint8_t value)
{
	uint16_t Head_tmp = (Buff->Head + 1) % RING_BUFFER_SIZE;
 8001dee:	8802      	ldrh	r2, [r0, #0]
 8001df0:	1c53      	adds	r3, r2, #1
 8001df2:	f1d3 0c00 	rsbs	ip, r3, #0
 8001df6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001dfa:	f3cc 0c08 	ubfx	ip, ip, #0, #9
 8001dfe:	bf58      	it	pl
 8001e00:	f1cc 0300 	rsbpl	r3, ip, #0
 8001e04:	b29b      	uxth	r3, r3

	if(Head_tmp == Buff->Tail)
 8001e06:	f8b0 c002 	ldrh.w	ip, [r0, #2]
 8001e0a:	459c      	cmp	ip, r3
 8001e0c:	d004      	beq.n	8001e18 <Ring_Buffer_Write+0x2a>
	{
		return RB_ERROR;
	}
	Buff->Buffer[Buff->Head] = value;
 8001e0e:	4402      	add	r2, r0
 8001e10:	7111      	strb	r1, [r2, #4]
	Buff->Head = Head_tmp;
 8001e12:	8003      	strh	r3, [r0, #0]

	return RB_OK;
 8001e14:	2000      	movs	r0, #0
 8001e16:	4770      	bx	lr
		return RB_ERROR;
 8001e18:	2001      	movs	r0, #1
}
 8001e1a:	4770      	bx	lr

08001e1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e1c:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001e1e:	4b0a      	ldr	r3, [pc, #40]	; (8001e48 <HAL_MspInit+0x2c>)
 8001e20:	699a      	ldr	r2, [r3, #24]
 8001e22:	f042 0201 	orr.w	r2, r2, #1
 8001e26:	619a      	str	r2, [r3, #24]
 8001e28:	699a      	ldr	r2, [r3, #24]
 8001e2a:	f002 0201 	and.w	r2, r2, #1
 8001e2e:	9200      	str	r2, [sp, #0]
 8001e30:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e32:	69da      	ldr	r2, [r3, #28]
 8001e34:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001e38:	61da      	str	r2, [r3, #28]
 8001e3a:	69db      	ldr	r3, [r3, #28]
 8001e3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e40:	9301      	str	r3, [sp, #4]
 8001e42:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e44:	b002      	add	sp, #8
 8001e46:	4770      	bx	lr
 8001e48:	40021000 	.word	0x40021000

08001e4c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e4c:	e7fe      	b.n	8001e4c <NMI_Handler>

08001e4e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e4e:	e7fe      	b.n	8001e4e <HardFault_Handler>

08001e50 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e50:	e7fe      	b.n	8001e50 <MemManage_Handler>

08001e52 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e52:	e7fe      	b.n	8001e52 <BusFault_Handler>

08001e54 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e54:	e7fe      	b.n	8001e54 <UsageFault_Handler>

08001e56 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e56:	4770      	bx	lr

08001e58 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e58:	4770      	bx	lr

08001e5a <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e5a:	4770      	bx	lr

08001e5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e5c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e5e:	f000 fa63 	bl	8002328 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e62:	bd08      	pop	{r3, pc}

08001e64 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001e64:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001e66:	4802      	ldr	r0, [pc, #8]	; (8001e70 <USB_LP_CAN1_RX0_IRQHandler+0xc>)
 8001e68:	f001 fb8a 	bl	8003580 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001e6c:	bd08      	pop	{r3, pc}
 8001e6e:	bf00      	nop
 8001e70:	20002170 	.word	0x20002170

08001e74 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001e74:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001e76:	4802      	ldr	r0, [pc, #8]	; (8001e80 <TIM3_IRQHandler+0xc>)
 8001e78:	f002 f9ea 	bl	8004250 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001e7c:	bd08      	pop	{r3, pc}
 8001e7e:	bf00      	nop
 8001e80:	20001768 	.word	0x20001768

08001e84 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001e84:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001e86:	4802      	ldr	r0, [pc, #8]	; (8001e90 <USART1_IRQHandler+0xc>)
 8001e88:	f002 fe6c 	bl	8004b64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001e8c:	bd08      	pop	{r3, pc}
 8001e8e:	bf00      	nop
 8001e90:	200017f8 	.word	0x200017f8

08001e94 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8001e94:	2001      	movs	r0, #1
 8001e96:	4770      	bx	lr

08001e98 <_kill>:

int _kill(int pid, int sig)
{
 8001e98:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e9a:	f004 ffeb 	bl	8006e74 <__errno>
 8001e9e:	2316      	movs	r3, #22
 8001ea0:	6003      	str	r3, [r0, #0]
  return -1;
}
 8001ea2:	f04f 30ff 	mov.w	r0, #4294967295
 8001ea6:	bd08      	pop	{r3, pc}

08001ea8 <_exit>:

void _exit (int status)
{
 8001ea8:	b508      	push	{r3, lr}
  _kill(status, -1);
 8001eaa:	f04f 31ff 	mov.w	r1, #4294967295
 8001eae:	f7ff fff3 	bl	8001e98 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001eb2:	e7fe      	b.n	8001eb2 <_exit+0xa>

08001eb4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001eb4:	b570      	push	{r4, r5, r6, lr}
 8001eb6:	460c      	mov	r4, r1
 8001eb8:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eba:	2500      	movs	r5, #0
 8001ebc:	e006      	b.n	8001ecc <_read+0x18>
  {
    *ptr++ = __io_getchar();
 8001ebe:	f3af 8000 	nop.w
 8001ec2:	4621      	mov	r1, r4
 8001ec4:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ec8:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 8001eca:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ecc:	42b5      	cmp	r5, r6
 8001ece:	dbf6      	blt.n	8001ebe <_read+0xa>
  }

  return len;
}
 8001ed0:	4630      	mov	r0, r6
 8001ed2:	bd70      	pop	{r4, r5, r6, pc}

08001ed4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ed4:	b570      	push	{r4, r5, r6, lr}
 8001ed6:	460c      	mov	r4, r1
 8001ed8:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eda:	2500      	movs	r5, #0
 8001edc:	e004      	b.n	8001ee8 <_write+0x14>
  {
    __io_putchar(*ptr++);
 8001ede:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001ee2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ee6:	3501      	adds	r5, #1
 8001ee8:	42b5      	cmp	r5, r6
 8001eea:	dbf8      	blt.n	8001ede <_write+0xa>
  }
  return len;
}
 8001eec:	4630      	mov	r0, r6
 8001eee:	bd70      	pop	{r4, r5, r6, pc}

08001ef0 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8001ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ef4:	4770      	bx	lr

08001ef6 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8001ef6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001efa:	604b      	str	r3, [r1, #4]
  return 0;
}
 8001efc:	2000      	movs	r0, #0
 8001efe:	4770      	bx	lr

08001f00 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8001f00:	2001      	movs	r0, #1
 8001f02:	4770      	bx	lr

08001f04 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8001f04:	2000      	movs	r0, #0
 8001f06:	4770      	bx	lr

08001f08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f08:	b510      	push	{r4, lr}
 8001f0a:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f0c:	4a0c      	ldr	r2, [pc, #48]	; (8001f40 <_sbrk+0x38>)
 8001f0e:	490d      	ldr	r1, [pc, #52]	; (8001f44 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f10:	480d      	ldr	r0, [pc, #52]	; (8001f48 <_sbrk+0x40>)
 8001f12:	6800      	ldr	r0, [r0, #0]
 8001f14:	b140      	cbz	r0, 8001f28 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f16:	480c      	ldr	r0, [pc, #48]	; (8001f48 <_sbrk+0x40>)
 8001f18:	6800      	ldr	r0, [r0, #0]
 8001f1a:	4403      	add	r3, r0
 8001f1c:	1a52      	subs	r2, r2, r1
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d806      	bhi.n	8001f30 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001f22:	4a09      	ldr	r2, [pc, #36]	; (8001f48 <_sbrk+0x40>)
 8001f24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8001f26:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8001f28:	4807      	ldr	r0, [pc, #28]	; (8001f48 <_sbrk+0x40>)
 8001f2a:	4c08      	ldr	r4, [pc, #32]	; (8001f4c <_sbrk+0x44>)
 8001f2c:	6004      	str	r4, [r0, #0]
 8001f2e:	e7f2      	b.n	8001f16 <_sbrk+0xe>
    errno = ENOMEM;
 8001f30:	f004 ffa0 	bl	8006e74 <__errno>
 8001f34:	230c      	movs	r3, #12
 8001f36:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001f38:	f04f 30ff 	mov.w	r0, #4294967295
 8001f3c:	e7f3      	b.n	8001f26 <_sbrk+0x1e>
 8001f3e:	bf00      	nop
 8001f40:	20005000 	.word	0x20005000
 8001f44:	00001000 	.word	0x00001000
 8001f48:	20001764 	.word	0x20001764
 8001f4c:	20002690 	.word	0x20002690

08001f50 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f50:	4770      	bx	lr
	...

08001f54 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001f54:	b500      	push	{lr}
 8001f56:	b087      	sub	sp, #28

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f58:	2300      	movs	r3, #0
 8001f5a:	9302      	str	r3, [sp, #8]
 8001f5c:	9303      	str	r3, [sp, #12]
 8001f5e:	9304      	str	r3, [sp, #16]
 8001f60:	9305      	str	r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f62:	9300      	str	r3, [sp, #0]
 8001f64:	9301      	str	r3, [sp, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001f66:	4815      	ldr	r0, [pc, #84]	; (8001fbc <MX_TIM3_Init+0x68>)
 8001f68:	4a15      	ldr	r2, [pc, #84]	; (8001fc0 <MX_TIM3_Init+0x6c>)
 8001f6a:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 10659;
 8001f6c:	f642 12a3 	movw	r2, #10659	; 0x29a3
 8001f70:	6042      	str	r2, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f72:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 65000;
 8001f74:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8001f78:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f7a:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f7c:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001f7e:	f002 fa5f 	bl	8004440 <HAL_TIM_Base_Init>
 8001f82:	b990      	cbnz	r0, 8001faa <MX_TIM3_Init+0x56>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f88:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001f8a:	a902      	add	r1, sp, #8
 8001f8c:	480b      	ldr	r0, [pc, #44]	; (8001fbc <MX_TIM3_Init+0x68>)
 8001f8e:	f002 fa8f 	bl	80044b0 <HAL_TIM_ConfigClockSource>
 8001f92:	b968      	cbnz	r0, 8001fb0 <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f94:	2300      	movs	r3, #0
 8001f96:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f98:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f9a:	4669      	mov	r1, sp
 8001f9c:	4807      	ldr	r0, [pc, #28]	; (8001fbc <MX_TIM3_Init+0x68>)
 8001f9e:	f002 faf5 	bl	800458c <HAL_TIMEx_MasterConfigSynchronization>
 8001fa2:	b940      	cbnz	r0, 8001fb6 <MX_TIM3_Init+0x62>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001fa4:	b007      	add	sp, #28
 8001fa6:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001faa:	f7ff fb95 	bl	80016d8 <Error_Handler>
 8001fae:	e7e9      	b.n	8001f84 <MX_TIM3_Init+0x30>
    Error_Handler();
 8001fb0:	f7ff fb92 	bl	80016d8 <Error_Handler>
 8001fb4:	e7ee      	b.n	8001f94 <MX_TIM3_Init+0x40>
    Error_Handler();
 8001fb6:	f7ff fb8f 	bl	80016d8 <Error_Handler>
}
 8001fba:	e7f3      	b.n	8001fa4 <MX_TIM3_Init+0x50>
 8001fbc:	20001768 	.word	0x20001768
 8001fc0:	40000400 	.word	0x40000400

08001fc4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001fc4:	b500      	push	{lr}
 8001fc6:	b087      	sub	sp, #28

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fc8:	2300      	movs	r3, #0
 8001fca:	9302      	str	r3, [sp, #8]
 8001fcc:	9303      	str	r3, [sp, #12]
 8001fce:	9304      	str	r3, [sp, #16]
 8001fd0:	9305      	str	r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fd2:	9300      	str	r3, [sp, #0]
 8001fd4:	9301      	str	r3, [sp, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001fd6:	4815      	ldr	r0, [pc, #84]	; (800202c <MX_TIM4_Init+0x68>)
 8001fd8:	4a15      	ldr	r2, [pc, #84]	; (8002030 <MX_TIM4_Init+0x6c>)
 8001fda:	6002      	str	r2, [r0, #0]
  htim4.Init.Prescaler = 32-1;
 8001fdc:	221f      	movs	r2, #31
 8001fde:	6042      	str	r2, [r0, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fe0:	6083      	str	r3, [r0, #8]
  htim4.Init.Period = 0xffff;
 8001fe2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001fe6:	60c2      	str	r2, [r0, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fe8:	6103      	str	r3, [r0, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fea:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001fec:	f002 fa28 	bl	8004440 <HAL_TIM_Base_Init>
 8001ff0:	b990      	cbnz	r0, 8002018 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ff2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ff6:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001ff8:	a902      	add	r1, sp, #8
 8001ffa:	480c      	ldr	r0, [pc, #48]	; (800202c <MX_TIM4_Init+0x68>)
 8001ffc:	f002 fa58 	bl	80044b0 <HAL_TIM_ConfigClockSource>
 8002000:	b968      	cbnz	r0, 800201e <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002002:	2300      	movs	r3, #0
 8002004:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002006:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002008:	4669      	mov	r1, sp
 800200a:	4808      	ldr	r0, [pc, #32]	; (800202c <MX_TIM4_Init+0x68>)
 800200c:	f002 fabe 	bl	800458c <HAL_TIMEx_MasterConfigSynchronization>
 8002010:	b940      	cbnz	r0, 8002024 <MX_TIM4_Init+0x60>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002012:	b007      	add	sp, #28
 8002014:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8002018:	f7ff fb5e 	bl	80016d8 <Error_Handler>
 800201c:	e7e9      	b.n	8001ff2 <MX_TIM4_Init+0x2e>
    Error_Handler();
 800201e:	f7ff fb5b 	bl	80016d8 <Error_Handler>
 8002022:	e7ee      	b.n	8002002 <MX_TIM4_Init+0x3e>
    Error_Handler();
 8002024:	f7ff fb58 	bl	80016d8 <Error_Handler>
}
 8002028:	e7f3      	b.n	8002012 <MX_TIM4_Init+0x4e>
 800202a:	bf00      	nop
 800202c:	200017b0 	.word	0x200017b0
 8002030:	40000800 	.word	0x40000800

08002034 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002034:	b500      	push	{lr}
 8002036:	b083      	sub	sp, #12

  if(tim_baseHandle->Instance==TIM3)
 8002038:	6803      	ldr	r3, [r0, #0]
 800203a:	4a13      	ldr	r2, [pc, #76]	; (8002088 <HAL_TIM_Base_MspInit+0x54>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d005      	beq.n	800204c <HAL_TIM_Base_MspInit+0x18>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM4)
 8002040:	4a12      	ldr	r2, [pc, #72]	; (800208c <HAL_TIM_Base_MspInit+0x58>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d015      	beq.n	8002072 <HAL_TIM_Base_MspInit+0x3e>
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002046:	b003      	add	sp, #12
 8002048:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM3_CLK_ENABLE();
 800204c:	4b10      	ldr	r3, [pc, #64]	; (8002090 <HAL_TIM_Base_MspInit+0x5c>)
 800204e:	69da      	ldr	r2, [r3, #28]
 8002050:	f042 0202 	orr.w	r2, r2, #2
 8002054:	61da      	str	r2, [r3, #28]
 8002056:	69db      	ldr	r3, [r3, #28]
 8002058:	f003 0302 	and.w	r3, r3, #2
 800205c:	9300      	str	r3, [sp, #0]
 800205e:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002060:	2200      	movs	r2, #0
 8002062:	4611      	mov	r1, r2
 8002064:	201d      	movs	r0, #29
 8002066:	f000 f983 	bl	8002370 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800206a:	201d      	movs	r0, #29
 800206c:	f000 f9b8 	bl	80023e0 <HAL_NVIC_EnableIRQ>
 8002070:	e7e9      	b.n	8002046 <HAL_TIM_Base_MspInit+0x12>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002072:	4b07      	ldr	r3, [pc, #28]	; (8002090 <HAL_TIM_Base_MspInit+0x5c>)
 8002074:	69da      	ldr	r2, [r3, #28]
 8002076:	f042 0204 	orr.w	r2, r2, #4
 800207a:	61da      	str	r2, [r3, #28]
 800207c:	69db      	ldr	r3, [r3, #28]
 800207e:	f003 0304 	and.w	r3, r3, #4
 8002082:	9301      	str	r3, [sp, #4]
 8002084:	9b01      	ldr	r3, [sp, #4]
}
 8002086:	e7de      	b.n	8002046 <HAL_TIM_Base_MspInit+0x12>
 8002088:	40000400 	.word	0x40000400
 800208c:	40000800 	.word	0x40000800
 8002090:	40021000 	.word	0x40021000

08002094 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002094:	b508      	push	{r3, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002096:	480a      	ldr	r0, [pc, #40]	; (80020c0 <MX_USART1_UART_Init+0x2c>)
 8002098:	4b0a      	ldr	r3, [pc, #40]	; (80020c4 <MX_USART1_UART_Init+0x30>)
 800209a:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 9600;
 800209c:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80020a0:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80020a2:	2300      	movs	r3, #0
 80020a4:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80020a6:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80020a8:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80020aa:	220c      	movs	r2, #12
 80020ac:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020ae:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80020b0:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80020b2:	f002 fb6d 	bl	8004790 <HAL_UART_Init>
 80020b6:	b900      	cbnz	r0, 80020ba <MX_USART1_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80020b8:	bd08      	pop	{r3, pc}
    Error_Handler();
 80020ba:	f7ff fb0d 	bl	80016d8 <Error_Handler>
}
 80020be:	e7fb      	b.n	80020b8 <MX_USART1_UART_Init+0x24>
 80020c0:	200017f8 	.word	0x200017f8
 80020c4:	40013800 	.word	0x40013800

080020c8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80020c8:	b508      	push	{r3, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80020ca:	480a      	ldr	r0, [pc, #40]	; (80020f4 <MX_USART2_UART_Init+0x2c>)
 80020cc:	4b0a      	ldr	r3, [pc, #40]	; (80020f8 <MX_USART2_UART_Init+0x30>)
 80020ce:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 9600;
 80020d0:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80020d4:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80020d6:	2300      	movs	r3, #0
 80020d8:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80020da:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80020dc:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80020de:	220c      	movs	r2, #12
 80020e0:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020e2:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80020e4:	61c3      	str	r3, [r0, #28]
  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 80020e6:	f002 fb82 	bl	80047ee <HAL_HalfDuplex_Init>
 80020ea:	b900      	cbnz	r0, 80020ee <MX_USART2_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80020ec:	bd08      	pop	{r3, pc}
    Error_Handler();
 80020ee:	f7ff faf3 	bl	80016d8 <Error_Handler>
}
 80020f2:	e7fb      	b.n	80020ec <MX_USART2_UART_Init+0x24>
 80020f4:	2000183c 	.word	0x2000183c
 80020f8:	40004400 	.word	0x40004400

080020fc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80020fc:	b510      	push	{r4, lr}
 80020fe:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002100:	2300      	movs	r3, #0
 8002102:	9304      	str	r3, [sp, #16]
 8002104:	9305      	str	r3, [sp, #20]
 8002106:	9306      	str	r3, [sp, #24]
 8002108:	9307      	str	r3, [sp, #28]
  if(uartHandle->Instance==USART1)
 800210a:	6803      	ldr	r3, [r0, #0]
 800210c:	4a27      	ldr	r2, [pc, #156]	; (80021ac <HAL_UART_MspInit+0xb0>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d004      	beq.n	800211c <HAL_UART_MspInit+0x20>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(uartHandle->Instance==USART2)
 8002112:	4a27      	ldr	r2, [pc, #156]	; (80021b0 <HAL_UART_MspInit+0xb4>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d02b      	beq.n	8002170 <HAL_UART_MspInit+0x74>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002118:	b008      	add	sp, #32
 800211a:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 800211c:	4b25      	ldr	r3, [pc, #148]	; (80021b4 <HAL_UART_MspInit+0xb8>)
 800211e:	699a      	ldr	r2, [r3, #24]
 8002120:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002124:	619a      	str	r2, [r3, #24]
 8002126:	699a      	ldr	r2, [r3, #24]
 8002128:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800212c:	9200      	str	r2, [sp, #0]
 800212e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002130:	699a      	ldr	r2, [r3, #24]
 8002132:	f042 0204 	orr.w	r2, r2, #4
 8002136:	619a      	str	r2, [r3, #24]
 8002138:	699b      	ldr	r3, [r3, #24]
 800213a:	f003 0304 	and.w	r3, r3, #4
 800213e:	9301      	str	r3, [sp, #4]
 8002140:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002142:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002146:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002148:	2302      	movs	r3, #2
 800214a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800214c:	2303      	movs	r3, #3
 800214e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002150:	4c19      	ldr	r4, [pc, #100]	; (80021b8 <HAL_UART_MspInit+0xbc>)
 8002152:	a904      	add	r1, sp, #16
 8002154:	4620      	mov	r0, r4
 8002156:	f000 fb4f 	bl	80027f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800215a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800215e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002160:	2300      	movs	r3, #0
 8002162:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002164:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002166:	a904      	add	r1, sp, #16
 8002168:	4620      	mov	r0, r4
 800216a:	f000 fb45 	bl	80027f8 <HAL_GPIO_Init>
 800216e:	e7d3      	b.n	8002118 <HAL_UART_MspInit+0x1c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002170:	4b10      	ldr	r3, [pc, #64]	; (80021b4 <HAL_UART_MspInit+0xb8>)
 8002172:	69da      	ldr	r2, [r3, #28]
 8002174:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002178:	61da      	str	r2, [r3, #28]
 800217a:	69da      	ldr	r2, [r3, #28]
 800217c:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8002180:	9202      	str	r2, [sp, #8]
 8002182:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002184:	699a      	ldr	r2, [r3, #24]
 8002186:	f042 0204 	orr.w	r2, r2, #4
 800218a:	619a      	str	r2, [r3, #24]
 800218c:	699b      	ldr	r3, [r3, #24]
 800218e:	f003 0304 	and.w	r3, r3, #4
 8002192:	9303      	str	r3, [sp, #12]
 8002194:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002196:	2304      	movs	r3, #4
 8002198:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800219a:	2312      	movs	r3, #18
 800219c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800219e:	2303      	movs	r3, #3
 80021a0:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021a2:	a904      	add	r1, sp, #16
 80021a4:	4804      	ldr	r0, [pc, #16]	; (80021b8 <HAL_UART_MspInit+0xbc>)
 80021a6:	f000 fb27 	bl	80027f8 <HAL_GPIO_Init>
}
 80021aa:	e7b5      	b.n	8002118 <HAL_UART_MspInit+0x1c>
 80021ac:	40013800 	.word	0x40013800
 80021b0:	40004400 	.word	0x40004400
 80021b4:	40021000 	.word	0x40021000
 80021b8:	40010800 	.word	0x40010800

080021bc <UartSend>:
{
	HAL_UART_Transmit(&huart1, (uint8_t*) Message, strlen(Message), 20);
}

void UartSend(char * Message)
{
 80021bc:	b510      	push	{r4, lr}
 80021be:	4604      	mov	r4, r0
	GSM.ReceivedState = 0;
 80021c0:	4b07      	ldr	r3, [pc, #28]	; (80021e0 <UartSend+0x24>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	721a      	strb	r2, [r3, #8]
	HAL_UART_Transmit_IT(&huart1, (uint8_t*) Message, strlen(Message));
 80021c6:	f7fd ffcd 	bl	8000164 <strlen>
 80021ca:	b282      	uxth	r2, r0
 80021cc:	4621      	mov	r1, r4
 80021ce:	4805      	ldr	r0, [pc, #20]	; (80021e4 <UartSend+0x28>)
 80021d0:	f002 fc20 	bl	8004a14 <HAL_UART_Transmit_IT>
	*Uart1isBusyPtr = 1;
 80021d4:	4b04      	ldr	r3, [pc, #16]	; (80021e8 <UartSend+0x2c>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2201      	movs	r2, #1
 80021da:	701a      	strb	r2, [r3, #0]
}
 80021dc:	bd10      	pop	{r4, pc}
 80021de:	bf00      	nop
 80021e0:	20000f08 	.word	0x20000f08
 80021e4:	200017f8 	.word	0x200017f8
 80021e8:	20000004 	.word	0x20000004

080021ec <UartSendWoRxCtrl>:

void UartSendWoRxCtrl(char * Message)
{
 80021ec:	b510      	push	{r4, lr}
 80021ee:	4604      	mov	r4, r0
	HAL_UART_Transmit_IT(&huart1, (uint8_t*) Message, strlen(Message));
 80021f0:	f7fd ffb8 	bl	8000164 <strlen>
 80021f4:	b282      	uxth	r2, r0
 80021f6:	4621      	mov	r1, r4
 80021f8:	4803      	ldr	r0, [pc, #12]	; (8002208 <UartSendWoRxCtrl+0x1c>)
 80021fa:	f002 fc0b 	bl	8004a14 <HAL_UART_Transmit_IT>
	*Uart1isBusyPtr = 1;
 80021fe:	4b03      	ldr	r3, [pc, #12]	; (800220c <UartSendWoRxCtrl+0x20>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	2201      	movs	r2, #1
 8002204:	701a      	strb	r2, [r3, #0]
}
 8002206:	bd10      	pop	{r4, pc}
 8002208:	200017f8 	.word	0x200017f8
 800220c:	20000004 	.word	0x20000004

08002210 <Temperature100ToString>:

void Temperature100ToString(int32_t temp, char *StringBuf)
{
 8002210:	b508      	push	{r3, lr}
 8002212:	4684      	mov	ip, r0
 8002214:	4608      	mov	r0, r1
	int16_t Decimal;
	uint16_t Fractial;

	Decimal = temp/100;
 8002216:	4a13      	ldr	r2, [pc, #76]	; (8002264 <Temperature100ToString+0x54>)
 8002218:	fb82 320c 	smull	r3, r2, r2, ip
 800221c:	ea4f 73ec 	mov.w	r3, ip, asr #31
 8002220:	ebc3 1362 	rsb	r3, r3, r2, asr #5
 8002224:	b21a      	sxth	r2, r3

	if(temp>=0)
 8002226:	f1bc 0f00 	cmp.w	ip, #0
 800222a:	db0f      	blt.n	800224c <Temperature100ToString+0x3c>
	{
		Fractial = temp - Decimal * 100;
 800222c:	ebc3 2143 	rsb	r1, r3, r3, lsl #9
 8002230:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8002234:	ebc3 03c1 	rsb	r3, r3, r1, lsl #3
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	b29b      	uxth	r3, r3
 800223c:	fa1f fc8c 	uxth.w	ip, ip
 8002240:	4463      	add	r3, ip
 8002242:	b29b      	uxth	r3, r3
	else
	{
		Fractial = (temp * -1) - ((Decimal * -1) * 100);
	}

	sprintf(StringBuf, "%.2i.%.2u", Decimal, Fractial);
 8002244:	4908      	ldr	r1, [pc, #32]	; (8002268 <Temperature100ToString+0x58>)
 8002246:	f005 fab5 	bl	80077b4 <siprintf>
}
 800224a:	bd08      	pop	{r3, pc}
		Fractial = (temp * -1) - ((Decimal * -1) * 100);
 800224c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002250:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	b29b      	uxth	r3, r3
 8002258:	fa1f fc8c 	uxth.w	ip, ip
 800225c:	eba3 030c 	sub.w	r3, r3, ip
 8002260:	b29b      	uxth	r3, r3
 8002262:	e7ef      	b.n	8002244 <Temperature100ToString+0x34>
 8002264:	51eb851f 	.word	0x51eb851f
 8002268:	0800b748 	.word	0x0800b748

0800226c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800226c:	480c      	ldr	r0, [pc, #48]	; (80022a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800226e:	490d      	ldr	r1, [pc, #52]	; (80022a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002270:	4a0d      	ldr	r2, [pc, #52]	; (80022a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002272:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002274:	e002      	b.n	800227c <LoopCopyDataInit>

08002276 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002276:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002278:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800227a:	3304      	adds	r3, #4

0800227c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800227c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800227e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002280:	d3f9      	bcc.n	8002276 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002282:	4a0a      	ldr	r2, [pc, #40]	; (80022ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002284:	4c0a      	ldr	r4, [pc, #40]	; (80022b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002286:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002288:	e001      	b.n	800228e <LoopFillZerobss>

0800228a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800228a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800228c:	3204      	adds	r2, #4

0800228e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800228e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002290:	d3fb      	bcc.n	800228a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002292:	f7ff fe5d 	bl	8001f50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002296:	f004 fdf3 	bl	8006e80 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800229a:	f7ff fa63 	bl	8001764 <main>
  bx lr
 800229e:	4770      	bx	lr
  ldr r0, =_sdata
 80022a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022a4:	20000364 	.word	0x20000364
  ldr r2, =_sidata
 80022a8:	0800bca0 	.word	0x0800bca0
  ldr r2, =_sbss
 80022ac:	20000368 	.word	0x20000368
  ldr r4, =_ebss
 80022b0:	2000268c 	.word	0x2000268c

080022b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80022b4:	e7fe      	b.n	80022b4 <ADC1_2_IRQHandler>
	...

080022b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022b8:	b510      	push	{r4, lr}
 80022ba:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022bc:	4b0e      	ldr	r3, [pc, #56]	; (80022f8 <HAL_InitTick+0x40>)
 80022be:	7818      	ldrb	r0, [r3, #0]
 80022c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022c4:	fbb3 f3f0 	udiv	r3, r3, r0
 80022c8:	4a0c      	ldr	r2, [pc, #48]	; (80022fc <HAL_InitTick+0x44>)
 80022ca:	6810      	ldr	r0, [r2, #0]
 80022cc:	fbb0 f0f3 	udiv	r0, r0, r3
 80022d0:	f000 f8a6 	bl	8002420 <HAL_SYSTICK_Config>
 80022d4:	b968      	cbnz	r0, 80022f2 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022d6:	2c0f      	cmp	r4, #15
 80022d8:	d901      	bls.n	80022de <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 80022da:	2001      	movs	r0, #1
 80022dc:	e00a      	b.n	80022f4 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022de:	2200      	movs	r2, #0
 80022e0:	4621      	mov	r1, r4
 80022e2:	f04f 30ff 	mov.w	r0, #4294967295
 80022e6:	f000 f843 	bl	8002370 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022ea:	4b05      	ldr	r3, [pc, #20]	; (8002300 <HAL_InitTick+0x48>)
 80022ec:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80022ee:	2000      	movs	r0, #0
 80022f0:	e000      	b.n	80022f4 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 80022f2:	2001      	movs	r0, #1
}
 80022f4:	bd10      	pop	{r4, pc}
 80022f6:	bf00      	nop
 80022f8:	20000010 	.word	0x20000010
 80022fc:	2000000c 	.word	0x2000000c
 8002300:	20000014 	.word	0x20000014

08002304 <HAL_Init>:
{
 8002304:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002306:	4a07      	ldr	r2, [pc, #28]	; (8002324 <HAL_Init+0x20>)
 8002308:	6813      	ldr	r3, [r2, #0]
 800230a:	f043 0310 	orr.w	r3, r3, #16
 800230e:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002310:	2003      	movs	r0, #3
 8002312:	f000 f81b 	bl	800234c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8002316:	200f      	movs	r0, #15
 8002318:	f7ff ffce 	bl	80022b8 <HAL_InitTick>
  HAL_MspInit();
 800231c:	f7ff fd7e 	bl	8001e1c <HAL_MspInit>
}
 8002320:	2000      	movs	r0, #0
 8002322:	bd08      	pop	{r3, pc}
 8002324:	40022000 	.word	0x40022000

08002328 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002328:	4a03      	ldr	r2, [pc, #12]	; (8002338 <HAL_IncTick+0x10>)
 800232a:	6811      	ldr	r1, [r2, #0]
 800232c:	4b03      	ldr	r3, [pc, #12]	; (800233c <HAL_IncTick+0x14>)
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	440b      	add	r3, r1
 8002332:	6013      	str	r3, [r2, #0]
}
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop
 8002338:	20001880 	.word	0x20001880
 800233c:	20000010 	.word	0x20000010

08002340 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002340:	4b01      	ldr	r3, [pc, #4]	; (8002348 <HAL_GetTick+0x8>)
 8002342:	6818      	ldr	r0, [r3, #0]
}
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop
 8002348:	20001880 	.word	0x20001880

0800234c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800234c:	4a07      	ldr	r2, [pc, #28]	; (800236c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800234e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002350:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002354:	041b      	lsls	r3, r3, #16
 8002356:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002358:	0200      	lsls	r0, r0, #8
 800235a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800235e:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8002360:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002364:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002368:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800236a:	4770      	bx	lr
 800236c:	e000ed00 	.word	0xe000ed00

08002370 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002370:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002372:	4b19      	ldr	r3, [pc, #100]	; (80023d8 <HAL_NVIC_SetPriority+0x68>)
 8002374:	68db      	ldr	r3, [r3, #12]
 8002376:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800237a:	f1c3 0c07 	rsb	ip, r3, #7
 800237e:	f1bc 0f04 	cmp.w	ip, #4
 8002382:	bf28      	it	cs
 8002384:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002388:	f103 0e04 	add.w	lr, r3, #4
 800238c:	f1be 0f06 	cmp.w	lr, #6
 8002390:	d918      	bls.n	80023c4 <HAL_NVIC_SetPriority+0x54>
 8002392:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002394:	f04f 3eff 	mov.w	lr, #4294967295
 8002398:	fa0e fc0c 	lsl.w	ip, lr, ip
 800239c:	ea21 010c 	bic.w	r1, r1, ip
 80023a0:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023a2:	fa0e f303 	lsl.w	r3, lr, r3
 80023a6:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023aa:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80023ac:	2800      	cmp	r0, #0
 80023ae:	db0b      	blt.n	80023c8 <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023b0:	0109      	lsls	r1, r1, #4
 80023b2:	b2c9      	uxtb	r1, r1
 80023b4:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80023b8:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80023bc:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80023c0:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023c4:	2300      	movs	r3, #0
 80023c6:	e7e5      	b.n	8002394 <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023c8:	f000 000f 	and.w	r0, r0, #15
 80023cc:	0109      	lsls	r1, r1, #4
 80023ce:	b2c9      	uxtb	r1, r1
 80023d0:	4b02      	ldr	r3, [pc, #8]	; (80023dc <HAL_NVIC_SetPriority+0x6c>)
 80023d2:	5419      	strb	r1, [r3, r0]
 80023d4:	e7f4      	b.n	80023c0 <HAL_NVIC_SetPriority+0x50>
 80023d6:	bf00      	nop
 80023d8:	e000ed00 	.word	0xe000ed00
 80023dc:	e000ed14 	.word	0xe000ed14

080023e0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80023e0:	2800      	cmp	r0, #0
 80023e2:	db07      	blt.n	80023f4 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023e4:	f000 021f 	and.w	r2, r0, #31
 80023e8:	0940      	lsrs	r0, r0, #5
 80023ea:	2301      	movs	r3, #1
 80023ec:	4093      	lsls	r3, r2
 80023ee:	4a02      	ldr	r2, [pc, #8]	; (80023f8 <HAL_NVIC_EnableIRQ+0x18>)
 80023f0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	e000e100 	.word	0xe000e100

080023fc <HAL_NVIC_SystemReset>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80023fc:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002400:	4905      	ldr	r1, [pc, #20]	; (8002418 <HAL_NVIC_SystemReset+0x1c>)
 8002402:	68ca      	ldr	r2, [r1, #12]
 8002404:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002408:	4b04      	ldr	r3, [pc, #16]	; (800241c <HAL_NVIC_SystemReset+0x20>)
 800240a:	4313      	orrs	r3, r2
 800240c:	60cb      	str	r3, [r1, #12]
 800240e:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002412:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8002414:	e7fd      	b.n	8002412 <HAL_NVIC_SystemReset+0x16>
 8002416:	bf00      	nop
 8002418:	e000ed00 	.word	0xe000ed00
 800241c:	05fa0004 	.word	0x05fa0004

08002420 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002420:	3801      	subs	r0, #1
 8002422:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002426:	d20b      	bcs.n	8002440 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002428:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800242c:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800242e:	4a05      	ldr	r2, [pc, #20]	; (8002444 <HAL_SYSTICK_Config+0x24>)
 8002430:	21f0      	movs	r1, #240	; 0xf0
 8002432:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002436:	2000      	movs	r0, #0
 8002438:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800243a:	2207      	movs	r2, #7
 800243c:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800243e:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002440:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002442:	4770      	bx	lr
 8002444:	e000ed00 	.word	0xe000ed00

08002448 <HAL_DMA_Abort>:
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002448:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800244c:	2b02      	cmp	r3, #2
 800244e:	d006      	beq.n	800245e <HAL_DMA_Abort+0x16>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002450:	2304      	movs	r3, #4
 8002452:	6383      	str	r3, [r0, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002454:	2300      	movs	r3, #0
 8002456:	f880 3020 	strb.w	r3, [r0, #32]
    
    return HAL_ERROR;
 800245a:	2001      	movs	r0, #1
 800245c:	4770      	bx	lr
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800245e:	6802      	ldr	r2, [r0, #0]
 8002460:	6813      	ldr	r3, [r2, #0]
 8002462:	f023 030e 	bic.w	r3, r3, #14
 8002466:	6013      	str	r3, [r2, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002468:	6802      	ldr	r2, [r0, #0]
 800246a:	6813      	ldr	r3, [r2, #0]
 800246c:	f023 0301 	bic.w	r3, r3, #1
 8002470:	6013      	str	r3, [r2, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002472:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002474:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8002476:	2201      	movs	r2, #1
 8002478:	fa02 f303 	lsl.w	r3, r2, r3
 800247c:	604b      	str	r3, [r1, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800247e:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002482:	2300      	movs	r3, #0
 8002484:	f880 3020 	strb.w	r3, [r0, #32]
  
  return status; 
 8002488:	4618      	mov	r0, r3
}
 800248a:	4770      	bx	lr

0800248c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800248c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800248e:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8002492:	2b02      	cmp	r3, #2
 8002494:	d003      	beq.n	800249e <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002496:	2304      	movs	r3, #4
 8002498:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 800249a:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 800249c:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800249e:	6802      	ldr	r2, [r0, #0]
 80024a0:	6813      	ldr	r3, [r2, #0]
 80024a2:	f023 030e 	bic.w	r3, r3, #14
 80024a6:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80024a8:	6802      	ldr	r2, [r0, #0]
 80024aa:	6813      	ldr	r3, [r2, #0]
 80024ac:	f023 0301 	bic.w	r3, r3, #1
 80024b0:	6013      	str	r3, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80024b2:	6803      	ldr	r3, [r0, #0]
 80024b4:	4a19      	ldr	r2, [pc, #100]	; (800251c <HAL_DMA_Abort_IT+0x90>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d014      	beq.n	80024e4 <HAL_DMA_Abort_IT+0x58>
 80024ba:	3214      	adds	r2, #20
 80024bc:	4293      	cmp	r3, r2
 80024be:	d01f      	beq.n	8002500 <HAL_DMA_Abort_IT+0x74>
 80024c0:	3214      	adds	r2, #20
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d01e      	beq.n	8002504 <HAL_DMA_Abort_IT+0x78>
 80024c6:	3214      	adds	r2, #20
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d01e      	beq.n	800250a <HAL_DMA_Abort_IT+0x7e>
 80024cc:	3214      	adds	r2, #20
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d01e      	beq.n	8002510 <HAL_DMA_Abort_IT+0x84>
 80024d2:	3214      	adds	r2, #20
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d002      	beq.n	80024de <HAL_DMA_Abort_IT+0x52>
 80024d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80024dc:	e003      	b.n	80024e6 <HAL_DMA_Abort_IT+0x5a>
 80024de:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80024e2:	e000      	b.n	80024e6 <HAL_DMA_Abort_IT+0x5a>
 80024e4:	2201      	movs	r2, #1
 80024e6:	4b0e      	ldr	r3, [pc, #56]	; (8002520 <HAL_DMA_Abort_IT+0x94>)
 80024e8:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80024ea:	2301      	movs	r3, #1
 80024ec:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 80024f0:	2300      	movs	r3, #0
 80024f2:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 80024f6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80024f8:	b16b      	cbz	r3, 8002516 <HAL_DMA_Abort_IT+0x8a>
      hdma->XferAbortCallback(hdma);
 80024fa:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80024fc:	2000      	movs	r0, #0
 80024fe:	e7cd      	b.n	800249c <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002500:	2210      	movs	r2, #16
 8002502:	e7f0      	b.n	80024e6 <HAL_DMA_Abort_IT+0x5a>
 8002504:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002508:	e7ed      	b.n	80024e6 <HAL_DMA_Abort_IT+0x5a>
 800250a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800250e:	e7ea      	b.n	80024e6 <HAL_DMA_Abort_IT+0x5a>
 8002510:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002514:	e7e7      	b.n	80024e6 <HAL_DMA_Abort_IT+0x5a>
  HAL_StatusTypeDef status = HAL_OK;
 8002516:	2000      	movs	r0, #0
 8002518:	e7c0      	b.n	800249c <HAL_DMA_Abort_IT+0x10>
 800251a:	bf00      	nop
 800251c:	40020008 	.word	0x40020008
 8002520:	40020000 	.word	0x40020000

08002524 <FLASH_Program_HalfWord>:
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002524:	4b04      	ldr	r3, [pc, #16]	; (8002538 <FLASH_Program_HalfWord+0x14>)
 8002526:	2200      	movs	r2, #0
 8002528:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800252a:	4a04      	ldr	r2, [pc, #16]	; (800253c <FLASH_Program_HalfWord+0x18>)
 800252c:	6913      	ldr	r3, [r2, #16]
 800252e:	f043 0301 	orr.w	r3, r3, #1
 8002532:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8002534:	8001      	strh	r1, [r0, #0]
}
 8002536:	4770      	bx	lr
 8002538:	20001888 	.word	0x20001888
 800253c:	40022000 	.word	0x40022000

08002540 <FLASH_SetErrorCode>:
  uint32_t flags = 0U;
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8002540:	4b19      	ldr	r3, [pc, #100]	; (80025a8 <FLASH_SetErrorCode+0x68>)
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	f013 0310 	ands.w	r3, r3, #16
 8002548:	d005      	beq.n	8002556 <FLASH_SetErrorCode+0x16>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800254a:	4a18      	ldr	r2, [pc, #96]	; (80025ac <FLASH_SetErrorCode+0x6c>)
 800254c:	69d3      	ldr	r3, [r2, #28]
 800254e:	f043 0302 	orr.w	r3, r3, #2
 8002552:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8002554:	2310      	movs	r3, #16
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002556:	4a14      	ldr	r2, [pc, #80]	; (80025a8 <FLASH_SetErrorCode+0x68>)
 8002558:	68d2      	ldr	r2, [r2, #12]
 800255a:	f012 0f04 	tst.w	r2, #4
 800255e:	d006      	beq.n	800256e <FLASH_SetErrorCode+0x2e>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8002560:	4912      	ldr	r1, [pc, #72]	; (80025ac <FLASH_SetErrorCode+0x6c>)
 8002562:	69ca      	ldr	r2, [r1, #28]
 8002564:	f042 0201 	orr.w	r2, r2, #1
 8002568:	61ca      	str	r2, [r1, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 800256a:	f043 0304 	orr.w	r3, r3, #4
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800256e:	4a0e      	ldr	r2, [pc, #56]	; (80025a8 <FLASH_SetErrorCode+0x68>)
 8002570:	69d2      	ldr	r2, [r2, #28]
 8002572:	f012 0f01 	tst.w	r2, #1
 8002576:	d009      	beq.n	800258c <FLASH_SetErrorCode+0x4c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8002578:	490c      	ldr	r1, [pc, #48]	; (80025ac <FLASH_SetErrorCode+0x6c>)
 800257a:	69ca      	ldr	r2, [r1, #28]
 800257c:	f042 0204 	orr.w	r2, r2, #4
 8002580:	61ca      	str	r2, [r1, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8002582:	4909      	ldr	r1, [pc, #36]	; (80025a8 <FLASH_SetErrorCode+0x68>)
 8002584:	69ca      	ldr	r2, [r1, #28]
 8002586:	f022 0201 	bic.w	r2, r2, #1
 800258a:	61ca      	str	r2, [r1, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800258c:	f240 1201 	movw	r2, #257	; 0x101
 8002590:	4293      	cmp	r3, r2
 8002592:	d002      	beq.n	800259a <FLASH_SetErrorCode+0x5a>
 8002594:	4a04      	ldr	r2, [pc, #16]	; (80025a8 <FLASH_SetErrorCode+0x68>)
 8002596:	60d3      	str	r3, [r2, #12]
}  
 8002598:	4770      	bx	lr
  __HAL_FLASH_CLEAR_FLAG(flags);
 800259a:	4a03      	ldr	r2, [pc, #12]	; (80025a8 <FLASH_SetErrorCode+0x68>)
 800259c:	69d3      	ldr	r3, [r2, #28]
 800259e:	f023 0301 	bic.w	r3, r3, #1
 80025a2:	61d3      	str	r3, [r2, #28]
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	40022000 	.word	0x40022000
 80025ac:	20001888 	.word	0x20001888

080025b0 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80025b0:	4b0a      	ldr	r3, [pc, #40]	; (80025dc <HAL_FLASH_Unlock+0x2c>)
 80025b2:	691b      	ldr	r3, [r3, #16]
 80025b4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80025b8:	d00b      	beq.n	80025d2 <HAL_FLASH_Unlock+0x22>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80025ba:	4b08      	ldr	r3, [pc, #32]	; (80025dc <HAL_FLASH_Unlock+0x2c>)
 80025bc:	4a08      	ldr	r2, [pc, #32]	; (80025e0 <HAL_FLASH_Unlock+0x30>)
 80025be:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80025c0:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 80025c4:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80025c6:	691b      	ldr	r3, [r3, #16]
 80025c8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80025cc:	d103      	bne.n	80025d6 <HAL_FLASH_Unlock+0x26>
  HAL_StatusTypeDef status = HAL_OK;
 80025ce:	2000      	movs	r0, #0
 80025d0:	4770      	bx	lr
 80025d2:	2000      	movs	r0, #0
 80025d4:	4770      	bx	lr
      status = HAL_ERROR;
 80025d6:	2001      	movs	r0, #1
}
 80025d8:	4770      	bx	lr
 80025da:	bf00      	nop
 80025dc:	40022000 	.word	0x40022000
 80025e0:	45670123 	.word	0x45670123

080025e4 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80025e4:	4a03      	ldr	r2, [pc, #12]	; (80025f4 <HAL_FLASH_Lock+0x10>)
 80025e6:	6913      	ldr	r3, [r2, #16]
 80025e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025ec:	6113      	str	r3, [r2, #16]
}
 80025ee:	2000      	movs	r0, #0
 80025f0:	4770      	bx	lr
 80025f2:	bf00      	nop
 80025f4:	40022000 	.word	0x40022000

080025f8 <HAL_FLASH_GetError>:
   return pFlash.ErrorCode;
 80025f8:	4b01      	ldr	r3, [pc, #4]	; (8002600 <HAL_FLASH_GetError+0x8>)
 80025fa:	69d8      	ldr	r0, [r3, #28]
}
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop
 8002600:	20001888 	.word	0x20001888

08002604 <FLASH_WaitForLastOperation>:
{
 8002604:	b538      	push	{r3, r4, r5, lr}
 8002606:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002608:	f7ff fe9a 	bl	8002340 <HAL_GetTick>
 800260c:	4605      	mov	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800260e:	4b16      	ldr	r3, [pc, #88]	; (8002668 <FLASH_WaitForLastOperation+0x64>)
 8002610:	68db      	ldr	r3, [r3, #12]
 8002612:	f013 0f01 	tst.w	r3, #1
 8002616:	d00a      	beq.n	800262e <FLASH_WaitForLastOperation+0x2a>
    if (Timeout != HAL_MAX_DELAY)
 8002618:	f1b4 3fff 	cmp.w	r4, #4294967295
 800261c:	d0f7      	beq.n	800260e <FLASH_WaitForLastOperation+0xa>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800261e:	b124      	cbz	r4, 800262a <FLASH_WaitForLastOperation+0x26>
 8002620:	f7ff fe8e 	bl	8002340 <HAL_GetTick>
 8002624:	1b40      	subs	r0, r0, r5
 8002626:	42a0      	cmp	r0, r4
 8002628:	d9f1      	bls.n	800260e <FLASH_WaitForLastOperation+0xa>
        return HAL_TIMEOUT;
 800262a:	2003      	movs	r0, #3
 800262c:	e01b      	b.n	8002666 <FLASH_WaitForLastOperation+0x62>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800262e:	4b0e      	ldr	r3, [pc, #56]	; (8002668 <FLASH_WaitForLastOperation+0x64>)
 8002630:	68db      	ldr	r3, [r3, #12]
 8002632:	f013 0f20 	tst.w	r3, #32
 8002636:	d002      	beq.n	800263e <FLASH_WaitForLastOperation+0x3a>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002638:	4b0b      	ldr	r3, [pc, #44]	; (8002668 <FLASH_WaitForLastOperation+0x64>)
 800263a:	2220      	movs	r2, #32
 800263c:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800263e:	4b0a      	ldr	r3, [pc, #40]	; (8002668 <FLASH_WaitForLastOperation+0x64>)
 8002640:	68db      	ldr	r3, [r3, #12]
 8002642:	f013 0f10 	tst.w	r3, #16
 8002646:	d10b      	bne.n	8002660 <FLASH_WaitForLastOperation+0x5c>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002648:	4b07      	ldr	r3, [pc, #28]	; (8002668 <FLASH_WaitForLastOperation+0x64>)
 800264a:	69db      	ldr	r3, [r3, #28]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800264c:	f013 0f01 	tst.w	r3, #1
 8002650:	d106      	bne.n	8002660 <FLASH_WaitForLastOperation+0x5c>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002652:	4b05      	ldr	r3, [pc, #20]	; (8002668 <FLASH_WaitForLastOperation+0x64>)
 8002654:	68db      	ldr	r3, [r3, #12]
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002656:	f013 0f04 	tst.w	r3, #4
 800265a:	d101      	bne.n	8002660 <FLASH_WaitForLastOperation+0x5c>
  return HAL_OK;
 800265c:	2000      	movs	r0, #0
 800265e:	e002      	b.n	8002666 <FLASH_WaitForLastOperation+0x62>
    FLASH_SetErrorCode();
 8002660:	f7ff ff6e 	bl	8002540 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002664:	2001      	movs	r0, #1
}
 8002666:	bd38      	pop	{r3, r4, r5, pc}
 8002668:	40022000 	.word	0x40022000

0800266c <HAL_FLASH_Program>:
{
 800266c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002670:	461e      	mov	r6, r3
  __HAL_LOCK(&pFlash);
 8002672:	4b24      	ldr	r3, [pc, #144]	; (8002704 <HAL_FLASH_Program+0x98>)
 8002674:	7e1b      	ldrb	r3, [r3, #24]
 8002676:	2b01      	cmp	r3, #1
 8002678:	d041      	beq.n	80026fe <HAL_FLASH_Program+0x92>
 800267a:	4604      	mov	r4, r0
 800267c:	460f      	mov	r7, r1
 800267e:	4690      	mov	r8, r2
 8002680:	4b20      	ldr	r3, [pc, #128]	; (8002704 <HAL_FLASH_Program+0x98>)
 8002682:	2201      	movs	r2, #1
 8002684:	761a      	strb	r2, [r3, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002686:	f24c 3050 	movw	r0, #50000	; 0xc350
 800268a:	f7ff ffbb 	bl	8002604 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 800268e:	4603      	mov	r3, r0
 8002690:	bb78      	cbnz	r0, 80026f2 <HAL_FLASH_Program+0x86>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002692:	2c01      	cmp	r4, #1
 8002694:	d008      	beq.n	80026a8 <HAL_FLASH_Program+0x3c>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002696:	2c02      	cmp	r4, #2
 8002698:	d003      	beq.n	80026a2 <HAL_FLASH_Program+0x36>
      nbiterations = 4U;
 800269a:	f04f 0904 	mov.w	r9, #4
    for (index = 0U; index < nbiterations; index++)
 800269e:	461c      	mov	r4, r3
 80026a0:	e007      	b.n	80026b2 <HAL_FLASH_Program+0x46>
      nbiterations = 2U;
 80026a2:	f04f 0902 	mov.w	r9, #2
 80026a6:	e7fa      	b.n	800269e <HAL_FLASH_Program+0x32>
      nbiterations = 1U;
 80026a8:	f04f 0901 	mov.w	r9, #1
 80026ac:	e7f7      	b.n	800269e <HAL_FLASH_Program+0x32>
    for (index = 0U; index < nbiterations; index++)
 80026ae:	3401      	adds	r4, #1
 80026b0:	b2e4      	uxtb	r4, r4
 80026b2:	454c      	cmp	r4, r9
 80026b4:	d21d      	bcs.n	80026f2 <HAL_FLASH_Program+0x86>
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80026b6:	0121      	lsls	r1, r4, #4
 80026b8:	f1c1 0220 	rsb	r2, r1, #32
 80026bc:	f1a1 0320 	sub.w	r3, r1, #32
 80026c0:	fa28 f101 	lsr.w	r1, r8, r1
 80026c4:	fa06 f202 	lsl.w	r2, r6, r2
 80026c8:	4311      	orrs	r1, r2
 80026ca:	fa26 f303 	lsr.w	r3, r6, r3
 80026ce:	4319      	orrs	r1, r3
 80026d0:	b289      	uxth	r1, r1
 80026d2:	eb07 0044 	add.w	r0, r7, r4, lsl #1
 80026d6:	f7ff ff25 	bl	8002524 <FLASH_Program_HalfWord>
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80026da:	f24c 3050 	movw	r0, #50000	; 0xc350
 80026de:	f7ff ff91 	bl	8002604 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80026e2:	4b09      	ldr	r3, [pc, #36]	; (8002708 <HAL_FLASH_Program+0x9c>)
 80026e4:	691d      	ldr	r5, [r3, #16]
 80026e6:	f025 0501 	bic.w	r5, r5, #1
 80026ea:	611d      	str	r5, [r3, #16]
      if (status != HAL_OK)
 80026ec:	4603      	mov	r3, r0
 80026ee:	2800      	cmp	r0, #0
 80026f0:	d0dd      	beq.n	80026ae <HAL_FLASH_Program+0x42>
  __HAL_UNLOCK(&pFlash);
 80026f2:	4a04      	ldr	r2, [pc, #16]	; (8002704 <HAL_FLASH_Program+0x98>)
 80026f4:	2100      	movs	r1, #0
 80026f6:	7611      	strb	r1, [r2, #24]
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(&pFlash);
 80026fe:	2302      	movs	r3, #2
 8002700:	e7fa      	b.n	80026f8 <HAL_FLASH_Program+0x8c>
 8002702:	bf00      	nop
 8002704:	20001888 	.word	0x20001888
 8002708:	40022000 	.word	0x40022000

0800270c <FLASH_MassErase>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800270c:	4b06      	ldr	r3, [pc, #24]	; (8002728 <FLASH_MassErase+0x1c>)
 800270e:	2200      	movs	r2, #0
 8002710:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8002712:	4b06      	ldr	r3, [pc, #24]	; (800272c <FLASH_MassErase+0x20>)
 8002714:	691a      	ldr	r2, [r3, #16]
 8002716:	f042 0204 	orr.w	r2, r2, #4
 800271a:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800271c:	691a      	ldr	r2, [r3, #16]
 800271e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002722:	611a      	str	r2, [r3, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8002724:	4770      	bx	lr
 8002726:	bf00      	nop
 8002728:	20001888 	.word	0x20001888
 800272c:	40022000 	.word	0x40022000

08002730 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002730:	4b06      	ldr	r3, [pc, #24]	; (800274c <FLASH_PageErase+0x1c>)
 8002732:	2200      	movs	r2, #0
 8002734:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8002736:	4b06      	ldr	r3, [pc, #24]	; (8002750 <FLASH_PageErase+0x20>)
 8002738:	691a      	ldr	r2, [r3, #16]
 800273a:	f042 0202 	orr.w	r2, r2, #2
 800273e:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8002740:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002742:	691a      	ldr	r2, [r3, #16]
 8002744:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002748:	611a      	str	r2, [r3, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800274a:	4770      	bx	lr
 800274c:	20001888 	.word	0x20001888
 8002750:	40022000 	.word	0x40022000

08002754 <HAL_FLASHEx_Erase>:
  __HAL_LOCK(&pFlash);
 8002754:	4b26      	ldr	r3, [pc, #152]	; (80027f0 <HAL_FLASHEx_Erase+0x9c>)
 8002756:	7e1b      	ldrb	r3, [r3, #24]
 8002758:	2b01      	cmp	r3, #1
 800275a:	d046      	beq.n	80027ea <HAL_FLASHEx_Erase+0x96>
{
 800275c:	b570      	push	{r4, r5, r6, lr}
 800275e:	4605      	mov	r5, r0
 8002760:	460e      	mov	r6, r1
  __HAL_LOCK(&pFlash);
 8002762:	4b23      	ldr	r3, [pc, #140]	; (80027f0 <HAL_FLASHEx_Erase+0x9c>)
 8002764:	2201      	movs	r2, #1
 8002766:	761a      	strb	r2, [r3, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002768:	6803      	ldr	r3, [r0, #0]
 800276a:	2b02      	cmp	r3, #2
 800276c:	d020      	beq.n	80027b0 <HAL_FLASHEx_Erase+0x5c>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800276e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002772:	f7ff ff47 	bl	8002604 <FLASH_WaitForLastOperation>
 8002776:	bb90      	cbnz	r0, 80027de <HAL_FLASHEx_Erase+0x8a>
        *PageError = 0xFFFFFFFFU;
 8002778:	f04f 33ff 	mov.w	r3, #4294967295
 800277c:	6033      	str	r3, [r6, #0]
        for(address = pEraseInit->PageAddress;
 800277e:	68ac      	ldr	r4, [r5, #8]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002780:	2101      	movs	r1, #1
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8002782:	68ea      	ldr	r2, [r5, #12]
 8002784:	68ab      	ldr	r3, [r5, #8]
 8002786:	eb03 2382 	add.w	r3, r3, r2, lsl #10
        for(address = pEraseInit->PageAddress;
 800278a:	42a3      	cmp	r3, r4
 800278c:	d928      	bls.n	80027e0 <HAL_FLASHEx_Erase+0x8c>
          FLASH_PageErase(address);
 800278e:	4620      	mov	r0, r4
 8002790:	f7ff ffce 	bl	8002730 <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002794:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002798:	f7ff ff34 	bl	8002604 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800279c:	4a15      	ldr	r2, [pc, #84]	; (80027f4 <HAL_FLASHEx_Erase+0xa0>)
 800279e:	6913      	ldr	r3, [r2, #16]
 80027a0:	f023 0302 	bic.w	r3, r3, #2
 80027a4:	6113      	str	r3, [r2, #16]
          if (status != HAL_OK)
 80027a6:	4601      	mov	r1, r0
 80027a8:	b9b8      	cbnz	r0, 80027da <HAL_FLASHEx_Erase+0x86>
            address += FLASH_PAGE_SIZE)
 80027aa:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80027ae:	e7e8      	b.n	8002782 <HAL_FLASHEx_Erase+0x2e>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80027b0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80027b4:	f7ff ff26 	bl	8002604 <FLASH_WaitForLastOperation>
 80027b8:	b108      	cbz	r0, 80027be <HAL_FLASHEx_Erase+0x6a>
  HAL_StatusTypeDef status = HAL_ERROR;
 80027ba:	2101      	movs	r1, #1
 80027bc:	e010      	b.n	80027e0 <HAL_FLASHEx_Erase+0x8c>
        FLASH_MassErase(FLASH_BANK_1);
 80027be:	2001      	movs	r0, #1
 80027c0:	f7ff ffa4 	bl	800270c <FLASH_MassErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80027c4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80027c8:	f7ff ff1c 	bl	8002604 <FLASH_WaitForLastOperation>
 80027cc:	4601      	mov	r1, r0
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80027ce:	4a09      	ldr	r2, [pc, #36]	; (80027f4 <HAL_FLASHEx_Erase+0xa0>)
 80027d0:	6913      	ldr	r3, [r2, #16]
 80027d2:	f023 0304 	bic.w	r3, r3, #4
 80027d6:	6113      	str	r3, [r2, #16]
 80027d8:	e002      	b.n	80027e0 <HAL_FLASHEx_Erase+0x8c>
            *PageError = address;
 80027da:	6034      	str	r4, [r6, #0]
            break;
 80027dc:	e000      	b.n	80027e0 <HAL_FLASHEx_Erase+0x8c>
  HAL_StatusTypeDef status = HAL_ERROR;
 80027de:	2101      	movs	r1, #1
  __HAL_UNLOCK(&pFlash);
 80027e0:	4b03      	ldr	r3, [pc, #12]	; (80027f0 <HAL_FLASHEx_Erase+0x9c>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	761a      	strb	r2, [r3, #24]
}
 80027e6:	4608      	mov	r0, r1
 80027e8:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(&pFlash);
 80027ea:	2102      	movs	r1, #2
}
 80027ec:	4608      	mov	r0, r1
 80027ee:	4770      	bx	lr
 80027f0:	20001888 	.word	0x20001888
 80027f4:	40022000 	.word	0x40022000

080027f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027f8:	b570      	push	{r4, r5, r6, lr}
 80027fa:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80027fc:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 80027fe:	46a4      	mov	ip, r4
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002800:	e0a6      	b.n	8002950 <HAL_GPIO_Init+0x158>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002802:	4d80      	ldr	r5, [pc, #512]	; (8002a04 <HAL_GPIO_Init+0x20c>)
 8002804:	42aa      	cmp	r2, r5
 8002806:	d010      	beq.n	800282a <HAL_GPIO_Init+0x32>
 8002808:	d907      	bls.n	800281a <HAL_GPIO_Init+0x22>
 800280a:	4d7f      	ldr	r5, [pc, #508]	; (8002a08 <HAL_GPIO_Init+0x210>)
 800280c:	42aa      	cmp	r2, r5
 800280e:	d00c      	beq.n	800282a <HAL_GPIO_Init+0x32>
 8002810:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
 8002814:	42aa      	cmp	r2, r5
 8002816:	d008      	beq.n	800282a <HAL_GPIO_Init+0x32>
 8002818:	e013      	b.n	8002842 <HAL_GPIO_Init+0x4a>
 800281a:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800281e:	42aa      	cmp	r2, r5
 8002820:	d003      	beq.n	800282a <HAL_GPIO_Init+0x32>
 8002822:	f505 2570 	add.w	r5, r5, #983040	; 0xf0000
 8002826:	42aa      	cmp	r2, r5
 8002828:	d107      	bne.n	800283a <HAL_GPIO_Init+0x42>
        case GPIO_MODE_EVT_RISING:
        case GPIO_MODE_EVT_FALLING:
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800282a:	688a      	ldr	r2, [r1, #8]
 800282c:	2a00      	cmp	r2, #0
 800282e:	d058      	beq.n	80028e2 <HAL_GPIO_Init+0xea>
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
          }
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002830:	2a01      	cmp	r2, #1
 8002832:	d051      	beq.n	80028d8 <HAL_GPIO_Init+0xe0>
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;

            /* Reset the corresponding ODR bit */
            GPIOx->BRR = ioposition;
 8002834:	6143      	str	r3, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002836:	2408      	movs	r4, #8
 8002838:	e003      	b.n	8002842 <HAL_GPIO_Init+0x4a>
      switch (GPIO_Init->Mode)
 800283a:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800283e:	42aa      	cmp	r2, r5
 8002840:	d0f3      	beq.n	800282a <HAL_GPIO_Init+0x32>
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002842:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8002846:	d84e      	bhi.n	80028e6 <HAL_GPIO_Init+0xee>
 8002848:	4606      	mov	r6, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800284a:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 800284e:	d84c      	bhi.n	80028ea <HAL_GPIO_Init+0xf2>
 8002850:	ea4f 028c 	mov.w	r2, ip, lsl #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002854:	6833      	ldr	r3, [r6, #0]
 8002856:	250f      	movs	r5, #15
 8002858:	4095      	lsls	r5, r2
 800285a:	ea23 0305 	bic.w	r3, r3, r5
 800285e:	fa04 f202 	lsl.w	r2, r4, r2
 8002862:	4313      	orrs	r3, r2
 8002864:	6033      	str	r3, [r6, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002866:	684b      	ldr	r3, [r1, #4]
 8002868:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800286c:	d06e      	beq.n	800294c <HAL_GPIO_Init+0x154>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800286e:	4b67      	ldr	r3, [pc, #412]	; (8002a0c <HAL_GPIO_Init+0x214>)
 8002870:	699a      	ldr	r2, [r3, #24]
 8002872:	f042 0201 	orr.w	r2, r2, #1
 8002876:	619a      	str	r2, [r3, #24]
 8002878:	699b      	ldr	r3, [r3, #24]
 800287a:	f003 0301 	and.w	r3, r3, #1
 800287e:	9301      	str	r3, [sp, #4]
 8002880:	9b01      	ldr	r3, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8002882:	ea4f 029c 	mov.w	r2, ip, lsr #2
 8002886:	1c95      	adds	r5, r2, #2
 8002888:	4b61      	ldr	r3, [pc, #388]	; (8002a10 <HAL_GPIO_Init+0x218>)
 800288a:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800288e:	f00c 0303 	and.w	r3, ip, #3
 8002892:	009d      	lsls	r5, r3, #2
 8002894:	230f      	movs	r3, #15
 8002896:	40ab      	lsls	r3, r5
 8002898:	ea26 0603 	bic.w	r6, r6, r3
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800289c:	4b5d      	ldr	r3, [pc, #372]	; (8002a14 <HAL_GPIO_Init+0x21c>)
 800289e:	4298      	cmp	r0, r3
 80028a0:	d029      	beq.n	80028f6 <HAL_GPIO_Init+0xfe>
 80028a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80028a6:	4298      	cmp	r0, r3
 80028a8:	f000 808e 	beq.w	80029c8 <HAL_GPIO_Init+0x1d0>
 80028ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80028b0:	4298      	cmp	r0, r3
 80028b2:	f000 808b 	beq.w	80029cc <HAL_GPIO_Init+0x1d4>
 80028b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80028ba:	4298      	cmp	r0, r3
 80028bc:	d019      	beq.n	80028f2 <HAL_GPIO_Init+0xfa>
 80028be:	2304      	movs	r3, #4
 80028c0:	e01a      	b.n	80028f8 <HAL_GPIO_Init+0x100>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80028c2:	68cc      	ldr	r4, [r1, #12]
          break;
 80028c4:	e7bd      	b.n	8002842 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80028c6:	68cc      	ldr	r4, [r1, #12]
 80028c8:	3404      	adds	r4, #4
          break;
 80028ca:	e7ba      	b.n	8002842 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80028cc:	68cc      	ldr	r4, [r1, #12]
 80028ce:	3408      	adds	r4, #8
          break;
 80028d0:	e7b7      	b.n	8002842 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80028d2:	68cc      	ldr	r4, [r1, #12]
 80028d4:	340c      	adds	r4, #12
          break;
 80028d6:	e7b4      	b.n	8002842 <HAL_GPIO_Init+0x4a>
            GPIOx->BSRR = ioposition;
 80028d8:	6103      	str	r3, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80028da:	2408      	movs	r4, #8
 80028dc:	e7b1      	b.n	8002842 <HAL_GPIO_Init+0x4a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80028de:	2400      	movs	r4, #0
 80028e0:	e7af      	b.n	8002842 <HAL_GPIO_Init+0x4a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80028e2:	2404      	movs	r4, #4
 80028e4:	e7ad      	b.n	8002842 <HAL_GPIO_Init+0x4a>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80028e6:	1d06      	adds	r6, r0, #4
 80028e8:	e7af      	b.n	800284a <HAL_GPIO_Init+0x52>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80028ea:	f1ac 0208 	sub.w	r2, ip, #8
 80028ee:	0092      	lsls	r2, r2, #2
 80028f0:	e7b0      	b.n	8002854 <HAL_GPIO_Init+0x5c>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80028f2:	2303      	movs	r3, #3
 80028f4:	e000      	b.n	80028f8 <HAL_GPIO_Init+0x100>
 80028f6:	2300      	movs	r3, #0
 80028f8:	40ab      	lsls	r3, r5
 80028fa:	4333      	orrs	r3, r6
        AFIO->EXTICR[position >> 2u] = temp;
 80028fc:	3202      	adds	r2, #2
 80028fe:	4d44      	ldr	r5, [pc, #272]	; (8002a10 <HAL_GPIO_Init+0x218>)
 8002900:	f845 3022 	str.w	r3, [r5, r2, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002904:	684b      	ldr	r3, [r1, #4]
 8002906:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800290a:	d061      	beq.n	80029d0 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800290c:	4a42      	ldr	r2, [pc, #264]	; (8002a18 <HAL_GPIO_Init+0x220>)
 800290e:	6813      	ldr	r3, [r2, #0]
 8002910:	ea43 030e 	orr.w	r3, r3, lr
 8002914:	6013      	str	r3, [r2, #0]
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002916:	684b      	ldr	r3, [r1, #4]
 8002918:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800291c:	d05e      	beq.n	80029dc <HAL_GPIO_Init+0x1e4>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800291e:	4a3e      	ldr	r2, [pc, #248]	; (8002a18 <HAL_GPIO_Init+0x220>)
 8002920:	6853      	ldr	r3, [r2, #4]
 8002922:	ea43 030e 	orr.w	r3, r3, lr
 8002926:	6053      	str	r3, [r2, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002928:	684b      	ldr	r3, [r1, #4]
 800292a:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800292e:	d05b      	beq.n	80029e8 <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002930:	4a39      	ldr	r2, [pc, #228]	; (8002a18 <HAL_GPIO_Init+0x220>)
 8002932:	6893      	ldr	r3, [r2, #8]
 8002934:	ea43 030e 	orr.w	r3, r3, lr
 8002938:	6093      	str	r3, [r2, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800293a:	684b      	ldr	r3, [r1, #4]
 800293c:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8002940:	d058      	beq.n	80029f4 <HAL_GPIO_Init+0x1fc>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002942:	4a35      	ldr	r2, [pc, #212]	; (8002a18 <HAL_GPIO_Init+0x220>)
 8002944:	68d3      	ldr	r3, [r2, #12]
 8002946:	ea43 030e 	orr.w	r3, r3, lr
 800294a:	60d3      	str	r3, [r2, #12]
          CLEAR_BIT(EXTI->FTSR, iocurrent);
        }
      }
    }

	position++;
 800294c:	f10c 0c01 	add.w	ip, ip, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002950:	680a      	ldr	r2, [r1, #0]
 8002952:	fa32 f30c 	lsrs.w	r3, r2, ip
 8002956:	d053      	beq.n	8002a00 <HAL_GPIO_Init+0x208>
    ioposition = (0x01uL << position);
 8002958:	2301      	movs	r3, #1
 800295a:	fa03 f30c 	lsl.w	r3, r3, ip
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800295e:	ea02 0e03 	and.w	lr, r2, r3
    if (iocurrent == ioposition)
 8002962:	ea33 0202 	bics.w	r2, r3, r2
 8002966:	d1f1      	bne.n	800294c <HAL_GPIO_Init+0x154>
      switch (GPIO_Init->Mode)
 8002968:	684a      	ldr	r2, [r1, #4]
 800296a:	2a12      	cmp	r2, #18
 800296c:	f63f af49 	bhi.w	8002802 <HAL_GPIO_Init+0xa>
 8002970:	2a12      	cmp	r2, #18
 8002972:	f63f af66 	bhi.w	8002842 <HAL_GPIO_Init+0x4a>
 8002976:	a501      	add	r5, pc, #4	; (adr r5, 800297c <HAL_GPIO_Init+0x184>)
 8002978:	f855 f022 	ldr.w	pc, [r5, r2, lsl #2]
 800297c:	0800282b 	.word	0x0800282b
 8002980:	080028c3 	.word	0x080028c3
 8002984:	080028cd 	.word	0x080028cd
 8002988:	080028df 	.word	0x080028df
 800298c:	08002843 	.word	0x08002843
 8002990:	08002843 	.word	0x08002843
 8002994:	08002843 	.word	0x08002843
 8002998:	08002843 	.word	0x08002843
 800299c:	08002843 	.word	0x08002843
 80029a0:	08002843 	.word	0x08002843
 80029a4:	08002843 	.word	0x08002843
 80029a8:	08002843 	.word	0x08002843
 80029ac:	08002843 	.word	0x08002843
 80029b0:	08002843 	.word	0x08002843
 80029b4:	08002843 	.word	0x08002843
 80029b8:	08002843 	.word	0x08002843
 80029bc:	08002843 	.word	0x08002843
 80029c0:	080028c7 	.word	0x080028c7
 80029c4:	080028d3 	.word	0x080028d3
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80029c8:	2301      	movs	r3, #1
 80029ca:	e795      	b.n	80028f8 <HAL_GPIO_Init+0x100>
 80029cc:	2302      	movs	r3, #2
 80029ce:	e793      	b.n	80028f8 <HAL_GPIO_Init+0x100>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80029d0:	4a11      	ldr	r2, [pc, #68]	; (8002a18 <HAL_GPIO_Init+0x220>)
 80029d2:	6813      	ldr	r3, [r2, #0]
 80029d4:	ea23 030e 	bic.w	r3, r3, lr
 80029d8:	6013      	str	r3, [r2, #0]
 80029da:	e79c      	b.n	8002916 <HAL_GPIO_Init+0x11e>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80029dc:	4a0e      	ldr	r2, [pc, #56]	; (8002a18 <HAL_GPIO_Init+0x220>)
 80029de:	6853      	ldr	r3, [r2, #4]
 80029e0:	ea23 030e 	bic.w	r3, r3, lr
 80029e4:	6053      	str	r3, [r2, #4]
 80029e6:	e79f      	b.n	8002928 <HAL_GPIO_Init+0x130>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80029e8:	4a0b      	ldr	r2, [pc, #44]	; (8002a18 <HAL_GPIO_Init+0x220>)
 80029ea:	6893      	ldr	r3, [r2, #8]
 80029ec:	ea23 030e 	bic.w	r3, r3, lr
 80029f0:	6093      	str	r3, [r2, #8]
 80029f2:	e7a2      	b.n	800293a <HAL_GPIO_Init+0x142>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80029f4:	4a08      	ldr	r2, [pc, #32]	; (8002a18 <HAL_GPIO_Init+0x220>)
 80029f6:	68d3      	ldr	r3, [r2, #12]
 80029f8:	ea23 030e 	bic.w	r3, r3, lr
 80029fc:	60d3      	str	r3, [r2, #12]
 80029fe:	e7a5      	b.n	800294c <HAL_GPIO_Init+0x154>
  }
}
 8002a00:	b002      	add	sp, #8
 8002a02:	bd70      	pop	{r4, r5, r6, pc}
 8002a04:	10220000 	.word	0x10220000
 8002a08:	10310000 	.word	0x10310000
 8002a0c:	40021000 	.word	0x40021000
 8002a10:	40010000 	.word	0x40010000
 8002a14:	40010800 	.word	0x40010800
 8002a18:	40010400 	.word	0x40010400

08002a1c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002a1c:	6883      	ldr	r3, [r0, #8]
 8002a1e:	4219      	tst	r1, r3
 8002a20:	d001      	beq.n	8002a26 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 8002a22:	2001      	movs	r0, #1
 8002a24:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002a26:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8002a28:	4770      	bx	lr

08002a2a <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a2a:	b10a      	cbz	r2, 8002a30 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a2c:	6101      	str	r1, [r0, #16]
 8002a2e:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002a30:	0409      	lsls	r1, r1, #16
 8002a32:	6101      	str	r1, [r0, #16]
  }
}
 8002a34:	4770      	bx	lr

08002a36 <HAL_IWDG_Init>:
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8002a36:	b340      	cbz	r0, 8002a8a <HAL_IWDG_Init+0x54>
{
 8002a38:	b538      	push	{r3, r4, r5, lr}
 8002a3a:	4604      	mov	r4, r0
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8002a3c:	6803      	ldr	r3, [r0, #0]
 8002a3e:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8002a42:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8002a44:	6803      	ldr	r3, [r0, #0]
 8002a46:	f245 5255 	movw	r2, #21845	; 0x5555
 8002a4a:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8002a4c:	6803      	ldr	r3, [r0, #0]
 8002a4e:	6842      	ldr	r2, [r0, #4]
 8002a50:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8002a52:	6803      	ldr	r3, [r0, #0]
 8002a54:	6882      	ldr	r2, [r0, #8]
 8002a56:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8002a58:	f7ff fc72 	bl	8002340 <HAL_GetTick>
 8002a5c:	4605      	mov	r5, r0

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002a5e:	6823      	ldr	r3, [r4, #0]
 8002a60:	68da      	ldr	r2, [r3, #12]
 8002a62:	f012 0f03 	tst.w	r2, #3
 8002a66:	d00b      	beq.n	8002a80 <HAL_IWDG_Init+0x4a>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8002a68:	f7ff fc6a 	bl	8002340 <HAL_GetTick>
 8002a6c:	1b40      	subs	r0, r0, r5
 8002a6e:	2827      	cmp	r0, #39	; 0x27
 8002a70:	d9f5      	bls.n	8002a5e <HAL_IWDG_Init+0x28>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002a72:	6823      	ldr	r3, [r4, #0]
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	f013 0f03 	tst.w	r3, #3
 8002a7a:	d0f0      	beq.n	8002a5e <HAL_IWDG_Init+0x28>
      {
        return HAL_TIMEOUT;
 8002a7c:	2003      	movs	r0, #3
 8002a7e:	e003      	b.n	8002a88 <HAL_IWDG_Init+0x52>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8002a80:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8002a84:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002a86:	2000      	movs	r0, #0
}
 8002a88:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8002a8a:	2001      	movs	r0, #1
}
 8002a8c:	4770      	bx	lr

08002a8e <HAL_IWDG_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8002a8e:	6803      	ldr	r3, [r0, #0]
 8002a90:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8002a94:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 8002a96:	2000      	movs	r0, #0
 8002a98:	4770      	bx	lr

08002a9a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002a9a:	b538      	push	{r3, r4, r5, lr}
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002a9c:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8002aa0:	d044      	beq.n	8002b2c <HAL_PCD_EP_DB_Receive+0x92>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002aa2:	6804      	ldr	r4, [r0, #0]
 8002aa4:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 8002aa8:	b29b      	uxth	r3, r3
 8002aaa:	f891 c000 	ldrb.w	ip, [r1]
 8002aae:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 8002ab2:	3302      	adds	r3, #2
 8002ab4:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8002ab8:	f8b3 4400 	ldrh.w	r4, [r3, #1024]	; 0x400
 8002abc:	f3c4 0409 	ubfx	r4, r4, #0, #10

    if (ep->xfer_len >= count)
 8002ac0:	698b      	ldr	r3, [r1, #24]
 8002ac2:	42a3      	cmp	r3, r4
 8002ac4:	d328      	bcc.n	8002b18 <HAL_PCD_EP_DB_Receive+0x7e>
    {
      ep->xfer_len -= count;
 8002ac6:	1b1b      	subs	r3, r3, r4
 8002ac8:	618b      	str	r3, [r1, #24]
    else
    {
      ep->xfer_len = 0U;
    }

    if (ep->xfer_len == 0U)
 8002aca:	698b      	ldr	r3, [r1, #24]
 8002acc:	b97b      	cbnz	r3, 8002aee <HAL_PCD_EP_DB_Receive+0x54>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002ace:	6805      	ldr	r5, [r0, #0]
 8002ad0:	f835 302c 	ldrh.w	r3, [r5, ip, lsl #2]
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ada:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ade:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002ae2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ae6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002aea:	f825 302c 	strh.w	r3, [r5, ip, lsl #2]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002aee:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002af2:	d00e      	beq.n	8002b12 <HAL_PCD_EP_DB_Receive+0x78>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002af4:	6802      	ldr	r2, [r0, #0]
 8002af6:	780d      	ldrb	r5, [r1, #0]
 8002af8:	f832 3025 	ldrh.w	r3, [r2, r5, lsl #2]
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b0a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002b0e:	f822 3025 	strh.w	r3, [r2, r5, lsl #2]
    }

    if (count != 0U)
 8002b12:	b924      	cbnz	r4, 8002b1e <HAL_PCD_EP_DB_Receive+0x84>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
    }
  }

  return count;
}
 8002b14:	4620      	mov	r0, r4
 8002b16:	bd38      	pop	{r3, r4, r5, pc}
      ep->xfer_len = 0U;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	618b      	str	r3, [r1, #24]
 8002b1c:	e7d5      	b.n	8002aca <HAL_PCD_EP_DB_Receive+0x30>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002b1e:	4623      	mov	r3, r4
 8002b20:	890a      	ldrh	r2, [r1, #8]
 8002b22:	6949      	ldr	r1, [r1, #20]
 8002b24:	6800      	ldr	r0, [r0, #0]
 8002b26:	f003 f91d 	bl	8005d64 <USB_ReadPMA>
 8002b2a:	e7f3      	b.n	8002b14 <HAL_PCD_EP_DB_Receive+0x7a>
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002b2c:	6804      	ldr	r4, [r0, #0]
 8002b2e:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 8002b32:	b29b      	uxth	r3, r3
 8002b34:	f891 c000 	ldrb.w	ip, [r1]
 8002b38:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 8002b3c:	3306      	adds	r3, #6
 8002b3e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8002b42:	f8b3 4400 	ldrh.w	r4, [r3, #1024]	; 0x400
 8002b46:	f3c4 0409 	ubfx	r4, r4, #0, #10
    if (ep->xfer_len >= count)
 8002b4a:	698b      	ldr	r3, [r1, #24]
 8002b4c:	42a3      	cmp	r3, r4
 8002b4e:	d32f      	bcc.n	8002bb0 <HAL_PCD_EP_DB_Receive+0x116>
      ep->xfer_len -= count;
 8002b50:	1b1b      	subs	r3, r3, r4
 8002b52:	618b      	str	r3, [r1, #24]
    if (ep->xfer_len == 0U)
 8002b54:	698b      	ldr	r3, [r1, #24]
 8002b56:	b97b      	cbnz	r3, 8002b78 <HAL_PCD_EP_DB_Receive+0xde>
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002b58:	6805      	ldr	r5, [r0, #0]
 8002b5a:	f835 302c 	ldrh.w	r3, [r5, ip, lsl #2]
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b68:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002b6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b74:	f825 302c 	strh.w	r3, [r5, ip, lsl #2]
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002b78:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002b7c:	d10f      	bne.n	8002b9e <HAL_PCD_EP_DB_Receive+0x104>
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002b7e:	6802      	ldr	r2, [r0, #0]
 8002b80:	f891 c000 	ldrb.w	ip, [r1]
 8002b84:	f832 302c 	ldrh.w	r3, [r2, ip, lsl #2]
 8002b88:	b29b      	uxth	r3, r3
 8002b8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b96:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002b9a:	f822 302c 	strh.w	r3, [r2, ip, lsl #2]
    if (count != 0U)
 8002b9e:	2c00      	cmp	r4, #0
 8002ba0:	d0b8      	beq.n	8002b14 <HAL_PCD_EP_DB_Receive+0x7a>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002ba2:	4623      	mov	r3, r4
 8002ba4:	894a      	ldrh	r2, [r1, #10]
 8002ba6:	6949      	ldr	r1, [r1, #20]
 8002ba8:	6800      	ldr	r0, [r0, #0]
 8002baa:	f003 f8db 	bl	8005d64 <USB_ReadPMA>
 8002bae:	e7b1      	b.n	8002b14 <HAL_PCD_EP_DB_Receive+0x7a>
      ep->xfer_len = 0U;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	618b      	str	r3, [r1, #24]
 8002bb4:	e7ce      	b.n	8002b54 <HAL_PCD_EP_DB_Receive+0xba>

08002bb6 <HAL_PCD_Init>:
{
 8002bb6:	b570      	push	{r4, r5, r6, lr}
 8002bb8:	b086      	sub	sp, #24
  if (hpcd == NULL)
 8002bba:	2800      	cmp	r0, #0
 8002bbc:	f000 8085 	beq.w	8002cca <HAL_PCD_Init+0x114>
 8002bc0:	4604      	mov	r4, r0
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002bc2:	f890 32a9 	ldrb.w	r3, [r0, #681]	; 0x2a9
 8002bc6:	b1eb      	cbz	r3, 8002c04 <HAL_PCD_Init+0x4e>
  hpcd->State = HAL_PCD_STATE_BUSY;
 8002bc8:	2303      	movs	r3, #3
 8002bca:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  __HAL_PCD_DISABLE(hpcd);
 8002bce:	6820      	ldr	r0, [r4, #0]
 8002bd0:	f002 f911 	bl	8004df6 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002bd4:	4625      	mov	r5, r4
 8002bd6:	f855 6b10 	ldr.w	r6, [r5], #16
 8002bda:	46ec      	mov	ip, sp
 8002bdc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002bde:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8002be2:	682b      	ldr	r3, [r5, #0]
 8002be4:	f8cc 3000 	str.w	r3, [ip]
 8002be8:	1d23      	adds	r3, r4, #4
 8002bea:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002bec:	4630      	mov	r0, r6
 8002bee:	f002 f8f2 	bl	8004dd6 <USB_CoreInit>
 8002bf2:	4605      	mov	r5, r0
 8002bf4:	b158      	cbz	r0, 8002c0e <HAL_PCD_Init+0x58>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002bf6:	2302      	movs	r3, #2
 8002bf8:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
    return HAL_ERROR;
 8002bfc:	2501      	movs	r5, #1
}
 8002bfe:	4628      	mov	r0, r5
 8002c00:	b006      	add	sp, #24
 8002c02:	bd70      	pop	{r4, r5, r6, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8002c04:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
    HAL_PCD_MspInit(hpcd);
 8002c08:	f004 f820 	bl	8006c4c <HAL_PCD_MspInit>
 8002c0c:	e7dc      	b.n	8002bc8 <HAL_PCD_Init+0x12>
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002c0e:	2100      	movs	r1, #0
 8002c10:	6820      	ldr	r0, [r4, #0]
 8002c12:	f002 f8fa 	bl	8004e0a <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c16:	462b      	mov	r3, r5
 8002c18:	e01a      	b.n	8002c50 <HAL_PCD_Init+0x9a>
    hpcd->IN_ep[i].is_in = 1U;
 8002c1a:	1c5a      	adds	r2, r3, #1
 8002c1c:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8002c20:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8002c24:	2001      	movs	r0, #1
 8002c26:	7048      	strb	r0, [r1, #1]
    hpcd->IN_ep[i].num = i;
 8002c28:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8002c2c:	f804 3031 	strb.w	r3, [r4, r1, lsl #3]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002c30:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8002c34:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8002c38:	86cb      	strh	r3, [r1, #54]	; 0x36
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002c3a:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
 8002c3e:	eb04 0ccc 	add.w	ip, r4, ip, lsl #3
 8002c42:	2000      	movs	r0, #0
 8002c44:	f88c 0003 	strb.w	r0, [ip, #3]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002c48:	6388      	str	r0, [r1, #56]	; 0x38
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002c4a:	63c8      	str	r0, [r1, #60]	; 0x3c
    hpcd->IN_ep[i].xfer_len = 0U;
 8002c4c:	6408      	str	r0, [r1, #64]	; 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c4e:	b2d3      	uxtb	r3, r2
 8002c50:	6861      	ldr	r1, [r4, #4]
 8002c52:	428b      	cmp	r3, r1
 8002c54:	d3e1      	bcc.n	8002c1a <HAL_PCD_Init+0x64>
 8002c56:	e016      	b.n	8002c86 <HAL_PCD_Init+0xd0>
    hpcd->OUT_ep[i].is_in = 0U;
 8002c58:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8002c5c:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8002c60:	2200      	movs	r2, #0
 8002c62:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169
    hpcd->OUT_ep[i].num = i;
 8002c66:	f883 5168 	strb.w	r5, [r3, #360]	; 0x168
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002c6a:	f883 216b 	strb.w	r2, [r3, #363]	; 0x16b
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002c6e:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002c72:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002c76:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8002c7a:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8002c7e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c82:	3501      	adds	r5, #1
 8002c84:	b2ed      	uxtb	r5, r5
 8002c86:	42a9      	cmp	r1, r5
 8002c88:	d8e6      	bhi.n	8002c58 <HAL_PCD_Init+0xa2>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c8a:	4625      	mov	r5, r4
 8002c8c:	f855 6b10 	ldr.w	r6, [r5], #16
 8002c90:	46ec      	mov	ip, sp
 8002c92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c94:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8002c98:	682b      	ldr	r3, [r5, #0]
 8002c9a:	f8cc 3000 	str.w	r3, [ip]
 8002c9e:	1d23      	adds	r3, r4, #4
 8002ca0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ca2:	4630      	mov	r0, r6
 8002ca4:	f002 f8b3 	bl	8004e0e <USB_DevInit>
 8002ca8:	4605      	mov	r5, r0
 8002caa:	b120      	cbz	r0, 8002cb6 <HAL_PCD_Init+0x100>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002cac:	2302      	movs	r3, #2
 8002cae:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
    return HAL_ERROR;
 8002cb2:	2501      	movs	r5, #1
 8002cb4:	e7a3      	b.n	8002bfe <HAL_PCD_Init+0x48>
  hpcd->USB_Address = 0U;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8002cc2:	6820      	ldr	r0, [r4, #0]
 8002cc4:	f002 fbd9 	bl	800547a <USB_DevDisconnect>
  return HAL_OK;
 8002cc8:	e799      	b.n	8002bfe <HAL_PCD_Init+0x48>
    return HAL_ERROR;
 8002cca:	2501      	movs	r5, #1
 8002ccc:	e797      	b.n	8002bfe <HAL_PCD_Init+0x48>

08002cce <HAL_PCD_Start>:
{
 8002cce:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hpcd);
 8002cd0:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d011      	beq.n	8002cfc <HAL_PCD_Start+0x2e>
 8002cd8:	4604      	mov	r4, r0
 8002cda:	2501      	movs	r5, #1
 8002cdc:	f880 52a8 	strb.w	r5, [r0, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002ce0:	6800      	ldr	r0, [r0, #0]
 8002ce2:	f002 f87f 	bl	8004de4 <USB_EnableGlobalInt>
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002ce6:	4629      	mov	r1, r5
 8002ce8:	4620      	mov	r0, r4
 8002cea:	f004 f8ba 	bl	8006e62 <HAL_PCDEx_SetConnectionState>
  (void)USB_DevConnect(hpcd->Instance);
 8002cee:	6820      	ldr	r0, [r4, #0]
 8002cf0:	f002 fbc1 	bl	8005476 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002cf4:	2000      	movs	r0, #0
 8002cf6:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8002cfa:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8002cfc:	2002      	movs	r0, #2
 8002cfe:	e7fc      	b.n	8002cfa <HAL_PCD_Start+0x2c>

08002d00 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002d00:	b570      	push	{r4, r5, r6, lr}
 8002d02:	4605      	mov	r5, r0
 8002d04:	460c      	mov	r4, r1
 8002d06:	4616      	mov	r6, r2
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002d08:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002d0c:	f000 810d 	beq.w	8002f2a <HAL_PCD_EP_DB_Transmit+0x22a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002d10:	6802      	ldr	r2, [r0, #0]
 8002d12:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8002d16:	b29b      	uxth	r3, r3
 8002d18:	7809      	ldrb	r1, [r1, #0]
 8002d1a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8002d1e:	3302      	adds	r3, #2
 8002d20:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8002d24:	f8b3 2400 	ldrh.w	r2, [r3, #1024]	; 0x400
 8002d28:	f3c2 0209 	ubfx	r2, r2, #0, #10

    if (ep->xfer_len > TxByteNbre)
 8002d2c:	69a3      	ldr	r3, [r4, #24]
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d952      	bls.n	8002dd8 <HAL_PCD_EP_DB_Transmit+0xd8>
    {
      ep->xfer_len -= TxByteNbre;
 8002d32:	1a9b      	subs	r3, r3, r2
 8002d34:	61a3      	str	r3, [r4, #24]
    else
    {
      ep->xfer_len = 0U;
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002d36:	69a3      	ldr	r3, [r4, #24]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d16a      	bne.n	8002e12 <HAL_PCD_EP_DB_Transmit+0x112>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002d3c:	7863      	ldrb	r3, [r4, #1]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d14d      	bne.n	8002dde <HAL_PCD_EP_DB_Transmit+0xde>
 8002d42:	682b      	ldr	r3, [r5, #0]
 8002d44:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8002d48:	b292      	uxth	r2, r2
 8002d4a:	4413      	add	r3, r2
 8002d4c:	eb03 1101 	add.w	r1, r3, r1, lsl #4
 8002d50:	f8b1 3404 	ldrh.w	r3, [r1, #1028]	; 0x404
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	f8a1 3404 	strh.w	r3, [r1, #1028]	; 0x404
 8002d60:	f8b1 3404 	ldrh.w	r3, [r1, #1028]	; 0x404
 8002d64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	f8a1 3404 	strh.w	r3, [r1, #1028]	; 0x404
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002d72:	682b      	ldr	r3, [r5, #0]
 8002d74:	7862      	ldrb	r2, [r4, #1]
 8002d76:	2a00      	cmp	r2, #0
 8002d78:	d13e      	bne.n	8002df8 <HAL_PCD_EP_DB_Transmit+0xf8>
 8002d7a:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8002d7e:	b292      	uxth	r2, r2
 8002d80:	4413      	add	r3, r2
 8002d82:	7822      	ldrb	r2, [r4, #0]
 8002d84:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8002d88:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 8002d8c:	b292      	uxth	r2, r2
 8002d8e:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8002d92:	b292      	uxth	r2, r2
 8002d94:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8002d98:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 8002d9c:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8002da0:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002da4:	b292      	uxth	r2, r2
 8002da6:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002daa:	7821      	ldrb	r1, [r4, #0]
 8002dac:	4628      	mov	r0, r5
 8002dae:	f003 ff77 	bl	8006ca0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002db2:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 8002db6:	d041      	beq.n	8002e3c <HAL_PCD_EP_DB_Transmit+0x13c>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002db8:	682a      	ldr	r2, [r5, #0]
 8002dba:	7821      	ldrb	r1, [r4, #0]
 8002dbc:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002dc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002dce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dd2:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8002dd6:	e031      	b.n	8002e3c <HAL_PCD_EP_DB_Transmit+0x13c>
      ep->xfer_len = 0U;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	61a3      	str	r3, [r4, #24]
 8002ddc:	e7ab      	b.n	8002d36 <HAL_PCD_EP_DB_Transmit+0x36>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d1c7      	bne.n	8002d72 <HAL_PCD_EP_DB_Transmit+0x72>
 8002de2:	682b      	ldr	r3, [r5, #0]
 8002de4:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8002de8:	b292      	uxth	r2, r2
 8002dea:	4413      	add	r3, r2
 8002dec:	eb03 1101 	add.w	r1, r3, r1, lsl #4
 8002df0:	2300      	movs	r3, #0
 8002df2:	f8a1 3404 	strh.w	r3, [r1, #1028]	; 0x404
 8002df6:	e7bc      	b.n	8002d72 <HAL_PCD_EP_DB_Transmit+0x72>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002df8:	2a01      	cmp	r2, #1
 8002dfa:	d1d6      	bne.n	8002daa <HAL_PCD_EP_DB_Transmit+0xaa>
 8002dfc:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8002e00:	b292      	uxth	r2, r2
 8002e02:	4413      	add	r3, r2
 8002e04:	7822      	ldrb	r2, [r4, #0]
 8002e06:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8002e10:	e7cb      	b.n	8002daa <HAL_PCD_EP_DB_Transmit+0xaa>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002e12:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 8002e16:	d00d      	beq.n	8002e34 <HAL_PCD_EP_DB_Transmit+0x134>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002e18:	6828      	ldr	r0, [r5, #0]
 8002e1a:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e28:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e30:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002e34:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d012      	beq.n	8002e62 <HAL_PCD_EP_DB_Transmit+0x162>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002e3c:	682a      	ldr	r2, [r5, #0]
 8002e3e:	7821      	ldrb	r1, [r4, #0]
 8002e40:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8002e44:	b29b      	uxth	r3, r3
 8002e46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e4e:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8002e52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e5a:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
}
 8002e5e:	2000      	movs	r0, #0
 8002e60:	bd70      	pop	{r4, r5, r6, pc}
        ep->xfer_buff += TxByteNbre;
 8002e62:	6963      	ldr	r3, [r4, #20]
 8002e64:	4413      	add	r3, r2
 8002e66:	6163      	str	r3, [r4, #20]
        ep->xfer_count += TxByteNbre;
 8002e68:	69e3      	ldr	r3, [r4, #28]
 8002e6a:	4413      	add	r3, r2
 8002e6c:	61e3      	str	r3, [r4, #28]
        if (ep->xfer_len_db >= ep->maxpacket)
 8002e6e:	6a21      	ldr	r1, [r4, #32]
 8002e70:	6923      	ldr	r3, [r4, #16]
 8002e72:	4299      	cmp	r1, r3
 8002e74:	d31f      	bcc.n	8002eb6 <HAL_PCD_EP_DB_Transmit+0x1b6>
          ep->xfer_len_db -= len;
 8002e76:	1ac9      	subs	r1, r1, r3
 8002e78:	6221      	str	r1, [r4, #32]
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002e7a:	7862      	ldrb	r2, [r4, #1]
 8002e7c:	2a00      	cmp	r2, #0
 8002e7e:	d13f      	bne.n	8002f00 <HAL_PCD_EP_DB_Transmit+0x200>
 8002e80:	682a      	ldr	r2, [r5, #0]
 8002e82:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 8002e86:	b289      	uxth	r1, r1
 8002e88:	440a      	add	r2, r1
 8002e8a:	7821      	ldrb	r1, [r4, #0]
 8002e8c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002e90:	b9eb      	cbnz	r3, 8002ece <HAL_PCD_EP_DB_Transmit+0x1ce>
 8002e92:	f8b2 1404 	ldrh.w	r1, [r2, #1028]	; 0x404
 8002e96:	b289      	uxth	r1, r1
 8002e98:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8002e9c:	b289      	uxth	r1, r1
 8002e9e:	f8a2 1404 	strh.w	r1, [r2, #1028]	; 0x404
 8002ea2:	f8b2 1404 	ldrh.w	r1, [r2, #1028]	; 0x404
 8002ea6:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8002eaa:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8002eae:	b289      	uxth	r1, r1
 8002eb0:	f8a2 1404 	strh.w	r1, [r2, #1028]	; 0x404
 8002eb4:	e026      	b.n	8002f04 <HAL_PCD_EP_DB_Transmit+0x204>
        else if (ep->xfer_len_db == 0U)
 8002eb6:	b921      	cbnz	r1, 8002ec2 <HAL_PCD_EP_DB_Transmit+0x1c2>
          ep->xfer_fill_db = 0U;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          len = TxByteNbre;
 8002ebe:	4613      	mov	r3, r2
 8002ec0:	e7db      	b.n	8002e7a <HAL_PCD_EP_DB_Transmit+0x17a>
          ep->xfer_fill_db = 0U;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          ep->xfer_len_db = 0U;
 8002ec8:	6223      	str	r3, [r4, #32]
          len = ep->xfer_len_db;
 8002eca:	460b      	mov	r3, r1
 8002ecc:	e7d5      	b.n	8002e7a <HAL_PCD_EP_DB_Transmit+0x17a>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002ece:	2b3e      	cmp	r3, #62	; 0x3e
 8002ed0:	d809      	bhi.n	8002ee6 <HAL_PCD_EP_DB_Transmit+0x1e6>
 8002ed2:	0859      	lsrs	r1, r3, #1
 8002ed4:	f013 0f01 	tst.w	r3, #1
 8002ed8:	d000      	beq.n	8002edc <HAL_PCD_EP_DB_Transmit+0x1dc>
 8002eda:	3101      	adds	r1, #1
 8002edc:	0289      	lsls	r1, r1, #10
 8002ede:	b289      	uxth	r1, r1
 8002ee0:	f8a2 1404 	strh.w	r1, [r2, #1028]	; 0x404
 8002ee4:	e00e      	b.n	8002f04 <HAL_PCD_EP_DB_Transmit+0x204>
 8002ee6:	0959      	lsrs	r1, r3, #5
 8002ee8:	f013 0f1f 	tst.w	r3, #31
 8002eec:	d100      	bne.n	8002ef0 <HAL_PCD_EP_DB_Transmit+0x1f0>
 8002eee:	3901      	subs	r1, #1
 8002ef0:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 8002ef4:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8002ef8:	b289      	uxth	r1, r1
 8002efa:	f8a2 1404 	strh.w	r1, [r2, #1028]	; 0x404
 8002efe:	e001      	b.n	8002f04 <HAL_PCD_EP_DB_Transmit+0x204>
 8002f00:	2a01      	cmp	r2, #1
 8002f02:	d006      	beq.n	8002f12 <HAL_PCD_EP_DB_Transmit+0x212>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	8922      	ldrh	r2, [r4, #8]
 8002f08:	6961      	ldr	r1, [r4, #20]
 8002f0a:	6828      	ldr	r0, [r5, #0]
 8002f0c:	f002 fabd 	bl	800548a <USB_WritePMA>
 8002f10:	e794      	b.n	8002e3c <HAL_PCD_EP_DB_Transmit+0x13c>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002f12:	682a      	ldr	r2, [r5, #0]
 8002f14:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 8002f18:	b289      	uxth	r1, r1
 8002f1a:	440a      	add	r2, r1
 8002f1c:	7821      	ldrb	r1, [r4, #0]
 8002f1e:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002f22:	b299      	uxth	r1, r3
 8002f24:	f8a2 1404 	strh.w	r1, [r2, #1028]	; 0x404
 8002f28:	e7ec      	b.n	8002f04 <HAL_PCD_EP_DB_Transmit+0x204>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002f2a:	6802      	ldr	r2, [r0, #0]
 8002f2c:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	7809      	ldrb	r1, [r1, #0]
 8002f34:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8002f38:	3306      	adds	r3, #6
 8002f3a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8002f3e:	f8b3 2400 	ldrh.w	r2, [r3, #1024]	; 0x400
 8002f42:	f3c2 0209 	ubfx	r2, r2, #0, #10
    if (ep->xfer_len >= TxByteNbre)
 8002f46:	69a3      	ldr	r3, [r4, #24]
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d353      	bcc.n	8002ff4 <HAL_PCD_EP_DB_Transmit+0x2f4>
      ep->xfer_len -= TxByteNbre;
 8002f4c:	1a9b      	subs	r3, r3, r2
 8002f4e:	61a3      	str	r3, [r4, #24]
    if (ep->xfer_len == 0U)
 8002f50:	69a3      	ldr	r3, [r4, #24]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d16b      	bne.n	800302e <HAL_PCD_EP_DB_Transmit+0x32e>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002f56:	7863      	ldrb	r3, [r4, #1]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d14e      	bne.n	8002ffa <HAL_PCD_EP_DB_Transmit+0x2fa>
 8002f5c:	682b      	ldr	r3, [r5, #0]
 8002f5e:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8002f62:	b292      	uxth	r2, r2
 8002f64:	4413      	add	r3, r2
 8002f66:	eb03 1101 	add.w	r1, r3, r1, lsl #4
 8002f6a:	f8b1 3404 	ldrh.w	r3, [r1, #1028]	; 0x404
 8002f6e:	b29b      	uxth	r3, r3
 8002f70:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	f8a1 3404 	strh.w	r3, [r1, #1028]	; 0x404
 8002f7a:	f8b1 3404 	ldrh.w	r3, [r1, #1028]	; 0x404
 8002f7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	f8a1 3404 	strh.w	r3, [r1, #1028]	; 0x404
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002f8c:	682b      	ldr	r3, [r5, #0]
 8002f8e:	7862      	ldrb	r2, [r4, #1]
 8002f90:	2a00      	cmp	r2, #0
 8002f92:	d13f      	bne.n	8003014 <HAL_PCD_EP_DB_Transmit+0x314>
 8002f94:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8002f98:	b292      	uxth	r2, r2
 8002f9a:	4413      	add	r3, r2
 8002f9c:	7822      	ldrb	r2, [r4, #0]
 8002f9e:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8002fa2:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 8002fa6:	b292      	uxth	r2, r2
 8002fa8:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8002fac:	b292      	uxth	r2, r2
 8002fae:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8002fb2:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 8002fb6:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8002fba:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002fbe:	b292      	uxth	r2, r2
 8002fc0:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002fc4:	7821      	ldrb	r1, [r4, #0]
 8002fc6:	4628      	mov	r0, r5
 8002fc8:	f003 fe6a 	bl	8006ca0 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002fcc:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 8002fd0:	f47f af34 	bne.w	8002e3c <HAL_PCD_EP_DB_Transmit+0x13c>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002fd4:	682a      	ldr	r2, [r5, #0]
 8002fd6:	7821      	ldrb	r1, [r4, #0]
 8002fd8:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fe6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002fea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fee:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8002ff2:	e723      	b.n	8002e3c <HAL_PCD_EP_DB_Transmit+0x13c>
      ep->xfer_len = 0U;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	61a3      	str	r3, [r4, #24]
 8002ff8:	e7aa      	b.n	8002f50 <HAL_PCD_EP_DB_Transmit+0x250>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d1c6      	bne.n	8002f8c <HAL_PCD_EP_DB_Transmit+0x28c>
 8002ffe:	682b      	ldr	r3, [r5, #0]
 8003000:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8003004:	b292      	uxth	r2, r2
 8003006:	4413      	add	r3, r2
 8003008:	eb03 1101 	add.w	r1, r3, r1, lsl #4
 800300c:	2300      	movs	r3, #0
 800300e:	f8a1 3404 	strh.w	r3, [r1, #1028]	; 0x404
 8003012:	e7bb      	b.n	8002f8c <HAL_PCD_EP_DB_Transmit+0x28c>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003014:	2a01      	cmp	r2, #1
 8003016:	d1d5      	bne.n	8002fc4 <HAL_PCD_EP_DB_Transmit+0x2c4>
 8003018:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 800301c:	b292      	uxth	r2, r2
 800301e:	4413      	add	r3, r2
 8003020:	7822      	ldrb	r2, [r4, #0]
 8003022:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8003026:	2200      	movs	r2, #0
 8003028:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 800302c:	e7ca      	b.n	8002fc4 <HAL_PCD_EP_DB_Transmit+0x2c4>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800302e:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 8003032:	d10d      	bne.n	8003050 <HAL_PCD_EP_DB_Transmit+0x350>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003034:	6828      	ldr	r0, [r5, #0]
 8003036:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 800303a:	b29b      	uxth	r3, r3
 800303c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003040:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003044:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003048:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800304c:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8003050:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8003054:	2b01      	cmp	r3, #1
 8003056:	f47f aef1 	bne.w	8002e3c <HAL_PCD_EP_DB_Transmit+0x13c>
        ep->xfer_buff += TxByteNbre;
 800305a:	6963      	ldr	r3, [r4, #20]
 800305c:	4413      	add	r3, r2
 800305e:	6163      	str	r3, [r4, #20]
        ep->xfer_count += TxByteNbre;
 8003060:	69e3      	ldr	r3, [r4, #28]
 8003062:	4413      	add	r3, r2
 8003064:	61e3      	str	r3, [r4, #28]
        if (ep->xfer_len_db >= ep->maxpacket)
 8003066:	6a21      	ldr	r1, [r4, #32]
 8003068:	6923      	ldr	r3, [r4, #16]
 800306a:	4299      	cmp	r1, r3
 800306c:	d31f      	bcc.n	80030ae <HAL_PCD_EP_DB_Transmit+0x3ae>
          ep->xfer_len_db -= len;
 800306e:	1ac9      	subs	r1, r1, r3
 8003070:	6221      	str	r1, [r4, #32]
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003072:	682a      	ldr	r2, [r5, #0]
 8003074:	7861      	ldrb	r1, [r4, #1]
 8003076:	2900      	cmp	r1, #0
 8003078:	d13e      	bne.n	80030f8 <HAL_PCD_EP_DB_Transmit+0x3f8>
 800307a:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 800307e:	b289      	uxth	r1, r1
 8003080:	440a      	add	r2, r1
 8003082:	7821      	ldrb	r1, [r4, #0]
 8003084:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8003088:	b9eb      	cbnz	r3, 80030c6 <HAL_PCD_EP_DB_Transmit+0x3c6>
 800308a:	f8b2 140c 	ldrh.w	r1, [r2, #1036]	; 0x40c
 800308e:	b289      	uxth	r1, r1
 8003090:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8003094:	b289      	uxth	r1, r1
 8003096:	f8a2 140c 	strh.w	r1, [r2, #1036]	; 0x40c
 800309a:	f8b2 140c 	ldrh.w	r1, [r2, #1036]	; 0x40c
 800309e:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 80030a2:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80030a6:	b289      	uxth	r1, r1
 80030a8:	f8a2 140c 	strh.w	r1, [r2, #1036]	; 0x40c
 80030ac:	e026      	b.n	80030fc <HAL_PCD_EP_DB_Transmit+0x3fc>
        else if (ep->xfer_len_db == 0U)
 80030ae:	b921      	cbnz	r1, 80030ba <HAL_PCD_EP_DB_Transmit+0x3ba>
          ep->xfer_fill_db = 0U;
 80030b0:	2300      	movs	r3, #0
 80030b2:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          len = TxByteNbre;
 80030b6:	4613      	mov	r3, r2
 80030b8:	e7db      	b.n	8003072 <HAL_PCD_EP_DB_Transmit+0x372>
          ep->xfer_len_db = 0U;
 80030ba:	2300      	movs	r3, #0
 80030bc:	6223      	str	r3, [r4, #32]
          ep->xfer_fill_db = 0;
 80030be:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          len = ep->xfer_len_db;
 80030c2:	460b      	mov	r3, r1
 80030c4:	e7d5      	b.n	8003072 <HAL_PCD_EP_DB_Transmit+0x372>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80030c6:	2b3e      	cmp	r3, #62	; 0x3e
 80030c8:	d809      	bhi.n	80030de <HAL_PCD_EP_DB_Transmit+0x3de>
 80030ca:	0859      	lsrs	r1, r3, #1
 80030cc:	f013 0f01 	tst.w	r3, #1
 80030d0:	d000      	beq.n	80030d4 <HAL_PCD_EP_DB_Transmit+0x3d4>
 80030d2:	3101      	adds	r1, #1
 80030d4:	0289      	lsls	r1, r1, #10
 80030d6:	b289      	uxth	r1, r1
 80030d8:	f8a2 140c 	strh.w	r1, [r2, #1036]	; 0x40c
 80030dc:	e00e      	b.n	80030fc <HAL_PCD_EP_DB_Transmit+0x3fc>
 80030de:	0959      	lsrs	r1, r3, #5
 80030e0:	f013 0f1f 	tst.w	r3, #31
 80030e4:	d100      	bne.n	80030e8 <HAL_PCD_EP_DB_Transmit+0x3e8>
 80030e6:	3901      	subs	r1, #1
 80030e8:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 80030ec:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80030f0:	b289      	uxth	r1, r1
 80030f2:	f8a2 140c 	strh.w	r1, [r2, #1036]	; 0x40c
 80030f6:	e001      	b.n	80030fc <HAL_PCD_EP_DB_Transmit+0x3fc>
 80030f8:	2901      	cmp	r1, #1
 80030fa:	d006      	beq.n	800310a <HAL_PCD_EP_DB_Transmit+0x40a>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	8962      	ldrh	r2, [r4, #10]
 8003100:	6961      	ldr	r1, [r4, #20]
 8003102:	6828      	ldr	r0, [r5, #0]
 8003104:	f002 f9c1 	bl	800548a <USB_WritePMA>
 8003108:	e698      	b.n	8002e3c <HAL_PCD_EP_DB_Transmit+0x13c>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800310a:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 800310e:	b289      	uxth	r1, r1
 8003110:	440a      	add	r2, r1
 8003112:	7821      	ldrb	r1, [r4, #0]
 8003114:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8003118:	b299      	uxth	r1, r3
 800311a:	f8a2 140c 	strh.w	r1, [r2, #1036]	; 0x40c
 800311e:	e7ed      	b.n	80030fc <HAL_PCD_EP_DB_Transmit+0x3fc>

08003120 <PCD_EP_ISR_Handler>:
{
 8003120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003124:	4605      	mov	r5, r0
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003126:	6828      	ldr	r0, [r5, #0]
 8003128:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 800312c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8003130:	f000 820f 	beq.w	8003552 <PCD_EP_ISR_Handler+0x432>
    wIstr = hpcd->Instance->ISTR;
 8003134:	f8b0 4044 	ldrh.w	r4, [r0, #68]	; 0x44
 8003138:	b2a3      	uxth	r3, r4
    if (epindex == 0U)
 800313a:	f014 040f 	ands.w	r4, r4, #15
 800313e:	f040 80d8 	bne.w	80032f2 <PCD_EP_ISR_Handler+0x1d2>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003142:	f013 0f10 	tst.w	r3, #16
 8003146:	d061      	beq.n	800320c <PCD_EP_ISR_Handler+0xec>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003148:	8803      	ldrh	r3, [r0, #0]
 800314a:	b29a      	uxth	r2, r3
        if ((wEPVal & USB_EP_SETUP) != 0U)
 800314c:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8003150:	f040 8093 	bne.w	800327a <PCD_EP_ISR_Handler+0x15a>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003154:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8003158:	d0e5      	beq.n	8003126 <PCD_EP_ISR_Handler+0x6>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800315a:	8803      	ldrh	r3, [r0, #0]
 800315c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003160:	051b      	lsls	r3, r3, #20
 8003162:	0d1b      	lsrs	r3, r3, #20
 8003164:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003168:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800316a:	6828      	ldr	r0, [r5, #0]
 800316c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003170:	b29b      	uxth	r3, r3
 8003172:	f895 2168 	ldrb.w	r2, [r5, #360]	; 0x168
 8003176:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800317a:	3306      	adds	r3, #6
 800317c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8003180:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8003184:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003188:	f8c5 3184 	str.w	r3, [r5, #388]	; 0x184
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800318c:	b18b      	cbz	r3, 80031b2 <PCD_EP_ISR_Handler+0x92>
 800318e:	f8d5 117c 	ldr.w	r1, [r5, #380]	; 0x17c
 8003192:	b171      	cbz	r1, 80031b2 <PCD_EP_ISR_Handler+0x92>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003194:	f8b5 216e 	ldrh.w	r2, [r5, #366]	; 0x16e
 8003198:	f002 fde4 	bl	8005d64 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 800319c:	f8d5 2184 	ldr.w	r2, [r5, #388]	; 0x184
 80031a0:	f8d5 317c 	ldr.w	r3, [r5, #380]	; 0x17c
 80031a4:	4413      	add	r3, r2
 80031a6:	f8c5 317c 	str.w	r3, [r5, #380]	; 0x17c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80031aa:	2100      	movs	r1, #0
 80031ac:	4628      	mov	r0, r5
 80031ae:	f003 fd6b 	bl	8006c88 <HAL_PCD_DataOutStageCallback>
          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 80031b2:	682b      	ldr	r3, [r5, #0]
 80031b4:	881a      	ldrh	r2, [r3, #0]
 80031b6:	f412 6f00 	tst.w	r2, #2048	; 0x800
 80031ba:	d1b4      	bne.n	8003126 <PCD_EP_ISR_Handler+0x6>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80031bc:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80031c0:	b292      	uxth	r2, r2
 80031c2:	4413      	add	r3, r2
 80031c4:	f8d5 2178 	ldr.w	r2, [r5, #376]	; 0x178
 80031c8:	2a00      	cmp	r2, #0
 80031ca:	d179      	bne.n	80032c0 <PCD_EP_ISR_Handler+0x1a0>
 80031cc:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 80031d0:	b292      	uxth	r2, r2
 80031d2:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80031d6:	b292      	uxth	r2, r2
 80031d8:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 80031dc:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 80031e0:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80031e4:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80031e8:	b292      	uxth	r2, r2
 80031ea:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80031ee:	682a      	ldr	r2, [r5, #0]
 80031f0:	8813      	ldrh	r3, [r2, #0]
 80031f2:	b29b      	uxth	r3, r3
 80031f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80031f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031fc:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8003200:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003204:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003208:	8013      	strh	r3, [r2, #0]
 800320a:	e78c      	b.n	8003126 <PCD_EP_ISR_Handler+0x6>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800320c:	8803      	ldrh	r3, [r0, #0]
 800320e:	b29b      	uxth	r3, r3
 8003210:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003214:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003218:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800321c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003220:	b29b      	uxth	r3, r3
 8003222:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003224:	682a      	ldr	r2, [r5, #0]
 8003226:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 800322a:	b29b      	uxth	r3, r3
 800322c:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 8003230:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8003234:	3302      	adds	r3, #2
 8003236:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800323a:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 800323e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003242:	646b      	str	r3, [r5, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8003244:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8003246:	4413      	add	r3, r2
 8003248:	63eb      	str	r3, [r5, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800324a:	2100      	movs	r1, #0
 800324c:	4628      	mov	r0, r5
 800324e:	f003 fd27 	bl	8006ca0 <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003252:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 8003256:	2b00      	cmp	r3, #0
 8003258:	f43f af65 	beq.w	8003126 <PCD_EP_ISR_Handler+0x6>
 800325c:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800325e:	2b00      	cmp	r3, #0
 8003260:	f47f af61 	bne.w	8003126 <PCD_EP_ISR_Handler+0x6>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003264:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 8003268:	682a      	ldr	r2, [r5, #0]
 800326a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800326e:	f8a2 304c 	strh.w	r3, [r2, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003272:	2300      	movs	r3, #0
 8003274:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 8003278:	e755      	b.n	8003126 <PCD_EP_ISR_Handler+0x6>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800327a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800327e:	b29b      	uxth	r3, r3
 8003280:	f895 2168 	ldrb.w	r2, [r5, #360]	; 0x168
 8003284:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003288:	3306      	adds	r3, #6
 800328a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800328e:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8003292:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003296:	f8c5 3184 	str.w	r3, [r5, #388]	; 0x184
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800329a:	f8b5 216e 	ldrh.w	r2, [r5, #366]	; 0x16e
 800329e:	f505 712c 	add.w	r1, r5, #688	; 0x2b0
 80032a2:	f002 fd5f 	bl	8005d64 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80032a6:	682a      	ldr	r2, [r5, #0]
 80032a8:	8813      	ldrh	r3, [r2, #0]
 80032aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032ae:	051b      	lsls	r3, r3, #20
 80032b0:	0d1b      	lsrs	r3, r3, #20
 80032b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032b6:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 80032b8:	4628      	mov	r0, r5
 80032ba:	f003 fcdd 	bl	8006c78 <HAL_PCD_SetupStageCallback>
 80032be:	e732      	b.n	8003126 <PCD_EP_ISR_Handler+0x6>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80032c0:	2a3e      	cmp	r2, #62	; 0x3e
 80032c2:	d809      	bhi.n	80032d8 <PCD_EP_ISR_Handler+0x1b8>
 80032c4:	0851      	lsrs	r1, r2, #1
 80032c6:	f012 0f01 	tst.w	r2, #1
 80032ca:	d000      	beq.n	80032ce <PCD_EP_ISR_Handler+0x1ae>
 80032cc:	3101      	adds	r1, #1
 80032ce:	028a      	lsls	r2, r1, #10
 80032d0:	b292      	uxth	r2, r2
 80032d2:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 80032d6:	e78a      	b.n	80031ee <PCD_EP_ISR_Handler+0xce>
 80032d8:	0951      	lsrs	r1, r2, #5
 80032da:	f012 0f1f 	tst.w	r2, #31
 80032de:	d100      	bne.n	80032e2 <PCD_EP_ISR_Handler+0x1c2>
 80032e0:	3901      	subs	r1, #1
 80032e2:	ea6f 62c1 	mvn.w	r2, r1, lsl #27
 80032e6:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80032ea:	b292      	uxth	r2, r2
 80032ec:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 80032f0:	e77d      	b.n	80031ee <PCD_EP_ISR_Handler+0xce>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80032f2:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 80032f6:	b29e      	uxth	r6, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80032f8:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80032fc:	d14f      	bne.n	800339e <PCD_EP_ISR_Handler+0x27e>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80032fe:	f016 0f80 	tst.w	r6, #128	; 0x80
 8003302:	f43f af10 	beq.w	8003126 <PCD_EP_ISR_Handler+0x6>
        ep = &hpcd->IN_ep[epindex];
 8003306:	1c62      	adds	r2, r4, #1
 8003308:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 800330c:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003310:	6828      	ldr	r0, [r5, #0]
 8003312:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8003316:	b29b      	uxth	r3, r3
 8003318:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800331c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003320:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003324:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003328:	b29b      	uxth	r3, r3
 800332a:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800332e:	78cb      	ldrb	r3, [r1, #3]
 8003330:	2b03      	cmp	r3, #3
 8003332:	d007      	beq.n	8003344 <PCD_EP_ISR_Handler+0x224>
 8003334:	b133      	cbz	r3, 8003344 <PCD_EP_ISR_Handler+0x224>
 8003336:	2b02      	cmp	r3, #2
 8003338:	f040 8106 	bne.w	8003548 <PCD_EP_ISR_Handler+0x428>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800333c:	f416 7f80 	tst.w	r6, #256	; 0x100
 8003340:	f040 8102 	bne.w	8003548 <PCD_EP_ISR_Handler+0x428>
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003344:	6828      	ldr	r0, [r5, #0]
 8003346:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800334a:	b29b      	uxth	r3, r3
 800334c:	1c62      	adds	r2, r4, #1
 800334e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003352:	f815 6032 	ldrb.w	r6, [r5, r2, lsl #3]
 8003356:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800335a:	3302      	adds	r3, #2
 800335c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8003360:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8003364:	f3c3 0309 	ubfx	r3, r3, #0, #10
          if (ep->xfer_len > TxByteNbre)
 8003368:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 800336c:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8003370:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003372:	429a      	cmp	r2, r3
 8003374:	f240 80d4 	bls.w	8003520 <PCD_EP_ISR_Handler+0x400>
            ep->xfer_len -= TxByteNbre;
 8003378:	eb04 0784 	add.w	r7, r4, r4, lsl #2
 800337c:	eb05 07c7 	add.w	r7, r5, r7, lsl #3
 8003380:	1ad2      	subs	r2, r2, r3
 8003382:	643a      	str	r2, [r7, #64]	; 0x40
          if (ep->xfer_len == 0U)
 8003384:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8003388:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 800338c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800338e:	2a00      	cmp	r2, #0
 8003390:	f040 80cd 	bne.w	800352e <PCD_EP_ISR_Handler+0x40e>
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003394:	4631      	mov	r1, r6
 8003396:	4628      	mov	r0, r5
 8003398:	f003 fc82 	bl	8006ca0 <HAL_PCD_DataInStageCallback>
 800339c:	e6c3      	b.n	8003126 <PCD_EP_ISR_Handler+0x6>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800339e:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 80033a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033a6:	051b      	lsls	r3, r3, #20
 80033a8:	0d1b      	lsrs	r3, r3, #20
 80033aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033ae:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
        ep = &hpcd->OUT_ep[epindex];
 80033b2:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 80033b6:	00c9      	lsls	r1, r1, #3
 80033b8:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 80033bc:	eb05 0801 	add.w	r8, r5, r1
        if (ep->doublebuffer == 0U)
 80033c0:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80033c4:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 80033c8:	f893 3174 	ldrb.w	r3, [r3, #372]	; 0x174
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d142      	bne.n	8003456 <PCD_EP_ISR_Handler+0x336>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80033d0:	6828      	ldr	r0, [r5, #0]
 80033d2:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 80033dc:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 80033e0:	f892 2168 	ldrb.w	r2, [r2, #360]	; 0x168
 80033e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80033e8:	3306      	adds	r3, #6
 80033ea:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80033ee:	f8b3 7400 	ldrh.w	r7, [r3, #1024]	; 0x400
 80033f2:	f3c7 0709 	ubfx	r7, r7, #0, #10
          if (count != 0U)
 80033f6:	bb17      	cbnz	r7, 800343e <PCD_EP_ISR_Handler+0x31e>
        ep->xfer_count += count;
 80033f8:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80033fc:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8003400:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 8003404:	443a      	add	r2, r7
 8003406:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
        ep->xfer_buff += count;
 800340a:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 800340e:	443a      	add	r2, r7
 8003410:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003414:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8003418:	b13b      	cbz	r3, 800342a <PCD_EP_ISR_Handler+0x30a>
 800341a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800341e:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8003422:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8003426:	429f      	cmp	r7, r3
 8003428:	d275      	bcs.n	8003516 <PCD_EP_ISR_Handler+0x3f6>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800342a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800342e:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8003432:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 8003436:	4628      	mov	r0, r5
 8003438:	f003 fc26 	bl	8006c88 <HAL_PCD_DataOutStageCallback>
 800343c:	e75f      	b.n	80032fe <PCD_EP_ISR_Handler+0x1de>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800343e:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8003442:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 8003446:	463b      	mov	r3, r7
 8003448:	f8b1 216e 	ldrh.w	r2, [r1, #366]	; 0x16e
 800344c:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8003450:	f002 fc88 	bl	8005d64 <USB_ReadPMA>
 8003454:	e7d0      	b.n	80033f8 <PCD_EP_ISR_Handler+0x2d8>
          if (ep->type == EP_TYPE_BULK)
 8003456:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800345a:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 800345e:	f893 316b 	ldrb.w	r3, [r3, #363]	; 0x16b
 8003462:	2b02      	cmp	r3, #2
 8003464:	d035      	beq.n	80034d2 <PCD_EP_ISR_Handler+0x3b2>
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003466:	6829      	ldr	r1, [r5, #0]
 8003468:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 800346c:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8003470:	f892 0168 	ldrb.w	r0, [r2, #360]	; 0x168
 8003474:	f831 3020 	ldrh.w	r3, [r1, r0, lsl #2]
 8003478:	b29b      	uxth	r3, r3
 800347a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800347e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003482:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003486:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800348a:	f821 3020 	strh.w	r3, [r1, r0, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800348e:	6828      	ldr	r0, [r5, #0]
 8003490:	f892 2168 	ldrb.w	r2, [r2, #360]	; 0x168
 8003494:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003498:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800349c:	d020      	beq.n	80034e0 <PCD_EP_ISR_Handler+0x3c0>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800349e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80034a8:	3302      	adds	r3, #2
 80034aa:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80034ae:	f8b3 7400 	ldrh.w	r7, [r3, #1024]	; 0x400
 80034b2:	f3c7 0709 	ubfx	r7, r7, #0, #10
              if (count != 0U)
 80034b6:	2f00      	cmp	r7, #0
 80034b8:	d09e      	beq.n	80033f8 <PCD_EP_ISR_Handler+0x2d8>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80034ba:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 80034be:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 80034c2:	463b      	mov	r3, r7
 80034c4:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 80034c8:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 80034cc:	f002 fc4a 	bl	8005d64 <USB_ReadPMA>
 80034d0:	e792      	b.n	80033f8 <PCD_EP_ISR_Handler+0x2d8>
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80034d2:	4632      	mov	r2, r6
 80034d4:	4641      	mov	r1, r8
 80034d6:	4628      	mov	r0, r5
 80034d8:	f7ff fadf 	bl	8002a9a <HAL_PCD_EP_DB_Receive>
 80034dc:	4607      	mov	r7, r0
 80034de:	e78b      	b.n	80033f8 <PCD_EP_ISR_Handler+0x2d8>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80034e0:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80034ea:	3306      	adds	r3, #6
 80034ec:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80034f0:	f8b3 7400 	ldrh.w	r7, [r3, #1024]	; 0x400
 80034f4:	f3c7 0709 	ubfx	r7, r7, #0, #10
              if (count != 0U)
 80034f8:	2f00      	cmp	r7, #0
 80034fa:	f43f af7d 	beq.w	80033f8 <PCD_EP_ISR_Handler+0x2d8>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80034fe:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8003502:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 8003506:	463b      	mov	r3, r7
 8003508:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 800350c:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8003510:	f002 fc28 	bl	8005d64 <USB_ReadPMA>
 8003514:	e770      	b.n	80033f8 <PCD_EP_ISR_Handler+0x2d8>
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8003516:	4641      	mov	r1, r8
 8003518:	6828      	ldr	r0, [r5, #0]
 800351a:	f001 ffca 	bl	80054b2 <USB_EPStartXfer>
 800351e:	e6ee      	b.n	80032fe <PCD_EP_ISR_Handler+0x1de>
            ep->xfer_len = 0U;
 8003520:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8003524:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8003528:	2700      	movs	r7, #0
 800352a:	6417      	str	r7, [r2, #64]	; 0x40
 800352c:	e72a      	b.n	8003384 <PCD_EP_ISR_Handler+0x264>
            ep->xfer_buff += TxByteNbre;
 800352e:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8003532:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8003536:	6bd6      	ldr	r6, [r2, #60]	; 0x3c
 8003538:	441e      	add	r6, r3
 800353a:	63d6      	str	r6, [r2, #60]	; 0x3c
            ep->xfer_count += TxByteNbre;
 800353c:	6c54      	ldr	r4, [r2, #68]	; 0x44
 800353e:	4423      	add	r3, r4
 8003540:	6453      	str	r3, [r2, #68]	; 0x44
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003542:	f001 ffb6 	bl	80054b2 <USB_EPStartXfer>
 8003546:	e5ee      	b.n	8003126 <PCD_EP_ISR_Handler+0x6>
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003548:	4632      	mov	r2, r6
 800354a:	4628      	mov	r0, r5
 800354c:	f7ff fbd8 	bl	8002d00 <HAL_PCD_EP_DB_Transmit>
 8003550:	e5e9      	b.n	8003126 <PCD_EP_ISR_Handler+0x6>
}
 8003552:	2000      	movs	r0, #0
 8003554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003558 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8003558:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 800355c:	2b01      	cmp	r3, #1
 800355e:	d00d      	beq.n	800357c <HAL_PCD_SetAddress+0x24>
{
 8003560:	b510      	push	{r4, lr}
 8003562:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8003564:	2301      	movs	r3, #1
 8003566:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800356a:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800356e:	6800      	ldr	r0, [r0, #0]
 8003570:	f001 ff7b 	bl	800546a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003574:	2000      	movs	r0, #0
 8003576:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 800357a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800357c:	2002      	movs	r0, #2
}
 800357e:	4770      	bx	lr

08003580 <HAL_PCD_IRQHandler>:
{
 8003580:	b510      	push	{r4, lr}
 8003582:	b084      	sub	sp, #16
 8003584:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8003586:	6800      	ldr	r0, [r0, #0]
 8003588:	f001 ff79 	bl	800547e <USB_ReadInterrupts>
 800358c:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8003590:	d147      	bne.n	8003622 <HAL_PCD_IRQHandler+0xa2>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8003592:	6820      	ldr	r0, [r4, #0]
 8003594:	f001 ff73 	bl	800547e <USB_ReadInterrupts>
 8003598:	f410 6f80 	tst.w	r0, #1024	; 0x400
 800359c:	d145      	bne.n	800362a <HAL_PCD_IRQHandler+0xaa>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800359e:	6820      	ldr	r0, [r4, #0]
 80035a0:	f001 ff6d 	bl	800547e <USB_ReadInterrupts>
 80035a4:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 80035a8:	d008      	beq.n	80035bc <HAL_PCD_IRQHandler+0x3c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80035aa:	6822      	ldr	r2, [r4, #0]
 80035ac:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80035bc:	6820      	ldr	r0, [r4, #0]
 80035be:	f001 ff5e 	bl	800547e <USB_ReadInterrupts>
 80035c2:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 80035c6:	d008      	beq.n	80035da <HAL_PCD_IRQHandler+0x5a>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80035c8:	6822      	ldr	r2, [r4, #0]
 80035ca:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80035da:	6820      	ldr	r0, [r4, #0]
 80035dc:	f001 ff4f 	bl	800547e <USB_ReadInterrupts>
 80035e0:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 80035e4:	d132      	bne.n	800364c <HAL_PCD_IRQHandler+0xcc>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80035e6:	6820      	ldr	r0, [r4, #0]
 80035e8:	f001 ff49 	bl	800547e <USB_ReadInterrupts>
 80035ec:	f410 6f00 	tst.w	r0, #2048	; 0x800
 80035f0:	d178      	bne.n	80036e4 <HAL_PCD_IRQHandler+0x164>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80035f2:	6820      	ldr	r0, [r4, #0]
 80035f4:	f001 ff43 	bl	800547e <USB_ReadInterrupts>
 80035f8:	f410 7f00 	tst.w	r0, #512	; 0x200
 80035fc:	f040 809d 	bne.w	800373a <HAL_PCD_IRQHandler+0x1ba>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8003600:	6820      	ldr	r0, [r4, #0]
 8003602:	f001 ff3c 	bl	800547e <USB_ReadInterrupts>
 8003606:	f410 7f80 	tst.w	r0, #256	; 0x100
 800360a:	d008      	beq.n	800361e <HAL_PCD_IRQHandler+0x9e>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800360c:	6822      	ldr	r2, [r4, #0]
 800360e:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8003612:	b29b      	uxth	r3, r3
 8003614:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003618:	b29b      	uxth	r3, r3
 800361a:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 800361e:	b004      	add	sp, #16
 8003620:	bd10      	pop	{r4, pc}
    (void)PCD_EP_ISR_Handler(hpcd);
 8003622:	4620      	mov	r0, r4
 8003624:	f7ff fd7c 	bl	8003120 <PCD_EP_ISR_Handler>
 8003628:	e7b3      	b.n	8003592 <HAL_PCD_IRQHandler+0x12>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800362a:	6822      	ldr	r2, [r4, #0]
 800362c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8003630:	b29b      	uxth	r3, r3
 8003632:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003636:	b29b      	uxth	r3, r3
 8003638:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 800363c:	4620      	mov	r0, r4
 800363e:	f003 fb40 	bl	8006cc2 <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003642:	2100      	movs	r1, #0
 8003644:	4620      	mov	r0, r4
 8003646:	f7ff ff87 	bl	8003558 <HAL_PCD_SetAddress>
 800364a:	e7a8      	b.n	800359e <HAL_PCD_IRQHandler+0x1e>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800364c:	6822      	ldr	r2, [r4, #0]
 800364e:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8003652:	b29b      	uxth	r3, r3
 8003654:	f023 0304 	bic.w	r3, r3, #4
 8003658:	b29b      	uxth	r3, r3
 800365a:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800365e:	6822      	ldr	r2, [r4, #0]
 8003660:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8003664:	b29b      	uxth	r3, r3
 8003666:	f023 0308 	bic.w	r3, r3, #8
 800366a:	b29b      	uxth	r3, r3
 800366c:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8003670:	4620      	mov	r0, r4
 8003672:	f003 fb49 	bl	8006d08 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003676:	6822      	ldr	r2, [r4, #0]
 8003678:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800367c:	b29b      	uxth	r3, r3
 800367e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003682:	b29b      	uxth	r3, r3
 8003684:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
 8003688:	e7ad      	b.n	80035e6 <HAL_PCD_IRQHandler+0x66>
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800368a:	6822      	ldr	r2, [r4, #0]
 800368c:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8003690:	aa04      	add	r2, sp, #16
 8003692:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8003696:	f822 1c10 	strh.w	r1, [r2, #-16]
    for (i = 0U; i < 8U; i++)
 800369a:	3301      	adds	r3, #1
 800369c:	b2db      	uxtb	r3, r3
 800369e:	2b07      	cmp	r3, #7
 80036a0:	d9f3      	bls.n	800368a <HAL_PCD_IRQHandler+0x10a>
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80036a2:	6822      	ldr	r2, [r4, #0]
 80036a4:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	f043 0301 	orr.w	r3, r3, #1
 80036ae:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80036b2:	6822      	ldr	r2, [r4, #0]
 80036b4:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80036b8:	b29b      	uxth	r3, r3
 80036ba:	f023 0301 	bic.w	r3, r3, #1
 80036be:	b29b      	uxth	r3, r3
 80036c0:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80036c4:	6823      	ldr	r3, [r4, #0]
 80036c6:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 80036ca:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80036ce:	d0f9      	beq.n	80036c4 <HAL_PCD_IRQHandler+0x144>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80036d0:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 80036d4:	b292      	uxth	r2, r2
 80036d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036da:	b292      	uxth	r2, r2
 80036dc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    for (i = 0U; i < 8U; i++)
 80036e0:	2300      	movs	r3, #0
 80036e2:	e00b      	b.n	80036fc <HAL_PCD_IRQHandler+0x17c>
    for (i = 0U; i < 8U; i++)
 80036e4:	2300      	movs	r3, #0
 80036e6:	e7da      	b.n	800369e <HAL_PCD_IRQHandler+0x11e>
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80036e8:	6822      	ldr	r2, [r4, #0]
 80036ea:	a904      	add	r1, sp, #16
 80036ec:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 80036f0:	f831 1c10 	ldrh.w	r1, [r1, #-16]
 80036f4:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
    for (i = 0U; i < 8U; i++)
 80036f8:	3301      	adds	r3, #1
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	2b07      	cmp	r3, #7
 80036fe:	d9f3      	bls.n	80036e8 <HAL_PCD_IRQHandler+0x168>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003700:	6822      	ldr	r2, [r4, #0]
 8003702:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8003706:	b29b      	uxth	r3, r3
 8003708:	f043 0308 	orr.w	r3, r3, #8
 800370c:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003710:	6822      	ldr	r2, [r4, #0]
 8003712:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8003716:	b29b      	uxth	r3, r3
 8003718:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800371c:	b29b      	uxth	r3, r3
 800371e:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8003722:	6822      	ldr	r2, [r4, #0]
 8003724:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8003728:	b29b      	uxth	r3, r3
 800372a:	f043 0304 	orr.w	r3, r3, #4
 800372e:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 8003732:	4620      	mov	r0, r4
 8003734:	f003 fad8 	bl	8006ce8 <HAL_PCD_SuspendCallback>
 8003738:	e75b      	b.n	80035f2 <HAL_PCD_IRQHandler+0x72>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800373a:	6822      	ldr	r2, [r4, #0]
 800373c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8003740:	b29b      	uxth	r3, r3
 8003742:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003746:	b29b      	uxth	r3, r3
 8003748:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 800374c:	4620      	mov	r0, r4
 800374e:	f003 fab2 	bl	8006cb6 <HAL_PCD_SOFCallback>
 8003752:	e755      	b.n	8003600 <HAL_PCD_IRQHandler+0x80>

08003754 <HAL_PCD_EP_Open>:
{
 8003754:	b510      	push	{r4, lr}
 8003756:	4604      	mov	r4, r0
 8003758:	468c      	mov	ip, r1
  if ((ep_addr & 0x80U) == 0x80U)
 800375a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800375e:	d12a      	bne.n	80037b6 <HAL_PCD_EP_Open+0x62>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003760:	f001 0007 	and.w	r0, r1, #7
 8003764:	eb00 0180 	add.w	r1, r0, r0, lsl #2
 8003768:	00c9      	lsls	r1, r1, #3
 800376a:	f501 7eb4 	add.w	lr, r1, #360	; 0x168
 800376e:	eb04 010e 	add.w	r1, r4, lr
    ep->is_in = 0U;
 8003772:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003776:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 800377a:	f04f 0e00 	mov.w	lr, #0
 800377e:	f880 e169 	strb.w	lr, [r0, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 8003782:	f00c 0c07 	and.w	ip, ip, #7
 8003786:	f881 c000 	strb.w	ip, [r1]
  ep->maxpacket = ep_mps;
 800378a:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;
 800378c:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 800378e:	784a      	ldrb	r2, [r1, #1]
 8003790:	b10a      	cbz	r2, 8003796 <HAL_PCD_EP_Open+0x42>
    ep->tx_fifo_num = ep->num;
 8003792:	f8a1 c00e 	strh.w	ip, [r1, #14]
  if (ep_type == EP_TYPE_BULK)
 8003796:	2b02      	cmp	r3, #2
 8003798:	d019      	beq.n	80037ce <HAL_PCD_EP_Open+0x7a>
  __HAL_LOCK(hpcd);
 800379a:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d018      	beq.n	80037d4 <HAL_PCD_EP_Open+0x80>
 80037a2:	2301      	movs	r3, #1
 80037a4:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80037a8:	6820      	ldr	r0, [r4, #0]
 80037aa:	f001 fb41 	bl	8004e30 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80037ae:	2000      	movs	r0, #0
 80037b0:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 80037b4:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037b6:	f001 0007 	and.w	r0, r1, #7
 80037ba:	3001      	adds	r0, #1
 80037bc:	eb00 0180 	add.w	r1, r0, r0, lsl #2
 80037c0:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
    ep->is_in = 1U;
 80037c4:	f04f 0e01 	mov.w	lr, #1
 80037c8:	f881 e001 	strb.w	lr, [r1, #1]
 80037cc:	e7d9      	b.n	8003782 <HAL_PCD_EP_Open+0x2e>
    ep->data_pid_start = 0U;
 80037ce:	2300      	movs	r3, #0
 80037d0:	710b      	strb	r3, [r1, #4]
 80037d2:	e7e2      	b.n	800379a <HAL_PCD_EP_Open+0x46>
  __HAL_LOCK(hpcd);
 80037d4:	2002      	movs	r0, #2
 80037d6:	e7ed      	b.n	80037b4 <HAL_PCD_EP_Open+0x60>

080037d8 <HAL_PCD_EP_Close>:
{
 80037d8:	b510      	push	{r4, lr}
 80037da:	4604      	mov	r4, r0
 80037dc:	460b      	mov	r3, r1
  if ((ep_addr & 0x80U) == 0x80U)
 80037de:	f011 0f80 	tst.w	r1, #128	; 0x80
 80037e2:	d11f      	bne.n	8003824 <HAL_PCD_EP_Close+0x4c>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037e4:	f001 0207 	and.w	r2, r1, #7
 80037e8:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 80037ec:	00c9      	lsls	r1, r1, #3
 80037ee:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 80037f2:	4401      	add	r1, r0
    ep->is_in = 0U;
 80037f4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80037f8:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 80037fc:	2000      	movs	r0, #0
 80037fe:	f882 0169 	strb.w	r0, [r2, #361]	; 0x169
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003802:	f003 0307 	and.w	r3, r3, #7
 8003806:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8003808:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 800380c:	2b01      	cmp	r3, #1
 800380e:	d013      	beq.n	8003838 <HAL_PCD_EP_Close+0x60>
 8003810:	2301      	movs	r3, #1
 8003812:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003816:	6820      	ldr	r0, [r4, #0]
 8003818:	f001 fcc6 	bl	80051a8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800381c:	2000      	movs	r0, #0
 800381e:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8003822:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003824:	f001 0207 	and.w	r2, r1, #7
 8003828:	3201      	adds	r2, #1
 800382a:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 800382e:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 8003832:	2001      	movs	r0, #1
 8003834:	7048      	strb	r0, [r1, #1]
 8003836:	e7e4      	b.n	8003802 <HAL_PCD_EP_Close+0x2a>
  __HAL_LOCK(hpcd);
 8003838:	2002      	movs	r0, #2
 800383a:	e7f2      	b.n	8003822 <HAL_PCD_EP_Close+0x4a>

0800383c <HAL_PCD_EP_Receive>:
{
 800383c:	b510      	push	{r4, lr}
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800383e:	f001 0407 	and.w	r4, r1, #7
 8003842:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8003846:	00c9      	lsls	r1, r1, #3
 8003848:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 800384c:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;
 800384e:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
 8003852:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
 8003856:	f8cc 217c 	str.w	r2, [ip, #380]	; 0x17c
  ep->xfer_len = len;
 800385a:	f8cc 3180 	str.w	r3, [ip, #384]	; 0x180
  ep->xfer_count = 0U;
 800385e:	2300      	movs	r3, #0
 8003860:	f8cc 3184 	str.w	r3, [ip, #388]	; 0x184
  ep->is_in = 0U;
 8003864:	f88c 3169 	strb.w	r3, [ip, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 8003868:	f88c 4168 	strb.w	r4, [ip, #360]	; 0x168
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800386c:	b924      	cbnz	r4, 8003878 <HAL_PCD_EP_Receive+0x3c>
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800386e:	6800      	ldr	r0, [r0, #0]
 8003870:	f001 fe1f 	bl	80054b2 <USB_EPStartXfer>
}
 8003874:	2000      	movs	r0, #0
 8003876:	bd10      	pop	{r4, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003878:	6800      	ldr	r0, [r0, #0]
 800387a:	f001 fe1a 	bl	80054b2 <USB_EPStartXfer>
 800387e:	e7f9      	b.n	8003874 <HAL_PCD_EP_Receive+0x38>

08003880 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003880:	f001 0107 	and.w	r1, r1, #7
 8003884:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8003888:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
}
 800388c:	f8d1 0184 	ldr.w	r0, [r1, #388]	; 0x184
 8003890:	4770      	bx	lr

08003892 <HAL_PCD_EP_Transmit>:
{
 8003892:	b510      	push	{r4, lr}
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003894:	f001 0407 	and.w	r4, r1, #7
 8003898:	f104 0c01 	add.w	ip, r4, #1
 800389c:	eb0c 018c 	add.w	r1, ip, ip, lsl #2
 80038a0:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
  ep->xfer_buff = pBuf;
 80038a4:	eb04 0e84 	add.w	lr, r4, r4, lsl #2
 80038a8:	eb00 0ece 	add.w	lr, r0, lr, lsl #3
 80038ac:	f8ce 203c 	str.w	r2, [lr, #60]	; 0x3c
  ep->xfer_len = len;
 80038b0:	f8ce 3040 	str.w	r3, [lr, #64]	; 0x40
  ep->xfer_fill_db = 1U;
 80038b4:	2201      	movs	r2, #1
 80038b6:	f88e 204c 	strb.w	r2, [lr, #76]	; 0x4c
  ep->xfer_len_db = len;
 80038ba:	f8ce 3048 	str.w	r3, [lr, #72]	; 0x48
  ep->xfer_count = 0U;
 80038be:	2300      	movs	r3, #0
 80038c0:	f8ce 3044 	str.w	r3, [lr, #68]	; 0x44
  ep->is_in = 1U;
 80038c4:	704a      	strb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80038c6:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 80038ca:	f800 403c 	strb.w	r4, [r0, ip, lsl #3]
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80038ce:	b924      	cbnz	r4, 80038da <HAL_PCD_EP_Transmit+0x48>
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80038d0:	6800      	ldr	r0, [r0, #0]
 80038d2:	f001 fdee 	bl	80054b2 <USB_EPStartXfer>
}
 80038d6:	2000      	movs	r0, #0
 80038d8:	bd10      	pop	{r4, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80038da:	6800      	ldr	r0, [r0, #0]
 80038dc:	f001 fde9 	bl	80054b2 <USB_EPStartXfer>
 80038e0:	e7f9      	b.n	80038d6 <HAL_PCD_EP_Transmit+0x44>

080038e2 <HAL_PCD_EP_SetStall>:
{
 80038e2:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80038e4:	f001 0507 	and.w	r5, r1, #7
 80038e8:	6842      	ldr	r2, [r0, #4]
 80038ea:	4295      	cmp	r5, r2
 80038ec:	d831      	bhi.n	8003952 <HAL_PCD_EP_SetStall+0x70>
 80038ee:	4604      	mov	r4, r0
 80038f0:	460b      	mov	r3, r1
  if ((0x80U & ep_addr) == 0x80U)
 80038f2:	f011 0f80 	tst.w	r1, #128	; 0x80
 80038f6:	d11e      	bne.n	8003936 <HAL_PCD_EP_SetStall+0x54>
    ep = &hpcd->OUT_ep[ep_addr];
 80038f8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80038fc:	00c9      	lsls	r1, r1, #3
 80038fe:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 8003902:	4401      	add	r1, r0
    ep->is_in = 0U;
 8003904:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003908:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800390c:	2200      	movs	r2, #0
 800390e:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169
  ep->is_stall = 1U;
 8003912:	2301      	movs	r3, #1
 8003914:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003916:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 8003918:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 800391c:	2b01      	cmp	r3, #1
 800391e:	d01a      	beq.n	8003956 <HAL_PCD_EP_SetStall+0x74>
 8003920:	2301      	movs	r3, #1
 8003922:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003926:	6820      	ldr	r0, [r4, #0]
 8003928:	f001 fd29 	bl	800537e <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800392c:	b15d      	cbz	r5, 8003946 <HAL_PCD_EP_SetStall+0x64>
  __HAL_UNLOCK(hpcd);
 800392e:	2000      	movs	r0, #0
 8003930:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8003934:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003936:	1c6b      	adds	r3, r5, #1
 8003938:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800393c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 8003940:	2201      	movs	r2, #1
 8003942:	704a      	strb	r2, [r1, #1]
 8003944:	e7e5      	b.n	8003912 <HAL_PCD_EP_SetStall+0x30>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003946:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 800394a:	6820      	ldr	r0, [r4, #0]
 800394c:	f001 fd9b 	bl	8005486 <USB_EP0_OutStart>
 8003950:	e7ed      	b.n	800392e <HAL_PCD_EP_SetStall+0x4c>
    return HAL_ERROR;
 8003952:	2001      	movs	r0, #1
 8003954:	e7ee      	b.n	8003934 <HAL_PCD_EP_SetStall+0x52>
  __HAL_LOCK(hpcd);
 8003956:	2002      	movs	r0, #2
 8003958:	e7ec      	b.n	8003934 <HAL_PCD_EP_SetStall+0x52>

0800395a <HAL_PCD_EP_ClrStall>:
{
 800395a:	460b      	mov	r3, r1
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800395c:	f001 010f 	and.w	r1, r1, #15
 8003960:	6842      	ldr	r2, [r0, #4]
 8003962:	4291      	cmp	r1, r2
 8003964:	d830      	bhi.n	80039c8 <HAL_PCD_EP_ClrStall+0x6e>
{
 8003966:	b510      	push	{r4, lr}
 8003968:	4604      	mov	r4, r0
  if ((0x80U & ep_addr) == 0x80U)
 800396a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800396e:	d121      	bne.n	80039b4 <HAL_PCD_EP_ClrStall+0x5a>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003970:	f003 0207 	and.w	r2, r3, #7
 8003974:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8003978:	00c9      	lsls	r1, r1, #3
 800397a:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 800397e:	4401      	add	r1, r0
    ep->is_in = 0U;
 8003980:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003984:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8003988:	2000      	movs	r0, #0
 800398a:	f882 0169 	strb.w	r0, [r2, #361]	; 0x169
  ep->is_stall = 0U;
 800398e:	2200      	movs	r2, #0
 8003990:	708a      	strb	r2, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003992:	f003 0307 	and.w	r3, r3, #7
 8003996:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8003998:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 800399c:	2b01      	cmp	r3, #1
 800399e:	d015      	beq.n	80039cc <HAL_PCD_EP_ClrStall+0x72>
 80039a0:	2301      	movs	r3, #1
 80039a2:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80039a6:	6820      	ldr	r0, [r4, #0]
 80039a8:	f001 fd0e 	bl	80053c8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80039ac:	2000      	movs	r0, #0
 80039ae:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 80039b2:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039b4:	f003 0207 	and.w	r2, r3, #7
 80039b8:	3201      	adds	r2, #1
 80039ba:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 80039be:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 80039c2:	2001      	movs	r0, #1
 80039c4:	7048      	strb	r0, [r1, #1]
 80039c6:	e7e2      	b.n	800398e <HAL_PCD_EP_ClrStall+0x34>
    return HAL_ERROR;
 80039c8:	2001      	movs	r0, #1
}
 80039ca:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 80039cc:	2002      	movs	r0, #2
 80039ce:	e7f0      	b.n	80039b2 <HAL_PCD_EP_ClrStall+0x58>

080039d0 <HAL_PCDEx_PMAConfig>:
                                       uint16_t ep_kind, uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80039d0:	f011 0f80 	tst.w	r1, #128	; 0x80
 80039d4:	d00b      	beq.n	80039ee <HAL_PCDEx_PMAConfig+0x1e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039d6:	f001 0107 	and.w	r1, r1, #7
 80039da:	3101      	adds	r1, #1
 80039dc:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80039e0:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80039e4:	b952      	cbnz	r2, 80039fc <HAL_PCDEx_PMAConfig+0x2c>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80039e6:	730a      	strb	r2, [r1, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80039e8:	80cb      	strh	r3, [r1, #6]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }

  return HAL_OK;
}
 80039ea:	2000      	movs	r0, #0
 80039ec:	4770      	bx	lr
    ep = &hpcd->OUT_ep[ep_addr];
 80039ee:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80039f2:	00c9      	lsls	r1, r1, #3
 80039f4:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 80039f8:	4401      	add	r1, r0
 80039fa:	e7f3      	b.n	80039e4 <HAL_PCDEx_PMAConfig+0x14>
    ep->doublebuffer = 1U;
 80039fc:	2201      	movs	r2, #1
 80039fe:	730a      	strb	r2, [r1, #12]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003a00:	810b      	strh	r3, [r1, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003a02:	0c1b      	lsrs	r3, r3, #16
 8003a04:	814b      	strh	r3, [r1, #10]
 8003a06:	e7f0      	b.n	80039ea <HAL_PCDEx_PMAConfig+0x1a>

08003a08 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003a08:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003a0a:	4b08      	ldr	r3, [pc, #32]	; (8003a2c <RCC_Delay+0x24>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a08      	ldr	r2, [pc, #32]	; (8003a30 <RCC_Delay+0x28>)
 8003a10:	fba2 2303 	umull	r2, r3, r2, r3
 8003a14:	0a5b      	lsrs	r3, r3, #9
 8003a16:	fb00 f303 	mul.w	r3, r0, r3
 8003a1a:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8003a1c:	bf00      	nop
  }
  while (Delay --);
 8003a1e:	9b01      	ldr	r3, [sp, #4]
 8003a20:	1e5a      	subs	r2, r3, #1
 8003a22:	9201      	str	r2, [sp, #4]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d1f9      	bne.n	8003a1c <RCC_Delay+0x14>
}
 8003a28:	b002      	add	sp, #8
 8003a2a:	4770      	bx	lr
 8003a2c:	2000000c 	.word	0x2000000c
 8003a30:	10624dd3 	.word	0x10624dd3

08003a34 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8003a34:	2800      	cmp	r0, #0
 8003a36:	f000 81f1 	beq.w	8003e1c <HAL_RCC_OscConfig+0x3e8>
{
 8003a3a:	b570      	push	{r4, r5, r6, lr}
 8003a3c:	b082      	sub	sp, #8
 8003a3e:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a40:	6803      	ldr	r3, [r0, #0]
 8003a42:	f013 0f01 	tst.w	r3, #1
 8003a46:	d02c      	beq.n	8003aa2 <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a48:	4b99      	ldr	r3, [pc, #612]	; (8003cb0 <HAL_RCC_OscConfig+0x27c>)
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	f003 030c 	and.w	r3, r3, #12
 8003a50:	2b04      	cmp	r3, #4
 8003a52:	d01d      	beq.n	8003a90 <HAL_RCC_OscConfig+0x5c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003a54:	4b96      	ldr	r3, [pc, #600]	; (8003cb0 <HAL_RCC_OscConfig+0x27c>)
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	f003 030c 	and.w	r3, r3, #12
 8003a5c:	2b08      	cmp	r3, #8
 8003a5e:	d012      	beq.n	8003a86 <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a60:	6863      	ldr	r3, [r4, #4]
 8003a62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a66:	d041      	beq.n	8003aec <HAL_RCC_OscConfig+0xb8>
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d155      	bne.n	8003b18 <HAL_RCC_OscConfig+0xe4>
 8003a6c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003a70:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003a7a:	601a      	str	r2, [r3, #0]
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003a82:	601a      	str	r2, [r3, #0]
 8003a84:	e037      	b.n	8003af6 <HAL_RCC_OscConfig+0xc2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003a86:	4b8a      	ldr	r3, [pc, #552]	; (8003cb0 <HAL_RCC_OscConfig+0x27c>)
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003a8e:	d0e7      	beq.n	8003a60 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a90:	4b87      	ldr	r3, [pc, #540]	; (8003cb0 <HAL_RCC_OscConfig+0x27c>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003a98:	d003      	beq.n	8003aa2 <HAL_RCC_OscConfig+0x6e>
 8003a9a:	6863      	ldr	r3, [r4, #4]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	f000 81bf 	beq.w	8003e20 <HAL_RCC_OscConfig+0x3ec>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003aa2:	6823      	ldr	r3, [r4, #0]
 8003aa4:	f013 0f02 	tst.w	r3, #2
 8003aa8:	d075      	beq.n	8003b96 <HAL_RCC_OscConfig+0x162>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003aaa:	4b81      	ldr	r3, [pc, #516]	; (8003cb0 <HAL_RCC_OscConfig+0x27c>)
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	f013 0f0c 	tst.w	r3, #12
 8003ab2:	d05f      	beq.n	8003b74 <HAL_RCC_OscConfig+0x140>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003ab4:	4b7e      	ldr	r3, [pc, #504]	; (8003cb0 <HAL_RCC_OscConfig+0x27c>)
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	f003 030c 	and.w	r3, r3, #12
 8003abc:	2b08      	cmp	r3, #8
 8003abe:	d054      	beq.n	8003b6a <HAL_RCC_OscConfig+0x136>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ac0:	6923      	ldr	r3, [r4, #16]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	f000 808a 	beq.w	8003bdc <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_HSI_ENABLE();
 8003ac8:	4b7a      	ldr	r3, [pc, #488]	; (8003cb4 <HAL_RCC_OscConfig+0x280>)
 8003aca:	2201      	movs	r2, #1
 8003acc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003ace:	f7fe fc37 	bl	8002340 <HAL_GetTick>
 8003ad2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ad4:	4b76      	ldr	r3, [pc, #472]	; (8003cb0 <HAL_RCC_OscConfig+0x27c>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f013 0f02 	tst.w	r3, #2
 8003adc:	d175      	bne.n	8003bca <HAL_RCC_OscConfig+0x196>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ade:	f7fe fc2f 	bl	8002340 <HAL_GetTick>
 8003ae2:	1b40      	subs	r0, r0, r5
 8003ae4:	2802      	cmp	r0, #2
 8003ae6:	d9f5      	bls.n	8003ad4 <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
 8003ae8:	2003      	movs	r0, #3
 8003aea:	e19e      	b.n	8003e2a <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003aec:	4a70      	ldr	r2, [pc, #448]	; (8003cb0 <HAL_RCC_OscConfig+0x27c>)
 8003aee:	6813      	ldr	r3, [r2, #0]
 8003af0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003af4:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003af6:	6863      	ldr	r3, [r4, #4]
 8003af8:	b343      	cbz	r3, 8003b4c <HAL_RCC_OscConfig+0x118>
        tickstart = HAL_GetTick();
 8003afa:	f7fe fc21 	bl	8002340 <HAL_GetTick>
 8003afe:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b00:	4b6b      	ldr	r3, [pc, #428]	; (8003cb0 <HAL_RCC_OscConfig+0x27c>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003b08:	d1cb      	bne.n	8003aa2 <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b0a:	f7fe fc19 	bl	8002340 <HAL_GetTick>
 8003b0e:	1b40      	subs	r0, r0, r5
 8003b10:	2864      	cmp	r0, #100	; 0x64
 8003b12:	d9f5      	bls.n	8003b00 <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 8003b14:	2003      	movs	r0, #3
 8003b16:	e188      	b.n	8003e2a <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b1c:	d009      	beq.n	8003b32 <HAL_RCC_OscConfig+0xfe>
 8003b1e:	4b64      	ldr	r3, [pc, #400]	; (8003cb0 <HAL_RCC_OscConfig+0x27c>)
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003b26:	601a      	str	r2, [r3, #0]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003b2e:	601a      	str	r2, [r3, #0]
 8003b30:	e7e1      	b.n	8003af6 <HAL_RCC_OscConfig+0xc2>
 8003b32:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003b36:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003b40:	601a      	str	r2, [r3, #0]
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003b48:	601a      	str	r2, [r3, #0]
 8003b4a:	e7d4      	b.n	8003af6 <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 8003b4c:	f7fe fbf8 	bl	8002340 <HAL_GetTick>
 8003b50:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b52:	4b57      	ldr	r3, [pc, #348]	; (8003cb0 <HAL_RCC_OscConfig+0x27c>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003b5a:	d0a2      	beq.n	8003aa2 <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b5c:	f7fe fbf0 	bl	8002340 <HAL_GetTick>
 8003b60:	1b40      	subs	r0, r0, r5
 8003b62:	2864      	cmp	r0, #100	; 0x64
 8003b64:	d9f5      	bls.n	8003b52 <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 8003b66:	2003      	movs	r0, #3
 8003b68:	e15f      	b.n	8003e2a <HAL_RCC_OscConfig+0x3f6>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003b6a:	4b51      	ldr	r3, [pc, #324]	; (8003cb0 <HAL_RCC_OscConfig+0x27c>)
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003b72:	d1a5      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b74:	4b4e      	ldr	r3, [pc, #312]	; (8003cb0 <HAL_RCC_OscConfig+0x27c>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f013 0f02 	tst.w	r3, #2
 8003b7c:	d003      	beq.n	8003b86 <HAL_RCC_OscConfig+0x152>
 8003b7e:	6923      	ldr	r3, [r4, #16]
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	f040 814f 	bne.w	8003e24 <HAL_RCC_OscConfig+0x3f0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b86:	4a4a      	ldr	r2, [pc, #296]	; (8003cb0 <HAL_RCC_OscConfig+0x27c>)
 8003b88:	6813      	ldr	r3, [r2, #0]
 8003b8a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003b8e:	6961      	ldr	r1, [r4, #20]
 8003b90:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003b94:	6013      	str	r3, [r2, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b96:	6823      	ldr	r3, [r4, #0]
 8003b98:	f013 0f08 	tst.w	r3, #8
 8003b9c:	d033      	beq.n	8003c06 <HAL_RCC_OscConfig+0x1d2>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b9e:	69a3      	ldr	r3, [r4, #24]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d05c      	beq.n	8003c5e <HAL_RCC_OscConfig+0x22a>
      __HAL_RCC_LSI_ENABLE();
 8003ba4:	4b43      	ldr	r3, [pc, #268]	; (8003cb4 <HAL_RCC_OscConfig+0x280>)
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8003bac:	f7fe fbc8 	bl	8002340 <HAL_GetTick>
 8003bb0:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bb2:	4b3f      	ldr	r3, [pc, #252]	; (8003cb0 <HAL_RCC_OscConfig+0x27c>)
 8003bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb6:	f013 0f02 	tst.w	r3, #2
 8003bba:	d121      	bne.n	8003c00 <HAL_RCC_OscConfig+0x1cc>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bbc:	f7fe fbc0 	bl	8002340 <HAL_GetTick>
 8003bc0:	1b40      	subs	r0, r0, r5
 8003bc2:	2802      	cmp	r0, #2
 8003bc4:	d9f5      	bls.n	8003bb2 <HAL_RCC_OscConfig+0x17e>
          return HAL_TIMEOUT;
 8003bc6:	2003      	movs	r0, #3
 8003bc8:	e12f      	b.n	8003e2a <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bca:	4a39      	ldr	r2, [pc, #228]	; (8003cb0 <HAL_RCC_OscConfig+0x27c>)
 8003bcc:	6813      	ldr	r3, [r2, #0]
 8003bce:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003bd2:	6961      	ldr	r1, [r4, #20]
 8003bd4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003bd8:	6013      	str	r3, [r2, #0]
 8003bda:	e7dc      	b.n	8003b96 <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 8003bdc:	4b35      	ldr	r3, [pc, #212]	; (8003cb4 <HAL_RCC_OscConfig+0x280>)
 8003bde:	2200      	movs	r2, #0
 8003be0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003be2:	f7fe fbad 	bl	8002340 <HAL_GetTick>
 8003be6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003be8:	4b31      	ldr	r3, [pc, #196]	; (8003cb0 <HAL_RCC_OscConfig+0x27c>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f013 0f02 	tst.w	r3, #2
 8003bf0:	d0d1      	beq.n	8003b96 <HAL_RCC_OscConfig+0x162>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bf2:	f7fe fba5 	bl	8002340 <HAL_GetTick>
 8003bf6:	1b40      	subs	r0, r0, r5
 8003bf8:	2802      	cmp	r0, #2
 8003bfa:	d9f5      	bls.n	8003be8 <HAL_RCC_OscConfig+0x1b4>
            return HAL_TIMEOUT;
 8003bfc:	2003      	movs	r0, #3
 8003bfe:	e114      	b.n	8003e2a <HAL_RCC_OscConfig+0x3f6>
      RCC_Delay(1);
 8003c00:	2001      	movs	r0, #1
 8003c02:	f7ff ff01 	bl	8003a08 <RCC_Delay>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c06:	6823      	ldr	r3, [r4, #0]
 8003c08:	f013 0f04 	tst.w	r3, #4
 8003c0c:	f000 8096 	beq.w	8003d3c <HAL_RCC_OscConfig+0x308>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c10:	4b27      	ldr	r3, [pc, #156]	; (8003cb0 <HAL_RCC_OscConfig+0x27c>)
 8003c12:	69db      	ldr	r3, [r3, #28]
 8003c14:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003c18:	d134      	bne.n	8003c84 <HAL_RCC_OscConfig+0x250>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c1a:	4b25      	ldr	r3, [pc, #148]	; (8003cb0 <HAL_RCC_OscConfig+0x27c>)
 8003c1c:	69da      	ldr	r2, [r3, #28]
 8003c1e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003c22:	61da      	str	r2, [r3, #28]
 8003c24:	69db      	ldr	r3, [r3, #28]
 8003c26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c2a:	9301      	str	r3, [sp, #4]
 8003c2c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003c2e:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c30:	4b21      	ldr	r3, [pc, #132]	; (8003cb8 <HAL_RCC_OscConfig+0x284>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003c38:	d026      	beq.n	8003c88 <HAL_RCC_OscConfig+0x254>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c3a:	68e3      	ldr	r3, [r4, #12]
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d03d      	beq.n	8003cbc <HAL_RCC_OscConfig+0x288>
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d153      	bne.n	8003cec <HAL_RCC_OscConfig+0x2b8>
 8003c44:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003c48:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8003c4c:	6a1a      	ldr	r2, [r3, #32]
 8003c4e:	f022 0201 	bic.w	r2, r2, #1
 8003c52:	621a      	str	r2, [r3, #32]
 8003c54:	6a1a      	ldr	r2, [r3, #32]
 8003c56:	f022 0204 	bic.w	r2, r2, #4
 8003c5a:	621a      	str	r2, [r3, #32]
 8003c5c:	e033      	b.n	8003cc6 <HAL_RCC_OscConfig+0x292>
      __HAL_RCC_LSI_DISABLE();
 8003c5e:	4b15      	ldr	r3, [pc, #84]	; (8003cb4 <HAL_RCC_OscConfig+0x280>)
 8003c60:	2200      	movs	r2, #0
 8003c62:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8003c66:	f7fe fb6b 	bl	8002340 <HAL_GetTick>
 8003c6a:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c6c:	4b10      	ldr	r3, [pc, #64]	; (8003cb0 <HAL_RCC_OscConfig+0x27c>)
 8003c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c70:	f013 0f02 	tst.w	r3, #2
 8003c74:	d0c7      	beq.n	8003c06 <HAL_RCC_OscConfig+0x1d2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c76:	f7fe fb63 	bl	8002340 <HAL_GetTick>
 8003c7a:	1b40      	subs	r0, r0, r5
 8003c7c:	2802      	cmp	r0, #2
 8003c7e:	d9f5      	bls.n	8003c6c <HAL_RCC_OscConfig+0x238>
          return HAL_TIMEOUT;
 8003c80:	2003      	movs	r0, #3
 8003c82:	e0d2      	b.n	8003e2a <HAL_RCC_OscConfig+0x3f6>
    FlagStatus       pwrclkchanged = RESET;
 8003c84:	2500      	movs	r5, #0
 8003c86:	e7d3      	b.n	8003c30 <HAL_RCC_OscConfig+0x1fc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c88:	4a0b      	ldr	r2, [pc, #44]	; (8003cb8 <HAL_RCC_OscConfig+0x284>)
 8003c8a:	6813      	ldr	r3, [r2, #0]
 8003c8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c90:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8003c92:	f7fe fb55 	bl	8002340 <HAL_GetTick>
 8003c96:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c98:	4b07      	ldr	r3, [pc, #28]	; (8003cb8 <HAL_RCC_OscConfig+0x284>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003ca0:	d1cb      	bne.n	8003c3a <HAL_RCC_OscConfig+0x206>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ca2:	f7fe fb4d 	bl	8002340 <HAL_GetTick>
 8003ca6:	1b80      	subs	r0, r0, r6
 8003ca8:	2864      	cmp	r0, #100	; 0x64
 8003caa:	d9f5      	bls.n	8003c98 <HAL_RCC_OscConfig+0x264>
          return HAL_TIMEOUT;
 8003cac:	2003      	movs	r0, #3
 8003cae:	e0bc      	b.n	8003e2a <HAL_RCC_OscConfig+0x3f6>
 8003cb0:	40021000 	.word	0x40021000
 8003cb4:	42420000 	.word	0x42420000
 8003cb8:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cbc:	4a5f      	ldr	r2, [pc, #380]	; (8003e3c <HAL_RCC_OscConfig+0x408>)
 8003cbe:	6a13      	ldr	r3, [r2, #32]
 8003cc0:	f043 0301 	orr.w	r3, r3, #1
 8003cc4:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003cc6:	68e3      	ldr	r3, [r4, #12]
 8003cc8:	b333      	cbz	r3, 8003d18 <HAL_RCC_OscConfig+0x2e4>
      tickstart = HAL_GetTick();
 8003cca:	f7fe fb39 	bl	8002340 <HAL_GetTick>
 8003cce:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cd0:	4b5a      	ldr	r3, [pc, #360]	; (8003e3c <HAL_RCC_OscConfig+0x408>)
 8003cd2:	6a1b      	ldr	r3, [r3, #32]
 8003cd4:	f013 0f02 	tst.w	r3, #2
 8003cd8:	d12f      	bne.n	8003d3a <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cda:	f7fe fb31 	bl	8002340 <HAL_GetTick>
 8003cde:	1b80      	subs	r0, r0, r6
 8003ce0:	f241 3388 	movw	r3, #5000	; 0x1388
 8003ce4:	4298      	cmp	r0, r3
 8003ce6:	d9f3      	bls.n	8003cd0 <HAL_RCC_OscConfig+0x29c>
          return HAL_TIMEOUT;
 8003ce8:	2003      	movs	r0, #3
 8003cea:	e09e      	b.n	8003e2a <HAL_RCC_OscConfig+0x3f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cec:	2b05      	cmp	r3, #5
 8003cee:	d009      	beq.n	8003d04 <HAL_RCC_OscConfig+0x2d0>
 8003cf0:	4b52      	ldr	r3, [pc, #328]	; (8003e3c <HAL_RCC_OscConfig+0x408>)
 8003cf2:	6a1a      	ldr	r2, [r3, #32]
 8003cf4:	f022 0201 	bic.w	r2, r2, #1
 8003cf8:	621a      	str	r2, [r3, #32]
 8003cfa:	6a1a      	ldr	r2, [r3, #32]
 8003cfc:	f022 0204 	bic.w	r2, r2, #4
 8003d00:	621a      	str	r2, [r3, #32]
 8003d02:	e7e0      	b.n	8003cc6 <HAL_RCC_OscConfig+0x292>
 8003d04:	4b4d      	ldr	r3, [pc, #308]	; (8003e3c <HAL_RCC_OscConfig+0x408>)
 8003d06:	6a1a      	ldr	r2, [r3, #32]
 8003d08:	f042 0204 	orr.w	r2, r2, #4
 8003d0c:	621a      	str	r2, [r3, #32]
 8003d0e:	6a1a      	ldr	r2, [r3, #32]
 8003d10:	f042 0201 	orr.w	r2, r2, #1
 8003d14:	621a      	str	r2, [r3, #32]
 8003d16:	e7d6      	b.n	8003cc6 <HAL_RCC_OscConfig+0x292>
      tickstart = HAL_GetTick();
 8003d18:	f7fe fb12 	bl	8002340 <HAL_GetTick>
 8003d1c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d1e:	4b47      	ldr	r3, [pc, #284]	; (8003e3c <HAL_RCC_OscConfig+0x408>)
 8003d20:	6a1b      	ldr	r3, [r3, #32]
 8003d22:	f013 0f02 	tst.w	r3, #2
 8003d26:	d008      	beq.n	8003d3a <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d28:	f7fe fb0a 	bl	8002340 <HAL_GetTick>
 8003d2c:	1b80      	subs	r0, r0, r6
 8003d2e:	f241 3388 	movw	r3, #5000	; 0x1388
 8003d32:	4298      	cmp	r0, r3
 8003d34:	d9f3      	bls.n	8003d1e <HAL_RCC_OscConfig+0x2ea>
          return HAL_TIMEOUT;
 8003d36:	2003      	movs	r0, #3
 8003d38:	e077      	b.n	8003e2a <HAL_RCC_OscConfig+0x3f6>
    if (pwrclkchanged == SET)
 8003d3a:	b9e5      	cbnz	r5, 8003d76 <HAL_RCC_OscConfig+0x342>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d3c:	69e3      	ldr	r3, [r4, #28]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d072      	beq.n	8003e28 <HAL_RCC_OscConfig+0x3f4>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d42:	4a3e      	ldr	r2, [pc, #248]	; (8003e3c <HAL_RCC_OscConfig+0x408>)
 8003d44:	6852      	ldr	r2, [r2, #4]
 8003d46:	f002 020c 	and.w	r2, r2, #12
 8003d4a:	2a08      	cmp	r2, #8
 8003d4c:	d056      	beq.n	8003dfc <HAL_RCC_OscConfig+0x3c8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d4e:	2b02      	cmp	r3, #2
 8003d50:	d017      	beq.n	8003d82 <HAL_RCC_OscConfig+0x34e>
        __HAL_RCC_PLL_DISABLE();
 8003d52:	4b3b      	ldr	r3, [pc, #236]	; (8003e40 <HAL_RCC_OscConfig+0x40c>)
 8003d54:	2200      	movs	r2, #0
 8003d56:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8003d58:	f7fe faf2 	bl	8002340 <HAL_GetTick>
 8003d5c:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d5e:	4b37      	ldr	r3, [pc, #220]	; (8003e3c <HAL_RCC_OscConfig+0x408>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003d66:	d047      	beq.n	8003df8 <HAL_RCC_OscConfig+0x3c4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d68:	f7fe faea 	bl	8002340 <HAL_GetTick>
 8003d6c:	1b00      	subs	r0, r0, r4
 8003d6e:	2802      	cmp	r0, #2
 8003d70:	d9f5      	bls.n	8003d5e <HAL_RCC_OscConfig+0x32a>
            return HAL_TIMEOUT;
 8003d72:	2003      	movs	r0, #3
 8003d74:	e059      	b.n	8003e2a <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d76:	4a31      	ldr	r2, [pc, #196]	; (8003e3c <HAL_RCC_OscConfig+0x408>)
 8003d78:	69d3      	ldr	r3, [r2, #28]
 8003d7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d7e:	61d3      	str	r3, [r2, #28]
 8003d80:	e7dc      	b.n	8003d3c <HAL_RCC_OscConfig+0x308>
        __HAL_RCC_PLL_DISABLE();
 8003d82:	4b2f      	ldr	r3, [pc, #188]	; (8003e40 <HAL_RCC_OscConfig+0x40c>)
 8003d84:	2200      	movs	r2, #0
 8003d86:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8003d88:	f7fe fada 	bl	8002340 <HAL_GetTick>
 8003d8c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d8e:	4b2b      	ldr	r3, [pc, #172]	; (8003e3c <HAL_RCC_OscConfig+0x408>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003d96:	d006      	beq.n	8003da6 <HAL_RCC_OscConfig+0x372>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d98:	f7fe fad2 	bl	8002340 <HAL_GetTick>
 8003d9c:	1b40      	subs	r0, r0, r5
 8003d9e:	2802      	cmp	r0, #2
 8003da0:	d9f5      	bls.n	8003d8e <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 8003da2:	2003      	movs	r0, #3
 8003da4:	e041      	b.n	8003e2a <HAL_RCC_OscConfig+0x3f6>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003da6:	6a23      	ldr	r3, [r4, #32]
 8003da8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dac:	d01a      	beq.n	8003de4 <HAL_RCC_OscConfig+0x3b0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003dae:	4923      	ldr	r1, [pc, #140]	; (8003e3c <HAL_RCC_OscConfig+0x408>)
 8003db0:	684b      	ldr	r3, [r1, #4]
 8003db2:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8003db6:	6a22      	ldr	r2, [r4, #32]
 8003db8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003dba:	4302      	orrs	r2, r0
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8003dc0:	4b1f      	ldr	r3, [pc, #124]	; (8003e40 <HAL_RCC_OscConfig+0x40c>)
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8003dc6:	f7fe fabb 	bl	8002340 <HAL_GetTick>
 8003dca:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003dcc:	4b1b      	ldr	r3, [pc, #108]	; (8003e3c <HAL_RCC_OscConfig+0x408>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003dd4:	d10e      	bne.n	8003df4 <HAL_RCC_OscConfig+0x3c0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dd6:	f7fe fab3 	bl	8002340 <HAL_GetTick>
 8003dda:	1b00      	subs	r0, r0, r4
 8003ddc:	2802      	cmp	r0, #2
 8003dde:	d9f5      	bls.n	8003dcc <HAL_RCC_OscConfig+0x398>
            return HAL_TIMEOUT;
 8003de0:	2003      	movs	r0, #3
 8003de2:	e022      	b.n	8003e2a <HAL_RCC_OscConfig+0x3f6>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003de4:	4a15      	ldr	r2, [pc, #84]	; (8003e3c <HAL_RCC_OscConfig+0x408>)
 8003de6:	6853      	ldr	r3, [r2, #4]
 8003de8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003dec:	68a1      	ldr	r1, [r4, #8]
 8003dee:	430b      	orrs	r3, r1
 8003df0:	6053      	str	r3, [r2, #4]
 8003df2:	e7dc      	b.n	8003dae <HAL_RCC_OscConfig+0x37a>
  return HAL_OK;
 8003df4:	2000      	movs	r0, #0
 8003df6:	e018      	b.n	8003e2a <HAL_RCC_OscConfig+0x3f6>
 8003df8:	2000      	movs	r0, #0
 8003dfa:	e016      	b.n	8003e2a <HAL_RCC_OscConfig+0x3f6>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d016      	beq.n	8003e2e <HAL_RCC_OscConfig+0x3fa>
        pll_config = RCC->CFGR;
 8003e00:	4b0e      	ldr	r3, [pc, #56]	; (8003e3c <HAL_RCC_OscConfig+0x408>)
 8003e02:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e04:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8003e08:	6a22      	ldr	r2, [r4, #32]
 8003e0a:	4291      	cmp	r1, r2
 8003e0c:	d111      	bne.n	8003e32 <HAL_RCC_OscConfig+0x3fe>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003e0e:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003e12:	6a62      	ldr	r2, [r4, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d10e      	bne.n	8003e36 <HAL_RCC_OscConfig+0x402>
  return HAL_OK;
 8003e18:	2000      	movs	r0, #0
 8003e1a:	e006      	b.n	8003e2a <HAL_RCC_OscConfig+0x3f6>
    return HAL_ERROR;
 8003e1c:	2001      	movs	r0, #1
}
 8003e1e:	4770      	bx	lr
        return HAL_ERROR;
 8003e20:	2001      	movs	r0, #1
 8003e22:	e002      	b.n	8003e2a <HAL_RCC_OscConfig+0x3f6>
        return HAL_ERROR;
 8003e24:	2001      	movs	r0, #1
 8003e26:	e000      	b.n	8003e2a <HAL_RCC_OscConfig+0x3f6>
  return HAL_OK;
 8003e28:	2000      	movs	r0, #0
}
 8003e2a:	b002      	add	sp, #8
 8003e2c:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8003e2e:	2001      	movs	r0, #1
 8003e30:	e7fb      	b.n	8003e2a <HAL_RCC_OscConfig+0x3f6>
          return HAL_ERROR;
 8003e32:	2001      	movs	r0, #1
 8003e34:	e7f9      	b.n	8003e2a <HAL_RCC_OscConfig+0x3f6>
 8003e36:	2001      	movs	r0, #1
 8003e38:	e7f7      	b.n	8003e2a <HAL_RCC_OscConfig+0x3f6>
 8003e3a:	bf00      	nop
 8003e3c:	40021000 	.word	0x40021000
 8003e40:	42420000 	.word	0x42420000

08003e44 <HAL_RCC_GetSysClockFreq>:
{
 8003e44:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003e46:	4b17      	ldr	r3, [pc, #92]	; (8003ea4 <HAL_RCC_GetSysClockFreq+0x60>)
 8003e48:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003e4a:	f10d 0c18 	add.w	ip, sp, #24
 8003e4e:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003e52:	f240 2301 	movw	r3, #513	; 0x201
 8003e56:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8003e5a:	4b13      	ldr	r3, [pc, #76]	; (8003ea8 <HAL_RCC_GetSysClockFreq+0x64>)
 8003e5c:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8003e5e:	f003 020c 	and.w	r2, r3, #12
 8003e62:	2a08      	cmp	r2, #8
 8003e64:	d002      	beq.n	8003e6c <HAL_RCC_GetSysClockFreq+0x28>
      sysclockfreq = HSE_VALUE;
 8003e66:	4811      	ldr	r0, [pc, #68]	; (8003eac <HAL_RCC_GetSysClockFreq+0x68>)
}
 8003e68:	b006      	add	sp, #24
 8003e6a:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003e6c:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8003e70:	3218      	adds	r2, #24
 8003e72:	446a      	add	r2, sp
 8003e74:	f812 0c10 	ldrb.w	r0, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003e78:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003e7c:	d00d      	beq.n	8003e9a <HAL_RCC_GetSysClockFreq+0x56>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003e7e:	4b0a      	ldr	r3, [pc, #40]	; (8003ea8 <HAL_RCC_GetSysClockFreq+0x64>)
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8003e86:	3318      	adds	r3, #24
 8003e88:	446b      	add	r3, sp
 8003e8a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003e8e:	4a07      	ldr	r2, [pc, #28]	; (8003eac <HAL_RCC_GetSysClockFreq+0x68>)
 8003e90:	fb02 f000 	mul.w	r0, r2, r0
 8003e94:	fbb0 f0f3 	udiv	r0, r0, r3
 8003e98:	e7e6      	b.n	8003e68 <HAL_RCC_GetSysClockFreq+0x24>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003e9a:	4b05      	ldr	r3, [pc, #20]	; (8003eb0 <HAL_RCC_GetSysClockFreq+0x6c>)
 8003e9c:	fb03 f000 	mul.w	r0, r3, r0
 8003ea0:	e7e2      	b.n	8003e68 <HAL_RCC_GetSysClockFreq+0x24>
 8003ea2:	bf00      	nop
 8003ea4:	0800b754 	.word	0x0800b754
 8003ea8:	40021000 	.word	0x40021000
 8003eac:	007a1200 	.word	0x007a1200
 8003eb0:	003d0900 	.word	0x003d0900

08003eb4 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8003eb4:	2800      	cmp	r0, #0
 8003eb6:	f000 80a0 	beq.w	8003ffa <HAL_RCC_ClockConfig+0x146>
{
 8003eba:	b570      	push	{r4, r5, r6, lr}
 8003ebc:	460d      	mov	r5, r1
 8003ebe:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ec0:	4b52      	ldr	r3, [pc, #328]	; (800400c <HAL_RCC_ClockConfig+0x158>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 0307 	and.w	r3, r3, #7
 8003ec8:	428b      	cmp	r3, r1
 8003eca:	d20b      	bcs.n	8003ee4 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ecc:	4a4f      	ldr	r2, [pc, #316]	; (800400c <HAL_RCC_ClockConfig+0x158>)
 8003ece:	6813      	ldr	r3, [r2, #0]
 8003ed0:	f023 0307 	bic.w	r3, r3, #7
 8003ed4:	430b      	orrs	r3, r1
 8003ed6:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ed8:	6813      	ldr	r3, [r2, #0]
 8003eda:	f003 0307 	and.w	r3, r3, #7
 8003ede:	428b      	cmp	r3, r1
 8003ee0:	f040 808d 	bne.w	8003ffe <HAL_RCC_ClockConfig+0x14a>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ee4:	6823      	ldr	r3, [r4, #0]
 8003ee6:	f013 0f02 	tst.w	r3, #2
 8003eea:	d017      	beq.n	8003f1c <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003eec:	f013 0f04 	tst.w	r3, #4
 8003ef0:	d004      	beq.n	8003efc <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ef2:	4a47      	ldr	r2, [pc, #284]	; (8004010 <HAL_RCC_ClockConfig+0x15c>)
 8003ef4:	6853      	ldr	r3, [r2, #4]
 8003ef6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003efa:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003efc:	6823      	ldr	r3, [r4, #0]
 8003efe:	f013 0f08 	tst.w	r3, #8
 8003f02:	d004      	beq.n	8003f0e <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f04:	4a42      	ldr	r2, [pc, #264]	; (8004010 <HAL_RCC_ClockConfig+0x15c>)
 8003f06:	6853      	ldr	r3, [r2, #4]
 8003f08:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003f0c:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f0e:	4a40      	ldr	r2, [pc, #256]	; (8004010 <HAL_RCC_ClockConfig+0x15c>)
 8003f10:	6853      	ldr	r3, [r2, #4]
 8003f12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f16:	68a1      	ldr	r1, [r4, #8]
 8003f18:	430b      	orrs	r3, r1
 8003f1a:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f1c:	6823      	ldr	r3, [r4, #0]
 8003f1e:	f013 0f01 	tst.w	r3, #1
 8003f22:	d031      	beq.n	8003f88 <HAL_RCC_ClockConfig+0xd4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f24:	6863      	ldr	r3, [r4, #4]
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d020      	beq.n	8003f6c <HAL_RCC_ClockConfig+0xb8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f2a:	2b02      	cmp	r3, #2
 8003f2c:	d025      	beq.n	8003f7a <HAL_RCC_ClockConfig+0xc6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f2e:	4a38      	ldr	r2, [pc, #224]	; (8004010 <HAL_RCC_ClockConfig+0x15c>)
 8003f30:	6812      	ldr	r2, [r2, #0]
 8003f32:	f012 0f02 	tst.w	r2, #2
 8003f36:	d064      	beq.n	8004002 <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f38:	4935      	ldr	r1, [pc, #212]	; (8004010 <HAL_RCC_ClockConfig+0x15c>)
 8003f3a:	684a      	ldr	r2, [r1, #4]
 8003f3c:	f022 0203 	bic.w	r2, r2, #3
 8003f40:	4313      	orrs	r3, r2
 8003f42:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8003f44:	f7fe f9fc 	bl	8002340 <HAL_GetTick>
 8003f48:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f4a:	4b31      	ldr	r3, [pc, #196]	; (8004010 <HAL_RCC_ClockConfig+0x15c>)
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	f003 030c 	and.w	r3, r3, #12
 8003f52:	6862      	ldr	r2, [r4, #4]
 8003f54:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003f58:	d016      	beq.n	8003f88 <HAL_RCC_ClockConfig+0xd4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f5a:	f7fe f9f1 	bl	8002340 <HAL_GetTick>
 8003f5e:	1b80      	subs	r0, r0, r6
 8003f60:	f241 3388 	movw	r3, #5000	; 0x1388
 8003f64:	4298      	cmp	r0, r3
 8003f66:	d9f0      	bls.n	8003f4a <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 8003f68:	2003      	movs	r0, #3
 8003f6a:	e045      	b.n	8003ff8 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f6c:	4a28      	ldr	r2, [pc, #160]	; (8004010 <HAL_RCC_ClockConfig+0x15c>)
 8003f6e:	6812      	ldr	r2, [r2, #0]
 8003f70:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8003f74:	d1e0      	bne.n	8003f38 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8003f76:	2001      	movs	r0, #1
 8003f78:	e03e      	b.n	8003ff8 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f7a:	4a25      	ldr	r2, [pc, #148]	; (8004010 <HAL_RCC_ClockConfig+0x15c>)
 8003f7c:	6812      	ldr	r2, [r2, #0]
 8003f7e:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8003f82:	d1d9      	bne.n	8003f38 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8003f84:	2001      	movs	r0, #1
 8003f86:	e037      	b.n	8003ff8 <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f88:	4b20      	ldr	r3, [pc, #128]	; (800400c <HAL_RCC_ClockConfig+0x158>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 0307 	and.w	r3, r3, #7
 8003f90:	42ab      	cmp	r3, r5
 8003f92:	d90a      	bls.n	8003faa <HAL_RCC_ClockConfig+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f94:	4a1d      	ldr	r2, [pc, #116]	; (800400c <HAL_RCC_ClockConfig+0x158>)
 8003f96:	6813      	ldr	r3, [r2, #0]
 8003f98:	f023 0307 	bic.w	r3, r3, #7
 8003f9c:	432b      	orrs	r3, r5
 8003f9e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fa0:	6813      	ldr	r3, [r2, #0]
 8003fa2:	f003 0307 	and.w	r3, r3, #7
 8003fa6:	42ab      	cmp	r3, r5
 8003fa8:	d12d      	bne.n	8004006 <HAL_RCC_ClockConfig+0x152>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003faa:	6823      	ldr	r3, [r4, #0]
 8003fac:	f013 0f04 	tst.w	r3, #4
 8003fb0:	d006      	beq.n	8003fc0 <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fb2:	4a17      	ldr	r2, [pc, #92]	; (8004010 <HAL_RCC_ClockConfig+0x15c>)
 8003fb4:	6853      	ldr	r3, [r2, #4]
 8003fb6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003fba:	68e1      	ldr	r1, [r4, #12]
 8003fbc:	430b      	orrs	r3, r1
 8003fbe:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fc0:	6823      	ldr	r3, [r4, #0]
 8003fc2:	f013 0f08 	tst.w	r3, #8
 8003fc6:	d007      	beq.n	8003fd8 <HAL_RCC_ClockConfig+0x124>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003fc8:	4a11      	ldr	r2, [pc, #68]	; (8004010 <HAL_RCC_ClockConfig+0x15c>)
 8003fca:	6853      	ldr	r3, [r2, #4]
 8003fcc:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8003fd0:	6921      	ldr	r1, [r4, #16]
 8003fd2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003fd6:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003fd8:	f7ff ff34 	bl	8003e44 <HAL_RCC_GetSysClockFreq>
 8003fdc:	4b0c      	ldr	r3, [pc, #48]	; (8004010 <HAL_RCC_ClockConfig+0x15c>)
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003fe4:	4a0b      	ldr	r2, [pc, #44]	; (8004014 <HAL_RCC_ClockConfig+0x160>)
 8003fe6:	5cd3      	ldrb	r3, [r2, r3]
 8003fe8:	40d8      	lsrs	r0, r3
 8003fea:	4b0b      	ldr	r3, [pc, #44]	; (8004018 <HAL_RCC_ClockConfig+0x164>)
 8003fec:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8003fee:	4b0b      	ldr	r3, [pc, #44]	; (800401c <HAL_RCC_ClockConfig+0x168>)
 8003ff0:	6818      	ldr	r0, [r3, #0]
 8003ff2:	f7fe f961 	bl	80022b8 <HAL_InitTick>
  return HAL_OK;
 8003ff6:	2000      	movs	r0, #0
}
 8003ff8:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8003ffa:	2001      	movs	r0, #1
}
 8003ffc:	4770      	bx	lr
    return HAL_ERROR;
 8003ffe:	2001      	movs	r0, #1
 8004000:	e7fa      	b.n	8003ff8 <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 8004002:	2001      	movs	r0, #1
 8004004:	e7f8      	b.n	8003ff8 <HAL_RCC_ClockConfig+0x144>
    return HAL_ERROR;
 8004006:	2001      	movs	r0, #1
 8004008:	e7f6      	b.n	8003ff8 <HAL_RCC_ClockConfig+0x144>
 800400a:	bf00      	nop
 800400c:	40022000 	.word	0x40022000
 8004010:	40021000 	.word	0x40021000
 8004014:	0800b730 	.word	0x0800b730
 8004018:	2000000c 	.word	0x2000000c
 800401c:	20000014 	.word	0x20000014

08004020 <HAL_RCC_GetHCLKFreq>:
}
 8004020:	4b01      	ldr	r3, [pc, #4]	; (8004028 <HAL_RCC_GetHCLKFreq+0x8>)
 8004022:	6818      	ldr	r0, [r3, #0]
 8004024:	4770      	bx	lr
 8004026:	bf00      	nop
 8004028:	2000000c 	.word	0x2000000c

0800402c <HAL_RCC_GetPCLK1Freq>:
{
 800402c:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800402e:	f7ff fff7 	bl	8004020 <HAL_RCC_GetHCLKFreq>
 8004032:	4b04      	ldr	r3, [pc, #16]	; (8004044 <HAL_RCC_GetPCLK1Freq+0x18>)
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800403a:	4a03      	ldr	r2, [pc, #12]	; (8004048 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800403c:	5cd3      	ldrb	r3, [r2, r3]
}
 800403e:	40d8      	lsrs	r0, r3
 8004040:	bd08      	pop	{r3, pc}
 8004042:	bf00      	nop
 8004044:	40021000 	.word	0x40021000
 8004048:	0800b740 	.word	0x0800b740

0800404c <HAL_RCC_GetPCLK2Freq>:
{
 800404c:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800404e:	f7ff ffe7 	bl	8004020 <HAL_RCC_GetHCLKFreq>
 8004052:	4b04      	ldr	r3, [pc, #16]	; (8004064 <HAL_RCC_GetPCLK2Freq+0x18>)
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800405a:	4a03      	ldr	r2, [pc, #12]	; (8004068 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800405c:	5cd3      	ldrb	r3, [r2, r3]
}
 800405e:	40d8      	lsrs	r0, r3
 8004060:	bd08      	pop	{r3, pc}
 8004062:	bf00      	nop
 8004064:	40021000 	.word	0x40021000
 8004068:	0800b740 	.word	0x0800b740

0800406c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800406c:	b570      	push	{r4, r5, r6, lr}
 800406e:	b082      	sub	sp, #8
 8004070:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004072:	6803      	ldr	r3, [r0, #0]
 8004074:	f013 0f01 	tst.w	r3, #1
 8004078:	d036      	beq.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800407a:	4b3f      	ldr	r3, [pc, #252]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 800407c:	69db      	ldr	r3, [r3, #28]
 800407e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8004082:	d149      	bne.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004084:	4b3c      	ldr	r3, [pc, #240]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8004086:	69da      	ldr	r2, [r3, #28]
 8004088:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800408c:	61da      	str	r2, [r3, #28]
 800408e:	69db      	ldr	r3, [r3, #28]
 8004090:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004094:	9301      	str	r3, [sp, #4]
 8004096:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004098:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800409a:	4b38      	ldr	r3, [pc, #224]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x110>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f413 7f80 	tst.w	r3, #256	; 0x100
 80040a2:	d03b      	beq.n	800411c <HAL_RCCEx_PeriphCLKConfig+0xb0>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80040a4:	4b34      	ldr	r3, [pc, #208]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80040a6:	6a1b      	ldr	r3, [r3, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80040a8:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80040ac:	d013      	beq.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80040ae:	6862      	ldr	r2, [r4, #4]
 80040b0:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d00e      	beq.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x6a>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80040b8:	4a2f      	ldr	r2, [pc, #188]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80040ba:	6a13      	ldr	r3, [r2, #32]
 80040bc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80040c0:	492f      	ldr	r1, [pc, #188]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 80040c2:	2601      	movs	r6, #1
 80040c4:	f8c1 6440 	str.w	r6, [r1, #1088]	; 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 80040c8:	2600      	movs	r6, #0
 80040ca:	f8c1 6440 	str.w	r6, [r1, #1088]	; 0x440
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80040ce:	6210      	str	r0, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80040d0:	f013 0f01 	tst.w	r3, #1
 80040d4:	d136      	bne.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0xd8>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040d6:	4a28      	ldr	r2, [pc, #160]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80040d8:	6a13      	ldr	r3, [r2, #32]
 80040da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040de:	6861      	ldr	r1, [r4, #4]
 80040e0:	430b      	orrs	r3, r1
 80040e2:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80040e4:	2d00      	cmp	r5, #0
 80040e6:	d13e      	bne.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0xfa>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80040e8:	6823      	ldr	r3, [r4, #0]
 80040ea:	f013 0f02 	tst.w	r3, #2
 80040ee:	d006      	beq.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80040f0:	4a21      	ldr	r2, [pc, #132]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80040f2:	6853      	ldr	r3, [r2, #4]
 80040f4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80040f8:	68a1      	ldr	r1, [r4, #8]
 80040fa:	430b      	orrs	r3, r1
 80040fc:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80040fe:	6823      	ldr	r3, [r4, #0]
 8004100:	f013 0f10 	tst.w	r3, #16
 8004104:	d034      	beq.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004106:	4a1c      	ldr	r2, [pc, #112]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8004108:	6853      	ldr	r3, [r2, #4]
 800410a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800410e:	68e1      	ldr	r1, [r4, #12]
 8004110:	430b      	orrs	r3, r1
 8004112:	6053      	str	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004114:	2000      	movs	r0, #0
 8004116:	e02c      	b.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x106>
    FlagStatus pwrclkchanged = RESET;
 8004118:	2500      	movs	r5, #0
 800411a:	e7be      	b.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x2e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800411c:	4a17      	ldr	r2, [pc, #92]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x110>)
 800411e:	6813      	ldr	r3, [r2, #0]
 8004120:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004124:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8004126:	f7fe f90b 	bl	8002340 <HAL_GetTick>
 800412a:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800412c:	4b13      	ldr	r3, [pc, #76]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x110>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004134:	d1b6      	bne.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x38>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004136:	f7fe f903 	bl	8002340 <HAL_GetTick>
 800413a:	1b80      	subs	r0, r0, r6
 800413c:	2864      	cmp	r0, #100	; 0x64
 800413e:	d9f5      	bls.n	800412c <HAL_RCCEx_PeriphCLKConfig+0xc0>
          return HAL_TIMEOUT;
 8004140:	2003      	movs	r0, #3
 8004142:	e016      	b.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x106>
        tickstart = HAL_GetTick();
 8004144:	f7fe f8fc 	bl	8002340 <HAL_GetTick>
 8004148:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800414a:	4b0b      	ldr	r3, [pc, #44]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 800414c:	6a1b      	ldr	r3, [r3, #32]
 800414e:	f013 0f02 	tst.w	r3, #2
 8004152:	d1c0      	bne.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x6a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004154:	f7fe f8f4 	bl	8002340 <HAL_GetTick>
 8004158:	1b80      	subs	r0, r0, r6
 800415a:	f241 3388 	movw	r3, #5000	; 0x1388
 800415e:	4298      	cmp	r0, r3
 8004160:	d9f3      	bls.n	800414a <HAL_RCCEx_PeriphCLKConfig+0xde>
            return HAL_TIMEOUT;
 8004162:	2003      	movs	r0, #3
 8004164:	e005      	b.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x106>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004166:	69d3      	ldr	r3, [r2, #28]
 8004168:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800416c:	61d3      	str	r3, [r2, #28]
 800416e:	e7bb      	b.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  return HAL_OK;
 8004170:	2000      	movs	r0, #0
}
 8004172:	b002      	add	sp, #8
 8004174:	bd70      	pop	{r4, r5, r6, pc}
 8004176:	bf00      	nop
 8004178:	40021000 	.word	0x40021000
 800417c:	40007000 	.word	0x40007000
 8004180:	42420000 	.word	0x42420000

08004184 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004184:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004186:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004188:	6a04      	ldr	r4, [r0, #32]
 800418a:	f024 0401 	bic.w	r4, r4, #1
 800418e:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004190:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004192:	f024 0cf0 	bic.w	ip, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004196:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800419a:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 800419e:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80041a0:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80041a2:	6203      	str	r3, [r0, #32]
}
 80041a4:	bc10      	pop	{r4}
 80041a6:	4770      	bx	lr

080041a8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041a8:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041aa:	6a04      	ldr	r4, [r0, #32]
 80041ac:	f024 0410 	bic.w	r4, r4, #16
 80041b0:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041b2:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 80041b4:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80041b6:	f424 4c70 	bic.w	ip, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80041ba:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041be:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80041c2:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80041c6:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80041c8:	6203      	str	r3, [r0, #32]
}
 80041ca:	bc10      	pop	{r4}
 80041cc:	4770      	bx	lr

080041ce <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80041ce:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80041d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80041d4:	430b      	orrs	r3, r1
 80041d6:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041da:	6083      	str	r3, [r0, #8]
}
 80041dc:	4770      	bx	lr
	...

080041e0 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 80041e0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d127      	bne.n	800423a <HAL_TIM_Base_Start_IT+0x5a>
  htim->State = HAL_TIM_STATE_BUSY;
 80041ea:	2302      	movs	r3, #2
 80041ec:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80041f0:	6802      	ldr	r2, [r0, #0]
 80041f2:	68d3      	ldr	r3, [r2, #12]
 80041f4:	f043 0301 	orr.w	r3, r3, #1
 80041f8:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041fa:	6803      	ldr	r3, [r0, #0]
 80041fc:	4a11      	ldr	r2, [pc, #68]	; (8004244 <HAL_TIM_Base_Start_IT+0x64>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d010      	beq.n	8004224 <HAL_TIM_Base_Start_IT+0x44>
 8004202:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004206:	d00d      	beq.n	8004224 <HAL_TIM_Base_Start_IT+0x44>
 8004208:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800420c:	4293      	cmp	r3, r2
 800420e:	d009      	beq.n	8004224 <HAL_TIM_Base_Start_IT+0x44>
 8004210:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004214:	4293      	cmp	r3, r2
 8004216:	d005      	beq.n	8004224 <HAL_TIM_Base_Start_IT+0x44>
    __HAL_TIM_ENABLE(htim);
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	f042 0201 	orr.w	r2, r2, #1
 800421e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004220:	2000      	movs	r0, #0
 8004222:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004224:	689a      	ldr	r2, [r3, #8]
 8004226:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800422a:	2a06      	cmp	r2, #6
 800422c:	d007      	beq.n	800423e <HAL_TIM_Base_Start_IT+0x5e>
      __HAL_TIM_ENABLE(htim);
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	f042 0201 	orr.w	r2, r2, #1
 8004234:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004236:	2000      	movs	r0, #0
 8004238:	4770      	bx	lr
    return HAL_ERROR;
 800423a:	2001      	movs	r0, #1
 800423c:	4770      	bx	lr
  return HAL_OK;
 800423e:	2000      	movs	r0, #0
}
 8004240:	4770      	bx	lr
 8004242:	bf00      	nop
 8004244:	40012c00 	.word	0x40012c00

08004248 <HAL_TIM_OC_DelayElapsedCallback>:
}
 8004248:	4770      	bx	lr

0800424a <HAL_TIM_IC_CaptureCallback>:
}
 800424a:	4770      	bx	lr

0800424c <HAL_TIM_PWM_PulseFinishedCallback>:
}
 800424c:	4770      	bx	lr

0800424e <HAL_TIM_TriggerCallback>:
}
 800424e:	4770      	bx	lr

08004250 <HAL_TIM_IRQHandler>:
{
 8004250:	b510      	push	{r4, lr}
 8004252:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004254:	6803      	ldr	r3, [r0, #0]
 8004256:	691a      	ldr	r2, [r3, #16]
 8004258:	f012 0f02 	tst.w	r2, #2
 800425c:	d011      	beq.n	8004282 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800425e:	68da      	ldr	r2, [r3, #12]
 8004260:	f012 0f02 	tst.w	r2, #2
 8004264:	d00d      	beq.n	8004282 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004266:	f06f 0202 	mvn.w	r2, #2
 800426a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800426c:	2301      	movs	r3, #1
 800426e:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004270:	6803      	ldr	r3, [r0, #0]
 8004272:	699b      	ldr	r3, [r3, #24]
 8004274:	f013 0f03 	tst.w	r3, #3
 8004278:	d070      	beq.n	800435c <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 800427a:	f7ff ffe6 	bl	800424a <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800427e:	2300      	movs	r3, #0
 8004280:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004282:	6823      	ldr	r3, [r4, #0]
 8004284:	691a      	ldr	r2, [r3, #16]
 8004286:	f012 0f04 	tst.w	r2, #4
 800428a:	d012      	beq.n	80042b2 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800428c:	68da      	ldr	r2, [r3, #12]
 800428e:	f012 0f04 	tst.w	r2, #4
 8004292:	d00e      	beq.n	80042b2 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004294:	f06f 0204 	mvn.w	r2, #4
 8004298:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800429a:	2302      	movs	r3, #2
 800429c:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800429e:	6823      	ldr	r3, [r4, #0]
 80042a0:	699b      	ldr	r3, [r3, #24]
 80042a2:	f413 7f40 	tst.w	r3, #768	; 0x300
 80042a6:	d05f      	beq.n	8004368 <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 80042a8:	4620      	mov	r0, r4
 80042aa:	f7ff ffce 	bl	800424a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042ae:	2300      	movs	r3, #0
 80042b0:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80042b2:	6823      	ldr	r3, [r4, #0]
 80042b4:	691a      	ldr	r2, [r3, #16]
 80042b6:	f012 0f08 	tst.w	r2, #8
 80042ba:	d012      	beq.n	80042e2 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80042bc:	68da      	ldr	r2, [r3, #12]
 80042be:	f012 0f08 	tst.w	r2, #8
 80042c2:	d00e      	beq.n	80042e2 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80042c4:	f06f 0208 	mvn.w	r2, #8
 80042c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80042ca:	2304      	movs	r3, #4
 80042cc:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80042ce:	6823      	ldr	r3, [r4, #0]
 80042d0:	69db      	ldr	r3, [r3, #28]
 80042d2:	f013 0f03 	tst.w	r3, #3
 80042d6:	d04e      	beq.n	8004376 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 80042d8:	4620      	mov	r0, r4
 80042da:	f7ff ffb6 	bl	800424a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042de:	2300      	movs	r3, #0
 80042e0:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80042e2:	6823      	ldr	r3, [r4, #0]
 80042e4:	691a      	ldr	r2, [r3, #16]
 80042e6:	f012 0f10 	tst.w	r2, #16
 80042ea:	d012      	beq.n	8004312 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80042ec:	68da      	ldr	r2, [r3, #12]
 80042ee:	f012 0f10 	tst.w	r2, #16
 80042f2:	d00e      	beq.n	8004312 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80042f4:	f06f 0210 	mvn.w	r2, #16
 80042f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80042fa:	2308      	movs	r3, #8
 80042fc:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80042fe:	6823      	ldr	r3, [r4, #0]
 8004300:	69db      	ldr	r3, [r3, #28]
 8004302:	f413 7f40 	tst.w	r3, #768	; 0x300
 8004306:	d03d      	beq.n	8004384 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 8004308:	4620      	mov	r0, r4
 800430a:	f7ff ff9e 	bl	800424a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800430e:	2300      	movs	r3, #0
 8004310:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004312:	6823      	ldr	r3, [r4, #0]
 8004314:	691a      	ldr	r2, [r3, #16]
 8004316:	f012 0f01 	tst.w	r2, #1
 800431a:	d003      	beq.n	8004324 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800431c:	68da      	ldr	r2, [r3, #12]
 800431e:	f012 0f01 	tst.w	r2, #1
 8004322:	d136      	bne.n	8004392 <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004324:	6823      	ldr	r3, [r4, #0]
 8004326:	691a      	ldr	r2, [r3, #16]
 8004328:	f012 0f80 	tst.w	r2, #128	; 0x80
 800432c:	d003      	beq.n	8004336 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800432e:	68da      	ldr	r2, [r3, #12]
 8004330:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004334:	d134      	bne.n	80043a0 <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004336:	6823      	ldr	r3, [r4, #0]
 8004338:	691a      	ldr	r2, [r3, #16]
 800433a:	f012 0f40 	tst.w	r2, #64	; 0x40
 800433e:	d003      	beq.n	8004348 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004340:	68da      	ldr	r2, [r3, #12]
 8004342:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004346:	d132      	bne.n	80043ae <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004348:	6823      	ldr	r3, [r4, #0]
 800434a:	691a      	ldr	r2, [r3, #16]
 800434c:	f012 0f20 	tst.w	r2, #32
 8004350:	d003      	beq.n	800435a <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004352:	68da      	ldr	r2, [r3, #12]
 8004354:	f012 0f20 	tst.w	r2, #32
 8004358:	d130      	bne.n	80043bc <HAL_TIM_IRQHandler+0x16c>
}
 800435a:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800435c:	f7ff ff74 	bl	8004248 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004360:	4620      	mov	r0, r4
 8004362:	f7ff ff73 	bl	800424c <HAL_TIM_PWM_PulseFinishedCallback>
 8004366:	e78a      	b.n	800427e <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004368:	4620      	mov	r0, r4
 800436a:	f7ff ff6d 	bl	8004248 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800436e:	4620      	mov	r0, r4
 8004370:	f7ff ff6c 	bl	800424c <HAL_TIM_PWM_PulseFinishedCallback>
 8004374:	e79b      	b.n	80042ae <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004376:	4620      	mov	r0, r4
 8004378:	f7ff ff66 	bl	8004248 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800437c:	4620      	mov	r0, r4
 800437e:	f7ff ff65 	bl	800424c <HAL_TIM_PWM_PulseFinishedCallback>
 8004382:	e7ac      	b.n	80042de <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004384:	4620      	mov	r0, r4
 8004386:	f7ff ff5f 	bl	8004248 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800438a:	4620      	mov	r0, r4
 800438c:	f7ff ff5e 	bl	800424c <HAL_TIM_PWM_PulseFinishedCallback>
 8004390:	e7bd      	b.n	800430e <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004392:	f06f 0201 	mvn.w	r2, #1
 8004396:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004398:	4620      	mov	r0, r4
 800439a:	f7fc fe2b 	bl	8000ff4 <HAL_TIM_PeriodElapsedCallback>
 800439e:	e7c1      	b.n	8004324 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80043a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80043a4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80043a6:	4620      	mov	r0, r4
 80043a8:	f000 f927 	bl	80045fa <HAL_TIMEx_BreakCallback>
 80043ac:	e7c3      	b.n	8004336 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80043ae:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80043b2:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80043b4:	4620      	mov	r0, r4
 80043b6:	f7ff ff4a 	bl	800424e <HAL_TIM_TriggerCallback>
 80043ba:	e7c5      	b.n	8004348 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80043bc:	f06f 0220 	mvn.w	r2, #32
 80043c0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80043c2:	4620      	mov	r0, r4
 80043c4:	f000 f918 	bl	80045f8 <HAL_TIMEx_CommutCallback>
}
 80043c8:	e7c7      	b.n	800435a <HAL_TIM_IRQHandler+0x10a>
	...

080043cc <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 80043cc:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043ce:	4a1b      	ldr	r2, [pc, #108]	; (800443c <TIM_Base_SetConfig+0x70>)
 80043d0:	4290      	cmp	r0, r2
 80043d2:	d00a      	beq.n	80043ea <TIM_Base_SetConfig+0x1e>
 80043d4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80043d8:	d007      	beq.n	80043ea <TIM_Base_SetConfig+0x1e>
 80043da:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80043de:	4290      	cmp	r0, r2
 80043e0:	d003      	beq.n	80043ea <TIM_Base_SetConfig+0x1e>
 80043e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80043e6:	4290      	cmp	r0, r2
 80043e8:	d103      	bne.n	80043f2 <TIM_Base_SetConfig+0x26>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80043ee:	684a      	ldr	r2, [r1, #4]
 80043f0:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043f2:	4a12      	ldr	r2, [pc, #72]	; (800443c <TIM_Base_SetConfig+0x70>)
 80043f4:	4290      	cmp	r0, r2
 80043f6:	d00a      	beq.n	800440e <TIM_Base_SetConfig+0x42>
 80043f8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80043fc:	d007      	beq.n	800440e <TIM_Base_SetConfig+0x42>
 80043fe:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8004402:	4290      	cmp	r0, r2
 8004404:	d003      	beq.n	800440e <TIM_Base_SetConfig+0x42>
 8004406:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800440a:	4290      	cmp	r0, r2
 800440c:	d103      	bne.n	8004416 <TIM_Base_SetConfig+0x4a>
    tmpcr1 &= ~TIM_CR1_CKD;
 800440e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004412:	68ca      	ldr	r2, [r1, #12]
 8004414:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004416:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800441a:	694a      	ldr	r2, [r1, #20]
 800441c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800441e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004420:	688b      	ldr	r3, [r1, #8]
 8004422:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004424:	680b      	ldr	r3, [r1, #0]
 8004426:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004428:	4b04      	ldr	r3, [pc, #16]	; (800443c <TIM_Base_SetConfig+0x70>)
 800442a:	4298      	cmp	r0, r3
 800442c:	d002      	beq.n	8004434 <TIM_Base_SetConfig+0x68>
  TIMx->EGR = TIM_EGR_UG;
 800442e:	2301      	movs	r3, #1
 8004430:	6143      	str	r3, [r0, #20]
}
 8004432:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8004434:	690b      	ldr	r3, [r1, #16]
 8004436:	6303      	str	r3, [r0, #48]	; 0x30
 8004438:	e7f9      	b.n	800442e <TIM_Base_SetConfig+0x62>
 800443a:	bf00      	nop
 800443c:	40012c00 	.word	0x40012c00

08004440 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8004440:	b340      	cbz	r0, 8004494 <HAL_TIM_Base_Init+0x54>
{
 8004442:	b510      	push	{r4, lr}
 8004444:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8004446:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800444a:	b1f3      	cbz	r3, 800448a <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 800444c:	2302      	movs	r3, #2
 800444e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004452:	4621      	mov	r1, r4
 8004454:	f851 0b04 	ldr.w	r0, [r1], #4
 8004458:	f7ff ffb8 	bl	80043cc <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800445c:	2301      	movs	r3, #1
 800445e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004462:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8004466:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800446a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800446e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004472:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004476:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800447a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800447e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8004482:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8004486:	2000      	movs	r0, #0
}
 8004488:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800448a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800448e:	f7fd fdd1 	bl	8002034 <HAL_TIM_Base_MspInit>
 8004492:	e7db      	b.n	800444c <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8004494:	2001      	movs	r0, #1
}
 8004496:	4770      	bx	lr

08004498 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004498:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800449a:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800449c:	f424 4c7f 	bic.w	ip, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80044a0:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 80044a4:	430a      	orrs	r2, r1
 80044a6:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044aa:	6082      	str	r2, [r0, #8]
}
 80044ac:	bc10      	pop	{r4}
 80044ae:	4770      	bx	lr

080044b0 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80044b0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d066      	beq.n	8004586 <HAL_TIM_ConfigClockSource+0xd6>
{
 80044b8:	b510      	push	{r4, lr}
 80044ba:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80044bc:	2301      	movs	r3, #1
 80044be:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80044c2:	2302      	movs	r3, #2
 80044c4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80044c8:	6802      	ldr	r2, [r0, #0]
 80044ca:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044cc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80044d0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 80044d4:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80044d6:	680b      	ldr	r3, [r1, #0]
 80044d8:	2b60      	cmp	r3, #96	; 0x60
 80044da:	d040      	beq.n	800455e <HAL_TIM_ConfigClockSource+0xae>
 80044dc:	d822      	bhi.n	8004524 <HAL_TIM_ConfigClockSource+0x74>
 80044de:	2b40      	cmp	r3, #64	; 0x40
 80044e0:	d047      	beq.n	8004572 <HAL_TIM_ConfigClockSource+0xc2>
 80044e2:	d90b      	bls.n	80044fc <HAL_TIM_ConfigClockSource+0x4c>
 80044e4:	2b50      	cmp	r3, #80	; 0x50
 80044e6:	d10e      	bne.n	8004506 <HAL_TIM_ConfigClockSource+0x56>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80044e8:	68ca      	ldr	r2, [r1, #12]
 80044ea:	6849      	ldr	r1, [r1, #4]
 80044ec:	6800      	ldr	r0, [r0, #0]
 80044ee:	f7ff fe49 	bl	8004184 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80044f2:	2150      	movs	r1, #80	; 0x50
 80044f4:	6820      	ldr	r0, [r4, #0]
 80044f6:	f7ff fe6a 	bl	80041ce <TIM_ITRx_SetConfig>
      break;
 80044fa:	e004      	b.n	8004506 <HAL_TIM_ConfigClockSource+0x56>
  switch (sClockSourceConfig->ClockSource)
 80044fc:	2b20      	cmp	r3, #32
 80044fe:	d00c      	beq.n	800451a <HAL_TIM_ConfigClockSource+0x6a>
 8004500:	d908      	bls.n	8004514 <HAL_TIM_ConfigClockSource+0x64>
 8004502:	2b30      	cmp	r3, #48	; 0x30
 8004504:	d009      	beq.n	800451a <HAL_TIM_ConfigClockSource+0x6a>
  htim->State = HAL_TIM_STATE_READY;
 8004506:	2301      	movs	r3, #1
 8004508:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800450c:	2000      	movs	r0, #0
 800450e:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8004512:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 8004514:	b10b      	cbz	r3, 800451a <HAL_TIM_ConfigClockSource+0x6a>
 8004516:	2b10      	cmp	r3, #16
 8004518:	d1f5      	bne.n	8004506 <HAL_TIM_ConfigClockSource+0x56>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800451a:	4619      	mov	r1, r3
 800451c:	6820      	ldr	r0, [r4, #0]
 800451e:	f7ff fe56 	bl	80041ce <TIM_ITRx_SetConfig>
        break;
 8004522:	e7f0      	b.n	8004506 <HAL_TIM_ConfigClockSource+0x56>
  switch (sClockSourceConfig->ClockSource)
 8004524:	2b70      	cmp	r3, #112	; 0x70
 8004526:	d00e      	beq.n	8004546 <HAL_TIM_ConfigClockSource+0x96>
 8004528:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800452c:	d1eb      	bne.n	8004506 <HAL_TIM_ConfigClockSource+0x56>
      TIM_ETR_SetConfig(htim->Instance,
 800452e:	68cb      	ldr	r3, [r1, #12]
 8004530:	684a      	ldr	r2, [r1, #4]
 8004532:	6889      	ldr	r1, [r1, #8]
 8004534:	6800      	ldr	r0, [r0, #0]
 8004536:	f7ff ffaf 	bl	8004498 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800453a:	6822      	ldr	r2, [r4, #0]
 800453c:	6893      	ldr	r3, [r2, #8]
 800453e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004542:	6093      	str	r3, [r2, #8]
      break;
 8004544:	e7df      	b.n	8004506 <HAL_TIM_ConfigClockSource+0x56>
      TIM_ETR_SetConfig(htim->Instance,
 8004546:	68cb      	ldr	r3, [r1, #12]
 8004548:	684a      	ldr	r2, [r1, #4]
 800454a:	6889      	ldr	r1, [r1, #8]
 800454c:	6800      	ldr	r0, [r0, #0]
 800454e:	f7ff ffa3 	bl	8004498 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004552:	6822      	ldr	r2, [r4, #0]
 8004554:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004556:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800455a:	6093      	str	r3, [r2, #8]
      break;
 800455c:	e7d3      	b.n	8004506 <HAL_TIM_ConfigClockSource+0x56>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800455e:	68ca      	ldr	r2, [r1, #12]
 8004560:	6849      	ldr	r1, [r1, #4]
 8004562:	6800      	ldr	r0, [r0, #0]
 8004564:	f7ff fe20 	bl	80041a8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004568:	2160      	movs	r1, #96	; 0x60
 800456a:	6820      	ldr	r0, [r4, #0]
 800456c:	f7ff fe2f 	bl	80041ce <TIM_ITRx_SetConfig>
      break;
 8004570:	e7c9      	b.n	8004506 <HAL_TIM_ConfigClockSource+0x56>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004572:	68ca      	ldr	r2, [r1, #12]
 8004574:	6849      	ldr	r1, [r1, #4]
 8004576:	6800      	ldr	r0, [r0, #0]
 8004578:	f7ff fe04 	bl	8004184 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800457c:	2140      	movs	r1, #64	; 0x40
 800457e:	6820      	ldr	r0, [r4, #0]
 8004580:	f7ff fe25 	bl	80041ce <TIM_ITRx_SetConfig>
      break;
 8004584:	e7bf      	b.n	8004506 <HAL_TIM_ConfigClockSource+0x56>
  __HAL_LOCK(htim);
 8004586:	2002      	movs	r0, #2
}
 8004588:	4770      	bx	lr
	...

0800458c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800458c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004590:	2b01      	cmp	r3, #1
 8004592:	d02c      	beq.n	80045ee <HAL_TIMEx_MasterConfigSynchronization+0x62>
{
 8004594:	b410      	push	{r4}
  __HAL_LOCK(htim);
 8004596:	2301      	movs	r3, #1
 8004598:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800459c:	2302      	movs	r3, #2
 800459e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80045a2:	6803      	ldr	r3, [r0, #0]
 80045a4:	685a      	ldr	r2, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045a6:	689c      	ldr	r4, [r3, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80045a8:	f022 0c70 	bic.w	ip, r2, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80045ac:	680a      	ldr	r2, [r1, #0]
 80045ae:	ea42 020c 	orr.w	r2, r2, ip

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80045b2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045b4:	6803      	ldr	r3, [r0, #0]
 80045b6:	4a0f      	ldr	r2, [pc, #60]	; (80045f4 <HAL_TIMEx_MasterConfigSynchronization+0x68>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d00a      	beq.n	80045d2 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 80045bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045c0:	d007      	beq.n	80045d2 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 80045c2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d003      	beq.n	80045d2 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 80045ca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d104      	bne.n	80045dc <HAL_TIMEx_MasterConfigSynchronization+0x50>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80045d2:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80045d6:	684a      	ldr	r2, [r1, #4]
 80045d8:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80045da:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80045dc:	2301      	movs	r3, #1
 80045de:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045e2:	2300      	movs	r3, #0
 80045e4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 80045e8:	4618      	mov	r0, r3
}
 80045ea:	bc10      	pop	{r4}
 80045ec:	4770      	bx	lr
  __HAL_LOCK(htim);
 80045ee:	2002      	movs	r0, #2
}
 80045f0:	4770      	bx	lr
 80045f2:	bf00      	nop
 80045f4:	40012c00 	.word	0x40012c00

080045f8 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80045f8:	4770      	bx	lr

080045fa <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80045fa:	4770      	bx	lr

080045fc <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045fc:	6802      	ldr	r2, [r0, #0]
 80045fe:	68d3      	ldr	r3, [r2, #12]
 8004600:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004604:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004606:	6802      	ldr	r2, [r0, #0]
 8004608:	6953      	ldr	r3, [r2, #20]
 800460a:	f023 0301 	bic.w	r3, r3, #1
 800460e:	6153      	str	r3, [r2, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004610:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8004612:	2b01      	cmp	r3, #1
 8004614:	d005      	beq.n	8004622 <UART_EndRxTransfer+0x26>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004616:	2320      	movs	r3, #32
 8004618:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800461c:	2300      	movs	r3, #0
 800461e:	6303      	str	r3, [r0, #48]	; 0x30
}
 8004620:	4770      	bx	lr
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004622:	6802      	ldr	r2, [r0, #0]
 8004624:	68d3      	ldr	r3, [r2, #12]
 8004626:	f023 0310 	bic.w	r3, r3, #16
 800462a:	60d3      	str	r3, [r2, #12]
 800462c:	e7f3      	b.n	8004616 <UART_EndRxTransfer+0x1a>

0800462e <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800462e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004632:	b2db      	uxtb	r3, r3
 8004634:	2b21      	cmp	r3, #33	; 0x21
 8004636:	d001      	beq.n	800463c <UART_Transmit_IT+0xe>
    }
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8004638:	2002      	movs	r0, #2
  }
}
 800463a:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800463c:	6883      	ldr	r3, [r0, #8]
 800463e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004642:	d017      	beq.n	8004674 <UART_Transmit_IT+0x46>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004644:	6a03      	ldr	r3, [r0, #32]
 8004646:	1c5a      	adds	r2, r3, #1
 8004648:	6202      	str	r2, [r0, #32]
 800464a:	781a      	ldrb	r2, [r3, #0]
 800464c:	6803      	ldr	r3, [r0, #0]
 800464e:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 8004650:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 8004652:	b29b      	uxth	r3, r3
 8004654:	3b01      	subs	r3, #1
 8004656:	b29b      	uxth	r3, r3
 8004658:	84c3      	strh	r3, [r0, #38]	; 0x26
 800465a:	b94b      	cbnz	r3, 8004670 <UART_Transmit_IT+0x42>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800465c:	6802      	ldr	r2, [r0, #0]
 800465e:	68d3      	ldr	r3, [r2, #12]
 8004660:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004664:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004666:	6802      	ldr	r2, [r0, #0]
 8004668:	68d3      	ldr	r3, [r2, #12]
 800466a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800466e:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 8004670:	2000      	movs	r0, #0
 8004672:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004674:	6903      	ldr	r3, [r0, #16]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d1e4      	bne.n	8004644 <UART_Transmit_IT+0x16>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800467a:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800467c:	881b      	ldrh	r3, [r3, #0]
 800467e:	6802      	ldr	r2, [r0, #0]
 8004680:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004684:	6053      	str	r3, [r2, #4]
      huart->pTxBuffPtr += 2U;
 8004686:	6a03      	ldr	r3, [r0, #32]
 8004688:	3302      	adds	r3, #2
 800468a:	6203      	str	r3, [r0, #32]
 800468c:	e7e0      	b.n	8004650 <UART_Transmit_IT+0x22>
	...

08004690 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004690:	b510      	push	{r4, lr}
 8004692:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004694:	6802      	ldr	r2, [r0, #0]
 8004696:	6913      	ldr	r3, [r2, #16]
 8004698:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800469c:	68c1      	ldr	r1, [r0, #12]
 800469e:	430b      	orrs	r3, r1
 80046a0:	6113      	str	r3, [r2, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80046a2:	6883      	ldr	r3, [r0, #8]
 80046a4:	6902      	ldr	r2, [r0, #16]
 80046a6:	4313      	orrs	r3, r2
 80046a8:	6942      	ldr	r2, [r0, #20]
 80046aa:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 80046ac:	6801      	ldr	r1, [r0, #0]
 80046ae:	68cb      	ldr	r3, [r1, #12]
 80046b0:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80046b4:	f023 030c 	bic.w	r3, r3, #12
 80046b8:	4313      	orrs	r3, r2
 80046ba:	60cb      	str	r3, [r1, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80046bc:	6802      	ldr	r2, [r0, #0]
 80046be:	6953      	ldr	r3, [r2, #20]
 80046c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046c4:	6981      	ldr	r1, [r0, #24]
 80046c6:	430b      	orrs	r3, r1
 80046c8:	6153      	str	r3, [r2, #20]


  if(huart->Instance == USART1)
 80046ca:	6802      	ldr	r2, [r0, #0]
 80046cc:	4b13      	ldr	r3, [pc, #76]	; (800471c <UART_SetConfig+0x8c>)
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d020      	beq.n	8004714 <UART_SetConfig+0x84>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80046d2:	f7ff fcab 	bl	800402c <HAL_RCC_GetPCLK1Freq>
 80046d6:	4602      	mov	r2, r0
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80046d8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80046dc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80046e0:	6863      	ldr	r3, [r4, #4]
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80046e8:	480d      	ldr	r0, [pc, #52]	; (8004720 <UART_SetConfig+0x90>)
 80046ea:	fba0 3102 	umull	r3, r1, r0, r2
 80046ee:	0949      	lsrs	r1, r1, #5
 80046f0:	2364      	movs	r3, #100	; 0x64
 80046f2:	fb03 2311 	mls	r3, r3, r1, r2
 80046f6:	011b      	lsls	r3, r3, #4
 80046f8:	3332      	adds	r3, #50	; 0x32
 80046fa:	fba0 2303 	umull	r2, r3, r0, r3
 80046fe:	095b      	lsrs	r3, r3, #5
 8004700:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004704:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8004708:	f003 030f 	and.w	r3, r3, #15
 800470c:	6821      	ldr	r1, [r4, #0]
 800470e:	4413      	add	r3, r2
 8004710:	608b      	str	r3, [r1, #8]
#endif /* USART_CR1_OVER8 */
}
 8004712:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 8004714:	f7ff fc9a 	bl	800404c <HAL_RCC_GetPCLK2Freq>
 8004718:	4602      	mov	r2, r0
 800471a:	e7dd      	b.n	80046d8 <UART_SetConfig+0x48>
 800471c:	40013800 	.word	0x40013800
 8004720:	51eb851f 	.word	0x51eb851f

08004724 <UART_WaitOnFlagUntilTimeout>:
{
 8004724:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004728:	4605      	mov	r5, r0
 800472a:	460f      	mov	r7, r1
 800472c:	4616      	mov	r6, r2
 800472e:	4699      	mov	r9, r3
 8004730:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004734:	682c      	ldr	r4, [r5, #0]
 8004736:	6824      	ldr	r4, [r4, #0]
 8004738:	ea37 0304 	bics.w	r3, r7, r4
 800473c:	bf0c      	ite	eq
 800473e:	f04f 0c01 	moveq.w	ip, #1
 8004742:	f04f 0c00 	movne.w	ip, #0
 8004746:	45b4      	cmp	ip, r6
 8004748:	d11f      	bne.n	800478a <UART_WaitOnFlagUntilTimeout+0x66>
    if (Timeout != HAL_MAX_DELAY)
 800474a:	f1b8 3fff 	cmp.w	r8, #4294967295
 800474e:	d0f1      	beq.n	8004734 <UART_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004750:	f1b8 0f00 	cmp.w	r8, #0
 8004754:	d005      	beq.n	8004762 <UART_WaitOnFlagUntilTimeout+0x3e>
 8004756:	f7fd fdf3 	bl	8002340 <HAL_GetTick>
 800475a:	eba0 0009 	sub.w	r0, r0, r9
 800475e:	4540      	cmp	r0, r8
 8004760:	d9e8      	bls.n	8004734 <UART_WaitOnFlagUntilTimeout+0x10>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004762:	682a      	ldr	r2, [r5, #0]
 8004764:	68d3      	ldr	r3, [r2, #12]
 8004766:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800476a:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800476c:	682a      	ldr	r2, [r5, #0]
 800476e:	6953      	ldr	r3, [r2, #20]
 8004770:	f023 0301 	bic.w	r3, r3, #1
 8004774:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8004776:	2320      	movs	r3, #32
 8004778:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800477c:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
        __HAL_UNLOCK(huart);
 8004780:	2300      	movs	r3, #0
 8004782:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
        return HAL_TIMEOUT;
 8004786:	2003      	movs	r0, #3
 8004788:	e000      	b.n	800478c <UART_WaitOnFlagUntilTimeout+0x68>
  return HAL_OK;
 800478a:	2000      	movs	r0, #0
}
 800478c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08004790 <HAL_UART_Init>:
  if (huart == NULL)
 8004790:	b358      	cbz	r0, 80047ea <HAL_UART_Init+0x5a>
{
 8004792:	b510      	push	{r4, lr}
 8004794:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8004796:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800479a:	b30b      	cbz	r3, 80047e0 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 800479c:	2324      	movs	r3, #36	; 0x24
 800479e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 80047a2:	6822      	ldr	r2, [r4, #0]
 80047a4:	68d3      	ldr	r3, [r2, #12]
 80047a6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80047aa:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80047ac:	4620      	mov	r0, r4
 80047ae:	f7ff ff6f 	bl	8004690 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047b2:	6822      	ldr	r2, [r4, #0]
 80047b4:	6913      	ldr	r3, [r2, #16]
 80047b6:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80047ba:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047bc:	6822      	ldr	r2, [r4, #0]
 80047be:	6953      	ldr	r3, [r2, #20]
 80047c0:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80047c4:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 80047c6:	6822      	ldr	r2, [r4, #0]
 80047c8:	68d3      	ldr	r3, [r2, #12]
 80047ca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80047ce:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047d0:	2000      	movs	r0, #0
 80047d2:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80047d4:	2320      	movs	r3, #32
 80047d6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80047da:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 80047de:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80047e0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 80047e4:	f7fd fc8a 	bl	80020fc <HAL_UART_MspInit>
 80047e8:	e7d8      	b.n	800479c <HAL_UART_Init+0xc>
    return HAL_ERROR;
 80047ea:	2001      	movs	r0, #1
}
 80047ec:	4770      	bx	lr

080047ee <HAL_HalfDuplex_Init>:
  if (huart == NULL)
 80047ee:	2800      	cmp	r0, #0
 80047f0:	d030      	beq.n	8004854 <HAL_HalfDuplex_Init+0x66>
{
 80047f2:	b510      	push	{r4, lr}
 80047f4:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80047f6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80047fa:	b333      	cbz	r3, 800484a <HAL_HalfDuplex_Init+0x5c>
  huart->gState = HAL_UART_STATE_BUSY;
 80047fc:	2324      	movs	r3, #36	; 0x24
 80047fe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8004802:	6822      	ldr	r2, [r4, #0]
 8004804:	68d3      	ldr	r3, [r2, #12]
 8004806:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800480a:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800480c:	4620      	mov	r0, r4
 800480e:	f7ff ff3f 	bl	8004690 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004812:	6822      	ldr	r2, [r4, #0]
 8004814:	6913      	ldr	r3, [r2, #16]
 8004816:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800481a:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800481c:	6822      	ldr	r2, [r4, #0]
 800481e:	6953      	ldr	r3, [r2, #20]
 8004820:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004824:	6153      	str	r3, [r2, #20]
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8004826:	6822      	ldr	r2, [r4, #0]
 8004828:	6953      	ldr	r3, [r2, #20]
 800482a:	f043 0308 	orr.w	r3, r3, #8
 800482e:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8004830:	6822      	ldr	r2, [r4, #0]
 8004832:	68d3      	ldr	r3, [r2, #12]
 8004834:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004838:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800483a:	2000      	movs	r0, #0
 800483c:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800483e:	2320      	movs	r3, #32
 8004840:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004844:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8004848:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800484a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 800484e:	f7fd fc55 	bl	80020fc <HAL_UART_MspInit>
 8004852:	e7d3      	b.n	80047fc <HAL_HalfDuplex_Init+0xe>
    return HAL_ERROR;
 8004854:	2001      	movs	r0, #1
}
 8004856:	4770      	bx	lr

08004858 <HAL_UART_Transmit>:
{
 8004858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800485c:	b082      	sub	sp, #8
 800485e:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8004860:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004864:	b2db      	uxtb	r3, r3
 8004866:	2b20      	cmp	r3, #32
 8004868:	d154      	bne.n	8004914 <HAL_UART_Transmit+0xbc>
 800486a:	4604      	mov	r4, r0
 800486c:	460d      	mov	r5, r1
 800486e:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8004870:	2900      	cmp	r1, #0
 8004872:	d053      	beq.n	800491c <HAL_UART_Transmit+0xc4>
 8004874:	2a00      	cmp	r2, #0
 8004876:	d053      	beq.n	8004920 <HAL_UART_Transmit+0xc8>
    __HAL_LOCK(huart);
 8004878:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800487c:	2b01      	cmp	r3, #1
 800487e:	d051      	beq.n	8004924 <HAL_UART_Transmit+0xcc>
 8004880:	2301      	movs	r3, #1
 8004882:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004886:	2300      	movs	r3, #0
 8004888:	6403      	str	r3, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800488a:	2321      	movs	r3, #33	; 0x21
 800488c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    tickstart = HAL_GetTick();
 8004890:	f7fd fd56 	bl	8002340 <HAL_GetTick>
 8004894:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8004896:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 800489a:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800489e:	68a3      	ldr	r3, [r4, #8]
 80048a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048a4:	d005      	beq.n	80048b2 <HAL_UART_Transmit+0x5a>
      pdata16bits = NULL;
 80048a6:	f04f 0800 	mov.w	r8, #0
    __HAL_UNLOCK(huart);
 80048aa:	2300      	movs	r3, #0
 80048ac:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 80048b0:	e012      	b.n	80048d8 <HAL_UART_Transmit+0x80>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048b2:	6923      	ldr	r3, [r4, #16]
 80048b4:	b113      	cbz	r3, 80048bc <HAL_UART_Transmit+0x64>
      pdata16bits = NULL;
 80048b6:	f04f 0800 	mov.w	r8, #0
 80048ba:	e7f6      	b.n	80048aa <HAL_UART_Transmit+0x52>
      pdata16bits = (uint16_t *) pData;
 80048bc:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 80048be:	2500      	movs	r5, #0
 80048c0:	e7f3      	b.n	80048aa <HAL_UART_Transmit+0x52>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80048c2:	f838 3b02 	ldrh.w	r3, [r8], #2
 80048c6:	6822      	ldr	r2, [r4, #0]
 80048c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048cc:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 80048ce:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80048d0:	b292      	uxth	r2, r2
 80048d2:	3a01      	subs	r2, #1
 80048d4:	b292      	uxth	r2, r2
 80048d6:	84e2      	strh	r2, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80048d8:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80048da:	b29b      	uxth	r3, r3
 80048dc:	b173      	cbz	r3, 80048fc <HAL_UART_Transmit+0xa4>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80048de:	9600      	str	r6, [sp, #0]
 80048e0:	463b      	mov	r3, r7
 80048e2:	2200      	movs	r2, #0
 80048e4:	2180      	movs	r1, #128	; 0x80
 80048e6:	4620      	mov	r0, r4
 80048e8:	f7ff ff1c 	bl	8004724 <UART_WaitOnFlagUntilTimeout>
 80048ec:	b9e0      	cbnz	r0, 8004928 <HAL_UART_Transmit+0xd0>
      if (pdata8bits == NULL)
 80048ee:	2d00      	cmp	r5, #0
 80048f0:	d0e7      	beq.n	80048c2 <HAL_UART_Transmit+0x6a>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80048f2:	f815 2b01 	ldrb.w	r2, [r5], #1
 80048f6:	6823      	ldr	r3, [r4, #0]
 80048f8:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80048fa:	e7e8      	b.n	80048ce <HAL_UART_Transmit+0x76>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80048fc:	9600      	str	r6, [sp, #0]
 80048fe:	463b      	mov	r3, r7
 8004900:	2200      	movs	r2, #0
 8004902:	2140      	movs	r1, #64	; 0x40
 8004904:	4620      	mov	r0, r4
 8004906:	f7ff ff0d 	bl	8004724 <UART_WaitOnFlagUntilTimeout>
 800490a:	b978      	cbnz	r0, 800492c <HAL_UART_Transmit+0xd4>
    huart->gState = HAL_UART_STATE_READY;
 800490c:	2320      	movs	r3, #32
 800490e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_OK;
 8004912:	e000      	b.n	8004916 <HAL_UART_Transmit+0xbe>
    return HAL_BUSY;
 8004914:	2002      	movs	r0, #2
}
 8004916:	b002      	add	sp, #8
 8004918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 800491c:	2001      	movs	r0, #1
 800491e:	e7fa      	b.n	8004916 <HAL_UART_Transmit+0xbe>
 8004920:	2001      	movs	r0, #1
 8004922:	e7f8      	b.n	8004916 <HAL_UART_Transmit+0xbe>
    __HAL_LOCK(huart);
 8004924:	2002      	movs	r0, #2
 8004926:	e7f6      	b.n	8004916 <HAL_UART_Transmit+0xbe>
        return HAL_TIMEOUT;
 8004928:	2003      	movs	r0, #3
 800492a:	e7f4      	b.n	8004916 <HAL_UART_Transmit+0xbe>
      return HAL_TIMEOUT;
 800492c:	2003      	movs	r0, #3
 800492e:	e7f2      	b.n	8004916 <HAL_UART_Transmit+0xbe>

08004930 <HAL_UART_Receive>:
{
 8004930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004934:	b082      	sub	sp, #8
 8004936:	461e      	mov	r6, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 8004938:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800493c:	b2db      	uxtb	r3, r3
 800493e:	2b20      	cmp	r3, #32
 8004940:	d15c      	bne.n	80049fc <HAL_UART_Receive+0xcc>
 8004942:	4604      	mov	r4, r0
 8004944:	460d      	mov	r5, r1
 8004946:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8004948:	2900      	cmp	r1, #0
 800494a:	d05b      	beq.n	8004a04 <HAL_UART_Receive+0xd4>
 800494c:	2a00      	cmp	r2, #0
 800494e:	d05b      	beq.n	8004a08 <HAL_UART_Receive+0xd8>
    __HAL_LOCK(huart);
 8004950:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004954:	2b01      	cmp	r3, #1
 8004956:	d059      	beq.n	8004a0c <HAL_UART_Receive+0xdc>
 8004958:	2301      	movs	r3, #1
 800495a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800495e:	2300      	movs	r3, #0
 8004960:	6403      	str	r3, [r0, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004962:	2222      	movs	r2, #34	; 0x22
 8004964:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004968:	6303      	str	r3, [r0, #48]	; 0x30
    tickstart = HAL_GetTick();
 800496a:	f7fd fce9 	bl	8002340 <HAL_GetTick>
 800496e:	4607      	mov	r7, r0
    huart->RxXferSize = Size;
 8004970:	f8a4 802c 	strh.w	r8, [r4, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004974:	f8a4 802e 	strh.w	r8, [r4, #46]	; 0x2e
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004978:	68a3      	ldr	r3, [r4, #8]
 800497a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800497e:	d005      	beq.n	800498c <HAL_UART_Receive+0x5c>
      pdata16bits = NULL;
 8004980:	f04f 0800 	mov.w	r8, #0
    __HAL_UNLOCK(huart);
 8004984:	2300      	movs	r3, #0
 8004986:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    while (huart->RxXferCount > 0U)
 800498a:	e017      	b.n	80049bc <HAL_UART_Receive+0x8c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800498c:	6923      	ldr	r3, [r4, #16]
 800498e:	b113      	cbz	r3, 8004996 <HAL_UART_Receive+0x66>
      pdata16bits = NULL;
 8004990:	f04f 0800 	mov.w	r8, #0
 8004994:	e7f6      	b.n	8004984 <HAL_UART_Receive+0x54>
      pdata16bits = (uint16_t *) pData;
 8004996:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8004998:	2500      	movs	r5, #0
 800499a:	e7f3      	b.n	8004984 <HAL_UART_Receive+0x54>
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800499c:	6823      	ldr	r3, [r4, #0]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049a4:	f828 3b02 	strh.w	r3, [r8], #2
        pdata16bits++;
 80049a8:	e003      	b.n	80049b2 <HAL_UART_Receive+0x82>
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80049aa:	6823      	ldr	r3, [r4, #0]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	702b      	strb	r3, [r5, #0]
        pdata8bits++;
 80049b0:	3501      	adds	r5, #1
      huart->RxXferCount--;
 80049b2:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 80049b4:	b292      	uxth	r2, r2
 80049b6:	3a01      	subs	r2, #1
 80049b8:	b292      	uxth	r2, r2
 80049ba:	85e2      	strh	r2, [r4, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80049bc:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80049be:	b29b      	uxth	r3, r3
 80049c0:	b1bb      	cbz	r3, 80049f2 <HAL_UART_Receive+0xc2>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80049c2:	9600      	str	r6, [sp, #0]
 80049c4:	463b      	mov	r3, r7
 80049c6:	2200      	movs	r2, #0
 80049c8:	2120      	movs	r1, #32
 80049ca:	4620      	mov	r0, r4
 80049cc:	f7ff feaa 	bl	8004724 <UART_WaitOnFlagUntilTimeout>
 80049d0:	b9f0      	cbnz	r0, 8004a10 <HAL_UART_Receive+0xe0>
      if (pdata8bits == NULL)
 80049d2:	2d00      	cmp	r5, #0
 80049d4:	d0e2      	beq.n	800499c <HAL_UART_Receive+0x6c>
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80049d6:	68a3      	ldr	r3, [r4, #8]
 80049d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049dc:	d0e5      	beq.n	80049aa <HAL_UART_Receive+0x7a>
 80049de:	b913      	cbnz	r3, 80049e6 <HAL_UART_Receive+0xb6>
 80049e0:	6923      	ldr	r3, [r4, #16]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d0e1      	beq.n	80049aa <HAL_UART_Receive+0x7a>
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80049e6:	6823      	ldr	r3, [r4, #0]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049ee:	702b      	strb	r3, [r5, #0]
 80049f0:	e7de      	b.n	80049b0 <HAL_UART_Receive+0x80>
    huart->RxState = HAL_UART_STATE_READY;
 80049f2:	2320      	movs	r3, #32
 80049f4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 80049f8:	2000      	movs	r0, #0
 80049fa:	e000      	b.n	80049fe <HAL_UART_Receive+0xce>
    return HAL_BUSY;
 80049fc:	2002      	movs	r0, #2
}
 80049fe:	b002      	add	sp, #8
 8004a00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8004a04:	2001      	movs	r0, #1
 8004a06:	e7fa      	b.n	80049fe <HAL_UART_Receive+0xce>
 8004a08:	2001      	movs	r0, #1
 8004a0a:	e7f8      	b.n	80049fe <HAL_UART_Receive+0xce>
    __HAL_LOCK(huart);
 8004a0c:	2002      	movs	r0, #2
 8004a0e:	e7f6      	b.n	80049fe <HAL_UART_Receive+0xce>
        return HAL_TIMEOUT;
 8004a10:	2003      	movs	r0, #3
 8004a12:	e7f4      	b.n	80049fe <HAL_UART_Receive+0xce>

08004a14 <HAL_UART_Transmit_IT>:
  if (huart->gState == HAL_UART_STATE_READY)
 8004a14:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	2b20      	cmp	r3, #32
 8004a1c:	d119      	bne.n	8004a52 <HAL_UART_Transmit_IT+0x3e>
    if ((pData == NULL) || (Size == 0U))
 8004a1e:	b1d1      	cbz	r1, 8004a56 <HAL_UART_Transmit_IT+0x42>
 8004a20:	b1da      	cbz	r2, 8004a5a <HAL_UART_Transmit_IT+0x46>
    __HAL_LOCK(huart);
 8004a22:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	d019      	beq.n	8004a5e <HAL_UART_Transmit_IT+0x4a>
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->pTxBuffPtr = pData;
 8004a30:	6201      	str	r1, [r0, #32]
    huart->TxXferSize = Size;
 8004a32:	8482      	strh	r2, [r0, #36]	; 0x24
    huart->TxXferCount = Size;
 8004a34:	84c2      	strh	r2, [r0, #38]	; 0x26
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a36:	2300      	movs	r3, #0
 8004a38:	6403      	str	r3, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a3a:	2221      	movs	r2, #33	; 0x21
 8004a3c:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    __HAL_UNLOCK(huart);
 8004a40:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8004a44:	6801      	ldr	r1, [r0, #0]
 8004a46:	68ca      	ldr	r2, [r1, #12]
 8004a48:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004a4c:	60ca      	str	r2, [r1, #12]
    return HAL_OK;
 8004a4e:	4618      	mov	r0, r3
 8004a50:	4770      	bx	lr
    return HAL_BUSY;
 8004a52:	2002      	movs	r0, #2
 8004a54:	4770      	bx	lr
      return HAL_ERROR;
 8004a56:	2001      	movs	r0, #1
 8004a58:	4770      	bx	lr
 8004a5a:	2001      	movs	r0, #1
 8004a5c:	4770      	bx	lr
    __HAL_LOCK(huart);
 8004a5e:	2002      	movs	r0, #2
}
 8004a60:	4770      	bx	lr

08004a62 <UART_EndTransmit_IT>:
{
 8004a62:	b508      	push	{r3, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004a64:	6801      	ldr	r1, [r0, #0]
 8004a66:	68ca      	ldr	r2, [r1, #12]
 8004a68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a6c:	60ca      	str	r2, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 8004a6e:	2220      	movs	r2, #32
 8004a70:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  HAL_UART_TxCpltCallback(huart);
 8004a74:	f7fc fab6 	bl	8000fe4 <HAL_UART_TxCpltCallback>
}
 8004a78:	2000      	movs	r0, #0
 8004a7a:	bd08      	pop	{r3, pc}

08004a7c <HAL_UART_ErrorCallback>:
}
 8004a7c:	4770      	bx	lr

08004a7e <UART_DMAAbortOnError>:
{
 8004a7e:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a80:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8004a82:	2300      	movs	r3, #0
 8004a84:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004a86:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8004a88:	f7ff fff8 	bl	8004a7c <HAL_UART_ErrorCallback>
}
 8004a8c:	bd08      	pop	{r3, pc}

08004a8e <HAL_UARTEx_RxEventCallback>:
}
 8004a8e:	4770      	bx	lr

08004a90 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a90:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	2b22      	cmp	r3, #34	; 0x22
 8004a98:	d160      	bne.n	8004b5c <UART_Receive_IT+0xcc>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a9a:	6883      	ldr	r3, [r0, #8]
 8004a9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004aa0:	d046      	beq.n	8004b30 <UART_Receive_IT+0xa0>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004aa2:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004aa4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004aa8:	d004      	beq.n	8004ab4 <UART_Receive_IT+0x24>
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d14d      	bne.n	8004b4a <UART_Receive_IT+0xba>
 8004aae:	6903      	ldr	r3, [r0, #16]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d14a      	bne.n	8004b4a <UART_Receive_IT+0xba>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004ab4:	6803      	ldr	r3, [r0, #0]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 8004aba:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004abc:	3301      	adds	r3, #1
 8004abe:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8004ac0:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	3b01      	subs	r3, #1
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d148      	bne.n	8004b60 <UART_Receive_IT+0xd0>
{
 8004ace:	b500      	push	{lr}
 8004ad0:	b083      	sub	sp, #12
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004ad2:	6802      	ldr	r2, [r0, #0]
 8004ad4:	68d3      	ldr	r3, [r2, #12]
 8004ad6:	f023 0320 	bic.w	r3, r3, #32
 8004ada:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004adc:	6802      	ldr	r2, [r0, #0]
 8004ade:	68d3      	ldr	r3, [r2, #12]
 8004ae0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ae4:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004ae6:	6802      	ldr	r2, [r0, #0]
 8004ae8:	6953      	ldr	r3, [r2, #20]
 8004aea:	f023 0301 	bic.w	r3, r3, #1
 8004aee:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8004af0:	2320      	movs	r3, #32
 8004af2:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004af6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d12c      	bne.n	8004b56 <UART_Receive_IT+0xc6>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004afc:	2300      	movs	r3, #0
 8004afe:	6303      	str	r3, [r0, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b00:	6802      	ldr	r2, [r0, #0]
 8004b02:	68d3      	ldr	r3, [r2, #12]
 8004b04:	f023 0310 	bic.w	r3, r3, #16
 8004b08:	60d3      	str	r3, [r2, #12]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004b0a:	6803      	ldr	r3, [r0, #0]
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	f012 0f10 	tst.w	r2, #16
 8004b12:	d006      	beq.n	8004b22 <UART_Receive_IT+0x92>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004b14:	2200      	movs	r2, #0
 8004b16:	9201      	str	r2, [sp, #4]
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	9201      	str	r2, [sp, #4]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	9301      	str	r3, [sp, #4]
 8004b20:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b22:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8004b24:	f7ff ffb3 	bl	8004a8e <HAL_UARTEx_RxEventCallback>
      return HAL_OK;
 8004b28:	2000      	movs	r0, #0
}
 8004b2a:	b003      	add	sp, #12
 8004b2c:	f85d fb04 	ldr.w	pc, [sp], #4
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b30:	6902      	ldr	r2, [r0, #16]
 8004b32:	2a00      	cmp	r2, #0
 8004b34:	d1b5      	bne.n	8004aa2 <UART_Receive_IT+0x12>
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004b36:	6a82      	ldr	r2, [r0, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004b38:	6803      	ldr	r3, [r0, #0]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b40:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 8004b42:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004b44:	3302      	adds	r3, #2
 8004b46:	6283      	str	r3, [r0, #40]	; 0x28
 8004b48:	e7ba      	b.n	8004ac0 <UART_Receive_IT+0x30>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004b4a:	6803      	ldr	r3, [r0, #0]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b52:	7013      	strb	r3, [r2, #0]
 8004b54:	e7b1      	b.n	8004aba <UART_Receive_IT+0x2a>
       HAL_UART_RxCpltCallback(huart);
 8004b56:	f7fc fa15 	bl	8000f84 <HAL_UART_RxCpltCallback>
 8004b5a:	e7e5      	b.n	8004b28 <UART_Receive_IT+0x98>
    return HAL_BUSY;
 8004b5c:	2002      	movs	r0, #2
 8004b5e:	4770      	bx	lr
    return HAL_OK;
 8004b60:	2000      	movs	r0, #0
}
 8004b62:	4770      	bx	lr

08004b64 <HAL_UART_IRQHandler>:
{
 8004b64:	b530      	push	{r4, r5, lr}
 8004b66:	b083      	sub	sp, #12
 8004b68:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004b6a:	6802      	ldr	r2, [r0, #0]
 8004b6c:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004b6e:	68d0      	ldr	r0, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004b70:	6951      	ldr	r1, [r2, #20]
  if (errorflags == RESET)
 8004b72:	f013 050f 	ands.w	r5, r3, #15
 8004b76:	d105      	bne.n	8004b84 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b78:	f013 0f20 	tst.w	r3, #32
 8004b7c:	d002      	beq.n	8004b84 <HAL_UART_IRQHandler+0x20>
 8004b7e:	f010 0f20 	tst.w	r0, #32
 8004b82:	d119      	bne.n	8004bb8 <HAL_UART_IRQHandler+0x54>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004b84:	b12d      	cbz	r5, 8004b92 <HAL_UART_IRQHandler+0x2e>
 8004b86:	f011 0101 	ands.w	r1, r1, #1
 8004b8a:	d119      	bne.n	8004bc0 <HAL_UART_IRQHandler+0x5c>
 8004b8c:	f410 7f90 	tst.w	r0, #288	; 0x120
 8004b90:	d116      	bne.n	8004bc0 <HAL_UART_IRQHandler+0x5c>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b92:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004b94:	2901      	cmp	r1, #1
 8004b96:	d075      	beq.n	8004c84 <HAL_UART_IRQHandler+0x120>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004b98:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004b9c:	d003      	beq.n	8004ba6 <HAL_UART_IRQHandler+0x42>
 8004b9e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8004ba2:	f040 80d7 	bne.w	8004d54 <HAL_UART_IRQHandler+0x1f0>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004ba6:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004baa:	d003      	beq.n	8004bb4 <HAL_UART_IRQHandler+0x50>
 8004bac:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004bb0:	f040 80d4 	bne.w	8004d5c <HAL_UART_IRQHandler+0x1f8>
}
 8004bb4:	b003      	add	sp, #12
 8004bb6:	bd30      	pop	{r4, r5, pc}
      UART_Receive_IT(huart);
 8004bb8:	4620      	mov	r0, r4
 8004bba:	f7ff ff69 	bl	8004a90 <UART_Receive_IT>
      return;
 8004bbe:	e7f9      	b.n	8004bb4 <HAL_UART_IRQHandler+0x50>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004bc0:	f013 0f01 	tst.w	r3, #1
 8004bc4:	d006      	beq.n	8004bd4 <HAL_UART_IRQHandler+0x70>
 8004bc6:	f410 7f80 	tst.w	r0, #256	; 0x100
 8004bca:	d003      	beq.n	8004bd4 <HAL_UART_IRQHandler+0x70>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004bcc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004bce:	f042 0201 	orr.w	r2, r2, #1
 8004bd2:	6422      	str	r2, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004bd4:	f013 0f04 	tst.w	r3, #4
 8004bd8:	d004      	beq.n	8004be4 <HAL_UART_IRQHandler+0x80>
 8004bda:	b119      	cbz	r1, 8004be4 <HAL_UART_IRQHandler+0x80>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004bdc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004bde:	f042 0202 	orr.w	r2, r2, #2
 8004be2:	6422      	str	r2, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004be4:	f013 0f02 	tst.w	r3, #2
 8004be8:	d004      	beq.n	8004bf4 <HAL_UART_IRQHandler+0x90>
 8004bea:	b119      	cbz	r1, 8004bf4 <HAL_UART_IRQHandler+0x90>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004bec:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004bee:	f042 0204 	orr.w	r2, r2, #4
 8004bf2:	6422      	str	r2, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004bf4:	f013 0f08 	tst.w	r3, #8
 8004bf8:	d007      	beq.n	8004c0a <HAL_UART_IRQHandler+0xa6>
 8004bfa:	f010 0f20 	tst.w	r0, #32
 8004bfe:	d100      	bne.n	8004c02 <HAL_UART_IRQHandler+0x9e>
 8004c00:	b119      	cbz	r1, 8004c0a <HAL_UART_IRQHandler+0xa6>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004c02:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004c04:	f042 0208 	orr.w	r2, r2, #8
 8004c08:	6422      	str	r2, [r4, #64]	; 0x40
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004c0a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004c0c:	2a00      	cmp	r2, #0
 8004c0e:	d0d1      	beq.n	8004bb4 <HAL_UART_IRQHandler+0x50>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c10:	f013 0f20 	tst.w	r3, #32
 8004c14:	d002      	beq.n	8004c1c <HAL_UART_IRQHandler+0xb8>
 8004c16:	f010 0f20 	tst.w	r0, #32
 8004c1a:	d121      	bne.n	8004c60 <HAL_UART_IRQHandler+0xfc>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004c1c:	6823      	ldr	r3, [r4, #0]
 8004c1e:	695b      	ldr	r3, [r3, #20]
 8004c20:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004c24:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004c26:	f012 0f08 	tst.w	r2, #8
 8004c2a:	d100      	bne.n	8004c2e <HAL_UART_IRQHandler+0xca>
 8004c2c:	b323      	cbz	r3, 8004c78 <HAL_UART_IRQHandler+0x114>
        UART_EndRxTransfer(huart);
 8004c2e:	4620      	mov	r0, r4
 8004c30:	f7ff fce4 	bl	80045fc <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c34:	6823      	ldr	r3, [r4, #0]
 8004c36:	695a      	ldr	r2, [r3, #20]
 8004c38:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004c3c:	d018      	beq.n	8004c70 <HAL_UART_IRQHandler+0x10c>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c3e:	695a      	ldr	r2, [r3, #20]
 8004c40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c44:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8004c46:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004c48:	b173      	cbz	r3, 8004c68 <HAL_UART_IRQHandler+0x104>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004c4a:	4a46      	ldr	r2, [pc, #280]	; (8004d64 <HAL_UART_IRQHandler+0x200>)
 8004c4c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004c4e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004c50:	f7fd fc1c 	bl	800248c <HAL_DMA_Abort_IT>
 8004c54:	2800      	cmp	r0, #0
 8004c56:	d0ad      	beq.n	8004bb4 <HAL_UART_IRQHandler+0x50>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004c58:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004c5a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004c5c:	4798      	blx	r3
 8004c5e:	e7a9      	b.n	8004bb4 <HAL_UART_IRQHandler+0x50>
        UART_Receive_IT(huart);
 8004c60:	4620      	mov	r0, r4
 8004c62:	f7ff ff15 	bl	8004a90 <UART_Receive_IT>
 8004c66:	e7d9      	b.n	8004c1c <HAL_UART_IRQHandler+0xb8>
            HAL_UART_ErrorCallback(huart);
 8004c68:	4620      	mov	r0, r4
 8004c6a:	f7ff ff07 	bl	8004a7c <HAL_UART_ErrorCallback>
 8004c6e:	e7a1      	b.n	8004bb4 <HAL_UART_IRQHandler+0x50>
          HAL_UART_ErrorCallback(huart);
 8004c70:	4620      	mov	r0, r4
 8004c72:	f7ff ff03 	bl	8004a7c <HAL_UART_ErrorCallback>
 8004c76:	e79d      	b.n	8004bb4 <HAL_UART_IRQHandler+0x50>
        HAL_UART_ErrorCallback(huart);
 8004c78:	4620      	mov	r0, r4
 8004c7a:	f7ff feff 	bl	8004a7c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	6423      	str	r3, [r4, #64]	; 0x40
    return;
 8004c82:	e797      	b.n	8004bb4 <HAL_UART_IRQHandler+0x50>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004c84:	f013 0f10 	tst.w	r3, #16
 8004c88:	d086      	beq.n	8004b98 <HAL_UART_IRQHandler+0x34>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004c8a:	f010 0f10 	tst.w	r0, #16
 8004c8e:	d083      	beq.n	8004b98 <HAL_UART_IRQHandler+0x34>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c90:	2300      	movs	r3, #0
 8004c92:	9301      	str	r3, [sp, #4]
 8004c94:	6813      	ldr	r3, [r2, #0]
 8004c96:	9301      	str	r3, [sp, #4]
 8004c98:	6853      	ldr	r3, [r2, #4]
 8004c9a:	9301      	str	r3, [sp, #4]
 8004c9c:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c9e:	6953      	ldr	r3, [r2, #20]
 8004ca0:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004ca4:	d032      	beq.n	8004d0c <HAL_UART_IRQHandler+0x1a8>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004ca6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004ca8:	680b      	ldr	r3, [r1, #0]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	b29b      	uxth	r3, r3
      if (  (nb_remaining_rx_data > 0U)
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d080      	beq.n	8004bb4 <HAL_UART_IRQHandler+0x50>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004cb2:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
 8004cb4:	4298      	cmp	r0, r3
 8004cb6:	f67f af7d 	bls.w	8004bb4 <HAL_UART_IRQHandler+0x50>
        huart->RxXferCount = nb_remaining_rx_data;
 8004cba:	85e3      	strh	r3, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004cbc:	698b      	ldr	r3, [r1, #24]
 8004cbe:	2b20      	cmp	r3, #32
 8004cc0:	d108      	bne.n	8004cd4 <HAL_UART_IRQHandler+0x170>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004cc2:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8004cc4:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	1ac9      	subs	r1, r1, r3
 8004cca:	b289      	uxth	r1, r1
 8004ccc:	4620      	mov	r0, r4
 8004cce:	f7ff fede 	bl	8004a8e <HAL_UARTEx_RxEventCallback>
      return;
 8004cd2:	e76f      	b.n	8004bb4 <HAL_UART_IRQHandler+0x50>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004cd4:	68d3      	ldr	r3, [r2, #12]
 8004cd6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004cda:	60d3      	str	r3, [r2, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cdc:	6822      	ldr	r2, [r4, #0]
 8004cde:	6953      	ldr	r3, [r2, #20]
 8004ce0:	f023 0301 	bic.w	r3, r3, #1
 8004ce4:	6153      	str	r3, [r2, #20]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ce6:	6822      	ldr	r2, [r4, #0]
 8004ce8:	6953      	ldr	r3, [r2, #20]
 8004cea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cee:	6153      	str	r3, [r2, #20]
          huart->RxState = HAL_UART_STATE_READY;
 8004cf0:	2320      	movs	r3, #32
 8004cf2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	6323      	str	r3, [r4, #48]	; 0x30
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cfa:	6822      	ldr	r2, [r4, #0]
 8004cfc:	68d3      	ldr	r3, [r2, #12]
 8004cfe:	f023 0310 	bic.w	r3, r3, #16
 8004d02:	60d3      	str	r3, [r2, #12]
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004d04:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004d06:	f7fd fb9f 	bl	8002448 <HAL_DMA_Abort>
 8004d0a:	e7da      	b.n	8004cc2 <HAL_UART_IRQHandler+0x15e>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004d0c:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8004d0e:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8004d10:	b29b      	uxth	r3, r3
 8004d12:	1ac9      	subs	r1, r1, r3
 8004d14:	b289      	uxth	r1, r1
      if (  (huart->RxXferCount > 0U)
 8004d16:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8004d18:	b29b      	uxth	r3, r3
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	f43f af4a 	beq.w	8004bb4 <HAL_UART_IRQHandler+0x50>
          &&(nb_rx_data > 0U) )
 8004d20:	2900      	cmp	r1, #0
 8004d22:	f43f af47 	beq.w	8004bb4 <HAL_UART_IRQHandler+0x50>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d26:	68d3      	ldr	r3, [r2, #12]
 8004d28:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d2c:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d2e:	6822      	ldr	r2, [r4, #0]
 8004d30:	6953      	ldr	r3, [r2, #20]
 8004d32:	f023 0301 	bic.w	r3, r3, #1
 8004d36:	6153      	str	r3, [r2, #20]
        huart->RxState = HAL_UART_STATE_READY;
 8004d38:	2320      	movs	r3, #32
 8004d3a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	6323      	str	r3, [r4, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d42:	6822      	ldr	r2, [r4, #0]
 8004d44:	68d3      	ldr	r3, [r2, #12]
 8004d46:	f023 0310 	bic.w	r3, r3, #16
 8004d4a:	60d3      	str	r3, [r2, #12]
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004d4c:	4620      	mov	r0, r4
 8004d4e:	f7ff fe9e 	bl	8004a8e <HAL_UARTEx_RxEventCallback>
      return;
 8004d52:	e72f      	b.n	8004bb4 <HAL_UART_IRQHandler+0x50>
    UART_Transmit_IT(huart);
 8004d54:	4620      	mov	r0, r4
 8004d56:	f7ff fc6a 	bl	800462e <UART_Transmit_IT>
    return;
 8004d5a:	e72b      	b.n	8004bb4 <HAL_UART_IRQHandler+0x50>
    UART_EndTransmit_IT(huart);
 8004d5c:	4620      	mov	r0, r4
 8004d5e:	f7ff fe80 	bl	8004a62 <UART_EndTransmit_IT>
    return;
 8004d62:	e727      	b.n	8004bb4 <HAL_UART_IRQHandler+0x50>
 8004d64:	08004a7f 	.word	0x08004a7f

08004d68 <UART_Start_Receive_IT>:
{
 8004d68:	4603      	mov	r3, r0
  huart->pRxBuffPtr = pData;
 8004d6a:	6281      	str	r1, [r0, #40]	; 0x28
  huart->RxXferSize = Size;
 8004d6c:	8582      	strh	r2, [r0, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004d6e:	85c2      	strh	r2, [r0, #46]	; 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d70:	2000      	movs	r0, #0
 8004d72:	6418      	str	r0, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004d74:	2222      	movs	r2, #34	; 0x22
 8004d76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  __HAL_UNLOCK(huart);
 8004d7a:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004d7e:	6819      	ldr	r1, [r3, #0]
 8004d80:	68ca      	ldr	r2, [r1, #12]
 8004d82:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d86:	60ca      	str	r2, [r1, #12]
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004d88:	6819      	ldr	r1, [r3, #0]
 8004d8a:	694a      	ldr	r2, [r1, #20]
 8004d8c:	f042 0201 	orr.w	r2, r2, #1
 8004d90:	614a      	str	r2, [r1, #20]
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	68d3      	ldr	r3, [r2, #12]
 8004d96:	f043 0320 	orr.w	r3, r3, #32
 8004d9a:	60d3      	str	r3, [r2, #12]
}
 8004d9c:	4770      	bx	lr

08004d9e <HAL_UART_Receive_IT>:
{
 8004d9e:	b508      	push	{r3, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8004da0:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	2b20      	cmp	r3, #32
 8004da8:	d10d      	bne.n	8004dc6 <HAL_UART_Receive_IT+0x28>
    if ((pData == NULL) || (Size == 0U))
 8004daa:	b171      	cbz	r1, 8004dca <HAL_UART_Receive_IT+0x2c>
 8004dac:	b17a      	cbz	r2, 8004dce <HAL_UART_Receive_IT+0x30>
    __HAL_LOCK(huart);
 8004dae:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	d00d      	beq.n	8004dd2 <HAL_UART_Receive_IT+0x34>
 8004db6:	2301      	movs	r3, #1
 8004db8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	6303      	str	r3, [r0, #48]	; 0x30
    return(UART_Start_Receive_IT(huart, pData, Size));
 8004dc0:	f7ff ffd2 	bl	8004d68 <UART_Start_Receive_IT>
 8004dc4:	e000      	b.n	8004dc8 <HAL_UART_Receive_IT+0x2a>
    return HAL_BUSY;
 8004dc6:	2002      	movs	r0, #2
}
 8004dc8:	bd08      	pop	{r3, pc}
      return HAL_ERROR;
 8004dca:	2001      	movs	r0, #1
 8004dcc:	e7fc      	b.n	8004dc8 <HAL_UART_Receive_IT+0x2a>
 8004dce:	2001      	movs	r0, #1
 8004dd0:	e7fa      	b.n	8004dc8 <HAL_UART_Receive_IT+0x2a>
    __HAL_LOCK(huart);
 8004dd2:	2002      	movs	r0, #2
 8004dd4:	e7f8      	b.n	8004dc8 <HAL_UART_Receive_IT+0x2a>

08004dd6 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004dd6:	b084      	sub	sp, #16
 8004dd8:	a801      	add	r0, sp, #4
 8004dda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8004dde:	2000      	movs	r0, #0
 8004de0:	b004      	add	sp, #16
 8004de2:	4770      	bx	lr

08004de4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004de4:	4603      	mov	r3, r0
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004de6:	2000      	movs	r0, #0
 8004de8:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004dec:	f44f 423f 	mov.w	r2, #48896	; 0xbf00
 8004df0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
}
 8004df4:	4770      	bx	lr

08004df6 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004df6:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8004dfa:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004dfe:	045b      	lsls	r3, r3, #17
 8004e00:	0c5b      	lsrs	r3, r3, #17
 8004e02:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 8004e06:	2000      	movs	r0, #0
 8004e08:	4770      	bx	lr

08004e0a <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8004e0a:	2000      	movs	r0, #0
 8004e0c:	4770      	bx	lr

08004e0e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004e0e:	b084      	sub	sp, #16
 8004e10:	4684      	mov	ip, r0
 8004e12:	a801      	add	r0, sp, #4
 8004e14:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	f8ac 3040 	strh.w	r3, [ip, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004e1e:	2000      	movs	r0, #0
 8004e20:	f8ac 0040 	strh.w	r0, [ip, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004e24:	f8ac 0044 	strh.w	r0, [ip, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004e28:	f8ac 0050 	strh.w	r0, [ip, #80]	; 0x50

  return HAL_OK;
}
 8004e2c:	b004      	add	sp, #16
 8004e2e:	4770      	bx	lr

08004e30 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004e30:	b510      	push	{r4, lr}
 8004e32:	4603      	mov	r3, r0
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004e34:	f891 c000 	ldrb.w	ip, [r1]
 8004e38:	f830 202c 	ldrh.w	r2, [r0, ip, lsl #2]
 8004e3c:	b292      	uxth	r2, r2
 8004e3e:	f422 42ec 	bic.w	r2, r2, #30208	; 0x7600
 8004e42:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004e46:	b292      	uxth	r2, r2

  /* initialize Endpoint */
  switch (ep->type)
 8004e48:	78c8      	ldrb	r0, [r1, #3]
 8004e4a:	2803      	cmp	r0, #3
 8004e4c:	d861      	bhi.n	8004f12 <USB_ActivateEndpoint+0xe2>
 8004e4e:	e8df f000 	tbb	[pc, r0]
 8004e52:	5c55      	.short	0x5c55
 8004e54:	5802      	.short	0x5802
 8004e56:	2000      	movs	r0, #0
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004e58:	f248 0e80 	movw	lr, #32896	; 0x8080
 8004e5c:	ea42 020e 	orr.w	r2, r2, lr
 8004e60:	f823 202c 	strh.w	r2, [r3, ip, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004e64:	f891 c000 	ldrb.w	ip, [r1]
 8004e68:	f833 202c 	ldrh.w	r2, [r3, ip, lsl #2]
 8004e6c:	b292      	uxth	r2, r2
 8004e6e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004e72:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004e76:	ea4c 0202 	orr.w	r2, ip, r2
 8004e7a:	ea42 020e 	orr.w	r2, r2, lr
 8004e7e:	f823 202c 	strh.w	r2, [r3, ip, lsl #2]

  if (ep->doublebuffer == 0U)
 8004e82:	7b0a      	ldrb	r2, [r1, #12]
 8004e84:	2a00      	cmp	r2, #0
 8004e86:	f040 80c4 	bne.w	8005012 <USB_ActivateEndpoint+0x1e2>
  {
    if (ep->is_in != 0U)
 8004e8a:	784a      	ldrb	r2, [r1, #1]
 8004e8c:	2a00      	cmp	r2, #0
 8004e8e:	d051      	beq.n	8004f34 <USB_ActivateEndpoint+0x104>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004e90:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8004e94:	b292      	uxth	r2, r2
 8004e96:	441a      	add	r2, r3
 8004e98:	780c      	ldrb	r4, [r1, #0]
 8004e9a:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 8004e9e:	f8b1 c006 	ldrh.w	ip, [r1, #6]
 8004ea2:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8004ea6:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8004eaa:	f8a2 c400 	strh.w	ip, [r2, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004eae:	780c      	ldrb	r4, [r1, #0]
 8004eb0:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8004eb4:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004eb8:	d00c      	beq.n	8004ed4 <USB_ActivateEndpoint+0xa4>
 8004eba:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8004ebe:	b292      	uxth	r2, r2
 8004ec0:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004ec4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004ec8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ecc:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8004ed0:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8004ed4:	78ca      	ldrb	r2, [r1, #3]
 8004ed6:	2a01      	cmp	r2, #1
 8004ed8:	d01d      	beq.n	8004f16 <USB_ActivateEndpoint+0xe6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004eda:	7809      	ldrb	r1, [r1, #0]
 8004edc:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8004ee0:	b292      	uxth	r2, r2
 8004ee2:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004ee6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004eea:	f082 0220 	eor.w	r2, r2, #32
 8004eee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ef2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004ef6:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8004efa:	e06a      	b.n	8004fd2 <USB_ActivateEndpoint+0x1a2>
      wEpRegVal |= USB_EP_CONTROL;
 8004efc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
      break;
 8004f00:	e7aa      	b.n	8004e58 <USB_ActivateEndpoint+0x28>
      wEpRegVal |= USB_EP_INTERRUPT;
 8004f02:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
  HAL_StatusTypeDef ret = HAL_OK;
 8004f06:	2000      	movs	r0, #0
      break;
 8004f08:	e7a6      	b.n	8004e58 <USB_ActivateEndpoint+0x28>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004f0a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
  HAL_StatusTypeDef ret = HAL_OK;
 8004f0e:	2000      	movs	r0, #0
      break;
 8004f10:	e7a2      	b.n	8004e58 <USB_ActivateEndpoint+0x28>
      ret = HAL_ERROR;
 8004f12:	2001      	movs	r0, #1
 8004f14:	e7a0      	b.n	8004e58 <USB_ActivateEndpoint+0x28>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004f16:	7809      	ldrb	r1, [r1, #0]
 8004f18:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8004f1c:	b292      	uxth	r2, r2
 8004f1e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004f22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f26:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f2a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004f2e:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8004f32:	e04e      	b.n	8004fd2 <USB_ActivateEndpoint+0x1a2>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004f34:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8004f38:	b292      	uxth	r2, r2
 8004f3a:	441a      	add	r2, r3
 8004f3c:	780c      	ldrb	r4, [r1, #0]
 8004f3e:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 8004f42:	f8b1 c006 	ldrh.w	ip, [r1, #6]
 8004f46:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8004f4a:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8004f4e:	f8a2 c408 	strh.w	ip, [r2, #1032]	; 0x408

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004f52:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8004f56:	b292      	uxth	r2, r2
 8004f58:	441a      	add	r2, r3
 8004f5a:	780c      	ldrb	r4, [r1, #0]
 8004f5c:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 8004f60:	690c      	ldr	r4, [r1, #16]
 8004f62:	bbbc      	cbnz	r4, 8004fd4 <USB_ActivateEndpoint+0x1a4>
 8004f64:	f8b2 c40c 	ldrh.w	ip, [r2, #1036]	; 0x40c
 8004f68:	fa1f fc8c 	uxth.w	ip, ip
 8004f6c:	f42c 4cf8 	bic.w	ip, ip, #31744	; 0x7c00
 8004f70:	fa1f fc8c 	uxth.w	ip, ip
 8004f74:	f8a2 c40c 	strh.w	ip, [r2, #1036]	; 0x40c
 8004f78:	f8b2 c40c 	ldrh.w	ip, [r2, #1036]	; 0x40c
 8004f7c:	ea6f 4c4c 	mvn.w	ip, ip, lsl #17
 8004f80:	ea6f 4c5c 	mvn.w	ip, ip, lsr #17
 8004f84:	fa1f fc8c 	uxth.w	ip, ip
 8004f88:	f8a2 c40c 	strh.w	ip, [r2, #1036]	; 0x40c
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f8c:	780c      	ldrb	r4, [r1, #0]
 8004f8e:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8004f92:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8004f96:	d00c      	beq.n	8004fb2 <USB_ActivateEndpoint+0x182>
 8004f98:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8004f9c:	b292      	uxth	r2, r2
 8004f9e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004fa2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004fa6:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8004faa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004fae:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004fb2:	7809      	ldrb	r1, [r1, #0]
 8004fb4:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8004fb8:	b292      	uxth	r2, r2
 8004fba:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004fbe:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004fc2:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8004fc6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004fca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004fce:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return ret;
}
 8004fd2:	bd10      	pop	{r4, pc}
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004fd4:	2c3e      	cmp	r4, #62	; 0x3e
 8004fd6:	d80d      	bhi.n	8004ff4 <USB_ActivateEndpoint+0x1c4>
 8004fd8:	ea4f 0c54 	mov.w	ip, r4, lsr #1
 8004fdc:	f014 0f01 	tst.w	r4, #1
 8004fe0:	d001      	beq.n	8004fe6 <USB_ActivateEndpoint+0x1b6>
 8004fe2:	f10c 0c01 	add.w	ip, ip, #1
 8004fe6:	ea4f 2c8c 	mov.w	ip, ip, lsl #10
 8004fea:	fa1f fc8c 	uxth.w	ip, ip
 8004fee:	f8a2 c40c 	strh.w	ip, [r2, #1036]	; 0x40c
 8004ff2:	e7cb      	b.n	8004f8c <USB_ActivateEndpoint+0x15c>
 8004ff4:	ea4f 1c54 	mov.w	ip, r4, lsr #5
 8004ff8:	f014 0f1f 	tst.w	r4, #31
 8004ffc:	d101      	bne.n	8005002 <USB_ActivateEndpoint+0x1d2>
 8004ffe:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005002:	ea6f 64cc 	mvn.w	r4, ip, lsl #27
 8005006:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 800500a:	b2a4      	uxth	r4, r4
 800500c:	f8a2 440c 	strh.w	r4, [r2, #1036]	; 0x40c
 8005010:	e7bc      	b.n	8004f8c <USB_ActivateEndpoint+0x15c>
    PCD_SET_EP_DBUF(USBx, ep->num);
 8005012:	f891 c000 	ldrb.w	ip, [r1]
 8005016:	f833 202c 	ldrh.w	r2, [r3, ip, lsl #2]
 800501a:	b292      	uxth	r2, r2
 800501c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8005020:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005024:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 8005028:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800502c:	f823 202c 	strh.w	r2, [r3, ip, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005030:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8005034:	b292      	uxth	r2, r2
 8005036:	441a      	add	r2, r3
 8005038:	f891 c000 	ldrb.w	ip, [r1]
 800503c:	eb02 120c 	add.w	r2, r2, ip, lsl #4
 8005040:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 8005044:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8005048:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 800504c:	f8a2 c400 	strh.w	ip, [r2, #1024]	; 0x400
 8005050:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8005054:	b292      	uxth	r2, r2
 8005056:	441a      	add	r2, r3
 8005058:	f891 c000 	ldrb.w	ip, [r1]
 800505c:	eb02 120c 	add.w	r2, r2, ip, lsl #4
 8005060:	f8b1 c00a 	ldrh.w	ip, [r1, #10]
 8005064:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8005068:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 800506c:	f8a2 c408 	strh.w	ip, [r2, #1032]	; 0x408
    if (ep->is_in == 0U)
 8005070:	784a      	ldrb	r2, [r1, #1]
 8005072:	2a00      	cmp	r2, #0
 8005074:	d141      	bne.n	80050fa <USB_ActivateEndpoint+0x2ca>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005076:	780c      	ldrb	r4, [r1, #0]
 8005078:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800507c:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8005080:	d00c      	beq.n	800509c <USB_ActivateEndpoint+0x26c>
 8005082:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8005086:	b292      	uxth	r2, r2
 8005088:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800508c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005090:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8005094:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005098:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800509c:	780c      	ldrb	r4, [r1, #0]
 800509e:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80050a2:	f012 0f40 	tst.w	r2, #64	; 0x40
 80050a6:	d00c      	beq.n	80050c2 <USB_ActivateEndpoint+0x292>
 80050a8:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80050ac:	b292      	uxth	r2, r2
 80050ae:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80050b2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80050b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80050ba:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80050be:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80050c2:	f891 c000 	ldrb.w	ip, [r1]
 80050c6:	f833 202c 	ldrh.w	r2, [r3, ip, lsl #2]
 80050ca:	b292      	uxth	r2, r2
 80050cc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80050d0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80050d4:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 80050d8:	f248 0480 	movw	r4, #32896	; 0x8080
 80050dc:	4322      	orrs	r2, r4
 80050de:	f823 202c 	strh.w	r2, [r3, ip, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80050e2:	7809      	ldrb	r1, [r1, #0]
 80050e4:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80050e8:	b292      	uxth	r2, r2
 80050ea:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80050ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050f2:	4322      	orrs	r2, r4
 80050f4:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 80050f8:	e76b      	b.n	8004fd2 <USB_ActivateEndpoint+0x1a2>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80050fa:	780c      	ldrb	r4, [r1, #0]
 80050fc:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8005100:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8005104:	d00c      	beq.n	8005120 <USB_ActivateEndpoint+0x2f0>
 8005106:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800510a:	b292      	uxth	r2, r2
 800510c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8005110:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005114:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8005118:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800511c:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005120:	780c      	ldrb	r4, [r1, #0]
 8005122:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8005126:	f012 0f40 	tst.w	r2, #64	; 0x40
 800512a:	d00c      	beq.n	8005146 <USB_ActivateEndpoint+0x316>
 800512c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8005130:	b292      	uxth	r2, r2
 8005132:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8005136:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800513a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800513e:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8005142:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 8005146:	78ca      	ldrb	r2, [r1, #3]
 8005148:	2a01      	cmp	r2, #1
 800514a:	d01e      	beq.n	800518a <USB_ActivateEndpoint+0x35a>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800514c:	780c      	ldrb	r4, [r1, #0]
 800514e:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8005152:	b292      	uxth	r2, r2
 8005154:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8005158:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800515c:	f082 0220 	eor.w	r2, r2, #32
 8005160:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005164:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005168:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800516c:	7809      	ldrb	r1, [r1, #0]
 800516e:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8005172:	b292      	uxth	r2, r2
 8005174:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005178:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800517c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005180:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005184:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8005188:	e723      	b.n	8004fd2 <USB_ActivateEndpoint+0x1a2>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800518a:	780c      	ldrb	r4, [r1, #0]
 800518c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8005190:	b292      	uxth	r2, r2
 8005192:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8005196:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800519a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800519e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80051a2:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
 80051a6:	e7e1      	b.n	800516c <USB_ActivateEndpoint+0x33c>

080051a8 <USB_DeactivateEndpoint>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 80051a8:	7b0b      	ldrb	r3, [r1, #12]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d146      	bne.n	800523c <USB_DeactivateEndpoint+0x94>
  {
    if (ep->is_in != 0U)
 80051ae:	784b      	ldrb	r3, [r1, #1]
 80051b0:	b313      	cbz	r3, 80051f8 <USB_DeactivateEndpoint+0x50>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80051b2:	780a      	ldrb	r2, [r1, #0]
 80051b4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80051b8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80051bc:	d00c      	beq.n	80051d8 <USB_DeactivateEndpoint+0x30>
 80051be:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80051c2:	b29b      	uxth	r3, r3
 80051c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051d0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80051d4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80051d8:	780a      	ldrb	r2, [r1, #0]
 80051da:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80051de:	b29b      	uxth	r3, r3
 80051e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051f0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return HAL_OK;
}
 80051f4:	2000      	movs	r0, #0
 80051f6:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80051f8:	780a      	ldrb	r2, [r1, #0]
 80051fa:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80051fe:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8005202:	d00c      	beq.n	800521e <USB_DeactivateEndpoint+0x76>
 8005204:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005208:	b29b      	uxth	r3, r3
 800520a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800520e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005212:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005216:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800521a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800521e:	780a      	ldrb	r2, [r1, #0]
 8005220:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005224:	b29b      	uxth	r3, r3
 8005226:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800522a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800522e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005232:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005236:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 800523a:	e7db      	b.n	80051f4 <USB_DeactivateEndpoint+0x4c>
    if (ep->is_in == 0U)
 800523c:	784b      	ldrb	r3, [r1, #1]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d14e      	bne.n	80052e0 <USB_DeactivateEndpoint+0x138>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005242:	780a      	ldrb	r2, [r1, #0]
 8005244:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005248:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800524c:	d00c      	beq.n	8005268 <USB_DeactivateEndpoint+0xc0>
 800524e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005252:	b29b      	uxth	r3, r3
 8005254:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005258:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800525c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005260:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005264:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005268:	780a      	ldrb	r2, [r1, #0]
 800526a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800526e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005272:	d00c      	beq.n	800528e <USB_DeactivateEndpoint+0xe6>
 8005274:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005278:	b29b      	uxth	r3, r3
 800527a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800527e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005282:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005286:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800528a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 800528e:	780a      	ldrb	r2, [r1, #0]
 8005290:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005294:	b29b      	uxth	r3, r3
 8005296:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800529a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800529e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052a2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80052a6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80052aa:	780b      	ldrb	r3, [r1, #0]
 80052ac:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80052b0:	b292      	uxth	r2, r2
 80052b2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80052b6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80052ba:	f248 0c80 	movw	ip, #32896	; 0x8080
 80052be:	ea42 020c 	orr.w	r2, r2, ip
 80052c2:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80052c6:	780a      	ldrb	r2, [r1, #0]
 80052c8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80052cc:	b29b      	uxth	r3, r3
 80052ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052d6:	ea43 030c 	orr.w	r3, r3, ip
 80052da:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 80052de:	e789      	b.n	80051f4 <USB_DeactivateEndpoint+0x4c>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80052e0:	780a      	ldrb	r2, [r1, #0]
 80052e2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80052e6:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80052ea:	d00c      	beq.n	8005306 <USB_DeactivateEndpoint+0x15e>
 80052ec:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80052fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005302:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005306:	780a      	ldrb	r2, [r1, #0]
 8005308:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800530c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005310:	d00c      	beq.n	800532c <USB_DeactivateEndpoint+0x184>
 8005312:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005316:	b29b      	uxth	r3, r3
 8005318:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800531c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005320:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005324:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005328:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 800532c:	780a      	ldrb	r2, [r1, #0]
 800532e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005332:	b29b      	uxth	r3, r3
 8005334:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005338:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800533c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005340:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005344:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005348:	780b      	ldrb	r3, [r1, #0]
 800534a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800534e:	b292      	uxth	r2, r2
 8005350:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8005354:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005358:	f248 0c80 	movw	ip, #32896	; 0x8080
 800535c:	ea42 020c 	orr.w	r2, r2, ip
 8005360:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005364:	780a      	ldrb	r2, [r1, #0]
 8005366:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800536a:	b29b      	uxth	r3, r3
 800536c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005370:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005374:	ea43 030c 	orr.w	r3, r3, ip
 8005378:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 800537c:	e73a      	b.n	80051f4 <USB_DeactivateEndpoint+0x4c>

0800537e <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 800537e:	784b      	ldrb	r3, [r1, #1]
 8005380:	b18b      	cbz	r3, 80053a6 <USB_EPSetStall+0x28>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005382:	780a      	ldrb	r2, [r1, #0]
 8005384:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005388:	b29b      	uxth	r3, r3
 800538a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800538e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005392:	f083 0310 	eor.w	r3, r3, #16
 8005396:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800539a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800539e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
  }

  return HAL_OK;
}
 80053a2:	2000      	movs	r0, #0
 80053a4:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80053a6:	780a      	ldrb	r2, [r1, #0]
 80053a8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80053ac:	b29b      	uxth	r3, r3
 80053ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053b6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80053ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053c2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 80053c6:	e7ec      	b.n	80053a2 <USB_EPSetStall+0x24>

080053c8 <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 80053c8:	7b0b      	ldrb	r3, [r1, #12]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d14b      	bne.n	8005466 <USB_EPClearStall+0x9e>
  {
    if (ep->is_in != 0U)
 80053ce:	784b      	ldrb	r3, [r1, #1]
 80053d0:	b333      	cbz	r3, 8005420 <USB_EPClearStall+0x58>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80053d2:	780a      	ldrb	r2, [r1, #0]
 80053d4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80053d8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80053dc:	d00c      	beq.n	80053f8 <USB_EPClearStall+0x30>
 80053de:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80053e2:	b29b      	uxth	r3, r3
 80053e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053f0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80053f4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 80053f8:	78cb      	ldrb	r3, [r1, #3]
 80053fa:	2b01      	cmp	r3, #1
 80053fc:	d033      	beq.n	8005466 <USB_EPClearStall+0x9e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80053fe:	780a      	ldrb	r2, [r1, #0]
 8005400:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005404:	b29b      	uxth	r3, r3
 8005406:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800540a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800540e:	f083 0320 	eor.w	r3, r3, #32
 8005412:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005416:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800541a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 800541e:	e022      	b.n	8005466 <USB_EPClearStall+0x9e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005420:	780a      	ldrb	r2, [r1, #0]
 8005422:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005426:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800542a:	d00c      	beq.n	8005446 <USB_EPClearStall+0x7e>
 800542c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005430:	b29b      	uxth	r3, r3
 8005432:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005436:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800543a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800543e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005442:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005446:	780a      	ldrb	r2, [r1, #0]
 8005448:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800544c:	b29b      	uxth	r3, r3
 800544e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005452:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005456:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800545a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800545e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005462:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 8005466:	2000      	movs	r0, #0
 8005468:	4770      	bx	lr

0800546a <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 800546a:	b911      	cbnz	r1, 8005472 <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800546c:	2380      	movs	r3, #128	; 0x80
 800546e:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 8005472:	2000      	movs	r0, #0
 8005474:	4770      	bx	lr

08005476 <USB_DevConnect>:
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8005476:	2000      	movs	r0, #0
 8005478:	4770      	bx	lr

0800547a <USB_DevDisconnect>:
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 800547a:	2000      	movs	r0, #0
 800547c:	4770      	bx	lr

0800547e <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800547e:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 8005482:	b280      	uxth	r0, r0
 8005484:	4770      	bx	lr

08005486 <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8005486:	2000      	movs	r0, #0
 8005488:	4770      	bx	lr

0800548a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800548a:	b410      	push	{r4}
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800548c:	1c5c      	adds	r4, r3, #1
 800548e:	0864      	lsrs	r4, r4, #1
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005490:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8005494:	f502 6280 	add.w	r2, r2, #1024	; 0x400

  for (i = n; i != 0U; i--)
 8005498:	e007      	b.n	80054aa <USB_WritePMA+0x20>
  {
    temp1 = *pBuf;
 800549a:	780b      	ldrb	r3, [r1, #0]
    pBuf++;
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800549c:	7848      	ldrb	r0, [r1, #1]
    *pdwVal = (uint16_t)temp2;
 800549e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80054a2:	f822 3b04 	strh.w	r3, [r2], #4

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 80054a6:	3102      	adds	r1, #2
  for (i = n; i != 0U; i--)
 80054a8:	3c01      	subs	r4, #1
 80054aa:	2c00      	cmp	r4, #0
 80054ac:	d1f5      	bne.n	800549a <USB_WritePMA+0x10>
  }
}
 80054ae:	bc10      	pop	{r4}
 80054b0:	4770      	bx	lr

080054b2 <USB_EPStartXfer>:
{
 80054b2:	b570      	push	{r4, r5, r6, lr}
 80054b4:	4605      	mov	r5, r0
 80054b6:	460c      	mov	r4, r1
  if (ep->is_in == 1U)
 80054b8:	784b      	ldrb	r3, [r1, #1]
 80054ba:	2b01      	cmp	r3, #1
 80054bc:	d037      	beq.n	800552e <USB_EPStartXfer+0x7c>
    if (ep->doublebuffer == 0U)
 80054be:	7b0a      	ldrb	r2, [r1, #12]
 80054c0:	2a00      	cmp	r2, #0
 80054c2:	f040 8326 	bne.w	8005b12 <USB_EPStartXfer+0x660>
      if (ep->xfer_len > ep->maxpacket)
 80054c6:	698b      	ldr	r3, [r1, #24]
 80054c8:	690a      	ldr	r2, [r1, #16]
 80054ca:	4293      	cmp	r3, r2
 80054cc:	f240 8304 	bls.w	8005ad8 <USB_EPStartXfer+0x626>
        ep->xfer_len -= len;
 80054d0:	1a9b      	subs	r3, r3, r2
 80054d2:	618b      	str	r3, [r1, #24]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80054d4:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 80054d8:	b29b      	uxth	r3, r3
 80054da:	442b      	add	r3, r5
 80054dc:	7821      	ldrb	r1, [r4, #0]
 80054de:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80054e2:	2a00      	cmp	r2, #0
 80054e4:	f040 82fc 	bne.w	8005ae0 <USB_EPStartXfer+0x62e>
 80054e8:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 80054ec:	b292      	uxth	r2, r2
 80054ee:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80054f2:	b292      	uxth	r2, r2
 80054f4:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 80054f8:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 80054fc:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8005500:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8005504:	b292      	uxth	r2, r2
 8005506:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800550a:	7822      	ldrb	r2, [r4, #0]
 800550c:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8005510:	b29b      	uxth	r3, r3
 8005512:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800551a:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800551e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005522:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005526:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
  return HAL_OK;
 800552a:	2000      	movs	r0, #0
}
 800552c:	bd70      	pop	{r4, r5, r6, pc}
    if (ep->xfer_len > ep->maxpacket)
 800552e:	698e      	ldr	r6, [r1, #24]
 8005530:	690a      	ldr	r2, [r1, #16]
 8005532:	4296      	cmp	r6, r2
 8005534:	d900      	bls.n	8005538 <USB_EPStartXfer+0x86>
      len = ep->maxpacket;
 8005536:	4616      	mov	r6, r2
    if (ep->doublebuffer == 0U)
 8005538:	7b23      	ldrb	r3, [r4, #12]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d039      	beq.n	80055b2 <USB_EPStartXfer+0x100>
      if (ep->type == EP_TYPE_BULK)
 800553e:	78e3      	ldrb	r3, [r4, #3]
 8005540:	2b02      	cmp	r3, #2
 8005542:	d058      	beq.n	80055f6 <USB_EPStartXfer+0x144>
        PCD_SET_EP_DBUF(USBx, ep->num);
 8005544:	7822      	ldrb	r2, [r4, #0]
 8005546:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 800554a:	b29b      	uxth	r3, r3
 800554c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005550:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005554:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005558:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800555c:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
        ep->xfer_len_db -= len;
 8005560:	6a23      	ldr	r3, [r4, #32]
 8005562:	1b9b      	subs	r3, r3, r6
 8005564:	6223      	str	r3, [r4, #32]
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005566:	7823      	ldrb	r3, [r4, #0]
 8005568:	f835 2023 	ldrh.w	r2, [r5, r3, lsl #2]
 800556c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005570:	f000 8226 	beq.w	80059c0 <USB_EPStartXfer+0x50e>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005574:	7862      	ldrb	r2, [r4, #1]
 8005576:	2a00      	cmp	r2, #0
 8005578:	f040 81ca 	bne.w	8005910 <USB_EPStartXfer+0x45e>
 800557c:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8005580:	b292      	uxth	r2, r2
 8005582:	442a      	add	r2, r5
 8005584:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8005588:	2e00      	cmp	r6, #0
 800558a:	f040 81a8 	bne.w	80058de <USB_EPStartXfer+0x42c>
 800558e:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 8005592:	b292      	uxth	r2, r2
 8005594:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8005598:	b292      	uxth	r2, r2
 800559a:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 800559e:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 80055a2:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80055a6:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80055aa:	b292      	uxth	r2, r2
 80055ac:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 80055b0:	e1b0      	b.n	8005914 <USB_EPStartXfer+0x462>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80055b2:	b2b6      	uxth	r6, r6
 80055b4:	4633      	mov	r3, r6
 80055b6:	88e2      	ldrh	r2, [r4, #6]
 80055b8:	6961      	ldr	r1, [r4, #20]
 80055ba:	4628      	mov	r0, r5
 80055bc:	f7ff ff65 	bl	800548a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80055c0:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	442b      	add	r3, r5
 80055c8:	7822      	ldrb	r2, [r4, #0]
 80055ca:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 80055ce:	f8a3 6404 	strh.w	r6, [r3, #1028]	; 0x404
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80055d2:	7822      	ldrb	r2, [r4, #0]
 80055d4:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 80055d8:	b29b      	uxth	r3, r3
 80055da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055e2:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 80055e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055ee:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
  return HAL_OK;
 80055f2:	2000      	movs	r0, #0
 80055f4:	e79a      	b.n	800552c <USB_EPStartXfer+0x7a>
        if (ep->xfer_len_db > ep->maxpacket)
 80055f6:	6a23      	ldr	r3, [r4, #32]
 80055f8:	429a      	cmp	r2, r3
 80055fa:	f080 8152 	bcs.w	80058a2 <USB_EPStartXfer+0x3f0>
          PCD_SET_EP_DBUF(USBx, ep->num);
 80055fe:	7822      	ldrb	r2, [r4, #0]
 8005600:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8005604:	b29b      	uxth	r3, r3
 8005606:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800560a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800560e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005612:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005616:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
          ep->xfer_len_db -= len;
 800561a:	6a23      	ldr	r3, [r4, #32]
 800561c:	1b9b      	subs	r3, r3, r6
 800561e:	6223      	str	r3, [r4, #32]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005620:	7823      	ldrb	r3, [r4, #0]
 8005622:	f835 2023 	ldrh.w	r2, [r5, r3, lsl #2]
 8005626:	f012 0f40 	tst.w	r2, #64	; 0x40
 800562a:	f000 809d 	beq.w	8005768 <USB_EPStartXfer+0x2b6>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800562e:	7862      	ldrb	r2, [r4, #1]
 8005630:	bb8a      	cbnz	r2, 8005696 <USB_EPStartXfer+0x1e4>
 8005632:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8005636:	b292      	uxth	r2, r2
 8005638:	442a      	add	r2, r5
 800563a:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 800563e:	b98e      	cbnz	r6, 8005664 <USB_EPStartXfer+0x1b2>
 8005640:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 8005644:	b292      	uxth	r2, r2
 8005646:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800564a:	b292      	uxth	r2, r2
 800564c:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8005650:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 8005654:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8005658:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800565c:	b292      	uxth	r2, r2
 800565e:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8005662:	e01a      	b.n	800569a <USB_EPStartXfer+0x1e8>
 8005664:	2e3e      	cmp	r6, #62	; 0x3e
 8005666:	d809      	bhi.n	800567c <USB_EPStartXfer+0x1ca>
 8005668:	0872      	lsrs	r2, r6, #1
 800566a:	f016 0f01 	tst.w	r6, #1
 800566e:	d000      	beq.n	8005672 <USB_EPStartXfer+0x1c0>
 8005670:	3201      	adds	r2, #1
 8005672:	0292      	lsls	r2, r2, #10
 8005674:	b292      	uxth	r2, r2
 8005676:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 800567a:	e00e      	b.n	800569a <USB_EPStartXfer+0x1e8>
 800567c:	0972      	lsrs	r2, r6, #5
 800567e:	f016 0f1f 	tst.w	r6, #31
 8005682:	d100      	bne.n	8005686 <USB_EPStartXfer+0x1d4>
 8005684:	3a01      	subs	r2, #1
 8005686:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 800568a:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800568e:	b292      	uxth	r2, r2
 8005690:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8005694:	e001      	b.n	800569a <USB_EPStartXfer+0x1e8>
 8005696:	2a01      	cmp	r2, #1
 8005698:	d02b      	beq.n	80056f2 <USB_EPStartXfer+0x240>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800569a:	b2b3      	uxth	r3, r6
 800569c:	8962      	ldrh	r2, [r4, #10]
 800569e:	6961      	ldr	r1, [r4, #20]
 80056a0:	4628      	mov	r0, r5
 80056a2:	f7ff fef2 	bl	800548a <USB_WritePMA>
            ep->xfer_buff += len;
 80056a6:	6963      	ldr	r3, [r4, #20]
 80056a8:	4433      	add	r3, r6
 80056aa:	6163      	str	r3, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 80056ac:	6a23      	ldr	r3, [r4, #32]
 80056ae:	6922      	ldr	r2, [r4, #16]
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d928      	bls.n	8005706 <USB_EPStartXfer+0x254>
              ep->xfer_len_db -= len;
 80056b4:	1b9b      	subs	r3, r3, r6
 80056b6:	6223      	str	r3, [r4, #32]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80056b8:	7863      	ldrb	r3, [r4, #1]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d140      	bne.n	8005740 <USB_EPStartXfer+0x28e>
 80056be:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	442b      	add	r3, r5
 80056c6:	7822      	ldrb	r2, [r4, #0]
 80056c8:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 80056cc:	b9fe      	cbnz	r6, 800570e <USB_EPStartXfer+0x25c>
 80056ce:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 80056d2:	b292      	uxth	r2, r2
 80056d4:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80056d8:	b292      	uxth	r2, r2
 80056da:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 80056de:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 80056e2:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80056e6:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80056ea:	b292      	uxth	r2, r2
 80056ec:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 80056f0:	e028      	b.n	8005744 <USB_EPStartXfer+0x292>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80056f2:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 80056f6:	b292      	uxth	r2, r2
 80056f8:	442a      	add	r2, r5
 80056fa:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 80056fe:	b2b2      	uxth	r2, r6
 8005700:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8005704:	e7c9      	b.n	800569a <USB_EPStartXfer+0x1e8>
              ep->xfer_len_db = 0U;
 8005706:	2200      	movs	r2, #0
 8005708:	6222      	str	r2, [r4, #32]
              len = ep->xfer_len_db;
 800570a:	461e      	mov	r6, r3
 800570c:	e7d4      	b.n	80056b8 <USB_EPStartXfer+0x206>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800570e:	2e3e      	cmp	r6, #62	; 0x3e
 8005710:	d809      	bhi.n	8005726 <USB_EPStartXfer+0x274>
 8005712:	0872      	lsrs	r2, r6, #1
 8005714:	f016 0f01 	tst.w	r6, #1
 8005718:	d000      	beq.n	800571c <USB_EPStartXfer+0x26a>
 800571a:	3201      	adds	r2, #1
 800571c:	0292      	lsls	r2, r2, #10
 800571e:	b292      	uxth	r2, r2
 8005720:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8005724:	e00e      	b.n	8005744 <USB_EPStartXfer+0x292>
 8005726:	0972      	lsrs	r2, r6, #5
 8005728:	f016 0f1f 	tst.w	r6, #31
 800572c:	d100      	bne.n	8005730 <USB_EPStartXfer+0x27e>
 800572e:	3a01      	subs	r2, #1
 8005730:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8005734:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8005738:	b292      	uxth	r2, r2
 800573a:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 800573e:	e001      	b.n	8005744 <USB_EPStartXfer+0x292>
 8005740:	2b01      	cmp	r3, #1
 8005742:	d006      	beq.n	8005752 <USB_EPStartXfer+0x2a0>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005744:	b2b3      	uxth	r3, r6
 8005746:	8922      	ldrh	r2, [r4, #8]
 8005748:	6961      	ldr	r1, [r4, #20]
 800574a:	4628      	mov	r0, r5
 800574c:	f7ff fe9d 	bl	800548a <USB_WritePMA>
 8005750:	e73f      	b.n	80055d2 <USB_EPStartXfer+0x120>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005752:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8005756:	b29b      	uxth	r3, r3
 8005758:	442b      	add	r3, r5
 800575a:	7822      	ldrb	r2, [r4, #0]
 800575c:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8005760:	b2b2      	uxth	r2, r6
 8005762:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8005766:	e7ed      	b.n	8005744 <USB_EPStartXfer+0x292>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005768:	7862      	ldrb	r2, [r4, #1]
 800576a:	bb8a      	cbnz	r2, 80057d0 <USB_EPStartXfer+0x31e>
 800576c:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8005770:	b292      	uxth	r2, r2
 8005772:	442a      	add	r2, r5
 8005774:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8005778:	b98e      	cbnz	r6, 800579e <USB_EPStartXfer+0x2ec>
 800577a:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 800577e:	b292      	uxth	r2, r2
 8005780:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8005784:	b292      	uxth	r2, r2
 8005786:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 800578a:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 800578e:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8005792:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8005796:	b292      	uxth	r2, r2
 8005798:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 800579c:	e01a      	b.n	80057d4 <USB_EPStartXfer+0x322>
 800579e:	2e3e      	cmp	r6, #62	; 0x3e
 80057a0:	d809      	bhi.n	80057b6 <USB_EPStartXfer+0x304>
 80057a2:	0872      	lsrs	r2, r6, #1
 80057a4:	f016 0f01 	tst.w	r6, #1
 80057a8:	d000      	beq.n	80057ac <USB_EPStartXfer+0x2fa>
 80057aa:	3201      	adds	r2, #1
 80057ac:	0292      	lsls	r2, r2, #10
 80057ae:	b292      	uxth	r2, r2
 80057b0:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 80057b4:	e00e      	b.n	80057d4 <USB_EPStartXfer+0x322>
 80057b6:	0972      	lsrs	r2, r6, #5
 80057b8:	f016 0f1f 	tst.w	r6, #31
 80057bc:	d100      	bne.n	80057c0 <USB_EPStartXfer+0x30e>
 80057be:	3a01      	subs	r2, #1
 80057c0:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 80057c4:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80057c8:	b292      	uxth	r2, r2
 80057ca:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 80057ce:	e001      	b.n	80057d4 <USB_EPStartXfer+0x322>
 80057d0:	2a01      	cmp	r2, #1
 80057d2:	d02b      	beq.n	800582c <USB_EPStartXfer+0x37a>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80057d4:	b2b3      	uxth	r3, r6
 80057d6:	8922      	ldrh	r2, [r4, #8]
 80057d8:	6961      	ldr	r1, [r4, #20]
 80057da:	4628      	mov	r0, r5
 80057dc:	f7ff fe55 	bl	800548a <USB_WritePMA>
            ep->xfer_buff += len;
 80057e0:	6963      	ldr	r3, [r4, #20]
 80057e2:	4433      	add	r3, r6
 80057e4:	6163      	str	r3, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 80057e6:	6a23      	ldr	r3, [r4, #32]
 80057e8:	6922      	ldr	r2, [r4, #16]
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d928      	bls.n	8005840 <USB_EPStartXfer+0x38e>
              ep->xfer_len_db -= len;
 80057ee:	1b9b      	subs	r3, r3, r6
 80057f0:	6223      	str	r3, [r4, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80057f2:	7863      	ldrb	r3, [r4, #1]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d140      	bne.n	800587a <USB_EPStartXfer+0x3c8>
 80057f8:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 80057fc:	b29b      	uxth	r3, r3
 80057fe:	442b      	add	r3, r5
 8005800:	7822      	ldrb	r2, [r4, #0]
 8005802:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8005806:	b9fe      	cbnz	r6, 8005848 <USB_EPStartXfer+0x396>
 8005808:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 800580c:	b292      	uxth	r2, r2
 800580e:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8005812:	b292      	uxth	r2, r2
 8005814:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8005818:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 800581c:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8005820:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8005824:	b292      	uxth	r2, r2
 8005826:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 800582a:	e028      	b.n	800587e <USB_EPStartXfer+0x3cc>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800582c:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8005830:	b292      	uxth	r2, r2
 8005832:	442a      	add	r2, r5
 8005834:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8005838:	b2b2      	uxth	r2, r6
 800583a:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 800583e:	e7c9      	b.n	80057d4 <USB_EPStartXfer+0x322>
              ep->xfer_len_db = 0U;
 8005840:	2200      	movs	r2, #0
 8005842:	6222      	str	r2, [r4, #32]
              len = ep->xfer_len_db;
 8005844:	461e      	mov	r6, r3
 8005846:	e7d4      	b.n	80057f2 <USB_EPStartXfer+0x340>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005848:	2e3e      	cmp	r6, #62	; 0x3e
 800584a:	d809      	bhi.n	8005860 <USB_EPStartXfer+0x3ae>
 800584c:	0872      	lsrs	r2, r6, #1
 800584e:	f016 0f01 	tst.w	r6, #1
 8005852:	d000      	beq.n	8005856 <USB_EPStartXfer+0x3a4>
 8005854:	3201      	adds	r2, #1
 8005856:	0292      	lsls	r2, r2, #10
 8005858:	b292      	uxth	r2, r2
 800585a:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 800585e:	e00e      	b.n	800587e <USB_EPStartXfer+0x3cc>
 8005860:	0972      	lsrs	r2, r6, #5
 8005862:	f016 0f1f 	tst.w	r6, #31
 8005866:	d100      	bne.n	800586a <USB_EPStartXfer+0x3b8>
 8005868:	3a01      	subs	r2, #1
 800586a:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 800586e:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8005872:	b292      	uxth	r2, r2
 8005874:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8005878:	e001      	b.n	800587e <USB_EPStartXfer+0x3cc>
 800587a:	2b01      	cmp	r3, #1
 800587c:	d006      	beq.n	800588c <USB_EPStartXfer+0x3da>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800587e:	b2b3      	uxth	r3, r6
 8005880:	8962      	ldrh	r2, [r4, #10]
 8005882:	6961      	ldr	r1, [r4, #20]
 8005884:	4628      	mov	r0, r5
 8005886:	f7ff fe00 	bl	800548a <USB_WritePMA>
 800588a:	e6a2      	b.n	80055d2 <USB_EPStartXfer+0x120>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800588c:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8005890:	b29b      	uxth	r3, r3
 8005892:	442b      	add	r3, r5
 8005894:	7822      	ldrb	r2, [r4, #0]
 8005896:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 800589a:	b2b2      	uxth	r2, r6
 800589c:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 80058a0:	e7ed      	b.n	800587e <USB_EPStartXfer+0x3cc>
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80058a2:	7821      	ldrb	r1, [r4, #0]
 80058a4:	f835 2021 	ldrh.w	r2, [r5, r1, lsl #2]
 80058a8:	b292      	uxth	r2, r2
 80058aa:	f422 42e2 	bic.w	r2, r2, #28928	; 0x7100
 80058ae:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80058b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80058b6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80058ba:	f825 2021 	strh.w	r2, [r5, r1, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80058be:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 80058c2:	b292      	uxth	r2, r2
 80058c4:	442a      	add	r2, r5
 80058c6:	7821      	ldrb	r1, [r4, #0]
 80058c8:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80058cc:	b29b      	uxth	r3, r3
 80058ce:	f8a2 3404 	strh.w	r3, [r2, #1028]	; 0x404
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80058d2:	8922      	ldrh	r2, [r4, #8]
 80058d4:	6961      	ldr	r1, [r4, #20]
 80058d6:	4628      	mov	r0, r5
 80058d8:	f7ff fdd7 	bl	800548a <USB_WritePMA>
 80058dc:	e679      	b.n	80055d2 <USB_EPStartXfer+0x120>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80058de:	2e3e      	cmp	r6, #62	; 0x3e
 80058e0:	d809      	bhi.n	80058f6 <USB_EPStartXfer+0x444>
 80058e2:	0872      	lsrs	r2, r6, #1
 80058e4:	f016 0f01 	tst.w	r6, #1
 80058e8:	d000      	beq.n	80058ec <USB_EPStartXfer+0x43a>
 80058ea:	3201      	adds	r2, #1
 80058ec:	0292      	lsls	r2, r2, #10
 80058ee:	b292      	uxth	r2, r2
 80058f0:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 80058f4:	e00e      	b.n	8005914 <USB_EPStartXfer+0x462>
 80058f6:	0972      	lsrs	r2, r6, #5
 80058f8:	f016 0f1f 	tst.w	r6, #31
 80058fc:	d100      	bne.n	8005900 <USB_EPStartXfer+0x44e>
 80058fe:	3a01      	subs	r2, #1
 8005900:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8005904:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8005908:	b292      	uxth	r2, r2
 800590a:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 800590e:	e001      	b.n	8005914 <USB_EPStartXfer+0x462>
 8005910:	2a01      	cmp	r2, #1
 8005912:	d026      	beq.n	8005962 <USB_EPStartXfer+0x4b0>
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005914:	b2b3      	uxth	r3, r6
 8005916:	8962      	ldrh	r2, [r4, #10]
 8005918:	6961      	ldr	r1, [r4, #20]
 800591a:	4628      	mov	r0, r5
 800591c:	f7ff fdb5 	bl	800548a <USB_WritePMA>
          ep->xfer_buff += len;
 8005920:	6963      	ldr	r3, [r4, #20]
 8005922:	4433      	add	r3, r6
 8005924:	6163      	str	r3, [r4, #20]
          if (ep->xfer_len_db > ep->maxpacket)
 8005926:	6a23      	ldr	r3, [r4, #32]
 8005928:	6922      	ldr	r2, [r4, #16]
 800592a:	4293      	cmp	r3, r2
 800592c:	d923      	bls.n	8005976 <USB_EPStartXfer+0x4c4>
            ep->xfer_len_db -= len;
 800592e:	1b9b      	subs	r3, r3, r6
 8005930:	6223      	str	r3, [r4, #32]
          if (len > 0U)
 8005932:	2e00      	cmp	r6, #0
 8005934:	f43f ae4d 	beq.w	80055d2 <USB_EPStartXfer+0x120>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005938:	7863      	ldrb	r3, [r4, #1]
 800593a:	bb6b      	cbnz	r3, 8005998 <USB_EPStartXfer+0x4e6>
 800593c:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8005940:	b29b      	uxth	r3, r3
 8005942:	442b      	add	r3, r5
 8005944:	7822      	ldrb	r2, [r4, #0]
 8005946:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 800594a:	2e3e      	cmp	r6, #62	; 0x3e
 800594c:	d817      	bhi.n	800597e <USB_EPStartXfer+0x4cc>
 800594e:	0872      	lsrs	r2, r6, #1
 8005950:	f016 0f01 	tst.w	r6, #1
 8005954:	d000      	beq.n	8005958 <USB_EPStartXfer+0x4a6>
 8005956:	3201      	adds	r2, #1
 8005958:	0292      	lsls	r2, r2, #10
 800595a:	b292      	uxth	r2, r2
 800595c:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8005960:	e01c      	b.n	800599c <USB_EPStartXfer+0x4ea>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005962:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8005966:	b292      	uxth	r2, r2
 8005968:	442a      	add	r2, r5
 800596a:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 800596e:	b2b2      	uxth	r2, r6
 8005970:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8005974:	e7ce      	b.n	8005914 <USB_EPStartXfer+0x462>
            ep->xfer_len_db = 0U;
 8005976:	2200      	movs	r2, #0
 8005978:	6222      	str	r2, [r4, #32]
            len = ep->xfer_len_db;
 800597a:	461e      	mov	r6, r3
 800597c:	e7d9      	b.n	8005932 <USB_EPStartXfer+0x480>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800597e:	0972      	lsrs	r2, r6, #5
 8005980:	f016 0f1f 	tst.w	r6, #31
 8005984:	d100      	bne.n	8005988 <USB_EPStartXfer+0x4d6>
 8005986:	3a01      	subs	r2, #1
 8005988:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 800598c:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8005990:	b292      	uxth	r2, r2
 8005992:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8005996:	e001      	b.n	800599c <USB_EPStartXfer+0x4ea>
 8005998:	2b01      	cmp	r3, #1
 800599a:	d006      	beq.n	80059aa <USB_EPStartXfer+0x4f8>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800599c:	b2b3      	uxth	r3, r6
 800599e:	8922      	ldrh	r2, [r4, #8]
 80059a0:	6961      	ldr	r1, [r4, #20]
 80059a2:	4628      	mov	r0, r5
 80059a4:	f7ff fd71 	bl	800548a <USB_WritePMA>
 80059a8:	e613      	b.n	80055d2 <USB_EPStartXfer+0x120>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80059aa:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 80059ae:	b29b      	uxth	r3, r3
 80059b0:	442b      	add	r3, r5
 80059b2:	7822      	ldrb	r2, [r4, #0]
 80059b4:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 80059b8:	b2b2      	uxth	r2, r6
 80059ba:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 80059be:	e7ed      	b.n	800599c <USB_EPStartXfer+0x4ea>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80059c0:	7862      	ldrb	r2, [r4, #1]
 80059c2:	bb8a      	cbnz	r2, 8005a28 <USB_EPStartXfer+0x576>
 80059c4:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 80059c8:	b292      	uxth	r2, r2
 80059ca:	442a      	add	r2, r5
 80059cc:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 80059d0:	b98e      	cbnz	r6, 80059f6 <USB_EPStartXfer+0x544>
 80059d2:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 80059d6:	b292      	uxth	r2, r2
 80059d8:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80059dc:	b292      	uxth	r2, r2
 80059de:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 80059e2:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 80059e6:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80059ea:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80059ee:	b292      	uxth	r2, r2
 80059f0:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 80059f4:	e01a      	b.n	8005a2c <USB_EPStartXfer+0x57a>
 80059f6:	2e3e      	cmp	r6, #62	; 0x3e
 80059f8:	d809      	bhi.n	8005a0e <USB_EPStartXfer+0x55c>
 80059fa:	0872      	lsrs	r2, r6, #1
 80059fc:	f016 0f01 	tst.w	r6, #1
 8005a00:	d000      	beq.n	8005a04 <USB_EPStartXfer+0x552>
 8005a02:	3201      	adds	r2, #1
 8005a04:	0292      	lsls	r2, r2, #10
 8005a06:	b292      	uxth	r2, r2
 8005a08:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8005a0c:	e00e      	b.n	8005a2c <USB_EPStartXfer+0x57a>
 8005a0e:	0972      	lsrs	r2, r6, #5
 8005a10:	f016 0f1f 	tst.w	r6, #31
 8005a14:	d100      	bne.n	8005a18 <USB_EPStartXfer+0x566>
 8005a16:	3a01      	subs	r2, #1
 8005a18:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8005a1c:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8005a20:	b292      	uxth	r2, r2
 8005a22:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8005a26:	e001      	b.n	8005a2c <USB_EPStartXfer+0x57a>
 8005a28:	2a01      	cmp	r2, #1
 8005a2a:	d026      	beq.n	8005a7a <USB_EPStartXfer+0x5c8>
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005a2c:	b2b3      	uxth	r3, r6
 8005a2e:	8922      	ldrh	r2, [r4, #8]
 8005a30:	6961      	ldr	r1, [r4, #20]
 8005a32:	4628      	mov	r0, r5
 8005a34:	f7ff fd29 	bl	800548a <USB_WritePMA>
          ep->xfer_buff += len;
 8005a38:	6963      	ldr	r3, [r4, #20]
 8005a3a:	4433      	add	r3, r6
 8005a3c:	6163      	str	r3, [r4, #20]
          if (ep->xfer_len_db > ep->maxpacket)
 8005a3e:	6a23      	ldr	r3, [r4, #32]
 8005a40:	6922      	ldr	r2, [r4, #16]
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d923      	bls.n	8005a8e <USB_EPStartXfer+0x5dc>
            ep->xfer_len_db -= len;
 8005a46:	1b9b      	subs	r3, r3, r6
 8005a48:	6223      	str	r3, [r4, #32]
          if (len > 0U)
 8005a4a:	2e00      	cmp	r6, #0
 8005a4c:	f43f adc1 	beq.w	80055d2 <USB_EPStartXfer+0x120>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005a50:	7863      	ldrb	r3, [r4, #1]
 8005a52:	bb6b      	cbnz	r3, 8005ab0 <USB_EPStartXfer+0x5fe>
 8005a54:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	442b      	add	r3, r5
 8005a5c:	7822      	ldrb	r2, [r4, #0]
 8005a5e:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8005a62:	2e3e      	cmp	r6, #62	; 0x3e
 8005a64:	d817      	bhi.n	8005a96 <USB_EPStartXfer+0x5e4>
 8005a66:	0872      	lsrs	r2, r6, #1
 8005a68:	f016 0f01 	tst.w	r6, #1
 8005a6c:	d000      	beq.n	8005a70 <USB_EPStartXfer+0x5be>
 8005a6e:	3201      	adds	r2, #1
 8005a70:	0292      	lsls	r2, r2, #10
 8005a72:	b292      	uxth	r2, r2
 8005a74:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8005a78:	e01c      	b.n	8005ab4 <USB_EPStartXfer+0x602>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005a7a:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8005a7e:	b292      	uxth	r2, r2
 8005a80:	442a      	add	r2, r5
 8005a82:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8005a86:	b2b2      	uxth	r2, r6
 8005a88:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8005a8c:	e7ce      	b.n	8005a2c <USB_EPStartXfer+0x57a>
            ep->xfer_len_db = 0U;
 8005a8e:	2200      	movs	r2, #0
 8005a90:	6222      	str	r2, [r4, #32]
            len = ep->xfer_len_db;
 8005a92:	461e      	mov	r6, r3
 8005a94:	e7d9      	b.n	8005a4a <USB_EPStartXfer+0x598>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005a96:	0972      	lsrs	r2, r6, #5
 8005a98:	f016 0f1f 	tst.w	r6, #31
 8005a9c:	d100      	bne.n	8005aa0 <USB_EPStartXfer+0x5ee>
 8005a9e:	3a01      	subs	r2, #1
 8005aa0:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8005aa4:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8005aa8:	b292      	uxth	r2, r2
 8005aaa:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8005aae:	e001      	b.n	8005ab4 <USB_EPStartXfer+0x602>
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	d006      	beq.n	8005ac2 <USB_EPStartXfer+0x610>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005ab4:	b2b3      	uxth	r3, r6
 8005ab6:	8962      	ldrh	r2, [r4, #10]
 8005ab8:	6961      	ldr	r1, [r4, #20]
 8005aba:	4628      	mov	r0, r5
 8005abc:	f7ff fce5 	bl	800548a <USB_WritePMA>
 8005ac0:	e587      	b.n	80055d2 <USB_EPStartXfer+0x120>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005ac2:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8005ac6:	b29b      	uxth	r3, r3
 8005ac8:	442b      	add	r3, r5
 8005aca:	7822      	ldrb	r2, [r4, #0]
 8005acc:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8005ad0:	b2b2      	uxth	r2, r6
 8005ad2:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8005ad6:	e7ed      	b.n	8005ab4 <USB_EPStartXfer+0x602>
        ep->xfer_len = 0U;
 8005ad8:	2200      	movs	r2, #0
 8005ada:	618a      	str	r2, [r1, #24]
        len = ep->xfer_len;
 8005adc:	461a      	mov	r2, r3
 8005ade:	e4f9      	b.n	80054d4 <USB_EPStartXfer+0x22>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005ae0:	2a3e      	cmp	r2, #62	; 0x3e
 8005ae2:	d809      	bhi.n	8005af8 <USB_EPStartXfer+0x646>
 8005ae4:	0851      	lsrs	r1, r2, #1
 8005ae6:	f012 0f01 	tst.w	r2, #1
 8005aea:	d000      	beq.n	8005aee <USB_EPStartXfer+0x63c>
 8005aec:	3101      	adds	r1, #1
 8005aee:	0289      	lsls	r1, r1, #10
 8005af0:	b289      	uxth	r1, r1
 8005af2:	f8a3 140c 	strh.w	r1, [r3, #1036]	; 0x40c
 8005af6:	e508      	b.n	800550a <USB_EPStartXfer+0x58>
 8005af8:	0951      	lsrs	r1, r2, #5
 8005afa:	f012 0f1f 	tst.w	r2, #31
 8005afe:	d100      	bne.n	8005b02 <USB_EPStartXfer+0x650>
 8005b00:	3901      	subs	r1, #1
 8005b02:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 8005b06:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8005b0a:	b289      	uxth	r1, r1
 8005b0c:	f8a3 140c 	strh.w	r1, [r3, #1036]	; 0x40c
 8005b10:	e4fb      	b.n	800550a <USB_EPStartXfer+0x58>
      if (ep->type == EP_TYPE_BULK)
 8005b12:	78ca      	ldrb	r2, [r1, #3]
 8005b14:	2a02      	cmp	r2, #2
 8005b16:	d045      	beq.n	8005ba4 <USB_EPStartXfer+0x6f2>
      else if (ep->type == EP_TYPE_ISOC)
 8005b18:	2a01      	cmp	r2, #1
 8005b1a:	f040 8120 	bne.w	8005d5e <USB_EPStartXfer+0x8ac>
        if (ep->xfer_len > ep->maxpacket)
 8005b1e:	6989      	ldr	r1, [r1, #24]
 8005b20:	6922      	ldr	r2, [r4, #16]
 8005b22:	4291      	cmp	r1, r2
 8005b24:	f240 80d4 	bls.w	8005cd0 <USB_EPStartXfer+0x81e>
          ep->xfer_len -= len;
 8005b28:	1a89      	subs	r1, r1, r2
 8005b2a:	61a1      	str	r1, [r4, #24]
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005b2c:	b9d3      	cbnz	r3, 8005b64 <USB_EPStartXfer+0x6b2>
 8005b2e:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8005b32:	b29b      	uxth	r3, r3
 8005b34:	442b      	add	r3, r5
 8005b36:	7821      	ldrb	r1, [r4, #0]
 8005b38:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8005b3c:	2a00      	cmp	r2, #0
 8005b3e:	f040 80cb 	bne.w	8005cd8 <USB_EPStartXfer+0x826>
 8005b42:	f8b3 1404 	ldrh.w	r1, [r3, #1028]	; 0x404
 8005b46:	b289      	uxth	r1, r1
 8005b48:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8005b4c:	b289      	uxth	r1, r1
 8005b4e:	f8a3 1404 	strh.w	r1, [r3, #1028]	; 0x404
 8005b52:	f8b3 1404 	ldrh.w	r1, [r3, #1028]	; 0x404
 8005b56:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8005b5a:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8005b5e:	b289      	uxth	r1, r1
 8005b60:	f8a3 1404 	strh.w	r1, [r3, #1028]	; 0x404
 8005b64:	7863      	ldrb	r3, [r4, #1]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	f040 80ea 	bne.w	8005d40 <USB_EPStartXfer+0x88e>
 8005b6c:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8005b70:	b29b      	uxth	r3, r3
 8005b72:	442b      	add	r3, r5
 8005b74:	7821      	ldrb	r1, [r4, #0]
 8005b76:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8005b7a:	2a00      	cmp	r2, #0
 8005b7c:	f040 80c5 	bne.w	8005d0a <USB_EPStartXfer+0x858>
 8005b80:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 8005b84:	b292      	uxth	r2, r2
 8005b86:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8005b8a:	b292      	uxth	r2, r2
 8005b8c:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8005b90:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 8005b94:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8005b98:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8005b9c:	b292      	uxth	r2, r2
 8005b9e:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8005ba2:	e4b2      	b.n	800550a <USB_EPStartXfer+0x58>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005ba4:	b9cb      	cbnz	r3, 8005bda <USB_EPStartXfer+0x728>
 8005ba6:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8005baa:	b29b      	uxth	r3, r3
 8005bac:	4403      	add	r3, r0
 8005bae:	780a      	ldrb	r2, [r1, #0]
 8005bb0:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8005bb4:	690a      	ldr	r2, [r1, #16]
 8005bb6:	bb72      	cbnz	r2, 8005c16 <USB_EPStartXfer+0x764>
 8005bb8:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 8005bbc:	b292      	uxth	r2, r2
 8005bbe:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8005bc2:	b292      	uxth	r2, r2
 8005bc4:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8005bc8:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 8005bcc:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8005bd0:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8005bd4:	b292      	uxth	r2, r2
 8005bd6:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8005bda:	7863      	ldrb	r3, [r4, #1]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d14c      	bne.n	8005c7a <USB_EPStartXfer+0x7c8>
 8005be0:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8005be4:	b29b      	uxth	r3, r3
 8005be6:	442b      	add	r3, r5
 8005be8:	7822      	ldrb	r2, [r4, #0]
 8005bea:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8005bee:	6922      	ldr	r2, [r4, #16]
 8005bf0:	bb52      	cbnz	r2, 8005c48 <USB_EPStartXfer+0x796>
 8005bf2:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 8005bf6:	b292      	uxth	r2, r2
 8005bf8:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8005bfc:	b292      	uxth	r2, r2
 8005bfe:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8005c02:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 8005c06:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8005c0a:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8005c0e:	b292      	uxth	r2, r2
 8005c10:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8005c14:	e033      	b.n	8005c7e <USB_EPStartXfer+0x7cc>
 8005c16:	2a3e      	cmp	r2, #62	; 0x3e
 8005c18:	d809      	bhi.n	8005c2e <USB_EPStartXfer+0x77c>
 8005c1a:	0851      	lsrs	r1, r2, #1
 8005c1c:	f012 0f01 	tst.w	r2, #1
 8005c20:	d000      	beq.n	8005c24 <USB_EPStartXfer+0x772>
 8005c22:	3101      	adds	r1, #1
 8005c24:	028a      	lsls	r2, r1, #10
 8005c26:	b292      	uxth	r2, r2
 8005c28:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8005c2c:	e7d5      	b.n	8005bda <USB_EPStartXfer+0x728>
 8005c2e:	0951      	lsrs	r1, r2, #5
 8005c30:	f012 0f1f 	tst.w	r2, #31
 8005c34:	d100      	bne.n	8005c38 <USB_EPStartXfer+0x786>
 8005c36:	3901      	subs	r1, #1
 8005c38:	ea6f 62c1 	mvn.w	r2, r1, lsl #27
 8005c3c:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8005c40:	b292      	uxth	r2, r2
 8005c42:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8005c46:	e7c8      	b.n	8005bda <USB_EPStartXfer+0x728>
 8005c48:	2a3e      	cmp	r2, #62	; 0x3e
 8005c4a:	d809      	bhi.n	8005c60 <USB_EPStartXfer+0x7ae>
 8005c4c:	0851      	lsrs	r1, r2, #1
 8005c4e:	f012 0f01 	tst.w	r2, #1
 8005c52:	d000      	beq.n	8005c56 <USB_EPStartXfer+0x7a4>
 8005c54:	3101      	adds	r1, #1
 8005c56:	028a      	lsls	r2, r1, #10
 8005c58:	b292      	uxth	r2, r2
 8005c5a:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8005c5e:	e00e      	b.n	8005c7e <USB_EPStartXfer+0x7cc>
 8005c60:	0951      	lsrs	r1, r2, #5
 8005c62:	f012 0f1f 	tst.w	r2, #31
 8005c66:	d100      	bne.n	8005c6a <USB_EPStartXfer+0x7b8>
 8005c68:	3901      	subs	r1, #1
 8005c6a:	ea6f 62c1 	mvn.w	r2, r1, lsl #27
 8005c6e:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8005c72:	b292      	uxth	r2, r2
 8005c74:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8005c78:	e001      	b.n	8005c7e <USB_EPStartXfer+0x7cc>
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	d01d      	beq.n	8005cba <USB_EPStartXfer+0x808>
        if (ep->xfer_count != 0U)
 8005c7e:	69e3      	ldr	r3, [r4, #28]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	f43f ac42 	beq.w	800550a <USB_EPStartXfer+0x58>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005c86:	7822      	ldrb	r2, [r4, #0]
 8005c88:	f835 1022 	ldrh.w	r1, [r5, r2, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005c8c:	f244 0340 	movw	r3, #16448	; 0x4040
 8005c90:	ea03 0001 	and.w	r0, r3, r1
 8005c94:	438b      	bics	r3, r1
 8005c96:	d002      	beq.n	8005c9e <USB_EPStartXfer+0x7ec>
 8005c98:	2800      	cmp	r0, #0
 8005c9a:	f47f ac36 	bne.w	800550a <USB_EPStartXfer+0x58>
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8005c9e:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8005ca2:	b29b      	uxth	r3, r3
 8005ca4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ca8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cb0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005cb4:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 8005cb8:	e427      	b.n	800550a <USB_EPStartXfer+0x58>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005cba:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8005cbe:	b29b      	uxth	r3, r3
 8005cc0:	442b      	add	r3, r5
 8005cc2:	7822      	ldrb	r2, [r4, #0]
 8005cc4:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8005cc8:	8a22      	ldrh	r2, [r4, #16]
 8005cca:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8005cce:	e7d6      	b.n	8005c7e <USB_EPStartXfer+0x7cc>
          ep->xfer_len = 0U;
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	61a2      	str	r2, [r4, #24]
          len = ep->xfer_len;
 8005cd4:	460a      	mov	r2, r1
 8005cd6:	e729      	b.n	8005b2c <USB_EPStartXfer+0x67a>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005cd8:	2a3e      	cmp	r2, #62	; 0x3e
 8005cda:	d809      	bhi.n	8005cf0 <USB_EPStartXfer+0x83e>
 8005cdc:	0851      	lsrs	r1, r2, #1
 8005cde:	f012 0f01 	tst.w	r2, #1
 8005ce2:	d000      	beq.n	8005ce6 <USB_EPStartXfer+0x834>
 8005ce4:	3101      	adds	r1, #1
 8005ce6:	0289      	lsls	r1, r1, #10
 8005ce8:	b289      	uxth	r1, r1
 8005cea:	f8a3 1404 	strh.w	r1, [r3, #1028]	; 0x404
 8005cee:	e739      	b.n	8005b64 <USB_EPStartXfer+0x6b2>
 8005cf0:	0951      	lsrs	r1, r2, #5
 8005cf2:	f012 0f1f 	tst.w	r2, #31
 8005cf6:	d100      	bne.n	8005cfa <USB_EPStartXfer+0x848>
 8005cf8:	3901      	subs	r1, #1
 8005cfa:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 8005cfe:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8005d02:	b289      	uxth	r1, r1
 8005d04:	f8a3 1404 	strh.w	r1, [r3, #1028]	; 0x404
 8005d08:	e72c      	b.n	8005b64 <USB_EPStartXfer+0x6b2>
 8005d0a:	2a3e      	cmp	r2, #62	; 0x3e
 8005d0c:	d80a      	bhi.n	8005d24 <USB_EPStartXfer+0x872>
 8005d0e:	0851      	lsrs	r1, r2, #1
 8005d10:	f012 0f01 	tst.w	r2, #1
 8005d14:	d000      	beq.n	8005d18 <USB_EPStartXfer+0x866>
 8005d16:	3101      	adds	r1, #1
 8005d18:	028a      	lsls	r2, r1, #10
 8005d1a:	b292      	uxth	r2, r2
 8005d1c:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8005d20:	f7ff bbf3 	b.w	800550a <USB_EPStartXfer+0x58>
 8005d24:	0951      	lsrs	r1, r2, #5
 8005d26:	f012 0f1f 	tst.w	r2, #31
 8005d2a:	d100      	bne.n	8005d2e <USB_EPStartXfer+0x87c>
 8005d2c:	3901      	subs	r1, #1
 8005d2e:	ea6f 62c1 	mvn.w	r2, r1, lsl #27
 8005d32:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8005d36:	b292      	uxth	r2, r2
 8005d38:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8005d3c:	f7ff bbe5 	b.w	800550a <USB_EPStartXfer+0x58>
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	f47f abe2 	bne.w	800550a <USB_EPStartXfer+0x58>
 8005d46:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8005d4a:	b29b      	uxth	r3, r3
 8005d4c:	442b      	add	r3, r5
 8005d4e:	7821      	ldrb	r1, [r4, #0]
 8005d50:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8005d54:	b292      	uxth	r2, r2
 8005d56:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8005d5a:	f7ff bbd6 	b.w	800550a <USB_EPStartXfer+0x58>
        return HAL_ERROR;
 8005d5e:	2001      	movs	r0, #1
 8005d60:	f7ff bbe4 	b.w	800552c <USB_EPStartXfer+0x7a>

08005d64 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005d64:	b410      	push	{r4}
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005d66:	085c      	lsrs	r4, r3, #1
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005d68:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8005d6c:	f500 6080 	add.w	r0, r0, #1024	; 0x400

  for (i = n; i != 0U; i--)
 8005d70:	e007      	b.n	8005d82 <USB_ReadPMA+0x1e>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8005d72:	f830 2b04 	ldrh.w	r2, [r0], #4
    pdwVal++;
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005d76:	700a      	strb	r2, [r1, #0]
    pBuf++;
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8005d78:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8005d7c:	704a      	strb	r2, [r1, #1]
    pBuf++;
 8005d7e:	3102      	adds	r1, #2
  for (i = n; i != 0U; i--)
 8005d80:	3c01      	subs	r4, #1
 8005d82:	2c00      	cmp	r4, #0
 8005d84:	d1f5      	bne.n	8005d72 <USB_ReadPMA+0xe>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8005d86:	f013 0f01 	tst.w	r3, #1
 8005d8a:	d001      	beq.n	8005d90 <USB_ReadPMA+0x2c>
  {
    temp = *pdwVal;
 8005d8c:	8803      	ldrh	r3, [r0, #0]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005d8e:	700b      	strb	r3, [r1, #0]
  }
}
 8005d90:	bc10      	pop	{r4}
 8005d92:	4770      	bx	lr

08005d94 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005d94:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005d96:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005d9a:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 8005d9e:	b15b      	cbz	r3, 8005db8 <USBD_CDC_EP0_RxReady+0x24>
 8005da0:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8005da4:	28ff      	cmp	r0, #255	; 0xff
 8005da6:	d007      	beq.n	8005db8 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005da8:	689b      	ldr	r3, [r3, #8]
 8005daa:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8005dae:	4621      	mov	r1, r4
 8005db0:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8005db2:	23ff      	movs	r3, #255	; 0xff
 8005db4:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 8005db8:	2000      	movs	r0, #0
 8005dba:	bd10      	pop	{r4, pc}

08005dbc <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8005dbc:	2343      	movs	r3, #67	; 0x43
 8005dbe:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8005dc0:	4800      	ldr	r0, [pc, #0]	; (8005dc4 <USBD_CDC_GetFSCfgDesc+0x8>)
 8005dc2:	4770      	bx	lr
 8005dc4:	20000050 	.word	0x20000050

08005dc8 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8005dc8:	2343      	movs	r3, #67	; 0x43
 8005dca:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8005dcc:	4800      	ldr	r0, [pc, #0]	; (8005dd0 <USBD_CDC_GetHSCfgDesc+0x8>)
 8005dce:	4770      	bx	lr
 8005dd0:	20000094 	.word	0x20000094

08005dd4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005dd4:	2343      	movs	r3, #67	; 0x43
 8005dd6:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8005dd8:	4800      	ldr	r0, [pc, #0]	; (8005ddc <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8005dda:	4770      	bx	lr
 8005ddc:	200000e4 	.word	0x200000e4

08005de0 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8005de0:	230a      	movs	r3, #10
 8005de2:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8005de4:	4800      	ldr	r0, [pc, #0]	; (8005de8 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8005de6:	4770      	bx	lr
 8005de8:	200000d8 	.word	0x200000d8

08005dec <USBD_CDC_DataOut>:
{
 8005dec:	b538      	push	{r3, r4, r5, lr}
 8005dee:	4604      	mov	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005df0:	f8d0 52b8 	ldr.w	r5, [r0, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005df4:	f001 f82a 	bl	8006e4c <USBD_LL_GetRxDataSize>
 8005df8:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  if (pdev->pClassData != NULL)
 8005dfc:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8005e00:	b14b      	cbz	r3, 8005e16 <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005e02:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8005e06:	68db      	ldr	r3, [r3, #12]
 8005e08:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 8005e0c:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 8005e10:	4798      	blx	r3
    return USBD_OK;
 8005e12:	2000      	movs	r0, #0
}
 8005e14:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8005e16:	2002      	movs	r0, #2
 8005e18:	e7fc      	b.n	8005e14 <USBD_CDC_DataOut+0x28>

08005e1a <USBD_CDC_DataIn>:
{
 8005e1a:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005e1c:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005e20:	f8d0 42c0 	ldr.w	r4, [r0, #704]	; 0x2c0
  if (pdev->pClassData != NULL)
 8005e24:	b1f2      	cbz	r2, 8005e64 <USBD_CDC_DataIn+0x4a>
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005e26:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8005e2a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8005e2e:	69db      	ldr	r3, [r3, #28]
 8005e30:	b14b      	cbz	r3, 8005e46 <USBD_CDC_DataIn+0x2c>
 8005e32:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
 8005e36:	eb04 04cc 	add.w	r4, r4, ip, lsl #3
 8005e3a:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8005e3c:	fbb3 fcf4 	udiv	ip, r3, r4
 8005e40:	fb04 331c 	mls	r3, r4, ip, r3
 8005e44:	b123      	cbz	r3, 8005e50 <USBD_CDC_DataIn+0x36>
      hcdc->TxState = 0U;
 8005e46:	2300      	movs	r3, #0
 8005e48:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
    return USBD_OK;
 8005e4c:	2000      	movs	r0, #0
}
 8005e4e:	bd10      	pop	{r4, pc}
      pdev->ep_in[epnum].total_length = 0U;
 8005e50:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8005e54:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8005e58:	2200      	movs	r2, #0
 8005e5a:	61da      	str	r2, [r3, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005e5c:	4613      	mov	r3, r2
 8005e5e:	f000 ffe5 	bl	8006e2c <USBD_LL_Transmit>
 8005e62:	e7f3      	b.n	8005e4c <USBD_CDC_DataIn+0x32>
    return USBD_FAIL;
 8005e64:	2002      	movs	r0, #2
 8005e66:	e7f2      	b.n	8005e4e <USBD_CDC_DataIn+0x34>

08005e68 <USBD_CDC_Setup>:
{
 8005e68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e6a:	b083      	sub	sp, #12
 8005e6c:	4606      	mov	r6, r0
 8005e6e:	460c      	mov	r4, r1
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005e70:	f8d0 72b8 	ldr.w	r7, [r0, #696]	; 0x2b8
  uint8_t ifalt = 0U;
 8005e74:	2300      	movs	r3, #0
 8005e76:	f88d 3007 	strb.w	r3, [sp, #7]
  uint16_t status_info = 0U;
 8005e7a:	f8ad 3004 	strh.w	r3, [sp, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005e7e:	780b      	ldrb	r3, [r1, #0]
 8005e80:	f013 0560 	ands.w	r5, r3, #96	; 0x60
 8005e84:	d027      	beq.n	8005ed6 <USBD_CDC_Setup+0x6e>
 8005e86:	2d20      	cmp	r5, #32
 8005e88:	d153      	bne.n	8005f32 <USBD_CDC_Setup+0xca>
      if (req->wLength)
 8005e8a:	88ca      	ldrh	r2, [r1, #6]
 8005e8c:	b1da      	cbz	r2, 8005ec6 <USBD_CDC_Setup+0x5e>
        if (req->bmRequest & 0x80U)
 8005e8e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005e92:	d00c      	beq.n	8005eae <USBD_CDC_Setup+0x46>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005e94:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 8005e98:	689b      	ldr	r3, [r3, #8]
 8005e9a:	4639      	mov	r1, r7
 8005e9c:	7860      	ldrb	r0, [r4, #1]
 8005e9e:	4798      	blx	r3
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005ea0:	88e2      	ldrh	r2, [r4, #6]
 8005ea2:	4639      	mov	r1, r7
 8005ea4:	4630      	mov	r0, r6
 8005ea6:	f000 fd7f 	bl	80069a8 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8005eaa:	2500      	movs	r5, #0
 8005eac:	e044      	b.n	8005f38 <USBD_CDC_Setup+0xd0>
          hcdc->CmdOpCode = req->bRequest;
 8005eae:	784b      	ldrb	r3, [r1, #1]
 8005eb0:	f887 3200 	strb.w	r3, [r7, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005eb4:	798b      	ldrb	r3, [r1, #6]
 8005eb6:	f887 3201 	strb.w	r3, [r7, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005eba:	88ca      	ldrh	r2, [r1, #6]
 8005ebc:	4639      	mov	r1, r7
 8005ebe:	f000 fd88 	bl	80069d2 <USBD_CtlPrepareRx>
  uint8_t ret = USBD_OK;
 8005ec2:	2500      	movs	r5, #0
 8005ec4:	e038      	b.n	8005f38 <USBD_CDC_Setup+0xd0>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005ec6:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	7848      	ldrb	r0, [r1, #1]
 8005ed0:	4798      	blx	r3
  uint8_t ret = USBD_OK;
 8005ed2:	2500      	movs	r5, #0
 8005ed4:	e030      	b.n	8005f38 <USBD_CDC_Setup+0xd0>
      switch (req->bRequest)
 8005ed6:	784f      	ldrb	r7, [r1, #1]
 8005ed8:	2f0a      	cmp	r7, #10
 8005eda:	d014      	beq.n	8005f06 <USBD_CDC_Setup+0x9e>
 8005edc:	2f0b      	cmp	r7, #11
 8005ede:	d020      	beq.n	8005f22 <USBD_CDC_Setup+0xba>
 8005ee0:	b11f      	cbz	r7, 8005eea <USBD_CDC_Setup+0x82>
          USBD_CtlError(pdev, req);
 8005ee2:	f000 fa55 	bl	8006390 <USBD_CtlError>
          ret = USBD_FAIL;
 8005ee6:	2502      	movs	r5, #2
          break;
 8005ee8:	e026      	b.n	8005f38 <USBD_CDC_Setup+0xd0>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005eea:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005eee:	2b03      	cmp	r3, #3
 8005ef0:	d003      	beq.n	8005efa <USBD_CDC_Setup+0x92>
            USBD_CtlError(pdev, req);
 8005ef2:	f000 fa4d 	bl	8006390 <USBD_CtlError>
            ret = USBD_FAIL;
 8005ef6:	2502      	movs	r5, #2
 8005ef8:	e01e      	b.n	8005f38 <USBD_CDC_Setup+0xd0>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8005efa:	2202      	movs	r2, #2
 8005efc:	a901      	add	r1, sp, #4
 8005efe:	f000 fd53 	bl	80069a8 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8005f02:	463d      	mov	r5, r7
 8005f04:	e018      	b.n	8005f38 <USBD_CDC_Setup+0xd0>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f06:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005f0a:	2b03      	cmp	r3, #3
 8005f0c:	d003      	beq.n	8005f16 <USBD_CDC_Setup+0xae>
            USBD_CtlError(pdev, req);
 8005f0e:	f000 fa3f 	bl	8006390 <USBD_CtlError>
            ret = USBD_FAIL;
 8005f12:	2502      	movs	r5, #2
 8005f14:	e010      	b.n	8005f38 <USBD_CDC_Setup+0xd0>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8005f16:	2201      	movs	r2, #1
 8005f18:	f10d 0107 	add.w	r1, sp, #7
 8005f1c:	f000 fd44 	bl	80069a8 <USBD_CtlSendData>
 8005f20:	e00a      	b.n	8005f38 <USBD_CDC_Setup+0xd0>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005f22:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005f26:	2b03      	cmp	r3, #3
 8005f28:	d006      	beq.n	8005f38 <USBD_CDC_Setup+0xd0>
            USBD_CtlError(pdev, req);
 8005f2a:	f000 fa31 	bl	8006390 <USBD_CtlError>
            ret = USBD_FAIL;
 8005f2e:	2502      	movs	r5, #2
 8005f30:	e002      	b.n	8005f38 <USBD_CDC_Setup+0xd0>
      USBD_CtlError(pdev, req);
 8005f32:	f000 fa2d 	bl	8006390 <USBD_CtlError>
      ret = USBD_FAIL;
 8005f36:	2502      	movs	r5, #2
}
 8005f38:	4628      	mov	r0, r5
 8005f3a:	b003      	add	sp, #12
 8005f3c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005f3e <USBD_CDC_DeInit>:
{
 8005f3e:	b538      	push	{r3, r4, r5, lr}
 8005f40:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005f42:	2181      	movs	r1, #129	; 0x81
 8005f44:	f000 ff3b 	bl	8006dbe <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005f48:	2500      	movs	r5, #0
 8005f4a:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005f4c:	2101      	movs	r1, #1
 8005f4e:	4620      	mov	r0, r4
 8005f50:	f000 ff35 	bl	8006dbe <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005f54:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005f58:	2182      	movs	r1, #130	; 0x82
 8005f5a:	4620      	mov	r0, r4
 8005f5c:	f000 ff2f 	bl	8006dbe <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005f60:	6425      	str	r5, [r4, #64]	; 0x40
  if (pdev->pClassData != NULL)
 8005f62:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8005f66:	b14b      	cbz	r3, 8005f7c <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005f68:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8005f70:	f8d4 02b8 	ldr.w	r0, [r4, #696]	; 0x2b8
 8005f74:	f000 ff74 	bl	8006e60 <USBD_static_free>
    pdev->pClassData = NULL;
 8005f78:	f8c4 52b8 	str.w	r5, [r4, #696]	; 0x2b8
}
 8005f7c:	2000      	movs	r0, #0
 8005f7e:	bd38      	pop	{r3, r4, r5, pc}

08005f80 <USBD_CDC_Init>:
{
 8005f80:	b570      	push	{r4, r5, r6, lr}
 8005f82:	4604      	mov	r4, r0
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005f84:	7c03      	ldrb	r3, [r0, #16]
 8005f86:	bbab      	cbnz	r3, 8005ff4 <USBD_CDC_Init+0x74>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005f88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f8c:	2202      	movs	r2, #2
 8005f8e:	2181      	movs	r1, #129	; 0x81
 8005f90:	f000 ff0a 	bl	8006da8 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005f94:	2501      	movs	r5, #1
 8005f96:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005f98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f9c:	2202      	movs	r2, #2
 8005f9e:	4629      	mov	r1, r5
 8005fa0:	4620      	mov	r0, r4
 8005fa2:	f000 ff01 	bl	8006da8 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005fa6:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005faa:	2308      	movs	r3, #8
 8005fac:	2203      	movs	r2, #3
 8005fae:	2182      	movs	r1, #130	; 0x82
 8005fb0:	4620      	mov	r0, r4
 8005fb2:	f000 fef9 	bl	8006da8 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	6423      	str	r3, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005fba:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005fbe:	f000 ff4b 	bl	8006e58 <USBD_static_malloc>
 8005fc2:	4605      	mov	r5, r0
 8005fc4:	f8c4 02b8 	str.w	r0, [r4, #696]	; 0x2b8
  if (pdev->pClassData == NULL)
 8005fc8:	b368      	cbz	r0, 8006026 <USBD_CDC_Init+0xa6>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005fca:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4798      	blx	r3
    hcdc->TxState = 0U;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	f8c5 3214 	str.w	r3, [r5, #532]	; 0x214
    hcdc->RxState = 0U;
 8005fd8:	f8c5 3218 	str.w	r3, [r5, #536]	; 0x218
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005fdc:	7c26      	ldrb	r6, [r4, #16]
 8005fde:	b9ce      	cbnz	r6, 8006014 <USBD_CDC_Init+0x94>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005fe0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005fe4:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 8005fe8:	2101      	movs	r1, #1
 8005fea:	4620      	mov	r0, r4
 8005fec:	f000 ff26 	bl	8006e3c <USBD_LL_PrepareReceive>
}
 8005ff0:	4630      	mov	r0, r6
 8005ff2:	bd70      	pop	{r4, r5, r6, pc}
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005ff4:	2340      	movs	r3, #64	; 0x40
 8005ff6:	2202      	movs	r2, #2
 8005ff8:	2181      	movs	r1, #129	; 0x81
 8005ffa:	f000 fed5 	bl	8006da8 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005ffe:	2501      	movs	r5, #1
 8006000:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006002:	2340      	movs	r3, #64	; 0x40
 8006004:	2202      	movs	r2, #2
 8006006:	4629      	mov	r1, r5
 8006008:	4620      	mov	r0, r4
 800600a:	f000 fecd 	bl	8006da8 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800600e:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
 8006012:	e7ca      	b.n	8005faa <USBD_CDC_Init+0x2a>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006014:	2340      	movs	r3, #64	; 0x40
 8006016:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 800601a:	2101      	movs	r1, #1
 800601c:	4620      	mov	r0, r4
 800601e:	f000 ff0d 	bl	8006e3c <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8006022:	2600      	movs	r6, #0
 8006024:	e7e4      	b.n	8005ff0 <USBD_CDC_Init+0x70>
    ret = 1U;
 8006026:	2601      	movs	r6, #1
 8006028:	e7e2      	b.n	8005ff0 <USBD_CDC_Init+0x70>

0800602a <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if (fops != NULL)
 800602a:	b119      	cbz	r1, 8006034 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData = fops;
 800602c:	f8c0 12bc 	str.w	r1, [r0, #700]	; 0x2bc
    ret = USBD_OK;
 8006030:	2000      	movs	r0, #0
 8006032:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8006034:	2002      	movs	r0, #2
  }

  return ret;
}
 8006036:	4770      	bx	lr

08006038 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006038:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  hcdc->TxBuffer = pbuff;
 800603c:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006040:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
}
 8006044:	2000      	movs	r0, #0
 8006046:	4770      	bx	lr

08006048 <USBD_CDC_SetRxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006048:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  hcdc->RxBuffer = pbuff;
 800604c:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204

  return USBD_OK;
}
 8006050:	2000      	movs	r0, #0
 8006052:	4770      	bx	lr

08006054 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006054:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8006058:	b192      	cbz	r2, 8006080 <USBD_CDC_ReceivePacket+0x2c>
{
 800605a:	b508      	push	{r3, lr}
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800605c:	7c03      	ldrb	r3, [r0, #16]
 800605e:	b943      	cbnz	r3, 8006072 <USBD_CDC_ReceivePacket+0x1e>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006060:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006064:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8006068:	2101      	movs	r1, #1
 800606a:	f000 fee7 	bl	8006e3c <USBD_LL_PrepareReceive>
      USBD_LL_PrepareReceive(pdev,
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800606e:	2000      	movs	r0, #0
  }
  else
  {
    return USBD_FAIL;
  }
}
 8006070:	bd08      	pop	{r3, pc}
      USBD_LL_PrepareReceive(pdev,
 8006072:	2340      	movs	r3, #64	; 0x40
 8006074:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8006078:	2101      	movs	r1, #1
 800607a:	f000 fedf 	bl	8006e3c <USBD_LL_PrepareReceive>
 800607e:	e7f6      	b.n	800606e <USBD_CDC_ReceivePacket+0x1a>
    return USBD_FAIL;
 8006080:	2002      	movs	r0, #2
}
 8006082:	4770      	bx	lr

08006084 <USBD_Init>:
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006084:	b198      	cbz	r0, 80060ae <USBD_Init+0x2a>
{
 8006086:	b508      	push	{r3, lr}
 8006088:	4603      	mov	r3, r0
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800608a:	f8d0 02b4 	ldr.w	r0, [r0, #692]	; 0x2b4
 800608e:	b110      	cbz	r0, 8006096 <USBD_Init+0x12>
  {
    pdev->pClass = NULL;
 8006090:	2000      	movs	r0, #0
 8006092:	f8c3 02b4 	str.w	r0, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006096:	b109      	cbz	r1, 800609c <USBD_Init+0x18>
  {
    pdev->pDesc = pdesc;
 8006098:	f8c3 12b0 	str.w	r1, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800609c:	2101      	movs	r1, #1
 800609e:	f883 129c 	strb.w	r1, [r3, #668]	; 0x29c
  pdev->id = id;
 80060a2:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80060a4:	4618      	mov	r0, r3
 80060a6:	f000 fe35 	bl	8006d14 <USBD_LL_Init>

  return USBD_OK;
 80060aa:	2000      	movs	r0, #0
}
 80060ac:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 80060ae:	2002      	movs	r0, #2
}
 80060b0:	4770      	bx	lr

080060b2 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 80060b2:	b119      	cbz	r1, 80060bc <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80060b4:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
    status = USBD_OK;
 80060b8:	2000      	movs	r0, #0
 80060ba:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80060bc:	2002      	movs	r0, #2
  }

  return status;
}
 80060be:	4770      	bx	lr

080060c0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80060c0:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80060c2:	f000 fe69 	bl	8006d98 <USBD_LL_Start>

  return USBD_OK;
}
 80060c6:	2000      	movs	r0, #0
 80060c8:	bd08      	pop	{r3, pc}

080060ca <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80060ca:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 80060cc:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80060d0:	b12b      	cbz	r3, 80060de <USBD_SetClassConfig+0x14>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4798      	blx	r3
 80060d6:	b900      	cbnz	r0, 80060da <USBD_SetClassConfig+0x10>
      ret = USBD_OK;
    }
  }

  return ret;
}
 80060d8:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_FAIL;
 80060da:	2002      	movs	r0, #2
 80060dc:	e7fc      	b.n	80060d8 <USBD_SetClassConfig+0xe>
 80060de:	2002      	movs	r0, #2
 80060e0:	e7fa      	b.n	80060d8 <USBD_SetClassConfig+0xe>

080060e2 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80060e2:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80060e4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	4798      	blx	r3

  return USBD_OK;
}
 80060ec:	2000      	movs	r0, #0
 80060ee:	bd08      	pop	{r3, pc}

080060f0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80060f0:	b538      	push	{r3, r4, r5, lr}
 80060f2:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80060f4:	f500 752a 	add.w	r5, r0, #680	; 0x2a8
 80060f8:	4628      	mov	r0, r5
 80060fa:	f000 f935 	bl	8006368 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80060fe:	2301      	movs	r3, #1
 8006100:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006104:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	; 0x2ae
 8006108:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800610c:	f894 12a8 	ldrb.w	r1, [r4, #680]	; 0x2a8
 8006110:	f001 031f 	and.w	r3, r1, #31
 8006114:	2b01      	cmp	r3, #1
 8006116:	d00e      	beq.n	8006136 <USBD_LL_SetupStage+0x46>
 8006118:	2b02      	cmp	r3, #2
 800611a:	d011      	beq.n	8006140 <USBD_LL_SetupStage+0x50>
 800611c:	b12b      	cbz	r3, 800612a <USBD_LL_SetupStage+0x3a>
    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800611e:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8006122:	4620      	mov	r0, r4
 8006124:	f000 fe53 	bl	8006dce <USBD_LL_StallEP>
      break;
 8006128:	e003      	b.n	8006132 <USBD_LL_SetupStage+0x42>
      USBD_StdDevReq(pdev, &pdev->request);
 800612a:	4629      	mov	r1, r5
 800612c:	4620      	mov	r0, r4
 800612e:	f000 fac9 	bl	80066c4 <USBD_StdDevReq>
  }

  return USBD_OK;
}
 8006132:	2000      	movs	r0, #0
 8006134:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 8006136:	4629      	mov	r1, r5
 8006138:	4620      	mov	r0, r4
 800613a:	f000 faf7 	bl	800672c <USBD_StdItfReq>
      break;
 800613e:	e7f8      	b.n	8006132 <USBD_LL_SetupStage+0x42>
      USBD_StdEPReq(pdev, &pdev->request);
 8006140:	4629      	mov	r1, r5
 8006142:	4620      	mov	r0, r4
 8006144:	f000 fb22 	bl	800678c <USBD_StdEPReq>
      break;
 8006148:	e7f3      	b.n	8006132 <USBD_LL_SetupStage+0x42>

0800614a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800614a:	b538      	push	{r3, r4, r5, lr}
 800614c:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800614e:	460d      	mov	r5, r1
 8006150:	bb91      	cbnz	r1, 80061b8 <USBD_LL_DataOutStage+0x6e>
 8006152:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006154:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8006158:	2a03      	cmp	r2, #3
 800615a:	d003      	beq.n	8006164 <USBD_LL_DataOutStage+0x1a>
        USBD_CtlSendStatus(pdev);
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800615c:	2a05      	cmp	r2, #5
 800615e:	d024      	beq.n	80061aa <USBD_LL_DataOutStage+0x60>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8006160:	4608      	mov	r0, r1
 8006162:	e033      	b.n	80061cc <USBD_LL_DataOutStage+0x82>
      if (pep->rem_length > pep->maxpacket)
 8006164:	f8d0 1160 	ldr.w	r1, [r0, #352]	; 0x160
 8006168:	f8d0 2164 	ldr.w	r2, [r0, #356]	; 0x164
 800616c:	4291      	cmp	r1, r2
 800616e:	d90d      	bls.n	800618c <USBD_LL_DataOutStage+0x42>
        pep->rem_length -= pep->maxpacket;
 8006170:	1a89      	subs	r1, r1, r2
 8006172:	f8c0 1160 	str.w	r1, [r0, #352]	; 0x160
        USBD_CtlContinueRx(pdev, pdata,
 8006176:	428a      	cmp	r2, r1
 8006178:	d906      	bls.n	8006188 <USBD_LL_DataOutStage+0x3e>
 800617a:	b28a      	uxth	r2, r1
 800617c:	4619      	mov	r1, r3
 800617e:	4620      	mov	r0, r4
 8006180:	f000 fc36 	bl	80069f0 <USBD_CtlContinueRx>
  return USBD_OK;
 8006184:	4628      	mov	r0, r5
 8006186:	e021      	b.n	80061cc <USBD_LL_DataOutStage+0x82>
        USBD_CtlContinueRx(pdev, pdata,
 8006188:	b292      	uxth	r2, r2
 800618a:	e7f7      	b.n	800617c <USBD_LL_DataOutStage+0x32>
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800618c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8006190:	691b      	ldr	r3, [r3, #16]
 8006192:	b11b      	cbz	r3, 800619c <USBD_LL_DataOutStage+0x52>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006194:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006198:	2a03      	cmp	r2, #3
 800619a:	d004      	beq.n	80061a6 <USBD_LL_DataOutStage+0x5c>
        USBD_CtlSendStatus(pdev);
 800619c:	4620      	mov	r0, r4
 800619e:	f000 fc2f 	bl	8006a00 <USBD_CtlSendStatus>
  return USBD_OK;
 80061a2:	4628      	mov	r0, r5
 80061a4:	e012      	b.n	80061cc <USBD_LL_DataOutStage+0x82>
          pdev->pClass->EP0_RxReady(pdev);
 80061a6:	4798      	blx	r3
 80061a8:	e7f8      	b.n	800619c <USBD_LL_DataOutStage+0x52>
        pdev->ep0_state = USBD_EP0_IDLE;
 80061aa:	2100      	movs	r1, #0
 80061ac:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80061b0:	f000 fe0d 	bl	8006dce <USBD_LL_StallEP>
  return USBD_OK;
 80061b4:	4628      	mov	r0, r5
 80061b6:	e009      	b.n	80061cc <USBD_LL_DataOutStage+0x82>
  else if ((pdev->pClass->DataOut != NULL) &&
 80061b8:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80061bc:	699b      	ldr	r3, [r3, #24]
 80061be:	b133      	cbz	r3, 80061ce <USBD_LL_DataOutStage+0x84>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80061c0:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80061c4:	2a03      	cmp	r2, #3
 80061c6:	d104      	bne.n	80061d2 <USBD_LL_DataOutStage+0x88>
    pdev->pClass->DataOut(pdev, epnum);
 80061c8:	4798      	blx	r3
  return USBD_OK;
 80061ca:	2000      	movs	r0, #0
}
 80061cc:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 80061ce:	2002      	movs	r0, #2
 80061d0:	e7fc      	b.n	80061cc <USBD_LL_DataOutStage+0x82>
 80061d2:	2002      	movs	r0, #2
 80061d4:	e7fa      	b.n	80061cc <USBD_LL_DataOutStage+0x82>

080061d6 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80061d6:	b538      	push	{r3, r4, r5, lr}
 80061d8:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80061da:	460d      	mov	r5, r1
 80061dc:	2900      	cmp	r1, #0
 80061de:	d153      	bne.n	8006288 <USBD_LL_DataInStage+0xb2>
 80061e0:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80061e2:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 80061e6:	2a02      	cmp	r2, #2
 80061e8:	d00c      	beq.n	8006204 <USBD_LL_DataInStage+0x2e>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80061ea:	2a04      	cmp	r2, #4
 80061ec:	d000      	beq.n	80061f0 <USBD_LL_DataInStage+0x1a>
 80061ee:	b91a      	cbnz	r2, 80061f8 <USBD_LL_DataInStage+0x22>
          (pdev->ep0_state == USBD_EP0_IDLE))
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80061f0:	2180      	movs	r1, #128	; 0x80
 80061f2:	4620      	mov	r0, r4
 80061f4:	f000 fdeb 	bl	8006dce <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80061f8:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	d03e      	beq.n	800627e <USBD_LL_DataInStage+0xa8>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8006200:	4628      	mov	r0, r5
}
 8006202:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 8006204:	6a01      	ldr	r1, [r0, #32]
 8006206:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8006208:	4291      	cmp	r1, r2
 800620a:	d81b      	bhi.n	8006244 <USBD_LL_DataInStage+0x6e>
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800620c:	69c1      	ldr	r1, [r0, #28]
 800620e:	fbb1 f3f2 	udiv	r3, r1, r2
 8006212:	fb02 1313 	mls	r3, r2, r3, r1
 8006216:	b92b      	cbnz	r3, 8006224 <USBD_LL_DataInStage+0x4e>
 8006218:	428a      	cmp	r2, r1
 800621a:	d803      	bhi.n	8006224 <USBD_LL_DataInStage+0x4e>
            (pep->total_length < pdev->ep0_data_len))
 800621c:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006220:	4299      	cmp	r1, r3
 8006222:	d31c      	bcc.n	800625e <USBD_LL_DataInStage+0x88>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006224:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8006228:	68db      	ldr	r3, [r3, #12]
 800622a:	b11b      	cbz	r3, 8006234 <USBD_LL_DataInStage+0x5e>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800622c:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006230:	2a03      	cmp	r2, #3
 8006232:	d021      	beq.n	8006278 <USBD_LL_DataInStage+0xa2>
          USBD_LL_StallEP(pdev, 0x80U);
 8006234:	2180      	movs	r1, #128	; 0x80
 8006236:	4620      	mov	r0, r4
 8006238:	f000 fdc9 	bl	8006dce <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800623c:	4620      	mov	r0, r4
 800623e:	f000 fbea 	bl	8006a16 <USBD_CtlReceiveStatus>
 8006242:	e7d9      	b.n	80061f8 <USBD_LL_DataInStage+0x22>
        pep->rem_length -= pep->maxpacket;
 8006244:	1a8a      	subs	r2, r1, r2
 8006246:	6202      	str	r2, [r0, #32]
        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006248:	b292      	uxth	r2, r2
 800624a:	4619      	mov	r1, r3
 800624c:	f000 fbb9 	bl	80069c2 <USBD_CtlContinueSendData>
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006250:	2300      	movs	r3, #0
 8006252:	461a      	mov	r2, r3
 8006254:	4619      	mov	r1, r3
 8006256:	4620      	mov	r0, r4
 8006258:	f000 fdf0 	bl	8006e3c <USBD_LL_PrepareReceive>
 800625c:	e7cc      	b.n	80061f8 <USBD_LL_DataInStage+0x22>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800625e:	2200      	movs	r2, #0
 8006260:	4611      	mov	r1, r2
 8006262:	f000 fbae 	bl	80069c2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006266:	2100      	movs	r1, #0
 8006268:	f8c4 1298 	str.w	r1, [r4, #664]	; 0x298
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800626c:	460b      	mov	r3, r1
 800626e:	460a      	mov	r2, r1
 8006270:	4620      	mov	r0, r4
 8006272:	f000 fde3 	bl	8006e3c <USBD_LL_PrepareReceive>
 8006276:	e7bf      	b.n	80061f8 <USBD_LL_DataInStage+0x22>
            pdev->pClass->EP0_TxSent(pdev);
 8006278:	4620      	mov	r0, r4
 800627a:	4798      	blx	r3
 800627c:	e7da      	b.n	8006234 <USBD_LL_DataInStage+0x5e>
      pdev->dev_test_mode = 0U;
 800627e:	2300      	movs	r3, #0
 8006280:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
  return USBD_OK;
 8006284:	4628      	mov	r0, r5
 8006286:	e7bc      	b.n	8006202 <USBD_LL_DataInStage+0x2c>
  else if ((pdev->pClass->DataIn != NULL) &&
 8006288:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800628c:	695b      	ldr	r3, [r3, #20]
 800628e:	b133      	cbz	r3, 800629e <USBD_LL_DataInStage+0xc8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006290:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006294:	2a03      	cmp	r2, #3
 8006296:	d104      	bne.n	80062a2 <USBD_LL_DataInStage+0xcc>
    pdev->pClass->DataIn(pdev, epnum);
 8006298:	4798      	blx	r3
  return USBD_OK;
 800629a:	2000      	movs	r0, #0
    pdev->pClass->DataIn(pdev, epnum);
 800629c:	e7b1      	b.n	8006202 <USBD_LL_DataInStage+0x2c>
    return USBD_FAIL;
 800629e:	2002      	movs	r0, #2
 80062a0:	e7af      	b.n	8006202 <USBD_LL_DataInStage+0x2c>
 80062a2:	2002      	movs	r0, #2
 80062a4:	e7ad      	b.n	8006202 <USBD_LL_DataInStage+0x2c>

080062a6 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80062a6:	b570      	push	{r4, r5, r6, lr}
 80062a8:	4604      	mov	r4, r0
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80062aa:	2340      	movs	r3, #64	; 0x40
 80062ac:	2200      	movs	r2, #0
 80062ae:	4611      	mov	r1, r2
 80062b0:	f000 fd7a 	bl	8006da8 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80062b4:	2501      	movs	r5, #1
 80062b6:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80062ba:	2640      	movs	r6, #64	; 0x40
 80062bc:	f8c4 6164 	str.w	r6, [r4, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80062c0:	4633      	mov	r3, r6
 80062c2:	2200      	movs	r2, #0
 80062c4:	2180      	movs	r1, #128	; 0x80
 80062c6:	4620      	mov	r0, r4
 80062c8:	f000 fd6e 	bl	8006da8 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80062cc:	61a5      	str	r5, [r4, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80062ce:	6266      	str	r6, [r4, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80062d0:	f884 529c 	strb.w	r5, [r4, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80062d4:	2300      	movs	r3, #0
 80062d6:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  pdev->dev_config = 0U;
 80062da:	6063      	str	r3, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 80062dc:	f8c4 32a4 	str.w	r3, [r4, #676]	; 0x2a4

  if (pdev->pClassData)
 80062e0:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 80062e4:	b12b      	cbz	r3, 80062f2 <USBD_LL_Reset+0x4c>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80062e6:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	2100      	movs	r1, #0
 80062ee:	4620      	mov	r0, r4
 80062f0:	4798      	blx	r3
  }

  return USBD_OK;
}
 80062f2:	2000      	movs	r0, #0
 80062f4:	bd70      	pop	{r4, r5, r6, pc}

080062f6 <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 80062f6:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 80062f8:	2000      	movs	r0, #0
 80062fa:	4770      	bx	lr

080062fc <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 80062fc:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006300:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006304:	2304      	movs	r3, #4
 8006306:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 800630a:	2000      	movs	r0, #0
 800630c:	4770      	bx	lr

0800630e <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800630e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006312:	2b04      	cmp	r3, #4
 8006314:	d001      	beq.n	800631a <USBD_LL_Resume+0xc>
  {
    pdev->dev_state = pdev->dev_old_state;
  }

  return USBD_OK;
}
 8006316:	2000      	movs	r0, #0
 8006318:	4770      	bx	lr
    pdev->dev_state = pdev->dev_old_state;
 800631a:	f890 329d 	ldrb.w	r3, [r0, #669]	; 0x29d
 800631e:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
 8006322:	e7f8      	b.n	8006316 <USBD_LL_Resume+0x8>

08006324 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006324:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006326:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800632a:	2b03      	cmp	r3, #3
 800632c:	d001      	beq.n	8006332 <USBD_LL_SOF+0xe>
      pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
}
 800632e:	2000      	movs	r0, #0
 8006330:	bd08      	pop	{r3, pc}
    if (pdev->pClass->SOF != NULL)
 8006332:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8006336:	69db      	ldr	r3, [r3, #28]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d0f8      	beq.n	800632e <USBD_LL_SOF+0xa>
      pdev->pClass->SOF(pdev);
 800633c:	4798      	blx	r3
 800633e:	e7f6      	b.n	800632e <USBD_LL_SOF+0xa>

08006340 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006340:	4603      	mov	r3, r0
  uint8_t  len = 0U;
 8006342:	2000      	movs	r0, #0

  while (*buf != '\0')
 8006344:	e002      	b.n	800634c <USBD_GetLen+0xc>
  {
    len++;
 8006346:	3001      	adds	r0, #1
 8006348:	b2c0      	uxtb	r0, r0
    buf++;
 800634a:	3301      	adds	r3, #1
  while (*buf != '\0')
 800634c:	781a      	ldrb	r2, [r3, #0]
 800634e:	2a00      	cmp	r2, #0
 8006350:	d1f9      	bne.n	8006346 <USBD_GetLen+0x6>
  }

  return len;
}
 8006352:	4770      	bx	lr

08006354 <USBD_SetFeature>:
{
 8006354:	b508      	push	{r3, lr}
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006356:	884b      	ldrh	r3, [r1, #2]
 8006358:	2b01      	cmp	r3, #1
 800635a:	d000      	beq.n	800635e <USBD_SetFeature+0xa>
}
 800635c:	bd08      	pop	{r3, pc}
    pdev->dev_remote_wakeup = 1U;
 800635e:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8006362:	f000 fb4d 	bl	8006a00 <USBD_CtlSendStatus>
}
 8006366:	e7f9      	b.n	800635c <USBD_SetFeature+0x8>

08006368 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 8006368:	780b      	ldrb	r3, [r1, #0]
 800636a:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800636c:	784b      	ldrb	r3, [r1, #1]
 800636e:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8006370:	788b      	ldrb	r3, [r1, #2]
 8006372:	78ca      	ldrb	r2, [r1, #3]
 8006374:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8006378:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800637a:	790b      	ldrb	r3, [r1, #4]
 800637c:	794a      	ldrb	r2, [r1, #5]
 800637e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8006382:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8006384:	798b      	ldrb	r3, [r1, #6]
 8006386:	79ca      	ldrb	r2, [r1, #7]
 8006388:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800638c:	80c3      	strh	r3, [r0, #6]
}
 800638e:	4770      	bx	lr

08006390 <USBD_CtlError>:
{
 8006390:	b510      	push	{r4, lr}
 8006392:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 8006394:	2180      	movs	r1, #128	; 0x80
 8006396:	f000 fd1a 	bl	8006dce <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800639a:	2100      	movs	r1, #0
 800639c:	4620      	mov	r0, r4
 800639e:	f000 fd16 	bl	8006dce <USBD_LL_StallEP>
}
 80063a2:	bd10      	pop	{r4, pc}

080063a4 <USBD_GetDescriptor>:
{
 80063a4:	b530      	push	{r4, r5, lr}
 80063a6:	b083      	sub	sp, #12
 80063a8:	4605      	mov	r5, r0
 80063aa:	460c      	mov	r4, r1
  uint16_t len = 0U;
 80063ac:	2300      	movs	r3, #0
 80063ae:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 80063b2:	884a      	ldrh	r2, [r1, #2]
 80063b4:	0a13      	lsrs	r3, r2, #8
 80063b6:	3b01      	subs	r3, #1
 80063b8:	2b06      	cmp	r3, #6
 80063ba:	f200 80a4 	bhi.w	8006506 <USBD_GetDescriptor+0x162>
 80063be:	e8df f003 	tbb	[pc, r3]
 80063c2:	1804      	.short	0x1804
 80063c4:	86a2a22c 	.word	0x86a2a22c
 80063c8:	93          	.byte	0x93
 80063c9:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80063ca:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f10d 0106 	add.w	r1, sp, #6
 80063d4:	7c00      	ldrb	r0, [r0, #16]
 80063d6:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 80063d8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80063dc:	b11a      	cbz	r2, 80063e6 <USBD_GetDescriptor+0x42>
 80063de:	88e3      	ldrh	r3, [r4, #6]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	f040 8094 	bne.w	800650e <USBD_GetDescriptor+0x16a>
    if (req->wLength == 0U)
 80063e6:	88e3      	ldrh	r3, [r4, #6]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	f000 809a 	beq.w	8006522 <USBD_GetDescriptor+0x17e>
}
 80063ee:	b003      	add	sp, #12
 80063f0:	bd30      	pop	{r4, r5, pc}
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80063f2:	7c03      	ldrb	r3, [r0, #16]
 80063f4:	b943      	cbnz	r3, 8006408 <USBD_GetDescriptor+0x64>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80063f6:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80063fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063fc:	f10d 0006 	add.w	r0, sp, #6
 8006400:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006402:	2302      	movs	r3, #2
 8006404:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8006406:	e7e7      	b.n	80063d8 <USBD_GetDescriptor+0x34>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006408:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800640c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800640e:	f10d 0006 	add.w	r0, sp, #6
 8006412:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006414:	2302      	movs	r3, #2
 8006416:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8006418:	e7de      	b.n	80063d8 <USBD_GetDescriptor+0x34>
      switch ((uint8_t)(req->wValue))
 800641a:	b2d2      	uxtb	r2, r2
 800641c:	2a05      	cmp	r2, #5
 800641e:	d852      	bhi.n	80064c6 <USBD_GetDescriptor+0x122>
 8006420:	e8df f002 	tbb	[pc, r2]
 8006424:	2a1d1003 	.word	0x2a1d1003
 8006428:	4437      	.short	0x4437
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800642a:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	b123      	cbz	r3, 800643c <USBD_GetDescriptor+0x98>
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006432:	f10d 0106 	add.w	r1, sp, #6
 8006436:	7c00      	ldrb	r0, [r0, #16]
 8006438:	4798      	blx	r3
  if (err != 0U)
 800643a:	e7cd      	b.n	80063d8 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 800643c:	4621      	mov	r1, r4
 800643e:	f7ff ffa7 	bl	8006390 <USBD_CtlError>
  if (err != 0U)
 8006442:	e7d4      	b.n	80063ee <USBD_GetDescriptor+0x4a>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006444:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8006448:	689b      	ldr	r3, [r3, #8]
 800644a:	b123      	cbz	r3, 8006456 <USBD_GetDescriptor+0xb2>
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800644c:	f10d 0106 	add.w	r1, sp, #6
 8006450:	7c00      	ldrb	r0, [r0, #16]
 8006452:	4798      	blx	r3
  if (err != 0U)
 8006454:	e7c0      	b.n	80063d8 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8006456:	4621      	mov	r1, r4
 8006458:	f7ff ff9a 	bl	8006390 <USBD_CtlError>
  if (err != 0U)
 800645c:	e7c7      	b.n	80063ee <USBD_GetDescriptor+0x4a>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800645e:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8006462:	68db      	ldr	r3, [r3, #12]
 8006464:	b123      	cbz	r3, 8006470 <USBD_GetDescriptor+0xcc>
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006466:	f10d 0106 	add.w	r1, sp, #6
 800646a:	7c00      	ldrb	r0, [r0, #16]
 800646c:	4798      	blx	r3
  if (err != 0U)
 800646e:	e7b3      	b.n	80063d8 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8006470:	4621      	mov	r1, r4
 8006472:	f7ff ff8d 	bl	8006390 <USBD_CtlError>
  if (err != 0U)
 8006476:	e7ba      	b.n	80063ee <USBD_GetDescriptor+0x4a>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006478:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800647c:	691b      	ldr	r3, [r3, #16]
 800647e:	b123      	cbz	r3, 800648a <USBD_GetDescriptor+0xe6>
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006480:	f10d 0106 	add.w	r1, sp, #6
 8006484:	7c00      	ldrb	r0, [r0, #16]
 8006486:	4798      	blx	r3
  if (err != 0U)
 8006488:	e7a6      	b.n	80063d8 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 800648a:	4621      	mov	r1, r4
 800648c:	f7ff ff80 	bl	8006390 <USBD_CtlError>
  if (err != 0U)
 8006490:	e7ad      	b.n	80063ee <USBD_GetDescriptor+0x4a>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006492:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8006496:	695b      	ldr	r3, [r3, #20]
 8006498:	b123      	cbz	r3, 80064a4 <USBD_GetDescriptor+0x100>
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800649a:	f10d 0106 	add.w	r1, sp, #6
 800649e:	7c00      	ldrb	r0, [r0, #16]
 80064a0:	4798      	blx	r3
  if (err != 0U)
 80064a2:	e799      	b.n	80063d8 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 80064a4:	4621      	mov	r1, r4
 80064a6:	f7ff ff73 	bl	8006390 <USBD_CtlError>
  if (err != 0U)
 80064aa:	e7a0      	b.n	80063ee <USBD_GetDescriptor+0x4a>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80064ac:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80064b0:	699b      	ldr	r3, [r3, #24]
 80064b2:	b123      	cbz	r3, 80064be <USBD_GetDescriptor+0x11a>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80064b4:	f10d 0106 	add.w	r1, sp, #6
 80064b8:	7c00      	ldrb	r0, [r0, #16]
 80064ba:	4798      	blx	r3
  if (err != 0U)
 80064bc:	e78c      	b.n	80063d8 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 80064be:	4621      	mov	r1, r4
 80064c0:	f7ff ff66 	bl	8006390 <USBD_CtlError>
  if (err != 0U)
 80064c4:	e793      	b.n	80063ee <USBD_GetDescriptor+0x4a>
          USBD_CtlError(pdev, req);
 80064c6:	4621      	mov	r1, r4
 80064c8:	f7ff ff62 	bl	8006390 <USBD_CtlError>
  if (err != 0U)
 80064cc:	e78f      	b.n	80063ee <USBD_GetDescriptor+0x4a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80064ce:	7c03      	ldrb	r3, [r0, #16]
 80064d0:	b933      	cbnz	r3, 80064e0 <USBD_GetDescriptor+0x13c>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80064d2:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80064d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064d8:	f10d 0006 	add.w	r0, sp, #6
 80064dc:	4798      	blx	r3
  if (err != 0U)
 80064de:	e77b      	b.n	80063d8 <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 80064e0:	4621      	mov	r1, r4
 80064e2:	f7ff ff55 	bl	8006390 <USBD_CtlError>
  if (err != 0U)
 80064e6:	e782      	b.n	80063ee <USBD_GetDescriptor+0x4a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80064e8:	7c03      	ldrb	r3, [r0, #16]
 80064ea:	b943      	cbnz	r3, 80064fe <USBD_GetDescriptor+0x15a>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80064ec:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80064f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064f2:	f10d 0006 	add.w	r0, sp, #6
 80064f6:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80064f8:	2307      	movs	r3, #7
 80064fa:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 80064fc:	e76c      	b.n	80063d8 <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 80064fe:	4621      	mov	r1, r4
 8006500:	f7ff ff46 	bl	8006390 <USBD_CtlError>
  if (err != 0U)
 8006504:	e773      	b.n	80063ee <USBD_GetDescriptor+0x4a>
      USBD_CtlError(pdev, req);
 8006506:	4621      	mov	r1, r4
 8006508:	f7ff ff42 	bl	8006390 <USBD_CtlError>
    return;
 800650c:	e76f      	b.n	80063ee <USBD_GetDescriptor+0x4a>
      len = MIN(len, req->wLength);
 800650e:	429a      	cmp	r2, r3
 8006510:	bf28      	it	cs
 8006512:	461a      	movcs	r2, r3
 8006514:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006518:	4601      	mov	r1, r0
 800651a:	4628      	mov	r0, r5
 800651c:	f000 fa44 	bl	80069a8 <USBD_CtlSendData>
 8006520:	e761      	b.n	80063e6 <USBD_GetDescriptor+0x42>
      (void)USBD_CtlSendStatus(pdev);
 8006522:	4628      	mov	r0, r5
 8006524:	f000 fa6c 	bl	8006a00 <USBD_CtlSendStatus>
 8006528:	e761      	b.n	80063ee <USBD_GetDescriptor+0x4a>

0800652a <USBD_SetAddress>:
{
 800652a:	b538      	push	{r3, r4, r5, lr}
 800652c:	4604      	mov	r4, r0
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800652e:	888b      	ldrh	r3, [r1, #4]
 8006530:	b9f3      	cbnz	r3, 8006570 <USBD_SetAddress+0x46>
 8006532:	88cb      	ldrh	r3, [r1, #6]
 8006534:	b9e3      	cbnz	r3, 8006570 <USBD_SetAddress+0x46>
 8006536:	884b      	ldrh	r3, [r1, #2]
 8006538:	2b7f      	cmp	r3, #127	; 0x7f
 800653a:	d819      	bhi.n	8006570 <USBD_SetAddress+0x46>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800653c:	f003 057f 	and.w	r5, r3, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006540:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006544:	2b03      	cmp	r3, #3
 8006546:	d00c      	beq.n	8006562 <USBD_SetAddress+0x38>
      pdev->dev_address = dev_addr;
 8006548:	f880 529e 	strb.w	r5, [r0, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800654c:	4629      	mov	r1, r5
 800654e:	f000 fc65 	bl	8006e1c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8006552:	4620      	mov	r0, r4
 8006554:	f000 fa54 	bl	8006a00 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8006558:	b135      	cbz	r5, 8006568 <USBD_SetAddress+0x3e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800655a:	2302      	movs	r3, #2
 800655c:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8006560:	e009      	b.n	8006576 <USBD_SetAddress+0x4c>
      USBD_CtlError(pdev, req);
 8006562:	f7ff ff15 	bl	8006390 <USBD_CtlError>
 8006566:	e006      	b.n	8006576 <USBD_SetAddress+0x4c>
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006568:	2301      	movs	r3, #1
 800656a:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800656e:	e002      	b.n	8006576 <USBD_SetAddress+0x4c>
    USBD_CtlError(pdev, req);
 8006570:	4620      	mov	r0, r4
 8006572:	f7ff ff0d 	bl	8006390 <USBD_CtlError>
}
 8006576:	bd38      	pop	{r3, r4, r5, pc}

08006578 <USBD_SetConfig>:
{
 8006578:	b538      	push	{r3, r4, r5, lr}
 800657a:	4604      	mov	r4, r0
 800657c:	460d      	mov	r5, r1
  cfgidx = (uint8_t)(req->wValue);
 800657e:	7889      	ldrb	r1, [r1, #2]
 8006580:	4b28      	ldr	r3, [pc, #160]	; (8006624 <USBD_SetConfig+0xac>)
 8006582:	7019      	strb	r1, [r3, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006584:	2901      	cmp	r1, #1
 8006586:	d80e      	bhi.n	80065a6 <USBD_SetConfig+0x2e>
    switch (pdev->dev_state)
 8006588:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800658c:	2b02      	cmp	r3, #2
 800658e:	d00e      	beq.n	80065ae <USBD_SetConfig+0x36>
 8006590:	2b03      	cmp	r3, #3
 8006592:	d021      	beq.n	80065d8 <USBD_SetConfig+0x60>
        USBD_CtlError(pdev, req);
 8006594:	4629      	mov	r1, r5
 8006596:	f7ff fefb 	bl	8006390 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800659a:	4b22      	ldr	r3, [pc, #136]	; (8006624 <USBD_SetConfig+0xac>)
 800659c:	7819      	ldrb	r1, [r3, #0]
 800659e:	4620      	mov	r0, r4
 80065a0:	f7ff fd9f 	bl	80060e2 <USBD_ClrClassConfig>
        break;
 80065a4:	e002      	b.n	80065ac <USBD_SetConfig+0x34>
    USBD_CtlError(pdev, req);
 80065a6:	4629      	mov	r1, r5
 80065a8:	f7ff fef2 	bl	8006390 <USBD_CtlError>
}
 80065ac:	bd38      	pop	{r3, r4, r5, pc}
        if (cfgidx)
 80065ae:	b181      	cbz	r1, 80065d2 <USBD_SetConfig+0x5a>
          pdev->dev_config = cfgidx;
 80065b0:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80065b2:	2303      	movs	r3, #3
 80065b4:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80065b8:	f7ff fd87 	bl	80060ca <USBD_SetClassConfig>
 80065bc:	2802      	cmp	r0, #2
 80065be:	d003      	beq.n	80065c8 <USBD_SetConfig+0x50>
          USBD_CtlSendStatus(pdev);
 80065c0:	4620      	mov	r0, r4
 80065c2:	f000 fa1d 	bl	8006a00 <USBD_CtlSendStatus>
 80065c6:	e7f1      	b.n	80065ac <USBD_SetConfig+0x34>
            USBD_CtlError(pdev, req);
 80065c8:	4629      	mov	r1, r5
 80065ca:	4620      	mov	r0, r4
 80065cc:	f7ff fee0 	bl	8006390 <USBD_CtlError>
            return;
 80065d0:	e7ec      	b.n	80065ac <USBD_SetConfig+0x34>
          USBD_CtlSendStatus(pdev);
 80065d2:	f000 fa15 	bl	8006a00 <USBD_CtlSendStatus>
 80065d6:	e7e9      	b.n	80065ac <USBD_SetConfig+0x34>
        if (cfgidx == 0U)
 80065d8:	b189      	cbz	r1, 80065fe <USBD_SetConfig+0x86>
        else if (cfgidx != pdev->dev_config)
 80065da:	6843      	ldr	r3, [r0, #4]
 80065dc:	4299      	cmp	r1, r3
 80065de:	d01d      	beq.n	800661c <USBD_SetConfig+0xa4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80065e0:	b2d9      	uxtb	r1, r3
 80065e2:	f7ff fd7e 	bl	80060e2 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80065e6:	4b0f      	ldr	r3, [pc, #60]	; (8006624 <USBD_SetConfig+0xac>)
 80065e8:	7819      	ldrb	r1, [r3, #0]
 80065ea:	6061      	str	r1, [r4, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80065ec:	4620      	mov	r0, r4
 80065ee:	f7ff fd6c 	bl	80060ca <USBD_SetClassConfig>
 80065f2:	2802      	cmp	r0, #2
 80065f4:	d00d      	beq.n	8006612 <USBD_SetConfig+0x9a>
          USBD_CtlSendStatus(pdev);
 80065f6:	4620      	mov	r0, r4
 80065f8:	f000 fa02 	bl	8006a00 <USBD_CtlSendStatus>
 80065fc:	e7d6      	b.n	80065ac <USBD_SetConfig+0x34>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80065fe:	2302      	movs	r3, #2
 8006600:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8006604:	6041      	str	r1, [r0, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8006606:	f7ff fd6c 	bl	80060e2 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800660a:	4620      	mov	r0, r4
 800660c:	f000 f9f8 	bl	8006a00 <USBD_CtlSendStatus>
 8006610:	e7cc      	b.n	80065ac <USBD_SetConfig+0x34>
            USBD_CtlError(pdev, req);
 8006612:	4629      	mov	r1, r5
 8006614:	4620      	mov	r0, r4
 8006616:	f7ff febb 	bl	8006390 <USBD_CtlError>
            return;
 800661a:	e7c7      	b.n	80065ac <USBD_SetConfig+0x34>
          USBD_CtlSendStatus(pdev);
 800661c:	f000 f9f0 	bl	8006a00 <USBD_CtlSendStatus>
 8006620:	e7c4      	b.n	80065ac <USBD_SetConfig+0x34>
 8006622:	bf00      	nop
 8006624:	200018a8 	.word	0x200018a8

08006628 <USBD_GetConfig>:
{
 8006628:	b508      	push	{r3, lr}
  if (req->wLength != 1U)
 800662a:	88cb      	ldrh	r3, [r1, #6]
 800662c:	2b01      	cmp	r3, #1
 800662e:	d10a      	bne.n	8006646 <USBD_GetConfig+0x1e>
    switch (pdev->dev_state)
 8006630:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006634:	2b02      	cmp	r3, #2
 8006636:	d909      	bls.n	800664c <USBD_GetConfig+0x24>
 8006638:	2b03      	cmp	r3, #3
 800663a:	d109      	bne.n	8006650 <USBD_GetConfig+0x28>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800663c:	2201      	movs	r2, #1
 800663e:	1d01      	adds	r1, r0, #4
 8006640:	f000 f9b2 	bl	80069a8 <USBD_CtlSendData>
        break;
 8006644:	e001      	b.n	800664a <USBD_GetConfig+0x22>
    USBD_CtlError(pdev, req);
 8006646:	f7ff fea3 	bl	8006390 <USBD_CtlError>
}
 800664a:	bd08      	pop	{r3, pc}
    switch (pdev->dev_state)
 800664c:	b25b      	sxtb	r3, r3
 800664e:	b913      	cbnz	r3, 8006656 <USBD_GetConfig+0x2e>
        USBD_CtlError(pdev, req);
 8006650:	f7ff fe9e 	bl	8006390 <USBD_CtlError>
}
 8006654:	e7f9      	b.n	800664a <USBD_GetConfig+0x22>
        pdev->dev_default_config = 0U;
 8006656:	4601      	mov	r1, r0
 8006658:	2300      	movs	r3, #0
 800665a:	f841 3f08 	str.w	r3, [r1, #8]!
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800665e:	2201      	movs	r2, #1
 8006660:	f000 f9a2 	bl	80069a8 <USBD_CtlSendData>
        break;
 8006664:	e7f1      	b.n	800664a <USBD_GetConfig+0x22>

08006666 <USBD_GetStatus>:
{
 8006666:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 8006668:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800666c:	3b01      	subs	r3, #1
 800666e:	2b02      	cmp	r3, #2
 8006670:	d812      	bhi.n	8006698 <USBD_GetStatus+0x32>
      if (req->wLength != 0x2U)
 8006672:	88cb      	ldrh	r3, [r1, #6]
 8006674:	2b02      	cmp	r3, #2
 8006676:	d10c      	bne.n	8006692 <USBD_GetStatus+0x2c>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006678:	2301      	movs	r3, #1
 800667a:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup)
 800667c:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 8006680:	b10b      	cbz	r3, 8006686 <USBD_GetStatus+0x20>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006682:	2303      	movs	r3, #3
 8006684:	60c3      	str	r3, [r0, #12]
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006686:	2202      	movs	r2, #2
 8006688:	f100 010c 	add.w	r1, r0, #12
 800668c:	f000 f98c 	bl	80069a8 <USBD_CtlSendData>
}
 8006690:	bd08      	pop	{r3, pc}
        USBD_CtlError(pdev, req);
 8006692:	f7ff fe7d 	bl	8006390 <USBD_CtlError>
        break;
 8006696:	e7fb      	b.n	8006690 <USBD_GetStatus+0x2a>
      USBD_CtlError(pdev, req);
 8006698:	f7ff fe7a 	bl	8006390 <USBD_CtlError>
}
 800669c:	e7f8      	b.n	8006690 <USBD_GetStatus+0x2a>

0800669e <USBD_ClrFeature>:
{
 800669e:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 80066a0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80066a4:	3b01      	subs	r3, #1
 80066a6:	2b02      	cmp	r3, #2
 80066a8:	d809      	bhi.n	80066be <USBD_ClrFeature+0x20>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80066aa:	884b      	ldrh	r3, [r1, #2]
 80066ac:	2b01      	cmp	r3, #1
 80066ae:	d000      	beq.n	80066b2 <USBD_ClrFeature+0x14>
}
 80066b0:	bd08      	pop	{r3, pc}
        pdev->dev_remote_wakeup = 0U;
 80066b2:	2300      	movs	r3, #0
 80066b4:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80066b8:	f000 f9a2 	bl	8006a00 <USBD_CtlSendStatus>
 80066bc:	e7f8      	b.n	80066b0 <USBD_ClrFeature+0x12>
      USBD_CtlError(pdev, req);
 80066be:	f7ff fe67 	bl	8006390 <USBD_CtlError>
}
 80066c2:	e7f5      	b.n	80066b0 <USBD_ClrFeature+0x12>

080066c4 <USBD_StdDevReq>:
{
 80066c4:	b508      	push	{r3, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80066c6:	780b      	ldrb	r3, [r1, #0]
 80066c8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80066cc:	2b20      	cmp	r3, #32
 80066ce:	d005      	beq.n	80066dc <USBD_StdDevReq+0x18>
 80066d0:	2b40      	cmp	r3, #64	; 0x40
 80066d2:	d003      	beq.n	80066dc <USBD_StdDevReq+0x18>
 80066d4:	b143      	cbz	r3, 80066e8 <USBD_StdDevReq+0x24>
      USBD_CtlError(pdev, req);
 80066d6:	f7ff fe5b 	bl	8006390 <USBD_CtlError>
      break;
 80066da:	e003      	b.n	80066e4 <USBD_StdDevReq+0x20>
      pdev->pClass->Setup(pdev, req);
 80066dc:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80066e0:	689b      	ldr	r3, [r3, #8]
 80066e2:	4798      	blx	r3
}
 80066e4:	2000      	movs	r0, #0
 80066e6:	bd08      	pop	{r3, pc}
      switch (req->bRequest)
 80066e8:	784b      	ldrb	r3, [r1, #1]
 80066ea:	2b09      	cmp	r3, #9
 80066ec:	d81b      	bhi.n	8006726 <USBD_StdDevReq+0x62>
 80066ee:	e8df f003 	tbb	[pc, r3]
 80066f2:	1711      	.short	0x1711
 80066f4:	081a141a 	.word	0x081a141a
 80066f8:	0b0e1a05 	.word	0x0b0e1a05
          USBD_GetDescriptor(pdev, req);
 80066fc:	f7ff fe52 	bl	80063a4 <USBD_GetDescriptor>
          break;
 8006700:	e7f0      	b.n	80066e4 <USBD_StdDevReq+0x20>
          USBD_SetAddress(pdev, req);
 8006702:	f7ff ff12 	bl	800652a <USBD_SetAddress>
          break;
 8006706:	e7ed      	b.n	80066e4 <USBD_StdDevReq+0x20>
          USBD_SetConfig(pdev, req);
 8006708:	f7ff ff36 	bl	8006578 <USBD_SetConfig>
          break;
 800670c:	e7ea      	b.n	80066e4 <USBD_StdDevReq+0x20>
          USBD_GetConfig(pdev, req);
 800670e:	f7ff ff8b 	bl	8006628 <USBD_GetConfig>
          break;
 8006712:	e7e7      	b.n	80066e4 <USBD_StdDevReq+0x20>
          USBD_GetStatus(pdev, req);
 8006714:	f7ff ffa7 	bl	8006666 <USBD_GetStatus>
          break;
 8006718:	e7e4      	b.n	80066e4 <USBD_StdDevReq+0x20>
          USBD_SetFeature(pdev, req);
 800671a:	f7ff fe1b 	bl	8006354 <USBD_SetFeature>
          break;
 800671e:	e7e1      	b.n	80066e4 <USBD_StdDevReq+0x20>
          USBD_ClrFeature(pdev, req);
 8006720:	f7ff ffbd 	bl	800669e <USBD_ClrFeature>
          break;
 8006724:	e7de      	b.n	80066e4 <USBD_StdDevReq+0x20>
          USBD_CtlError(pdev, req);
 8006726:	f7ff fe33 	bl	8006390 <USBD_CtlError>
          break;
 800672a:	e7db      	b.n	80066e4 <USBD_StdDevReq+0x20>

0800672c <USBD_StdItfReq>:
{
 800672c:	b538      	push	{r3, r4, r5, lr}
 800672e:	4605      	mov	r5, r0
 8006730:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006732:	780b      	ldrb	r3, [r1, #0]
 8006734:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006738:	2b20      	cmp	r3, #32
 800673a:	d006      	beq.n	800674a <USBD_StdItfReq+0x1e>
 800673c:	2b40      	cmp	r3, #64	; 0x40
 800673e:	d004      	beq.n	800674a <USBD_StdItfReq+0x1e>
 8006740:	b11b      	cbz	r3, 800674a <USBD_StdItfReq+0x1e>
      USBD_CtlError(pdev, req);
 8006742:	f7ff fe25 	bl	8006390 <USBD_CtlError>
}
 8006746:	2000      	movs	r0, #0
 8006748:	bd38      	pop	{r3, r4, r5, pc}
      switch (pdev->dev_state)
 800674a:	f895 329c 	ldrb.w	r3, [r5, #668]	; 0x29c
 800674e:	3b01      	subs	r3, #1
 8006750:	2b02      	cmp	r3, #2
 8006752:	d816      	bhi.n	8006782 <USBD_StdItfReq+0x56>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006754:	7923      	ldrb	r3, [r4, #4]
 8006756:	2b01      	cmp	r3, #1
 8006758:	d80e      	bhi.n	8006778 <USBD_StdItfReq+0x4c>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800675a:	f8d5 32b4 	ldr.w	r3, [r5, #692]	; 0x2b4
 800675e:	689b      	ldr	r3, [r3, #8]
 8006760:	4621      	mov	r1, r4
 8006762:	4628      	mov	r0, r5
 8006764:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006766:	88e3      	ldrh	r3, [r4, #6]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d1ec      	bne.n	8006746 <USBD_StdItfReq+0x1a>
 800676c:	2800      	cmp	r0, #0
 800676e:	d1ea      	bne.n	8006746 <USBD_StdItfReq+0x1a>
              USBD_CtlSendStatus(pdev);
 8006770:	4628      	mov	r0, r5
 8006772:	f000 f945 	bl	8006a00 <USBD_CtlSendStatus>
 8006776:	e7e6      	b.n	8006746 <USBD_StdItfReq+0x1a>
            USBD_CtlError(pdev, req);
 8006778:	4621      	mov	r1, r4
 800677a:	4628      	mov	r0, r5
 800677c:	f7ff fe08 	bl	8006390 <USBD_CtlError>
 8006780:	e7e1      	b.n	8006746 <USBD_StdItfReq+0x1a>
          USBD_CtlError(pdev, req);
 8006782:	4621      	mov	r1, r4
 8006784:	4628      	mov	r0, r5
 8006786:	f7ff fe03 	bl	8006390 <USBD_CtlError>
          break;
 800678a:	e7dc      	b.n	8006746 <USBD_StdItfReq+0x1a>

0800678c <USBD_StdEPReq>:
{
 800678c:	b570      	push	{r4, r5, r6, lr}
 800678e:	4605      	mov	r5, r0
  ep_addr  = LOBYTE(req->wIndex);
 8006790:	888b      	ldrh	r3, [r1, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006792:	780c      	ldrb	r4, [r1, #0]
 8006794:	f004 0460 	and.w	r4, r4, #96	; 0x60
 8006798:	2c20      	cmp	r4, #32
 800679a:	d007      	beq.n	80067ac <USBD_StdEPReq+0x20>
 800679c:	b2da      	uxtb	r2, r3
 800679e:	2c40      	cmp	r4, #64	; 0x40
 80067a0:	d004      	beq.n	80067ac <USBD_StdEPReq+0x20>
 80067a2:	b15c      	cbz	r4, 80067bc <USBD_StdEPReq+0x30>
      USBD_CtlError(pdev, req);
 80067a4:	f7ff fdf4 	bl	8006390 <USBD_CtlError>
  return ret;
 80067a8:	2400      	movs	r4, #0
      break;
 80067aa:	e005      	b.n	80067b8 <USBD_StdEPReq+0x2c>
      pdev->pClass->Setup(pdev, req);
 80067ac:	f8d5 32b4 	ldr.w	r3, [r5, #692]	; 0x2b4
 80067b0:	689b      	ldr	r3, [r3, #8]
 80067b2:	4628      	mov	r0, r5
 80067b4:	4798      	blx	r3
  return ret;
 80067b6:	2400      	movs	r4, #0
}
 80067b8:	4620      	mov	r0, r4
 80067ba:	bd70      	pop	{r4, r5, r6, pc}
      if ((req->bmRequest & 0x60U) == 0x20U)
 80067bc:	2c20      	cmp	r4, #32
 80067be:	d009      	beq.n	80067d4 <USBD_StdEPReq+0x48>
      switch (req->bRequest)
 80067c0:	784e      	ldrb	r6, [r1, #1]
 80067c2:	2e01      	cmp	r6, #1
 80067c4:	d033      	beq.n	800682e <USBD_StdEPReq+0xa2>
 80067c6:	2e03      	cmp	r6, #3
 80067c8:	d00a      	beq.n	80067e0 <USBD_StdEPReq+0x54>
 80067ca:	2e00      	cmp	r6, #0
 80067cc:	d055      	beq.n	800687a <USBD_StdEPReq+0xee>
          USBD_CtlError(pdev, req);
 80067ce:	f7ff fddf 	bl	8006390 <USBD_CtlError>
          break;
 80067d2:	e7f1      	b.n	80067b8 <USBD_StdEPReq+0x2c>
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80067d4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80067d8:	689b      	ldr	r3, [r3, #8]
 80067da:	4798      	blx	r3
 80067dc:	4604      	mov	r4, r0
        return ret;
 80067de:	e7eb      	b.n	80067b8 <USBD_StdEPReq+0x2c>
          switch (pdev->dev_state)
 80067e0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80067e4:	2b02      	cmp	r3, #2
 80067e6:	d004      	beq.n	80067f2 <USBD_StdEPReq+0x66>
 80067e8:	2b03      	cmp	r3, #3
 80067ea:	d011      	beq.n	8006810 <USBD_StdEPReq+0x84>
              USBD_CtlError(pdev, req);
 80067ec:	f7ff fdd0 	bl	8006390 <USBD_CtlError>
              break;
 80067f0:	e7e2      	b.n	80067b8 <USBD_StdEPReq+0x2c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80067f2:	b10a      	cbz	r2, 80067f8 <USBD_StdEPReq+0x6c>
 80067f4:	2a80      	cmp	r2, #128	; 0x80
 80067f6:	d103      	bne.n	8006800 <USBD_StdEPReq+0x74>
                USBD_CtlError(pdev, req);
 80067f8:	4628      	mov	r0, r5
 80067fa:	f7ff fdc9 	bl	8006390 <USBD_CtlError>
 80067fe:	e7db      	b.n	80067b8 <USBD_StdEPReq+0x2c>
                USBD_LL_StallEP(pdev, ep_addr);
 8006800:	4611      	mov	r1, r2
 8006802:	f000 fae4 	bl	8006dce <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006806:	2180      	movs	r1, #128	; 0x80
 8006808:	4628      	mov	r0, r5
 800680a:	f000 fae0 	bl	8006dce <USBD_LL_StallEP>
 800680e:	e7d3      	b.n	80067b8 <USBD_StdEPReq+0x2c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006810:	884b      	ldrh	r3, [r1, #2]
 8006812:	b923      	cbnz	r3, 800681e <USBD_StdEPReq+0x92>
                if ((ep_addr != 0x00U) &&
 8006814:	b11a      	cbz	r2, 800681e <USBD_StdEPReq+0x92>
 8006816:	2a80      	cmp	r2, #128	; 0x80
 8006818:	d001      	beq.n	800681e <USBD_StdEPReq+0x92>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800681a:	88cb      	ldrh	r3, [r1, #6]
 800681c:	b11b      	cbz	r3, 8006826 <USBD_StdEPReq+0x9a>
              USBD_CtlSendStatus(pdev);
 800681e:	4628      	mov	r0, r5
 8006820:	f000 f8ee 	bl	8006a00 <USBD_CtlSendStatus>
              break;
 8006824:	e7c8      	b.n	80067b8 <USBD_StdEPReq+0x2c>
                  USBD_LL_StallEP(pdev, ep_addr);
 8006826:	4611      	mov	r1, r2
 8006828:	f000 fad1 	bl	8006dce <USBD_LL_StallEP>
 800682c:	e7f7      	b.n	800681e <USBD_StdEPReq+0x92>
          switch (pdev->dev_state)
 800682e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006832:	2b02      	cmp	r3, #2
 8006834:	d004      	beq.n	8006840 <USBD_StdEPReq+0xb4>
 8006836:	2b03      	cmp	r3, #3
 8006838:	d011      	beq.n	800685e <USBD_StdEPReq+0xd2>
              USBD_CtlError(pdev, req);
 800683a:	f7ff fda9 	bl	8006390 <USBD_CtlError>
              break;
 800683e:	e7bb      	b.n	80067b8 <USBD_StdEPReq+0x2c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006840:	b10a      	cbz	r2, 8006846 <USBD_StdEPReq+0xba>
 8006842:	2a80      	cmp	r2, #128	; 0x80
 8006844:	d103      	bne.n	800684e <USBD_StdEPReq+0xc2>
                USBD_CtlError(pdev, req);
 8006846:	4628      	mov	r0, r5
 8006848:	f7ff fda2 	bl	8006390 <USBD_CtlError>
 800684c:	e7b4      	b.n	80067b8 <USBD_StdEPReq+0x2c>
                USBD_LL_StallEP(pdev, ep_addr);
 800684e:	4611      	mov	r1, r2
 8006850:	f000 fabd 	bl	8006dce <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006854:	2180      	movs	r1, #128	; 0x80
 8006856:	4628      	mov	r0, r5
 8006858:	f000 fab9 	bl	8006dce <USBD_LL_StallEP>
 800685c:	e7ac      	b.n	80067b8 <USBD_StdEPReq+0x2c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800685e:	884b      	ldrh	r3, [r1, #2]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d1a9      	bne.n	80067b8 <USBD_StdEPReq+0x2c>
                if ((ep_addr & 0x7FU) != 0x00U)
 8006864:	f012 0f7f 	tst.w	r2, #127	; 0x7f
 8006868:	d103      	bne.n	8006872 <USBD_StdEPReq+0xe6>
                USBD_CtlSendStatus(pdev);
 800686a:	4628      	mov	r0, r5
 800686c:	f000 f8c8 	bl	8006a00 <USBD_CtlSendStatus>
 8006870:	e7a2      	b.n	80067b8 <USBD_StdEPReq+0x2c>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8006872:	4611      	mov	r1, r2
 8006874:	f000 fab3 	bl	8006dde <USBD_LL_ClearStallEP>
 8006878:	e7f7      	b.n	800686a <USBD_StdEPReq+0xde>
          switch (pdev->dev_state)
 800687a:	f890 029c 	ldrb.w	r0, [r0, #668]	; 0x29c
 800687e:	2802      	cmp	r0, #2
 8006880:	d006      	beq.n	8006890 <USBD_StdEPReq+0x104>
 8006882:	2803      	cmp	r0, #3
 8006884:	d029      	beq.n	80068da <USBD_StdEPReq+0x14e>
              USBD_CtlError(pdev, req);
 8006886:	4628      	mov	r0, r5
 8006888:	f7ff fd82 	bl	8006390 <USBD_CtlError>
  return ret;
 800688c:	4634      	mov	r4, r6
              break;
 800688e:	e793      	b.n	80067b8 <USBD_StdEPReq+0x2c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006890:	b10a      	cbz	r2, 8006896 <USBD_StdEPReq+0x10a>
 8006892:	2a80      	cmp	r2, #128	; 0x80
 8006894:	d113      	bne.n	80068be <USBD_StdEPReq+0x132>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006896:	f013 0f80 	tst.w	r3, #128	; 0x80
 800689a:	d115      	bne.n	80068c8 <USBD_StdEPReq+0x13c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800689c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80068a0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80068a4:	0091      	lsls	r1, r2, #2
 80068a6:	f501 71a8 	add.w	r1, r1, #336	; 0x150
 80068aa:	4429      	add	r1, r5
 80068ac:	3104      	adds	r1, #4
              pep->status = 0x0000U;
 80068ae:	2300      	movs	r3, #0
 80068b0:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80068b2:	2202      	movs	r2, #2
 80068b4:	4628      	mov	r0, r5
 80068b6:	f000 f877 	bl	80069a8 <USBD_CtlSendData>
  return ret;
 80068ba:	4634      	mov	r4, r6
              break;
 80068bc:	e77c      	b.n	80067b8 <USBD_StdEPReq+0x2c>
                USBD_CtlError(pdev, req);
 80068be:	4628      	mov	r0, r5
 80068c0:	f7ff fd66 	bl	8006390 <USBD_CtlError>
  return ret;
 80068c4:	4634      	mov	r4, r6
                break;
 80068c6:	e777      	b.n	80067b8 <USBD_StdEPReq+0x2c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80068c8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80068cc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80068d0:	0091      	lsls	r1, r2, #2
 80068d2:	3110      	adds	r1, #16
 80068d4:	4429      	add	r1, r5
 80068d6:	3104      	adds	r1, #4
 80068d8:	e7e9      	b.n	80068ae <USBD_StdEPReq+0x122>
              if ((ep_addr & 0x80U) == 0x80U)
 80068da:	b25b      	sxtb	r3, r3
 80068dc:	2b00      	cmp	r3, #0
 80068de:	db1f      	blt.n	8006920 <USBD_StdEPReq+0x194>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80068e0:	f002 000f 	and.w	r0, r2, #15
 80068e4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80068e8:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 80068ec:	f8d0 0158 	ldr.w	r0, [r0, #344]	; 0x158
 80068f0:	b320      	cbz	r0, 800693c <USBD_StdEPReq+0x1b0>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	db27      	blt.n	8006946 <USBD_StdEPReq+0x1ba>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80068f6:	f002 037f 	and.w	r3, r2, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80068fa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80068fe:	009c      	lsls	r4, r3, #2
 8006900:	f504 74a8 	add.w	r4, r4, #336	; 0x150
 8006904:	442c      	add	r4, r5
 8006906:	3404      	adds	r4, #4
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006908:	b10a      	cbz	r2, 800690e <USBD_StdEPReq+0x182>
 800690a:	2a80      	cmp	r2, #128	; 0x80
 800690c:	d124      	bne.n	8006958 <USBD_StdEPReq+0x1cc>
                pep->status = 0x0000U;
 800690e:	2300      	movs	r3, #0
 8006910:	6023      	str	r3, [r4, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006912:	2202      	movs	r2, #2
 8006914:	4621      	mov	r1, r4
 8006916:	4628      	mov	r0, r5
 8006918:	f000 f846 	bl	80069a8 <USBD_CtlSendData>
  return ret;
 800691c:	4634      	mov	r4, r6
              break;
 800691e:	e74b      	b.n	80067b8 <USBD_StdEPReq+0x2c>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006920:	f002 000f 	and.w	r0, r2, #15
 8006924:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006928:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 800692c:	6980      	ldr	r0, [r0, #24]
 800692e:	2800      	cmp	r0, #0
 8006930:	d1df      	bne.n	80068f2 <USBD_StdEPReq+0x166>
                  USBD_CtlError(pdev, req);
 8006932:	4628      	mov	r0, r5
 8006934:	f7ff fd2c 	bl	8006390 <USBD_CtlError>
  return ret;
 8006938:	4634      	mov	r4, r6
                  break;
 800693a:	e73d      	b.n	80067b8 <USBD_StdEPReq+0x2c>
                  USBD_CtlError(pdev, req);
 800693c:	4628      	mov	r0, r5
 800693e:	f7ff fd27 	bl	8006390 <USBD_CtlError>
  return ret;
 8006942:	4634      	mov	r4, r6
                  break;
 8006944:	e738      	b.n	80067b8 <USBD_StdEPReq+0x2c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006946:	f002 037f 	and.w	r3, r2, #127	; 0x7f
 800694a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800694e:	009c      	lsls	r4, r3, #2
 8006950:	3410      	adds	r4, #16
 8006952:	442c      	add	r4, r5
 8006954:	3404      	adds	r4, #4
 8006956:	e7d7      	b.n	8006908 <USBD_StdEPReq+0x17c>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8006958:	4611      	mov	r1, r2
 800695a:	4628      	mov	r0, r5
 800695c:	f000 fa47 	bl	8006dee <USBD_LL_IsStallEP>
 8006960:	b110      	cbz	r0, 8006968 <USBD_StdEPReq+0x1dc>
                pep->status = 0x0001U;
 8006962:	2301      	movs	r3, #1
 8006964:	6023      	str	r3, [r4, #0]
 8006966:	e7d4      	b.n	8006912 <USBD_StdEPReq+0x186>
                pep->status = 0x0000U;
 8006968:	2300      	movs	r3, #0
 800696a:	6023      	str	r3, [r4, #0]
 800696c:	e7d1      	b.n	8006912 <USBD_StdEPReq+0x186>

0800696e <USBD_GetString>:
  if (desc != NULL)
 800696e:	b1d0      	cbz	r0, 80069a6 <USBD_GetString+0x38>
{
 8006970:	b570      	push	{r4, r5, r6, lr}
 8006972:	460d      	mov	r5, r1
 8006974:	4616      	mov	r6, r2
 8006976:	4604      	mov	r4, r0
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8006978:	f7ff fce2 	bl	8006340 <USBD_GetLen>
 800697c:	1c43      	adds	r3, r0, #1
 800697e:	005b      	lsls	r3, r3, #1
 8006980:	b29b      	uxth	r3, r3
 8006982:	8033      	strh	r3, [r6, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8006984:	702b      	strb	r3, [r5, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006986:	2303      	movs	r3, #3
 8006988:	706b      	strb	r3, [r5, #1]
 800698a:	2302      	movs	r3, #2
    while (*desc != '\0')
 800698c:	e007      	b.n	800699e <USBD_GetString+0x30>
      unicode[idx++] = *desc++;
 800698e:	3401      	adds	r4, #1
 8006990:	1c5a      	adds	r2, r3, #1
 8006992:	b2d2      	uxtb	r2, r2
 8006994:	54e8      	strb	r0, [r5, r3]
      unicode[idx++] =  0U;
 8006996:	3302      	adds	r3, #2
 8006998:	b2db      	uxtb	r3, r3
 800699a:	2100      	movs	r1, #0
 800699c:	54a9      	strb	r1, [r5, r2]
    while (*desc != '\0')
 800699e:	7820      	ldrb	r0, [r4, #0]
 80069a0:	2800      	cmp	r0, #0
 80069a2:	d1f4      	bne.n	800698e <USBD_GetString+0x20>
}
 80069a4:	bd70      	pop	{r4, r5, r6, pc}
 80069a6:	4770      	bx	lr

080069a8 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80069a8:	b508      	push	{r3, lr}
 80069aa:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80069ac:	2202      	movs	r2, #2
 80069ae:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80069b2:	61c3      	str	r3, [r0, #28]
  pdev->ep_in[0].rem_length   = len;
 80069b4:	6203      	str	r3, [r0, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80069b6:	460a      	mov	r2, r1
 80069b8:	2100      	movs	r1, #0
 80069ba:	f000 fa37 	bl	8006e2c <USBD_LL_Transmit>

  return USBD_OK;
}
 80069be:	2000      	movs	r0, #0
 80069c0:	bd08      	pop	{r3, pc}

080069c2 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80069c2:	b508      	push	{r3, lr}
 80069c4:	4613      	mov	r3, r2
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80069c6:	460a      	mov	r2, r1
 80069c8:	2100      	movs	r1, #0
 80069ca:	f000 fa2f 	bl	8006e2c <USBD_LL_Transmit>

  return USBD_OK;
}
 80069ce:	2000      	movs	r0, #0
 80069d0:	bd08      	pop	{r3, pc}

080069d2 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80069d2:	b508      	push	{r3, lr}
 80069d4:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80069d6:	2203      	movs	r2, #3
 80069d8:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80069dc:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80069e0:	f8c0 3160 	str.w	r3, [r0, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80069e4:	460a      	mov	r2, r1
 80069e6:	2100      	movs	r1, #0
 80069e8:	f000 fa28 	bl	8006e3c <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80069ec:	2000      	movs	r0, #0
 80069ee:	bd08      	pop	{r3, pc}

080069f0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80069f0:	b508      	push	{r3, lr}
 80069f2:	4613      	mov	r3, r2
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80069f4:	460a      	mov	r2, r1
 80069f6:	2100      	movs	r1, #0
 80069f8:	f000 fa20 	bl	8006e3c <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80069fc:	2000      	movs	r0, #0
 80069fe:	bd08      	pop	{r3, pc}

08006a00 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006a00:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006a02:	2304      	movs	r3, #4
 8006a04:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006a08:	2300      	movs	r3, #0
 8006a0a:	461a      	mov	r2, r3
 8006a0c:	4619      	mov	r1, r3
 8006a0e:	f000 fa0d 	bl	8006e2c <USBD_LL_Transmit>

  return USBD_OK;
}
 8006a12:	2000      	movs	r0, #0
 8006a14:	bd08      	pop	{r3, pc}

08006a16 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006a16:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006a18:	2305      	movs	r3, #5
 8006a1a:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006a1e:	2300      	movs	r3, #0
 8006a20:	461a      	mov	r2, r3
 8006a22:	4619      	mov	r1, r3
 8006a24:	f000 fa0a 	bl	8006e3c <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8006a28:	2000      	movs	r0, #0
 8006a2a:	bd08      	pop	{r3, pc}

08006a2c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006a2c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006a2e:	2200      	movs	r2, #0
 8006a30:	490f      	ldr	r1, [pc, #60]	; (8006a70 <MX_USB_DEVICE_Init+0x44>)
 8006a32:	4810      	ldr	r0, [pc, #64]	; (8006a74 <MX_USB_DEVICE_Init+0x48>)
 8006a34:	f7ff fb26 	bl	8006084 <USBD_Init>
 8006a38:	b970      	cbnz	r0, 8006a58 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006a3a:	490f      	ldr	r1, [pc, #60]	; (8006a78 <MX_USB_DEVICE_Init+0x4c>)
 8006a3c:	480d      	ldr	r0, [pc, #52]	; (8006a74 <MX_USB_DEVICE_Init+0x48>)
 8006a3e:	f7ff fb38 	bl	80060b2 <USBD_RegisterClass>
 8006a42:	b960      	cbnz	r0, 8006a5e <MX_USB_DEVICE_Init+0x32>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006a44:	490d      	ldr	r1, [pc, #52]	; (8006a7c <MX_USB_DEVICE_Init+0x50>)
 8006a46:	480b      	ldr	r0, [pc, #44]	; (8006a74 <MX_USB_DEVICE_Init+0x48>)
 8006a48:	f7ff faef 	bl	800602a <USBD_CDC_RegisterInterface>
 8006a4c:	b950      	cbnz	r0, 8006a64 <MX_USB_DEVICE_Init+0x38>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006a4e:	4809      	ldr	r0, [pc, #36]	; (8006a74 <MX_USB_DEVICE_Init+0x48>)
 8006a50:	f7ff fb36 	bl	80060c0 <USBD_Start>
 8006a54:	b948      	cbnz	r0, 8006a6a <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006a56:	bd08      	pop	{r3, pc}
    Error_Handler();
 8006a58:	f7fa fe3e 	bl	80016d8 <Error_Handler>
 8006a5c:	e7ed      	b.n	8006a3a <MX_USB_DEVICE_Init+0xe>
    Error_Handler();
 8006a5e:	f7fa fe3b 	bl	80016d8 <Error_Handler>
 8006a62:	e7ef      	b.n	8006a44 <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 8006a64:	f7fa fe38 	bl	80016d8 <Error_Handler>
 8006a68:	e7f1      	b.n	8006a4e <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 8006a6a:	f7fa fe35 	bl	80016d8 <Error_Handler>
}
 8006a6e:	e7f2      	b.n	8006a56 <MX_USB_DEVICE_Init+0x2a>
 8006a70:	20000140 	.word	0x20000140
 8006a74:	200018ac 	.word	0x200018ac
 8006a78:	20000018 	.word	0x20000018
 8006a7c:	20000128 	.word	0x20000128

08006a80 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8006a80:	2000      	movs	r0, #0
 8006a82:	4770      	bx	lr

08006a84 <CDC_Control_FS>:
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006a84:	2820      	cmp	r0, #32
 8006a86:	d003      	beq.n	8006a90 <CDC_Control_FS+0xc>
 8006a88:	2821      	cmp	r0, #33	; 0x21
 8006a8a:	d009      	beq.n	8006aa0 <CDC_Control_FS+0x1c>
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8006a8c:	2000      	movs	r0, #0
 8006a8e:	4770      	bx	lr
    	memcpy(lineCoding, pbuf, sizeof(lineCoding));
 8006a90:	4b07      	ldr	r3, [pc, #28]	; (8006ab0 <CDC_Control_FS+0x2c>)
 8006a92:	6808      	ldr	r0, [r1, #0]
 8006a94:	6018      	str	r0, [r3, #0]
 8006a96:	8888      	ldrh	r0, [r1, #4]
 8006a98:	798a      	ldrb	r2, [r1, #6]
 8006a9a:	8098      	strh	r0, [r3, #4]
 8006a9c:	719a      	strb	r2, [r3, #6]
    break;
 8006a9e:	e7f5      	b.n	8006a8c <CDC_Control_FS+0x8>
    	memcpy(pbuf, lineCoding, sizeof(lineCoding));
 8006aa0:	4b03      	ldr	r3, [pc, #12]	; (8006ab0 <CDC_Control_FS+0x2c>)
 8006aa2:	6818      	ldr	r0, [r3, #0]
 8006aa4:	6008      	str	r0, [r1, #0]
 8006aa6:	889a      	ldrh	r2, [r3, #4]
 8006aa8:	799b      	ldrb	r3, [r3, #6]
 8006aaa:	808a      	strh	r2, [r1, #4]
 8006aac:	718b      	strb	r3, [r1, #6]
    break;
 8006aae:	e7ed      	b.n	8006a8c <CDC_Control_FS+0x8>
 8006ab0:	20000138 	.word	0x20000138

08006ab4 <CDC_Init_FS>:
{
 8006ab4:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006ab6:	4c06      	ldr	r4, [pc, #24]	; (8006ad0 <CDC_Init_FS+0x1c>)
 8006ab8:	2200      	movs	r2, #0
 8006aba:	4906      	ldr	r1, [pc, #24]	; (8006ad4 <CDC_Init_FS+0x20>)
 8006abc:	4620      	mov	r0, r4
 8006abe:	f7ff fabb 	bl	8006038 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006ac2:	4905      	ldr	r1, [pc, #20]	; (8006ad8 <CDC_Init_FS+0x24>)
 8006ac4:	4620      	mov	r0, r4
 8006ac6:	f7ff fabf 	bl	8006048 <USBD_CDC_SetRxBuffer>
}
 8006aca:	2000      	movs	r0, #0
 8006acc:	bd10      	pop	{r4, pc}
 8006ace:	bf00      	nop
 8006ad0:	200018ac 	.word	0x200018ac
 8006ad4:	20001d70 	.word	0x20001d70
 8006ad8:	20001b70 	.word	0x20001b70

08006adc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006adc:	b570      	push	{r4, r5, r6, lr}
 8006ade:	4604      	mov	r4, r0
 8006ae0:	460d      	mov	r5, r1
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006ae2:	4e07      	ldr	r6, [pc, #28]	; (8006b00 <CDC_Receive_FS+0x24>)
 8006ae4:	4601      	mov	r1, r0
 8006ae6:	4630      	mov	r0, r6
 8006ae8:	f7ff faae 	bl	8006048 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006aec:	4630      	mov	r0, r6
 8006aee:	f7ff fab1 	bl	8006054 <USBD_CDC_ReceivePacket>
  CDC_ReveiveCallback(Buf, Len[0]); // My callback function
 8006af2:	7829      	ldrb	r1, [r5, #0]
 8006af4:	4620      	mov	r0, r4
 8006af6:	f7fa fdb3 	bl	8001660 <CDC_ReveiveCallback>
  return (USBD_OK);
  /* USER CODE END 6 */
}
 8006afa:	2000      	movs	r0, #0
 8006afc:	bd70      	pop	{r4, r5, r6, pc}
 8006afe:	bf00      	nop
 8006b00:	200018ac 	.word	0x200018ac

08006b04 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006b04:	2312      	movs	r3, #18
 8006b06:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 8006b08:	4800      	ldr	r0, [pc, #0]	; (8006b0c <USBD_FS_DeviceDescriptor+0x8>)
 8006b0a:	4770      	bx	lr
 8006b0c:	2000015c 	.word	0x2000015c

08006b10 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006b10:	2304      	movs	r3, #4
 8006b12:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 8006b14:	4800      	ldr	r0, [pc, #0]	; (8006b18 <USBD_FS_LangIDStrDescriptor+0x8>)
 8006b16:	4770      	bx	lr
 8006b18:	20000170 	.word	0x20000170

08006b1c <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d21e      	bcs.n	8006b60 <IntToUnicode+0x44>
{
 8006b22:	b500      	push	{lr}
 8006b24:	e010      	b.n	8006b48 <IntToUnicode+0x2c>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006b26:	f10c 0c37 	add.w	ip, ip, #55	; 0x37
 8006b2a:	f801 c013 	strb.w	ip, [r1, r3, lsl #1]
    }

    value = value << 4;
 8006b2e:	0100      	lsls	r0, r0, #4

    pbuf[2 * idx + 1] = 0;
 8006b30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8006b34:	f10c 0c01 	add.w	ip, ip, #1
 8006b38:	f04f 0e00 	mov.w	lr, #0
 8006b3c:	f801 e00c 	strb.w	lr, [r1, ip]
  for (idx = 0; idx < len; idx++)
 8006b40:	3301      	adds	r3, #1
 8006b42:	b2db      	uxtb	r3, r3
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d209      	bcs.n	8006b5c <IntToUnicode+0x40>
    if (((value >> 28)) < 0xA)
 8006b48:	ea4f 7c10 	mov.w	ip, r0, lsr #28
 8006b4c:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
 8006b50:	d2e9      	bcs.n	8006b26 <IntToUnicode+0xa>
      pbuf[2 * idx] = (value >> 28) + '0';
 8006b52:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8006b56:	f801 c013 	strb.w	ip, [r1, r3, lsl #1]
 8006b5a:	e7e8      	b.n	8006b2e <IntToUnicode+0x12>
  }
}
 8006b5c:	f85d fb04 	ldr.w	pc, [sp], #4
 8006b60:	4770      	bx	lr
	...

08006b64 <Get_SerialNum>:
{
 8006b64:	b538      	push	{r3, r4, r5, lr}
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006b66:	4b0b      	ldr	r3, [pc, #44]	; (8006b94 <Get_SerialNum+0x30>)
 8006b68:	f8d3 07e8 	ldr.w	r0, [r3, #2024]	; 0x7e8
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006b6c:	f8d3 47ec 	ldr.w	r4, [r3, #2028]	; 0x7ec
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006b70:	f8d3 37f0 	ldr.w	r3, [r3, #2032]	; 0x7f0
  if (deviceserial0 != 0)
 8006b74:	18c0      	adds	r0, r0, r3
 8006b76:	d100      	bne.n	8006b7a <Get_SerialNum+0x16>
}
 8006b78:	bd38      	pop	{r3, r4, r5, pc}
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006b7a:	4d07      	ldr	r5, [pc, #28]	; (8006b98 <Get_SerialNum+0x34>)
 8006b7c:	2208      	movs	r2, #8
 8006b7e:	1ca9      	adds	r1, r5, #2
 8006b80:	f7ff ffcc 	bl	8006b1c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006b84:	2204      	movs	r2, #4
 8006b86:	f105 0112 	add.w	r1, r5, #18
 8006b8a:	4620      	mov	r0, r4
 8006b8c:	f7ff ffc6 	bl	8006b1c <IntToUnicode>
}
 8006b90:	e7f2      	b.n	8006b78 <Get_SerialNum+0x14>
 8006b92:	bf00      	nop
 8006b94:	1ffff000 	.word	0x1ffff000
 8006b98:	20000174 	.word	0x20000174

08006b9c <USBD_FS_SerialStrDescriptor>:
{
 8006b9c:	b508      	push	{r3, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8006b9e:	231a      	movs	r3, #26
 8006ba0:	800b      	strh	r3, [r1, #0]
  Get_SerialNum();
 8006ba2:	f7ff ffdf 	bl	8006b64 <Get_SerialNum>
}
 8006ba6:	4801      	ldr	r0, [pc, #4]	; (8006bac <USBD_FS_SerialStrDescriptor+0x10>)
 8006ba8:	bd08      	pop	{r3, pc}
 8006baa:	bf00      	nop
 8006bac:	20000174 	.word	0x20000174

08006bb0 <USBD_FS_ProductStrDescriptor>:
{
 8006bb0:	b508      	push	{r3, lr}
 8006bb2:	460a      	mov	r2, r1
  if(speed == 0)
 8006bb4:	b928      	cbnz	r0, 8006bc2 <USBD_FS_ProductStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006bb6:	4905      	ldr	r1, [pc, #20]	; (8006bcc <USBD_FS_ProductStrDescriptor+0x1c>)
 8006bb8:	4805      	ldr	r0, [pc, #20]	; (8006bd0 <USBD_FS_ProductStrDescriptor+0x20>)
 8006bba:	f7ff fed8 	bl	800696e <USBD_GetString>
}
 8006bbe:	4803      	ldr	r0, [pc, #12]	; (8006bcc <USBD_FS_ProductStrDescriptor+0x1c>)
 8006bc0:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006bc2:	4902      	ldr	r1, [pc, #8]	; (8006bcc <USBD_FS_ProductStrDescriptor+0x1c>)
 8006bc4:	4802      	ldr	r0, [pc, #8]	; (8006bd0 <USBD_FS_ProductStrDescriptor+0x20>)
 8006bc6:	f7ff fed2 	bl	800696e <USBD_GetString>
 8006bca:	e7f8      	b.n	8006bbe <USBD_FS_ProductStrDescriptor+0xe>
 8006bcc:	20001f70 	.word	0x20001f70
 8006bd0:	0800b768 	.word	0x0800b768

08006bd4 <USBD_FS_ManufacturerStrDescriptor>:
{
 8006bd4:	b510      	push	{r4, lr}
 8006bd6:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006bd8:	4c03      	ldr	r4, [pc, #12]	; (8006be8 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8006bda:	4621      	mov	r1, r4
 8006bdc:	4803      	ldr	r0, [pc, #12]	; (8006bec <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8006bde:	f7ff fec6 	bl	800696e <USBD_GetString>
}
 8006be2:	4620      	mov	r0, r4
 8006be4:	bd10      	pop	{r4, pc}
 8006be6:	bf00      	nop
 8006be8:	20001f70 	.word	0x20001f70
 8006bec:	0800b778 	.word	0x0800b778

08006bf0 <USBD_FS_ConfigStrDescriptor>:
{
 8006bf0:	b508      	push	{r3, lr}
 8006bf2:	460a      	mov	r2, r1
  if(speed == USBD_SPEED_HIGH)
 8006bf4:	b928      	cbnz	r0, 8006c02 <USBD_FS_ConfigStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006bf6:	4905      	ldr	r1, [pc, #20]	; (8006c0c <USBD_FS_ConfigStrDescriptor+0x1c>)
 8006bf8:	4805      	ldr	r0, [pc, #20]	; (8006c10 <USBD_FS_ConfigStrDescriptor+0x20>)
 8006bfa:	f7ff feb8 	bl	800696e <USBD_GetString>
}
 8006bfe:	4803      	ldr	r0, [pc, #12]	; (8006c0c <USBD_FS_ConfigStrDescriptor+0x1c>)
 8006c00:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006c02:	4902      	ldr	r1, [pc, #8]	; (8006c0c <USBD_FS_ConfigStrDescriptor+0x1c>)
 8006c04:	4802      	ldr	r0, [pc, #8]	; (8006c10 <USBD_FS_ConfigStrDescriptor+0x20>)
 8006c06:	f7ff feb2 	bl	800696e <USBD_GetString>
 8006c0a:	e7f8      	b.n	8006bfe <USBD_FS_ConfigStrDescriptor+0xe>
 8006c0c:	20001f70 	.word	0x20001f70
 8006c10:	0800b780 	.word	0x0800b780

08006c14 <USBD_FS_InterfaceStrDescriptor>:
{
 8006c14:	b508      	push	{r3, lr}
 8006c16:	460a      	mov	r2, r1
  if(speed == 0)
 8006c18:	b928      	cbnz	r0, 8006c26 <USBD_FS_InterfaceStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006c1a:	4905      	ldr	r1, [pc, #20]	; (8006c30 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8006c1c:	4805      	ldr	r0, [pc, #20]	; (8006c34 <USBD_FS_InterfaceStrDescriptor+0x20>)
 8006c1e:	f7ff fea6 	bl	800696e <USBD_GetString>
}
 8006c22:	4803      	ldr	r0, [pc, #12]	; (8006c30 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8006c24:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006c26:	4902      	ldr	r1, [pc, #8]	; (8006c30 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8006c28:	4802      	ldr	r0, [pc, #8]	; (8006c34 <USBD_FS_InterfaceStrDescriptor+0x20>)
 8006c2a:	f7ff fea0 	bl	800696e <USBD_GetString>
 8006c2e:	e7f8      	b.n	8006c22 <USBD_FS_InterfaceStrDescriptor+0xe>
 8006c30:	20001f70 	.word	0x20001f70
 8006c34:	0800b78c 	.word	0x0800b78c

08006c38 <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 8006c38:	2802      	cmp	r0, #2
 8006c3a:	d805      	bhi.n	8006c48 <USBD_Get_USB_Status+0x10>
 8006c3c:	e8df f000 	tbb	[pc, r0]
 8006c40:	0405      	.short	0x0405
 8006c42:	02          	.byte	0x02
 8006c43:	00          	.byte	0x00
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
    break;
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006c44:	2001      	movs	r0, #1
    break;
 8006c46:	4770      	bx	lr
      usb_status = USBD_FAIL;
 8006c48:	2002      	movs	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8006c4a:	4770      	bx	lr

08006c4c <HAL_PCD_MspInit>:
  if(pcdHandle->Instance==USB)
 8006c4c:	6802      	ldr	r2, [r0, #0]
 8006c4e:	4b09      	ldr	r3, [pc, #36]	; (8006c74 <HAL_PCD_MspInit+0x28>)
 8006c50:	429a      	cmp	r2, r3
 8006c52:	d000      	beq.n	8006c56 <HAL_PCD_MspInit+0xa>
 8006c54:	4770      	bx	lr
{
 8006c56:	b082      	sub	sp, #8
    __HAL_RCC_USB_CLK_ENABLE();
 8006c58:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8006c5c:	69da      	ldr	r2, [r3, #28]
 8006c5e:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8006c62:	61da      	str	r2, [r3, #28]
 8006c64:	69db      	ldr	r3, [r3, #28]
 8006c66:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006c6a:	9301      	str	r3, [sp, #4]
 8006c6c:	9b01      	ldr	r3, [sp, #4]
}
 8006c6e:	b002      	add	sp, #8
 8006c70:	4770      	bx	lr
 8006c72:	bf00      	nop
 8006c74:	40005c00 	.word	0x40005c00

08006c78 <HAL_PCD_SetupStageCallback>:
{
 8006c78:	b508      	push	{r3, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006c7a:	f500 712c 	add.w	r1, r0, #688	; 0x2b0
 8006c7e:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8006c82:	f7ff fa35 	bl	80060f0 <USBD_LL_SetupStage>
}
 8006c86:	bd08      	pop	{r3, pc}

08006c88 <HAL_PCD_DataOutStageCallback>:
{
 8006c88:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006c8a:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8006c8e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8006c92:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 8006c96:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8006c9a:	f7ff fa56 	bl	800614a <USBD_LL_DataOutStage>
}
 8006c9e:	bd08      	pop	{r3, pc}

08006ca0 <HAL_PCD_DataInStageCallback>:
{
 8006ca0:	b508      	push	{r3, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006ca2:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8006ca6:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8006caa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006cac:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8006cb0:	f7ff fa91 	bl	80061d6 <USBD_LL_DataInStage>
}
 8006cb4:	bd08      	pop	{r3, pc}

08006cb6 <HAL_PCD_SOFCallback>:
{
 8006cb6:	b508      	push	{r3, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006cb8:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8006cbc:	f7ff fb32 	bl	8006324 <USBD_LL_SOF>
}
 8006cc0:	bd08      	pop	{r3, pc}

08006cc2 <HAL_PCD_ResetCallback>:
{
 8006cc2:	b510      	push	{r4, lr}
 8006cc4:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006cc6:	6883      	ldr	r3, [r0, #8]
 8006cc8:	2b02      	cmp	r3, #2
 8006cca:	d109      	bne.n	8006ce0 <HAL_PCD_ResetCallback+0x1e>
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006ccc:	2101      	movs	r1, #1
 8006cce:	f8d4 02e8 	ldr.w	r0, [r4, #744]	; 0x2e8
 8006cd2:	f7ff fb10 	bl	80062f6 <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006cd6:	f8d4 02e8 	ldr.w	r0, [r4, #744]	; 0x2e8
 8006cda:	f7ff fae4 	bl	80062a6 <USBD_LL_Reset>
}
 8006cde:	bd10      	pop	{r4, pc}
    Error_Handler();
 8006ce0:	f7fa fcfa 	bl	80016d8 <Error_Handler>
 8006ce4:	e7f2      	b.n	8006ccc <HAL_PCD_ResetCallback+0xa>
	...

08006ce8 <HAL_PCD_SuspendCallback>:
{
 8006ce8:	b510      	push	{r4, lr}
 8006cea:	4604      	mov	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006cec:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8006cf0:	f7ff fb04 	bl	80062fc <USBD_LL_Suspend>
  if (hpcd->Init.low_power_enable)
 8006cf4:	69a3      	ldr	r3, [r4, #24]
 8006cf6:	b123      	cbz	r3, 8006d02 <HAL_PCD_SuspendCallback+0x1a>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006cf8:	4a02      	ldr	r2, [pc, #8]	; (8006d04 <HAL_PCD_SuspendCallback+0x1c>)
 8006cfa:	6913      	ldr	r3, [r2, #16]
 8006cfc:	f043 0306 	orr.w	r3, r3, #6
 8006d00:	6113      	str	r3, [r2, #16]
}
 8006d02:	bd10      	pop	{r4, pc}
 8006d04:	e000ed00 	.word	0xe000ed00

08006d08 <HAL_PCD_ResumeCallback>:
{
 8006d08:	b508      	push	{r3, lr}
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006d0a:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8006d0e:	f7ff fafe 	bl	800630e <USBD_LL_Resume>
}
 8006d12:	bd08      	pop	{r3, pc}

08006d14 <USBD_LL_Init>:
{
 8006d14:	b510      	push	{r4, lr}
 8006d16:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 8006d18:	481d      	ldr	r0, [pc, #116]	; (8006d90 <USBD_LL_Init+0x7c>)
 8006d1a:	f8c0 42e8 	str.w	r4, [r0, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8006d1e:	f8c4 02c0 	str.w	r0, [r4, #704]	; 0x2c0
  hpcd_USB_FS.Instance = USB;
 8006d22:	4b1c      	ldr	r3, [pc, #112]	; (8006d94 <USBD_LL_Init+0x80>)
 8006d24:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8006d26:	2308      	movs	r3, #8
 8006d28:	6043      	str	r3, [r0, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8006d2a:	2302      	movs	r3, #2
 8006d2c:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8006d2e:	2300      	movs	r3, #0
 8006d30:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8006d32:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8006d34:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8006d36:	f7fb ff3e 	bl	8002bb6 <HAL_PCD_Init>
 8006d3a:	bb30      	cbnz	r0, 8006d8a <USBD_LL_Init+0x76>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8006d3c:	2318      	movs	r3, #24
 8006d3e:	2200      	movs	r2, #0
 8006d40:	4611      	mov	r1, r2
 8006d42:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8006d46:	f7fc fe43 	bl	80039d0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8006d4a:	2358      	movs	r3, #88	; 0x58
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	2180      	movs	r1, #128	; 0x80
 8006d50:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8006d54:	f7fc fe3c 	bl	80039d0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8006d58:	23c0      	movs	r3, #192	; 0xc0
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	2181      	movs	r1, #129	; 0x81
 8006d5e:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8006d62:	f7fc fe35 	bl	80039d0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8006d66:	f44f 7388 	mov.w	r3, #272	; 0x110
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	2101      	movs	r1, #1
 8006d6e:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8006d72:	f7fc fe2d 	bl	80039d0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8006d76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	2182      	movs	r1, #130	; 0x82
 8006d7e:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8006d82:	f7fc fe25 	bl	80039d0 <HAL_PCDEx_PMAConfig>
}
 8006d86:	2000      	movs	r0, #0
 8006d88:	bd10      	pop	{r4, pc}
    Error_Handler( );
 8006d8a:	f7fa fca5 	bl	80016d8 <Error_Handler>
 8006d8e:	e7d5      	b.n	8006d3c <USBD_LL_Init+0x28>
 8006d90:	20002170 	.word	0x20002170
 8006d94:	40005c00 	.word	0x40005c00

08006d98 <USBD_LL_Start>:
{
 8006d98:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8006d9a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8006d9e:	f7fb ff96 	bl	8002cce <HAL_PCD_Start>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006da2:	f7ff ff49 	bl	8006c38 <USBD_Get_USB_Status>
}
 8006da6:	bd08      	pop	{r3, pc}

08006da8 <USBD_LL_OpenEP>:
{
 8006da8:	b508      	push	{r3, lr}
 8006daa:	4694      	mov	ip, r2
 8006dac:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006dae:	4663      	mov	r3, ip
 8006db0:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8006db4:	f7fc fcce 	bl	8003754 <HAL_PCD_EP_Open>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006db8:	f7ff ff3e 	bl	8006c38 <USBD_Get_USB_Status>
}
 8006dbc:	bd08      	pop	{r3, pc}

08006dbe <USBD_LL_CloseEP>:
{
 8006dbe:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006dc0:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8006dc4:	f7fc fd08 	bl	80037d8 <HAL_PCD_EP_Close>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006dc8:	f7ff ff36 	bl	8006c38 <USBD_Get_USB_Status>
}
 8006dcc:	bd08      	pop	{r3, pc}

08006dce <USBD_LL_StallEP>:
{
 8006dce:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006dd0:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8006dd4:	f7fc fd85 	bl	80038e2 <HAL_PCD_EP_SetStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006dd8:	f7ff ff2e 	bl	8006c38 <USBD_Get_USB_Status>
}
 8006ddc:	bd08      	pop	{r3, pc}

08006dde <USBD_LL_ClearStallEP>:
{
 8006dde:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006de0:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8006de4:	f7fc fdb9 	bl	800395a <HAL_PCD_EP_ClrStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006de8:	f7ff ff26 	bl	8006c38 <USBD_Get_USB_Status>
}
 8006dec:	bd08      	pop	{r3, pc}

08006dee <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006dee:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
  if((ep_addr & 0x80) == 0x80)
 8006df2:	f011 0f80 	tst.w	r1, #128	; 0x80
 8006df6:	d108      	bne.n	8006e0a <USBD_LL_IsStallEP+0x1c>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006df8:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8006dfc:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8006e00:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8006e04:	f891 016a 	ldrb.w	r0, [r1, #362]	; 0x16a
}
 8006e08:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006e0a:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8006e0e:	3101      	adds	r1, #1
 8006e10:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8006e14:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8006e18:	7888      	ldrb	r0, [r1, #2]
 8006e1a:	4770      	bx	lr

08006e1c <USBD_LL_SetUSBAddress>:
{
 8006e1c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006e1e:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8006e22:	f7fc fb99 	bl	8003558 <HAL_PCD_SetAddress>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006e26:	f7ff ff07 	bl	8006c38 <USBD_Get_USB_Status>
}
 8006e2a:	bd08      	pop	{r3, pc}

08006e2c <USBD_LL_Transmit>:
{
 8006e2c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006e2e:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8006e32:	f7fc fd2e 	bl	8003892 <HAL_PCD_EP_Transmit>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006e36:	f7ff feff 	bl	8006c38 <USBD_Get_USB_Status>
}
 8006e3a:	bd08      	pop	{r3, pc}

08006e3c <USBD_LL_PrepareReceive>:
{
 8006e3c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006e3e:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8006e42:	f7fc fcfb 	bl	800383c <HAL_PCD_EP_Receive>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006e46:	f7ff fef7 	bl	8006c38 <USBD_Get_USB_Status>
}
 8006e4a:	bd08      	pop	{r3, pc}

08006e4c <USBD_LL_GetRxDataSize>:
{
 8006e4c:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006e4e:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8006e52:	f7fc fd15 	bl	8003880 <HAL_PCD_EP_GetRxCount>
}
 8006e56:	bd08      	pop	{r3, pc}

08006e58 <USBD_static_malloc>:
}
 8006e58:	4800      	ldr	r0, [pc, #0]	; (8006e5c <USBD_static_malloc+0x4>)
 8006e5a:	4770      	bx	lr
 8006e5c:	2000245c 	.word	0x2000245c

08006e60 <USBD_static_free>:
}
 8006e60:	4770      	bx	lr

08006e62 <HAL_PCDEx_SetConnectionState>:
}
 8006e62:	4770      	bx	lr

08006e64 <atof>:
 8006e64:	2100      	movs	r1, #0
 8006e66:	f001 bae7 	b.w	8008438 <strtod>

08006e6a <atoi>:
 8006e6a:	220a      	movs	r2, #10
 8006e6c:	2100      	movs	r1, #0
 8006e6e:	f001 bbc7 	b.w	8008600 <strtol>
	...

08006e74 <__errno>:
 8006e74:	4b01      	ldr	r3, [pc, #4]	; (8006e7c <__errno+0x8>)
 8006e76:	6818      	ldr	r0, [r3, #0]
 8006e78:	4770      	bx	lr
 8006e7a:	bf00      	nop
 8006e7c:	20000190 	.word	0x20000190

08006e80 <__libc_init_array>:
 8006e80:	b570      	push	{r4, r5, r6, lr}
 8006e82:	2600      	movs	r6, #0
 8006e84:	4d0c      	ldr	r5, [pc, #48]	; (8006eb8 <__libc_init_array+0x38>)
 8006e86:	4c0d      	ldr	r4, [pc, #52]	; (8006ebc <__libc_init_array+0x3c>)
 8006e88:	1b64      	subs	r4, r4, r5
 8006e8a:	10a4      	asrs	r4, r4, #2
 8006e8c:	42a6      	cmp	r6, r4
 8006e8e:	d109      	bne.n	8006ea4 <__libc_init_array+0x24>
 8006e90:	f004 fac2 	bl	800b418 <_init>
 8006e94:	2600      	movs	r6, #0
 8006e96:	4d0a      	ldr	r5, [pc, #40]	; (8006ec0 <__libc_init_array+0x40>)
 8006e98:	4c0a      	ldr	r4, [pc, #40]	; (8006ec4 <__libc_init_array+0x44>)
 8006e9a:	1b64      	subs	r4, r4, r5
 8006e9c:	10a4      	asrs	r4, r4, #2
 8006e9e:	42a6      	cmp	r6, r4
 8006ea0:	d105      	bne.n	8006eae <__libc_init_array+0x2e>
 8006ea2:	bd70      	pop	{r4, r5, r6, pc}
 8006ea4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ea8:	4798      	blx	r3
 8006eaa:	3601      	adds	r6, #1
 8006eac:	e7ee      	b.n	8006e8c <__libc_init_array+0xc>
 8006eae:	f855 3b04 	ldr.w	r3, [r5], #4
 8006eb2:	4798      	blx	r3
 8006eb4:	3601      	adds	r6, #1
 8006eb6:	e7f2      	b.n	8006e9e <__libc_init_array+0x1e>
 8006eb8:	0800bc98 	.word	0x0800bc98
 8006ebc:	0800bc98 	.word	0x0800bc98
 8006ec0:	0800bc98 	.word	0x0800bc98
 8006ec4:	0800bc9c 	.word	0x0800bc9c

08006ec8 <memcpy>:
 8006ec8:	440a      	add	r2, r1
 8006eca:	4291      	cmp	r1, r2
 8006ecc:	f100 33ff 	add.w	r3, r0, #4294967295
 8006ed0:	d100      	bne.n	8006ed4 <memcpy+0xc>
 8006ed2:	4770      	bx	lr
 8006ed4:	b510      	push	{r4, lr}
 8006ed6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006eda:	4291      	cmp	r1, r2
 8006edc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ee0:	d1f9      	bne.n	8006ed6 <memcpy+0xe>
 8006ee2:	bd10      	pop	{r4, pc}

08006ee4 <memset>:
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	4402      	add	r2, r0
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d100      	bne.n	8006eee <memset+0xa>
 8006eec:	4770      	bx	lr
 8006eee:	f803 1b01 	strb.w	r1, [r3], #1
 8006ef2:	e7f9      	b.n	8006ee8 <memset+0x4>

08006ef4 <__cvt>:
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006efa:	461f      	mov	r7, r3
 8006efc:	bfbb      	ittet	lt
 8006efe:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8006f02:	461f      	movlt	r7, r3
 8006f04:	2300      	movge	r3, #0
 8006f06:	232d      	movlt	r3, #45	; 0x2d
 8006f08:	b088      	sub	sp, #32
 8006f0a:	4614      	mov	r4, r2
 8006f0c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006f0e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006f10:	7013      	strb	r3, [r2, #0]
 8006f12:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006f14:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8006f18:	f023 0820 	bic.w	r8, r3, #32
 8006f1c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006f20:	d005      	beq.n	8006f2e <__cvt+0x3a>
 8006f22:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006f26:	d100      	bne.n	8006f2a <__cvt+0x36>
 8006f28:	3501      	adds	r5, #1
 8006f2a:	2302      	movs	r3, #2
 8006f2c:	e000      	b.n	8006f30 <__cvt+0x3c>
 8006f2e:	2303      	movs	r3, #3
 8006f30:	aa07      	add	r2, sp, #28
 8006f32:	9204      	str	r2, [sp, #16]
 8006f34:	aa06      	add	r2, sp, #24
 8006f36:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006f3a:	e9cd 3500 	strd	r3, r5, [sp]
 8006f3e:	4622      	mov	r2, r4
 8006f40:	463b      	mov	r3, r7
 8006f42:	f001 fc11 	bl	8008768 <_dtoa_r>
 8006f46:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006f4a:	4606      	mov	r6, r0
 8006f4c:	d102      	bne.n	8006f54 <__cvt+0x60>
 8006f4e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006f50:	07db      	lsls	r3, r3, #31
 8006f52:	d522      	bpl.n	8006f9a <__cvt+0xa6>
 8006f54:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006f58:	eb06 0905 	add.w	r9, r6, r5
 8006f5c:	d110      	bne.n	8006f80 <__cvt+0x8c>
 8006f5e:	7833      	ldrb	r3, [r6, #0]
 8006f60:	2b30      	cmp	r3, #48	; 0x30
 8006f62:	d10a      	bne.n	8006f7a <__cvt+0x86>
 8006f64:	2200      	movs	r2, #0
 8006f66:	2300      	movs	r3, #0
 8006f68:	4620      	mov	r0, r4
 8006f6a:	4639      	mov	r1, r7
 8006f6c:	f7f9 fd26 	bl	80009bc <__aeabi_dcmpeq>
 8006f70:	b918      	cbnz	r0, 8006f7a <__cvt+0x86>
 8006f72:	f1c5 0501 	rsb	r5, r5, #1
 8006f76:	f8ca 5000 	str.w	r5, [sl]
 8006f7a:	f8da 3000 	ldr.w	r3, [sl]
 8006f7e:	4499      	add	r9, r3
 8006f80:	2200      	movs	r2, #0
 8006f82:	2300      	movs	r3, #0
 8006f84:	4620      	mov	r0, r4
 8006f86:	4639      	mov	r1, r7
 8006f88:	f7f9 fd18 	bl	80009bc <__aeabi_dcmpeq>
 8006f8c:	b108      	cbz	r0, 8006f92 <__cvt+0x9e>
 8006f8e:	f8cd 901c 	str.w	r9, [sp, #28]
 8006f92:	2230      	movs	r2, #48	; 0x30
 8006f94:	9b07      	ldr	r3, [sp, #28]
 8006f96:	454b      	cmp	r3, r9
 8006f98:	d307      	bcc.n	8006faa <__cvt+0xb6>
 8006f9a:	4630      	mov	r0, r6
 8006f9c:	9b07      	ldr	r3, [sp, #28]
 8006f9e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006fa0:	1b9b      	subs	r3, r3, r6
 8006fa2:	6013      	str	r3, [r2, #0]
 8006fa4:	b008      	add	sp, #32
 8006fa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006faa:	1c59      	adds	r1, r3, #1
 8006fac:	9107      	str	r1, [sp, #28]
 8006fae:	701a      	strb	r2, [r3, #0]
 8006fb0:	e7f0      	b.n	8006f94 <__cvt+0xa0>

08006fb2 <__exponent>:
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006fb6:	2900      	cmp	r1, #0
 8006fb8:	f803 2b02 	strb.w	r2, [r3], #2
 8006fbc:	bfb6      	itet	lt
 8006fbe:	222d      	movlt	r2, #45	; 0x2d
 8006fc0:	222b      	movge	r2, #43	; 0x2b
 8006fc2:	4249      	neglt	r1, r1
 8006fc4:	2909      	cmp	r1, #9
 8006fc6:	7042      	strb	r2, [r0, #1]
 8006fc8:	dd2b      	ble.n	8007022 <__exponent+0x70>
 8006fca:	f10d 0407 	add.w	r4, sp, #7
 8006fce:	46a4      	mov	ip, r4
 8006fd0:	270a      	movs	r7, #10
 8006fd2:	fb91 f6f7 	sdiv	r6, r1, r7
 8006fd6:	460a      	mov	r2, r1
 8006fd8:	46a6      	mov	lr, r4
 8006fda:	fb07 1516 	mls	r5, r7, r6, r1
 8006fde:	2a63      	cmp	r2, #99	; 0x63
 8006fe0:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8006fe4:	4631      	mov	r1, r6
 8006fe6:	f104 34ff 	add.w	r4, r4, #4294967295
 8006fea:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006fee:	dcf0      	bgt.n	8006fd2 <__exponent+0x20>
 8006ff0:	3130      	adds	r1, #48	; 0x30
 8006ff2:	f1ae 0502 	sub.w	r5, lr, #2
 8006ff6:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006ffa:	4629      	mov	r1, r5
 8006ffc:	1c44      	adds	r4, r0, #1
 8006ffe:	4561      	cmp	r1, ip
 8007000:	d30a      	bcc.n	8007018 <__exponent+0x66>
 8007002:	f10d 0209 	add.w	r2, sp, #9
 8007006:	eba2 020e 	sub.w	r2, r2, lr
 800700a:	4565      	cmp	r5, ip
 800700c:	bf88      	it	hi
 800700e:	2200      	movhi	r2, #0
 8007010:	4413      	add	r3, r2
 8007012:	1a18      	subs	r0, r3, r0
 8007014:	b003      	add	sp, #12
 8007016:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007018:	f811 2b01 	ldrb.w	r2, [r1], #1
 800701c:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007020:	e7ed      	b.n	8006ffe <__exponent+0x4c>
 8007022:	2330      	movs	r3, #48	; 0x30
 8007024:	3130      	adds	r1, #48	; 0x30
 8007026:	7083      	strb	r3, [r0, #2]
 8007028:	70c1      	strb	r1, [r0, #3]
 800702a:	1d03      	adds	r3, r0, #4
 800702c:	e7f1      	b.n	8007012 <__exponent+0x60>
	...

08007030 <_printf_float>:
 8007030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007034:	b091      	sub	sp, #68	; 0x44
 8007036:	460c      	mov	r4, r1
 8007038:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800703c:	4616      	mov	r6, r2
 800703e:	461f      	mov	r7, r3
 8007040:	4605      	mov	r5, r0
 8007042:	f002 fcf7 	bl	8009a34 <_localeconv_r>
 8007046:	6803      	ldr	r3, [r0, #0]
 8007048:	4618      	mov	r0, r3
 800704a:	9309      	str	r3, [sp, #36]	; 0x24
 800704c:	f7f9 f88a 	bl	8000164 <strlen>
 8007050:	2300      	movs	r3, #0
 8007052:	930e      	str	r3, [sp, #56]	; 0x38
 8007054:	f8d8 3000 	ldr.w	r3, [r8]
 8007058:	900a      	str	r0, [sp, #40]	; 0x28
 800705a:	3307      	adds	r3, #7
 800705c:	f023 0307 	bic.w	r3, r3, #7
 8007060:	f103 0208 	add.w	r2, r3, #8
 8007064:	f894 9018 	ldrb.w	r9, [r4, #24]
 8007068:	f8d4 b000 	ldr.w	fp, [r4]
 800706c:	f8c8 2000 	str.w	r2, [r8]
 8007070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007074:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007078:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800707c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8007080:	930b      	str	r3, [sp, #44]	; 0x2c
 8007082:	f04f 32ff 	mov.w	r2, #4294967295
 8007086:	4640      	mov	r0, r8
 8007088:	4b9c      	ldr	r3, [pc, #624]	; (80072fc <_printf_float+0x2cc>)
 800708a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800708c:	f7f9 fcc8 	bl	8000a20 <__aeabi_dcmpun>
 8007090:	bb70      	cbnz	r0, 80070f0 <_printf_float+0xc0>
 8007092:	f04f 32ff 	mov.w	r2, #4294967295
 8007096:	4640      	mov	r0, r8
 8007098:	4b98      	ldr	r3, [pc, #608]	; (80072fc <_printf_float+0x2cc>)
 800709a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800709c:	f7f9 fca2 	bl	80009e4 <__aeabi_dcmple>
 80070a0:	bb30      	cbnz	r0, 80070f0 <_printf_float+0xc0>
 80070a2:	2200      	movs	r2, #0
 80070a4:	2300      	movs	r3, #0
 80070a6:	4640      	mov	r0, r8
 80070a8:	4651      	mov	r1, sl
 80070aa:	f7f9 fc91 	bl	80009d0 <__aeabi_dcmplt>
 80070ae:	b110      	cbz	r0, 80070b6 <_printf_float+0x86>
 80070b0:	232d      	movs	r3, #45	; 0x2d
 80070b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80070b6:	4b92      	ldr	r3, [pc, #584]	; (8007300 <_printf_float+0x2d0>)
 80070b8:	4892      	ldr	r0, [pc, #584]	; (8007304 <_printf_float+0x2d4>)
 80070ba:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80070be:	bf94      	ite	ls
 80070c0:	4698      	movls	r8, r3
 80070c2:	4680      	movhi	r8, r0
 80070c4:	2303      	movs	r3, #3
 80070c6:	f04f 0a00 	mov.w	sl, #0
 80070ca:	6123      	str	r3, [r4, #16]
 80070cc:	f02b 0304 	bic.w	r3, fp, #4
 80070d0:	6023      	str	r3, [r4, #0]
 80070d2:	4633      	mov	r3, r6
 80070d4:	4621      	mov	r1, r4
 80070d6:	4628      	mov	r0, r5
 80070d8:	9700      	str	r7, [sp, #0]
 80070da:	aa0f      	add	r2, sp, #60	; 0x3c
 80070dc:	f000 f9d4 	bl	8007488 <_printf_common>
 80070e0:	3001      	adds	r0, #1
 80070e2:	f040 8090 	bne.w	8007206 <_printf_float+0x1d6>
 80070e6:	f04f 30ff 	mov.w	r0, #4294967295
 80070ea:	b011      	add	sp, #68	; 0x44
 80070ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070f0:	4642      	mov	r2, r8
 80070f2:	4653      	mov	r3, sl
 80070f4:	4640      	mov	r0, r8
 80070f6:	4651      	mov	r1, sl
 80070f8:	f7f9 fc92 	bl	8000a20 <__aeabi_dcmpun>
 80070fc:	b148      	cbz	r0, 8007112 <_printf_float+0xe2>
 80070fe:	f1ba 0f00 	cmp.w	sl, #0
 8007102:	bfb8      	it	lt
 8007104:	232d      	movlt	r3, #45	; 0x2d
 8007106:	4880      	ldr	r0, [pc, #512]	; (8007308 <_printf_float+0x2d8>)
 8007108:	bfb8      	it	lt
 800710a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800710e:	4b7f      	ldr	r3, [pc, #508]	; (800730c <_printf_float+0x2dc>)
 8007110:	e7d3      	b.n	80070ba <_printf_float+0x8a>
 8007112:	6863      	ldr	r3, [r4, #4]
 8007114:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8007118:	1c5a      	adds	r2, r3, #1
 800711a:	d142      	bne.n	80071a2 <_printf_float+0x172>
 800711c:	2306      	movs	r3, #6
 800711e:	6063      	str	r3, [r4, #4]
 8007120:	2200      	movs	r2, #0
 8007122:	9206      	str	r2, [sp, #24]
 8007124:	aa0e      	add	r2, sp, #56	; 0x38
 8007126:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800712a:	aa0d      	add	r2, sp, #52	; 0x34
 800712c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8007130:	9203      	str	r2, [sp, #12]
 8007132:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8007136:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800713a:	6023      	str	r3, [r4, #0]
 800713c:	6863      	ldr	r3, [r4, #4]
 800713e:	4642      	mov	r2, r8
 8007140:	9300      	str	r3, [sp, #0]
 8007142:	4628      	mov	r0, r5
 8007144:	4653      	mov	r3, sl
 8007146:	910b      	str	r1, [sp, #44]	; 0x2c
 8007148:	f7ff fed4 	bl	8006ef4 <__cvt>
 800714c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800714e:	4680      	mov	r8, r0
 8007150:	2947      	cmp	r1, #71	; 0x47
 8007152:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007154:	d108      	bne.n	8007168 <_printf_float+0x138>
 8007156:	1cc8      	adds	r0, r1, #3
 8007158:	db02      	blt.n	8007160 <_printf_float+0x130>
 800715a:	6863      	ldr	r3, [r4, #4]
 800715c:	4299      	cmp	r1, r3
 800715e:	dd40      	ble.n	80071e2 <_printf_float+0x1b2>
 8007160:	f1a9 0902 	sub.w	r9, r9, #2
 8007164:	fa5f f989 	uxtb.w	r9, r9
 8007168:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800716c:	d81f      	bhi.n	80071ae <_printf_float+0x17e>
 800716e:	464a      	mov	r2, r9
 8007170:	3901      	subs	r1, #1
 8007172:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007176:	910d      	str	r1, [sp, #52]	; 0x34
 8007178:	f7ff ff1b 	bl	8006fb2 <__exponent>
 800717c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800717e:	4682      	mov	sl, r0
 8007180:	1813      	adds	r3, r2, r0
 8007182:	2a01      	cmp	r2, #1
 8007184:	6123      	str	r3, [r4, #16]
 8007186:	dc02      	bgt.n	800718e <_printf_float+0x15e>
 8007188:	6822      	ldr	r2, [r4, #0]
 800718a:	07d2      	lsls	r2, r2, #31
 800718c:	d501      	bpl.n	8007192 <_printf_float+0x162>
 800718e:	3301      	adds	r3, #1
 8007190:	6123      	str	r3, [r4, #16]
 8007192:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8007196:	2b00      	cmp	r3, #0
 8007198:	d09b      	beq.n	80070d2 <_printf_float+0xa2>
 800719a:	232d      	movs	r3, #45	; 0x2d
 800719c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80071a0:	e797      	b.n	80070d2 <_printf_float+0xa2>
 80071a2:	2947      	cmp	r1, #71	; 0x47
 80071a4:	d1bc      	bne.n	8007120 <_printf_float+0xf0>
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d1ba      	bne.n	8007120 <_printf_float+0xf0>
 80071aa:	2301      	movs	r3, #1
 80071ac:	e7b7      	b.n	800711e <_printf_float+0xee>
 80071ae:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80071b2:	d118      	bne.n	80071e6 <_printf_float+0x1b6>
 80071b4:	2900      	cmp	r1, #0
 80071b6:	6863      	ldr	r3, [r4, #4]
 80071b8:	dd0b      	ble.n	80071d2 <_printf_float+0x1a2>
 80071ba:	6121      	str	r1, [r4, #16]
 80071bc:	b913      	cbnz	r3, 80071c4 <_printf_float+0x194>
 80071be:	6822      	ldr	r2, [r4, #0]
 80071c0:	07d0      	lsls	r0, r2, #31
 80071c2:	d502      	bpl.n	80071ca <_printf_float+0x19a>
 80071c4:	3301      	adds	r3, #1
 80071c6:	440b      	add	r3, r1
 80071c8:	6123      	str	r3, [r4, #16]
 80071ca:	f04f 0a00 	mov.w	sl, #0
 80071ce:	65a1      	str	r1, [r4, #88]	; 0x58
 80071d0:	e7df      	b.n	8007192 <_printf_float+0x162>
 80071d2:	b913      	cbnz	r3, 80071da <_printf_float+0x1aa>
 80071d4:	6822      	ldr	r2, [r4, #0]
 80071d6:	07d2      	lsls	r2, r2, #31
 80071d8:	d501      	bpl.n	80071de <_printf_float+0x1ae>
 80071da:	3302      	adds	r3, #2
 80071dc:	e7f4      	b.n	80071c8 <_printf_float+0x198>
 80071de:	2301      	movs	r3, #1
 80071e0:	e7f2      	b.n	80071c8 <_printf_float+0x198>
 80071e2:	f04f 0967 	mov.w	r9, #103	; 0x67
 80071e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80071e8:	4299      	cmp	r1, r3
 80071ea:	db05      	blt.n	80071f8 <_printf_float+0x1c8>
 80071ec:	6823      	ldr	r3, [r4, #0]
 80071ee:	6121      	str	r1, [r4, #16]
 80071f0:	07d8      	lsls	r0, r3, #31
 80071f2:	d5ea      	bpl.n	80071ca <_printf_float+0x19a>
 80071f4:	1c4b      	adds	r3, r1, #1
 80071f6:	e7e7      	b.n	80071c8 <_printf_float+0x198>
 80071f8:	2900      	cmp	r1, #0
 80071fa:	bfcc      	ite	gt
 80071fc:	2201      	movgt	r2, #1
 80071fe:	f1c1 0202 	rsble	r2, r1, #2
 8007202:	4413      	add	r3, r2
 8007204:	e7e0      	b.n	80071c8 <_printf_float+0x198>
 8007206:	6823      	ldr	r3, [r4, #0]
 8007208:	055a      	lsls	r2, r3, #21
 800720a:	d407      	bmi.n	800721c <_printf_float+0x1ec>
 800720c:	6923      	ldr	r3, [r4, #16]
 800720e:	4642      	mov	r2, r8
 8007210:	4631      	mov	r1, r6
 8007212:	4628      	mov	r0, r5
 8007214:	47b8      	blx	r7
 8007216:	3001      	adds	r0, #1
 8007218:	d12b      	bne.n	8007272 <_printf_float+0x242>
 800721a:	e764      	b.n	80070e6 <_printf_float+0xb6>
 800721c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007220:	f240 80dd 	bls.w	80073de <_printf_float+0x3ae>
 8007224:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007228:	2200      	movs	r2, #0
 800722a:	2300      	movs	r3, #0
 800722c:	f7f9 fbc6 	bl	80009bc <__aeabi_dcmpeq>
 8007230:	2800      	cmp	r0, #0
 8007232:	d033      	beq.n	800729c <_printf_float+0x26c>
 8007234:	2301      	movs	r3, #1
 8007236:	4631      	mov	r1, r6
 8007238:	4628      	mov	r0, r5
 800723a:	4a35      	ldr	r2, [pc, #212]	; (8007310 <_printf_float+0x2e0>)
 800723c:	47b8      	blx	r7
 800723e:	3001      	adds	r0, #1
 8007240:	f43f af51 	beq.w	80070e6 <_printf_float+0xb6>
 8007244:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007248:	429a      	cmp	r2, r3
 800724a:	db02      	blt.n	8007252 <_printf_float+0x222>
 800724c:	6823      	ldr	r3, [r4, #0]
 800724e:	07d8      	lsls	r0, r3, #31
 8007250:	d50f      	bpl.n	8007272 <_printf_float+0x242>
 8007252:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007256:	4631      	mov	r1, r6
 8007258:	4628      	mov	r0, r5
 800725a:	47b8      	blx	r7
 800725c:	3001      	adds	r0, #1
 800725e:	f43f af42 	beq.w	80070e6 <_printf_float+0xb6>
 8007262:	f04f 0800 	mov.w	r8, #0
 8007266:	f104 091a 	add.w	r9, r4, #26
 800726a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800726c:	3b01      	subs	r3, #1
 800726e:	4543      	cmp	r3, r8
 8007270:	dc09      	bgt.n	8007286 <_printf_float+0x256>
 8007272:	6823      	ldr	r3, [r4, #0]
 8007274:	079b      	lsls	r3, r3, #30
 8007276:	f100 8102 	bmi.w	800747e <_printf_float+0x44e>
 800727a:	68e0      	ldr	r0, [r4, #12]
 800727c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800727e:	4298      	cmp	r0, r3
 8007280:	bfb8      	it	lt
 8007282:	4618      	movlt	r0, r3
 8007284:	e731      	b.n	80070ea <_printf_float+0xba>
 8007286:	2301      	movs	r3, #1
 8007288:	464a      	mov	r2, r9
 800728a:	4631      	mov	r1, r6
 800728c:	4628      	mov	r0, r5
 800728e:	47b8      	blx	r7
 8007290:	3001      	adds	r0, #1
 8007292:	f43f af28 	beq.w	80070e6 <_printf_float+0xb6>
 8007296:	f108 0801 	add.w	r8, r8, #1
 800729a:	e7e6      	b.n	800726a <_printf_float+0x23a>
 800729c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800729e:	2b00      	cmp	r3, #0
 80072a0:	dc38      	bgt.n	8007314 <_printf_float+0x2e4>
 80072a2:	2301      	movs	r3, #1
 80072a4:	4631      	mov	r1, r6
 80072a6:	4628      	mov	r0, r5
 80072a8:	4a19      	ldr	r2, [pc, #100]	; (8007310 <_printf_float+0x2e0>)
 80072aa:	47b8      	blx	r7
 80072ac:	3001      	adds	r0, #1
 80072ae:	f43f af1a 	beq.w	80070e6 <_printf_float+0xb6>
 80072b2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80072b6:	4313      	orrs	r3, r2
 80072b8:	d102      	bne.n	80072c0 <_printf_float+0x290>
 80072ba:	6823      	ldr	r3, [r4, #0]
 80072bc:	07d9      	lsls	r1, r3, #31
 80072be:	d5d8      	bpl.n	8007272 <_printf_float+0x242>
 80072c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80072c4:	4631      	mov	r1, r6
 80072c6:	4628      	mov	r0, r5
 80072c8:	47b8      	blx	r7
 80072ca:	3001      	adds	r0, #1
 80072cc:	f43f af0b 	beq.w	80070e6 <_printf_float+0xb6>
 80072d0:	f04f 0900 	mov.w	r9, #0
 80072d4:	f104 0a1a 	add.w	sl, r4, #26
 80072d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80072da:	425b      	negs	r3, r3
 80072dc:	454b      	cmp	r3, r9
 80072de:	dc01      	bgt.n	80072e4 <_printf_float+0x2b4>
 80072e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80072e2:	e794      	b.n	800720e <_printf_float+0x1de>
 80072e4:	2301      	movs	r3, #1
 80072e6:	4652      	mov	r2, sl
 80072e8:	4631      	mov	r1, r6
 80072ea:	4628      	mov	r0, r5
 80072ec:	47b8      	blx	r7
 80072ee:	3001      	adds	r0, #1
 80072f0:	f43f aef9 	beq.w	80070e6 <_printf_float+0xb6>
 80072f4:	f109 0901 	add.w	r9, r9, #1
 80072f8:	e7ee      	b.n	80072d8 <_printf_float+0x2a8>
 80072fa:	bf00      	nop
 80072fc:	7fefffff 	.word	0x7fefffff
 8007300:	0800b7a0 	.word	0x0800b7a0
 8007304:	0800b7a4 	.word	0x0800b7a4
 8007308:	0800b7ac 	.word	0x0800b7ac
 800730c:	0800b7a8 	.word	0x0800b7a8
 8007310:	0800b7b0 	.word	0x0800b7b0
 8007314:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007316:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007318:	429a      	cmp	r2, r3
 800731a:	bfa8      	it	ge
 800731c:	461a      	movge	r2, r3
 800731e:	2a00      	cmp	r2, #0
 8007320:	4691      	mov	r9, r2
 8007322:	dc37      	bgt.n	8007394 <_printf_float+0x364>
 8007324:	f04f 0b00 	mov.w	fp, #0
 8007328:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800732c:	f104 021a 	add.w	r2, r4, #26
 8007330:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8007334:	ebaa 0309 	sub.w	r3, sl, r9
 8007338:	455b      	cmp	r3, fp
 800733a:	dc33      	bgt.n	80073a4 <_printf_float+0x374>
 800733c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007340:	429a      	cmp	r2, r3
 8007342:	db3b      	blt.n	80073bc <_printf_float+0x38c>
 8007344:	6823      	ldr	r3, [r4, #0]
 8007346:	07da      	lsls	r2, r3, #31
 8007348:	d438      	bmi.n	80073bc <_printf_float+0x38c>
 800734a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800734c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800734e:	eba3 020a 	sub.w	r2, r3, sl
 8007352:	eba3 0901 	sub.w	r9, r3, r1
 8007356:	4591      	cmp	r9, r2
 8007358:	bfa8      	it	ge
 800735a:	4691      	movge	r9, r2
 800735c:	f1b9 0f00 	cmp.w	r9, #0
 8007360:	dc34      	bgt.n	80073cc <_printf_float+0x39c>
 8007362:	f04f 0800 	mov.w	r8, #0
 8007366:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800736a:	f104 0a1a 	add.w	sl, r4, #26
 800736e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007372:	1a9b      	subs	r3, r3, r2
 8007374:	eba3 0309 	sub.w	r3, r3, r9
 8007378:	4543      	cmp	r3, r8
 800737a:	f77f af7a 	ble.w	8007272 <_printf_float+0x242>
 800737e:	2301      	movs	r3, #1
 8007380:	4652      	mov	r2, sl
 8007382:	4631      	mov	r1, r6
 8007384:	4628      	mov	r0, r5
 8007386:	47b8      	blx	r7
 8007388:	3001      	adds	r0, #1
 800738a:	f43f aeac 	beq.w	80070e6 <_printf_float+0xb6>
 800738e:	f108 0801 	add.w	r8, r8, #1
 8007392:	e7ec      	b.n	800736e <_printf_float+0x33e>
 8007394:	4613      	mov	r3, r2
 8007396:	4631      	mov	r1, r6
 8007398:	4642      	mov	r2, r8
 800739a:	4628      	mov	r0, r5
 800739c:	47b8      	blx	r7
 800739e:	3001      	adds	r0, #1
 80073a0:	d1c0      	bne.n	8007324 <_printf_float+0x2f4>
 80073a2:	e6a0      	b.n	80070e6 <_printf_float+0xb6>
 80073a4:	2301      	movs	r3, #1
 80073a6:	4631      	mov	r1, r6
 80073a8:	4628      	mov	r0, r5
 80073aa:	920b      	str	r2, [sp, #44]	; 0x2c
 80073ac:	47b8      	blx	r7
 80073ae:	3001      	adds	r0, #1
 80073b0:	f43f ae99 	beq.w	80070e6 <_printf_float+0xb6>
 80073b4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80073b6:	f10b 0b01 	add.w	fp, fp, #1
 80073ba:	e7b9      	b.n	8007330 <_printf_float+0x300>
 80073bc:	4631      	mov	r1, r6
 80073be:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80073c2:	4628      	mov	r0, r5
 80073c4:	47b8      	blx	r7
 80073c6:	3001      	adds	r0, #1
 80073c8:	d1bf      	bne.n	800734a <_printf_float+0x31a>
 80073ca:	e68c      	b.n	80070e6 <_printf_float+0xb6>
 80073cc:	464b      	mov	r3, r9
 80073ce:	4631      	mov	r1, r6
 80073d0:	4628      	mov	r0, r5
 80073d2:	eb08 020a 	add.w	r2, r8, sl
 80073d6:	47b8      	blx	r7
 80073d8:	3001      	adds	r0, #1
 80073da:	d1c2      	bne.n	8007362 <_printf_float+0x332>
 80073dc:	e683      	b.n	80070e6 <_printf_float+0xb6>
 80073de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80073e0:	2a01      	cmp	r2, #1
 80073e2:	dc01      	bgt.n	80073e8 <_printf_float+0x3b8>
 80073e4:	07db      	lsls	r3, r3, #31
 80073e6:	d537      	bpl.n	8007458 <_printf_float+0x428>
 80073e8:	2301      	movs	r3, #1
 80073ea:	4642      	mov	r2, r8
 80073ec:	4631      	mov	r1, r6
 80073ee:	4628      	mov	r0, r5
 80073f0:	47b8      	blx	r7
 80073f2:	3001      	adds	r0, #1
 80073f4:	f43f ae77 	beq.w	80070e6 <_printf_float+0xb6>
 80073f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80073fc:	4631      	mov	r1, r6
 80073fe:	4628      	mov	r0, r5
 8007400:	47b8      	blx	r7
 8007402:	3001      	adds	r0, #1
 8007404:	f43f ae6f 	beq.w	80070e6 <_printf_float+0xb6>
 8007408:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800740c:	2200      	movs	r2, #0
 800740e:	2300      	movs	r3, #0
 8007410:	f7f9 fad4 	bl	80009bc <__aeabi_dcmpeq>
 8007414:	b9d8      	cbnz	r0, 800744e <_printf_float+0x41e>
 8007416:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007418:	f108 0201 	add.w	r2, r8, #1
 800741c:	3b01      	subs	r3, #1
 800741e:	4631      	mov	r1, r6
 8007420:	4628      	mov	r0, r5
 8007422:	47b8      	blx	r7
 8007424:	3001      	adds	r0, #1
 8007426:	d10e      	bne.n	8007446 <_printf_float+0x416>
 8007428:	e65d      	b.n	80070e6 <_printf_float+0xb6>
 800742a:	2301      	movs	r3, #1
 800742c:	464a      	mov	r2, r9
 800742e:	4631      	mov	r1, r6
 8007430:	4628      	mov	r0, r5
 8007432:	47b8      	blx	r7
 8007434:	3001      	adds	r0, #1
 8007436:	f43f ae56 	beq.w	80070e6 <_printf_float+0xb6>
 800743a:	f108 0801 	add.w	r8, r8, #1
 800743e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007440:	3b01      	subs	r3, #1
 8007442:	4543      	cmp	r3, r8
 8007444:	dcf1      	bgt.n	800742a <_printf_float+0x3fa>
 8007446:	4653      	mov	r3, sl
 8007448:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800744c:	e6e0      	b.n	8007210 <_printf_float+0x1e0>
 800744e:	f04f 0800 	mov.w	r8, #0
 8007452:	f104 091a 	add.w	r9, r4, #26
 8007456:	e7f2      	b.n	800743e <_printf_float+0x40e>
 8007458:	2301      	movs	r3, #1
 800745a:	4642      	mov	r2, r8
 800745c:	e7df      	b.n	800741e <_printf_float+0x3ee>
 800745e:	2301      	movs	r3, #1
 8007460:	464a      	mov	r2, r9
 8007462:	4631      	mov	r1, r6
 8007464:	4628      	mov	r0, r5
 8007466:	47b8      	blx	r7
 8007468:	3001      	adds	r0, #1
 800746a:	f43f ae3c 	beq.w	80070e6 <_printf_float+0xb6>
 800746e:	f108 0801 	add.w	r8, r8, #1
 8007472:	68e3      	ldr	r3, [r4, #12]
 8007474:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007476:	1a5b      	subs	r3, r3, r1
 8007478:	4543      	cmp	r3, r8
 800747a:	dcf0      	bgt.n	800745e <_printf_float+0x42e>
 800747c:	e6fd      	b.n	800727a <_printf_float+0x24a>
 800747e:	f04f 0800 	mov.w	r8, #0
 8007482:	f104 0919 	add.w	r9, r4, #25
 8007486:	e7f4      	b.n	8007472 <_printf_float+0x442>

08007488 <_printf_common>:
 8007488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800748c:	4616      	mov	r6, r2
 800748e:	4699      	mov	r9, r3
 8007490:	688a      	ldr	r2, [r1, #8]
 8007492:	690b      	ldr	r3, [r1, #16]
 8007494:	4607      	mov	r7, r0
 8007496:	4293      	cmp	r3, r2
 8007498:	bfb8      	it	lt
 800749a:	4613      	movlt	r3, r2
 800749c:	6033      	str	r3, [r6, #0]
 800749e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80074a2:	460c      	mov	r4, r1
 80074a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80074a8:	b10a      	cbz	r2, 80074ae <_printf_common+0x26>
 80074aa:	3301      	adds	r3, #1
 80074ac:	6033      	str	r3, [r6, #0]
 80074ae:	6823      	ldr	r3, [r4, #0]
 80074b0:	0699      	lsls	r1, r3, #26
 80074b2:	bf42      	ittt	mi
 80074b4:	6833      	ldrmi	r3, [r6, #0]
 80074b6:	3302      	addmi	r3, #2
 80074b8:	6033      	strmi	r3, [r6, #0]
 80074ba:	6825      	ldr	r5, [r4, #0]
 80074bc:	f015 0506 	ands.w	r5, r5, #6
 80074c0:	d106      	bne.n	80074d0 <_printf_common+0x48>
 80074c2:	f104 0a19 	add.w	sl, r4, #25
 80074c6:	68e3      	ldr	r3, [r4, #12]
 80074c8:	6832      	ldr	r2, [r6, #0]
 80074ca:	1a9b      	subs	r3, r3, r2
 80074cc:	42ab      	cmp	r3, r5
 80074ce:	dc28      	bgt.n	8007522 <_printf_common+0x9a>
 80074d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80074d4:	1e13      	subs	r3, r2, #0
 80074d6:	6822      	ldr	r2, [r4, #0]
 80074d8:	bf18      	it	ne
 80074da:	2301      	movne	r3, #1
 80074dc:	0692      	lsls	r2, r2, #26
 80074de:	d42d      	bmi.n	800753c <_printf_common+0xb4>
 80074e0:	4649      	mov	r1, r9
 80074e2:	4638      	mov	r0, r7
 80074e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80074e8:	47c0      	blx	r8
 80074ea:	3001      	adds	r0, #1
 80074ec:	d020      	beq.n	8007530 <_printf_common+0xa8>
 80074ee:	6823      	ldr	r3, [r4, #0]
 80074f0:	68e5      	ldr	r5, [r4, #12]
 80074f2:	f003 0306 	and.w	r3, r3, #6
 80074f6:	2b04      	cmp	r3, #4
 80074f8:	bf18      	it	ne
 80074fa:	2500      	movne	r5, #0
 80074fc:	6832      	ldr	r2, [r6, #0]
 80074fe:	f04f 0600 	mov.w	r6, #0
 8007502:	68a3      	ldr	r3, [r4, #8]
 8007504:	bf08      	it	eq
 8007506:	1aad      	subeq	r5, r5, r2
 8007508:	6922      	ldr	r2, [r4, #16]
 800750a:	bf08      	it	eq
 800750c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007510:	4293      	cmp	r3, r2
 8007512:	bfc4      	itt	gt
 8007514:	1a9b      	subgt	r3, r3, r2
 8007516:	18ed      	addgt	r5, r5, r3
 8007518:	341a      	adds	r4, #26
 800751a:	42b5      	cmp	r5, r6
 800751c:	d11a      	bne.n	8007554 <_printf_common+0xcc>
 800751e:	2000      	movs	r0, #0
 8007520:	e008      	b.n	8007534 <_printf_common+0xac>
 8007522:	2301      	movs	r3, #1
 8007524:	4652      	mov	r2, sl
 8007526:	4649      	mov	r1, r9
 8007528:	4638      	mov	r0, r7
 800752a:	47c0      	blx	r8
 800752c:	3001      	adds	r0, #1
 800752e:	d103      	bne.n	8007538 <_printf_common+0xb0>
 8007530:	f04f 30ff 	mov.w	r0, #4294967295
 8007534:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007538:	3501      	adds	r5, #1
 800753a:	e7c4      	b.n	80074c6 <_printf_common+0x3e>
 800753c:	2030      	movs	r0, #48	; 0x30
 800753e:	18e1      	adds	r1, r4, r3
 8007540:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007544:	1c5a      	adds	r2, r3, #1
 8007546:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800754a:	4422      	add	r2, r4
 800754c:	3302      	adds	r3, #2
 800754e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007552:	e7c5      	b.n	80074e0 <_printf_common+0x58>
 8007554:	2301      	movs	r3, #1
 8007556:	4622      	mov	r2, r4
 8007558:	4649      	mov	r1, r9
 800755a:	4638      	mov	r0, r7
 800755c:	47c0      	blx	r8
 800755e:	3001      	adds	r0, #1
 8007560:	d0e6      	beq.n	8007530 <_printf_common+0xa8>
 8007562:	3601      	adds	r6, #1
 8007564:	e7d9      	b.n	800751a <_printf_common+0x92>
	...

08007568 <_printf_i>:
 8007568:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800756c:	7e0f      	ldrb	r7, [r1, #24]
 800756e:	4691      	mov	r9, r2
 8007570:	2f78      	cmp	r7, #120	; 0x78
 8007572:	4680      	mov	r8, r0
 8007574:	460c      	mov	r4, r1
 8007576:	469a      	mov	sl, r3
 8007578:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800757a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800757e:	d807      	bhi.n	8007590 <_printf_i+0x28>
 8007580:	2f62      	cmp	r7, #98	; 0x62
 8007582:	d80a      	bhi.n	800759a <_printf_i+0x32>
 8007584:	2f00      	cmp	r7, #0
 8007586:	f000 80d9 	beq.w	800773c <_printf_i+0x1d4>
 800758a:	2f58      	cmp	r7, #88	; 0x58
 800758c:	f000 80a4 	beq.w	80076d8 <_printf_i+0x170>
 8007590:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007594:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007598:	e03a      	b.n	8007610 <_printf_i+0xa8>
 800759a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800759e:	2b15      	cmp	r3, #21
 80075a0:	d8f6      	bhi.n	8007590 <_printf_i+0x28>
 80075a2:	a101      	add	r1, pc, #4	; (adr r1, 80075a8 <_printf_i+0x40>)
 80075a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80075a8:	08007601 	.word	0x08007601
 80075ac:	08007615 	.word	0x08007615
 80075b0:	08007591 	.word	0x08007591
 80075b4:	08007591 	.word	0x08007591
 80075b8:	08007591 	.word	0x08007591
 80075bc:	08007591 	.word	0x08007591
 80075c0:	08007615 	.word	0x08007615
 80075c4:	08007591 	.word	0x08007591
 80075c8:	08007591 	.word	0x08007591
 80075cc:	08007591 	.word	0x08007591
 80075d0:	08007591 	.word	0x08007591
 80075d4:	08007723 	.word	0x08007723
 80075d8:	08007645 	.word	0x08007645
 80075dc:	08007705 	.word	0x08007705
 80075e0:	08007591 	.word	0x08007591
 80075e4:	08007591 	.word	0x08007591
 80075e8:	08007745 	.word	0x08007745
 80075ec:	08007591 	.word	0x08007591
 80075f0:	08007645 	.word	0x08007645
 80075f4:	08007591 	.word	0x08007591
 80075f8:	08007591 	.word	0x08007591
 80075fc:	0800770d 	.word	0x0800770d
 8007600:	682b      	ldr	r3, [r5, #0]
 8007602:	1d1a      	adds	r2, r3, #4
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	602a      	str	r2, [r5, #0]
 8007608:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800760c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007610:	2301      	movs	r3, #1
 8007612:	e0a4      	b.n	800775e <_printf_i+0x1f6>
 8007614:	6820      	ldr	r0, [r4, #0]
 8007616:	6829      	ldr	r1, [r5, #0]
 8007618:	0606      	lsls	r6, r0, #24
 800761a:	f101 0304 	add.w	r3, r1, #4
 800761e:	d50a      	bpl.n	8007636 <_printf_i+0xce>
 8007620:	680e      	ldr	r6, [r1, #0]
 8007622:	602b      	str	r3, [r5, #0]
 8007624:	2e00      	cmp	r6, #0
 8007626:	da03      	bge.n	8007630 <_printf_i+0xc8>
 8007628:	232d      	movs	r3, #45	; 0x2d
 800762a:	4276      	negs	r6, r6
 800762c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007630:	230a      	movs	r3, #10
 8007632:	485e      	ldr	r0, [pc, #376]	; (80077ac <_printf_i+0x244>)
 8007634:	e019      	b.n	800766a <_printf_i+0x102>
 8007636:	680e      	ldr	r6, [r1, #0]
 8007638:	f010 0f40 	tst.w	r0, #64	; 0x40
 800763c:	602b      	str	r3, [r5, #0]
 800763e:	bf18      	it	ne
 8007640:	b236      	sxthne	r6, r6
 8007642:	e7ef      	b.n	8007624 <_printf_i+0xbc>
 8007644:	682b      	ldr	r3, [r5, #0]
 8007646:	6820      	ldr	r0, [r4, #0]
 8007648:	1d19      	adds	r1, r3, #4
 800764a:	6029      	str	r1, [r5, #0]
 800764c:	0601      	lsls	r1, r0, #24
 800764e:	d501      	bpl.n	8007654 <_printf_i+0xec>
 8007650:	681e      	ldr	r6, [r3, #0]
 8007652:	e002      	b.n	800765a <_printf_i+0xf2>
 8007654:	0646      	lsls	r6, r0, #25
 8007656:	d5fb      	bpl.n	8007650 <_printf_i+0xe8>
 8007658:	881e      	ldrh	r6, [r3, #0]
 800765a:	2f6f      	cmp	r7, #111	; 0x6f
 800765c:	bf0c      	ite	eq
 800765e:	2308      	moveq	r3, #8
 8007660:	230a      	movne	r3, #10
 8007662:	4852      	ldr	r0, [pc, #328]	; (80077ac <_printf_i+0x244>)
 8007664:	2100      	movs	r1, #0
 8007666:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800766a:	6865      	ldr	r5, [r4, #4]
 800766c:	2d00      	cmp	r5, #0
 800766e:	bfa8      	it	ge
 8007670:	6821      	ldrge	r1, [r4, #0]
 8007672:	60a5      	str	r5, [r4, #8]
 8007674:	bfa4      	itt	ge
 8007676:	f021 0104 	bicge.w	r1, r1, #4
 800767a:	6021      	strge	r1, [r4, #0]
 800767c:	b90e      	cbnz	r6, 8007682 <_printf_i+0x11a>
 800767e:	2d00      	cmp	r5, #0
 8007680:	d04d      	beq.n	800771e <_printf_i+0x1b6>
 8007682:	4615      	mov	r5, r2
 8007684:	fbb6 f1f3 	udiv	r1, r6, r3
 8007688:	fb03 6711 	mls	r7, r3, r1, r6
 800768c:	5dc7      	ldrb	r7, [r0, r7]
 800768e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007692:	4637      	mov	r7, r6
 8007694:	42bb      	cmp	r3, r7
 8007696:	460e      	mov	r6, r1
 8007698:	d9f4      	bls.n	8007684 <_printf_i+0x11c>
 800769a:	2b08      	cmp	r3, #8
 800769c:	d10b      	bne.n	80076b6 <_printf_i+0x14e>
 800769e:	6823      	ldr	r3, [r4, #0]
 80076a0:	07de      	lsls	r6, r3, #31
 80076a2:	d508      	bpl.n	80076b6 <_printf_i+0x14e>
 80076a4:	6923      	ldr	r3, [r4, #16]
 80076a6:	6861      	ldr	r1, [r4, #4]
 80076a8:	4299      	cmp	r1, r3
 80076aa:	bfde      	ittt	le
 80076ac:	2330      	movle	r3, #48	; 0x30
 80076ae:	f805 3c01 	strble.w	r3, [r5, #-1]
 80076b2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80076b6:	1b52      	subs	r2, r2, r5
 80076b8:	6122      	str	r2, [r4, #16]
 80076ba:	464b      	mov	r3, r9
 80076bc:	4621      	mov	r1, r4
 80076be:	4640      	mov	r0, r8
 80076c0:	f8cd a000 	str.w	sl, [sp]
 80076c4:	aa03      	add	r2, sp, #12
 80076c6:	f7ff fedf 	bl	8007488 <_printf_common>
 80076ca:	3001      	adds	r0, #1
 80076cc:	d14c      	bne.n	8007768 <_printf_i+0x200>
 80076ce:	f04f 30ff 	mov.w	r0, #4294967295
 80076d2:	b004      	add	sp, #16
 80076d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076d8:	4834      	ldr	r0, [pc, #208]	; (80077ac <_printf_i+0x244>)
 80076da:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80076de:	6829      	ldr	r1, [r5, #0]
 80076e0:	6823      	ldr	r3, [r4, #0]
 80076e2:	f851 6b04 	ldr.w	r6, [r1], #4
 80076e6:	6029      	str	r1, [r5, #0]
 80076e8:	061d      	lsls	r5, r3, #24
 80076ea:	d514      	bpl.n	8007716 <_printf_i+0x1ae>
 80076ec:	07df      	lsls	r7, r3, #31
 80076ee:	bf44      	itt	mi
 80076f0:	f043 0320 	orrmi.w	r3, r3, #32
 80076f4:	6023      	strmi	r3, [r4, #0]
 80076f6:	b91e      	cbnz	r6, 8007700 <_printf_i+0x198>
 80076f8:	6823      	ldr	r3, [r4, #0]
 80076fa:	f023 0320 	bic.w	r3, r3, #32
 80076fe:	6023      	str	r3, [r4, #0]
 8007700:	2310      	movs	r3, #16
 8007702:	e7af      	b.n	8007664 <_printf_i+0xfc>
 8007704:	6823      	ldr	r3, [r4, #0]
 8007706:	f043 0320 	orr.w	r3, r3, #32
 800770a:	6023      	str	r3, [r4, #0]
 800770c:	2378      	movs	r3, #120	; 0x78
 800770e:	4828      	ldr	r0, [pc, #160]	; (80077b0 <_printf_i+0x248>)
 8007710:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007714:	e7e3      	b.n	80076de <_printf_i+0x176>
 8007716:	0659      	lsls	r1, r3, #25
 8007718:	bf48      	it	mi
 800771a:	b2b6      	uxthmi	r6, r6
 800771c:	e7e6      	b.n	80076ec <_printf_i+0x184>
 800771e:	4615      	mov	r5, r2
 8007720:	e7bb      	b.n	800769a <_printf_i+0x132>
 8007722:	682b      	ldr	r3, [r5, #0]
 8007724:	6826      	ldr	r6, [r4, #0]
 8007726:	1d18      	adds	r0, r3, #4
 8007728:	6961      	ldr	r1, [r4, #20]
 800772a:	6028      	str	r0, [r5, #0]
 800772c:	0635      	lsls	r5, r6, #24
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	d501      	bpl.n	8007736 <_printf_i+0x1ce>
 8007732:	6019      	str	r1, [r3, #0]
 8007734:	e002      	b.n	800773c <_printf_i+0x1d4>
 8007736:	0670      	lsls	r0, r6, #25
 8007738:	d5fb      	bpl.n	8007732 <_printf_i+0x1ca>
 800773a:	8019      	strh	r1, [r3, #0]
 800773c:	2300      	movs	r3, #0
 800773e:	4615      	mov	r5, r2
 8007740:	6123      	str	r3, [r4, #16]
 8007742:	e7ba      	b.n	80076ba <_printf_i+0x152>
 8007744:	682b      	ldr	r3, [r5, #0]
 8007746:	2100      	movs	r1, #0
 8007748:	1d1a      	adds	r2, r3, #4
 800774a:	602a      	str	r2, [r5, #0]
 800774c:	681d      	ldr	r5, [r3, #0]
 800774e:	6862      	ldr	r2, [r4, #4]
 8007750:	4628      	mov	r0, r5
 8007752:	f002 f98d 	bl	8009a70 <memchr>
 8007756:	b108      	cbz	r0, 800775c <_printf_i+0x1f4>
 8007758:	1b40      	subs	r0, r0, r5
 800775a:	6060      	str	r0, [r4, #4]
 800775c:	6863      	ldr	r3, [r4, #4]
 800775e:	6123      	str	r3, [r4, #16]
 8007760:	2300      	movs	r3, #0
 8007762:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007766:	e7a8      	b.n	80076ba <_printf_i+0x152>
 8007768:	462a      	mov	r2, r5
 800776a:	4649      	mov	r1, r9
 800776c:	4640      	mov	r0, r8
 800776e:	6923      	ldr	r3, [r4, #16]
 8007770:	47d0      	blx	sl
 8007772:	3001      	adds	r0, #1
 8007774:	d0ab      	beq.n	80076ce <_printf_i+0x166>
 8007776:	6823      	ldr	r3, [r4, #0]
 8007778:	079b      	lsls	r3, r3, #30
 800777a:	d413      	bmi.n	80077a4 <_printf_i+0x23c>
 800777c:	68e0      	ldr	r0, [r4, #12]
 800777e:	9b03      	ldr	r3, [sp, #12]
 8007780:	4298      	cmp	r0, r3
 8007782:	bfb8      	it	lt
 8007784:	4618      	movlt	r0, r3
 8007786:	e7a4      	b.n	80076d2 <_printf_i+0x16a>
 8007788:	2301      	movs	r3, #1
 800778a:	4632      	mov	r2, r6
 800778c:	4649      	mov	r1, r9
 800778e:	4640      	mov	r0, r8
 8007790:	47d0      	blx	sl
 8007792:	3001      	adds	r0, #1
 8007794:	d09b      	beq.n	80076ce <_printf_i+0x166>
 8007796:	3501      	adds	r5, #1
 8007798:	68e3      	ldr	r3, [r4, #12]
 800779a:	9903      	ldr	r1, [sp, #12]
 800779c:	1a5b      	subs	r3, r3, r1
 800779e:	42ab      	cmp	r3, r5
 80077a0:	dcf2      	bgt.n	8007788 <_printf_i+0x220>
 80077a2:	e7eb      	b.n	800777c <_printf_i+0x214>
 80077a4:	2500      	movs	r5, #0
 80077a6:	f104 0619 	add.w	r6, r4, #25
 80077aa:	e7f5      	b.n	8007798 <_printf_i+0x230>
 80077ac:	0800b7b2 	.word	0x0800b7b2
 80077b0:	0800b7c3 	.word	0x0800b7c3

080077b4 <siprintf>:
 80077b4:	b40e      	push	{r1, r2, r3}
 80077b6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80077ba:	b500      	push	{lr}
 80077bc:	b09c      	sub	sp, #112	; 0x70
 80077be:	ab1d      	add	r3, sp, #116	; 0x74
 80077c0:	9002      	str	r0, [sp, #8]
 80077c2:	9006      	str	r0, [sp, #24]
 80077c4:	9107      	str	r1, [sp, #28]
 80077c6:	9104      	str	r1, [sp, #16]
 80077c8:	4808      	ldr	r0, [pc, #32]	; (80077ec <siprintf+0x38>)
 80077ca:	4909      	ldr	r1, [pc, #36]	; (80077f0 <siprintf+0x3c>)
 80077cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80077d0:	9105      	str	r1, [sp, #20]
 80077d2:	6800      	ldr	r0, [r0, #0]
 80077d4:	a902      	add	r1, sp, #8
 80077d6:	9301      	str	r3, [sp, #4]
 80077d8:	f002 ff5c 	bl	800a694 <_svfiprintf_r>
 80077dc:	2200      	movs	r2, #0
 80077de:	9b02      	ldr	r3, [sp, #8]
 80077e0:	701a      	strb	r2, [r3, #0]
 80077e2:	b01c      	add	sp, #112	; 0x70
 80077e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80077e8:	b003      	add	sp, #12
 80077ea:	4770      	bx	lr
 80077ec:	20000190 	.word	0x20000190
 80077f0:	ffff0208 	.word	0xffff0208

080077f4 <strcat>:
 80077f4:	4602      	mov	r2, r0
 80077f6:	b510      	push	{r4, lr}
 80077f8:	7814      	ldrb	r4, [r2, #0]
 80077fa:	4613      	mov	r3, r2
 80077fc:	3201      	adds	r2, #1
 80077fe:	2c00      	cmp	r4, #0
 8007800:	d1fa      	bne.n	80077f8 <strcat+0x4>
 8007802:	3b01      	subs	r3, #1
 8007804:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007808:	f803 2f01 	strb.w	r2, [r3, #1]!
 800780c:	2a00      	cmp	r2, #0
 800780e:	d1f9      	bne.n	8007804 <strcat+0x10>
 8007810:	bd10      	pop	{r4, pc}

08007812 <strcpy>:
 8007812:	4603      	mov	r3, r0
 8007814:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007818:	f803 2b01 	strb.w	r2, [r3], #1
 800781c:	2a00      	cmp	r2, #0
 800781e:	d1f9      	bne.n	8007814 <strcpy+0x2>
 8007820:	4770      	bx	lr

08007822 <sulp>:
 8007822:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007826:	460f      	mov	r7, r1
 8007828:	4690      	mov	r8, r2
 800782a:	f002 fc9f 	bl	800a16c <__ulp>
 800782e:	4604      	mov	r4, r0
 8007830:	460d      	mov	r5, r1
 8007832:	f1b8 0f00 	cmp.w	r8, #0
 8007836:	d011      	beq.n	800785c <sulp+0x3a>
 8007838:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800783c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007840:	2b00      	cmp	r3, #0
 8007842:	dd0b      	ble.n	800785c <sulp+0x3a>
 8007844:	2400      	movs	r4, #0
 8007846:	051b      	lsls	r3, r3, #20
 8007848:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800784c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007850:	4622      	mov	r2, r4
 8007852:	462b      	mov	r3, r5
 8007854:	f7f8 fe4a 	bl	80004ec <__aeabi_dmul>
 8007858:	4604      	mov	r4, r0
 800785a:	460d      	mov	r5, r1
 800785c:	4620      	mov	r0, r4
 800785e:	4629      	mov	r1, r5
 8007860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007864:	0000      	movs	r0, r0
	...

08007868 <_strtod_l>:
 8007868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800786c:	469b      	mov	fp, r3
 800786e:	2300      	movs	r3, #0
 8007870:	b09f      	sub	sp, #124	; 0x7c
 8007872:	931a      	str	r3, [sp, #104]	; 0x68
 8007874:	4b9e      	ldr	r3, [pc, #632]	; (8007af0 <_strtod_l+0x288>)
 8007876:	4682      	mov	sl, r0
 8007878:	681f      	ldr	r7, [r3, #0]
 800787a:	460e      	mov	r6, r1
 800787c:	4638      	mov	r0, r7
 800787e:	9215      	str	r2, [sp, #84]	; 0x54
 8007880:	f7f8 fc70 	bl	8000164 <strlen>
 8007884:	f04f 0800 	mov.w	r8, #0
 8007888:	4604      	mov	r4, r0
 800788a:	f04f 0900 	mov.w	r9, #0
 800788e:	9619      	str	r6, [sp, #100]	; 0x64
 8007890:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007892:	781a      	ldrb	r2, [r3, #0]
 8007894:	2a2b      	cmp	r2, #43	; 0x2b
 8007896:	d04c      	beq.n	8007932 <_strtod_l+0xca>
 8007898:	d83a      	bhi.n	8007910 <_strtod_l+0xa8>
 800789a:	2a0d      	cmp	r2, #13
 800789c:	d833      	bhi.n	8007906 <_strtod_l+0x9e>
 800789e:	2a08      	cmp	r2, #8
 80078a0:	d833      	bhi.n	800790a <_strtod_l+0xa2>
 80078a2:	2a00      	cmp	r2, #0
 80078a4:	d03d      	beq.n	8007922 <_strtod_l+0xba>
 80078a6:	2300      	movs	r3, #0
 80078a8:	930a      	str	r3, [sp, #40]	; 0x28
 80078aa:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80078ac:	782b      	ldrb	r3, [r5, #0]
 80078ae:	2b30      	cmp	r3, #48	; 0x30
 80078b0:	f040 80aa 	bne.w	8007a08 <_strtod_l+0x1a0>
 80078b4:	786b      	ldrb	r3, [r5, #1]
 80078b6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80078ba:	2b58      	cmp	r3, #88	; 0x58
 80078bc:	d166      	bne.n	800798c <_strtod_l+0x124>
 80078be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078c0:	4650      	mov	r0, sl
 80078c2:	9301      	str	r3, [sp, #4]
 80078c4:	ab1a      	add	r3, sp, #104	; 0x68
 80078c6:	9300      	str	r3, [sp, #0]
 80078c8:	4a8a      	ldr	r2, [pc, #552]	; (8007af4 <_strtod_l+0x28c>)
 80078ca:	f8cd b008 	str.w	fp, [sp, #8]
 80078ce:	ab1b      	add	r3, sp, #108	; 0x6c
 80078d0:	a919      	add	r1, sp, #100	; 0x64
 80078d2:	f001 fdb1 	bl	8009438 <__gethex>
 80078d6:	f010 0607 	ands.w	r6, r0, #7
 80078da:	4604      	mov	r4, r0
 80078dc:	d005      	beq.n	80078ea <_strtod_l+0x82>
 80078de:	2e06      	cmp	r6, #6
 80078e0:	d129      	bne.n	8007936 <_strtod_l+0xce>
 80078e2:	2300      	movs	r3, #0
 80078e4:	3501      	adds	r5, #1
 80078e6:	9519      	str	r5, [sp, #100]	; 0x64
 80078e8:	930a      	str	r3, [sp, #40]	; 0x28
 80078ea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	f040 858a 	bne.w	8008406 <_strtod_l+0xb9e>
 80078f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078f4:	b1d3      	cbz	r3, 800792c <_strtod_l+0xc4>
 80078f6:	4642      	mov	r2, r8
 80078f8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80078fc:	4610      	mov	r0, r2
 80078fe:	4619      	mov	r1, r3
 8007900:	b01f      	add	sp, #124	; 0x7c
 8007902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007906:	2a20      	cmp	r2, #32
 8007908:	d1cd      	bne.n	80078a6 <_strtod_l+0x3e>
 800790a:	3301      	adds	r3, #1
 800790c:	9319      	str	r3, [sp, #100]	; 0x64
 800790e:	e7bf      	b.n	8007890 <_strtod_l+0x28>
 8007910:	2a2d      	cmp	r2, #45	; 0x2d
 8007912:	d1c8      	bne.n	80078a6 <_strtod_l+0x3e>
 8007914:	2201      	movs	r2, #1
 8007916:	920a      	str	r2, [sp, #40]	; 0x28
 8007918:	1c5a      	adds	r2, r3, #1
 800791a:	9219      	str	r2, [sp, #100]	; 0x64
 800791c:	785b      	ldrb	r3, [r3, #1]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d1c3      	bne.n	80078aa <_strtod_l+0x42>
 8007922:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007924:	9619      	str	r6, [sp, #100]	; 0x64
 8007926:	2b00      	cmp	r3, #0
 8007928:	f040 856b 	bne.w	8008402 <_strtod_l+0xb9a>
 800792c:	4642      	mov	r2, r8
 800792e:	464b      	mov	r3, r9
 8007930:	e7e4      	b.n	80078fc <_strtod_l+0x94>
 8007932:	2200      	movs	r2, #0
 8007934:	e7ef      	b.n	8007916 <_strtod_l+0xae>
 8007936:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007938:	b13a      	cbz	r2, 800794a <_strtod_l+0xe2>
 800793a:	2135      	movs	r1, #53	; 0x35
 800793c:	a81c      	add	r0, sp, #112	; 0x70
 800793e:	f002 fd19 	bl	800a374 <__copybits>
 8007942:	4650      	mov	r0, sl
 8007944:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007946:	f002 f8e1 	bl	8009b0c <_Bfree>
 800794a:	3e01      	subs	r6, #1
 800794c:	2e04      	cmp	r6, #4
 800794e:	d806      	bhi.n	800795e <_strtod_l+0xf6>
 8007950:	e8df f006 	tbb	[pc, r6]
 8007954:	1714030a 	.word	0x1714030a
 8007958:	0a          	.byte	0x0a
 8007959:	00          	.byte	0x00
 800795a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800795e:	0721      	lsls	r1, r4, #28
 8007960:	d5c3      	bpl.n	80078ea <_strtod_l+0x82>
 8007962:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8007966:	e7c0      	b.n	80078ea <_strtod_l+0x82>
 8007968:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800796a:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 800796e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007972:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007976:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800797a:	e7f0      	b.n	800795e <_strtod_l+0xf6>
 800797c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8007af8 <_strtod_l+0x290>
 8007980:	e7ed      	b.n	800795e <_strtod_l+0xf6>
 8007982:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8007986:	f04f 38ff 	mov.w	r8, #4294967295
 800798a:	e7e8      	b.n	800795e <_strtod_l+0xf6>
 800798c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800798e:	1c5a      	adds	r2, r3, #1
 8007990:	9219      	str	r2, [sp, #100]	; 0x64
 8007992:	785b      	ldrb	r3, [r3, #1]
 8007994:	2b30      	cmp	r3, #48	; 0x30
 8007996:	d0f9      	beq.n	800798c <_strtod_l+0x124>
 8007998:	2b00      	cmp	r3, #0
 800799a:	d0a6      	beq.n	80078ea <_strtod_l+0x82>
 800799c:	2301      	movs	r3, #1
 800799e:	9307      	str	r3, [sp, #28]
 80079a0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80079a2:	220a      	movs	r2, #10
 80079a4:	9308      	str	r3, [sp, #32]
 80079a6:	2300      	movs	r3, #0
 80079a8:	469b      	mov	fp, r3
 80079aa:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80079ae:	9819      	ldr	r0, [sp, #100]	; 0x64
 80079b0:	7805      	ldrb	r5, [r0, #0]
 80079b2:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 80079b6:	b2d9      	uxtb	r1, r3
 80079b8:	2909      	cmp	r1, #9
 80079ba:	d927      	bls.n	8007a0c <_strtod_l+0x1a4>
 80079bc:	4622      	mov	r2, r4
 80079be:	4639      	mov	r1, r7
 80079c0:	f003 f8d6 	bl	800ab70 <strncmp>
 80079c4:	2800      	cmp	r0, #0
 80079c6:	d033      	beq.n	8007a30 <_strtod_l+0x1c8>
 80079c8:	2000      	movs	r0, #0
 80079ca:	462a      	mov	r2, r5
 80079cc:	465c      	mov	r4, fp
 80079ce:	4603      	mov	r3, r0
 80079d0:	9004      	str	r0, [sp, #16]
 80079d2:	2a65      	cmp	r2, #101	; 0x65
 80079d4:	d001      	beq.n	80079da <_strtod_l+0x172>
 80079d6:	2a45      	cmp	r2, #69	; 0x45
 80079d8:	d114      	bne.n	8007a04 <_strtod_l+0x19c>
 80079da:	b91c      	cbnz	r4, 80079e4 <_strtod_l+0x17c>
 80079dc:	9a07      	ldr	r2, [sp, #28]
 80079de:	4302      	orrs	r2, r0
 80079e0:	d09f      	beq.n	8007922 <_strtod_l+0xba>
 80079e2:	2400      	movs	r4, #0
 80079e4:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80079e6:	1c72      	adds	r2, r6, #1
 80079e8:	9219      	str	r2, [sp, #100]	; 0x64
 80079ea:	7872      	ldrb	r2, [r6, #1]
 80079ec:	2a2b      	cmp	r2, #43	; 0x2b
 80079ee:	d079      	beq.n	8007ae4 <_strtod_l+0x27c>
 80079f0:	2a2d      	cmp	r2, #45	; 0x2d
 80079f2:	f000 8083 	beq.w	8007afc <_strtod_l+0x294>
 80079f6:	2700      	movs	r7, #0
 80079f8:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80079fc:	2909      	cmp	r1, #9
 80079fe:	f240 8083 	bls.w	8007b08 <_strtod_l+0x2a0>
 8007a02:	9619      	str	r6, [sp, #100]	; 0x64
 8007a04:	2500      	movs	r5, #0
 8007a06:	e09f      	b.n	8007b48 <_strtod_l+0x2e0>
 8007a08:	2300      	movs	r3, #0
 8007a0a:	e7c8      	b.n	800799e <_strtod_l+0x136>
 8007a0c:	f1bb 0f08 	cmp.w	fp, #8
 8007a10:	bfd5      	itete	le
 8007a12:	9906      	ldrle	r1, [sp, #24]
 8007a14:	9905      	ldrgt	r1, [sp, #20]
 8007a16:	fb02 3301 	mlale	r3, r2, r1, r3
 8007a1a:	fb02 3301 	mlagt	r3, r2, r1, r3
 8007a1e:	f100 0001 	add.w	r0, r0, #1
 8007a22:	bfd4      	ite	le
 8007a24:	9306      	strle	r3, [sp, #24]
 8007a26:	9305      	strgt	r3, [sp, #20]
 8007a28:	f10b 0b01 	add.w	fp, fp, #1
 8007a2c:	9019      	str	r0, [sp, #100]	; 0x64
 8007a2e:	e7be      	b.n	80079ae <_strtod_l+0x146>
 8007a30:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007a32:	191a      	adds	r2, r3, r4
 8007a34:	9219      	str	r2, [sp, #100]	; 0x64
 8007a36:	5d1a      	ldrb	r2, [r3, r4]
 8007a38:	f1bb 0f00 	cmp.w	fp, #0
 8007a3c:	d036      	beq.n	8007aac <_strtod_l+0x244>
 8007a3e:	465c      	mov	r4, fp
 8007a40:	9004      	str	r0, [sp, #16]
 8007a42:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007a46:	2b09      	cmp	r3, #9
 8007a48:	d912      	bls.n	8007a70 <_strtod_l+0x208>
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	e7c1      	b.n	80079d2 <_strtod_l+0x16a>
 8007a4e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007a50:	3001      	adds	r0, #1
 8007a52:	1c5a      	adds	r2, r3, #1
 8007a54:	9219      	str	r2, [sp, #100]	; 0x64
 8007a56:	785a      	ldrb	r2, [r3, #1]
 8007a58:	2a30      	cmp	r2, #48	; 0x30
 8007a5a:	d0f8      	beq.n	8007a4e <_strtod_l+0x1e6>
 8007a5c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007a60:	2b08      	cmp	r3, #8
 8007a62:	f200 84d5 	bhi.w	8008410 <_strtod_l+0xba8>
 8007a66:	9004      	str	r0, [sp, #16]
 8007a68:	2000      	movs	r0, #0
 8007a6a:	4604      	mov	r4, r0
 8007a6c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007a6e:	9308      	str	r3, [sp, #32]
 8007a70:	3a30      	subs	r2, #48	; 0x30
 8007a72:	f100 0301 	add.w	r3, r0, #1
 8007a76:	d013      	beq.n	8007aa0 <_strtod_l+0x238>
 8007a78:	9904      	ldr	r1, [sp, #16]
 8007a7a:	1905      	adds	r5, r0, r4
 8007a7c:	4419      	add	r1, r3
 8007a7e:	9104      	str	r1, [sp, #16]
 8007a80:	4623      	mov	r3, r4
 8007a82:	210a      	movs	r1, #10
 8007a84:	42ab      	cmp	r3, r5
 8007a86:	d113      	bne.n	8007ab0 <_strtod_l+0x248>
 8007a88:	1823      	adds	r3, r4, r0
 8007a8a:	2b08      	cmp	r3, #8
 8007a8c:	f104 0401 	add.w	r4, r4, #1
 8007a90:	4404      	add	r4, r0
 8007a92:	dc1b      	bgt.n	8007acc <_strtod_l+0x264>
 8007a94:	230a      	movs	r3, #10
 8007a96:	9906      	ldr	r1, [sp, #24]
 8007a98:	fb03 2301 	mla	r3, r3, r1, r2
 8007a9c:	9306      	str	r3, [sp, #24]
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	1c51      	adds	r1, r2, #1
 8007aa6:	9119      	str	r1, [sp, #100]	; 0x64
 8007aa8:	7852      	ldrb	r2, [r2, #1]
 8007aaa:	e7ca      	b.n	8007a42 <_strtod_l+0x1da>
 8007aac:	4658      	mov	r0, fp
 8007aae:	e7d3      	b.n	8007a58 <_strtod_l+0x1f0>
 8007ab0:	2b08      	cmp	r3, #8
 8007ab2:	dc04      	bgt.n	8007abe <_strtod_l+0x256>
 8007ab4:	9f06      	ldr	r7, [sp, #24]
 8007ab6:	434f      	muls	r7, r1
 8007ab8:	9706      	str	r7, [sp, #24]
 8007aba:	3301      	adds	r3, #1
 8007abc:	e7e2      	b.n	8007a84 <_strtod_l+0x21c>
 8007abe:	1c5f      	adds	r7, r3, #1
 8007ac0:	2f10      	cmp	r7, #16
 8007ac2:	bfde      	ittt	le
 8007ac4:	9f05      	ldrle	r7, [sp, #20]
 8007ac6:	434f      	mulle	r7, r1
 8007ac8:	9705      	strle	r7, [sp, #20]
 8007aca:	e7f6      	b.n	8007aba <_strtod_l+0x252>
 8007acc:	2c10      	cmp	r4, #16
 8007ace:	bfdf      	itttt	le
 8007ad0:	230a      	movle	r3, #10
 8007ad2:	9905      	ldrle	r1, [sp, #20]
 8007ad4:	fb03 2301 	mlale	r3, r3, r1, r2
 8007ad8:	9305      	strle	r3, [sp, #20]
 8007ada:	e7e0      	b.n	8007a9e <_strtod_l+0x236>
 8007adc:	2300      	movs	r3, #0
 8007ade:	9304      	str	r3, [sp, #16]
 8007ae0:	2301      	movs	r3, #1
 8007ae2:	e77b      	b.n	80079dc <_strtod_l+0x174>
 8007ae4:	2700      	movs	r7, #0
 8007ae6:	1cb2      	adds	r2, r6, #2
 8007ae8:	9219      	str	r2, [sp, #100]	; 0x64
 8007aea:	78b2      	ldrb	r2, [r6, #2]
 8007aec:	e784      	b.n	80079f8 <_strtod_l+0x190>
 8007aee:	bf00      	nop
 8007af0:	0800bab8 	.word	0x0800bab8
 8007af4:	0800b7d4 	.word	0x0800b7d4
 8007af8:	7ff00000 	.word	0x7ff00000
 8007afc:	2701      	movs	r7, #1
 8007afe:	e7f2      	b.n	8007ae6 <_strtod_l+0x27e>
 8007b00:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007b02:	1c51      	adds	r1, r2, #1
 8007b04:	9119      	str	r1, [sp, #100]	; 0x64
 8007b06:	7852      	ldrb	r2, [r2, #1]
 8007b08:	2a30      	cmp	r2, #48	; 0x30
 8007b0a:	d0f9      	beq.n	8007b00 <_strtod_l+0x298>
 8007b0c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007b10:	2908      	cmp	r1, #8
 8007b12:	f63f af77 	bhi.w	8007a04 <_strtod_l+0x19c>
 8007b16:	f04f 0e0a 	mov.w	lr, #10
 8007b1a:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8007b1e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007b20:	9209      	str	r2, [sp, #36]	; 0x24
 8007b22:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007b24:	1c51      	adds	r1, r2, #1
 8007b26:	9119      	str	r1, [sp, #100]	; 0x64
 8007b28:	7852      	ldrb	r2, [r2, #1]
 8007b2a:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8007b2e:	2d09      	cmp	r5, #9
 8007b30:	d935      	bls.n	8007b9e <_strtod_l+0x336>
 8007b32:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007b34:	1b49      	subs	r1, r1, r5
 8007b36:	2908      	cmp	r1, #8
 8007b38:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8007b3c:	dc02      	bgt.n	8007b44 <_strtod_l+0x2dc>
 8007b3e:	4565      	cmp	r5, ip
 8007b40:	bfa8      	it	ge
 8007b42:	4665      	movge	r5, ip
 8007b44:	b107      	cbz	r7, 8007b48 <_strtod_l+0x2e0>
 8007b46:	426d      	negs	r5, r5
 8007b48:	2c00      	cmp	r4, #0
 8007b4a:	d14c      	bne.n	8007be6 <_strtod_l+0x37e>
 8007b4c:	9907      	ldr	r1, [sp, #28]
 8007b4e:	4301      	orrs	r1, r0
 8007b50:	f47f aecb 	bne.w	80078ea <_strtod_l+0x82>
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	f47f aee4 	bne.w	8007922 <_strtod_l+0xba>
 8007b5a:	2a69      	cmp	r2, #105	; 0x69
 8007b5c:	d026      	beq.n	8007bac <_strtod_l+0x344>
 8007b5e:	dc23      	bgt.n	8007ba8 <_strtod_l+0x340>
 8007b60:	2a49      	cmp	r2, #73	; 0x49
 8007b62:	d023      	beq.n	8007bac <_strtod_l+0x344>
 8007b64:	2a4e      	cmp	r2, #78	; 0x4e
 8007b66:	f47f aedc 	bne.w	8007922 <_strtod_l+0xba>
 8007b6a:	499d      	ldr	r1, [pc, #628]	; (8007de0 <_strtod_l+0x578>)
 8007b6c:	a819      	add	r0, sp, #100	; 0x64
 8007b6e:	f001 feb1 	bl	80098d4 <__match>
 8007b72:	2800      	cmp	r0, #0
 8007b74:	f43f aed5 	beq.w	8007922 <_strtod_l+0xba>
 8007b78:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007b7a:	781b      	ldrb	r3, [r3, #0]
 8007b7c:	2b28      	cmp	r3, #40	; 0x28
 8007b7e:	d12c      	bne.n	8007bda <_strtod_l+0x372>
 8007b80:	4998      	ldr	r1, [pc, #608]	; (8007de4 <_strtod_l+0x57c>)
 8007b82:	aa1c      	add	r2, sp, #112	; 0x70
 8007b84:	a819      	add	r0, sp, #100	; 0x64
 8007b86:	f001 feb9 	bl	80098fc <__hexnan>
 8007b8a:	2805      	cmp	r0, #5
 8007b8c:	d125      	bne.n	8007bda <_strtod_l+0x372>
 8007b8e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007b90:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8007b94:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007b98:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8007b9c:	e6a5      	b.n	80078ea <_strtod_l+0x82>
 8007b9e:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8007ba2:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8007ba6:	e7bc      	b.n	8007b22 <_strtod_l+0x2ba>
 8007ba8:	2a6e      	cmp	r2, #110	; 0x6e
 8007baa:	e7dc      	b.n	8007b66 <_strtod_l+0x2fe>
 8007bac:	498e      	ldr	r1, [pc, #568]	; (8007de8 <_strtod_l+0x580>)
 8007bae:	a819      	add	r0, sp, #100	; 0x64
 8007bb0:	f001 fe90 	bl	80098d4 <__match>
 8007bb4:	2800      	cmp	r0, #0
 8007bb6:	f43f aeb4 	beq.w	8007922 <_strtod_l+0xba>
 8007bba:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007bbc:	498b      	ldr	r1, [pc, #556]	; (8007dec <_strtod_l+0x584>)
 8007bbe:	3b01      	subs	r3, #1
 8007bc0:	a819      	add	r0, sp, #100	; 0x64
 8007bc2:	9319      	str	r3, [sp, #100]	; 0x64
 8007bc4:	f001 fe86 	bl	80098d4 <__match>
 8007bc8:	b910      	cbnz	r0, 8007bd0 <_strtod_l+0x368>
 8007bca:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007bcc:	3301      	adds	r3, #1
 8007bce:	9319      	str	r3, [sp, #100]	; 0x64
 8007bd0:	f04f 0800 	mov.w	r8, #0
 8007bd4:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8007df0 <_strtod_l+0x588>
 8007bd8:	e687      	b.n	80078ea <_strtod_l+0x82>
 8007bda:	4886      	ldr	r0, [pc, #536]	; (8007df4 <_strtod_l+0x58c>)
 8007bdc:	f002 ffb2 	bl	800ab44 <nan>
 8007be0:	4680      	mov	r8, r0
 8007be2:	4689      	mov	r9, r1
 8007be4:	e681      	b.n	80078ea <_strtod_l+0x82>
 8007be6:	9b04      	ldr	r3, [sp, #16]
 8007be8:	f1bb 0f00 	cmp.w	fp, #0
 8007bec:	bf08      	it	eq
 8007bee:	46a3      	moveq	fp, r4
 8007bf0:	1aeb      	subs	r3, r5, r3
 8007bf2:	2c10      	cmp	r4, #16
 8007bf4:	9806      	ldr	r0, [sp, #24]
 8007bf6:	4626      	mov	r6, r4
 8007bf8:	9307      	str	r3, [sp, #28]
 8007bfa:	bfa8      	it	ge
 8007bfc:	2610      	movge	r6, #16
 8007bfe:	f7f8 fbfb 	bl	80003f8 <__aeabi_ui2d>
 8007c02:	2c09      	cmp	r4, #9
 8007c04:	4680      	mov	r8, r0
 8007c06:	4689      	mov	r9, r1
 8007c08:	dd13      	ble.n	8007c32 <_strtod_l+0x3ca>
 8007c0a:	4b7b      	ldr	r3, [pc, #492]	; (8007df8 <_strtod_l+0x590>)
 8007c0c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007c10:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007c14:	f7f8 fc6a 	bl	80004ec <__aeabi_dmul>
 8007c18:	4680      	mov	r8, r0
 8007c1a:	9805      	ldr	r0, [sp, #20]
 8007c1c:	4689      	mov	r9, r1
 8007c1e:	f7f8 fbeb 	bl	80003f8 <__aeabi_ui2d>
 8007c22:	4602      	mov	r2, r0
 8007c24:	460b      	mov	r3, r1
 8007c26:	4640      	mov	r0, r8
 8007c28:	4649      	mov	r1, r9
 8007c2a:	f7f8 faa9 	bl	8000180 <__adddf3>
 8007c2e:	4680      	mov	r8, r0
 8007c30:	4689      	mov	r9, r1
 8007c32:	2c0f      	cmp	r4, #15
 8007c34:	dc36      	bgt.n	8007ca4 <_strtod_l+0x43c>
 8007c36:	9b07      	ldr	r3, [sp, #28]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	f43f ae56 	beq.w	80078ea <_strtod_l+0x82>
 8007c3e:	dd22      	ble.n	8007c86 <_strtod_l+0x41e>
 8007c40:	2b16      	cmp	r3, #22
 8007c42:	dc09      	bgt.n	8007c58 <_strtod_l+0x3f0>
 8007c44:	496c      	ldr	r1, [pc, #432]	; (8007df8 <_strtod_l+0x590>)
 8007c46:	4642      	mov	r2, r8
 8007c48:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007c4c:	464b      	mov	r3, r9
 8007c4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c52:	f7f8 fc4b 	bl	80004ec <__aeabi_dmul>
 8007c56:	e7c3      	b.n	8007be0 <_strtod_l+0x378>
 8007c58:	9a07      	ldr	r2, [sp, #28]
 8007c5a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	db20      	blt.n	8007ca4 <_strtod_l+0x43c>
 8007c62:	4d65      	ldr	r5, [pc, #404]	; (8007df8 <_strtod_l+0x590>)
 8007c64:	f1c4 040f 	rsb	r4, r4, #15
 8007c68:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8007c6c:	4642      	mov	r2, r8
 8007c6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c72:	464b      	mov	r3, r9
 8007c74:	f7f8 fc3a 	bl	80004ec <__aeabi_dmul>
 8007c78:	9b07      	ldr	r3, [sp, #28]
 8007c7a:	1b1c      	subs	r4, r3, r4
 8007c7c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8007c80:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007c84:	e7e5      	b.n	8007c52 <_strtod_l+0x3ea>
 8007c86:	9b07      	ldr	r3, [sp, #28]
 8007c88:	3316      	adds	r3, #22
 8007c8a:	db0b      	blt.n	8007ca4 <_strtod_l+0x43c>
 8007c8c:	9b04      	ldr	r3, [sp, #16]
 8007c8e:	4640      	mov	r0, r8
 8007c90:	1b5d      	subs	r5, r3, r5
 8007c92:	4b59      	ldr	r3, [pc, #356]	; (8007df8 <_strtod_l+0x590>)
 8007c94:	4649      	mov	r1, r9
 8007c96:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8007c9a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007c9e:	f7f8 fd4f 	bl	8000740 <__aeabi_ddiv>
 8007ca2:	e79d      	b.n	8007be0 <_strtod_l+0x378>
 8007ca4:	9b07      	ldr	r3, [sp, #28]
 8007ca6:	1ba6      	subs	r6, r4, r6
 8007ca8:	441e      	add	r6, r3
 8007caa:	2e00      	cmp	r6, #0
 8007cac:	dd74      	ble.n	8007d98 <_strtod_l+0x530>
 8007cae:	f016 030f 	ands.w	r3, r6, #15
 8007cb2:	d00a      	beq.n	8007cca <_strtod_l+0x462>
 8007cb4:	4950      	ldr	r1, [pc, #320]	; (8007df8 <_strtod_l+0x590>)
 8007cb6:	4642      	mov	r2, r8
 8007cb8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007cbc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007cc0:	464b      	mov	r3, r9
 8007cc2:	f7f8 fc13 	bl	80004ec <__aeabi_dmul>
 8007cc6:	4680      	mov	r8, r0
 8007cc8:	4689      	mov	r9, r1
 8007cca:	f036 060f 	bics.w	r6, r6, #15
 8007cce:	d052      	beq.n	8007d76 <_strtod_l+0x50e>
 8007cd0:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8007cd4:	dd27      	ble.n	8007d26 <_strtod_l+0x4be>
 8007cd6:	f04f 0b00 	mov.w	fp, #0
 8007cda:	f8cd b010 	str.w	fp, [sp, #16]
 8007cde:	f8cd b020 	str.w	fp, [sp, #32]
 8007ce2:	f8cd b018 	str.w	fp, [sp, #24]
 8007ce6:	2322      	movs	r3, #34	; 0x22
 8007ce8:	f04f 0800 	mov.w	r8, #0
 8007cec:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8007df0 <_strtod_l+0x588>
 8007cf0:	f8ca 3000 	str.w	r3, [sl]
 8007cf4:	9b08      	ldr	r3, [sp, #32]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	f43f adf7 	beq.w	80078ea <_strtod_l+0x82>
 8007cfc:	4650      	mov	r0, sl
 8007cfe:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007d00:	f001 ff04 	bl	8009b0c <_Bfree>
 8007d04:	4650      	mov	r0, sl
 8007d06:	9906      	ldr	r1, [sp, #24]
 8007d08:	f001 ff00 	bl	8009b0c <_Bfree>
 8007d0c:	4650      	mov	r0, sl
 8007d0e:	9904      	ldr	r1, [sp, #16]
 8007d10:	f001 fefc 	bl	8009b0c <_Bfree>
 8007d14:	4650      	mov	r0, sl
 8007d16:	9908      	ldr	r1, [sp, #32]
 8007d18:	f001 fef8 	bl	8009b0c <_Bfree>
 8007d1c:	4659      	mov	r1, fp
 8007d1e:	4650      	mov	r0, sl
 8007d20:	f001 fef4 	bl	8009b0c <_Bfree>
 8007d24:	e5e1      	b.n	80078ea <_strtod_l+0x82>
 8007d26:	4b35      	ldr	r3, [pc, #212]	; (8007dfc <_strtod_l+0x594>)
 8007d28:	4640      	mov	r0, r8
 8007d2a:	9305      	str	r3, [sp, #20]
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	4649      	mov	r1, r9
 8007d30:	461f      	mov	r7, r3
 8007d32:	1136      	asrs	r6, r6, #4
 8007d34:	2e01      	cmp	r6, #1
 8007d36:	dc21      	bgt.n	8007d7c <_strtod_l+0x514>
 8007d38:	b10b      	cbz	r3, 8007d3e <_strtod_l+0x4d6>
 8007d3a:	4680      	mov	r8, r0
 8007d3c:	4689      	mov	r9, r1
 8007d3e:	4b2f      	ldr	r3, [pc, #188]	; (8007dfc <_strtod_l+0x594>)
 8007d40:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8007d44:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007d48:	4642      	mov	r2, r8
 8007d4a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007d4e:	464b      	mov	r3, r9
 8007d50:	f7f8 fbcc 	bl	80004ec <__aeabi_dmul>
 8007d54:	4b26      	ldr	r3, [pc, #152]	; (8007df0 <_strtod_l+0x588>)
 8007d56:	460a      	mov	r2, r1
 8007d58:	400b      	ands	r3, r1
 8007d5a:	4929      	ldr	r1, [pc, #164]	; (8007e00 <_strtod_l+0x598>)
 8007d5c:	4680      	mov	r8, r0
 8007d5e:	428b      	cmp	r3, r1
 8007d60:	d8b9      	bhi.n	8007cd6 <_strtod_l+0x46e>
 8007d62:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007d66:	428b      	cmp	r3, r1
 8007d68:	bf86      	itte	hi
 8007d6a:	f04f 38ff 	movhi.w	r8, #4294967295
 8007d6e:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8007e04 <_strtod_l+0x59c>
 8007d72:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8007d76:	2300      	movs	r3, #0
 8007d78:	9305      	str	r3, [sp, #20]
 8007d7a:	e07f      	b.n	8007e7c <_strtod_l+0x614>
 8007d7c:	07f2      	lsls	r2, r6, #31
 8007d7e:	d505      	bpl.n	8007d8c <_strtod_l+0x524>
 8007d80:	9b05      	ldr	r3, [sp, #20]
 8007d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d86:	f7f8 fbb1 	bl	80004ec <__aeabi_dmul>
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	9a05      	ldr	r2, [sp, #20]
 8007d8e:	3701      	adds	r7, #1
 8007d90:	3208      	adds	r2, #8
 8007d92:	1076      	asrs	r6, r6, #1
 8007d94:	9205      	str	r2, [sp, #20]
 8007d96:	e7cd      	b.n	8007d34 <_strtod_l+0x4cc>
 8007d98:	d0ed      	beq.n	8007d76 <_strtod_l+0x50e>
 8007d9a:	4276      	negs	r6, r6
 8007d9c:	f016 020f 	ands.w	r2, r6, #15
 8007da0:	d00a      	beq.n	8007db8 <_strtod_l+0x550>
 8007da2:	4b15      	ldr	r3, [pc, #84]	; (8007df8 <_strtod_l+0x590>)
 8007da4:	4640      	mov	r0, r8
 8007da6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007daa:	4649      	mov	r1, r9
 8007dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007db0:	f7f8 fcc6 	bl	8000740 <__aeabi_ddiv>
 8007db4:	4680      	mov	r8, r0
 8007db6:	4689      	mov	r9, r1
 8007db8:	1136      	asrs	r6, r6, #4
 8007dba:	d0dc      	beq.n	8007d76 <_strtod_l+0x50e>
 8007dbc:	2e1f      	cmp	r6, #31
 8007dbe:	dd23      	ble.n	8007e08 <_strtod_l+0x5a0>
 8007dc0:	f04f 0b00 	mov.w	fp, #0
 8007dc4:	f8cd b010 	str.w	fp, [sp, #16]
 8007dc8:	f8cd b020 	str.w	fp, [sp, #32]
 8007dcc:	f8cd b018 	str.w	fp, [sp, #24]
 8007dd0:	2322      	movs	r3, #34	; 0x22
 8007dd2:	f04f 0800 	mov.w	r8, #0
 8007dd6:	f04f 0900 	mov.w	r9, #0
 8007dda:	f8ca 3000 	str.w	r3, [sl]
 8007dde:	e789      	b.n	8007cf4 <_strtod_l+0x48c>
 8007de0:	0800b7ad 	.word	0x0800b7ad
 8007de4:	0800b7e8 	.word	0x0800b7e8
 8007de8:	0800b7a5 	.word	0x0800b7a5
 8007dec:	0800b9dc 	.word	0x0800b9dc
 8007df0:	7ff00000 	.word	0x7ff00000
 8007df4:	0800b8d7 	.word	0x0800b8d7
 8007df8:	0800bb50 	.word	0x0800bb50
 8007dfc:	0800bb28 	.word	0x0800bb28
 8007e00:	7ca00000 	.word	0x7ca00000
 8007e04:	7fefffff 	.word	0x7fefffff
 8007e08:	f016 0310 	ands.w	r3, r6, #16
 8007e0c:	bf18      	it	ne
 8007e0e:	236a      	movne	r3, #106	; 0x6a
 8007e10:	4640      	mov	r0, r8
 8007e12:	9305      	str	r3, [sp, #20]
 8007e14:	4649      	mov	r1, r9
 8007e16:	2300      	movs	r3, #0
 8007e18:	4fb0      	ldr	r7, [pc, #704]	; (80080dc <_strtod_l+0x874>)
 8007e1a:	07f2      	lsls	r2, r6, #31
 8007e1c:	d504      	bpl.n	8007e28 <_strtod_l+0x5c0>
 8007e1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e22:	f7f8 fb63 	bl	80004ec <__aeabi_dmul>
 8007e26:	2301      	movs	r3, #1
 8007e28:	1076      	asrs	r6, r6, #1
 8007e2a:	f107 0708 	add.w	r7, r7, #8
 8007e2e:	d1f4      	bne.n	8007e1a <_strtod_l+0x5b2>
 8007e30:	b10b      	cbz	r3, 8007e36 <_strtod_l+0x5ce>
 8007e32:	4680      	mov	r8, r0
 8007e34:	4689      	mov	r9, r1
 8007e36:	9b05      	ldr	r3, [sp, #20]
 8007e38:	b1c3      	cbz	r3, 8007e6c <_strtod_l+0x604>
 8007e3a:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8007e3e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	4649      	mov	r1, r9
 8007e46:	dd11      	ble.n	8007e6c <_strtod_l+0x604>
 8007e48:	2b1f      	cmp	r3, #31
 8007e4a:	f340 8127 	ble.w	800809c <_strtod_l+0x834>
 8007e4e:	2b34      	cmp	r3, #52	; 0x34
 8007e50:	bfd8      	it	le
 8007e52:	f04f 33ff 	movle.w	r3, #4294967295
 8007e56:	f04f 0800 	mov.w	r8, #0
 8007e5a:	bfcf      	iteee	gt
 8007e5c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8007e60:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007e64:	fa03 f202 	lslle.w	r2, r3, r2
 8007e68:	ea02 0901 	andle.w	r9, r2, r1
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	2300      	movs	r3, #0
 8007e70:	4640      	mov	r0, r8
 8007e72:	4649      	mov	r1, r9
 8007e74:	f7f8 fda2 	bl	80009bc <__aeabi_dcmpeq>
 8007e78:	2800      	cmp	r0, #0
 8007e7a:	d1a1      	bne.n	8007dc0 <_strtod_l+0x558>
 8007e7c:	9b06      	ldr	r3, [sp, #24]
 8007e7e:	465a      	mov	r2, fp
 8007e80:	9300      	str	r3, [sp, #0]
 8007e82:	4650      	mov	r0, sl
 8007e84:	4623      	mov	r3, r4
 8007e86:	9908      	ldr	r1, [sp, #32]
 8007e88:	f001 fea8 	bl	8009bdc <__s2b>
 8007e8c:	9008      	str	r0, [sp, #32]
 8007e8e:	2800      	cmp	r0, #0
 8007e90:	f43f af21 	beq.w	8007cd6 <_strtod_l+0x46e>
 8007e94:	9b04      	ldr	r3, [sp, #16]
 8007e96:	f04f 0b00 	mov.w	fp, #0
 8007e9a:	1b5d      	subs	r5, r3, r5
 8007e9c:	9b07      	ldr	r3, [sp, #28]
 8007e9e:	f8cd b010 	str.w	fp, [sp, #16]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	bfb4      	ite	lt
 8007ea6:	462b      	movlt	r3, r5
 8007ea8:	2300      	movge	r3, #0
 8007eaa:	930e      	str	r3, [sp, #56]	; 0x38
 8007eac:	9b07      	ldr	r3, [sp, #28]
 8007eae:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007eb2:	9314      	str	r3, [sp, #80]	; 0x50
 8007eb4:	9b08      	ldr	r3, [sp, #32]
 8007eb6:	4650      	mov	r0, sl
 8007eb8:	6859      	ldr	r1, [r3, #4]
 8007eba:	f001 fde7 	bl	8009a8c <_Balloc>
 8007ebe:	9006      	str	r0, [sp, #24]
 8007ec0:	2800      	cmp	r0, #0
 8007ec2:	f43f af10 	beq.w	8007ce6 <_strtod_l+0x47e>
 8007ec6:	9b08      	ldr	r3, [sp, #32]
 8007ec8:	300c      	adds	r0, #12
 8007eca:	691a      	ldr	r2, [r3, #16]
 8007ecc:	f103 010c 	add.w	r1, r3, #12
 8007ed0:	3202      	adds	r2, #2
 8007ed2:	0092      	lsls	r2, r2, #2
 8007ed4:	f7fe fff8 	bl	8006ec8 <memcpy>
 8007ed8:	ab1c      	add	r3, sp, #112	; 0x70
 8007eda:	9301      	str	r3, [sp, #4]
 8007edc:	ab1b      	add	r3, sp, #108	; 0x6c
 8007ede:	9300      	str	r3, [sp, #0]
 8007ee0:	4642      	mov	r2, r8
 8007ee2:	464b      	mov	r3, r9
 8007ee4:	4650      	mov	r0, sl
 8007ee6:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8007eea:	f002 f9b9 	bl	800a260 <__d2b>
 8007eee:	901a      	str	r0, [sp, #104]	; 0x68
 8007ef0:	2800      	cmp	r0, #0
 8007ef2:	f43f aef8 	beq.w	8007ce6 <_strtod_l+0x47e>
 8007ef6:	2101      	movs	r1, #1
 8007ef8:	4650      	mov	r0, sl
 8007efa:	f001 ff07 	bl	8009d0c <__i2b>
 8007efe:	4603      	mov	r3, r0
 8007f00:	9004      	str	r0, [sp, #16]
 8007f02:	2800      	cmp	r0, #0
 8007f04:	f43f aeef 	beq.w	8007ce6 <_strtod_l+0x47e>
 8007f08:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8007f0a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007f0c:	2d00      	cmp	r5, #0
 8007f0e:	bfab      	itete	ge
 8007f10:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8007f12:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 8007f14:	18ee      	addge	r6, r5, r3
 8007f16:	1b5c      	sublt	r4, r3, r5
 8007f18:	9b05      	ldr	r3, [sp, #20]
 8007f1a:	bfa8      	it	ge
 8007f1c:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 8007f1e:	eba5 0503 	sub.w	r5, r5, r3
 8007f22:	4415      	add	r5, r2
 8007f24:	4b6e      	ldr	r3, [pc, #440]	; (80080e0 <_strtod_l+0x878>)
 8007f26:	f105 35ff 	add.w	r5, r5, #4294967295
 8007f2a:	bfb8      	it	lt
 8007f2c:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8007f2e:	429d      	cmp	r5, r3
 8007f30:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007f34:	f280 80c4 	bge.w	80080c0 <_strtod_l+0x858>
 8007f38:	1b5b      	subs	r3, r3, r5
 8007f3a:	2b1f      	cmp	r3, #31
 8007f3c:	f04f 0701 	mov.w	r7, #1
 8007f40:	eba2 0203 	sub.w	r2, r2, r3
 8007f44:	f300 80b1 	bgt.w	80080aa <_strtod_l+0x842>
 8007f48:	2500      	movs	r5, #0
 8007f4a:	fa07 f303 	lsl.w	r3, r7, r3
 8007f4e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007f50:	18b7      	adds	r7, r6, r2
 8007f52:	9b05      	ldr	r3, [sp, #20]
 8007f54:	42be      	cmp	r6, r7
 8007f56:	4414      	add	r4, r2
 8007f58:	441c      	add	r4, r3
 8007f5a:	4633      	mov	r3, r6
 8007f5c:	bfa8      	it	ge
 8007f5e:	463b      	movge	r3, r7
 8007f60:	42a3      	cmp	r3, r4
 8007f62:	bfa8      	it	ge
 8007f64:	4623      	movge	r3, r4
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	bfc2      	ittt	gt
 8007f6a:	1aff      	subgt	r7, r7, r3
 8007f6c:	1ae4      	subgt	r4, r4, r3
 8007f6e:	1af6      	subgt	r6, r6, r3
 8007f70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	dd17      	ble.n	8007fa6 <_strtod_l+0x73e>
 8007f76:	461a      	mov	r2, r3
 8007f78:	4650      	mov	r0, sl
 8007f7a:	9904      	ldr	r1, [sp, #16]
 8007f7c:	f001 ff84 	bl	8009e88 <__pow5mult>
 8007f80:	9004      	str	r0, [sp, #16]
 8007f82:	2800      	cmp	r0, #0
 8007f84:	f43f aeaf 	beq.w	8007ce6 <_strtod_l+0x47e>
 8007f88:	4601      	mov	r1, r0
 8007f8a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007f8c:	4650      	mov	r0, sl
 8007f8e:	f001 fed3 	bl	8009d38 <__multiply>
 8007f92:	9009      	str	r0, [sp, #36]	; 0x24
 8007f94:	2800      	cmp	r0, #0
 8007f96:	f43f aea6 	beq.w	8007ce6 <_strtod_l+0x47e>
 8007f9a:	4650      	mov	r0, sl
 8007f9c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007f9e:	f001 fdb5 	bl	8009b0c <_Bfree>
 8007fa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fa4:	931a      	str	r3, [sp, #104]	; 0x68
 8007fa6:	2f00      	cmp	r7, #0
 8007fa8:	f300 808e 	bgt.w	80080c8 <_strtod_l+0x860>
 8007fac:	9b07      	ldr	r3, [sp, #28]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	dd08      	ble.n	8007fc4 <_strtod_l+0x75c>
 8007fb2:	4650      	mov	r0, sl
 8007fb4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007fb6:	9906      	ldr	r1, [sp, #24]
 8007fb8:	f001 ff66 	bl	8009e88 <__pow5mult>
 8007fbc:	9006      	str	r0, [sp, #24]
 8007fbe:	2800      	cmp	r0, #0
 8007fc0:	f43f ae91 	beq.w	8007ce6 <_strtod_l+0x47e>
 8007fc4:	2c00      	cmp	r4, #0
 8007fc6:	dd08      	ble.n	8007fda <_strtod_l+0x772>
 8007fc8:	4622      	mov	r2, r4
 8007fca:	4650      	mov	r0, sl
 8007fcc:	9906      	ldr	r1, [sp, #24]
 8007fce:	f001 ffb5 	bl	8009f3c <__lshift>
 8007fd2:	9006      	str	r0, [sp, #24]
 8007fd4:	2800      	cmp	r0, #0
 8007fd6:	f43f ae86 	beq.w	8007ce6 <_strtod_l+0x47e>
 8007fda:	2e00      	cmp	r6, #0
 8007fdc:	dd08      	ble.n	8007ff0 <_strtod_l+0x788>
 8007fde:	4632      	mov	r2, r6
 8007fe0:	4650      	mov	r0, sl
 8007fe2:	9904      	ldr	r1, [sp, #16]
 8007fe4:	f001 ffaa 	bl	8009f3c <__lshift>
 8007fe8:	9004      	str	r0, [sp, #16]
 8007fea:	2800      	cmp	r0, #0
 8007fec:	f43f ae7b 	beq.w	8007ce6 <_strtod_l+0x47e>
 8007ff0:	4650      	mov	r0, sl
 8007ff2:	9a06      	ldr	r2, [sp, #24]
 8007ff4:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007ff6:	f002 f82d 	bl	800a054 <__mdiff>
 8007ffa:	4683      	mov	fp, r0
 8007ffc:	2800      	cmp	r0, #0
 8007ffe:	f43f ae72 	beq.w	8007ce6 <_strtod_l+0x47e>
 8008002:	2400      	movs	r4, #0
 8008004:	68c3      	ldr	r3, [r0, #12]
 8008006:	9904      	ldr	r1, [sp, #16]
 8008008:	60c4      	str	r4, [r0, #12]
 800800a:	930b      	str	r3, [sp, #44]	; 0x2c
 800800c:	f002 f806 	bl	800a01c <__mcmp>
 8008010:	42a0      	cmp	r0, r4
 8008012:	da6b      	bge.n	80080ec <_strtod_l+0x884>
 8008014:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008016:	ea53 0308 	orrs.w	r3, r3, r8
 800801a:	f040 8091 	bne.w	8008140 <_strtod_l+0x8d8>
 800801e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008022:	2b00      	cmp	r3, #0
 8008024:	f040 808c 	bne.w	8008140 <_strtod_l+0x8d8>
 8008028:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800802c:	0d1b      	lsrs	r3, r3, #20
 800802e:	051b      	lsls	r3, r3, #20
 8008030:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008034:	f240 8084 	bls.w	8008140 <_strtod_l+0x8d8>
 8008038:	f8db 3014 	ldr.w	r3, [fp, #20]
 800803c:	b91b      	cbnz	r3, 8008046 <_strtod_l+0x7de>
 800803e:	f8db 3010 	ldr.w	r3, [fp, #16]
 8008042:	2b01      	cmp	r3, #1
 8008044:	dd7c      	ble.n	8008140 <_strtod_l+0x8d8>
 8008046:	4659      	mov	r1, fp
 8008048:	2201      	movs	r2, #1
 800804a:	4650      	mov	r0, sl
 800804c:	f001 ff76 	bl	8009f3c <__lshift>
 8008050:	9904      	ldr	r1, [sp, #16]
 8008052:	4683      	mov	fp, r0
 8008054:	f001 ffe2 	bl	800a01c <__mcmp>
 8008058:	2800      	cmp	r0, #0
 800805a:	dd71      	ble.n	8008140 <_strtod_l+0x8d8>
 800805c:	9905      	ldr	r1, [sp, #20]
 800805e:	464b      	mov	r3, r9
 8008060:	4a20      	ldr	r2, [pc, #128]	; (80080e4 <_strtod_l+0x87c>)
 8008062:	2900      	cmp	r1, #0
 8008064:	f000 808c 	beq.w	8008180 <_strtod_l+0x918>
 8008068:	ea02 0109 	and.w	r1, r2, r9
 800806c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008070:	f300 8086 	bgt.w	8008180 <_strtod_l+0x918>
 8008074:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008078:	f77f aeaa 	ble.w	8007dd0 <_strtod_l+0x568>
 800807c:	4640      	mov	r0, r8
 800807e:	4649      	mov	r1, r9
 8008080:	4b19      	ldr	r3, [pc, #100]	; (80080e8 <_strtod_l+0x880>)
 8008082:	2200      	movs	r2, #0
 8008084:	f7f8 fa32 	bl	80004ec <__aeabi_dmul>
 8008088:	460b      	mov	r3, r1
 800808a:	4303      	orrs	r3, r0
 800808c:	bf08      	it	eq
 800808e:	2322      	moveq	r3, #34	; 0x22
 8008090:	4680      	mov	r8, r0
 8008092:	4689      	mov	r9, r1
 8008094:	bf08      	it	eq
 8008096:	f8ca 3000 	streq.w	r3, [sl]
 800809a:	e62f      	b.n	8007cfc <_strtod_l+0x494>
 800809c:	f04f 32ff 	mov.w	r2, #4294967295
 80080a0:	fa02 f303 	lsl.w	r3, r2, r3
 80080a4:	ea03 0808 	and.w	r8, r3, r8
 80080a8:	e6e0      	b.n	8007e6c <_strtod_l+0x604>
 80080aa:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 80080ae:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 80080b2:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 80080b6:	35e2      	adds	r5, #226	; 0xe2
 80080b8:	fa07 f505 	lsl.w	r5, r7, r5
 80080bc:	970f      	str	r7, [sp, #60]	; 0x3c
 80080be:	e747      	b.n	8007f50 <_strtod_l+0x6e8>
 80080c0:	2301      	movs	r3, #1
 80080c2:	2500      	movs	r5, #0
 80080c4:	930f      	str	r3, [sp, #60]	; 0x3c
 80080c6:	e743      	b.n	8007f50 <_strtod_l+0x6e8>
 80080c8:	463a      	mov	r2, r7
 80080ca:	4650      	mov	r0, sl
 80080cc:	991a      	ldr	r1, [sp, #104]	; 0x68
 80080ce:	f001 ff35 	bl	8009f3c <__lshift>
 80080d2:	901a      	str	r0, [sp, #104]	; 0x68
 80080d4:	2800      	cmp	r0, #0
 80080d6:	f47f af69 	bne.w	8007fac <_strtod_l+0x744>
 80080da:	e604      	b.n	8007ce6 <_strtod_l+0x47e>
 80080dc:	0800b800 	.word	0x0800b800
 80080e0:	fffffc02 	.word	0xfffffc02
 80080e4:	7ff00000 	.word	0x7ff00000
 80080e8:	39500000 	.word	0x39500000
 80080ec:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80080f0:	d165      	bne.n	80081be <_strtod_l+0x956>
 80080f2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80080f4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80080f8:	b35a      	cbz	r2, 8008152 <_strtod_l+0x8ea>
 80080fa:	4a99      	ldr	r2, [pc, #612]	; (8008360 <_strtod_l+0xaf8>)
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d12b      	bne.n	8008158 <_strtod_l+0x8f0>
 8008100:	9b05      	ldr	r3, [sp, #20]
 8008102:	4641      	mov	r1, r8
 8008104:	b303      	cbz	r3, 8008148 <_strtod_l+0x8e0>
 8008106:	464a      	mov	r2, r9
 8008108:	4b96      	ldr	r3, [pc, #600]	; (8008364 <_strtod_l+0xafc>)
 800810a:	4013      	ands	r3, r2
 800810c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008110:	f04f 32ff 	mov.w	r2, #4294967295
 8008114:	d81b      	bhi.n	800814e <_strtod_l+0x8e6>
 8008116:	0d1b      	lsrs	r3, r3, #20
 8008118:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800811c:	fa02 f303 	lsl.w	r3, r2, r3
 8008120:	4299      	cmp	r1, r3
 8008122:	d119      	bne.n	8008158 <_strtod_l+0x8f0>
 8008124:	4b90      	ldr	r3, [pc, #576]	; (8008368 <_strtod_l+0xb00>)
 8008126:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008128:	429a      	cmp	r2, r3
 800812a:	d102      	bne.n	8008132 <_strtod_l+0x8ca>
 800812c:	3101      	adds	r1, #1
 800812e:	f43f adda 	beq.w	8007ce6 <_strtod_l+0x47e>
 8008132:	f04f 0800 	mov.w	r8, #0
 8008136:	4b8b      	ldr	r3, [pc, #556]	; (8008364 <_strtod_l+0xafc>)
 8008138:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800813a:	401a      	ands	r2, r3
 800813c:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8008140:	9b05      	ldr	r3, [sp, #20]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d19a      	bne.n	800807c <_strtod_l+0x814>
 8008146:	e5d9      	b.n	8007cfc <_strtod_l+0x494>
 8008148:	f04f 33ff 	mov.w	r3, #4294967295
 800814c:	e7e8      	b.n	8008120 <_strtod_l+0x8b8>
 800814e:	4613      	mov	r3, r2
 8008150:	e7e6      	b.n	8008120 <_strtod_l+0x8b8>
 8008152:	ea53 0308 	orrs.w	r3, r3, r8
 8008156:	d081      	beq.n	800805c <_strtod_l+0x7f4>
 8008158:	b1e5      	cbz	r5, 8008194 <_strtod_l+0x92c>
 800815a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800815c:	421d      	tst	r5, r3
 800815e:	d0ef      	beq.n	8008140 <_strtod_l+0x8d8>
 8008160:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008162:	4640      	mov	r0, r8
 8008164:	4649      	mov	r1, r9
 8008166:	9a05      	ldr	r2, [sp, #20]
 8008168:	b1c3      	cbz	r3, 800819c <_strtod_l+0x934>
 800816a:	f7ff fb5a 	bl	8007822 <sulp>
 800816e:	4602      	mov	r2, r0
 8008170:	460b      	mov	r3, r1
 8008172:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008176:	f7f8 f803 	bl	8000180 <__adddf3>
 800817a:	4680      	mov	r8, r0
 800817c:	4689      	mov	r9, r1
 800817e:	e7df      	b.n	8008140 <_strtod_l+0x8d8>
 8008180:	4013      	ands	r3, r2
 8008182:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008186:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800818a:	f04f 38ff 	mov.w	r8, #4294967295
 800818e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8008192:	e7d5      	b.n	8008140 <_strtod_l+0x8d8>
 8008194:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008196:	ea13 0f08 	tst.w	r3, r8
 800819a:	e7e0      	b.n	800815e <_strtod_l+0x8f6>
 800819c:	f7ff fb41 	bl	8007822 <sulp>
 80081a0:	4602      	mov	r2, r0
 80081a2:	460b      	mov	r3, r1
 80081a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80081a8:	f7f7 ffe8 	bl	800017c <__aeabi_dsub>
 80081ac:	2200      	movs	r2, #0
 80081ae:	2300      	movs	r3, #0
 80081b0:	4680      	mov	r8, r0
 80081b2:	4689      	mov	r9, r1
 80081b4:	f7f8 fc02 	bl	80009bc <__aeabi_dcmpeq>
 80081b8:	2800      	cmp	r0, #0
 80081ba:	d0c1      	beq.n	8008140 <_strtod_l+0x8d8>
 80081bc:	e608      	b.n	8007dd0 <_strtod_l+0x568>
 80081be:	4658      	mov	r0, fp
 80081c0:	9904      	ldr	r1, [sp, #16]
 80081c2:	f002 f8a9 	bl	800a318 <__ratio>
 80081c6:	2200      	movs	r2, #0
 80081c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80081cc:	4606      	mov	r6, r0
 80081ce:	460f      	mov	r7, r1
 80081d0:	f7f8 fc08 	bl	80009e4 <__aeabi_dcmple>
 80081d4:	2800      	cmp	r0, #0
 80081d6:	d070      	beq.n	80082ba <_strtod_l+0xa52>
 80081d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d042      	beq.n	8008264 <_strtod_l+0x9fc>
 80081de:	2600      	movs	r6, #0
 80081e0:	4f62      	ldr	r7, [pc, #392]	; (800836c <_strtod_l+0xb04>)
 80081e2:	4d62      	ldr	r5, [pc, #392]	; (800836c <_strtod_l+0xb04>)
 80081e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081e6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80081ea:	0d1b      	lsrs	r3, r3, #20
 80081ec:	051b      	lsls	r3, r3, #20
 80081ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80081f0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80081f2:	4b5f      	ldr	r3, [pc, #380]	; (8008370 <_strtod_l+0xb08>)
 80081f4:	429a      	cmp	r2, r3
 80081f6:	f040 80c3 	bne.w	8008380 <_strtod_l+0xb18>
 80081fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081fc:	4640      	mov	r0, r8
 80081fe:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8008202:	4649      	mov	r1, r9
 8008204:	f001 ffb2 	bl	800a16c <__ulp>
 8008208:	4602      	mov	r2, r0
 800820a:	460b      	mov	r3, r1
 800820c:	4630      	mov	r0, r6
 800820e:	4639      	mov	r1, r7
 8008210:	f7f8 f96c 	bl	80004ec <__aeabi_dmul>
 8008214:	4642      	mov	r2, r8
 8008216:	464b      	mov	r3, r9
 8008218:	f7f7 ffb2 	bl	8000180 <__adddf3>
 800821c:	460b      	mov	r3, r1
 800821e:	4951      	ldr	r1, [pc, #324]	; (8008364 <_strtod_l+0xafc>)
 8008220:	4a54      	ldr	r2, [pc, #336]	; (8008374 <_strtod_l+0xb0c>)
 8008222:	4019      	ands	r1, r3
 8008224:	4291      	cmp	r1, r2
 8008226:	4680      	mov	r8, r0
 8008228:	d95d      	bls.n	80082e6 <_strtod_l+0xa7e>
 800822a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800822c:	4b4e      	ldr	r3, [pc, #312]	; (8008368 <_strtod_l+0xb00>)
 800822e:	429a      	cmp	r2, r3
 8008230:	d103      	bne.n	800823a <_strtod_l+0x9d2>
 8008232:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008234:	3301      	adds	r3, #1
 8008236:	f43f ad56 	beq.w	8007ce6 <_strtod_l+0x47e>
 800823a:	f04f 38ff 	mov.w	r8, #4294967295
 800823e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8008368 <_strtod_l+0xb00>
 8008242:	4650      	mov	r0, sl
 8008244:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008246:	f001 fc61 	bl	8009b0c <_Bfree>
 800824a:	4650      	mov	r0, sl
 800824c:	9906      	ldr	r1, [sp, #24]
 800824e:	f001 fc5d 	bl	8009b0c <_Bfree>
 8008252:	4650      	mov	r0, sl
 8008254:	9904      	ldr	r1, [sp, #16]
 8008256:	f001 fc59 	bl	8009b0c <_Bfree>
 800825a:	4659      	mov	r1, fp
 800825c:	4650      	mov	r0, sl
 800825e:	f001 fc55 	bl	8009b0c <_Bfree>
 8008262:	e627      	b.n	8007eb4 <_strtod_l+0x64c>
 8008264:	f1b8 0f00 	cmp.w	r8, #0
 8008268:	d119      	bne.n	800829e <_strtod_l+0xa36>
 800826a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800826c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008270:	b9e3      	cbnz	r3, 80082ac <_strtod_l+0xa44>
 8008272:	2200      	movs	r2, #0
 8008274:	4630      	mov	r0, r6
 8008276:	4639      	mov	r1, r7
 8008278:	4b3c      	ldr	r3, [pc, #240]	; (800836c <_strtod_l+0xb04>)
 800827a:	f7f8 fba9 	bl	80009d0 <__aeabi_dcmplt>
 800827e:	b9c8      	cbnz	r0, 80082b4 <_strtod_l+0xa4c>
 8008280:	2200      	movs	r2, #0
 8008282:	4630      	mov	r0, r6
 8008284:	4639      	mov	r1, r7
 8008286:	4b3c      	ldr	r3, [pc, #240]	; (8008378 <_strtod_l+0xb10>)
 8008288:	f7f8 f930 	bl	80004ec <__aeabi_dmul>
 800828c:	4604      	mov	r4, r0
 800828e:	460d      	mov	r5, r1
 8008290:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8008294:	9416      	str	r4, [sp, #88]	; 0x58
 8008296:	9317      	str	r3, [sp, #92]	; 0x5c
 8008298:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 800829c:	e7a2      	b.n	80081e4 <_strtod_l+0x97c>
 800829e:	f1b8 0f01 	cmp.w	r8, #1
 80082a2:	d103      	bne.n	80082ac <_strtod_l+0xa44>
 80082a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	f43f ad92 	beq.w	8007dd0 <_strtod_l+0x568>
 80082ac:	2600      	movs	r6, #0
 80082ae:	2400      	movs	r4, #0
 80082b0:	4f32      	ldr	r7, [pc, #200]	; (800837c <_strtod_l+0xb14>)
 80082b2:	e796      	b.n	80081e2 <_strtod_l+0x97a>
 80082b4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80082b6:	4d30      	ldr	r5, [pc, #192]	; (8008378 <_strtod_l+0xb10>)
 80082b8:	e7ea      	b.n	8008290 <_strtod_l+0xa28>
 80082ba:	4b2f      	ldr	r3, [pc, #188]	; (8008378 <_strtod_l+0xb10>)
 80082bc:	2200      	movs	r2, #0
 80082be:	4630      	mov	r0, r6
 80082c0:	4639      	mov	r1, r7
 80082c2:	f7f8 f913 	bl	80004ec <__aeabi_dmul>
 80082c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80082c8:	4604      	mov	r4, r0
 80082ca:	460d      	mov	r5, r1
 80082cc:	b933      	cbnz	r3, 80082dc <_strtod_l+0xa74>
 80082ce:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80082d2:	9010      	str	r0, [sp, #64]	; 0x40
 80082d4:	9311      	str	r3, [sp, #68]	; 0x44
 80082d6:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80082da:	e783      	b.n	80081e4 <_strtod_l+0x97c>
 80082dc:	4602      	mov	r2, r0
 80082de:	460b      	mov	r3, r1
 80082e0:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80082e4:	e7f7      	b.n	80082d6 <_strtod_l+0xa6e>
 80082e6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80082ea:	9b05      	ldr	r3, [sp, #20]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d1a8      	bne.n	8008242 <_strtod_l+0x9da>
 80082f0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80082f4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80082f6:	0d1b      	lsrs	r3, r3, #20
 80082f8:	051b      	lsls	r3, r3, #20
 80082fa:	429a      	cmp	r2, r3
 80082fc:	d1a1      	bne.n	8008242 <_strtod_l+0x9da>
 80082fe:	4620      	mov	r0, r4
 8008300:	4629      	mov	r1, r5
 8008302:	f7f8 fbeb 	bl	8000adc <__aeabi_d2lz>
 8008306:	f7f8 f8c3 	bl	8000490 <__aeabi_l2d>
 800830a:	4602      	mov	r2, r0
 800830c:	460b      	mov	r3, r1
 800830e:	4620      	mov	r0, r4
 8008310:	4629      	mov	r1, r5
 8008312:	f7f7 ff33 	bl	800017c <__aeabi_dsub>
 8008316:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008318:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800831c:	ea43 0308 	orr.w	r3, r3, r8
 8008320:	4313      	orrs	r3, r2
 8008322:	4604      	mov	r4, r0
 8008324:	460d      	mov	r5, r1
 8008326:	d066      	beq.n	80083f6 <_strtod_l+0xb8e>
 8008328:	a309      	add	r3, pc, #36	; (adr r3, 8008350 <_strtod_l+0xae8>)
 800832a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800832e:	f7f8 fb4f 	bl	80009d0 <__aeabi_dcmplt>
 8008332:	2800      	cmp	r0, #0
 8008334:	f47f ace2 	bne.w	8007cfc <_strtod_l+0x494>
 8008338:	a307      	add	r3, pc, #28	; (adr r3, 8008358 <_strtod_l+0xaf0>)
 800833a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800833e:	4620      	mov	r0, r4
 8008340:	4629      	mov	r1, r5
 8008342:	f7f8 fb63 	bl	8000a0c <__aeabi_dcmpgt>
 8008346:	2800      	cmp	r0, #0
 8008348:	f43f af7b 	beq.w	8008242 <_strtod_l+0x9da>
 800834c:	e4d6      	b.n	8007cfc <_strtod_l+0x494>
 800834e:	bf00      	nop
 8008350:	94a03595 	.word	0x94a03595
 8008354:	3fdfffff 	.word	0x3fdfffff
 8008358:	35afe535 	.word	0x35afe535
 800835c:	3fe00000 	.word	0x3fe00000
 8008360:	000fffff 	.word	0x000fffff
 8008364:	7ff00000 	.word	0x7ff00000
 8008368:	7fefffff 	.word	0x7fefffff
 800836c:	3ff00000 	.word	0x3ff00000
 8008370:	7fe00000 	.word	0x7fe00000
 8008374:	7c9fffff 	.word	0x7c9fffff
 8008378:	3fe00000 	.word	0x3fe00000
 800837c:	bff00000 	.word	0xbff00000
 8008380:	9b05      	ldr	r3, [sp, #20]
 8008382:	b313      	cbz	r3, 80083ca <_strtod_l+0xb62>
 8008384:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008386:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800838a:	d81e      	bhi.n	80083ca <_strtod_l+0xb62>
 800838c:	a326      	add	r3, pc, #152	; (adr r3, 8008428 <_strtod_l+0xbc0>)
 800838e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008392:	4620      	mov	r0, r4
 8008394:	4629      	mov	r1, r5
 8008396:	f7f8 fb25 	bl	80009e4 <__aeabi_dcmple>
 800839a:	b190      	cbz	r0, 80083c2 <_strtod_l+0xb5a>
 800839c:	4629      	mov	r1, r5
 800839e:	4620      	mov	r0, r4
 80083a0:	f7f8 fb7c 	bl	8000a9c <__aeabi_d2uiz>
 80083a4:	2801      	cmp	r0, #1
 80083a6:	bf38      	it	cc
 80083a8:	2001      	movcc	r0, #1
 80083aa:	f7f8 f825 	bl	80003f8 <__aeabi_ui2d>
 80083ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80083b0:	4604      	mov	r4, r0
 80083b2:	460d      	mov	r5, r1
 80083b4:	b9d3      	cbnz	r3, 80083ec <_strtod_l+0xb84>
 80083b6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80083ba:	9012      	str	r0, [sp, #72]	; 0x48
 80083bc:	9313      	str	r3, [sp, #76]	; 0x4c
 80083be:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 80083c2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80083c4:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 80083c8:	1a9f      	subs	r7, r3, r2
 80083ca:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80083ce:	f001 fecd 	bl	800a16c <__ulp>
 80083d2:	4602      	mov	r2, r0
 80083d4:	460b      	mov	r3, r1
 80083d6:	4630      	mov	r0, r6
 80083d8:	4639      	mov	r1, r7
 80083da:	f7f8 f887 	bl	80004ec <__aeabi_dmul>
 80083de:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80083e2:	f7f7 fecd 	bl	8000180 <__adddf3>
 80083e6:	4680      	mov	r8, r0
 80083e8:	4689      	mov	r9, r1
 80083ea:	e77e      	b.n	80082ea <_strtod_l+0xa82>
 80083ec:	4602      	mov	r2, r0
 80083ee:	460b      	mov	r3, r1
 80083f0:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 80083f4:	e7e3      	b.n	80083be <_strtod_l+0xb56>
 80083f6:	a30e      	add	r3, pc, #56	; (adr r3, 8008430 <_strtod_l+0xbc8>)
 80083f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083fc:	f7f8 fae8 	bl	80009d0 <__aeabi_dcmplt>
 8008400:	e7a1      	b.n	8008346 <_strtod_l+0xade>
 8008402:	2300      	movs	r3, #0
 8008404:	930a      	str	r3, [sp, #40]	; 0x28
 8008406:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008408:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800840a:	6013      	str	r3, [r2, #0]
 800840c:	f7ff ba71 	b.w	80078f2 <_strtod_l+0x8a>
 8008410:	2a65      	cmp	r2, #101	; 0x65
 8008412:	f43f ab63 	beq.w	8007adc <_strtod_l+0x274>
 8008416:	2a45      	cmp	r2, #69	; 0x45
 8008418:	f43f ab60 	beq.w	8007adc <_strtod_l+0x274>
 800841c:	2301      	movs	r3, #1
 800841e:	f7ff bb95 	b.w	8007b4c <_strtod_l+0x2e4>
 8008422:	bf00      	nop
 8008424:	f3af 8000 	nop.w
 8008428:	ffc00000 	.word	0xffc00000
 800842c:	41dfffff 	.word	0x41dfffff
 8008430:	94a03595 	.word	0x94a03595
 8008434:	3fcfffff 	.word	0x3fcfffff

08008438 <strtod>:
 8008438:	460a      	mov	r2, r1
 800843a:	4601      	mov	r1, r0
 800843c:	4802      	ldr	r0, [pc, #8]	; (8008448 <strtod+0x10>)
 800843e:	4b03      	ldr	r3, [pc, #12]	; (800844c <strtod+0x14>)
 8008440:	6800      	ldr	r0, [r0, #0]
 8008442:	f7ff ba11 	b.w	8007868 <_strtod_l>
 8008446:	bf00      	nop
 8008448:	20000190 	.word	0x20000190
 800844c:	200001f8 	.word	0x200001f8

08008450 <strtok>:
 8008450:	4b16      	ldr	r3, [pc, #88]	; (80084ac <strtok+0x5c>)
 8008452:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008456:	681f      	ldr	r7, [r3, #0]
 8008458:	4605      	mov	r5, r0
 800845a:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 800845c:	460e      	mov	r6, r1
 800845e:	b9ec      	cbnz	r4, 800849c <strtok+0x4c>
 8008460:	2050      	movs	r0, #80	; 0x50
 8008462:	f001 faeb 	bl	8009a3c <malloc>
 8008466:	4602      	mov	r2, r0
 8008468:	65b8      	str	r0, [r7, #88]	; 0x58
 800846a:	b920      	cbnz	r0, 8008476 <strtok+0x26>
 800846c:	2157      	movs	r1, #87	; 0x57
 800846e:	4b10      	ldr	r3, [pc, #64]	; (80084b0 <strtok+0x60>)
 8008470:	4810      	ldr	r0, [pc, #64]	; (80084b4 <strtok+0x64>)
 8008472:	f000 f8cf 	bl	8008614 <__assert_func>
 8008476:	e9c0 4400 	strd	r4, r4, [r0]
 800847a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800847e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8008482:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8008486:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800848a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800848e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8008492:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8008496:	6184      	str	r4, [r0, #24]
 8008498:	7704      	strb	r4, [r0, #28]
 800849a:	6244      	str	r4, [r0, #36]	; 0x24
 800849c:	4631      	mov	r1, r6
 800849e:	4628      	mov	r0, r5
 80084a0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80084a2:	2301      	movs	r3, #1
 80084a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80084a8:	f000 b806 	b.w	80084b8 <__strtok_r>
 80084ac:	20000190 	.word	0x20000190
 80084b0:	0800b828 	.word	0x0800b828
 80084b4:	0800b83f 	.word	0x0800b83f

080084b8 <__strtok_r>:
 80084b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80084ba:	b908      	cbnz	r0, 80084c0 <__strtok_r+0x8>
 80084bc:	6810      	ldr	r0, [r2, #0]
 80084be:	b188      	cbz	r0, 80084e4 <__strtok_r+0x2c>
 80084c0:	4604      	mov	r4, r0
 80084c2:	460f      	mov	r7, r1
 80084c4:	4620      	mov	r0, r4
 80084c6:	f814 5b01 	ldrb.w	r5, [r4], #1
 80084ca:	f817 6b01 	ldrb.w	r6, [r7], #1
 80084ce:	b91e      	cbnz	r6, 80084d8 <__strtok_r+0x20>
 80084d0:	b965      	cbnz	r5, 80084ec <__strtok_r+0x34>
 80084d2:	4628      	mov	r0, r5
 80084d4:	6015      	str	r5, [r2, #0]
 80084d6:	e005      	b.n	80084e4 <__strtok_r+0x2c>
 80084d8:	42b5      	cmp	r5, r6
 80084da:	d1f6      	bne.n	80084ca <__strtok_r+0x12>
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d1f0      	bne.n	80084c2 <__strtok_r+0xa>
 80084e0:	6014      	str	r4, [r2, #0]
 80084e2:	7003      	strb	r3, [r0, #0]
 80084e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80084e6:	461c      	mov	r4, r3
 80084e8:	e00c      	b.n	8008504 <__strtok_r+0x4c>
 80084ea:	b915      	cbnz	r5, 80084f2 <__strtok_r+0x3a>
 80084ec:	460e      	mov	r6, r1
 80084ee:	f814 3b01 	ldrb.w	r3, [r4], #1
 80084f2:	f816 5b01 	ldrb.w	r5, [r6], #1
 80084f6:	42ab      	cmp	r3, r5
 80084f8:	d1f7      	bne.n	80084ea <__strtok_r+0x32>
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d0f3      	beq.n	80084e6 <__strtok_r+0x2e>
 80084fe:	2300      	movs	r3, #0
 8008500:	f804 3c01 	strb.w	r3, [r4, #-1]
 8008504:	6014      	str	r4, [r2, #0]
 8008506:	e7ed      	b.n	80084e4 <__strtok_r+0x2c>

08008508 <_strtol_l.constprop.0>:
 8008508:	2b01      	cmp	r3, #1
 800850a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800850e:	4680      	mov	r8, r0
 8008510:	d001      	beq.n	8008516 <_strtol_l.constprop.0+0xe>
 8008512:	2b24      	cmp	r3, #36	; 0x24
 8008514:	d906      	bls.n	8008524 <_strtol_l.constprop.0+0x1c>
 8008516:	f7fe fcad 	bl	8006e74 <__errno>
 800851a:	2316      	movs	r3, #22
 800851c:	6003      	str	r3, [r0, #0]
 800851e:	2000      	movs	r0, #0
 8008520:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008524:	460d      	mov	r5, r1
 8008526:	4f35      	ldr	r7, [pc, #212]	; (80085fc <_strtol_l.constprop.0+0xf4>)
 8008528:	4628      	mov	r0, r5
 800852a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800852e:	5de6      	ldrb	r6, [r4, r7]
 8008530:	f016 0608 	ands.w	r6, r6, #8
 8008534:	d1f8      	bne.n	8008528 <_strtol_l.constprop.0+0x20>
 8008536:	2c2d      	cmp	r4, #45	; 0x2d
 8008538:	d12f      	bne.n	800859a <_strtol_l.constprop.0+0x92>
 800853a:	2601      	movs	r6, #1
 800853c:	782c      	ldrb	r4, [r5, #0]
 800853e:	1c85      	adds	r5, r0, #2
 8008540:	2b00      	cmp	r3, #0
 8008542:	d057      	beq.n	80085f4 <_strtol_l.constprop.0+0xec>
 8008544:	2b10      	cmp	r3, #16
 8008546:	d109      	bne.n	800855c <_strtol_l.constprop.0+0x54>
 8008548:	2c30      	cmp	r4, #48	; 0x30
 800854a:	d107      	bne.n	800855c <_strtol_l.constprop.0+0x54>
 800854c:	7828      	ldrb	r0, [r5, #0]
 800854e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8008552:	2858      	cmp	r0, #88	; 0x58
 8008554:	d149      	bne.n	80085ea <_strtol_l.constprop.0+0xe2>
 8008556:	2310      	movs	r3, #16
 8008558:	786c      	ldrb	r4, [r5, #1]
 800855a:	3502      	adds	r5, #2
 800855c:	2700      	movs	r7, #0
 800855e:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8008562:	f10e 3eff 	add.w	lr, lr, #4294967295
 8008566:	fbbe f9f3 	udiv	r9, lr, r3
 800856a:	4638      	mov	r0, r7
 800856c:	fb03 ea19 	mls	sl, r3, r9, lr
 8008570:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8008574:	f1bc 0f09 	cmp.w	ip, #9
 8008578:	d814      	bhi.n	80085a4 <_strtol_l.constprop.0+0x9c>
 800857a:	4664      	mov	r4, ip
 800857c:	42a3      	cmp	r3, r4
 800857e:	dd22      	ble.n	80085c6 <_strtol_l.constprop.0+0xbe>
 8008580:	2f00      	cmp	r7, #0
 8008582:	db1d      	blt.n	80085c0 <_strtol_l.constprop.0+0xb8>
 8008584:	4581      	cmp	r9, r0
 8008586:	d31b      	bcc.n	80085c0 <_strtol_l.constprop.0+0xb8>
 8008588:	d101      	bne.n	800858e <_strtol_l.constprop.0+0x86>
 800858a:	45a2      	cmp	sl, r4
 800858c:	db18      	blt.n	80085c0 <_strtol_l.constprop.0+0xb8>
 800858e:	2701      	movs	r7, #1
 8008590:	fb00 4003 	mla	r0, r0, r3, r4
 8008594:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008598:	e7ea      	b.n	8008570 <_strtol_l.constprop.0+0x68>
 800859a:	2c2b      	cmp	r4, #43	; 0x2b
 800859c:	bf04      	itt	eq
 800859e:	782c      	ldrbeq	r4, [r5, #0]
 80085a0:	1c85      	addeq	r5, r0, #2
 80085a2:	e7cd      	b.n	8008540 <_strtol_l.constprop.0+0x38>
 80085a4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80085a8:	f1bc 0f19 	cmp.w	ip, #25
 80085ac:	d801      	bhi.n	80085b2 <_strtol_l.constprop.0+0xaa>
 80085ae:	3c37      	subs	r4, #55	; 0x37
 80085b0:	e7e4      	b.n	800857c <_strtol_l.constprop.0+0x74>
 80085b2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80085b6:	f1bc 0f19 	cmp.w	ip, #25
 80085ba:	d804      	bhi.n	80085c6 <_strtol_l.constprop.0+0xbe>
 80085bc:	3c57      	subs	r4, #87	; 0x57
 80085be:	e7dd      	b.n	800857c <_strtol_l.constprop.0+0x74>
 80085c0:	f04f 37ff 	mov.w	r7, #4294967295
 80085c4:	e7e6      	b.n	8008594 <_strtol_l.constprop.0+0x8c>
 80085c6:	2f00      	cmp	r7, #0
 80085c8:	da07      	bge.n	80085da <_strtol_l.constprop.0+0xd2>
 80085ca:	2322      	movs	r3, #34	; 0x22
 80085cc:	4670      	mov	r0, lr
 80085ce:	f8c8 3000 	str.w	r3, [r8]
 80085d2:	2a00      	cmp	r2, #0
 80085d4:	d0a4      	beq.n	8008520 <_strtol_l.constprop.0+0x18>
 80085d6:	1e69      	subs	r1, r5, #1
 80085d8:	e005      	b.n	80085e6 <_strtol_l.constprop.0+0xde>
 80085da:	b106      	cbz	r6, 80085de <_strtol_l.constprop.0+0xd6>
 80085dc:	4240      	negs	r0, r0
 80085de:	2a00      	cmp	r2, #0
 80085e0:	d09e      	beq.n	8008520 <_strtol_l.constprop.0+0x18>
 80085e2:	2f00      	cmp	r7, #0
 80085e4:	d1f7      	bne.n	80085d6 <_strtol_l.constprop.0+0xce>
 80085e6:	6011      	str	r1, [r2, #0]
 80085e8:	e79a      	b.n	8008520 <_strtol_l.constprop.0+0x18>
 80085ea:	2430      	movs	r4, #48	; 0x30
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d1b5      	bne.n	800855c <_strtol_l.constprop.0+0x54>
 80085f0:	2308      	movs	r3, #8
 80085f2:	e7b3      	b.n	800855c <_strtol_l.constprop.0+0x54>
 80085f4:	2c30      	cmp	r4, #48	; 0x30
 80085f6:	d0a9      	beq.n	800854c <_strtol_l.constprop.0+0x44>
 80085f8:	230a      	movs	r3, #10
 80085fa:	e7af      	b.n	800855c <_strtol_l.constprop.0+0x54>
 80085fc:	0800b8d9 	.word	0x0800b8d9

08008600 <strtol>:
 8008600:	4613      	mov	r3, r2
 8008602:	460a      	mov	r2, r1
 8008604:	4601      	mov	r1, r0
 8008606:	4802      	ldr	r0, [pc, #8]	; (8008610 <strtol+0x10>)
 8008608:	6800      	ldr	r0, [r0, #0]
 800860a:	f7ff bf7d 	b.w	8008508 <_strtol_l.constprop.0>
 800860e:	bf00      	nop
 8008610:	20000190 	.word	0x20000190

08008614 <__assert_func>:
 8008614:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008616:	4614      	mov	r4, r2
 8008618:	461a      	mov	r2, r3
 800861a:	4b09      	ldr	r3, [pc, #36]	; (8008640 <__assert_func+0x2c>)
 800861c:	4605      	mov	r5, r0
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	68d8      	ldr	r0, [r3, #12]
 8008622:	b14c      	cbz	r4, 8008638 <__assert_func+0x24>
 8008624:	4b07      	ldr	r3, [pc, #28]	; (8008644 <__assert_func+0x30>)
 8008626:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800862a:	9100      	str	r1, [sp, #0]
 800862c:	462b      	mov	r3, r5
 800862e:	4906      	ldr	r1, [pc, #24]	; (8008648 <__assert_func+0x34>)
 8008630:	f000 fe88 	bl	8009344 <fiprintf>
 8008634:	f002 fb7e 	bl	800ad34 <abort>
 8008638:	4b04      	ldr	r3, [pc, #16]	; (800864c <__assert_func+0x38>)
 800863a:	461c      	mov	r4, r3
 800863c:	e7f3      	b.n	8008626 <__assert_func+0x12>
 800863e:	bf00      	nop
 8008640:	20000190 	.word	0x20000190
 8008644:	0800b89c 	.word	0x0800b89c
 8008648:	0800b8a9 	.word	0x0800b8a9
 800864c:	0800b8d7 	.word	0x0800b8d7

08008650 <quorem>:
 8008650:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008654:	6903      	ldr	r3, [r0, #16]
 8008656:	690c      	ldr	r4, [r1, #16]
 8008658:	4607      	mov	r7, r0
 800865a:	42a3      	cmp	r3, r4
 800865c:	f2c0 8082 	blt.w	8008764 <quorem+0x114>
 8008660:	3c01      	subs	r4, #1
 8008662:	f100 0514 	add.w	r5, r0, #20
 8008666:	f101 0814 	add.w	r8, r1, #20
 800866a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800866e:	9301      	str	r3, [sp, #4]
 8008670:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008674:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008678:	3301      	adds	r3, #1
 800867a:	429a      	cmp	r2, r3
 800867c:	fbb2 f6f3 	udiv	r6, r2, r3
 8008680:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008684:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008688:	d331      	bcc.n	80086ee <quorem+0x9e>
 800868a:	f04f 0e00 	mov.w	lr, #0
 800868e:	4640      	mov	r0, r8
 8008690:	46ac      	mov	ip, r5
 8008692:	46f2      	mov	sl, lr
 8008694:	f850 2b04 	ldr.w	r2, [r0], #4
 8008698:	b293      	uxth	r3, r2
 800869a:	fb06 e303 	mla	r3, r6, r3, lr
 800869e:	0c12      	lsrs	r2, r2, #16
 80086a0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80086a4:	b29b      	uxth	r3, r3
 80086a6:	fb06 e202 	mla	r2, r6, r2, lr
 80086aa:	ebaa 0303 	sub.w	r3, sl, r3
 80086ae:	f8dc a000 	ldr.w	sl, [ip]
 80086b2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80086b6:	fa1f fa8a 	uxth.w	sl, sl
 80086ba:	4453      	add	r3, sl
 80086bc:	f8dc a000 	ldr.w	sl, [ip]
 80086c0:	b292      	uxth	r2, r2
 80086c2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80086c6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80086ca:	b29b      	uxth	r3, r3
 80086cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80086d0:	4581      	cmp	r9, r0
 80086d2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80086d6:	f84c 3b04 	str.w	r3, [ip], #4
 80086da:	d2db      	bcs.n	8008694 <quorem+0x44>
 80086dc:	f855 300b 	ldr.w	r3, [r5, fp]
 80086e0:	b92b      	cbnz	r3, 80086ee <quorem+0x9e>
 80086e2:	9b01      	ldr	r3, [sp, #4]
 80086e4:	3b04      	subs	r3, #4
 80086e6:	429d      	cmp	r5, r3
 80086e8:	461a      	mov	r2, r3
 80086ea:	d32f      	bcc.n	800874c <quorem+0xfc>
 80086ec:	613c      	str	r4, [r7, #16]
 80086ee:	4638      	mov	r0, r7
 80086f0:	f001 fc94 	bl	800a01c <__mcmp>
 80086f4:	2800      	cmp	r0, #0
 80086f6:	db25      	blt.n	8008744 <quorem+0xf4>
 80086f8:	4628      	mov	r0, r5
 80086fa:	f04f 0c00 	mov.w	ip, #0
 80086fe:	3601      	adds	r6, #1
 8008700:	f858 1b04 	ldr.w	r1, [r8], #4
 8008704:	f8d0 e000 	ldr.w	lr, [r0]
 8008708:	b28b      	uxth	r3, r1
 800870a:	ebac 0303 	sub.w	r3, ip, r3
 800870e:	fa1f f28e 	uxth.w	r2, lr
 8008712:	4413      	add	r3, r2
 8008714:	0c0a      	lsrs	r2, r1, #16
 8008716:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800871a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800871e:	b29b      	uxth	r3, r3
 8008720:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008724:	45c1      	cmp	r9, r8
 8008726:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800872a:	f840 3b04 	str.w	r3, [r0], #4
 800872e:	d2e7      	bcs.n	8008700 <quorem+0xb0>
 8008730:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008734:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008738:	b922      	cbnz	r2, 8008744 <quorem+0xf4>
 800873a:	3b04      	subs	r3, #4
 800873c:	429d      	cmp	r5, r3
 800873e:	461a      	mov	r2, r3
 8008740:	d30a      	bcc.n	8008758 <quorem+0x108>
 8008742:	613c      	str	r4, [r7, #16]
 8008744:	4630      	mov	r0, r6
 8008746:	b003      	add	sp, #12
 8008748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800874c:	6812      	ldr	r2, [r2, #0]
 800874e:	3b04      	subs	r3, #4
 8008750:	2a00      	cmp	r2, #0
 8008752:	d1cb      	bne.n	80086ec <quorem+0x9c>
 8008754:	3c01      	subs	r4, #1
 8008756:	e7c6      	b.n	80086e6 <quorem+0x96>
 8008758:	6812      	ldr	r2, [r2, #0]
 800875a:	3b04      	subs	r3, #4
 800875c:	2a00      	cmp	r2, #0
 800875e:	d1f0      	bne.n	8008742 <quorem+0xf2>
 8008760:	3c01      	subs	r4, #1
 8008762:	e7eb      	b.n	800873c <quorem+0xec>
 8008764:	2000      	movs	r0, #0
 8008766:	e7ee      	b.n	8008746 <quorem+0xf6>

08008768 <_dtoa_r>:
 8008768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800876c:	4616      	mov	r6, r2
 800876e:	461f      	mov	r7, r3
 8008770:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008772:	b099      	sub	sp, #100	; 0x64
 8008774:	4605      	mov	r5, r0
 8008776:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800877a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800877e:	b974      	cbnz	r4, 800879e <_dtoa_r+0x36>
 8008780:	2010      	movs	r0, #16
 8008782:	f001 f95b 	bl	8009a3c <malloc>
 8008786:	4602      	mov	r2, r0
 8008788:	6268      	str	r0, [r5, #36]	; 0x24
 800878a:	b920      	cbnz	r0, 8008796 <_dtoa_r+0x2e>
 800878c:	21ea      	movs	r1, #234	; 0xea
 800878e:	4ba8      	ldr	r3, [pc, #672]	; (8008a30 <_dtoa_r+0x2c8>)
 8008790:	48a8      	ldr	r0, [pc, #672]	; (8008a34 <_dtoa_r+0x2cc>)
 8008792:	f7ff ff3f 	bl	8008614 <__assert_func>
 8008796:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800879a:	6004      	str	r4, [r0, #0]
 800879c:	60c4      	str	r4, [r0, #12]
 800879e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80087a0:	6819      	ldr	r1, [r3, #0]
 80087a2:	b151      	cbz	r1, 80087ba <_dtoa_r+0x52>
 80087a4:	685a      	ldr	r2, [r3, #4]
 80087a6:	2301      	movs	r3, #1
 80087a8:	4093      	lsls	r3, r2
 80087aa:	604a      	str	r2, [r1, #4]
 80087ac:	608b      	str	r3, [r1, #8]
 80087ae:	4628      	mov	r0, r5
 80087b0:	f001 f9ac 	bl	8009b0c <_Bfree>
 80087b4:	2200      	movs	r2, #0
 80087b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80087b8:	601a      	str	r2, [r3, #0]
 80087ba:	1e3b      	subs	r3, r7, #0
 80087bc:	bfaf      	iteee	ge
 80087be:	2300      	movge	r3, #0
 80087c0:	2201      	movlt	r2, #1
 80087c2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80087c6:	9305      	strlt	r3, [sp, #20]
 80087c8:	bfa8      	it	ge
 80087ca:	f8c8 3000 	strge.w	r3, [r8]
 80087ce:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80087d2:	4b99      	ldr	r3, [pc, #612]	; (8008a38 <_dtoa_r+0x2d0>)
 80087d4:	bfb8      	it	lt
 80087d6:	f8c8 2000 	strlt.w	r2, [r8]
 80087da:	ea33 0309 	bics.w	r3, r3, r9
 80087de:	d119      	bne.n	8008814 <_dtoa_r+0xac>
 80087e0:	f242 730f 	movw	r3, #9999	; 0x270f
 80087e4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80087e6:	6013      	str	r3, [r2, #0]
 80087e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80087ec:	4333      	orrs	r3, r6
 80087ee:	f000 857f 	beq.w	80092f0 <_dtoa_r+0xb88>
 80087f2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80087f4:	b953      	cbnz	r3, 800880c <_dtoa_r+0xa4>
 80087f6:	4b91      	ldr	r3, [pc, #580]	; (8008a3c <_dtoa_r+0x2d4>)
 80087f8:	e022      	b.n	8008840 <_dtoa_r+0xd8>
 80087fa:	4b91      	ldr	r3, [pc, #580]	; (8008a40 <_dtoa_r+0x2d8>)
 80087fc:	9303      	str	r3, [sp, #12]
 80087fe:	3308      	adds	r3, #8
 8008800:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008802:	6013      	str	r3, [r2, #0]
 8008804:	9803      	ldr	r0, [sp, #12]
 8008806:	b019      	add	sp, #100	; 0x64
 8008808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800880c:	4b8b      	ldr	r3, [pc, #556]	; (8008a3c <_dtoa_r+0x2d4>)
 800880e:	9303      	str	r3, [sp, #12]
 8008810:	3303      	adds	r3, #3
 8008812:	e7f5      	b.n	8008800 <_dtoa_r+0x98>
 8008814:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008818:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800881c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008820:	2200      	movs	r2, #0
 8008822:	2300      	movs	r3, #0
 8008824:	f7f8 f8ca 	bl	80009bc <__aeabi_dcmpeq>
 8008828:	4680      	mov	r8, r0
 800882a:	b158      	cbz	r0, 8008844 <_dtoa_r+0xdc>
 800882c:	2301      	movs	r3, #1
 800882e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008830:	6013      	str	r3, [r2, #0]
 8008832:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008834:	2b00      	cmp	r3, #0
 8008836:	f000 8558 	beq.w	80092ea <_dtoa_r+0xb82>
 800883a:	4882      	ldr	r0, [pc, #520]	; (8008a44 <_dtoa_r+0x2dc>)
 800883c:	6018      	str	r0, [r3, #0]
 800883e:	1e43      	subs	r3, r0, #1
 8008840:	9303      	str	r3, [sp, #12]
 8008842:	e7df      	b.n	8008804 <_dtoa_r+0x9c>
 8008844:	ab16      	add	r3, sp, #88	; 0x58
 8008846:	9301      	str	r3, [sp, #4]
 8008848:	ab17      	add	r3, sp, #92	; 0x5c
 800884a:	9300      	str	r3, [sp, #0]
 800884c:	4628      	mov	r0, r5
 800884e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008852:	f001 fd05 	bl	800a260 <__d2b>
 8008856:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800885a:	4683      	mov	fp, r0
 800885c:	2c00      	cmp	r4, #0
 800885e:	d07f      	beq.n	8008960 <_dtoa_r+0x1f8>
 8008860:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008864:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008866:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800886a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800886e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8008872:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8008876:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800887a:	2200      	movs	r2, #0
 800887c:	4b72      	ldr	r3, [pc, #456]	; (8008a48 <_dtoa_r+0x2e0>)
 800887e:	f7f7 fc7d 	bl	800017c <__aeabi_dsub>
 8008882:	a365      	add	r3, pc, #404	; (adr r3, 8008a18 <_dtoa_r+0x2b0>)
 8008884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008888:	f7f7 fe30 	bl	80004ec <__aeabi_dmul>
 800888c:	a364      	add	r3, pc, #400	; (adr r3, 8008a20 <_dtoa_r+0x2b8>)
 800888e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008892:	f7f7 fc75 	bl	8000180 <__adddf3>
 8008896:	4606      	mov	r6, r0
 8008898:	4620      	mov	r0, r4
 800889a:	460f      	mov	r7, r1
 800889c:	f7f7 fdbc 	bl	8000418 <__aeabi_i2d>
 80088a0:	a361      	add	r3, pc, #388	; (adr r3, 8008a28 <_dtoa_r+0x2c0>)
 80088a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088a6:	f7f7 fe21 	bl	80004ec <__aeabi_dmul>
 80088aa:	4602      	mov	r2, r0
 80088ac:	460b      	mov	r3, r1
 80088ae:	4630      	mov	r0, r6
 80088b0:	4639      	mov	r1, r7
 80088b2:	f7f7 fc65 	bl	8000180 <__adddf3>
 80088b6:	4606      	mov	r6, r0
 80088b8:	460f      	mov	r7, r1
 80088ba:	f7f8 f8c7 	bl	8000a4c <__aeabi_d2iz>
 80088be:	2200      	movs	r2, #0
 80088c0:	4682      	mov	sl, r0
 80088c2:	2300      	movs	r3, #0
 80088c4:	4630      	mov	r0, r6
 80088c6:	4639      	mov	r1, r7
 80088c8:	f7f8 f882 	bl	80009d0 <__aeabi_dcmplt>
 80088cc:	b148      	cbz	r0, 80088e2 <_dtoa_r+0x17a>
 80088ce:	4650      	mov	r0, sl
 80088d0:	f7f7 fda2 	bl	8000418 <__aeabi_i2d>
 80088d4:	4632      	mov	r2, r6
 80088d6:	463b      	mov	r3, r7
 80088d8:	f7f8 f870 	bl	80009bc <__aeabi_dcmpeq>
 80088dc:	b908      	cbnz	r0, 80088e2 <_dtoa_r+0x17a>
 80088de:	f10a 3aff 	add.w	sl, sl, #4294967295
 80088e2:	f1ba 0f16 	cmp.w	sl, #22
 80088e6:	d858      	bhi.n	800899a <_dtoa_r+0x232>
 80088e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80088ec:	4b57      	ldr	r3, [pc, #348]	; (8008a4c <_dtoa_r+0x2e4>)
 80088ee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80088f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088f6:	f7f8 f86b 	bl	80009d0 <__aeabi_dcmplt>
 80088fa:	2800      	cmp	r0, #0
 80088fc:	d04f      	beq.n	800899e <_dtoa_r+0x236>
 80088fe:	2300      	movs	r3, #0
 8008900:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008904:	930f      	str	r3, [sp, #60]	; 0x3c
 8008906:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008908:	1b1c      	subs	r4, r3, r4
 800890a:	1e63      	subs	r3, r4, #1
 800890c:	9309      	str	r3, [sp, #36]	; 0x24
 800890e:	bf49      	itett	mi
 8008910:	f1c4 0301 	rsbmi	r3, r4, #1
 8008914:	2300      	movpl	r3, #0
 8008916:	9306      	strmi	r3, [sp, #24]
 8008918:	2300      	movmi	r3, #0
 800891a:	bf54      	ite	pl
 800891c:	9306      	strpl	r3, [sp, #24]
 800891e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8008920:	f1ba 0f00 	cmp.w	sl, #0
 8008924:	db3d      	blt.n	80089a2 <_dtoa_r+0x23a>
 8008926:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008928:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800892c:	4453      	add	r3, sl
 800892e:	9309      	str	r3, [sp, #36]	; 0x24
 8008930:	2300      	movs	r3, #0
 8008932:	930a      	str	r3, [sp, #40]	; 0x28
 8008934:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008936:	2b09      	cmp	r3, #9
 8008938:	f200 808c 	bhi.w	8008a54 <_dtoa_r+0x2ec>
 800893c:	2b05      	cmp	r3, #5
 800893e:	bfc4      	itt	gt
 8008940:	3b04      	subgt	r3, #4
 8008942:	9322      	strgt	r3, [sp, #136]	; 0x88
 8008944:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008946:	bfc8      	it	gt
 8008948:	2400      	movgt	r4, #0
 800894a:	f1a3 0302 	sub.w	r3, r3, #2
 800894e:	bfd8      	it	le
 8008950:	2401      	movle	r4, #1
 8008952:	2b03      	cmp	r3, #3
 8008954:	f200 808a 	bhi.w	8008a6c <_dtoa_r+0x304>
 8008958:	e8df f003 	tbb	[pc, r3]
 800895c:	5b4d4f2d 	.word	0x5b4d4f2d
 8008960:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8008964:	441c      	add	r4, r3
 8008966:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800896a:	2b20      	cmp	r3, #32
 800896c:	bfc3      	ittte	gt
 800896e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008972:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8008976:	fa09 f303 	lslgt.w	r3, r9, r3
 800897a:	f1c3 0320 	rsble	r3, r3, #32
 800897e:	bfc6      	itte	gt
 8008980:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008984:	4318      	orrgt	r0, r3
 8008986:	fa06 f003 	lslle.w	r0, r6, r3
 800898a:	f7f7 fd35 	bl	80003f8 <__aeabi_ui2d>
 800898e:	2301      	movs	r3, #1
 8008990:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8008994:	3c01      	subs	r4, #1
 8008996:	9313      	str	r3, [sp, #76]	; 0x4c
 8008998:	e76f      	b.n	800887a <_dtoa_r+0x112>
 800899a:	2301      	movs	r3, #1
 800899c:	e7b2      	b.n	8008904 <_dtoa_r+0x19c>
 800899e:	900f      	str	r0, [sp, #60]	; 0x3c
 80089a0:	e7b1      	b.n	8008906 <_dtoa_r+0x19e>
 80089a2:	9b06      	ldr	r3, [sp, #24]
 80089a4:	eba3 030a 	sub.w	r3, r3, sl
 80089a8:	9306      	str	r3, [sp, #24]
 80089aa:	f1ca 0300 	rsb	r3, sl, #0
 80089ae:	930a      	str	r3, [sp, #40]	; 0x28
 80089b0:	2300      	movs	r3, #0
 80089b2:	930e      	str	r3, [sp, #56]	; 0x38
 80089b4:	e7be      	b.n	8008934 <_dtoa_r+0x1cc>
 80089b6:	2300      	movs	r3, #0
 80089b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80089ba:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80089bc:	2b00      	cmp	r3, #0
 80089be:	dc58      	bgt.n	8008a72 <_dtoa_r+0x30a>
 80089c0:	f04f 0901 	mov.w	r9, #1
 80089c4:	464b      	mov	r3, r9
 80089c6:	f8cd 9020 	str.w	r9, [sp, #32]
 80089ca:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 80089ce:	2200      	movs	r2, #0
 80089d0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80089d2:	6042      	str	r2, [r0, #4]
 80089d4:	2204      	movs	r2, #4
 80089d6:	f102 0614 	add.w	r6, r2, #20
 80089da:	429e      	cmp	r6, r3
 80089dc:	6841      	ldr	r1, [r0, #4]
 80089de:	d94e      	bls.n	8008a7e <_dtoa_r+0x316>
 80089e0:	4628      	mov	r0, r5
 80089e2:	f001 f853 	bl	8009a8c <_Balloc>
 80089e6:	9003      	str	r0, [sp, #12]
 80089e8:	2800      	cmp	r0, #0
 80089ea:	d14c      	bne.n	8008a86 <_dtoa_r+0x31e>
 80089ec:	4602      	mov	r2, r0
 80089ee:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80089f2:	4b17      	ldr	r3, [pc, #92]	; (8008a50 <_dtoa_r+0x2e8>)
 80089f4:	e6cc      	b.n	8008790 <_dtoa_r+0x28>
 80089f6:	2301      	movs	r3, #1
 80089f8:	e7de      	b.n	80089b8 <_dtoa_r+0x250>
 80089fa:	2300      	movs	r3, #0
 80089fc:	930b      	str	r3, [sp, #44]	; 0x2c
 80089fe:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008a00:	eb0a 0903 	add.w	r9, sl, r3
 8008a04:	f109 0301 	add.w	r3, r9, #1
 8008a08:	2b01      	cmp	r3, #1
 8008a0a:	9308      	str	r3, [sp, #32]
 8008a0c:	bfb8      	it	lt
 8008a0e:	2301      	movlt	r3, #1
 8008a10:	e7dd      	b.n	80089ce <_dtoa_r+0x266>
 8008a12:	2301      	movs	r3, #1
 8008a14:	e7f2      	b.n	80089fc <_dtoa_r+0x294>
 8008a16:	bf00      	nop
 8008a18:	636f4361 	.word	0x636f4361
 8008a1c:	3fd287a7 	.word	0x3fd287a7
 8008a20:	8b60c8b3 	.word	0x8b60c8b3
 8008a24:	3fc68a28 	.word	0x3fc68a28
 8008a28:	509f79fb 	.word	0x509f79fb
 8008a2c:	3fd34413 	.word	0x3fd34413
 8008a30:	0800b828 	.word	0x0800b828
 8008a34:	0800b9e6 	.word	0x0800b9e6
 8008a38:	7ff00000 	.word	0x7ff00000
 8008a3c:	0800b9e2 	.word	0x0800b9e2
 8008a40:	0800b9d9 	.word	0x0800b9d9
 8008a44:	0800b7b1 	.word	0x0800b7b1
 8008a48:	3ff80000 	.word	0x3ff80000
 8008a4c:	0800bb50 	.word	0x0800bb50
 8008a50:	0800ba41 	.word	0x0800ba41
 8008a54:	2401      	movs	r4, #1
 8008a56:	2300      	movs	r3, #0
 8008a58:	940b      	str	r4, [sp, #44]	; 0x2c
 8008a5a:	9322      	str	r3, [sp, #136]	; 0x88
 8008a5c:	f04f 39ff 	mov.w	r9, #4294967295
 8008a60:	2200      	movs	r2, #0
 8008a62:	2312      	movs	r3, #18
 8008a64:	f8cd 9020 	str.w	r9, [sp, #32]
 8008a68:	9223      	str	r2, [sp, #140]	; 0x8c
 8008a6a:	e7b0      	b.n	80089ce <_dtoa_r+0x266>
 8008a6c:	2301      	movs	r3, #1
 8008a6e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008a70:	e7f4      	b.n	8008a5c <_dtoa_r+0x2f4>
 8008a72:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8008a76:	464b      	mov	r3, r9
 8008a78:	f8cd 9020 	str.w	r9, [sp, #32]
 8008a7c:	e7a7      	b.n	80089ce <_dtoa_r+0x266>
 8008a7e:	3101      	adds	r1, #1
 8008a80:	6041      	str	r1, [r0, #4]
 8008a82:	0052      	lsls	r2, r2, #1
 8008a84:	e7a7      	b.n	80089d6 <_dtoa_r+0x26e>
 8008a86:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008a88:	9a03      	ldr	r2, [sp, #12]
 8008a8a:	601a      	str	r2, [r3, #0]
 8008a8c:	9b08      	ldr	r3, [sp, #32]
 8008a8e:	2b0e      	cmp	r3, #14
 8008a90:	f200 80a8 	bhi.w	8008be4 <_dtoa_r+0x47c>
 8008a94:	2c00      	cmp	r4, #0
 8008a96:	f000 80a5 	beq.w	8008be4 <_dtoa_r+0x47c>
 8008a9a:	f1ba 0f00 	cmp.w	sl, #0
 8008a9e:	dd34      	ble.n	8008b0a <_dtoa_r+0x3a2>
 8008aa0:	4a9a      	ldr	r2, [pc, #616]	; (8008d0c <_dtoa_r+0x5a4>)
 8008aa2:	f00a 030f 	and.w	r3, sl, #15
 8008aa6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008aaa:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008aae:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008ab2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008ab6:	ea4f 142a 	mov.w	r4, sl, asr #4
 8008aba:	d016      	beq.n	8008aea <_dtoa_r+0x382>
 8008abc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008ac0:	4b93      	ldr	r3, [pc, #588]	; (8008d10 <_dtoa_r+0x5a8>)
 8008ac2:	2703      	movs	r7, #3
 8008ac4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008ac8:	f7f7 fe3a 	bl	8000740 <__aeabi_ddiv>
 8008acc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008ad0:	f004 040f 	and.w	r4, r4, #15
 8008ad4:	4e8e      	ldr	r6, [pc, #568]	; (8008d10 <_dtoa_r+0x5a8>)
 8008ad6:	b954      	cbnz	r4, 8008aee <_dtoa_r+0x386>
 8008ad8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008adc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008ae0:	f7f7 fe2e 	bl	8000740 <__aeabi_ddiv>
 8008ae4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008ae8:	e029      	b.n	8008b3e <_dtoa_r+0x3d6>
 8008aea:	2702      	movs	r7, #2
 8008aec:	e7f2      	b.n	8008ad4 <_dtoa_r+0x36c>
 8008aee:	07e1      	lsls	r1, r4, #31
 8008af0:	d508      	bpl.n	8008b04 <_dtoa_r+0x39c>
 8008af2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008af6:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008afa:	f7f7 fcf7 	bl	80004ec <__aeabi_dmul>
 8008afe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008b02:	3701      	adds	r7, #1
 8008b04:	1064      	asrs	r4, r4, #1
 8008b06:	3608      	adds	r6, #8
 8008b08:	e7e5      	b.n	8008ad6 <_dtoa_r+0x36e>
 8008b0a:	f000 80a5 	beq.w	8008c58 <_dtoa_r+0x4f0>
 8008b0e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008b12:	f1ca 0400 	rsb	r4, sl, #0
 8008b16:	4b7d      	ldr	r3, [pc, #500]	; (8008d0c <_dtoa_r+0x5a4>)
 8008b18:	f004 020f 	and.w	r2, r4, #15
 8008b1c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b24:	f7f7 fce2 	bl	80004ec <__aeabi_dmul>
 8008b28:	2702      	movs	r7, #2
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008b30:	4e77      	ldr	r6, [pc, #476]	; (8008d10 <_dtoa_r+0x5a8>)
 8008b32:	1124      	asrs	r4, r4, #4
 8008b34:	2c00      	cmp	r4, #0
 8008b36:	f040 8084 	bne.w	8008c42 <_dtoa_r+0x4da>
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d1d2      	bne.n	8008ae4 <_dtoa_r+0x37c>
 8008b3e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	f000 808b 	beq.w	8008c5c <_dtoa_r+0x4f4>
 8008b46:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008b4a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008b4e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008b52:	2200      	movs	r2, #0
 8008b54:	4b6f      	ldr	r3, [pc, #444]	; (8008d14 <_dtoa_r+0x5ac>)
 8008b56:	f7f7 ff3b 	bl	80009d0 <__aeabi_dcmplt>
 8008b5a:	2800      	cmp	r0, #0
 8008b5c:	d07e      	beq.n	8008c5c <_dtoa_r+0x4f4>
 8008b5e:	9b08      	ldr	r3, [sp, #32]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d07b      	beq.n	8008c5c <_dtoa_r+0x4f4>
 8008b64:	f1b9 0f00 	cmp.w	r9, #0
 8008b68:	dd38      	ble.n	8008bdc <_dtoa_r+0x474>
 8008b6a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008b6e:	2200      	movs	r2, #0
 8008b70:	4b69      	ldr	r3, [pc, #420]	; (8008d18 <_dtoa_r+0x5b0>)
 8008b72:	f7f7 fcbb 	bl	80004ec <__aeabi_dmul>
 8008b76:	464c      	mov	r4, r9
 8008b78:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008b7c:	f10a 38ff 	add.w	r8, sl, #4294967295
 8008b80:	3701      	adds	r7, #1
 8008b82:	4638      	mov	r0, r7
 8008b84:	f7f7 fc48 	bl	8000418 <__aeabi_i2d>
 8008b88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b8c:	f7f7 fcae 	bl	80004ec <__aeabi_dmul>
 8008b90:	2200      	movs	r2, #0
 8008b92:	4b62      	ldr	r3, [pc, #392]	; (8008d1c <_dtoa_r+0x5b4>)
 8008b94:	f7f7 faf4 	bl	8000180 <__adddf3>
 8008b98:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8008b9c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008ba0:	9611      	str	r6, [sp, #68]	; 0x44
 8008ba2:	2c00      	cmp	r4, #0
 8008ba4:	d15d      	bne.n	8008c62 <_dtoa_r+0x4fa>
 8008ba6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008baa:	2200      	movs	r2, #0
 8008bac:	4b5c      	ldr	r3, [pc, #368]	; (8008d20 <_dtoa_r+0x5b8>)
 8008bae:	f7f7 fae5 	bl	800017c <__aeabi_dsub>
 8008bb2:	4602      	mov	r2, r0
 8008bb4:	460b      	mov	r3, r1
 8008bb6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008bba:	4633      	mov	r3, r6
 8008bbc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008bbe:	f7f7 ff25 	bl	8000a0c <__aeabi_dcmpgt>
 8008bc2:	2800      	cmp	r0, #0
 8008bc4:	f040 829c 	bne.w	8009100 <_dtoa_r+0x998>
 8008bc8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008bcc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008bce:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008bd2:	f7f7 fefd 	bl	80009d0 <__aeabi_dcmplt>
 8008bd6:	2800      	cmp	r0, #0
 8008bd8:	f040 8290 	bne.w	80090fc <_dtoa_r+0x994>
 8008bdc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8008be0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008be4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	f2c0 8152 	blt.w	8008e90 <_dtoa_r+0x728>
 8008bec:	f1ba 0f0e 	cmp.w	sl, #14
 8008bf0:	f300 814e 	bgt.w	8008e90 <_dtoa_r+0x728>
 8008bf4:	4b45      	ldr	r3, [pc, #276]	; (8008d0c <_dtoa_r+0x5a4>)
 8008bf6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008bfa:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008bfe:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8008c02:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	f280 80db 	bge.w	8008dc0 <_dtoa_r+0x658>
 8008c0a:	9b08      	ldr	r3, [sp, #32]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	f300 80d7 	bgt.w	8008dc0 <_dtoa_r+0x658>
 8008c12:	f040 8272 	bne.w	80090fa <_dtoa_r+0x992>
 8008c16:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	4b40      	ldr	r3, [pc, #256]	; (8008d20 <_dtoa_r+0x5b8>)
 8008c1e:	f7f7 fc65 	bl	80004ec <__aeabi_dmul>
 8008c22:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008c26:	f7f7 fee7 	bl	80009f8 <__aeabi_dcmpge>
 8008c2a:	9c08      	ldr	r4, [sp, #32]
 8008c2c:	4626      	mov	r6, r4
 8008c2e:	2800      	cmp	r0, #0
 8008c30:	f040 8248 	bne.w	80090c4 <_dtoa_r+0x95c>
 8008c34:	2331      	movs	r3, #49	; 0x31
 8008c36:	9f03      	ldr	r7, [sp, #12]
 8008c38:	f10a 0a01 	add.w	sl, sl, #1
 8008c3c:	f807 3b01 	strb.w	r3, [r7], #1
 8008c40:	e244      	b.n	80090cc <_dtoa_r+0x964>
 8008c42:	07e2      	lsls	r2, r4, #31
 8008c44:	d505      	bpl.n	8008c52 <_dtoa_r+0x4ea>
 8008c46:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008c4a:	f7f7 fc4f 	bl	80004ec <__aeabi_dmul>
 8008c4e:	2301      	movs	r3, #1
 8008c50:	3701      	adds	r7, #1
 8008c52:	1064      	asrs	r4, r4, #1
 8008c54:	3608      	adds	r6, #8
 8008c56:	e76d      	b.n	8008b34 <_dtoa_r+0x3cc>
 8008c58:	2702      	movs	r7, #2
 8008c5a:	e770      	b.n	8008b3e <_dtoa_r+0x3d6>
 8008c5c:	46d0      	mov	r8, sl
 8008c5e:	9c08      	ldr	r4, [sp, #32]
 8008c60:	e78f      	b.n	8008b82 <_dtoa_r+0x41a>
 8008c62:	9903      	ldr	r1, [sp, #12]
 8008c64:	4b29      	ldr	r3, [pc, #164]	; (8008d0c <_dtoa_r+0x5a4>)
 8008c66:	4421      	add	r1, r4
 8008c68:	9112      	str	r1, [sp, #72]	; 0x48
 8008c6a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008c6c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008c70:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8008c74:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008c78:	2900      	cmp	r1, #0
 8008c7a:	d055      	beq.n	8008d28 <_dtoa_r+0x5c0>
 8008c7c:	2000      	movs	r0, #0
 8008c7e:	4929      	ldr	r1, [pc, #164]	; (8008d24 <_dtoa_r+0x5bc>)
 8008c80:	f7f7 fd5e 	bl	8000740 <__aeabi_ddiv>
 8008c84:	463b      	mov	r3, r7
 8008c86:	4632      	mov	r2, r6
 8008c88:	f7f7 fa78 	bl	800017c <__aeabi_dsub>
 8008c8c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008c90:	9f03      	ldr	r7, [sp, #12]
 8008c92:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008c96:	f7f7 fed9 	bl	8000a4c <__aeabi_d2iz>
 8008c9a:	4604      	mov	r4, r0
 8008c9c:	f7f7 fbbc 	bl	8000418 <__aeabi_i2d>
 8008ca0:	4602      	mov	r2, r0
 8008ca2:	460b      	mov	r3, r1
 8008ca4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008ca8:	f7f7 fa68 	bl	800017c <__aeabi_dsub>
 8008cac:	4602      	mov	r2, r0
 8008cae:	460b      	mov	r3, r1
 8008cb0:	3430      	adds	r4, #48	; 0x30
 8008cb2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008cb6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008cba:	f807 4b01 	strb.w	r4, [r7], #1
 8008cbe:	f7f7 fe87 	bl	80009d0 <__aeabi_dcmplt>
 8008cc2:	2800      	cmp	r0, #0
 8008cc4:	d174      	bne.n	8008db0 <_dtoa_r+0x648>
 8008cc6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008cca:	2000      	movs	r0, #0
 8008ccc:	4911      	ldr	r1, [pc, #68]	; (8008d14 <_dtoa_r+0x5ac>)
 8008cce:	f7f7 fa55 	bl	800017c <__aeabi_dsub>
 8008cd2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008cd6:	f7f7 fe7b 	bl	80009d0 <__aeabi_dcmplt>
 8008cda:	2800      	cmp	r0, #0
 8008cdc:	f040 80b7 	bne.w	8008e4e <_dtoa_r+0x6e6>
 8008ce0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008ce2:	429f      	cmp	r7, r3
 8008ce4:	f43f af7a 	beq.w	8008bdc <_dtoa_r+0x474>
 8008ce8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008cec:	2200      	movs	r2, #0
 8008cee:	4b0a      	ldr	r3, [pc, #40]	; (8008d18 <_dtoa_r+0x5b0>)
 8008cf0:	f7f7 fbfc 	bl	80004ec <__aeabi_dmul>
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008cfa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008cfe:	4b06      	ldr	r3, [pc, #24]	; (8008d18 <_dtoa_r+0x5b0>)
 8008d00:	f7f7 fbf4 	bl	80004ec <__aeabi_dmul>
 8008d04:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008d08:	e7c3      	b.n	8008c92 <_dtoa_r+0x52a>
 8008d0a:	bf00      	nop
 8008d0c:	0800bb50 	.word	0x0800bb50
 8008d10:	0800bb28 	.word	0x0800bb28
 8008d14:	3ff00000 	.word	0x3ff00000
 8008d18:	40240000 	.word	0x40240000
 8008d1c:	401c0000 	.word	0x401c0000
 8008d20:	40140000 	.word	0x40140000
 8008d24:	3fe00000 	.word	0x3fe00000
 8008d28:	4630      	mov	r0, r6
 8008d2a:	4639      	mov	r1, r7
 8008d2c:	f7f7 fbde 	bl	80004ec <__aeabi_dmul>
 8008d30:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008d32:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008d36:	9c03      	ldr	r4, [sp, #12]
 8008d38:	9314      	str	r3, [sp, #80]	; 0x50
 8008d3a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008d3e:	f7f7 fe85 	bl	8000a4c <__aeabi_d2iz>
 8008d42:	9015      	str	r0, [sp, #84]	; 0x54
 8008d44:	f7f7 fb68 	bl	8000418 <__aeabi_i2d>
 8008d48:	4602      	mov	r2, r0
 8008d4a:	460b      	mov	r3, r1
 8008d4c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008d50:	f7f7 fa14 	bl	800017c <__aeabi_dsub>
 8008d54:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008d56:	4606      	mov	r6, r0
 8008d58:	3330      	adds	r3, #48	; 0x30
 8008d5a:	f804 3b01 	strb.w	r3, [r4], #1
 8008d5e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008d60:	460f      	mov	r7, r1
 8008d62:	429c      	cmp	r4, r3
 8008d64:	f04f 0200 	mov.w	r2, #0
 8008d68:	d124      	bne.n	8008db4 <_dtoa_r+0x64c>
 8008d6a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008d6e:	4bb0      	ldr	r3, [pc, #704]	; (8009030 <_dtoa_r+0x8c8>)
 8008d70:	f7f7 fa06 	bl	8000180 <__adddf3>
 8008d74:	4602      	mov	r2, r0
 8008d76:	460b      	mov	r3, r1
 8008d78:	4630      	mov	r0, r6
 8008d7a:	4639      	mov	r1, r7
 8008d7c:	f7f7 fe46 	bl	8000a0c <__aeabi_dcmpgt>
 8008d80:	2800      	cmp	r0, #0
 8008d82:	d163      	bne.n	8008e4c <_dtoa_r+0x6e4>
 8008d84:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008d88:	2000      	movs	r0, #0
 8008d8a:	49a9      	ldr	r1, [pc, #676]	; (8009030 <_dtoa_r+0x8c8>)
 8008d8c:	f7f7 f9f6 	bl	800017c <__aeabi_dsub>
 8008d90:	4602      	mov	r2, r0
 8008d92:	460b      	mov	r3, r1
 8008d94:	4630      	mov	r0, r6
 8008d96:	4639      	mov	r1, r7
 8008d98:	f7f7 fe1a 	bl	80009d0 <__aeabi_dcmplt>
 8008d9c:	2800      	cmp	r0, #0
 8008d9e:	f43f af1d 	beq.w	8008bdc <_dtoa_r+0x474>
 8008da2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8008da4:	1e7b      	subs	r3, r7, #1
 8008da6:	9314      	str	r3, [sp, #80]	; 0x50
 8008da8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8008dac:	2b30      	cmp	r3, #48	; 0x30
 8008dae:	d0f8      	beq.n	8008da2 <_dtoa_r+0x63a>
 8008db0:	46c2      	mov	sl, r8
 8008db2:	e03b      	b.n	8008e2c <_dtoa_r+0x6c4>
 8008db4:	4b9f      	ldr	r3, [pc, #636]	; (8009034 <_dtoa_r+0x8cc>)
 8008db6:	f7f7 fb99 	bl	80004ec <__aeabi_dmul>
 8008dba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008dbe:	e7bc      	b.n	8008d3a <_dtoa_r+0x5d2>
 8008dc0:	9f03      	ldr	r7, [sp, #12]
 8008dc2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8008dc6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008dca:	4640      	mov	r0, r8
 8008dcc:	4649      	mov	r1, r9
 8008dce:	f7f7 fcb7 	bl	8000740 <__aeabi_ddiv>
 8008dd2:	f7f7 fe3b 	bl	8000a4c <__aeabi_d2iz>
 8008dd6:	4604      	mov	r4, r0
 8008dd8:	f7f7 fb1e 	bl	8000418 <__aeabi_i2d>
 8008ddc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008de0:	f7f7 fb84 	bl	80004ec <__aeabi_dmul>
 8008de4:	4602      	mov	r2, r0
 8008de6:	460b      	mov	r3, r1
 8008de8:	4640      	mov	r0, r8
 8008dea:	4649      	mov	r1, r9
 8008dec:	f7f7 f9c6 	bl	800017c <__aeabi_dsub>
 8008df0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8008df4:	f807 6b01 	strb.w	r6, [r7], #1
 8008df8:	9e03      	ldr	r6, [sp, #12]
 8008dfa:	f8dd c020 	ldr.w	ip, [sp, #32]
 8008dfe:	1bbe      	subs	r6, r7, r6
 8008e00:	45b4      	cmp	ip, r6
 8008e02:	4602      	mov	r2, r0
 8008e04:	460b      	mov	r3, r1
 8008e06:	d136      	bne.n	8008e76 <_dtoa_r+0x70e>
 8008e08:	f7f7 f9ba 	bl	8000180 <__adddf3>
 8008e0c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008e10:	4680      	mov	r8, r0
 8008e12:	4689      	mov	r9, r1
 8008e14:	f7f7 fdfa 	bl	8000a0c <__aeabi_dcmpgt>
 8008e18:	bb58      	cbnz	r0, 8008e72 <_dtoa_r+0x70a>
 8008e1a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008e1e:	4640      	mov	r0, r8
 8008e20:	4649      	mov	r1, r9
 8008e22:	f7f7 fdcb 	bl	80009bc <__aeabi_dcmpeq>
 8008e26:	b108      	cbz	r0, 8008e2c <_dtoa_r+0x6c4>
 8008e28:	07e1      	lsls	r1, r4, #31
 8008e2a:	d422      	bmi.n	8008e72 <_dtoa_r+0x70a>
 8008e2c:	4628      	mov	r0, r5
 8008e2e:	4659      	mov	r1, fp
 8008e30:	f000 fe6c 	bl	8009b0c <_Bfree>
 8008e34:	2300      	movs	r3, #0
 8008e36:	703b      	strb	r3, [r7, #0]
 8008e38:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008e3a:	f10a 0001 	add.w	r0, sl, #1
 8008e3e:	6018      	str	r0, [r3, #0]
 8008e40:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	f43f acde 	beq.w	8008804 <_dtoa_r+0x9c>
 8008e48:	601f      	str	r7, [r3, #0]
 8008e4a:	e4db      	b.n	8008804 <_dtoa_r+0x9c>
 8008e4c:	4627      	mov	r7, r4
 8008e4e:	463b      	mov	r3, r7
 8008e50:	461f      	mov	r7, r3
 8008e52:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008e56:	2a39      	cmp	r2, #57	; 0x39
 8008e58:	d107      	bne.n	8008e6a <_dtoa_r+0x702>
 8008e5a:	9a03      	ldr	r2, [sp, #12]
 8008e5c:	429a      	cmp	r2, r3
 8008e5e:	d1f7      	bne.n	8008e50 <_dtoa_r+0x6e8>
 8008e60:	2230      	movs	r2, #48	; 0x30
 8008e62:	9903      	ldr	r1, [sp, #12]
 8008e64:	f108 0801 	add.w	r8, r8, #1
 8008e68:	700a      	strb	r2, [r1, #0]
 8008e6a:	781a      	ldrb	r2, [r3, #0]
 8008e6c:	3201      	adds	r2, #1
 8008e6e:	701a      	strb	r2, [r3, #0]
 8008e70:	e79e      	b.n	8008db0 <_dtoa_r+0x648>
 8008e72:	46d0      	mov	r8, sl
 8008e74:	e7eb      	b.n	8008e4e <_dtoa_r+0x6e6>
 8008e76:	2200      	movs	r2, #0
 8008e78:	4b6e      	ldr	r3, [pc, #440]	; (8009034 <_dtoa_r+0x8cc>)
 8008e7a:	f7f7 fb37 	bl	80004ec <__aeabi_dmul>
 8008e7e:	2200      	movs	r2, #0
 8008e80:	2300      	movs	r3, #0
 8008e82:	4680      	mov	r8, r0
 8008e84:	4689      	mov	r9, r1
 8008e86:	f7f7 fd99 	bl	80009bc <__aeabi_dcmpeq>
 8008e8a:	2800      	cmp	r0, #0
 8008e8c:	d09b      	beq.n	8008dc6 <_dtoa_r+0x65e>
 8008e8e:	e7cd      	b.n	8008e2c <_dtoa_r+0x6c4>
 8008e90:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008e92:	2a00      	cmp	r2, #0
 8008e94:	f000 80d0 	beq.w	8009038 <_dtoa_r+0x8d0>
 8008e98:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008e9a:	2a01      	cmp	r2, #1
 8008e9c:	f300 80ae 	bgt.w	8008ffc <_dtoa_r+0x894>
 8008ea0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008ea2:	2a00      	cmp	r2, #0
 8008ea4:	f000 80a6 	beq.w	8008ff4 <_dtoa_r+0x88c>
 8008ea8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008eac:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008eae:	9f06      	ldr	r7, [sp, #24]
 8008eb0:	9a06      	ldr	r2, [sp, #24]
 8008eb2:	2101      	movs	r1, #1
 8008eb4:	441a      	add	r2, r3
 8008eb6:	9206      	str	r2, [sp, #24]
 8008eb8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008eba:	4628      	mov	r0, r5
 8008ebc:	441a      	add	r2, r3
 8008ebe:	9209      	str	r2, [sp, #36]	; 0x24
 8008ec0:	f000 ff24 	bl	8009d0c <__i2b>
 8008ec4:	4606      	mov	r6, r0
 8008ec6:	2f00      	cmp	r7, #0
 8008ec8:	dd0c      	ble.n	8008ee4 <_dtoa_r+0x77c>
 8008eca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	dd09      	ble.n	8008ee4 <_dtoa_r+0x77c>
 8008ed0:	42bb      	cmp	r3, r7
 8008ed2:	bfa8      	it	ge
 8008ed4:	463b      	movge	r3, r7
 8008ed6:	9a06      	ldr	r2, [sp, #24]
 8008ed8:	1aff      	subs	r7, r7, r3
 8008eda:	1ad2      	subs	r2, r2, r3
 8008edc:	9206      	str	r2, [sp, #24]
 8008ede:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ee0:	1ad3      	subs	r3, r2, r3
 8008ee2:	9309      	str	r3, [sp, #36]	; 0x24
 8008ee4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ee6:	b1f3      	cbz	r3, 8008f26 <_dtoa_r+0x7be>
 8008ee8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	f000 80a8 	beq.w	8009040 <_dtoa_r+0x8d8>
 8008ef0:	2c00      	cmp	r4, #0
 8008ef2:	dd10      	ble.n	8008f16 <_dtoa_r+0x7ae>
 8008ef4:	4631      	mov	r1, r6
 8008ef6:	4622      	mov	r2, r4
 8008ef8:	4628      	mov	r0, r5
 8008efa:	f000 ffc5 	bl	8009e88 <__pow5mult>
 8008efe:	465a      	mov	r2, fp
 8008f00:	4601      	mov	r1, r0
 8008f02:	4606      	mov	r6, r0
 8008f04:	4628      	mov	r0, r5
 8008f06:	f000 ff17 	bl	8009d38 <__multiply>
 8008f0a:	4680      	mov	r8, r0
 8008f0c:	4659      	mov	r1, fp
 8008f0e:	4628      	mov	r0, r5
 8008f10:	f000 fdfc 	bl	8009b0c <_Bfree>
 8008f14:	46c3      	mov	fp, r8
 8008f16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f18:	1b1a      	subs	r2, r3, r4
 8008f1a:	d004      	beq.n	8008f26 <_dtoa_r+0x7be>
 8008f1c:	4659      	mov	r1, fp
 8008f1e:	4628      	mov	r0, r5
 8008f20:	f000 ffb2 	bl	8009e88 <__pow5mult>
 8008f24:	4683      	mov	fp, r0
 8008f26:	2101      	movs	r1, #1
 8008f28:	4628      	mov	r0, r5
 8008f2a:	f000 feef 	bl	8009d0c <__i2b>
 8008f2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008f30:	4604      	mov	r4, r0
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	f340 8086 	ble.w	8009044 <_dtoa_r+0x8dc>
 8008f38:	461a      	mov	r2, r3
 8008f3a:	4601      	mov	r1, r0
 8008f3c:	4628      	mov	r0, r5
 8008f3e:	f000 ffa3 	bl	8009e88 <__pow5mult>
 8008f42:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008f44:	4604      	mov	r4, r0
 8008f46:	2b01      	cmp	r3, #1
 8008f48:	dd7f      	ble.n	800904a <_dtoa_r+0x8e2>
 8008f4a:	f04f 0800 	mov.w	r8, #0
 8008f4e:	6923      	ldr	r3, [r4, #16]
 8008f50:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008f54:	6918      	ldr	r0, [r3, #16]
 8008f56:	f000 fe8b 	bl	8009c70 <__hi0bits>
 8008f5a:	f1c0 0020 	rsb	r0, r0, #32
 8008f5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f60:	4418      	add	r0, r3
 8008f62:	f010 001f 	ands.w	r0, r0, #31
 8008f66:	f000 8092 	beq.w	800908e <_dtoa_r+0x926>
 8008f6a:	f1c0 0320 	rsb	r3, r0, #32
 8008f6e:	2b04      	cmp	r3, #4
 8008f70:	f340 808a 	ble.w	8009088 <_dtoa_r+0x920>
 8008f74:	f1c0 001c 	rsb	r0, r0, #28
 8008f78:	9b06      	ldr	r3, [sp, #24]
 8008f7a:	4407      	add	r7, r0
 8008f7c:	4403      	add	r3, r0
 8008f7e:	9306      	str	r3, [sp, #24]
 8008f80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f82:	4403      	add	r3, r0
 8008f84:	9309      	str	r3, [sp, #36]	; 0x24
 8008f86:	9b06      	ldr	r3, [sp, #24]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	dd05      	ble.n	8008f98 <_dtoa_r+0x830>
 8008f8c:	4659      	mov	r1, fp
 8008f8e:	461a      	mov	r2, r3
 8008f90:	4628      	mov	r0, r5
 8008f92:	f000 ffd3 	bl	8009f3c <__lshift>
 8008f96:	4683      	mov	fp, r0
 8008f98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	dd05      	ble.n	8008faa <_dtoa_r+0x842>
 8008f9e:	4621      	mov	r1, r4
 8008fa0:	461a      	mov	r2, r3
 8008fa2:	4628      	mov	r0, r5
 8008fa4:	f000 ffca 	bl	8009f3c <__lshift>
 8008fa8:	4604      	mov	r4, r0
 8008faa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d070      	beq.n	8009092 <_dtoa_r+0x92a>
 8008fb0:	4621      	mov	r1, r4
 8008fb2:	4658      	mov	r0, fp
 8008fb4:	f001 f832 	bl	800a01c <__mcmp>
 8008fb8:	2800      	cmp	r0, #0
 8008fba:	da6a      	bge.n	8009092 <_dtoa_r+0x92a>
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	4659      	mov	r1, fp
 8008fc0:	220a      	movs	r2, #10
 8008fc2:	4628      	mov	r0, r5
 8008fc4:	f000 fdc4 	bl	8009b50 <__multadd>
 8008fc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008fca:	4683      	mov	fp, r0
 8008fcc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	f000 8194 	beq.w	80092fe <_dtoa_r+0xb96>
 8008fd6:	4631      	mov	r1, r6
 8008fd8:	2300      	movs	r3, #0
 8008fda:	220a      	movs	r2, #10
 8008fdc:	4628      	mov	r0, r5
 8008fde:	f000 fdb7 	bl	8009b50 <__multadd>
 8008fe2:	f1b9 0f00 	cmp.w	r9, #0
 8008fe6:	4606      	mov	r6, r0
 8008fe8:	f300 8093 	bgt.w	8009112 <_dtoa_r+0x9aa>
 8008fec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008fee:	2b02      	cmp	r3, #2
 8008ff0:	dc57      	bgt.n	80090a2 <_dtoa_r+0x93a>
 8008ff2:	e08e      	b.n	8009112 <_dtoa_r+0x9aa>
 8008ff4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008ff6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008ffa:	e757      	b.n	8008eac <_dtoa_r+0x744>
 8008ffc:	9b08      	ldr	r3, [sp, #32]
 8008ffe:	1e5c      	subs	r4, r3, #1
 8009000:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009002:	42a3      	cmp	r3, r4
 8009004:	bfb7      	itett	lt
 8009006:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009008:	1b1c      	subge	r4, r3, r4
 800900a:	1ae2      	sublt	r2, r4, r3
 800900c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800900e:	bfbe      	ittt	lt
 8009010:	940a      	strlt	r4, [sp, #40]	; 0x28
 8009012:	189b      	addlt	r3, r3, r2
 8009014:	930e      	strlt	r3, [sp, #56]	; 0x38
 8009016:	9b08      	ldr	r3, [sp, #32]
 8009018:	bfb8      	it	lt
 800901a:	2400      	movlt	r4, #0
 800901c:	2b00      	cmp	r3, #0
 800901e:	bfbb      	ittet	lt
 8009020:	9b06      	ldrlt	r3, [sp, #24]
 8009022:	9a08      	ldrlt	r2, [sp, #32]
 8009024:	9f06      	ldrge	r7, [sp, #24]
 8009026:	1a9f      	sublt	r7, r3, r2
 8009028:	bfac      	ite	ge
 800902a:	9b08      	ldrge	r3, [sp, #32]
 800902c:	2300      	movlt	r3, #0
 800902e:	e73f      	b.n	8008eb0 <_dtoa_r+0x748>
 8009030:	3fe00000 	.word	0x3fe00000
 8009034:	40240000 	.word	0x40240000
 8009038:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800903a:	9f06      	ldr	r7, [sp, #24]
 800903c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800903e:	e742      	b.n	8008ec6 <_dtoa_r+0x75e>
 8009040:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009042:	e76b      	b.n	8008f1c <_dtoa_r+0x7b4>
 8009044:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009046:	2b01      	cmp	r3, #1
 8009048:	dc19      	bgt.n	800907e <_dtoa_r+0x916>
 800904a:	9b04      	ldr	r3, [sp, #16]
 800904c:	b9bb      	cbnz	r3, 800907e <_dtoa_r+0x916>
 800904e:	9b05      	ldr	r3, [sp, #20]
 8009050:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009054:	b99b      	cbnz	r3, 800907e <_dtoa_r+0x916>
 8009056:	9b05      	ldr	r3, [sp, #20]
 8009058:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800905c:	0d1b      	lsrs	r3, r3, #20
 800905e:	051b      	lsls	r3, r3, #20
 8009060:	b183      	cbz	r3, 8009084 <_dtoa_r+0x91c>
 8009062:	f04f 0801 	mov.w	r8, #1
 8009066:	9b06      	ldr	r3, [sp, #24]
 8009068:	3301      	adds	r3, #1
 800906a:	9306      	str	r3, [sp, #24]
 800906c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800906e:	3301      	adds	r3, #1
 8009070:	9309      	str	r3, [sp, #36]	; 0x24
 8009072:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009074:	2b00      	cmp	r3, #0
 8009076:	f47f af6a 	bne.w	8008f4e <_dtoa_r+0x7e6>
 800907a:	2001      	movs	r0, #1
 800907c:	e76f      	b.n	8008f5e <_dtoa_r+0x7f6>
 800907e:	f04f 0800 	mov.w	r8, #0
 8009082:	e7f6      	b.n	8009072 <_dtoa_r+0x90a>
 8009084:	4698      	mov	r8, r3
 8009086:	e7f4      	b.n	8009072 <_dtoa_r+0x90a>
 8009088:	f43f af7d 	beq.w	8008f86 <_dtoa_r+0x81e>
 800908c:	4618      	mov	r0, r3
 800908e:	301c      	adds	r0, #28
 8009090:	e772      	b.n	8008f78 <_dtoa_r+0x810>
 8009092:	9b08      	ldr	r3, [sp, #32]
 8009094:	2b00      	cmp	r3, #0
 8009096:	dc36      	bgt.n	8009106 <_dtoa_r+0x99e>
 8009098:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800909a:	2b02      	cmp	r3, #2
 800909c:	dd33      	ble.n	8009106 <_dtoa_r+0x99e>
 800909e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80090a2:	f1b9 0f00 	cmp.w	r9, #0
 80090a6:	d10d      	bne.n	80090c4 <_dtoa_r+0x95c>
 80090a8:	4621      	mov	r1, r4
 80090aa:	464b      	mov	r3, r9
 80090ac:	2205      	movs	r2, #5
 80090ae:	4628      	mov	r0, r5
 80090b0:	f000 fd4e 	bl	8009b50 <__multadd>
 80090b4:	4601      	mov	r1, r0
 80090b6:	4604      	mov	r4, r0
 80090b8:	4658      	mov	r0, fp
 80090ba:	f000 ffaf 	bl	800a01c <__mcmp>
 80090be:	2800      	cmp	r0, #0
 80090c0:	f73f adb8 	bgt.w	8008c34 <_dtoa_r+0x4cc>
 80090c4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80090c6:	9f03      	ldr	r7, [sp, #12]
 80090c8:	ea6f 0a03 	mvn.w	sl, r3
 80090cc:	f04f 0800 	mov.w	r8, #0
 80090d0:	4621      	mov	r1, r4
 80090d2:	4628      	mov	r0, r5
 80090d4:	f000 fd1a 	bl	8009b0c <_Bfree>
 80090d8:	2e00      	cmp	r6, #0
 80090da:	f43f aea7 	beq.w	8008e2c <_dtoa_r+0x6c4>
 80090de:	f1b8 0f00 	cmp.w	r8, #0
 80090e2:	d005      	beq.n	80090f0 <_dtoa_r+0x988>
 80090e4:	45b0      	cmp	r8, r6
 80090e6:	d003      	beq.n	80090f0 <_dtoa_r+0x988>
 80090e8:	4641      	mov	r1, r8
 80090ea:	4628      	mov	r0, r5
 80090ec:	f000 fd0e 	bl	8009b0c <_Bfree>
 80090f0:	4631      	mov	r1, r6
 80090f2:	4628      	mov	r0, r5
 80090f4:	f000 fd0a 	bl	8009b0c <_Bfree>
 80090f8:	e698      	b.n	8008e2c <_dtoa_r+0x6c4>
 80090fa:	2400      	movs	r4, #0
 80090fc:	4626      	mov	r6, r4
 80090fe:	e7e1      	b.n	80090c4 <_dtoa_r+0x95c>
 8009100:	46c2      	mov	sl, r8
 8009102:	4626      	mov	r6, r4
 8009104:	e596      	b.n	8008c34 <_dtoa_r+0x4cc>
 8009106:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009108:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800910c:	2b00      	cmp	r3, #0
 800910e:	f000 80fd 	beq.w	800930c <_dtoa_r+0xba4>
 8009112:	2f00      	cmp	r7, #0
 8009114:	dd05      	ble.n	8009122 <_dtoa_r+0x9ba>
 8009116:	4631      	mov	r1, r6
 8009118:	463a      	mov	r2, r7
 800911a:	4628      	mov	r0, r5
 800911c:	f000 ff0e 	bl	8009f3c <__lshift>
 8009120:	4606      	mov	r6, r0
 8009122:	f1b8 0f00 	cmp.w	r8, #0
 8009126:	d05c      	beq.n	80091e2 <_dtoa_r+0xa7a>
 8009128:	4628      	mov	r0, r5
 800912a:	6871      	ldr	r1, [r6, #4]
 800912c:	f000 fcae 	bl	8009a8c <_Balloc>
 8009130:	4607      	mov	r7, r0
 8009132:	b928      	cbnz	r0, 8009140 <_dtoa_r+0x9d8>
 8009134:	4602      	mov	r2, r0
 8009136:	f240 21ea 	movw	r1, #746	; 0x2ea
 800913a:	4b7f      	ldr	r3, [pc, #508]	; (8009338 <_dtoa_r+0xbd0>)
 800913c:	f7ff bb28 	b.w	8008790 <_dtoa_r+0x28>
 8009140:	6932      	ldr	r2, [r6, #16]
 8009142:	f106 010c 	add.w	r1, r6, #12
 8009146:	3202      	adds	r2, #2
 8009148:	0092      	lsls	r2, r2, #2
 800914a:	300c      	adds	r0, #12
 800914c:	f7fd febc 	bl	8006ec8 <memcpy>
 8009150:	2201      	movs	r2, #1
 8009152:	4639      	mov	r1, r7
 8009154:	4628      	mov	r0, r5
 8009156:	f000 fef1 	bl	8009f3c <__lshift>
 800915a:	46b0      	mov	r8, r6
 800915c:	4606      	mov	r6, r0
 800915e:	9b03      	ldr	r3, [sp, #12]
 8009160:	3301      	adds	r3, #1
 8009162:	9308      	str	r3, [sp, #32]
 8009164:	9b03      	ldr	r3, [sp, #12]
 8009166:	444b      	add	r3, r9
 8009168:	930a      	str	r3, [sp, #40]	; 0x28
 800916a:	9b04      	ldr	r3, [sp, #16]
 800916c:	f003 0301 	and.w	r3, r3, #1
 8009170:	9309      	str	r3, [sp, #36]	; 0x24
 8009172:	9b08      	ldr	r3, [sp, #32]
 8009174:	4621      	mov	r1, r4
 8009176:	3b01      	subs	r3, #1
 8009178:	4658      	mov	r0, fp
 800917a:	9304      	str	r3, [sp, #16]
 800917c:	f7ff fa68 	bl	8008650 <quorem>
 8009180:	4603      	mov	r3, r0
 8009182:	4641      	mov	r1, r8
 8009184:	3330      	adds	r3, #48	; 0x30
 8009186:	9006      	str	r0, [sp, #24]
 8009188:	4658      	mov	r0, fp
 800918a:	930b      	str	r3, [sp, #44]	; 0x2c
 800918c:	f000 ff46 	bl	800a01c <__mcmp>
 8009190:	4632      	mov	r2, r6
 8009192:	4681      	mov	r9, r0
 8009194:	4621      	mov	r1, r4
 8009196:	4628      	mov	r0, r5
 8009198:	f000 ff5c 	bl	800a054 <__mdiff>
 800919c:	68c2      	ldr	r2, [r0, #12]
 800919e:	4607      	mov	r7, r0
 80091a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80091a2:	bb02      	cbnz	r2, 80091e6 <_dtoa_r+0xa7e>
 80091a4:	4601      	mov	r1, r0
 80091a6:	4658      	mov	r0, fp
 80091a8:	f000 ff38 	bl	800a01c <__mcmp>
 80091ac:	4602      	mov	r2, r0
 80091ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80091b0:	4639      	mov	r1, r7
 80091b2:	4628      	mov	r0, r5
 80091b4:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80091b8:	f000 fca8 	bl	8009b0c <_Bfree>
 80091bc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80091be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80091c0:	9f08      	ldr	r7, [sp, #32]
 80091c2:	ea43 0102 	orr.w	r1, r3, r2
 80091c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091c8:	430b      	orrs	r3, r1
 80091ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80091cc:	d10d      	bne.n	80091ea <_dtoa_r+0xa82>
 80091ce:	2b39      	cmp	r3, #57	; 0x39
 80091d0:	d029      	beq.n	8009226 <_dtoa_r+0xabe>
 80091d2:	f1b9 0f00 	cmp.w	r9, #0
 80091d6:	dd01      	ble.n	80091dc <_dtoa_r+0xa74>
 80091d8:	9b06      	ldr	r3, [sp, #24]
 80091da:	3331      	adds	r3, #49	; 0x31
 80091dc:	9a04      	ldr	r2, [sp, #16]
 80091de:	7013      	strb	r3, [r2, #0]
 80091e0:	e776      	b.n	80090d0 <_dtoa_r+0x968>
 80091e2:	4630      	mov	r0, r6
 80091e4:	e7b9      	b.n	800915a <_dtoa_r+0x9f2>
 80091e6:	2201      	movs	r2, #1
 80091e8:	e7e2      	b.n	80091b0 <_dtoa_r+0xa48>
 80091ea:	f1b9 0f00 	cmp.w	r9, #0
 80091ee:	db06      	blt.n	80091fe <_dtoa_r+0xa96>
 80091f0:	9922      	ldr	r1, [sp, #136]	; 0x88
 80091f2:	ea41 0909 	orr.w	r9, r1, r9
 80091f6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80091f8:	ea59 0101 	orrs.w	r1, r9, r1
 80091fc:	d120      	bne.n	8009240 <_dtoa_r+0xad8>
 80091fe:	2a00      	cmp	r2, #0
 8009200:	ddec      	ble.n	80091dc <_dtoa_r+0xa74>
 8009202:	4659      	mov	r1, fp
 8009204:	2201      	movs	r2, #1
 8009206:	4628      	mov	r0, r5
 8009208:	9308      	str	r3, [sp, #32]
 800920a:	f000 fe97 	bl	8009f3c <__lshift>
 800920e:	4621      	mov	r1, r4
 8009210:	4683      	mov	fp, r0
 8009212:	f000 ff03 	bl	800a01c <__mcmp>
 8009216:	2800      	cmp	r0, #0
 8009218:	9b08      	ldr	r3, [sp, #32]
 800921a:	dc02      	bgt.n	8009222 <_dtoa_r+0xaba>
 800921c:	d1de      	bne.n	80091dc <_dtoa_r+0xa74>
 800921e:	07da      	lsls	r2, r3, #31
 8009220:	d5dc      	bpl.n	80091dc <_dtoa_r+0xa74>
 8009222:	2b39      	cmp	r3, #57	; 0x39
 8009224:	d1d8      	bne.n	80091d8 <_dtoa_r+0xa70>
 8009226:	2339      	movs	r3, #57	; 0x39
 8009228:	9a04      	ldr	r2, [sp, #16]
 800922a:	7013      	strb	r3, [r2, #0]
 800922c:	463b      	mov	r3, r7
 800922e:	461f      	mov	r7, r3
 8009230:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8009234:	3b01      	subs	r3, #1
 8009236:	2a39      	cmp	r2, #57	; 0x39
 8009238:	d050      	beq.n	80092dc <_dtoa_r+0xb74>
 800923a:	3201      	adds	r2, #1
 800923c:	701a      	strb	r2, [r3, #0]
 800923e:	e747      	b.n	80090d0 <_dtoa_r+0x968>
 8009240:	2a00      	cmp	r2, #0
 8009242:	dd03      	ble.n	800924c <_dtoa_r+0xae4>
 8009244:	2b39      	cmp	r3, #57	; 0x39
 8009246:	d0ee      	beq.n	8009226 <_dtoa_r+0xabe>
 8009248:	3301      	adds	r3, #1
 800924a:	e7c7      	b.n	80091dc <_dtoa_r+0xa74>
 800924c:	9a08      	ldr	r2, [sp, #32]
 800924e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009250:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009254:	428a      	cmp	r2, r1
 8009256:	d02a      	beq.n	80092ae <_dtoa_r+0xb46>
 8009258:	4659      	mov	r1, fp
 800925a:	2300      	movs	r3, #0
 800925c:	220a      	movs	r2, #10
 800925e:	4628      	mov	r0, r5
 8009260:	f000 fc76 	bl	8009b50 <__multadd>
 8009264:	45b0      	cmp	r8, r6
 8009266:	4683      	mov	fp, r0
 8009268:	f04f 0300 	mov.w	r3, #0
 800926c:	f04f 020a 	mov.w	r2, #10
 8009270:	4641      	mov	r1, r8
 8009272:	4628      	mov	r0, r5
 8009274:	d107      	bne.n	8009286 <_dtoa_r+0xb1e>
 8009276:	f000 fc6b 	bl	8009b50 <__multadd>
 800927a:	4680      	mov	r8, r0
 800927c:	4606      	mov	r6, r0
 800927e:	9b08      	ldr	r3, [sp, #32]
 8009280:	3301      	adds	r3, #1
 8009282:	9308      	str	r3, [sp, #32]
 8009284:	e775      	b.n	8009172 <_dtoa_r+0xa0a>
 8009286:	f000 fc63 	bl	8009b50 <__multadd>
 800928a:	4631      	mov	r1, r6
 800928c:	4680      	mov	r8, r0
 800928e:	2300      	movs	r3, #0
 8009290:	220a      	movs	r2, #10
 8009292:	4628      	mov	r0, r5
 8009294:	f000 fc5c 	bl	8009b50 <__multadd>
 8009298:	4606      	mov	r6, r0
 800929a:	e7f0      	b.n	800927e <_dtoa_r+0xb16>
 800929c:	f1b9 0f00 	cmp.w	r9, #0
 80092a0:	bfcc      	ite	gt
 80092a2:	464f      	movgt	r7, r9
 80092a4:	2701      	movle	r7, #1
 80092a6:	f04f 0800 	mov.w	r8, #0
 80092aa:	9a03      	ldr	r2, [sp, #12]
 80092ac:	4417      	add	r7, r2
 80092ae:	4659      	mov	r1, fp
 80092b0:	2201      	movs	r2, #1
 80092b2:	4628      	mov	r0, r5
 80092b4:	9308      	str	r3, [sp, #32]
 80092b6:	f000 fe41 	bl	8009f3c <__lshift>
 80092ba:	4621      	mov	r1, r4
 80092bc:	4683      	mov	fp, r0
 80092be:	f000 fead 	bl	800a01c <__mcmp>
 80092c2:	2800      	cmp	r0, #0
 80092c4:	dcb2      	bgt.n	800922c <_dtoa_r+0xac4>
 80092c6:	d102      	bne.n	80092ce <_dtoa_r+0xb66>
 80092c8:	9b08      	ldr	r3, [sp, #32]
 80092ca:	07db      	lsls	r3, r3, #31
 80092cc:	d4ae      	bmi.n	800922c <_dtoa_r+0xac4>
 80092ce:	463b      	mov	r3, r7
 80092d0:	461f      	mov	r7, r3
 80092d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80092d6:	2a30      	cmp	r2, #48	; 0x30
 80092d8:	d0fa      	beq.n	80092d0 <_dtoa_r+0xb68>
 80092da:	e6f9      	b.n	80090d0 <_dtoa_r+0x968>
 80092dc:	9a03      	ldr	r2, [sp, #12]
 80092de:	429a      	cmp	r2, r3
 80092e0:	d1a5      	bne.n	800922e <_dtoa_r+0xac6>
 80092e2:	2331      	movs	r3, #49	; 0x31
 80092e4:	f10a 0a01 	add.w	sl, sl, #1
 80092e8:	e779      	b.n	80091de <_dtoa_r+0xa76>
 80092ea:	4b14      	ldr	r3, [pc, #80]	; (800933c <_dtoa_r+0xbd4>)
 80092ec:	f7ff baa8 	b.w	8008840 <_dtoa_r+0xd8>
 80092f0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	f47f aa81 	bne.w	80087fa <_dtoa_r+0x92>
 80092f8:	4b11      	ldr	r3, [pc, #68]	; (8009340 <_dtoa_r+0xbd8>)
 80092fa:	f7ff baa1 	b.w	8008840 <_dtoa_r+0xd8>
 80092fe:	f1b9 0f00 	cmp.w	r9, #0
 8009302:	dc03      	bgt.n	800930c <_dtoa_r+0xba4>
 8009304:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009306:	2b02      	cmp	r3, #2
 8009308:	f73f aecb 	bgt.w	80090a2 <_dtoa_r+0x93a>
 800930c:	9f03      	ldr	r7, [sp, #12]
 800930e:	4621      	mov	r1, r4
 8009310:	4658      	mov	r0, fp
 8009312:	f7ff f99d 	bl	8008650 <quorem>
 8009316:	9a03      	ldr	r2, [sp, #12]
 8009318:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800931c:	f807 3b01 	strb.w	r3, [r7], #1
 8009320:	1aba      	subs	r2, r7, r2
 8009322:	4591      	cmp	r9, r2
 8009324:	ddba      	ble.n	800929c <_dtoa_r+0xb34>
 8009326:	4659      	mov	r1, fp
 8009328:	2300      	movs	r3, #0
 800932a:	220a      	movs	r2, #10
 800932c:	4628      	mov	r0, r5
 800932e:	f000 fc0f 	bl	8009b50 <__multadd>
 8009332:	4683      	mov	fp, r0
 8009334:	e7eb      	b.n	800930e <_dtoa_r+0xba6>
 8009336:	bf00      	nop
 8009338:	0800ba41 	.word	0x0800ba41
 800933c:	0800b7b0 	.word	0x0800b7b0
 8009340:	0800b9d9 	.word	0x0800b9d9

08009344 <fiprintf>:
 8009344:	b40e      	push	{r1, r2, r3}
 8009346:	b503      	push	{r0, r1, lr}
 8009348:	4601      	mov	r1, r0
 800934a:	ab03      	add	r3, sp, #12
 800934c:	4805      	ldr	r0, [pc, #20]	; (8009364 <fiprintf+0x20>)
 800934e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009352:	6800      	ldr	r0, [r0, #0]
 8009354:	9301      	str	r3, [sp, #4]
 8009356:	f001 fac5 	bl	800a8e4 <_vfiprintf_r>
 800935a:	b002      	add	sp, #8
 800935c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009360:	b003      	add	sp, #12
 8009362:	4770      	bx	lr
 8009364:	20000190 	.word	0x20000190

08009368 <rshift>:
 8009368:	6903      	ldr	r3, [r0, #16]
 800936a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800936e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009372:	f100 0414 	add.w	r4, r0, #20
 8009376:	ea4f 1261 	mov.w	r2, r1, asr #5
 800937a:	dd46      	ble.n	800940a <rshift+0xa2>
 800937c:	f011 011f 	ands.w	r1, r1, #31
 8009380:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009384:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009388:	d10c      	bne.n	80093a4 <rshift+0x3c>
 800938a:	4629      	mov	r1, r5
 800938c:	f100 0710 	add.w	r7, r0, #16
 8009390:	42b1      	cmp	r1, r6
 8009392:	d335      	bcc.n	8009400 <rshift+0x98>
 8009394:	1a9b      	subs	r3, r3, r2
 8009396:	009b      	lsls	r3, r3, #2
 8009398:	1eea      	subs	r2, r5, #3
 800939a:	4296      	cmp	r6, r2
 800939c:	bf38      	it	cc
 800939e:	2300      	movcc	r3, #0
 80093a0:	4423      	add	r3, r4
 80093a2:	e015      	b.n	80093d0 <rshift+0x68>
 80093a4:	46a1      	mov	r9, r4
 80093a6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80093aa:	f1c1 0820 	rsb	r8, r1, #32
 80093ae:	40cf      	lsrs	r7, r1
 80093b0:	f105 0e04 	add.w	lr, r5, #4
 80093b4:	4576      	cmp	r6, lr
 80093b6:	46f4      	mov	ip, lr
 80093b8:	d816      	bhi.n	80093e8 <rshift+0x80>
 80093ba:	1a9a      	subs	r2, r3, r2
 80093bc:	0092      	lsls	r2, r2, #2
 80093be:	3a04      	subs	r2, #4
 80093c0:	3501      	adds	r5, #1
 80093c2:	42ae      	cmp	r6, r5
 80093c4:	bf38      	it	cc
 80093c6:	2200      	movcc	r2, #0
 80093c8:	18a3      	adds	r3, r4, r2
 80093ca:	50a7      	str	r7, [r4, r2]
 80093cc:	b107      	cbz	r7, 80093d0 <rshift+0x68>
 80093ce:	3304      	adds	r3, #4
 80093d0:	42a3      	cmp	r3, r4
 80093d2:	eba3 0204 	sub.w	r2, r3, r4
 80093d6:	bf08      	it	eq
 80093d8:	2300      	moveq	r3, #0
 80093da:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80093de:	6102      	str	r2, [r0, #16]
 80093e0:	bf08      	it	eq
 80093e2:	6143      	streq	r3, [r0, #20]
 80093e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80093e8:	f8dc c000 	ldr.w	ip, [ip]
 80093ec:	fa0c fc08 	lsl.w	ip, ip, r8
 80093f0:	ea4c 0707 	orr.w	r7, ip, r7
 80093f4:	f849 7b04 	str.w	r7, [r9], #4
 80093f8:	f85e 7b04 	ldr.w	r7, [lr], #4
 80093fc:	40cf      	lsrs	r7, r1
 80093fe:	e7d9      	b.n	80093b4 <rshift+0x4c>
 8009400:	f851 cb04 	ldr.w	ip, [r1], #4
 8009404:	f847 cf04 	str.w	ip, [r7, #4]!
 8009408:	e7c2      	b.n	8009390 <rshift+0x28>
 800940a:	4623      	mov	r3, r4
 800940c:	e7e0      	b.n	80093d0 <rshift+0x68>

0800940e <__hexdig_fun>:
 800940e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009412:	2b09      	cmp	r3, #9
 8009414:	d802      	bhi.n	800941c <__hexdig_fun+0xe>
 8009416:	3820      	subs	r0, #32
 8009418:	b2c0      	uxtb	r0, r0
 800941a:	4770      	bx	lr
 800941c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009420:	2b05      	cmp	r3, #5
 8009422:	d801      	bhi.n	8009428 <__hexdig_fun+0x1a>
 8009424:	3847      	subs	r0, #71	; 0x47
 8009426:	e7f7      	b.n	8009418 <__hexdig_fun+0xa>
 8009428:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800942c:	2b05      	cmp	r3, #5
 800942e:	d801      	bhi.n	8009434 <__hexdig_fun+0x26>
 8009430:	3827      	subs	r0, #39	; 0x27
 8009432:	e7f1      	b.n	8009418 <__hexdig_fun+0xa>
 8009434:	2000      	movs	r0, #0
 8009436:	4770      	bx	lr

08009438 <__gethex>:
 8009438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800943c:	b08b      	sub	sp, #44	; 0x2c
 800943e:	9305      	str	r3, [sp, #20]
 8009440:	4bb2      	ldr	r3, [pc, #712]	; (800970c <__gethex+0x2d4>)
 8009442:	9002      	str	r0, [sp, #8]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	468b      	mov	fp, r1
 8009448:	4618      	mov	r0, r3
 800944a:	4690      	mov	r8, r2
 800944c:	9303      	str	r3, [sp, #12]
 800944e:	f7f6 fe89 	bl	8000164 <strlen>
 8009452:	4682      	mov	sl, r0
 8009454:	9b03      	ldr	r3, [sp, #12]
 8009456:	f8db 2000 	ldr.w	r2, [fp]
 800945a:	4403      	add	r3, r0
 800945c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009460:	9306      	str	r3, [sp, #24]
 8009462:	1c93      	adds	r3, r2, #2
 8009464:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009468:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800946c:	32fe      	adds	r2, #254	; 0xfe
 800946e:	18d1      	adds	r1, r2, r3
 8009470:	461f      	mov	r7, r3
 8009472:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009476:	9101      	str	r1, [sp, #4]
 8009478:	2830      	cmp	r0, #48	; 0x30
 800947a:	d0f8      	beq.n	800946e <__gethex+0x36>
 800947c:	f7ff ffc7 	bl	800940e <__hexdig_fun>
 8009480:	4604      	mov	r4, r0
 8009482:	2800      	cmp	r0, #0
 8009484:	d13a      	bne.n	80094fc <__gethex+0xc4>
 8009486:	4652      	mov	r2, sl
 8009488:	4638      	mov	r0, r7
 800948a:	9903      	ldr	r1, [sp, #12]
 800948c:	f001 fb70 	bl	800ab70 <strncmp>
 8009490:	4605      	mov	r5, r0
 8009492:	2800      	cmp	r0, #0
 8009494:	d166      	bne.n	8009564 <__gethex+0x12c>
 8009496:	f817 000a 	ldrb.w	r0, [r7, sl]
 800949a:	eb07 060a 	add.w	r6, r7, sl
 800949e:	f7ff ffb6 	bl	800940e <__hexdig_fun>
 80094a2:	2800      	cmp	r0, #0
 80094a4:	d060      	beq.n	8009568 <__gethex+0x130>
 80094a6:	4633      	mov	r3, r6
 80094a8:	7818      	ldrb	r0, [r3, #0]
 80094aa:	461f      	mov	r7, r3
 80094ac:	2830      	cmp	r0, #48	; 0x30
 80094ae:	f103 0301 	add.w	r3, r3, #1
 80094b2:	d0f9      	beq.n	80094a8 <__gethex+0x70>
 80094b4:	f7ff ffab 	bl	800940e <__hexdig_fun>
 80094b8:	2301      	movs	r3, #1
 80094ba:	fab0 f480 	clz	r4, r0
 80094be:	4635      	mov	r5, r6
 80094c0:	0964      	lsrs	r4, r4, #5
 80094c2:	9301      	str	r3, [sp, #4]
 80094c4:	463a      	mov	r2, r7
 80094c6:	4616      	mov	r6, r2
 80094c8:	7830      	ldrb	r0, [r6, #0]
 80094ca:	3201      	adds	r2, #1
 80094cc:	f7ff ff9f 	bl	800940e <__hexdig_fun>
 80094d0:	2800      	cmp	r0, #0
 80094d2:	d1f8      	bne.n	80094c6 <__gethex+0x8e>
 80094d4:	4652      	mov	r2, sl
 80094d6:	4630      	mov	r0, r6
 80094d8:	9903      	ldr	r1, [sp, #12]
 80094da:	f001 fb49 	bl	800ab70 <strncmp>
 80094de:	b980      	cbnz	r0, 8009502 <__gethex+0xca>
 80094e0:	b94d      	cbnz	r5, 80094f6 <__gethex+0xbe>
 80094e2:	eb06 050a 	add.w	r5, r6, sl
 80094e6:	462a      	mov	r2, r5
 80094e8:	4616      	mov	r6, r2
 80094ea:	7830      	ldrb	r0, [r6, #0]
 80094ec:	3201      	adds	r2, #1
 80094ee:	f7ff ff8e 	bl	800940e <__hexdig_fun>
 80094f2:	2800      	cmp	r0, #0
 80094f4:	d1f8      	bne.n	80094e8 <__gethex+0xb0>
 80094f6:	1bad      	subs	r5, r5, r6
 80094f8:	00ad      	lsls	r5, r5, #2
 80094fa:	e004      	b.n	8009506 <__gethex+0xce>
 80094fc:	2400      	movs	r4, #0
 80094fe:	4625      	mov	r5, r4
 8009500:	e7e0      	b.n	80094c4 <__gethex+0x8c>
 8009502:	2d00      	cmp	r5, #0
 8009504:	d1f7      	bne.n	80094f6 <__gethex+0xbe>
 8009506:	7833      	ldrb	r3, [r6, #0]
 8009508:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800950c:	2b50      	cmp	r3, #80	; 0x50
 800950e:	d139      	bne.n	8009584 <__gethex+0x14c>
 8009510:	7873      	ldrb	r3, [r6, #1]
 8009512:	2b2b      	cmp	r3, #43	; 0x2b
 8009514:	d02a      	beq.n	800956c <__gethex+0x134>
 8009516:	2b2d      	cmp	r3, #45	; 0x2d
 8009518:	d02c      	beq.n	8009574 <__gethex+0x13c>
 800951a:	f04f 0900 	mov.w	r9, #0
 800951e:	1c71      	adds	r1, r6, #1
 8009520:	7808      	ldrb	r0, [r1, #0]
 8009522:	f7ff ff74 	bl	800940e <__hexdig_fun>
 8009526:	1e43      	subs	r3, r0, #1
 8009528:	b2db      	uxtb	r3, r3
 800952a:	2b18      	cmp	r3, #24
 800952c:	d82a      	bhi.n	8009584 <__gethex+0x14c>
 800952e:	f1a0 0210 	sub.w	r2, r0, #16
 8009532:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009536:	f7ff ff6a 	bl	800940e <__hexdig_fun>
 800953a:	1e43      	subs	r3, r0, #1
 800953c:	b2db      	uxtb	r3, r3
 800953e:	2b18      	cmp	r3, #24
 8009540:	d91b      	bls.n	800957a <__gethex+0x142>
 8009542:	f1b9 0f00 	cmp.w	r9, #0
 8009546:	d000      	beq.n	800954a <__gethex+0x112>
 8009548:	4252      	negs	r2, r2
 800954a:	4415      	add	r5, r2
 800954c:	f8cb 1000 	str.w	r1, [fp]
 8009550:	b1d4      	cbz	r4, 8009588 <__gethex+0x150>
 8009552:	9b01      	ldr	r3, [sp, #4]
 8009554:	2b00      	cmp	r3, #0
 8009556:	bf14      	ite	ne
 8009558:	2700      	movne	r7, #0
 800955a:	2706      	moveq	r7, #6
 800955c:	4638      	mov	r0, r7
 800955e:	b00b      	add	sp, #44	; 0x2c
 8009560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009564:	463e      	mov	r6, r7
 8009566:	4625      	mov	r5, r4
 8009568:	2401      	movs	r4, #1
 800956a:	e7cc      	b.n	8009506 <__gethex+0xce>
 800956c:	f04f 0900 	mov.w	r9, #0
 8009570:	1cb1      	adds	r1, r6, #2
 8009572:	e7d5      	b.n	8009520 <__gethex+0xe8>
 8009574:	f04f 0901 	mov.w	r9, #1
 8009578:	e7fa      	b.n	8009570 <__gethex+0x138>
 800957a:	230a      	movs	r3, #10
 800957c:	fb03 0202 	mla	r2, r3, r2, r0
 8009580:	3a10      	subs	r2, #16
 8009582:	e7d6      	b.n	8009532 <__gethex+0xfa>
 8009584:	4631      	mov	r1, r6
 8009586:	e7e1      	b.n	800954c <__gethex+0x114>
 8009588:	4621      	mov	r1, r4
 800958a:	1bf3      	subs	r3, r6, r7
 800958c:	3b01      	subs	r3, #1
 800958e:	2b07      	cmp	r3, #7
 8009590:	dc0a      	bgt.n	80095a8 <__gethex+0x170>
 8009592:	9802      	ldr	r0, [sp, #8]
 8009594:	f000 fa7a 	bl	8009a8c <_Balloc>
 8009598:	4604      	mov	r4, r0
 800959a:	b940      	cbnz	r0, 80095ae <__gethex+0x176>
 800959c:	4602      	mov	r2, r0
 800959e:	21de      	movs	r1, #222	; 0xde
 80095a0:	4b5b      	ldr	r3, [pc, #364]	; (8009710 <__gethex+0x2d8>)
 80095a2:	485c      	ldr	r0, [pc, #368]	; (8009714 <__gethex+0x2dc>)
 80095a4:	f7ff f836 	bl	8008614 <__assert_func>
 80095a8:	3101      	adds	r1, #1
 80095aa:	105b      	asrs	r3, r3, #1
 80095ac:	e7ef      	b.n	800958e <__gethex+0x156>
 80095ae:	f04f 0b00 	mov.w	fp, #0
 80095b2:	f100 0914 	add.w	r9, r0, #20
 80095b6:	f1ca 0301 	rsb	r3, sl, #1
 80095ba:	f8cd 9010 	str.w	r9, [sp, #16]
 80095be:	f8cd b004 	str.w	fp, [sp, #4]
 80095c2:	9308      	str	r3, [sp, #32]
 80095c4:	42b7      	cmp	r7, r6
 80095c6:	d33f      	bcc.n	8009648 <__gethex+0x210>
 80095c8:	9f04      	ldr	r7, [sp, #16]
 80095ca:	9b01      	ldr	r3, [sp, #4]
 80095cc:	f847 3b04 	str.w	r3, [r7], #4
 80095d0:	eba7 0709 	sub.w	r7, r7, r9
 80095d4:	10bf      	asrs	r7, r7, #2
 80095d6:	6127      	str	r7, [r4, #16]
 80095d8:	4618      	mov	r0, r3
 80095da:	f000 fb49 	bl	8009c70 <__hi0bits>
 80095de:	017f      	lsls	r7, r7, #5
 80095e0:	f8d8 6000 	ldr.w	r6, [r8]
 80095e4:	1a3f      	subs	r7, r7, r0
 80095e6:	42b7      	cmp	r7, r6
 80095e8:	dd62      	ble.n	80096b0 <__gethex+0x278>
 80095ea:	1bbf      	subs	r7, r7, r6
 80095ec:	4639      	mov	r1, r7
 80095ee:	4620      	mov	r0, r4
 80095f0:	f000 fee3 	bl	800a3ba <__any_on>
 80095f4:	4682      	mov	sl, r0
 80095f6:	b1a8      	cbz	r0, 8009624 <__gethex+0x1ec>
 80095f8:	f04f 0a01 	mov.w	sl, #1
 80095fc:	1e7b      	subs	r3, r7, #1
 80095fe:	1159      	asrs	r1, r3, #5
 8009600:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009604:	f003 021f 	and.w	r2, r3, #31
 8009608:	fa0a f202 	lsl.w	r2, sl, r2
 800960c:	420a      	tst	r2, r1
 800960e:	d009      	beq.n	8009624 <__gethex+0x1ec>
 8009610:	4553      	cmp	r3, sl
 8009612:	dd05      	ble.n	8009620 <__gethex+0x1e8>
 8009614:	4620      	mov	r0, r4
 8009616:	1eb9      	subs	r1, r7, #2
 8009618:	f000 fecf 	bl	800a3ba <__any_on>
 800961c:	2800      	cmp	r0, #0
 800961e:	d144      	bne.n	80096aa <__gethex+0x272>
 8009620:	f04f 0a02 	mov.w	sl, #2
 8009624:	4639      	mov	r1, r7
 8009626:	4620      	mov	r0, r4
 8009628:	f7ff fe9e 	bl	8009368 <rshift>
 800962c:	443d      	add	r5, r7
 800962e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009632:	42ab      	cmp	r3, r5
 8009634:	da4a      	bge.n	80096cc <__gethex+0x294>
 8009636:	4621      	mov	r1, r4
 8009638:	9802      	ldr	r0, [sp, #8]
 800963a:	f000 fa67 	bl	8009b0c <_Bfree>
 800963e:	2300      	movs	r3, #0
 8009640:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009642:	27a3      	movs	r7, #163	; 0xa3
 8009644:	6013      	str	r3, [r2, #0]
 8009646:	e789      	b.n	800955c <__gethex+0x124>
 8009648:	1e73      	subs	r3, r6, #1
 800964a:	9a06      	ldr	r2, [sp, #24]
 800964c:	9307      	str	r3, [sp, #28]
 800964e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009652:	4293      	cmp	r3, r2
 8009654:	d019      	beq.n	800968a <__gethex+0x252>
 8009656:	f1bb 0f20 	cmp.w	fp, #32
 800965a:	d107      	bne.n	800966c <__gethex+0x234>
 800965c:	9b04      	ldr	r3, [sp, #16]
 800965e:	9a01      	ldr	r2, [sp, #4]
 8009660:	f843 2b04 	str.w	r2, [r3], #4
 8009664:	9304      	str	r3, [sp, #16]
 8009666:	2300      	movs	r3, #0
 8009668:	469b      	mov	fp, r3
 800966a:	9301      	str	r3, [sp, #4]
 800966c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009670:	f7ff fecd 	bl	800940e <__hexdig_fun>
 8009674:	9b01      	ldr	r3, [sp, #4]
 8009676:	f000 000f 	and.w	r0, r0, #15
 800967a:	fa00 f00b 	lsl.w	r0, r0, fp
 800967e:	4303      	orrs	r3, r0
 8009680:	9301      	str	r3, [sp, #4]
 8009682:	f10b 0b04 	add.w	fp, fp, #4
 8009686:	9b07      	ldr	r3, [sp, #28]
 8009688:	e00d      	b.n	80096a6 <__gethex+0x26e>
 800968a:	9a08      	ldr	r2, [sp, #32]
 800968c:	1e73      	subs	r3, r6, #1
 800968e:	4413      	add	r3, r2
 8009690:	42bb      	cmp	r3, r7
 8009692:	d3e0      	bcc.n	8009656 <__gethex+0x21e>
 8009694:	4618      	mov	r0, r3
 8009696:	4652      	mov	r2, sl
 8009698:	9903      	ldr	r1, [sp, #12]
 800969a:	9309      	str	r3, [sp, #36]	; 0x24
 800969c:	f001 fa68 	bl	800ab70 <strncmp>
 80096a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096a2:	2800      	cmp	r0, #0
 80096a4:	d1d7      	bne.n	8009656 <__gethex+0x21e>
 80096a6:	461e      	mov	r6, r3
 80096a8:	e78c      	b.n	80095c4 <__gethex+0x18c>
 80096aa:	f04f 0a03 	mov.w	sl, #3
 80096ae:	e7b9      	b.n	8009624 <__gethex+0x1ec>
 80096b0:	da09      	bge.n	80096c6 <__gethex+0x28e>
 80096b2:	1bf7      	subs	r7, r6, r7
 80096b4:	4621      	mov	r1, r4
 80096b6:	463a      	mov	r2, r7
 80096b8:	9802      	ldr	r0, [sp, #8]
 80096ba:	f000 fc3f 	bl	8009f3c <__lshift>
 80096be:	4604      	mov	r4, r0
 80096c0:	1bed      	subs	r5, r5, r7
 80096c2:	f100 0914 	add.w	r9, r0, #20
 80096c6:	f04f 0a00 	mov.w	sl, #0
 80096ca:	e7b0      	b.n	800962e <__gethex+0x1f6>
 80096cc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80096d0:	42a8      	cmp	r0, r5
 80096d2:	dd72      	ble.n	80097ba <__gethex+0x382>
 80096d4:	1b45      	subs	r5, r0, r5
 80096d6:	42ae      	cmp	r6, r5
 80096d8:	dc35      	bgt.n	8009746 <__gethex+0x30e>
 80096da:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80096de:	2b02      	cmp	r3, #2
 80096e0:	d029      	beq.n	8009736 <__gethex+0x2fe>
 80096e2:	2b03      	cmp	r3, #3
 80096e4:	d02b      	beq.n	800973e <__gethex+0x306>
 80096e6:	2b01      	cmp	r3, #1
 80096e8:	d11c      	bne.n	8009724 <__gethex+0x2ec>
 80096ea:	42ae      	cmp	r6, r5
 80096ec:	d11a      	bne.n	8009724 <__gethex+0x2ec>
 80096ee:	2e01      	cmp	r6, #1
 80096f0:	d112      	bne.n	8009718 <__gethex+0x2e0>
 80096f2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80096f6:	9a05      	ldr	r2, [sp, #20]
 80096f8:	2762      	movs	r7, #98	; 0x62
 80096fa:	6013      	str	r3, [r2, #0]
 80096fc:	2301      	movs	r3, #1
 80096fe:	6123      	str	r3, [r4, #16]
 8009700:	f8c9 3000 	str.w	r3, [r9]
 8009704:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009706:	601c      	str	r4, [r3, #0]
 8009708:	e728      	b.n	800955c <__gethex+0x124>
 800970a:	bf00      	nop
 800970c:	0800bab8 	.word	0x0800bab8
 8009710:	0800ba41 	.word	0x0800ba41
 8009714:	0800ba52 	.word	0x0800ba52
 8009718:	4620      	mov	r0, r4
 800971a:	1e71      	subs	r1, r6, #1
 800971c:	f000 fe4d 	bl	800a3ba <__any_on>
 8009720:	2800      	cmp	r0, #0
 8009722:	d1e6      	bne.n	80096f2 <__gethex+0x2ba>
 8009724:	4621      	mov	r1, r4
 8009726:	9802      	ldr	r0, [sp, #8]
 8009728:	f000 f9f0 	bl	8009b0c <_Bfree>
 800972c:	2300      	movs	r3, #0
 800972e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009730:	2750      	movs	r7, #80	; 0x50
 8009732:	6013      	str	r3, [r2, #0]
 8009734:	e712      	b.n	800955c <__gethex+0x124>
 8009736:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009738:	2b00      	cmp	r3, #0
 800973a:	d1f3      	bne.n	8009724 <__gethex+0x2ec>
 800973c:	e7d9      	b.n	80096f2 <__gethex+0x2ba>
 800973e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009740:	2b00      	cmp	r3, #0
 8009742:	d1d6      	bne.n	80096f2 <__gethex+0x2ba>
 8009744:	e7ee      	b.n	8009724 <__gethex+0x2ec>
 8009746:	1e6f      	subs	r7, r5, #1
 8009748:	f1ba 0f00 	cmp.w	sl, #0
 800974c:	d132      	bne.n	80097b4 <__gethex+0x37c>
 800974e:	b127      	cbz	r7, 800975a <__gethex+0x322>
 8009750:	4639      	mov	r1, r7
 8009752:	4620      	mov	r0, r4
 8009754:	f000 fe31 	bl	800a3ba <__any_on>
 8009758:	4682      	mov	sl, r0
 800975a:	2101      	movs	r1, #1
 800975c:	117b      	asrs	r3, r7, #5
 800975e:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009762:	f007 071f 	and.w	r7, r7, #31
 8009766:	fa01 f707 	lsl.w	r7, r1, r7
 800976a:	421f      	tst	r7, r3
 800976c:	f04f 0702 	mov.w	r7, #2
 8009770:	4629      	mov	r1, r5
 8009772:	4620      	mov	r0, r4
 8009774:	bf18      	it	ne
 8009776:	f04a 0a02 	orrne.w	sl, sl, #2
 800977a:	1b76      	subs	r6, r6, r5
 800977c:	f7ff fdf4 	bl	8009368 <rshift>
 8009780:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009784:	f1ba 0f00 	cmp.w	sl, #0
 8009788:	d048      	beq.n	800981c <__gethex+0x3e4>
 800978a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800978e:	2b02      	cmp	r3, #2
 8009790:	d015      	beq.n	80097be <__gethex+0x386>
 8009792:	2b03      	cmp	r3, #3
 8009794:	d017      	beq.n	80097c6 <__gethex+0x38e>
 8009796:	2b01      	cmp	r3, #1
 8009798:	d109      	bne.n	80097ae <__gethex+0x376>
 800979a:	f01a 0f02 	tst.w	sl, #2
 800979e:	d006      	beq.n	80097ae <__gethex+0x376>
 80097a0:	f8d9 0000 	ldr.w	r0, [r9]
 80097a4:	ea4a 0a00 	orr.w	sl, sl, r0
 80097a8:	f01a 0f01 	tst.w	sl, #1
 80097ac:	d10e      	bne.n	80097cc <__gethex+0x394>
 80097ae:	f047 0710 	orr.w	r7, r7, #16
 80097b2:	e033      	b.n	800981c <__gethex+0x3e4>
 80097b4:	f04f 0a01 	mov.w	sl, #1
 80097b8:	e7cf      	b.n	800975a <__gethex+0x322>
 80097ba:	2701      	movs	r7, #1
 80097bc:	e7e2      	b.n	8009784 <__gethex+0x34c>
 80097be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80097c0:	f1c3 0301 	rsb	r3, r3, #1
 80097c4:	9315      	str	r3, [sp, #84]	; 0x54
 80097c6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d0f0      	beq.n	80097ae <__gethex+0x376>
 80097cc:	f04f 0c00 	mov.w	ip, #0
 80097d0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80097d4:	f104 0314 	add.w	r3, r4, #20
 80097d8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80097dc:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80097e0:	4618      	mov	r0, r3
 80097e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80097e6:	f1b2 3fff 	cmp.w	r2, #4294967295
 80097ea:	d01c      	beq.n	8009826 <__gethex+0x3ee>
 80097ec:	3201      	adds	r2, #1
 80097ee:	6002      	str	r2, [r0, #0]
 80097f0:	2f02      	cmp	r7, #2
 80097f2:	f104 0314 	add.w	r3, r4, #20
 80097f6:	d13d      	bne.n	8009874 <__gethex+0x43c>
 80097f8:	f8d8 2000 	ldr.w	r2, [r8]
 80097fc:	3a01      	subs	r2, #1
 80097fe:	42b2      	cmp	r2, r6
 8009800:	d10a      	bne.n	8009818 <__gethex+0x3e0>
 8009802:	2201      	movs	r2, #1
 8009804:	1171      	asrs	r1, r6, #5
 8009806:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800980a:	f006 061f 	and.w	r6, r6, #31
 800980e:	fa02 f606 	lsl.w	r6, r2, r6
 8009812:	421e      	tst	r6, r3
 8009814:	bf18      	it	ne
 8009816:	4617      	movne	r7, r2
 8009818:	f047 0720 	orr.w	r7, r7, #32
 800981c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800981e:	601c      	str	r4, [r3, #0]
 8009820:	9b05      	ldr	r3, [sp, #20]
 8009822:	601d      	str	r5, [r3, #0]
 8009824:	e69a      	b.n	800955c <__gethex+0x124>
 8009826:	4299      	cmp	r1, r3
 8009828:	f843 cc04 	str.w	ip, [r3, #-4]
 800982c:	d8d8      	bhi.n	80097e0 <__gethex+0x3a8>
 800982e:	68a3      	ldr	r3, [r4, #8]
 8009830:	459b      	cmp	fp, r3
 8009832:	db17      	blt.n	8009864 <__gethex+0x42c>
 8009834:	6861      	ldr	r1, [r4, #4]
 8009836:	9802      	ldr	r0, [sp, #8]
 8009838:	3101      	adds	r1, #1
 800983a:	f000 f927 	bl	8009a8c <_Balloc>
 800983e:	4681      	mov	r9, r0
 8009840:	b918      	cbnz	r0, 800984a <__gethex+0x412>
 8009842:	4602      	mov	r2, r0
 8009844:	2184      	movs	r1, #132	; 0x84
 8009846:	4b19      	ldr	r3, [pc, #100]	; (80098ac <__gethex+0x474>)
 8009848:	e6ab      	b.n	80095a2 <__gethex+0x16a>
 800984a:	6922      	ldr	r2, [r4, #16]
 800984c:	f104 010c 	add.w	r1, r4, #12
 8009850:	3202      	adds	r2, #2
 8009852:	0092      	lsls	r2, r2, #2
 8009854:	300c      	adds	r0, #12
 8009856:	f7fd fb37 	bl	8006ec8 <memcpy>
 800985a:	4621      	mov	r1, r4
 800985c:	9802      	ldr	r0, [sp, #8]
 800985e:	f000 f955 	bl	8009b0c <_Bfree>
 8009862:	464c      	mov	r4, r9
 8009864:	6923      	ldr	r3, [r4, #16]
 8009866:	1c5a      	adds	r2, r3, #1
 8009868:	6122      	str	r2, [r4, #16]
 800986a:	2201      	movs	r2, #1
 800986c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009870:	615a      	str	r2, [r3, #20]
 8009872:	e7bd      	b.n	80097f0 <__gethex+0x3b8>
 8009874:	6922      	ldr	r2, [r4, #16]
 8009876:	455a      	cmp	r2, fp
 8009878:	dd0b      	ble.n	8009892 <__gethex+0x45a>
 800987a:	2101      	movs	r1, #1
 800987c:	4620      	mov	r0, r4
 800987e:	f7ff fd73 	bl	8009368 <rshift>
 8009882:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009886:	3501      	adds	r5, #1
 8009888:	42ab      	cmp	r3, r5
 800988a:	f6ff aed4 	blt.w	8009636 <__gethex+0x1fe>
 800988e:	2701      	movs	r7, #1
 8009890:	e7c2      	b.n	8009818 <__gethex+0x3e0>
 8009892:	f016 061f 	ands.w	r6, r6, #31
 8009896:	d0fa      	beq.n	800988e <__gethex+0x456>
 8009898:	4453      	add	r3, sl
 800989a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800989e:	f000 f9e7 	bl	8009c70 <__hi0bits>
 80098a2:	f1c6 0620 	rsb	r6, r6, #32
 80098a6:	42b0      	cmp	r0, r6
 80098a8:	dbe7      	blt.n	800987a <__gethex+0x442>
 80098aa:	e7f0      	b.n	800988e <__gethex+0x456>
 80098ac:	0800ba41 	.word	0x0800ba41

080098b0 <L_shift>:
 80098b0:	f1c2 0208 	rsb	r2, r2, #8
 80098b4:	0092      	lsls	r2, r2, #2
 80098b6:	b570      	push	{r4, r5, r6, lr}
 80098b8:	f1c2 0620 	rsb	r6, r2, #32
 80098bc:	6843      	ldr	r3, [r0, #4]
 80098be:	6804      	ldr	r4, [r0, #0]
 80098c0:	fa03 f506 	lsl.w	r5, r3, r6
 80098c4:	432c      	orrs	r4, r5
 80098c6:	40d3      	lsrs	r3, r2
 80098c8:	6004      	str	r4, [r0, #0]
 80098ca:	f840 3f04 	str.w	r3, [r0, #4]!
 80098ce:	4288      	cmp	r0, r1
 80098d0:	d3f4      	bcc.n	80098bc <L_shift+0xc>
 80098d2:	bd70      	pop	{r4, r5, r6, pc}

080098d4 <__match>:
 80098d4:	b530      	push	{r4, r5, lr}
 80098d6:	6803      	ldr	r3, [r0, #0]
 80098d8:	3301      	adds	r3, #1
 80098da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80098de:	b914      	cbnz	r4, 80098e6 <__match+0x12>
 80098e0:	6003      	str	r3, [r0, #0]
 80098e2:	2001      	movs	r0, #1
 80098e4:	bd30      	pop	{r4, r5, pc}
 80098e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80098ea:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80098ee:	2d19      	cmp	r5, #25
 80098f0:	bf98      	it	ls
 80098f2:	3220      	addls	r2, #32
 80098f4:	42a2      	cmp	r2, r4
 80098f6:	d0f0      	beq.n	80098da <__match+0x6>
 80098f8:	2000      	movs	r0, #0
 80098fa:	e7f3      	b.n	80098e4 <__match+0x10>

080098fc <__hexnan>:
 80098fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009900:	2500      	movs	r5, #0
 8009902:	680b      	ldr	r3, [r1, #0]
 8009904:	4682      	mov	sl, r0
 8009906:	115e      	asrs	r6, r3, #5
 8009908:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800990c:	f013 031f 	ands.w	r3, r3, #31
 8009910:	bf18      	it	ne
 8009912:	3604      	addne	r6, #4
 8009914:	1f37      	subs	r7, r6, #4
 8009916:	46b9      	mov	r9, r7
 8009918:	463c      	mov	r4, r7
 800991a:	46ab      	mov	fp, r5
 800991c:	b087      	sub	sp, #28
 800991e:	4690      	mov	r8, r2
 8009920:	6802      	ldr	r2, [r0, #0]
 8009922:	9301      	str	r3, [sp, #4]
 8009924:	f846 5c04 	str.w	r5, [r6, #-4]
 8009928:	9502      	str	r5, [sp, #8]
 800992a:	7851      	ldrb	r1, [r2, #1]
 800992c:	1c53      	adds	r3, r2, #1
 800992e:	9303      	str	r3, [sp, #12]
 8009930:	b341      	cbz	r1, 8009984 <__hexnan+0x88>
 8009932:	4608      	mov	r0, r1
 8009934:	9205      	str	r2, [sp, #20]
 8009936:	9104      	str	r1, [sp, #16]
 8009938:	f7ff fd69 	bl	800940e <__hexdig_fun>
 800993c:	2800      	cmp	r0, #0
 800993e:	d14f      	bne.n	80099e0 <__hexnan+0xe4>
 8009940:	9904      	ldr	r1, [sp, #16]
 8009942:	9a05      	ldr	r2, [sp, #20]
 8009944:	2920      	cmp	r1, #32
 8009946:	d818      	bhi.n	800997a <__hexnan+0x7e>
 8009948:	9b02      	ldr	r3, [sp, #8]
 800994a:	459b      	cmp	fp, r3
 800994c:	dd13      	ble.n	8009976 <__hexnan+0x7a>
 800994e:	454c      	cmp	r4, r9
 8009950:	d206      	bcs.n	8009960 <__hexnan+0x64>
 8009952:	2d07      	cmp	r5, #7
 8009954:	dc04      	bgt.n	8009960 <__hexnan+0x64>
 8009956:	462a      	mov	r2, r5
 8009958:	4649      	mov	r1, r9
 800995a:	4620      	mov	r0, r4
 800995c:	f7ff ffa8 	bl	80098b0 <L_shift>
 8009960:	4544      	cmp	r4, r8
 8009962:	d950      	bls.n	8009a06 <__hexnan+0x10a>
 8009964:	2300      	movs	r3, #0
 8009966:	f1a4 0904 	sub.w	r9, r4, #4
 800996a:	f844 3c04 	str.w	r3, [r4, #-4]
 800996e:	461d      	mov	r5, r3
 8009970:	464c      	mov	r4, r9
 8009972:	f8cd b008 	str.w	fp, [sp, #8]
 8009976:	9a03      	ldr	r2, [sp, #12]
 8009978:	e7d7      	b.n	800992a <__hexnan+0x2e>
 800997a:	2929      	cmp	r1, #41	; 0x29
 800997c:	d156      	bne.n	8009a2c <__hexnan+0x130>
 800997e:	3202      	adds	r2, #2
 8009980:	f8ca 2000 	str.w	r2, [sl]
 8009984:	f1bb 0f00 	cmp.w	fp, #0
 8009988:	d050      	beq.n	8009a2c <__hexnan+0x130>
 800998a:	454c      	cmp	r4, r9
 800998c:	d206      	bcs.n	800999c <__hexnan+0xa0>
 800998e:	2d07      	cmp	r5, #7
 8009990:	dc04      	bgt.n	800999c <__hexnan+0xa0>
 8009992:	462a      	mov	r2, r5
 8009994:	4649      	mov	r1, r9
 8009996:	4620      	mov	r0, r4
 8009998:	f7ff ff8a 	bl	80098b0 <L_shift>
 800999c:	4544      	cmp	r4, r8
 800999e:	d934      	bls.n	8009a0a <__hexnan+0x10e>
 80099a0:	4623      	mov	r3, r4
 80099a2:	f1a8 0204 	sub.w	r2, r8, #4
 80099a6:	f853 1b04 	ldr.w	r1, [r3], #4
 80099aa:	429f      	cmp	r7, r3
 80099ac:	f842 1f04 	str.w	r1, [r2, #4]!
 80099b0:	d2f9      	bcs.n	80099a6 <__hexnan+0xaa>
 80099b2:	1b3b      	subs	r3, r7, r4
 80099b4:	f023 0303 	bic.w	r3, r3, #3
 80099b8:	3304      	adds	r3, #4
 80099ba:	3401      	adds	r4, #1
 80099bc:	3e03      	subs	r6, #3
 80099be:	42b4      	cmp	r4, r6
 80099c0:	bf88      	it	hi
 80099c2:	2304      	movhi	r3, #4
 80099c4:	2200      	movs	r2, #0
 80099c6:	4443      	add	r3, r8
 80099c8:	f843 2b04 	str.w	r2, [r3], #4
 80099cc:	429f      	cmp	r7, r3
 80099ce:	d2fb      	bcs.n	80099c8 <__hexnan+0xcc>
 80099d0:	683b      	ldr	r3, [r7, #0]
 80099d2:	b91b      	cbnz	r3, 80099dc <__hexnan+0xe0>
 80099d4:	4547      	cmp	r7, r8
 80099d6:	d127      	bne.n	8009a28 <__hexnan+0x12c>
 80099d8:	2301      	movs	r3, #1
 80099da:	603b      	str	r3, [r7, #0]
 80099dc:	2005      	movs	r0, #5
 80099de:	e026      	b.n	8009a2e <__hexnan+0x132>
 80099e0:	3501      	adds	r5, #1
 80099e2:	2d08      	cmp	r5, #8
 80099e4:	f10b 0b01 	add.w	fp, fp, #1
 80099e8:	dd06      	ble.n	80099f8 <__hexnan+0xfc>
 80099ea:	4544      	cmp	r4, r8
 80099ec:	d9c3      	bls.n	8009976 <__hexnan+0x7a>
 80099ee:	2300      	movs	r3, #0
 80099f0:	2501      	movs	r5, #1
 80099f2:	f844 3c04 	str.w	r3, [r4, #-4]
 80099f6:	3c04      	subs	r4, #4
 80099f8:	6822      	ldr	r2, [r4, #0]
 80099fa:	f000 000f 	and.w	r0, r0, #15
 80099fe:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8009a02:	6022      	str	r2, [r4, #0]
 8009a04:	e7b7      	b.n	8009976 <__hexnan+0x7a>
 8009a06:	2508      	movs	r5, #8
 8009a08:	e7b5      	b.n	8009976 <__hexnan+0x7a>
 8009a0a:	9b01      	ldr	r3, [sp, #4]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d0df      	beq.n	80099d0 <__hexnan+0xd4>
 8009a10:	f04f 32ff 	mov.w	r2, #4294967295
 8009a14:	f1c3 0320 	rsb	r3, r3, #32
 8009a18:	fa22 f303 	lsr.w	r3, r2, r3
 8009a1c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009a20:	401a      	ands	r2, r3
 8009a22:	f846 2c04 	str.w	r2, [r6, #-4]
 8009a26:	e7d3      	b.n	80099d0 <__hexnan+0xd4>
 8009a28:	3f04      	subs	r7, #4
 8009a2a:	e7d1      	b.n	80099d0 <__hexnan+0xd4>
 8009a2c:	2004      	movs	r0, #4
 8009a2e:	b007      	add	sp, #28
 8009a30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009a34 <_localeconv_r>:
 8009a34:	4800      	ldr	r0, [pc, #0]	; (8009a38 <_localeconv_r+0x4>)
 8009a36:	4770      	bx	lr
 8009a38:	200002e8 	.word	0x200002e8

08009a3c <malloc>:
 8009a3c:	4b02      	ldr	r3, [pc, #8]	; (8009a48 <malloc+0xc>)
 8009a3e:	4601      	mov	r1, r0
 8009a40:	6818      	ldr	r0, [r3, #0]
 8009a42:	f000 bd57 	b.w	800a4f4 <_malloc_r>
 8009a46:	bf00      	nop
 8009a48:	20000190 	.word	0x20000190

08009a4c <__ascii_mbtowc>:
 8009a4c:	b082      	sub	sp, #8
 8009a4e:	b901      	cbnz	r1, 8009a52 <__ascii_mbtowc+0x6>
 8009a50:	a901      	add	r1, sp, #4
 8009a52:	b142      	cbz	r2, 8009a66 <__ascii_mbtowc+0x1a>
 8009a54:	b14b      	cbz	r3, 8009a6a <__ascii_mbtowc+0x1e>
 8009a56:	7813      	ldrb	r3, [r2, #0]
 8009a58:	600b      	str	r3, [r1, #0]
 8009a5a:	7812      	ldrb	r2, [r2, #0]
 8009a5c:	1e10      	subs	r0, r2, #0
 8009a5e:	bf18      	it	ne
 8009a60:	2001      	movne	r0, #1
 8009a62:	b002      	add	sp, #8
 8009a64:	4770      	bx	lr
 8009a66:	4610      	mov	r0, r2
 8009a68:	e7fb      	b.n	8009a62 <__ascii_mbtowc+0x16>
 8009a6a:	f06f 0001 	mvn.w	r0, #1
 8009a6e:	e7f8      	b.n	8009a62 <__ascii_mbtowc+0x16>

08009a70 <memchr>:
 8009a70:	4603      	mov	r3, r0
 8009a72:	b510      	push	{r4, lr}
 8009a74:	b2c9      	uxtb	r1, r1
 8009a76:	4402      	add	r2, r0
 8009a78:	4293      	cmp	r3, r2
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	d101      	bne.n	8009a82 <memchr+0x12>
 8009a7e:	2000      	movs	r0, #0
 8009a80:	e003      	b.n	8009a8a <memchr+0x1a>
 8009a82:	7804      	ldrb	r4, [r0, #0]
 8009a84:	3301      	adds	r3, #1
 8009a86:	428c      	cmp	r4, r1
 8009a88:	d1f6      	bne.n	8009a78 <memchr+0x8>
 8009a8a:	bd10      	pop	{r4, pc}

08009a8c <_Balloc>:
 8009a8c:	b570      	push	{r4, r5, r6, lr}
 8009a8e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009a90:	4604      	mov	r4, r0
 8009a92:	460d      	mov	r5, r1
 8009a94:	b976      	cbnz	r6, 8009ab4 <_Balloc+0x28>
 8009a96:	2010      	movs	r0, #16
 8009a98:	f7ff ffd0 	bl	8009a3c <malloc>
 8009a9c:	4602      	mov	r2, r0
 8009a9e:	6260      	str	r0, [r4, #36]	; 0x24
 8009aa0:	b920      	cbnz	r0, 8009aac <_Balloc+0x20>
 8009aa2:	2166      	movs	r1, #102	; 0x66
 8009aa4:	4b17      	ldr	r3, [pc, #92]	; (8009b04 <_Balloc+0x78>)
 8009aa6:	4818      	ldr	r0, [pc, #96]	; (8009b08 <_Balloc+0x7c>)
 8009aa8:	f7fe fdb4 	bl	8008614 <__assert_func>
 8009aac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009ab0:	6006      	str	r6, [r0, #0]
 8009ab2:	60c6      	str	r6, [r0, #12]
 8009ab4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009ab6:	68f3      	ldr	r3, [r6, #12]
 8009ab8:	b183      	cbz	r3, 8009adc <_Balloc+0x50>
 8009aba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009abc:	68db      	ldr	r3, [r3, #12]
 8009abe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009ac2:	b9b8      	cbnz	r0, 8009af4 <_Balloc+0x68>
 8009ac4:	2101      	movs	r1, #1
 8009ac6:	fa01 f605 	lsl.w	r6, r1, r5
 8009aca:	1d72      	adds	r2, r6, #5
 8009acc:	4620      	mov	r0, r4
 8009ace:	0092      	lsls	r2, r2, #2
 8009ad0:	f000 fc94 	bl	800a3fc <_calloc_r>
 8009ad4:	b160      	cbz	r0, 8009af0 <_Balloc+0x64>
 8009ad6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009ada:	e00e      	b.n	8009afa <_Balloc+0x6e>
 8009adc:	2221      	movs	r2, #33	; 0x21
 8009ade:	2104      	movs	r1, #4
 8009ae0:	4620      	mov	r0, r4
 8009ae2:	f000 fc8b 	bl	800a3fc <_calloc_r>
 8009ae6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009ae8:	60f0      	str	r0, [r6, #12]
 8009aea:	68db      	ldr	r3, [r3, #12]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d1e4      	bne.n	8009aba <_Balloc+0x2e>
 8009af0:	2000      	movs	r0, #0
 8009af2:	bd70      	pop	{r4, r5, r6, pc}
 8009af4:	6802      	ldr	r2, [r0, #0]
 8009af6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009afa:	2300      	movs	r3, #0
 8009afc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009b00:	e7f7      	b.n	8009af2 <_Balloc+0x66>
 8009b02:	bf00      	nop
 8009b04:	0800b828 	.word	0x0800b828
 8009b08:	0800bacc 	.word	0x0800bacc

08009b0c <_Bfree>:
 8009b0c:	b570      	push	{r4, r5, r6, lr}
 8009b0e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009b10:	4605      	mov	r5, r0
 8009b12:	460c      	mov	r4, r1
 8009b14:	b976      	cbnz	r6, 8009b34 <_Bfree+0x28>
 8009b16:	2010      	movs	r0, #16
 8009b18:	f7ff ff90 	bl	8009a3c <malloc>
 8009b1c:	4602      	mov	r2, r0
 8009b1e:	6268      	str	r0, [r5, #36]	; 0x24
 8009b20:	b920      	cbnz	r0, 8009b2c <_Bfree+0x20>
 8009b22:	218a      	movs	r1, #138	; 0x8a
 8009b24:	4b08      	ldr	r3, [pc, #32]	; (8009b48 <_Bfree+0x3c>)
 8009b26:	4809      	ldr	r0, [pc, #36]	; (8009b4c <_Bfree+0x40>)
 8009b28:	f7fe fd74 	bl	8008614 <__assert_func>
 8009b2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009b30:	6006      	str	r6, [r0, #0]
 8009b32:	60c6      	str	r6, [r0, #12]
 8009b34:	b13c      	cbz	r4, 8009b46 <_Bfree+0x3a>
 8009b36:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009b38:	6862      	ldr	r2, [r4, #4]
 8009b3a:	68db      	ldr	r3, [r3, #12]
 8009b3c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009b40:	6021      	str	r1, [r4, #0]
 8009b42:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009b46:	bd70      	pop	{r4, r5, r6, pc}
 8009b48:	0800b828 	.word	0x0800b828
 8009b4c:	0800bacc 	.word	0x0800bacc

08009b50 <__multadd>:
 8009b50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b54:	4607      	mov	r7, r0
 8009b56:	460c      	mov	r4, r1
 8009b58:	461e      	mov	r6, r3
 8009b5a:	2000      	movs	r0, #0
 8009b5c:	690d      	ldr	r5, [r1, #16]
 8009b5e:	f101 0c14 	add.w	ip, r1, #20
 8009b62:	f8dc 3000 	ldr.w	r3, [ip]
 8009b66:	3001      	adds	r0, #1
 8009b68:	b299      	uxth	r1, r3
 8009b6a:	fb02 6101 	mla	r1, r2, r1, r6
 8009b6e:	0c1e      	lsrs	r6, r3, #16
 8009b70:	0c0b      	lsrs	r3, r1, #16
 8009b72:	fb02 3306 	mla	r3, r2, r6, r3
 8009b76:	b289      	uxth	r1, r1
 8009b78:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009b7c:	4285      	cmp	r5, r0
 8009b7e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009b82:	f84c 1b04 	str.w	r1, [ip], #4
 8009b86:	dcec      	bgt.n	8009b62 <__multadd+0x12>
 8009b88:	b30e      	cbz	r6, 8009bce <__multadd+0x7e>
 8009b8a:	68a3      	ldr	r3, [r4, #8]
 8009b8c:	42ab      	cmp	r3, r5
 8009b8e:	dc19      	bgt.n	8009bc4 <__multadd+0x74>
 8009b90:	6861      	ldr	r1, [r4, #4]
 8009b92:	4638      	mov	r0, r7
 8009b94:	3101      	adds	r1, #1
 8009b96:	f7ff ff79 	bl	8009a8c <_Balloc>
 8009b9a:	4680      	mov	r8, r0
 8009b9c:	b928      	cbnz	r0, 8009baa <__multadd+0x5a>
 8009b9e:	4602      	mov	r2, r0
 8009ba0:	21b5      	movs	r1, #181	; 0xb5
 8009ba2:	4b0c      	ldr	r3, [pc, #48]	; (8009bd4 <__multadd+0x84>)
 8009ba4:	480c      	ldr	r0, [pc, #48]	; (8009bd8 <__multadd+0x88>)
 8009ba6:	f7fe fd35 	bl	8008614 <__assert_func>
 8009baa:	6922      	ldr	r2, [r4, #16]
 8009bac:	f104 010c 	add.w	r1, r4, #12
 8009bb0:	3202      	adds	r2, #2
 8009bb2:	0092      	lsls	r2, r2, #2
 8009bb4:	300c      	adds	r0, #12
 8009bb6:	f7fd f987 	bl	8006ec8 <memcpy>
 8009bba:	4621      	mov	r1, r4
 8009bbc:	4638      	mov	r0, r7
 8009bbe:	f7ff ffa5 	bl	8009b0c <_Bfree>
 8009bc2:	4644      	mov	r4, r8
 8009bc4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009bc8:	3501      	adds	r5, #1
 8009bca:	615e      	str	r6, [r3, #20]
 8009bcc:	6125      	str	r5, [r4, #16]
 8009bce:	4620      	mov	r0, r4
 8009bd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009bd4:	0800ba41 	.word	0x0800ba41
 8009bd8:	0800bacc 	.word	0x0800bacc

08009bdc <__s2b>:
 8009bdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009be0:	4615      	mov	r5, r2
 8009be2:	2209      	movs	r2, #9
 8009be4:	461f      	mov	r7, r3
 8009be6:	3308      	adds	r3, #8
 8009be8:	460c      	mov	r4, r1
 8009bea:	fb93 f3f2 	sdiv	r3, r3, r2
 8009bee:	4606      	mov	r6, r0
 8009bf0:	2201      	movs	r2, #1
 8009bf2:	2100      	movs	r1, #0
 8009bf4:	429a      	cmp	r2, r3
 8009bf6:	db09      	blt.n	8009c0c <__s2b+0x30>
 8009bf8:	4630      	mov	r0, r6
 8009bfa:	f7ff ff47 	bl	8009a8c <_Balloc>
 8009bfe:	b940      	cbnz	r0, 8009c12 <__s2b+0x36>
 8009c00:	4602      	mov	r2, r0
 8009c02:	21ce      	movs	r1, #206	; 0xce
 8009c04:	4b18      	ldr	r3, [pc, #96]	; (8009c68 <__s2b+0x8c>)
 8009c06:	4819      	ldr	r0, [pc, #100]	; (8009c6c <__s2b+0x90>)
 8009c08:	f7fe fd04 	bl	8008614 <__assert_func>
 8009c0c:	0052      	lsls	r2, r2, #1
 8009c0e:	3101      	adds	r1, #1
 8009c10:	e7f0      	b.n	8009bf4 <__s2b+0x18>
 8009c12:	9b08      	ldr	r3, [sp, #32]
 8009c14:	2d09      	cmp	r5, #9
 8009c16:	6143      	str	r3, [r0, #20]
 8009c18:	f04f 0301 	mov.w	r3, #1
 8009c1c:	6103      	str	r3, [r0, #16]
 8009c1e:	dd16      	ble.n	8009c4e <__s2b+0x72>
 8009c20:	f104 0909 	add.w	r9, r4, #9
 8009c24:	46c8      	mov	r8, r9
 8009c26:	442c      	add	r4, r5
 8009c28:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009c2c:	4601      	mov	r1, r0
 8009c2e:	220a      	movs	r2, #10
 8009c30:	4630      	mov	r0, r6
 8009c32:	3b30      	subs	r3, #48	; 0x30
 8009c34:	f7ff ff8c 	bl	8009b50 <__multadd>
 8009c38:	45a0      	cmp	r8, r4
 8009c3a:	d1f5      	bne.n	8009c28 <__s2b+0x4c>
 8009c3c:	f1a5 0408 	sub.w	r4, r5, #8
 8009c40:	444c      	add	r4, r9
 8009c42:	1b2d      	subs	r5, r5, r4
 8009c44:	1963      	adds	r3, r4, r5
 8009c46:	42bb      	cmp	r3, r7
 8009c48:	db04      	blt.n	8009c54 <__s2b+0x78>
 8009c4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c4e:	2509      	movs	r5, #9
 8009c50:	340a      	adds	r4, #10
 8009c52:	e7f6      	b.n	8009c42 <__s2b+0x66>
 8009c54:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009c58:	4601      	mov	r1, r0
 8009c5a:	220a      	movs	r2, #10
 8009c5c:	4630      	mov	r0, r6
 8009c5e:	3b30      	subs	r3, #48	; 0x30
 8009c60:	f7ff ff76 	bl	8009b50 <__multadd>
 8009c64:	e7ee      	b.n	8009c44 <__s2b+0x68>
 8009c66:	bf00      	nop
 8009c68:	0800ba41 	.word	0x0800ba41
 8009c6c:	0800bacc 	.word	0x0800bacc

08009c70 <__hi0bits>:
 8009c70:	0c02      	lsrs	r2, r0, #16
 8009c72:	0412      	lsls	r2, r2, #16
 8009c74:	4603      	mov	r3, r0
 8009c76:	b9ca      	cbnz	r2, 8009cac <__hi0bits+0x3c>
 8009c78:	0403      	lsls	r3, r0, #16
 8009c7a:	2010      	movs	r0, #16
 8009c7c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009c80:	bf04      	itt	eq
 8009c82:	021b      	lsleq	r3, r3, #8
 8009c84:	3008      	addeq	r0, #8
 8009c86:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009c8a:	bf04      	itt	eq
 8009c8c:	011b      	lsleq	r3, r3, #4
 8009c8e:	3004      	addeq	r0, #4
 8009c90:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009c94:	bf04      	itt	eq
 8009c96:	009b      	lsleq	r3, r3, #2
 8009c98:	3002      	addeq	r0, #2
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	db05      	blt.n	8009caa <__hi0bits+0x3a>
 8009c9e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8009ca2:	f100 0001 	add.w	r0, r0, #1
 8009ca6:	bf08      	it	eq
 8009ca8:	2020      	moveq	r0, #32
 8009caa:	4770      	bx	lr
 8009cac:	2000      	movs	r0, #0
 8009cae:	e7e5      	b.n	8009c7c <__hi0bits+0xc>

08009cb0 <__lo0bits>:
 8009cb0:	6803      	ldr	r3, [r0, #0]
 8009cb2:	4602      	mov	r2, r0
 8009cb4:	f013 0007 	ands.w	r0, r3, #7
 8009cb8:	d00b      	beq.n	8009cd2 <__lo0bits+0x22>
 8009cba:	07d9      	lsls	r1, r3, #31
 8009cbc:	d421      	bmi.n	8009d02 <__lo0bits+0x52>
 8009cbe:	0798      	lsls	r0, r3, #30
 8009cc0:	bf49      	itett	mi
 8009cc2:	085b      	lsrmi	r3, r3, #1
 8009cc4:	089b      	lsrpl	r3, r3, #2
 8009cc6:	2001      	movmi	r0, #1
 8009cc8:	6013      	strmi	r3, [r2, #0]
 8009cca:	bf5c      	itt	pl
 8009ccc:	2002      	movpl	r0, #2
 8009cce:	6013      	strpl	r3, [r2, #0]
 8009cd0:	4770      	bx	lr
 8009cd2:	b299      	uxth	r1, r3
 8009cd4:	b909      	cbnz	r1, 8009cda <__lo0bits+0x2a>
 8009cd6:	2010      	movs	r0, #16
 8009cd8:	0c1b      	lsrs	r3, r3, #16
 8009cda:	b2d9      	uxtb	r1, r3
 8009cdc:	b909      	cbnz	r1, 8009ce2 <__lo0bits+0x32>
 8009cde:	3008      	adds	r0, #8
 8009ce0:	0a1b      	lsrs	r3, r3, #8
 8009ce2:	0719      	lsls	r1, r3, #28
 8009ce4:	bf04      	itt	eq
 8009ce6:	091b      	lsreq	r3, r3, #4
 8009ce8:	3004      	addeq	r0, #4
 8009cea:	0799      	lsls	r1, r3, #30
 8009cec:	bf04      	itt	eq
 8009cee:	089b      	lsreq	r3, r3, #2
 8009cf0:	3002      	addeq	r0, #2
 8009cf2:	07d9      	lsls	r1, r3, #31
 8009cf4:	d403      	bmi.n	8009cfe <__lo0bits+0x4e>
 8009cf6:	085b      	lsrs	r3, r3, #1
 8009cf8:	f100 0001 	add.w	r0, r0, #1
 8009cfc:	d003      	beq.n	8009d06 <__lo0bits+0x56>
 8009cfe:	6013      	str	r3, [r2, #0]
 8009d00:	4770      	bx	lr
 8009d02:	2000      	movs	r0, #0
 8009d04:	4770      	bx	lr
 8009d06:	2020      	movs	r0, #32
 8009d08:	4770      	bx	lr
	...

08009d0c <__i2b>:
 8009d0c:	b510      	push	{r4, lr}
 8009d0e:	460c      	mov	r4, r1
 8009d10:	2101      	movs	r1, #1
 8009d12:	f7ff febb 	bl	8009a8c <_Balloc>
 8009d16:	4602      	mov	r2, r0
 8009d18:	b928      	cbnz	r0, 8009d26 <__i2b+0x1a>
 8009d1a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009d1e:	4b04      	ldr	r3, [pc, #16]	; (8009d30 <__i2b+0x24>)
 8009d20:	4804      	ldr	r0, [pc, #16]	; (8009d34 <__i2b+0x28>)
 8009d22:	f7fe fc77 	bl	8008614 <__assert_func>
 8009d26:	2301      	movs	r3, #1
 8009d28:	6144      	str	r4, [r0, #20]
 8009d2a:	6103      	str	r3, [r0, #16]
 8009d2c:	bd10      	pop	{r4, pc}
 8009d2e:	bf00      	nop
 8009d30:	0800ba41 	.word	0x0800ba41
 8009d34:	0800bacc 	.word	0x0800bacc

08009d38 <__multiply>:
 8009d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d3c:	4691      	mov	r9, r2
 8009d3e:	690a      	ldr	r2, [r1, #16]
 8009d40:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009d44:	460c      	mov	r4, r1
 8009d46:	429a      	cmp	r2, r3
 8009d48:	bfbe      	ittt	lt
 8009d4a:	460b      	movlt	r3, r1
 8009d4c:	464c      	movlt	r4, r9
 8009d4e:	4699      	movlt	r9, r3
 8009d50:	6927      	ldr	r7, [r4, #16]
 8009d52:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009d56:	68a3      	ldr	r3, [r4, #8]
 8009d58:	6861      	ldr	r1, [r4, #4]
 8009d5a:	eb07 060a 	add.w	r6, r7, sl
 8009d5e:	42b3      	cmp	r3, r6
 8009d60:	b085      	sub	sp, #20
 8009d62:	bfb8      	it	lt
 8009d64:	3101      	addlt	r1, #1
 8009d66:	f7ff fe91 	bl	8009a8c <_Balloc>
 8009d6a:	b930      	cbnz	r0, 8009d7a <__multiply+0x42>
 8009d6c:	4602      	mov	r2, r0
 8009d6e:	f240 115d 	movw	r1, #349	; 0x15d
 8009d72:	4b43      	ldr	r3, [pc, #268]	; (8009e80 <__multiply+0x148>)
 8009d74:	4843      	ldr	r0, [pc, #268]	; (8009e84 <__multiply+0x14c>)
 8009d76:	f7fe fc4d 	bl	8008614 <__assert_func>
 8009d7a:	f100 0514 	add.w	r5, r0, #20
 8009d7e:	462b      	mov	r3, r5
 8009d80:	2200      	movs	r2, #0
 8009d82:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009d86:	4543      	cmp	r3, r8
 8009d88:	d321      	bcc.n	8009dce <__multiply+0x96>
 8009d8a:	f104 0314 	add.w	r3, r4, #20
 8009d8e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009d92:	f109 0314 	add.w	r3, r9, #20
 8009d96:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009d9a:	9202      	str	r2, [sp, #8]
 8009d9c:	1b3a      	subs	r2, r7, r4
 8009d9e:	3a15      	subs	r2, #21
 8009da0:	f022 0203 	bic.w	r2, r2, #3
 8009da4:	3204      	adds	r2, #4
 8009da6:	f104 0115 	add.w	r1, r4, #21
 8009daa:	428f      	cmp	r7, r1
 8009dac:	bf38      	it	cc
 8009dae:	2204      	movcc	r2, #4
 8009db0:	9201      	str	r2, [sp, #4]
 8009db2:	9a02      	ldr	r2, [sp, #8]
 8009db4:	9303      	str	r3, [sp, #12]
 8009db6:	429a      	cmp	r2, r3
 8009db8:	d80c      	bhi.n	8009dd4 <__multiply+0x9c>
 8009dba:	2e00      	cmp	r6, #0
 8009dbc:	dd03      	ble.n	8009dc6 <__multiply+0x8e>
 8009dbe:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d059      	beq.n	8009e7a <__multiply+0x142>
 8009dc6:	6106      	str	r6, [r0, #16]
 8009dc8:	b005      	add	sp, #20
 8009dca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dce:	f843 2b04 	str.w	r2, [r3], #4
 8009dd2:	e7d8      	b.n	8009d86 <__multiply+0x4e>
 8009dd4:	f8b3 a000 	ldrh.w	sl, [r3]
 8009dd8:	f1ba 0f00 	cmp.w	sl, #0
 8009ddc:	d023      	beq.n	8009e26 <__multiply+0xee>
 8009dde:	46a9      	mov	r9, r5
 8009de0:	f04f 0c00 	mov.w	ip, #0
 8009de4:	f104 0e14 	add.w	lr, r4, #20
 8009de8:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009dec:	f8d9 1000 	ldr.w	r1, [r9]
 8009df0:	fa1f fb82 	uxth.w	fp, r2
 8009df4:	b289      	uxth	r1, r1
 8009df6:	fb0a 110b 	mla	r1, sl, fp, r1
 8009dfa:	4461      	add	r1, ip
 8009dfc:	f8d9 c000 	ldr.w	ip, [r9]
 8009e00:	0c12      	lsrs	r2, r2, #16
 8009e02:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8009e06:	fb0a c202 	mla	r2, sl, r2, ip
 8009e0a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009e0e:	b289      	uxth	r1, r1
 8009e10:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009e14:	4577      	cmp	r7, lr
 8009e16:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009e1a:	f849 1b04 	str.w	r1, [r9], #4
 8009e1e:	d8e3      	bhi.n	8009de8 <__multiply+0xb0>
 8009e20:	9a01      	ldr	r2, [sp, #4]
 8009e22:	f845 c002 	str.w	ip, [r5, r2]
 8009e26:	9a03      	ldr	r2, [sp, #12]
 8009e28:	3304      	adds	r3, #4
 8009e2a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009e2e:	f1b9 0f00 	cmp.w	r9, #0
 8009e32:	d020      	beq.n	8009e76 <__multiply+0x13e>
 8009e34:	46ae      	mov	lr, r5
 8009e36:	f04f 0a00 	mov.w	sl, #0
 8009e3a:	6829      	ldr	r1, [r5, #0]
 8009e3c:	f104 0c14 	add.w	ip, r4, #20
 8009e40:	f8bc b000 	ldrh.w	fp, [ip]
 8009e44:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009e48:	b289      	uxth	r1, r1
 8009e4a:	fb09 220b 	mla	r2, r9, fp, r2
 8009e4e:	4492      	add	sl, r2
 8009e50:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009e54:	f84e 1b04 	str.w	r1, [lr], #4
 8009e58:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009e5c:	f8be 1000 	ldrh.w	r1, [lr]
 8009e60:	0c12      	lsrs	r2, r2, #16
 8009e62:	fb09 1102 	mla	r1, r9, r2, r1
 8009e66:	4567      	cmp	r7, ip
 8009e68:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009e6c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009e70:	d8e6      	bhi.n	8009e40 <__multiply+0x108>
 8009e72:	9a01      	ldr	r2, [sp, #4]
 8009e74:	50a9      	str	r1, [r5, r2]
 8009e76:	3504      	adds	r5, #4
 8009e78:	e79b      	b.n	8009db2 <__multiply+0x7a>
 8009e7a:	3e01      	subs	r6, #1
 8009e7c:	e79d      	b.n	8009dba <__multiply+0x82>
 8009e7e:	bf00      	nop
 8009e80:	0800ba41 	.word	0x0800ba41
 8009e84:	0800bacc 	.word	0x0800bacc

08009e88 <__pow5mult>:
 8009e88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e8c:	4615      	mov	r5, r2
 8009e8e:	f012 0203 	ands.w	r2, r2, #3
 8009e92:	4606      	mov	r6, r0
 8009e94:	460f      	mov	r7, r1
 8009e96:	d007      	beq.n	8009ea8 <__pow5mult+0x20>
 8009e98:	4c25      	ldr	r4, [pc, #148]	; (8009f30 <__pow5mult+0xa8>)
 8009e9a:	3a01      	subs	r2, #1
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009ea2:	f7ff fe55 	bl	8009b50 <__multadd>
 8009ea6:	4607      	mov	r7, r0
 8009ea8:	10ad      	asrs	r5, r5, #2
 8009eaa:	d03d      	beq.n	8009f28 <__pow5mult+0xa0>
 8009eac:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009eae:	b97c      	cbnz	r4, 8009ed0 <__pow5mult+0x48>
 8009eb0:	2010      	movs	r0, #16
 8009eb2:	f7ff fdc3 	bl	8009a3c <malloc>
 8009eb6:	4602      	mov	r2, r0
 8009eb8:	6270      	str	r0, [r6, #36]	; 0x24
 8009eba:	b928      	cbnz	r0, 8009ec8 <__pow5mult+0x40>
 8009ebc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009ec0:	4b1c      	ldr	r3, [pc, #112]	; (8009f34 <__pow5mult+0xac>)
 8009ec2:	481d      	ldr	r0, [pc, #116]	; (8009f38 <__pow5mult+0xb0>)
 8009ec4:	f7fe fba6 	bl	8008614 <__assert_func>
 8009ec8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009ecc:	6004      	str	r4, [r0, #0]
 8009ece:	60c4      	str	r4, [r0, #12]
 8009ed0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009ed4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009ed8:	b94c      	cbnz	r4, 8009eee <__pow5mult+0x66>
 8009eda:	f240 2171 	movw	r1, #625	; 0x271
 8009ede:	4630      	mov	r0, r6
 8009ee0:	f7ff ff14 	bl	8009d0c <__i2b>
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	4604      	mov	r4, r0
 8009ee8:	f8c8 0008 	str.w	r0, [r8, #8]
 8009eec:	6003      	str	r3, [r0, #0]
 8009eee:	f04f 0900 	mov.w	r9, #0
 8009ef2:	07eb      	lsls	r3, r5, #31
 8009ef4:	d50a      	bpl.n	8009f0c <__pow5mult+0x84>
 8009ef6:	4639      	mov	r1, r7
 8009ef8:	4622      	mov	r2, r4
 8009efa:	4630      	mov	r0, r6
 8009efc:	f7ff ff1c 	bl	8009d38 <__multiply>
 8009f00:	4680      	mov	r8, r0
 8009f02:	4639      	mov	r1, r7
 8009f04:	4630      	mov	r0, r6
 8009f06:	f7ff fe01 	bl	8009b0c <_Bfree>
 8009f0a:	4647      	mov	r7, r8
 8009f0c:	106d      	asrs	r5, r5, #1
 8009f0e:	d00b      	beq.n	8009f28 <__pow5mult+0xa0>
 8009f10:	6820      	ldr	r0, [r4, #0]
 8009f12:	b938      	cbnz	r0, 8009f24 <__pow5mult+0x9c>
 8009f14:	4622      	mov	r2, r4
 8009f16:	4621      	mov	r1, r4
 8009f18:	4630      	mov	r0, r6
 8009f1a:	f7ff ff0d 	bl	8009d38 <__multiply>
 8009f1e:	6020      	str	r0, [r4, #0]
 8009f20:	f8c0 9000 	str.w	r9, [r0]
 8009f24:	4604      	mov	r4, r0
 8009f26:	e7e4      	b.n	8009ef2 <__pow5mult+0x6a>
 8009f28:	4638      	mov	r0, r7
 8009f2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f2e:	bf00      	nop
 8009f30:	0800bc18 	.word	0x0800bc18
 8009f34:	0800b828 	.word	0x0800b828
 8009f38:	0800bacc 	.word	0x0800bacc

08009f3c <__lshift>:
 8009f3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f40:	460c      	mov	r4, r1
 8009f42:	4607      	mov	r7, r0
 8009f44:	4691      	mov	r9, r2
 8009f46:	6923      	ldr	r3, [r4, #16]
 8009f48:	6849      	ldr	r1, [r1, #4]
 8009f4a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009f4e:	68a3      	ldr	r3, [r4, #8]
 8009f50:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009f54:	f108 0601 	add.w	r6, r8, #1
 8009f58:	42b3      	cmp	r3, r6
 8009f5a:	db0b      	blt.n	8009f74 <__lshift+0x38>
 8009f5c:	4638      	mov	r0, r7
 8009f5e:	f7ff fd95 	bl	8009a8c <_Balloc>
 8009f62:	4605      	mov	r5, r0
 8009f64:	b948      	cbnz	r0, 8009f7a <__lshift+0x3e>
 8009f66:	4602      	mov	r2, r0
 8009f68:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009f6c:	4b29      	ldr	r3, [pc, #164]	; (800a014 <__lshift+0xd8>)
 8009f6e:	482a      	ldr	r0, [pc, #168]	; (800a018 <__lshift+0xdc>)
 8009f70:	f7fe fb50 	bl	8008614 <__assert_func>
 8009f74:	3101      	adds	r1, #1
 8009f76:	005b      	lsls	r3, r3, #1
 8009f78:	e7ee      	b.n	8009f58 <__lshift+0x1c>
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	f100 0114 	add.w	r1, r0, #20
 8009f80:	f100 0210 	add.w	r2, r0, #16
 8009f84:	4618      	mov	r0, r3
 8009f86:	4553      	cmp	r3, sl
 8009f88:	db37      	blt.n	8009ffa <__lshift+0xbe>
 8009f8a:	6920      	ldr	r0, [r4, #16]
 8009f8c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009f90:	f104 0314 	add.w	r3, r4, #20
 8009f94:	f019 091f 	ands.w	r9, r9, #31
 8009f98:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009f9c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009fa0:	d02f      	beq.n	800a002 <__lshift+0xc6>
 8009fa2:	468a      	mov	sl, r1
 8009fa4:	f04f 0c00 	mov.w	ip, #0
 8009fa8:	f1c9 0e20 	rsb	lr, r9, #32
 8009fac:	681a      	ldr	r2, [r3, #0]
 8009fae:	fa02 f209 	lsl.w	r2, r2, r9
 8009fb2:	ea42 020c 	orr.w	r2, r2, ip
 8009fb6:	f84a 2b04 	str.w	r2, [sl], #4
 8009fba:	f853 2b04 	ldr.w	r2, [r3], #4
 8009fbe:	4298      	cmp	r0, r3
 8009fc0:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009fc4:	d8f2      	bhi.n	8009fac <__lshift+0x70>
 8009fc6:	1b03      	subs	r3, r0, r4
 8009fc8:	3b15      	subs	r3, #21
 8009fca:	f023 0303 	bic.w	r3, r3, #3
 8009fce:	3304      	adds	r3, #4
 8009fd0:	f104 0215 	add.w	r2, r4, #21
 8009fd4:	4290      	cmp	r0, r2
 8009fd6:	bf38      	it	cc
 8009fd8:	2304      	movcc	r3, #4
 8009fda:	f841 c003 	str.w	ip, [r1, r3]
 8009fde:	f1bc 0f00 	cmp.w	ip, #0
 8009fe2:	d001      	beq.n	8009fe8 <__lshift+0xac>
 8009fe4:	f108 0602 	add.w	r6, r8, #2
 8009fe8:	3e01      	subs	r6, #1
 8009fea:	4638      	mov	r0, r7
 8009fec:	4621      	mov	r1, r4
 8009fee:	612e      	str	r6, [r5, #16]
 8009ff0:	f7ff fd8c 	bl	8009b0c <_Bfree>
 8009ff4:	4628      	mov	r0, r5
 8009ff6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ffa:	f842 0f04 	str.w	r0, [r2, #4]!
 8009ffe:	3301      	adds	r3, #1
 800a000:	e7c1      	b.n	8009f86 <__lshift+0x4a>
 800a002:	3904      	subs	r1, #4
 800a004:	f853 2b04 	ldr.w	r2, [r3], #4
 800a008:	4298      	cmp	r0, r3
 800a00a:	f841 2f04 	str.w	r2, [r1, #4]!
 800a00e:	d8f9      	bhi.n	800a004 <__lshift+0xc8>
 800a010:	e7ea      	b.n	8009fe8 <__lshift+0xac>
 800a012:	bf00      	nop
 800a014:	0800ba41 	.word	0x0800ba41
 800a018:	0800bacc 	.word	0x0800bacc

0800a01c <__mcmp>:
 800a01c:	4603      	mov	r3, r0
 800a01e:	690a      	ldr	r2, [r1, #16]
 800a020:	6900      	ldr	r0, [r0, #16]
 800a022:	b530      	push	{r4, r5, lr}
 800a024:	1a80      	subs	r0, r0, r2
 800a026:	d10d      	bne.n	800a044 <__mcmp+0x28>
 800a028:	3314      	adds	r3, #20
 800a02a:	3114      	adds	r1, #20
 800a02c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a030:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a034:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a038:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a03c:	4295      	cmp	r5, r2
 800a03e:	d002      	beq.n	800a046 <__mcmp+0x2a>
 800a040:	d304      	bcc.n	800a04c <__mcmp+0x30>
 800a042:	2001      	movs	r0, #1
 800a044:	bd30      	pop	{r4, r5, pc}
 800a046:	42a3      	cmp	r3, r4
 800a048:	d3f4      	bcc.n	800a034 <__mcmp+0x18>
 800a04a:	e7fb      	b.n	800a044 <__mcmp+0x28>
 800a04c:	f04f 30ff 	mov.w	r0, #4294967295
 800a050:	e7f8      	b.n	800a044 <__mcmp+0x28>
	...

0800a054 <__mdiff>:
 800a054:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a058:	460d      	mov	r5, r1
 800a05a:	4607      	mov	r7, r0
 800a05c:	4611      	mov	r1, r2
 800a05e:	4628      	mov	r0, r5
 800a060:	4614      	mov	r4, r2
 800a062:	f7ff ffdb 	bl	800a01c <__mcmp>
 800a066:	1e06      	subs	r6, r0, #0
 800a068:	d111      	bne.n	800a08e <__mdiff+0x3a>
 800a06a:	4631      	mov	r1, r6
 800a06c:	4638      	mov	r0, r7
 800a06e:	f7ff fd0d 	bl	8009a8c <_Balloc>
 800a072:	4602      	mov	r2, r0
 800a074:	b928      	cbnz	r0, 800a082 <__mdiff+0x2e>
 800a076:	f240 2132 	movw	r1, #562	; 0x232
 800a07a:	4b3a      	ldr	r3, [pc, #232]	; (800a164 <__mdiff+0x110>)
 800a07c:	483a      	ldr	r0, [pc, #232]	; (800a168 <__mdiff+0x114>)
 800a07e:	f7fe fac9 	bl	8008614 <__assert_func>
 800a082:	2301      	movs	r3, #1
 800a084:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800a088:	4610      	mov	r0, r2
 800a08a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a08e:	bfa4      	itt	ge
 800a090:	4623      	movge	r3, r4
 800a092:	462c      	movge	r4, r5
 800a094:	4638      	mov	r0, r7
 800a096:	6861      	ldr	r1, [r4, #4]
 800a098:	bfa6      	itte	ge
 800a09a:	461d      	movge	r5, r3
 800a09c:	2600      	movge	r6, #0
 800a09e:	2601      	movlt	r6, #1
 800a0a0:	f7ff fcf4 	bl	8009a8c <_Balloc>
 800a0a4:	4602      	mov	r2, r0
 800a0a6:	b918      	cbnz	r0, 800a0b0 <__mdiff+0x5c>
 800a0a8:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a0ac:	4b2d      	ldr	r3, [pc, #180]	; (800a164 <__mdiff+0x110>)
 800a0ae:	e7e5      	b.n	800a07c <__mdiff+0x28>
 800a0b0:	f102 0814 	add.w	r8, r2, #20
 800a0b4:	46c2      	mov	sl, r8
 800a0b6:	f04f 0c00 	mov.w	ip, #0
 800a0ba:	6927      	ldr	r7, [r4, #16]
 800a0bc:	60c6      	str	r6, [r0, #12]
 800a0be:	692e      	ldr	r6, [r5, #16]
 800a0c0:	f104 0014 	add.w	r0, r4, #20
 800a0c4:	f105 0914 	add.w	r9, r5, #20
 800a0c8:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800a0cc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a0d0:	3410      	adds	r4, #16
 800a0d2:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800a0d6:	f859 3b04 	ldr.w	r3, [r9], #4
 800a0da:	fa1f f18b 	uxth.w	r1, fp
 800a0de:	448c      	add	ip, r1
 800a0e0:	b299      	uxth	r1, r3
 800a0e2:	0c1b      	lsrs	r3, r3, #16
 800a0e4:	ebac 0101 	sub.w	r1, ip, r1
 800a0e8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a0ec:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800a0f0:	b289      	uxth	r1, r1
 800a0f2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800a0f6:	454e      	cmp	r6, r9
 800a0f8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800a0fc:	f84a 3b04 	str.w	r3, [sl], #4
 800a100:	d8e7      	bhi.n	800a0d2 <__mdiff+0x7e>
 800a102:	1b73      	subs	r3, r6, r5
 800a104:	3b15      	subs	r3, #21
 800a106:	f023 0303 	bic.w	r3, r3, #3
 800a10a:	3515      	adds	r5, #21
 800a10c:	3304      	adds	r3, #4
 800a10e:	42ae      	cmp	r6, r5
 800a110:	bf38      	it	cc
 800a112:	2304      	movcc	r3, #4
 800a114:	4418      	add	r0, r3
 800a116:	4443      	add	r3, r8
 800a118:	461e      	mov	r6, r3
 800a11a:	4605      	mov	r5, r0
 800a11c:	4575      	cmp	r5, lr
 800a11e:	d30e      	bcc.n	800a13e <__mdiff+0xea>
 800a120:	f10e 0103 	add.w	r1, lr, #3
 800a124:	1a09      	subs	r1, r1, r0
 800a126:	f021 0103 	bic.w	r1, r1, #3
 800a12a:	3803      	subs	r0, #3
 800a12c:	4586      	cmp	lr, r0
 800a12e:	bf38      	it	cc
 800a130:	2100      	movcc	r1, #0
 800a132:	4419      	add	r1, r3
 800a134:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800a138:	b18b      	cbz	r3, 800a15e <__mdiff+0x10a>
 800a13a:	6117      	str	r7, [r2, #16]
 800a13c:	e7a4      	b.n	800a088 <__mdiff+0x34>
 800a13e:	f855 8b04 	ldr.w	r8, [r5], #4
 800a142:	fa1f f188 	uxth.w	r1, r8
 800a146:	4461      	add	r1, ip
 800a148:	140c      	asrs	r4, r1, #16
 800a14a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a14e:	b289      	uxth	r1, r1
 800a150:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a154:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800a158:	f846 1b04 	str.w	r1, [r6], #4
 800a15c:	e7de      	b.n	800a11c <__mdiff+0xc8>
 800a15e:	3f01      	subs	r7, #1
 800a160:	e7e8      	b.n	800a134 <__mdiff+0xe0>
 800a162:	bf00      	nop
 800a164:	0800ba41 	.word	0x0800ba41
 800a168:	0800bacc 	.word	0x0800bacc

0800a16c <__ulp>:
 800a16c:	4b11      	ldr	r3, [pc, #68]	; (800a1b4 <__ulp+0x48>)
 800a16e:	400b      	ands	r3, r1
 800a170:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800a174:	2b00      	cmp	r3, #0
 800a176:	dd02      	ble.n	800a17e <__ulp+0x12>
 800a178:	2000      	movs	r0, #0
 800a17a:	4619      	mov	r1, r3
 800a17c:	4770      	bx	lr
 800a17e:	425b      	negs	r3, r3
 800a180:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800a184:	f04f 0000 	mov.w	r0, #0
 800a188:	f04f 0100 	mov.w	r1, #0
 800a18c:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a190:	da04      	bge.n	800a19c <__ulp+0x30>
 800a192:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a196:	fa43 f102 	asr.w	r1, r3, r2
 800a19a:	4770      	bx	lr
 800a19c:	f1a2 0314 	sub.w	r3, r2, #20
 800a1a0:	2b1e      	cmp	r3, #30
 800a1a2:	bfd6      	itet	le
 800a1a4:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800a1a8:	2301      	movgt	r3, #1
 800a1aa:	fa22 f303 	lsrle.w	r3, r2, r3
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	4770      	bx	lr
 800a1b2:	bf00      	nop
 800a1b4:	7ff00000 	.word	0x7ff00000

0800a1b8 <__b2d>:
 800a1b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a1bc:	6907      	ldr	r7, [r0, #16]
 800a1be:	f100 0914 	add.w	r9, r0, #20
 800a1c2:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800a1c6:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800a1ca:	f1a7 0804 	sub.w	r8, r7, #4
 800a1ce:	4630      	mov	r0, r6
 800a1d0:	f7ff fd4e 	bl	8009c70 <__hi0bits>
 800a1d4:	f1c0 0320 	rsb	r3, r0, #32
 800a1d8:	280a      	cmp	r0, #10
 800a1da:	600b      	str	r3, [r1, #0]
 800a1dc:	491f      	ldr	r1, [pc, #124]	; (800a25c <__b2d+0xa4>)
 800a1de:	dc17      	bgt.n	800a210 <__b2d+0x58>
 800a1e0:	45c1      	cmp	r9, r8
 800a1e2:	bf28      	it	cs
 800a1e4:	2200      	movcs	r2, #0
 800a1e6:	f1c0 0c0b 	rsb	ip, r0, #11
 800a1ea:	fa26 f30c 	lsr.w	r3, r6, ip
 800a1ee:	bf38      	it	cc
 800a1f0:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800a1f4:	ea43 0501 	orr.w	r5, r3, r1
 800a1f8:	f100 0315 	add.w	r3, r0, #21
 800a1fc:	fa06 f303 	lsl.w	r3, r6, r3
 800a200:	fa22 f20c 	lsr.w	r2, r2, ip
 800a204:	ea43 0402 	orr.w	r4, r3, r2
 800a208:	4620      	mov	r0, r4
 800a20a:	4629      	mov	r1, r5
 800a20c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a210:	45c1      	cmp	r9, r8
 800a212:	bf2e      	itee	cs
 800a214:	2200      	movcs	r2, #0
 800a216:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800a21a:	f1a7 0808 	subcc.w	r8, r7, #8
 800a21e:	f1b0 030b 	subs.w	r3, r0, #11
 800a222:	d016      	beq.n	800a252 <__b2d+0x9a>
 800a224:	f1c3 0720 	rsb	r7, r3, #32
 800a228:	fa22 f107 	lsr.w	r1, r2, r7
 800a22c:	45c8      	cmp	r8, r9
 800a22e:	fa06 f603 	lsl.w	r6, r6, r3
 800a232:	ea46 0601 	orr.w	r6, r6, r1
 800a236:	bf94      	ite	ls
 800a238:	2100      	movls	r1, #0
 800a23a:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800a23e:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800a242:	fa02 f003 	lsl.w	r0, r2, r3
 800a246:	40f9      	lsrs	r1, r7
 800a248:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a24c:	ea40 0401 	orr.w	r4, r0, r1
 800a250:	e7da      	b.n	800a208 <__b2d+0x50>
 800a252:	4614      	mov	r4, r2
 800a254:	ea46 0501 	orr.w	r5, r6, r1
 800a258:	e7d6      	b.n	800a208 <__b2d+0x50>
 800a25a:	bf00      	nop
 800a25c:	3ff00000 	.word	0x3ff00000

0800a260 <__d2b>:
 800a260:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800a264:	2101      	movs	r1, #1
 800a266:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800a26a:	4690      	mov	r8, r2
 800a26c:	461d      	mov	r5, r3
 800a26e:	f7ff fc0d 	bl	8009a8c <_Balloc>
 800a272:	4604      	mov	r4, r0
 800a274:	b930      	cbnz	r0, 800a284 <__d2b+0x24>
 800a276:	4602      	mov	r2, r0
 800a278:	f240 310a 	movw	r1, #778	; 0x30a
 800a27c:	4b24      	ldr	r3, [pc, #144]	; (800a310 <__d2b+0xb0>)
 800a27e:	4825      	ldr	r0, [pc, #148]	; (800a314 <__d2b+0xb4>)
 800a280:	f7fe f9c8 	bl	8008614 <__assert_func>
 800a284:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800a288:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800a28c:	bb2d      	cbnz	r5, 800a2da <__d2b+0x7a>
 800a28e:	9301      	str	r3, [sp, #4]
 800a290:	f1b8 0300 	subs.w	r3, r8, #0
 800a294:	d026      	beq.n	800a2e4 <__d2b+0x84>
 800a296:	4668      	mov	r0, sp
 800a298:	9300      	str	r3, [sp, #0]
 800a29a:	f7ff fd09 	bl	8009cb0 <__lo0bits>
 800a29e:	9900      	ldr	r1, [sp, #0]
 800a2a0:	b1f0      	cbz	r0, 800a2e0 <__d2b+0x80>
 800a2a2:	9a01      	ldr	r2, [sp, #4]
 800a2a4:	f1c0 0320 	rsb	r3, r0, #32
 800a2a8:	fa02 f303 	lsl.w	r3, r2, r3
 800a2ac:	430b      	orrs	r3, r1
 800a2ae:	40c2      	lsrs	r2, r0
 800a2b0:	6163      	str	r3, [r4, #20]
 800a2b2:	9201      	str	r2, [sp, #4]
 800a2b4:	9b01      	ldr	r3, [sp, #4]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	bf14      	ite	ne
 800a2ba:	2102      	movne	r1, #2
 800a2bc:	2101      	moveq	r1, #1
 800a2be:	61a3      	str	r3, [r4, #24]
 800a2c0:	6121      	str	r1, [r4, #16]
 800a2c2:	b1c5      	cbz	r5, 800a2f6 <__d2b+0x96>
 800a2c4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a2c8:	4405      	add	r5, r0
 800a2ca:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a2ce:	603d      	str	r5, [r7, #0]
 800a2d0:	6030      	str	r0, [r6, #0]
 800a2d2:	4620      	mov	r0, r4
 800a2d4:	b002      	add	sp, #8
 800a2d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a2de:	e7d6      	b.n	800a28e <__d2b+0x2e>
 800a2e0:	6161      	str	r1, [r4, #20]
 800a2e2:	e7e7      	b.n	800a2b4 <__d2b+0x54>
 800a2e4:	a801      	add	r0, sp, #4
 800a2e6:	f7ff fce3 	bl	8009cb0 <__lo0bits>
 800a2ea:	2101      	movs	r1, #1
 800a2ec:	9b01      	ldr	r3, [sp, #4]
 800a2ee:	6121      	str	r1, [r4, #16]
 800a2f0:	6163      	str	r3, [r4, #20]
 800a2f2:	3020      	adds	r0, #32
 800a2f4:	e7e5      	b.n	800a2c2 <__d2b+0x62>
 800a2f6:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800a2fa:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a2fe:	6038      	str	r0, [r7, #0]
 800a300:	6918      	ldr	r0, [r3, #16]
 800a302:	f7ff fcb5 	bl	8009c70 <__hi0bits>
 800a306:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800a30a:	6031      	str	r1, [r6, #0]
 800a30c:	e7e1      	b.n	800a2d2 <__d2b+0x72>
 800a30e:	bf00      	nop
 800a310:	0800ba41 	.word	0x0800ba41
 800a314:	0800bacc 	.word	0x0800bacc

0800a318 <__ratio>:
 800a318:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a31c:	4688      	mov	r8, r1
 800a31e:	4669      	mov	r1, sp
 800a320:	4681      	mov	r9, r0
 800a322:	f7ff ff49 	bl	800a1b8 <__b2d>
 800a326:	460f      	mov	r7, r1
 800a328:	4604      	mov	r4, r0
 800a32a:	460d      	mov	r5, r1
 800a32c:	4640      	mov	r0, r8
 800a32e:	a901      	add	r1, sp, #4
 800a330:	f7ff ff42 	bl	800a1b8 <__b2d>
 800a334:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a338:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a33c:	468b      	mov	fp, r1
 800a33e:	eba3 0c02 	sub.w	ip, r3, r2
 800a342:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a346:	1a9b      	subs	r3, r3, r2
 800a348:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	bfd5      	itete	le
 800a350:	460a      	movle	r2, r1
 800a352:	462a      	movgt	r2, r5
 800a354:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a358:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a35c:	bfd8      	it	le
 800a35e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a362:	465b      	mov	r3, fp
 800a364:	4602      	mov	r2, r0
 800a366:	4639      	mov	r1, r7
 800a368:	4620      	mov	r0, r4
 800a36a:	f7f6 f9e9 	bl	8000740 <__aeabi_ddiv>
 800a36e:	b003      	add	sp, #12
 800a370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a374 <__copybits>:
 800a374:	3901      	subs	r1, #1
 800a376:	b570      	push	{r4, r5, r6, lr}
 800a378:	1149      	asrs	r1, r1, #5
 800a37a:	6914      	ldr	r4, [r2, #16]
 800a37c:	3101      	adds	r1, #1
 800a37e:	f102 0314 	add.w	r3, r2, #20
 800a382:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a386:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a38a:	1f05      	subs	r5, r0, #4
 800a38c:	42a3      	cmp	r3, r4
 800a38e:	d30c      	bcc.n	800a3aa <__copybits+0x36>
 800a390:	1aa3      	subs	r3, r4, r2
 800a392:	3b11      	subs	r3, #17
 800a394:	f023 0303 	bic.w	r3, r3, #3
 800a398:	3211      	adds	r2, #17
 800a39a:	42a2      	cmp	r2, r4
 800a39c:	bf88      	it	hi
 800a39e:	2300      	movhi	r3, #0
 800a3a0:	4418      	add	r0, r3
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	4288      	cmp	r0, r1
 800a3a6:	d305      	bcc.n	800a3b4 <__copybits+0x40>
 800a3a8:	bd70      	pop	{r4, r5, r6, pc}
 800a3aa:	f853 6b04 	ldr.w	r6, [r3], #4
 800a3ae:	f845 6f04 	str.w	r6, [r5, #4]!
 800a3b2:	e7eb      	b.n	800a38c <__copybits+0x18>
 800a3b4:	f840 3b04 	str.w	r3, [r0], #4
 800a3b8:	e7f4      	b.n	800a3a4 <__copybits+0x30>

0800a3ba <__any_on>:
 800a3ba:	f100 0214 	add.w	r2, r0, #20
 800a3be:	6900      	ldr	r0, [r0, #16]
 800a3c0:	114b      	asrs	r3, r1, #5
 800a3c2:	4298      	cmp	r0, r3
 800a3c4:	b510      	push	{r4, lr}
 800a3c6:	db11      	blt.n	800a3ec <__any_on+0x32>
 800a3c8:	dd0a      	ble.n	800a3e0 <__any_on+0x26>
 800a3ca:	f011 011f 	ands.w	r1, r1, #31
 800a3ce:	d007      	beq.n	800a3e0 <__any_on+0x26>
 800a3d0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a3d4:	fa24 f001 	lsr.w	r0, r4, r1
 800a3d8:	fa00 f101 	lsl.w	r1, r0, r1
 800a3dc:	428c      	cmp	r4, r1
 800a3de:	d10b      	bne.n	800a3f8 <__any_on+0x3e>
 800a3e0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a3e4:	4293      	cmp	r3, r2
 800a3e6:	d803      	bhi.n	800a3f0 <__any_on+0x36>
 800a3e8:	2000      	movs	r0, #0
 800a3ea:	bd10      	pop	{r4, pc}
 800a3ec:	4603      	mov	r3, r0
 800a3ee:	e7f7      	b.n	800a3e0 <__any_on+0x26>
 800a3f0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a3f4:	2900      	cmp	r1, #0
 800a3f6:	d0f5      	beq.n	800a3e4 <__any_on+0x2a>
 800a3f8:	2001      	movs	r0, #1
 800a3fa:	e7f6      	b.n	800a3ea <__any_on+0x30>

0800a3fc <_calloc_r>:
 800a3fc:	b570      	push	{r4, r5, r6, lr}
 800a3fe:	fba1 5402 	umull	r5, r4, r1, r2
 800a402:	b934      	cbnz	r4, 800a412 <_calloc_r+0x16>
 800a404:	4629      	mov	r1, r5
 800a406:	f000 f875 	bl	800a4f4 <_malloc_r>
 800a40a:	4606      	mov	r6, r0
 800a40c:	b928      	cbnz	r0, 800a41a <_calloc_r+0x1e>
 800a40e:	4630      	mov	r0, r6
 800a410:	bd70      	pop	{r4, r5, r6, pc}
 800a412:	220c      	movs	r2, #12
 800a414:	2600      	movs	r6, #0
 800a416:	6002      	str	r2, [r0, #0]
 800a418:	e7f9      	b.n	800a40e <_calloc_r+0x12>
 800a41a:	462a      	mov	r2, r5
 800a41c:	4621      	mov	r1, r4
 800a41e:	f7fc fd61 	bl	8006ee4 <memset>
 800a422:	e7f4      	b.n	800a40e <_calloc_r+0x12>

0800a424 <_free_r>:
 800a424:	b538      	push	{r3, r4, r5, lr}
 800a426:	4605      	mov	r5, r0
 800a428:	2900      	cmp	r1, #0
 800a42a:	d040      	beq.n	800a4ae <_free_r+0x8a>
 800a42c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a430:	1f0c      	subs	r4, r1, #4
 800a432:	2b00      	cmp	r3, #0
 800a434:	bfb8      	it	lt
 800a436:	18e4      	addlt	r4, r4, r3
 800a438:	f000 feba 	bl	800b1b0 <__malloc_lock>
 800a43c:	4a1c      	ldr	r2, [pc, #112]	; (800a4b0 <_free_r+0x8c>)
 800a43e:	6813      	ldr	r3, [r2, #0]
 800a440:	b933      	cbnz	r3, 800a450 <_free_r+0x2c>
 800a442:	6063      	str	r3, [r4, #4]
 800a444:	6014      	str	r4, [r2, #0]
 800a446:	4628      	mov	r0, r5
 800a448:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a44c:	f000 beb6 	b.w	800b1bc <__malloc_unlock>
 800a450:	42a3      	cmp	r3, r4
 800a452:	d908      	bls.n	800a466 <_free_r+0x42>
 800a454:	6820      	ldr	r0, [r4, #0]
 800a456:	1821      	adds	r1, r4, r0
 800a458:	428b      	cmp	r3, r1
 800a45a:	bf01      	itttt	eq
 800a45c:	6819      	ldreq	r1, [r3, #0]
 800a45e:	685b      	ldreq	r3, [r3, #4]
 800a460:	1809      	addeq	r1, r1, r0
 800a462:	6021      	streq	r1, [r4, #0]
 800a464:	e7ed      	b.n	800a442 <_free_r+0x1e>
 800a466:	461a      	mov	r2, r3
 800a468:	685b      	ldr	r3, [r3, #4]
 800a46a:	b10b      	cbz	r3, 800a470 <_free_r+0x4c>
 800a46c:	42a3      	cmp	r3, r4
 800a46e:	d9fa      	bls.n	800a466 <_free_r+0x42>
 800a470:	6811      	ldr	r1, [r2, #0]
 800a472:	1850      	adds	r0, r2, r1
 800a474:	42a0      	cmp	r0, r4
 800a476:	d10b      	bne.n	800a490 <_free_r+0x6c>
 800a478:	6820      	ldr	r0, [r4, #0]
 800a47a:	4401      	add	r1, r0
 800a47c:	1850      	adds	r0, r2, r1
 800a47e:	4283      	cmp	r3, r0
 800a480:	6011      	str	r1, [r2, #0]
 800a482:	d1e0      	bne.n	800a446 <_free_r+0x22>
 800a484:	6818      	ldr	r0, [r3, #0]
 800a486:	685b      	ldr	r3, [r3, #4]
 800a488:	4401      	add	r1, r0
 800a48a:	6011      	str	r1, [r2, #0]
 800a48c:	6053      	str	r3, [r2, #4]
 800a48e:	e7da      	b.n	800a446 <_free_r+0x22>
 800a490:	d902      	bls.n	800a498 <_free_r+0x74>
 800a492:	230c      	movs	r3, #12
 800a494:	602b      	str	r3, [r5, #0]
 800a496:	e7d6      	b.n	800a446 <_free_r+0x22>
 800a498:	6820      	ldr	r0, [r4, #0]
 800a49a:	1821      	adds	r1, r4, r0
 800a49c:	428b      	cmp	r3, r1
 800a49e:	bf01      	itttt	eq
 800a4a0:	6819      	ldreq	r1, [r3, #0]
 800a4a2:	685b      	ldreq	r3, [r3, #4]
 800a4a4:	1809      	addeq	r1, r1, r0
 800a4a6:	6021      	streq	r1, [r4, #0]
 800a4a8:	6063      	str	r3, [r4, #4]
 800a4aa:	6054      	str	r4, [r2, #4]
 800a4ac:	e7cb      	b.n	800a446 <_free_r+0x22>
 800a4ae:	bd38      	pop	{r3, r4, r5, pc}
 800a4b0:	2000267c 	.word	0x2000267c

0800a4b4 <sbrk_aligned>:
 800a4b4:	b570      	push	{r4, r5, r6, lr}
 800a4b6:	4e0e      	ldr	r6, [pc, #56]	; (800a4f0 <sbrk_aligned+0x3c>)
 800a4b8:	460c      	mov	r4, r1
 800a4ba:	6831      	ldr	r1, [r6, #0]
 800a4bc:	4605      	mov	r5, r0
 800a4be:	b911      	cbnz	r1, 800a4c6 <sbrk_aligned+0x12>
 800a4c0:	f000 fb46 	bl	800ab50 <_sbrk_r>
 800a4c4:	6030      	str	r0, [r6, #0]
 800a4c6:	4621      	mov	r1, r4
 800a4c8:	4628      	mov	r0, r5
 800a4ca:	f000 fb41 	bl	800ab50 <_sbrk_r>
 800a4ce:	1c43      	adds	r3, r0, #1
 800a4d0:	d00a      	beq.n	800a4e8 <sbrk_aligned+0x34>
 800a4d2:	1cc4      	adds	r4, r0, #3
 800a4d4:	f024 0403 	bic.w	r4, r4, #3
 800a4d8:	42a0      	cmp	r0, r4
 800a4da:	d007      	beq.n	800a4ec <sbrk_aligned+0x38>
 800a4dc:	1a21      	subs	r1, r4, r0
 800a4de:	4628      	mov	r0, r5
 800a4e0:	f000 fb36 	bl	800ab50 <_sbrk_r>
 800a4e4:	3001      	adds	r0, #1
 800a4e6:	d101      	bne.n	800a4ec <sbrk_aligned+0x38>
 800a4e8:	f04f 34ff 	mov.w	r4, #4294967295
 800a4ec:	4620      	mov	r0, r4
 800a4ee:	bd70      	pop	{r4, r5, r6, pc}
 800a4f0:	20002680 	.word	0x20002680

0800a4f4 <_malloc_r>:
 800a4f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4f8:	1ccd      	adds	r5, r1, #3
 800a4fa:	f025 0503 	bic.w	r5, r5, #3
 800a4fe:	3508      	adds	r5, #8
 800a500:	2d0c      	cmp	r5, #12
 800a502:	bf38      	it	cc
 800a504:	250c      	movcc	r5, #12
 800a506:	2d00      	cmp	r5, #0
 800a508:	4607      	mov	r7, r0
 800a50a:	db01      	blt.n	800a510 <_malloc_r+0x1c>
 800a50c:	42a9      	cmp	r1, r5
 800a50e:	d905      	bls.n	800a51c <_malloc_r+0x28>
 800a510:	230c      	movs	r3, #12
 800a512:	2600      	movs	r6, #0
 800a514:	603b      	str	r3, [r7, #0]
 800a516:	4630      	mov	r0, r6
 800a518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a51c:	4e2e      	ldr	r6, [pc, #184]	; (800a5d8 <_malloc_r+0xe4>)
 800a51e:	f000 fe47 	bl	800b1b0 <__malloc_lock>
 800a522:	6833      	ldr	r3, [r6, #0]
 800a524:	461c      	mov	r4, r3
 800a526:	bb34      	cbnz	r4, 800a576 <_malloc_r+0x82>
 800a528:	4629      	mov	r1, r5
 800a52a:	4638      	mov	r0, r7
 800a52c:	f7ff ffc2 	bl	800a4b4 <sbrk_aligned>
 800a530:	1c43      	adds	r3, r0, #1
 800a532:	4604      	mov	r4, r0
 800a534:	d14d      	bne.n	800a5d2 <_malloc_r+0xde>
 800a536:	6834      	ldr	r4, [r6, #0]
 800a538:	4626      	mov	r6, r4
 800a53a:	2e00      	cmp	r6, #0
 800a53c:	d140      	bne.n	800a5c0 <_malloc_r+0xcc>
 800a53e:	6823      	ldr	r3, [r4, #0]
 800a540:	4631      	mov	r1, r6
 800a542:	4638      	mov	r0, r7
 800a544:	eb04 0803 	add.w	r8, r4, r3
 800a548:	f000 fb02 	bl	800ab50 <_sbrk_r>
 800a54c:	4580      	cmp	r8, r0
 800a54e:	d13a      	bne.n	800a5c6 <_malloc_r+0xd2>
 800a550:	6821      	ldr	r1, [r4, #0]
 800a552:	3503      	adds	r5, #3
 800a554:	1a6d      	subs	r5, r5, r1
 800a556:	f025 0503 	bic.w	r5, r5, #3
 800a55a:	3508      	adds	r5, #8
 800a55c:	2d0c      	cmp	r5, #12
 800a55e:	bf38      	it	cc
 800a560:	250c      	movcc	r5, #12
 800a562:	4638      	mov	r0, r7
 800a564:	4629      	mov	r1, r5
 800a566:	f7ff ffa5 	bl	800a4b4 <sbrk_aligned>
 800a56a:	3001      	adds	r0, #1
 800a56c:	d02b      	beq.n	800a5c6 <_malloc_r+0xd2>
 800a56e:	6823      	ldr	r3, [r4, #0]
 800a570:	442b      	add	r3, r5
 800a572:	6023      	str	r3, [r4, #0]
 800a574:	e00e      	b.n	800a594 <_malloc_r+0xa0>
 800a576:	6822      	ldr	r2, [r4, #0]
 800a578:	1b52      	subs	r2, r2, r5
 800a57a:	d41e      	bmi.n	800a5ba <_malloc_r+0xc6>
 800a57c:	2a0b      	cmp	r2, #11
 800a57e:	d916      	bls.n	800a5ae <_malloc_r+0xba>
 800a580:	1961      	adds	r1, r4, r5
 800a582:	42a3      	cmp	r3, r4
 800a584:	6025      	str	r5, [r4, #0]
 800a586:	bf18      	it	ne
 800a588:	6059      	strne	r1, [r3, #4]
 800a58a:	6863      	ldr	r3, [r4, #4]
 800a58c:	bf08      	it	eq
 800a58e:	6031      	streq	r1, [r6, #0]
 800a590:	5162      	str	r2, [r4, r5]
 800a592:	604b      	str	r3, [r1, #4]
 800a594:	4638      	mov	r0, r7
 800a596:	f104 060b 	add.w	r6, r4, #11
 800a59a:	f000 fe0f 	bl	800b1bc <__malloc_unlock>
 800a59e:	f026 0607 	bic.w	r6, r6, #7
 800a5a2:	1d23      	adds	r3, r4, #4
 800a5a4:	1af2      	subs	r2, r6, r3
 800a5a6:	d0b6      	beq.n	800a516 <_malloc_r+0x22>
 800a5a8:	1b9b      	subs	r3, r3, r6
 800a5aa:	50a3      	str	r3, [r4, r2]
 800a5ac:	e7b3      	b.n	800a516 <_malloc_r+0x22>
 800a5ae:	6862      	ldr	r2, [r4, #4]
 800a5b0:	42a3      	cmp	r3, r4
 800a5b2:	bf0c      	ite	eq
 800a5b4:	6032      	streq	r2, [r6, #0]
 800a5b6:	605a      	strne	r2, [r3, #4]
 800a5b8:	e7ec      	b.n	800a594 <_malloc_r+0xa0>
 800a5ba:	4623      	mov	r3, r4
 800a5bc:	6864      	ldr	r4, [r4, #4]
 800a5be:	e7b2      	b.n	800a526 <_malloc_r+0x32>
 800a5c0:	4634      	mov	r4, r6
 800a5c2:	6876      	ldr	r6, [r6, #4]
 800a5c4:	e7b9      	b.n	800a53a <_malloc_r+0x46>
 800a5c6:	230c      	movs	r3, #12
 800a5c8:	4638      	mov	r0, r7
 800a5ca:	603b      	str	r3, [r7, #0]
 800a5cc:	f000 fdf6 	bl	800b1bc <__malloc_unlock>
 800a5d0:	e7a1      	b.n	800a516 <_malloc_r+0x22>
 800a5d2:	6025      	str	r5, [r4, #0]
 800a5d4:	e7de      	b.n	800a594 <_malloc_r+0xa0>
 800a5d6:	bf00      	nop
 800a5d8:	2000267c 	.word	0x2000267c

0800a5dc <__ssputs_r>:
 800a5dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5e0:	688e      	ldr	r6, [r1, #8]
 800a5e2:	4682      	mov	sl, r0
 800a5e4:	429e      	cmp	r6, r3
 800a5e6:	460c      	mov	r4, r1
 800a5e8:	4690      	mov	r8, r2
 800a5ea:	461f      	mov	r7, r3
 800a5ec:	d838      	bhi.n	800a660 <__ssputs_r+0x84>
 800a5ee:	898a      	ldrh	r2, [r1, #12]
 800a5f0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a5f4:	d032      	beq.n	800a65c <__ssputs_r+0x80>
 800a5f6:	6825      	ldr	r5, [r4, #0]
 800a5f8:	6909      	ldr	r1, [r1, #16]
 800a5fa:	3301      	adds	r3, #1
 800a5fc:	eba5 0901 	sub.w	r9, r5, r1
 800a600:	6965      	ldr	r5, [r4, #20]
 800a602:	444b      	add	r3, r9
 800a604:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a608:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a60c:	106d      	asrs	r5, r5, #1
 800a60e:	429d      	cmp	r5, r3
 800a610:	bf38      	it	cc
 800a612:	461d      	movcc	r5, r3
 800a614:	0553      	lsls	r3, r2, #21
 800a616:	d531      	bpl.n	800a67c <__ssputs_r+0xa0>
 800a618:	4629      	mov	r1, r5
 800a61a:	f7ff ff6b 	bl	800a4f4 <_malloc_r>
 800a61e:	4606      	mov	r6, r0
 800a620:	b950      	cbnz	r0, 800a638 <__ssputs_r+0x5c>
 800a622:	230c      	movs	r3, #12
 800a624:	f04f 30ff 	mov.w	r0, #4294967295
 800a628:	f8ca 3000 	str.w	r3, [sl]
 800a62c:	89a3      	ldrh	r3, [r4, #12]
 800a62e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a632:	81a3      	strh	r3, [r4, #12]
 800a634:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a638:	464a      	mov	r2, r9
 800a63a:	6921      	ldr	r1, [r4, #16]
 800a63c:	f7fc fc44 	bl	8006ec8 <memcpy>
 800a640:	89a3      	ldrh	r3, [r4, #12]
 800a642:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a646:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a64a:	81a3      	strh	r3, [r4, #12]
 800a64c:	6126      	str	r6, [r4, #16]
 800a64e:	444e      	add	r6, r9
 800a650:	6026      	str	r6, [r4, #0]
 800a652:	463e      	mov	r6, r7
 800a654:	6165      	str	r5, [r4, #20]
 800a656:	eba5 0509 	sub.w	r5, r5, r9
 800a65a:	60a5      	str	r5, [r4, #8]
 800a65c:	42be      	cmp	r6, r7
 800a65e:	d900      	bls.n	800a662 <__ssputs_r+0x86>
 800a660:	463e      	mov	r6, r7
 800a662:	4632      	mov	r2, r6
 800a664:	4641      	mov	r1, r8
 800a666:	6820      	ldr	r0, [r4, #0]
 800a668:	f000 fd88 	bl	800b17c <memmove>
 800a66c:	68a3      	ldr	r3, [r4, #8]
 800a66e:	2000      	movs	r0, #0
 800a670:	1b9b      	subs	r3, r3, r6
 800a672:	60a3      	str	r3, [r4, #8]
 800a674:	6823      	ldr	r3, [r4, #0]
 800a676:	4433      	add	r3, r6
 800a678:	6023      	str	r3, [r4, #0]
 800a67a:	e7db      	b.n	800a634 <__ssputs_r+0x58>
 800a67c:	462a      	mov	r2, r5
 800a67e:	f000 fda3 	bl	800b1c8 <_realloc_r>
 800a682:	4606      	mov	r6, r0
 800a684:	2800      	cmp	r0, #0
 800a686:	d1e1      	bne.n	800a64c <__ssputs_r+0x70>
 800a688:	4650      	mov	r0, sl
 800a68a:	6921      	ldr	r1, [r4, #16]
 800a68c:	f7ff feca 	bl	800a424 <_free_r>
 800a690:	e7c7      	b.n	800a622 <__ssputs_r+0x46>
	...

0800a694 <_svfiprintf_r>:
 800a694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a698:	4698      	mov	r8, r3
 800a69a:	898b      	ldrh	r3, [r1, #12]
 800a69c:	4607      	mov	r7, r0
 800a69e:	061b      	lsls	r3, r3, #24
 800a6a0:	460d      	mov	r5, r1
 800a6a2:	4614      	mov	r4, r2
 800a6a4:	b09d      	sub	sp, #116	; 0x74
 800a6a6:	d50e      	bpl.n	800a6c6 <_svfiprintf_r+0x32>
 800a6a8:	690b      	ldr	r3, [r1, #16]
 800a6aa:	b963      	cbnz	r3, 800a6c6 <_svfiprintf_r+0x32>
 800a6ac:	2140      	movs	r1, #64	; 0x40
 800a6ae:	f7ff ff21 	bl	800a4f4 <_malloc_r>
 800a6b2:	6028      	str	r0, [r5, #0]
 800a6b4:	6128      	str	r0, [r5, #16]
 800a6b6:	b920      	cbnz	r0, 800a6c2 <_svfiprintf_r+0x2e>
 800a6b8:	230c      	movs	r3, #12
 800a6ba:	603b      	str	r3, [r7, #0]
 800a6bc:	f04f 30ff 	mov.w	r0, #4294967295
 800a6c0:	e0d1      	b.n	800a866 <_svfiprintf_r+0x1d2>
 800a6c2:	2340      	movs	r3, #64	; 0x40
 800a6c4:	616b      	str	r3, [r5, #20]
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	9309      	str	r3, [sp, #36]	; 0x24
 800a6ca:	2320      	movs	r3, #32
 800a6cc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a6d0:	2330      	movs	r3, #48	; 0x30
 800a6d2:	f04f 0901 	mov.w	r9, #1
 800a6d6:	f8cd 800c 	str.w	r8, [sp, #12]
 800a6da:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a880 <_svfiprintf_r+0x1ec>
 800a6de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a6e2:	4623      	mov	r3, r4
 800a6e4:	469a      	mov	sl, r3
 800a6e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a6ea:	b10a      	cbz	r2, 800a6f0 <_svfiprintf_r+0x5c>
 800a6ec:	2a25      	cmp	r2, #37	; 0x25
 800a6ee:	d1f9      	bne.n	800a6e4 <_svfiprintf_r+0x50>
 800a6f0:	ebba 0b04 	subs.w	fp, sl, r4
 800a6f4:	d00b      	beq.n	800a70e <_svfiprintf_r+0x7a>
 800a6f6:	465b      	mov	r3, fp
 800a6f8:	4622      	mov	r2, r4
 800a6fa:	4629      	mov	r1, r5
 800a6fc:	4638      	mov	r0, r7
 800a6fe:	f7ff ff6d 	bl	800a5dc <__ssputs_r>
 800a702:	3001      	adds	r0, #1
 800a704:	f000 80aa 	beq.w	800a85c <_svfiprintf_r+0x1c8>
 800a708:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a70a:	445a      	add	r2, fp
 800a70c:	9209      	str	r2, [sp, #36]	; 0x24
 800a70e:	f89a 3000 	ldrb.w	r3, [sl]
 800a712:	2b00      	cmp	r3, #0
 800a714:	f000 80a2 	beq.w	800a85c <_svfiprintf_r+0x1c8>
 800a718:	2300      	movs	r3, #0
 800a71a:	f04f 32ff 	mov.w	r2, #4294967295
 800a71e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a722:	f10a 0a01 	add.w	sl, sl, #1
 800a726:	9304      	str	r3, [sp, #16]
 800a728:	9307      	str	r3, [sp, #28]
 800a72a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a72e:	931a      	str	r3, [sp, #104]	; 0x68
 800a730:	4654      	mov	r4, sl
 800a732:	2205      	movs	r2, #5
 800a734:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a738:	4851      	ldr	r0, [pc, #324]	; (800a880 <_svfiprintf_r+0x1ec>)
 800a73a:	f7ff f999 	bl	8009a70 <memchr>
 800a73e:	9a04      	ldr	r2, [sp, #16]
 800a740:	b9d8      	cbnz	r0, 800a77a <_svfiprintf_r+0xe6>
 800a742:	06d0      	lsls	r0, r2, #27
 800a744:	bf44      	itt	mi
 800a746:	2320      	movmi	r3, #32
 800a748:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a74c:	0711      	lsls	r1, r2, #28
 800a74e:	bf44      	itt	mi
 800a750:	232b      	movmi	r3, #43	; 0x2b
 800a752:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a756:	f89a 3000 	ldrb.w	r3, [sl]
 800a75a:	2b2a      	cmp	r3, #42	; 0x2a
 800a75c:	d015      	beq.n	800a78a <_svfiprintf_r+0xf6>
 800a75e:	4654      	mov	r4, sl
 800a760:	2000      	movs	r0, #0
 800a762:	f04f 0c0a 	mov.w	ip, #10
 800a766:	9a07      	ldr	r2, [sp, #28]
 800a768:	4621      	mov	r1, r4
 800a76a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a76e:	3b30      	subs	r3, #48	; 0x30
 800a770:	2b09      	cmp	r3, #9
 800a772:	d94e      	bls.n	800a812 <_svfiprintf_r+0x17e>
 800a774:	b1b0      	cbz	r0, 800a7a4 <_svfiprintf_r+0x110>
 800a776:	9207      	str	r2, [sp, #28]
 800a778:	e014      	b.n	800a7a4 <_svfiprintf_r+0x110>
 800a77a:	eba0 0308 	sub.w	r3, r0, r8
 800a77e:	fa09 f303 	lsl.w	r3, r9, r3
 800a782:	4313      	orrs	r3, r2
 800a784:	46a2      	mov	sl, r4
 800a786:	9304      	str	r3, [sp, #16]
 800a788:	e7d2      	b.n	800a730 <_svfiprintf_r+0x9c>
 800a78a:	9b03      	ldr	r3, [sp, #12]
 800a78c:	1d19      	adds	r1, r3, #4
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	9103      	str	r1, [sp, #12]
 800a792:	2b00      	cmp	r3, #0
 800a794:	bfbb      	ittet	lt
 800a796:	425b      	neglt	r3, r3
 800a798:	f042 0202 	orrlt.w	r2, r2, #2
 800a79c:	9307      	strge	r3, [sp, #28]
 800a79e:	9307      	strlt	r3, [sp, #28]
 800a7a0:	bfb8      	it	lt
 800a7a2:	9204      	strlt	r2, [sp, #16]
 800a7a4:	7823      	ldrb	r3, [r4, #0]
 800a7a6:	2b2e      	cmp	r3, #46	; 0x2e
 800a7a8:	d10c      	bne.n	800a7c4 <_svfiprintf_r+0x130>
 800a7aa:	7863      	ldrb	r3, [r4, #1]
 800a7ac:	2b2a      	cmp	r3, #42	; 0x2a
 800a7ae:	d135      	bne.n	800a81c <_svfiprintf_r+0x188>
 800a7b0:	9b03      	ldr	r3, [sp, #12]
 800a7b2:	3402      	adds	r4, #2
 800a7b4:	1d1a      	adds	r2, r3, #4
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	9203      	str	r2, [sp, #12]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	bfb8      	it	lt
 800a7be:	f04f 33ff 	movlt.w	r3, #4294967295
 800a7c2:	9305      	str	r3, [sp, #20]
 800a7c4:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800a884 <_svfiprintf_r+0x1f0>
 800a7c8:	2203      	movs	r2, #3
 800a7ca:	4650      	mov	r0, sl
 800a7cc:	7821      	ldrb	r1, [r4, #0]
 800a7ce:	f7ff f94f 	bl	8009a70 <memchr>
 800a7d2:	b140      	cbz	r0, 800a7e6 <_svfiprintf_r+0x152>
 800a7d4:	2340      	movs	r3, #64	; 0x40
 800a7d6:	eba0 000a 	sub.w	r0, r0, sl
 800a7da:	fa03 f000 	lsl.w	r0, r3, r0
 800a7de:	9b04      	ldr	r3, [sp, #16]
 800a7e0:	3401      	adds	r4, #1
 800a7e2:	4303      	orrs	r3, r0
 800a7e4:	9304      	str	r3, [sp, #16]
 800a7e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7ea:	2206      	movs	r2, #6
 800a7ec:	4826      	ldr	r0, [pc, #152]	; (800a888 <_svfiprintf_r+0x1f4>)
 800a7ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a7f2:	f7ff f93d 	bl	8009a70 <memchr>
 800a7f6:	2800      	cmp	r0, #0
 800a7f8:	d038      	beq.n	800a86c <_svfiprintf_r+0x1d8>
 800a7fa:	4b24      	ldr	r3, [pc, #144]	; (800a88c <_svfiprintf_r+0x1f8>)
 800a7fc:	bb1b      	cbnz	r3, 800a846 <_svfiprintf_r+0x1b2>
 800a7fe:	9b03      	ldr	r3, [sp, #12]
 800a800:	3307      	adds	r3, #7
 800a802:	f023 0307 	bic.w	r3, r3, #7
 800a806:	3308      	adds	r3, #8
 800a808:	9303      	str	r3, [sp, #12]
 800a80a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a80c:	4433      	add	r3, r6
 800a80e:	9309      	str	r3, [sp, #36]	; 0x24
 800a810:	e767      	b.n	800a6e2 <_svfiprintf_r+0x4e>
 800a812:	460c      	mov	r4, r1
 800a814:	2001      	movs	r0, #1
 800a816:	fb0c 3202 	mla	r2, ip, r2, r3
 800a81a:	e7a5      	b.n	800a768 <_svfiprintf_r+0xd4>
 800a81c:	2300      	movs	r3, #0
 800a81e:	f04f 0c0a 	mov.w	ip, #10
 800a822:	4619      	mov	r1, r3
 800a824:	3401      	adds	r4, #1
 800a826:	9305      	str	r3, [sp, #20]
 800a828:	4620      	mov	r0, r4
 800a82a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a82e:	3a30      	subs	r2, #48	; 0x30
 800a830:	2a09      	cmp	r2, #9
 800a832:	d903      	bls.n	800a83c <_svfiprintf_r+0x1a8>
 800a834:	2b00      	cmp	r3, #0
 800a836:	d0c5      	beq.n	800a7c4 <_svfiprintf_r+0x130>
 800a838:	9105      	str	r1, [sp, #20]
 800a83a:	e7c3      	b.n	800a7c4 <_svfiprintf_r+0x130>
 800a83c:	4604      	mov	r4, r0
 800a83e:	2301      	movs	r3, #1
 800a840:	fb0c 2101 	mla	r1, ip, r1, r2
 800a844:	e7f0      	b.n	800a828 <_svfiprintf_r+0x194>
 800a846:	ab03      	add	r3, sp, #12
 800a848:	9300      	str	r3, [sp, #0]
 800a84a:	462a      	mov	r2, r5
 800a84c:	4638      	mov	r0, r7
 800a84e:	4b10      	ldr	r3, [pc, #64]	; (800a890 <_svfiprintf_r+0x1fc>)
 800a850:	a904      	add	r1, sp, #16
 800a852:	f7fc fbed 	bl	8007030 <_printf_float>
 800a856:	1c42      	adds	r2, r0, #1
 800a858:	4606      	mov	r6, r0
 800a85a:	d1d6      	bne.n	800a80a <_svfiprintf_r+0x176>
 800a85c:	89ab      	ldrh	r3, [r5, #12]
 800a85e:	065b      	lsls	r3, r3, #25
 800a860:	f53f af2c 	bmi.w	800a6bc <_svfiprintf_r+0x28>
 800a864:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a866:	b01d      	add	sp, #116	; 0x74
 800a868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a86c:	ab03      	add	r3, sp, #12
 800a86e:	9300      	str	r3, [sp, #0]
 800a870:	462a      	mov	r2, r5
 800a872:	4638      	mov	r0, r7
 800a874:	4b06      	ldr	r3, [pc, #24]	; (800a890 <_svfiprintf_r+0x1fc>)
 800a876:	a904      	add	r1, sp, #16
 800a878:	f7fc fe76 	bl	8007568 <_printf_i>
 800a87c:	e7eb      	b.n	800a856 <_svfiprintf_r+0x1c2>
 800a87e:	bf00      	nop
 800a880:	0800bc24 	.word	0x0800bc24
 800a884:	0800bc2a 	.word	0x0800bc2a
 800a888:	0800bc2e 	.word	0x0800bc2e
 800a88c:	08007031 	.word	0x08007031
 800a890:	0800a5dd 	.word	0x0800a5dd

0800a894 <__sfputc_r>:
 800a894:	6893      	ldr	r3, [r2, #8]
 800a896:	b410      	push	{r4}
 800a898:	3b01      	subs	r3, #1
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	6093      	str	r3, [r2, #8]
 800a89e:	da07      	bge.n	800a8b0 <__sfputc_r+0x1c>
 800a8a0:	6994      	ldr	r4, [r2, #24]
 800a8a2:	42a3      	cmp	r3, r4
 800a8a4:	db01      	blt.n	800a8aa <__sfputc_r+0x16>
 800a8a6:	290a      	cmp	r1, #10
 800a8a8:	d102      	bne.n	800a8b0 <__sfputc_r+0x1c>
 800a8aa:	bc10      	pop	{r4}
 800a8ac:	f000 b974 	b.w	800ab98 <__swbuf_r>
 800a8b0:	6813      	ldr	r3, [r2, #0]
 800a8b2:	1c58      	adds	r0, r3, #1
 800a8b4:	6010      	str	r0, [r2, #0]
 800a8b6:	7019      	strb	r1, [r3, #0]
 800a8b8:	4608      	mov	r0, r1
 800a8ba:	bc10      	pop	{r4}
 800a8bc:	4770      	bx	lr

0800a8be <__sfputs_r>:
 800a8be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8c0:	4606      	mov	r6, r0
 800a8c2:	460f      	mov	r7, r1
 800a8c4:	4614      	mov	r4, r2
 800a8c6:	18d5      	adds	r5, r2, r3
 800a8c8:	42ac      	cmp	r4, r5
 800a8ca:	d101      	bne.n	800a8d0 <__sfputs_r+0x12>
 800a8cc:	2000      	movs	r0, #0
 800a8ce:	e007      	b.n	800a8e0 <__sfputs_r+0x22>
 800a8d0:	463a      	mov	r2, r7
 800a8d2:	4630      	mov	r0, r6
 800a8d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8d8:	f7ff ffdc 	bl	800a894 <__sfputc_r>
 800a8dc:	1c43      	adds	r3, r0, #1
 800a8de:	d1f3      	bne.n	800a8c8 <__sfputs_r+0xa>
 800a8e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a8e4 <_vfiprintf_r>:
 800a8e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8e8:	460d      	mov	r5, r1
 800a8ea:	4614      	mov	r4, r2
 800a8ec:	4698      	mov	r8, r3
 800a8ee:	4606      	mov	r6, r0
 800a8f0:	b09d      	sub	sp, #116	; 0x74
 800a8f2:	b118      	cbz	r0, 800a8fc <_vfiprintf_r+0x18>
 800a8f4:	6983      	ldr	r3, [r0, #24]
 800a8f6:	b90b      	cbnz	r3, 800a8fc <_vfiprintf_r+0x18>
 800a8f8:	f000 fb3a 	bl	800af70 <__sinit>
 800a8fc:	4b89      	ldr	r3, [pc, #548]	; (800ab24 <_vfiprintf_r+0x240>)
 800a8fe:	429d      	cmp	r5, r3
 800a900:	d11b      	bne.n	800a93a <_vfiprintf_r+0x56>
 800a902:	6875      	ldr	r5, [r6, #4]
 800a904:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a906:	07d9      	lsls	r1, r3, #31
 800a908:	d405      	bmi.n	800a916 <_vfiprintf_r+0x32>
 800a90a:	89ab      	ldrh	r3, [r5, #12]
 800a90c:	059a      	lsls	r2, r3, #22
 800a90e:	d402      	bmi.n	800a916 <_vfiprintf_r+0x32>
 800a910:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a912:	f000 fbcb 	bl	800b0ac <__retarget_lock_acquire_recursive>
 800a916:	89ab      	ldrh	r3, [r5, #12]
 800a918:	071b      	lsls	r3, r3, #28
 800a91a:	d501      	bpl.n	800a920 <_vfiprintf_r+0x3c>
 800a91c:	692b      	ldr	r3, [r5, #16]
 800a91e:	b9eb      	cbnz	r3, 800a95c <_vfiprintf_r+0x78>
 800a920:	4629      	mov	r1, r5
 800a922:	4630      	mov	r0, r6
 800a924:	f000 f998 	bl	800ac58 <__swsetup_r>
 800a928:	b1c0      	cbz	r0, 800a95c <_vfiprintf_r+0x78>
 800a92a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a92c:	07dc      	lsls	r4, r3, #31
 800a92e:	d50e      	bpl.n	800a94e <_vfiprintf_r+0x6a>
 800a930:	f04f 30ff 	mov.w	r0, #4294967295
 800a934:	b01d      	add	sp, #116	; 0x74
 800a936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a93a:	4b7b      	ldr	r3, [pc, #492]	; (800ab28 <_vfiprintf_r+0x244>)
 800a93c:	429d      	cmp	r5, r3
 800a93e:	d101      	bne.n	800a944 <_vfiprintf_r+0x60>
 800a940:	68b5      	ldr	r5, [r6, #8]
 800a942:	e7df      	b.n	800a904 <_vfiprintf_r+0x20>
 800a944:	4b79      	ldr	r3, [pc, #484]	; (800ab2c <_vfiprintf_r+0x248>)
 800a946:	429d      	cmp	r5, r3
 800a948:	bf08      	it	eq
 800a94a:	68f5      	ldreq	r5, [r6, #12]
 800a94c:	e7da      	b.n	800a904 <_vfiprintf_r+0x20>
 800a94e:	89ab      	ldrh	r3, [r5, #12]
 800a950:	0598      	lsls	r0, r3, #22
 800a952:	d4ed      	bmi.n	800a930 <_vfiprintf_r+0x4c>
 800a954:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a956:	f000 fbaa 	bl	800b0ae <__retarget_lock_release_recursive>
 800a95a:	e7e9      	b.n	800a930 <_vfiprintf_r+0x4c>
 800a95c:	2300      	movs	r3, #0
 800a95e:	9309      	str	r3, [sp, #36]	; 0x24
 800a960:	2320      	movs	r3, #32
 800a962:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a966:	2330      	movs	r3, #48	; 0x30
 800a968:	f04f 0901 	mov.w	r9, #1
 800a96c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a970:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800ab30 <_vfiprintf_r+0x24c>
 800a974:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a978:	4623      	mov	r3, r4
 800a97a:	469a      	mov	sl, r3
 800a97c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a980:	b10a      	cbz	r2, 800a986 <_vfiprintf_r+0xa2>
 800a982:	2a25      	cmp	r2, #37	; 0x25
 800a984:	d1f9      	bne.n	800a97a <_vfiprintf_r+0x96>
 800a986:	ebba 0b04 	subs.w	fp, sl, r4
 800a98a:	d00b      	beq.n	800a9a4 <_vfiprintf_r+0xc0>
 800a98c:	465b      	mov	r3, fp
 800a98e:	4622      	mov	r2, r4
 800a990:	4629      	mov	r1, r5
 800a992:	4630      	mov	r0, r6
 800a994:	f7ff ff93 	bl	800a8be <__sfputs_r>
 800a998:	3001      	adds	r0, #1
 800a99a:	f000 80aa 	beq.w	800aaf2 <_vfiprintf_r+0x20e>
 800a99e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a9a0:	445a      	add	r2, fp
 800a9a2:	9209      	str	r2, [sp, #36]	; 0x24
 800a9a4:	f89a 3000 	ldrb.w	r3, [sl]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	f000 80a2 	beq.w	800aaf2 <_vfiprintf_r+0x20e>
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	f04f 32ff 	mov.w	r2, #4294967295
 800a9b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a9b8:	f10a 0a01 	add.w	sl, sl, #1
 800a9bc:	9304      	str	r3, [sp, #16]
 800a9be:	9307      	str	r3, [sp, #28]
 800a9c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a9c4:	931a      	str	r3, [sp, #104]	; 0x68
 800a9c6:	4654      	mov	r4, sl
 800a9c8:	2205      	movs	r2, #5
 800a9ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9ce:	4858      	ldr	r0, [pc, #352]	; (800ab30 <_vfiprintf_r+0x24c>)
 800a9d0:	f7ff f84e 	bl	8009a70 <memchr>
 800a9d4:	9a04      	ldr	r2, [sp, #16]
 800a9d6:	b9d8      	cbnz	r0, 800aa10 <_vfiprintf_r+0x12c>
 800a9d8:	06d1      	lsls	r1, r2, #27
 800a9da:	bf44      	itt	mi
 800a9dc:	2320      	movmi	r3, #32
 800a9de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a9e2:	0713      	lsls	r3, r2, #28
 800a9e4:	bf44      	itt	mi
 800a9e6:	232b      	movmi	r3, #43	; 0x2b
 800a9e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a9ec:	f89a 3000 	ldrb.w	r3, [sl]
 800a9f0:	2b2a      	cmp	r3, #42	; 0x2a
 800a9f2:	d015      	beq.n	800aa20 <_vfiprintf_r+0x13c>
 800a9f4:	4654      	mov	r4, sl
 800a9f6:	2000      	movs	r0, #0
 800a9f8:	f04f 0c0a 	mov.w	ip, #10
 800a9fc:	9a07      	ldr	r2, [sp, #28]
 800a9fe:	4621      	mov	r1, r4
 800aa00:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aa04:	3b30      	subs	r3, #48	; 0x30
 800aa06:	2b09      	cmp	r3, #9
 800aa08:	d94e      	bls.n	800aaa8 <_vfiprintf_r+0x1c4>
 800aa0a:	b1b0      	cbz	r0, 800aa3a <_vfiprintf_r+0x156>
 800aa0c:	9207      	str	r2, [sp, #28]
 800aa0e:	e014      	b.n	800aa3a <_vfiprintf_r+0x156>
 800aa10:	eba0 0308 	sub.w	r3, r0, r8
 800aa14:	fa09 f303 	lsl.w	r3, r9, r3
 800aa18:	4313      	orrs	r3, r2
 800aa1a:	46a2      	mov	sl, r4
 800aa1c:	9304      	str	r3, [sp, #16]
 800aa1e:	e7d2      	b.n	800a9c6 <_vfiprintf_r+0xe2>
 800aa20:	9b03      	ldr	r3, [sp, #12]
 800aa22:	1d19      	adds	r1, r3, #4
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	9103      	str	r1, [sp, #12]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	bfbb      	ittet	lt
 800aa2c:	425b      	neglt	r3, r3
 800aa2e:	f042 0202 	orrlt.w	r2, r2, #2
 800aa32:	9307      	strge	r3, [sp, #28]
 800aa34:	9307      	strlt	r3, [sp, #28]
 800aa36:	bfb8      	it	lt
 800aa38:	9204      	strlt	r2, [sp, #16]
 800aa3a:	7823      	ldrb	r3, [r4, #0]
 800aa3c:	2b2e      	cmp	r3, #46	; 0x2e
 800aa3e:	d10c      	bne.n	800aa5a <_vfiprintf_r+0x176>
 800aa40:	7863      	ldrb	r3, [r4, #1]
 800aa42:	2b2a      	cmp	r3, #42	; 0x2a
 800aa44:	d135      	bne.n	800aab2 <_vfiprintf_r+0x1ce>
 800aa46:	9b03      	ldr	r3, [sp, #12]
 800aa48:	3402      	adds	r4, #2
 800aa4a:	1d1a      	adds	r2, r3, #4
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	9203      	str	r2, [sp, #12]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	bfb8      	it	lt
 800aa54:	f04f 33ff 	movlt.w	r3, #4294967295
 800aa58:	9305      	str	r3, [sp, #20]
 800aa5a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800ab34 <_vfiprintf_r+0x250>
 800aa5e:	2203      	movs	r2, #3
 800aa60:	4650      	mov	r0, sl
 800aa62:	7821      	ldrb	r1, [r4, #0]
 800aa64:	f7ff f804 	bl	8009a70 <memchr>
 800aa68:	b140      	cbz	r0, 800aa7c <_vfiprintf_r+0x198>
 800aa6a:	2340      	movs	r3, #64	; 0x40
 800aa6c:	eba0 000a 	sub.w	r0, r0, sl
 800aa70:	fa03 f000 	lsl.w	r0, r3, r0
 800aa74:	9b04      	ldr	r3, [sp, #16]
 800aa76:	3401      	adds	r4, #1
 800aa78:	4303      	orrs	r3, r0
 800aa7a:	9304      	str	r3, [sp, #16]
 800aa7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa80:	2206      	movs	r2, #6
 800aa82:	482d      	ldr	r0, [pc, #180]	; (800ab38 <_vfiprintf_r+0x254>)
 800aa84:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aa88:	f7fe fff2 	bl	8009a70 <memchr>
 800aa8c:	2800      	cmp	r0, #0
 800aa8e:	d03f      	beq.n	800ab10 <_vfiprintf_r+0x22c>
 800aa90:	4b2a      	ldr	r3, [pc, #168]	; (800ab3c <_vfiprintf_r+0x258>)
 800aa92:	bb1b      	cbnz	r3, 800aadc <_vfiprintf_r+0x1f8>
 800aa94:	9b03      	ldr	r3, [sp, #12]
 800aa96:	3307      	adds	r3, #7
 800aa98:	f023 0307 	bic.w	r3, r3, #7
 800aa9c:	3308      	adds	r3, #8
 800aa9e:	9303      	str	r3, [sp, #12]
 800aaa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aaa2:	443b      	add	r3, r7
 800aaa4:	9309      	str	r3, [sp, #36]	; 0x24
 800aaa6:	e767      	b.n	800a978 <_vfiprintf_r+0x94>
 800aaa8:	460c      	mov	r4, r1
 800aaaa:	2001      	movs	r0, #1
 800aaac:	fb0c 3202 	mla	r2, ip, r2, r3
 800aab0:	e7a5      	b.n	800a9fe <_vfiprintf_r+0x11a>
 800aab2:	2300      	movs	r3, #0
 800aab4:	f04f 0c0a 	mov.w	ip, #10
 800aab8:	4619      	mov	r1, r3
 800aaba:	3401      	adds	r4, #1
 800aabc:	9305      	str	r3, [sp, #20]
 800aabe:	4620      	mov	r0, r4
 800aac0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aac4:	3a30      	subs	r2, #48	; 0x30
 800aac6:	2a09      	cmp	r2, #9
 800aac8:	d903      	bls.n	800aad2 <_vfiprintf_r+0x1ee>
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d0c5      	beq.n	800aa5a <_vfiprintf_r+0x176>
 800aace:	9105      	str	r1, [sp, #20]
 800aad0:	e7c3      	b.n	800aa5a <_vfiprintf_r+0x176>
 800aad2:	4604      	mov	r4, r0
 800aad4:	2301      	movs	r3, #1
 800aad6:	fb0c 2101 	mla	r1, ip, r1, r2
 800aada:	e7f0      	b.n	800aabe <_vfiprintf_r+0x1da>
 800aadc:	ab03      	add	r3, sp, #12
 800aade:	9300      	str	r3, [sp, #0]
 800aae0:	462a      	mov	r2, r5
 800aae2:	4630      	mov	r0, r6
 800aae4:	4b16      	ldr	r3, [pc, #88]	; (800ab40 <_vfiprintf_r+0x25c>)
 800aae6:	a904      	add	r1, sp, #16
 800aae8:	f7fc faa2 	bl	8007030 <_printf_float>
 800aaec:	4607      	mov	r7, r0
 800aaee:	1c78      	adds	r0, r7, #1
 800aaf0:	d1d6      	bne.n	800aaa0 <_vfiprintf_r+0x1bc>
 800aaf2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aaf4:	07d9      	lsls	r1, r3, #31
 800aaf6:	d405      	bmi.n	800ab04 <_vfiprintf_r+0x220>
 800aaf8:	89ab      	ldrh	r3, [r5, #12]
 800aafa:	059a      	lsls	r2, r3, #22
 800aafc:	d402      	bmi.n	800ab04 <_vfiprintf_r+0x220>
 800aafe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ab00:	f000 fad5 	bl	800b0ae <__retarget_lock_release_recursive>
 800ab04:	89ab      	ldrh	r3, [r5, #12]
 800ab06:	065b      	lsls	r3, r3, #25
 800ab08:	f53f af12 	bmi.w	800a930 <_vfiprintf_r+0x4c>
 800ab0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ab0e:	e711      	b.n	800a934 <_vfiprintf_r+0x50>
 800ab10:	ab03      	add	r3, sp, #12
 800ab12:	9300      	str	r3, [sp, #0]
 800ab14:	462a      	mov	r2, r5
 800ab16:	4630      	mov	r0, r6
 800ab18:	4b09      	ldr	r3, [pc, #36]	; (800ab40 <_vfiprintf_r+0x25c>)
 800ab1a:	a904      	add	r1, sp, #16
 800ab1c:	f7fc fd24 	bl	8007568 <_printf_i>
 800ab20:	e7e4      	b.n	800aaec <_vfiprintf_r+0x208>
 800ab22:	bf00      	nop
 800ab24:	0800bc58 	.word	0x0800bc58
 800ab28:	0800bc78 	.word	0x0800bc78
 800ab2c:	0800bc38 	.word	0x0800bc38
 800ab30:	0800bc24 	.word	0x0800bc24
 800ab34:	0800bc2a 	.word	0x0800bc2a
 800ab38:	0800bc2e 	.word	0x0800bc2e
 800ab3c:	08007031 	.word	0x08007031
 800ab40:	0800a8bf 	.word	0x0800a8bf

0800ab44 <nan>:
 800ab44:	2000      	movs	r0, #0
 800ab46:	4901      	ldr	r1, [pc, #4]	; (800ab4c <nan+0x8>)
 800ab48:	4770      	bx	lr
 800ab4a:	bf00      	nop
 800ab4c:	7ff80000 	.word	0x7ff80000

0800ab50 <_sbrk_r>:
 800ab50:	b538      	push	{r3, r4, r5, lr}
 800ab52:	2300      	movs	r3, #0
 800ab54:	4d05      	ldr	r5, [pc, #20]	; (800ab6c <_sbrk_r+0x1c>)
 800ab56:	4604      	mov	r4, r0
 800ab58:	4608      	mov	r0, r1
 800ab5a:	602b      	str	r3, [r5, #0]
 800ab5c:	f7f7 f9d4 	bl	8001f08 <_sbrk>
 800ab60:	1c43      	adds	r3, r0, #1
 800ab62:	d102      	bne.n	800ab6a <_sbrk_r+0x1a>
 800ab64:	682b      	ldr	r3, [r5, #0]
 800ab66:	b103      	cbz	r3, 800ab6a <_sbrk_r+0x1a>
 800ab68:	6023      	str	r3, [r4, #0]
 800ab6a:	bd38      	pop	{r3, r4, r5, pc}
 800ab6c:	20002688 	.word	0x20002688

0800ab70 <strncmp>:
 800ab70:	4603      	mov	r3, r0
 800ab72:	b510      	push	{r4, lr}
 800ab74:	b172      	cbz	r2, 800ab94 <strncmp+0x24>
 800ab76:	3901      	subs	r1, #1
 800ab78:	1884      	adds	r4, r0, r2
 800ab7a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ab7e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ab82:	4290      	cmp	r0, r2
 800ab84:	d101      	bne.n	800ab8a <strncmp+0x1a>
 800ab86:	42a3      	cmp	r3, r4
 800ab88:	d101      	bne.n	800ab8e <strncmp+0x1e>
 800ab8a:	1a80      	subs	r0, r0, r2
 800ab8c:	bd10      	pop	{r4, pc}
 800ab8e:	2800      	cmp	r0, #0
 800ab90:	d1f3      	bne.n	800ab7a <strncmp+0xa>
 800ab92:	e7fa      	b.n	800ab8a <strncmp+0x1a>
 800ab94:	4610      	mov	r0, r2
 800ab96:	e7f9      	b.n	800ab8c <strncmp+0x1c>

0800ab98 <__swbuf_r>:
 800ab98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab9a:	460e      	mov	r6, r1
 800ab9c:	4614      	mov	r4, r2
 800ab9e:	4605      	mov	r5, r0
 800aba0:	b118      	cbz	r0, 800abaa <__swbuf_r+0x12>
 800aba2:	6983      	ldr	r3, [r0, #24]
 800aba4:	b90b      	cbnz	r3, 800abaa <__swbuf_r+0x12>
 800aba6:	f000 f9e3 	bl	800af70 <__sinit>
 800abaa:	4b21      	ldr	r3, [pc, #132]	; (800ac30 <__swbuf_r+0x98>)
 800abac:	429c      	cmp	r4, r3
 800abae:	d12b      	bne.n	800ac08 <__swbuf_r+0x70>
 800abb0:	686c      	ldr	r4, [r5, #4]
 800abb2:	69a3      	ldr	r3, [r4, #24]
 800abb4:	60a3      	str	r3, [r4, #8]
 800abb6:	89a3      	ldrh	r3, [r4, #12]
 800abb8:	071a      	lsls	r2, r3, #28
 800abba:	d52f      	bpl.n	800ac1c <__swbuf_r+0x84>
 800abbc:	6923      	ldr	r3, [r4, #16]
 800abbe:	b36b      	cbz	r3, 800ac1c <__swbuf_r+0x84>
 800abc0:	6923      	ldr	r3, [r4, #16]
 800abc2:	6820      	ldr	r0, [r4, #0]
 800abc4:	b2f6      	uxtb	r6, r6
 800abc6:	1ac0      	subs	r0, r0, r3
 800abc8:	6963      	ldr	r3, [r4, #20]
 800abca:	4637      	mov	r7, r6
 800abcc:	4283      	cmp	r3, r0
 800abce:	dc04      	bgt.n	800abda <__swbuf_r+0x42>
 800abd0:	4621      	mov	r1, r4
 800abd2:	4628      	mov	r0, r5
 800abd4:	f000 f938 	bl	800ae48 <_fflush_r>
 800abd8:	bb30      	cbnz	r0, 800ac28 <__swbuf_r+0x90>
 800abda:	68a3      	ldr	r3, [r4, #8]
 800abdc:	3001      	adds	r0, #1
 800abde:	3b01      	subs	r3, #1
 800abe0:	60a3      	str	r3, [r4, #8]
 800abe2:	6823      	ldr	r3, [r4, #0]
 800abe4:	1c5a      	adds	r2, r3, #1
 800abe6:	6022      	str	r2, [r4, #0]
 800abe8:	701e      	strb	r6, [r3, #0]
 800abea:	6963      	ldr	r3, [r4, #20]
 800abec:	4283      	cmp	r3, r0
 800abee:	d004      	beq.n	800abfa <__swbuf_r+0x62>
 800abf0:	89a3      	ldrh	r3, [r4, #12]
 800abf2:	07db      	lsls	r3, r3, #31
 800abf4:	d506      	bpl.n	800ac04 <__swbuf_r+0x6c>
 800abf6:	2e0a      	cmp	r6, #10
 800abf8:	d104      	bne.n	800ac04 <__swbuf_r+0x6c>
 800abfa:	4621      	mov	r1, r4
 800abfc:	4628      	mov	r0, r5
 800abfe:	f000 f923 	bl	800ae48 <_fflush_r>
 800ac02:	b988      	cbnz	r0, 800ac28 <__swbuf_r+0x90>
 800ac04:	4638      	mov	r0, r7
 800ac06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac08:	4b0a      	ldr	r3, [pc, #40]	; (800ac34 <__swbuf_r+0x9c>)
 800ac0a:	429c      	cmp	r4, r3
 800ac0c:	d101      	bne.n	800ac12 <__swbuf_r+0x7a>
 800ac0e:	68ac      	ldr	r4, [r5, #8]
 800ac10:	e7cf      	b.n	800abb2 <__swbuf_r+0x1a>
 800ac12:	4b09      	ldr	r3, [pc, #36]	; (800ac38 <__swbuf_r+0xa0>)
 800ac14:	429c      	cmp	r4, r3
 800ac16:	bf08      	it	eq
 800ac18:	68ec      	ldreq	r4, [r5, #12]
 800ac1a:	e7ca      	b.n	800abb2 <__swbuf_r+0x1a>
 800ac1c:	4621      	mov	r1, r4
 800ac1e:	4628      	mov	r0, r5
 800ac20:	f000 f81a 	bl	800ac58 <__swsetup_r>
 800ac24:	2800      	cmp	r0, #0
 800ac26:	d0cb      	beq.n	800abc0 <__swbuf_r+0x28>
 800ac28:	f04f 37ff 	mov.w	r7, #4294967295
 800ac2c:	e7ea      	b.n	800ac04 <__swbuf_r+0x6c>
 800ac2e:	bf00      	nop
 800ac30:	0800bc58 	.word	0x0800bc58
 800ac34:	0800bc78 	.word	0x0800bc78
 800ac38:	0800bc38 	.word	0x0800bc38

0800ac3c <__ascii_wctomb>:
 800ac3c:	4603      	mov	r3, r0
 800ac3e:	4608      	mov	r0, r1
 800ac40:	b141      	cbz	r1, 800ac54 <__ascii_wctomb+0x18>
 800ac42:	2aff      	cmp	r2, #255	; 0xff
 800ac44:	d904      	bls.n	800ac50 <__ascii_wctomb+0x14>
 800ac46:	228a      	movs	r2, #138	; 0x8a
 800ac48:	f04f 30ff 	mov.w	r0, #4294967295
 800ac4c:	601a      	str	r2, [r3, #0]
 800ac4e:	4770      	bx	lr
 800ac50:	2001      	movs	r0, #1
 800ac52:	700a      	strb	r2, [r1, #0]
 800ac54:	4770      	bx	lr
	...

0800ac58 <__swsetup_r>:
 800ac58:	4b32      	ldr	r3, [pc, #200]	; (800ad24 <__swsetup_r+0xcc>)
 800ac5a:	b570      	push	{r4, r5, r6, lr}
 800ac5c:	681d      	ldr	r5, [r3, #0]
 800ac5e:	4606      	mov	r6, r0
 800ac60:	460c      	mov	r4, r1
 800ac62:	b125      	cbz	r5, 800ac6e <__swsetup_r+0x16>
 800ac64:	69ab      	ldr	r3, [r5, #24]
 800ac66:	b913      	cbnz	r3, 800ac6e <__swsetup_r+0x16>
 800ac68:	4628      	mov	r0, r5
 800ac6a:	f000 f981 	bl	800af70 <__sinit>
 800ac6e:	4b2e      	ldr	r3, [pc, #184]	; (800ad28 <__swsetup_r+0xd0>)
 800ac70:	429c      	cmp	r4, r3
 800ac72:	d10f      	bne.n	800ac94 <__swsetup_r+0x3c>
 800ac74:	686c      	ldr	r4, [r5, #4]
 800ac76:	89a3      	ldrh	r3, [r4, #12]
 800ac78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ac7c:	0719      	lsls	r1, r3, #28
 800ac7e:	d42c      	bmi.n	800acda <__swsetup_r+0x82>
 800ac80:	06dd      	lsls	r5, r3, #27
 800ac82:	d411      	bmi.n	800aca8 <__swsetup_r+0x50>
 800ac84:	2309      	movs	r3, #9
 800ac86:	6033      	str	r3, [r6, #0]
 800ac88:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ac8c:	f04f 30ff 	mov.w	r0, #4294967295
 800ac90:	81a3      	strh	r3, [r4, #12]
 800ac92:	e03e      	b.n	800ad12 <__swsetup_r+0xba>
 800ac94:	4b25      	ldr	r3, [pc, #148]	; (800ad2c <__swsetup_r+0xd4>)
 800ac96:	429c      	cmp	r4, r3
 800ac98:	d101      	bne.n	800ac9e <__swsetup_r+0x46>
 800ac9a:	68ac      	ldr	r4, [r5, #8]
 800ac9c:	e7eb      	b.n	800ac76 <__swsetup_r+0x1e>
 800ac9e:	4b24      	ldr	r3, [pc, #144]	; (800ad30 <__swsetup_r+0xd8>)
 800aca0:	429c      	cmp	r4, r3
 800aca2:	bf08      	it	eq
 800aca4:	68ec      	ldreq	r4, [r5, #12]
 800aca6:	e7e6      	b.n	800ac76 <__swsetup_r+0x1e>
 800aca8:	0758      	lsls	r0, r3, #29
 800acaa:	d512      	bpl.n	800acd2 <__swsetup_r+0x7a>
 800acac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800acae:	b141      	cbz	r1, 800acc2 <__swsetup_r+0x6a>
 800acb0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800acb4:	4299      	cmp	r1, r3
 800acb6:	d002      	beq.n	800acbe <__swsetup_r+0x66>
 800acb8:	4630      	mov	r0, r6
 800acba:	f7ff fbb3 	bl	800a424 <_free_r>
 800acbe:	2300      	movs	r3, #0
 800acc0:	6363      	str	r3, [r4, #52]	; 0x34
 800acc2:	89a3      	ldrh	r3, [r4, #12]
 800acc4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800acc8:	81a3      	strh	r3, [r4, #12]
 800acca:	2300      	movs	r3, #0
 800accc:	6063      	str	r3, [r4, #4]
 800acce:	6923      	ldr	r3, [r4, #16]
 800acd0:	6023      	str	r3, [r4, #0]
 800acd2:	89a3      	ldrh	r3, [r4, #12]
 800acd4:	f043 0308 	orr.w	r3, r3, #8
 800acd8:	81a3      	strh	r3, [r4, #12]
 800acda:	6923      	ldr	r3, [r4, #16]
 800acdc:	b94b      	cbnz	r3, 800acf2 <__swsetup_r+0x9a>
 800acde:	89a3      	ldrh	r3, [r4, #12]
 800ace0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ace4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ace8:	d003      	beq.n	800acf2 <__swsetup_r+0x9a>
 800acea:	4621      	mov	r1, r4
 800acec:	4630      	mov	r0, r6
 800acee:	f000 fa05 	bl	800b0fc <__smakebuf_r>
 800acf2:	89a0      	ldrh	r0, [r4, #12]
 800acf4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800acf8:	f010 0301 	ands.w	r3, r0, #1
 800acfc:	d00a      	beq.n	800ad14 <__swsetup_r+0xbc>
 800acfe:	2300      	movs	r3, #0
 800ad00:	60a3      	str	r3, [r4, #8]
 800ad02:	6963      	ldr	r3, [r4, #20]
 800ad04:	425b      	negs	r3, r3
 800ad06:	61a3      	str	r3, [r4, #24]
 800ad08:	6923      	ldr	r3, [r4, #16]
 800ad0a:	b943      	cbnz	r3, 800ad1e <__swsetup_r+0xc6>
 800ad0c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ad10:	d1ba      	bne.n	800ac88 <__swsetup_r+0x30>
 800ad12:	bd70      	pop	{r4, r5, r6, pc}
 800ad14:	0781      	lsls	r1, r0, #30
 800ad16:	bf58      	it	pl
 800ad18:	6963      	ldrpl	r3, [r4, #20]
 800ad1a:	60a3      	str	r3, [r4, #8]
 800ad1c:	e7f4      	b.n	800ad08 <__swsetup_r+0xb0>
 800ad1e:	2000      	movs	r0, #0
 800ad20:	e7f7      	b.n	800ad12 <__swsetup_r+0xba>
 800ad22:	bf00      	nop
 800ad24:	20000190 	.word	0x20000190
 800ad28:	0800bc58 	.word	0x0800bc58
 800ad2c:	0800bc78 	.word	0x0800bc78
 800ad30:	0800bc38 	.word	0x0800bc38

0800ad34 <abort>:
 800ad34:	2006      	movs	r0, #6
 800ad36:	b508      	push	{r3, lr}
 800ad38:	f000 fa9e 	bl	800b278 <raise>
 800ad3c:	2001      	movs	r0, #1
 800ad3e:	f7f7 f8b3 	bl	8001ea8 <_exit>
	...

0800ad44 <__sflush_r>:
 800ad44:	898a      	ldrh	r2, [r1, #12]
 800ad46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad48:	4605      	mov	r5, r0
 800ad4a:	0710      	lsls	r0, r2, #28
 800ad4c:	460c      	mov	r4, r1
 800ad4e:	d457      	bmi.n	800ae00 <__sflush_r+0xbc>
 800ad50:	684b      	ldr	r3, [r1, #4]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	dc04      	bgt.n	800ad60 <__sflush_r+0x1c>
 800ad56:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	dc01      	bgt.n	800ad60 <__sflush_r+0x1c>
 800ad5c:	2000      	movs	r0, #0
 800ad5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ad62:	2e00      	cmp	r6, #0
 800ad64:	d0fa      	beq.n	800ad5c <__sflush_r+0x18>
 800ad66:	2300      	movs	r3, #0
 800ad68:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ad6c:	682f      	ldr	r7, [r5, #0]
 800ad6e:	602b      	str	r3, [r5, #0]
 800ad70:	d032      	beq.n	800add8 <__sflush_r+0x94>
 800ad72:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ad74:	89a3      	ldrh	r3, [r4, #12]
 800ad76:	075a      	lsls	r2, r3, #29
 800ad78:	d505      	bpl.n	800ad86 <__sflush_r+0x42>
 800ad7a:	6863      	ldr	r3, [r4, #4]
 800ad7c:	1ac0      	subs	r0, r0, r3
 800ad7e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ad80:	b10b      	cbz	r3, 800ad86 <__sflush_r+0x42>
 800ad82:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ad84:	1ac0      	subs	r0, r0, r3
 800ad86:	2300      	movs	r3, #0
 800ad88:	4602      	mov	r2, r0
 800ad8a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ad8c:	4628      	mov	r0, r5
 800ad8e:	6a21      	ldr	r1, [r4, #32]
 800ad90:	47b0      	blx	r6
 800ad92:	1c43      	adds	r3, r0, #1
 800ad94:	89a3      	ldrh	r3, [r4, #12]
 800ad96:	d106      	bne.n	800ada6 <__sflush_r+0x62>
 800ad98:	6829      	ldr	r1, [r5, #0]
 800ad9a:	291d      	cmp	r1, #29
 800ad9c:	d82c      	bhi.n	800adf8 <__sflush_r+0xb4>
 800ad9e:	4a29      	ldr	r2, [pc, #164]	; (800ae44 <__sflush_r+0x100>)
 800ada0:	40ca      	lsrs	r2, r1
 800ada2:	07d6      	lsls	r6, r2, #31
 800ada4:	d528      	bpl.n	800adf8 <__sflush_r+0xb4>
 800ada6:	2200      	movs	r2, #0
 800ada8:	6062      	str	r2, [r4, #4]
 800adaa:	6922      	ldr	r2, [r4, #16]
 800adac:	04d9      	lsls	r1, r3, #19
 800adae:	6022      	str	r2, [r4, #0]
 800adb0:	d504      	bpl.n	800adbc <__sflush_r+0x78>
 800adb2:	1c42      	adds	r2, r0, #1
 800adb4:	d101      	bne.n	800adba <__sflush_r+0x76>
 800adb6:	682b      	ldr	r3, [r5, #0]
 800adb8:	b903      	cbnz	r3, 800adbc <__sflush_r+0x78>
 800adba:	6560      	str	r0, [r4, #84]	; 0x54
 800adbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800adbe:	602f      	str	r7, [r5, #0]
 800adc0:	2900      	cmp	r1, #0
 800adc2:	d0cb      	beq.n	800ad5c <__sflush_r+0x18>
 800adc4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800adc8:	4299      	cmp	r1, r3
 800adca:	d002      	beq.n	800add2 <__sflush_r+0x8e>
 800adcc:	4628      	mov	r0, r5
 800adce:	f7ff fb29 	bl	800a424 <_free_r>
 800add2:	2000      	movs	r0, #0
 800add4:	6360      	str	r0, [r4, #52]	; 0x34
 800add6:	e7c2      	b.n	800ad5e <__sflush_r+0x1a>
 800add8:	6a21      	ldr	r1, [r4, #32]
 800adda:	2301      	movs	r3, #1
 800addc:	4628      	mov	r0, r5
 800adde:	47b0      	blx	r6
 800ade0:	1c41      	adds	r1, r0, #1
 800ade2:	d1c7      	bne.n	800ad74 <__sflush_r+0x30>
 800ade4:	682b      	ldr	r3, [r5, #0]
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d0c4      	beq.n	800ad74 <__sflush_r+0x30>
 800adea:	2b1d      	cmp	r3, #29
 800adec:	d001      	beq.n	800adf2 <__sflush_r+0xae>
 800adee:	2b16      	cmp	r3, #22
 800adf0:	d101      	bne.n	800adf6 <__sflush_r+0xb2>
 800adf2:	602f      	str	r7, [r5, #0]
 800adf4:	e7b2      	b.n	800ad5c <__sflush_r+0x18>
 800adf6:	89a3      	ldrh	r3, [r4, #12]
 800adf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800adfc:	81a3      	strh	r3, [r4, #12]
 800adfe:	e7ae      	b.n	800ad5e <__sflush_r+0x1a>
 800ae00:	690f      	ldr	r7, [r1, #16]
 800ae02:	2f00      	cmp	r7, #0
 800ae04:	d0aa      	beq.n	800ad5c <__sflush_r+0x18>
 800ae06:	0793      	lsls	r3, r2, #30
 800ae08:	bf18      	it	ne
 800ae0a:	2300      	movne	r3, #0
 800ae0c:	680e      	ldr	r6, [r1, #0]
 800ae0e:	bf08      	it	eq
 800ae10:	694b      	ldreq	r3, [r1, #20]
 800ae12:	1bf6      	subs	r6, r6, r7
 800ae14:	600f      	str	r7, [r1, #0]
 800ae16:	608b      	str	r3, [r1, #8]
 800ae18:	2e00      	cmp	r6, #0
 800ae1a:	dd9f      	ble.n	800ad5c <__sflush_r+0x18>
 800ae1c:	4633      	mov	r3, r6
 800ae1e:	463a      	mov	r2, r7
 800ae20:	4628      	mov	r0, r5
 800ae22:	6a21      	ldr	r1, [r4, #32]
 800ae24:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800ae28:	47e0      	blx	ip
 800ae2a:	2800      	cmp	r0, #0
 800ae2c:	dc06      	bgt.n	800ae3c <__sflush_r+0xf8>
 800ae2e:	89a3      	ldrh	r3, [r4, #12]
 800ae30:	f04f 30ff 	mov.w	r0, #4294967295
 800ae34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae38:	81a3      	strh	r3, [r4, #12]
 800ae3a:	e790      	b.n	800ad5e <__sflush_r+0x1a>
 800ae3c:	4407      	add	r7, r0
 800ae3e:	1a36      	subs	r6, r6, r0
 800ae40:	e7ea      	b.n	800ae18 <__sflush_r+0xd4>
 800ae42:	bf00      	nop
 800ae44:	20400001 	.word	0x20400001

0800ae48 <_fflush_r>:
 800ae48:	b538      	push	{r3, r4, r5, lr}
 800ae4a:	690b      	ldr	r3, [r1, #16]
 800ae4c:	4605      	mov	r5, r0
 800ae4e:	460c      	mov	r4, r1
 800ae50:	b913      	cbnz	r3, 800ae58 <_fflush_r+0x10>
 800ae52:	2500      	movs	r5, #0
 800ae54:	4628      	mov	r0, r5
 800ae56:	bd38      	pop	{r3, r4, r5, pc}
 800ae58:	b118      	cbz	r0, 800ae62 <_fflush_r+0x1a>
 800ae5a:	6983      	ldr	r3, [r0, #24]
 800ae5c:	b90b      	cbnz	r3, 800ae62 <_fflush_r+0x1a>
 800ae5e:	f000 f887 	bl	800af70 <__sinit>
 800ae62:	4b14      	ldr	r3, [pc, #80]	; (800aeb4 <_fflush_r+0x6c>)
 800ae64:	429c      	cmp	r4, r3
 800ae66:	d11b      	bne.n	800aea0 <_fflush_r+0x58>
 800ae68:	686c      	ldr	r4, [r5, #4]
 800ae6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d0ef      	beq.n	800ae52 <_fflush_r+0xa>
 800ae72:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ae74:	07d0      	lsls	r0, r2, #31
 800ae76:	d404      	bmi.n	800ae82 <_fflush_r+0x3a>
 800ae78:	0599      	lsls	r1, r3, #22
 800ae7a:	d402      	bmi.n	800ae82 <_fflush_r+0x3a>
 800ae7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ae7e:	f000 f915 	bl	800b0ac <__retarget_lock_acquire_recursive>
 800ae82:	4628      	mov	r0, r5
 800ae84:	4621      	mov	r1, r4
 800ae86:	f7ff ff5d 	bl	800ad44 <__sflush_r>
 800ae8a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ae8c:	4605      	mov	r5, r0
 800ae8e:	07da      	lsls	r2, r3, #31
 800ae90:	d4e0      	bmi.n	800ae54 <_fflush_r+0xc>
 800ae92:	89a3      	ldrh	r3, [r4, #12]
 800ae94:	059b      	lsls	r3, r3, #22
 800ae96:	d4dd      	bmi.n	800ae54 <_fflush_r+0xc>
 800ae98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ae9a:	f000 f908 	bl	800b0ae <__retarget_lock_release_recursive>
 800ae9e:	e7d9      	b.n	800ae54 <_fflush_r+0xc>
 800aea0:	4b05      	ldr	r3, [pc, #20]	; (800aeb8 <_fflush_r+0x70>)
 800aea2:	429c      	cmp	r4, r3
 800aea4:	d101      	bne.n	800aeaa <_fflush_r+0x62>
 800aea6:	68ac      	ldr	r4, [r5, #8]
 800aea8:	e7df      	b.n	800ae6a <_fflush_r+0x22>
 800aeaa:	4b04      	ldr	r3, [pc, #16]	; (800aebc <_fflush_r+0x74>)
 800aeac:	429c      	cmp	r4, r3
 800aeae:	bf08      	it	eq
 800aeb0:	68ec      	ldreq	r4, [r5, #12]
 800aeb2:	e7da      	b.n	800ae6a <_fflush_r+0x22>
 800aeb4:	0800bc58 	.word	0x0800bc58
 800aeb8:	0800bc78 	.word	0x0800bc78
 800aebc:	0800bc38 	.word	0x0800bc38

0800aec0 <std>:
 800aec0:	2300      	movs	r3, #0
 800aec2:	b510      	push	{r4, lr}
 800aec4:	4604      	mov	r4, r0
 800aec6:	e9c0 3300 	strd	r3, r3, [r0]
 800aeca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aece:	6083      	str	r3, [r0, #8]
 800aed0:	8181      	strh	r1, [r0, #12]
 800aed2:	6643      	str	r3, [r0, #100]	; 0x64
 800aed4:	81c2      	strh	r2, [r0, #14]
 800aed6:	6183      	str	r3, [r0, #24]
 800aed8:	4619      	mov	r1, r3
 800aeda:	2208      	movs	r2, #8
 800aedc:	305c      	adds	r0, #92	; 0x5c
 800aede:	f7fc f801 	bl	8006ee4 <memset>
 800aee2:	4b05      	ldr	r3, [pc, #20]	; (800aef8 <std+0x38>)
 800aee4:	6224      	str	r4, [r4, #32]
 800aee6:	6263      	str	r3, [r4, #36]	; 0x24
 800aee8:	4b04      	ldr	r3, [pc, #16]	; (800aefc <std+0x3c>)
 800aeea:	62a3      	str	r3, [r4, #40]	; 0x28
 800aeec:	4b04      	ldr	r3, [pc, #16]	; (800af00 <std+0x40>)
 800aeee:	62e3      	str	r3, [r4, #44]	; 0x2c
 800aef0:	4b04      	ldr	r3, [pc, #16]	; (800af04 <std+0x44>)
 800aef2:	6323      	str	r3, [r4, #48]	; 0x30
 800aef4:	bd10      	pop	{r4, pc}
 800aef6:	bf00      	nop
 800aef8:	0800b2b1 	.word	0x0800b2b1
 800aefc:	0800b2d3 	.word	0x0800b2d3
 800af00:	0800b30b 	.word	0x0800b30b
 800af04:	0800b32f 	.word	0x0800b32f

0800af08 <_cleanup_r>:
 800af08:	4901      	ldr	r1, [pc, #4]	; (800af10 <_cleanup_r+0x8>)
 800af0a:	f000 b8af 	b.w	800b06c <_fwalk_reent>
 800af0e:	bf00      	nop
 800af10:	0800ae49 	.word	0x0800ae49

0800af14 <__sfmoreglue>:
 800af14:	2268      	movs	r2, #104	; 0x68
 800af16:	b570      	push	{r4, r5, r6, lr}
 800af18:	1e4d      	subs	r5, r1, #1
 800af1a:	4355      	muls	r5, r2
 800af1c:	460e      	mov	r6, r1
 800af1e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800af22:	f7ff fae7 	bl	800a4f4 <_malloc_r>
 800af26:	4604      	mov	r4, r0
 800af28:	b140      	cbz	r0, 800af3c <__sfmoreglue+0x28>
 800af2a:	2100      	movs	r1, #0
 800af2c:	e9c0 1600 	strd	r1, r6, [r0]
 800af30:	300c      	adds	r0, #12
 800af32:	60a0      	str	r0, [r4, #8]
 800af34:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800af38:	f7fb ffd4 	bl	8006ee4 <memset>
 800af3c:	4620      	mov	r0, r4
 800af3e:	bd70      	pop	{r4, r5, r6, pc}

0800af40 <__sfp_lock_acquire>:
 800af40:	4801      	ldr	r0, [pc, #4]	; (800af48 <__sfp_lock_acquire+0x8>)
 800af42:	f000 b8b3 	b.w	800b0ac <__retarget_lock_acquire_recursive>
 800af46:	bf00      	nop
 800af48:	20002685 	.word	0x20002685

0800af4c <__sfp_lock_release>:
 800af4c:	4801      	ldr	r0, [pc, #4]	; (800af54 <__sfp_lock_release+0x8>)
 800af4e:	f000 b8ae 	b.w	800b0ae <__retarget_lock_release_recursive>
 800af52:	bf00      	nop
 800af54:	20002685 	.word	0x20002685

0800af58 <__sinit_lock_acquire>:
 800af58:	4801      	ldr	r0, [pc, #4]	; (800af60 <__sinit_lock_acquire+0x8>)
 800af5a:	f000 b8a7 	b.w	800b0ac <__retarget_lock_acquire_recursive>
 800af5e:	bf00      	nop
 800af60:	20002686 	.word	0x20002686

0800af64 <__sinit_lock_release>:
 800af64:	4801      	ldr	r0, [pc, #4]	; (800af6c <__sinit_lock_release+0x8>)
 800af66:	f000 b8a2 	b.w	800b0ae <__retarget_lock_release_recursive>
 800af6a:	bf00      	nop
 800af6c:	20002686 	.word	0x20002686

0800af70 <__sinit>:
 800af70:	b510      	push	{r4, lr}
 800af72:	4604      	mov	r4, r0
 800af74:	f7ff fff0 	bl	800af58 <__sinit_lock_acquire>
 800af78:	69a3      	ldr	r3, [r4, #24]
 800af7a:	b11b      	cbz	r3, 800af84 <__sinit+0x14>
 800af7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af80:	f7ff bff0 	b.w	800af64 <__sinit_lock_release>
 800af84:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800af88:	6523      	str	r3, [r4, #80]	; 0x50
 800af8a:	4b13      	ldr	r3, [pc, #76]	; (800afd8 <__sinit+0x68>)
 800af8c:	4a13      	ldr	r2, [pc, #76]	; (800afdc <__sinit+0x6c>)
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	62a2      	str	r2, [r4, #40]	; 0x28
 800af92:	42a3      	cmp	r3, r4
 800af94:	bf08      	it	eq
 800af96:	2301      	moveq	r3, #1
 800af98:	4620      	mov	r0, r4
 800af9a:	bf08      	it	eq
 800af9c:	61a3      	streq	r3, [r4, #24]
 800af9e:	f000 f81f 	bl	800afe0 <__sfp>
 800afa2:	6060      	str	r0, [r4, #4]
 800afa4:	4620      	mov	r0, r4
 800afa6:	f000 f81b 	bl	800afe0 <__sfp>
 800afaa:	60a0      	str	r0, [r4, #8]
 800afac:	4620      	mov	r0, r4
 800afae:	f000 f817 	bl	800afe0 <__sfp>
 800afb2:	2200      	movs	r2, #0
 800afb4:	2104      	movs	r1, #4
 800afb6:	60e0      	str	r0, [r4, #12]
 800afb8:	6860      	ldr	r0, [r4, #4]
 800afba:	f7ff ff81 	bl	800aec0 <std>
 800afbe:	2201      	movs	r2, #1
 800afc0:	2109      	movs	r1, #9
 800afc2:	68a0      	ldr	r0, [r4, #8]
 800afc4:	f7ff ff7c 	bl	800aec0 <std>
 800afc8:	2202      	movs	r2, #2
 800afca:	2112      	movs	r1, #18
 800afcc:	68e0      	ldr	r0, [r4, #12]
 800afce:	f7ff ff77 	bl	800aec0 <std>
 800afd2:	2301      	movs	r3, #1
 800afd4:	61a3      	str	r3, [r4, #24]
 800afd6:	e7d1      	b.n	800af7c <__sinit+0xc>
 800afd8:	0800b79c 	.word	0x0800b79c
 800afdc:	0800af09 	.word	0x0800af09

0800afe0 <__sfp>:
 800afe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afe2:	4607      	mov	r7, r0
 800afe4:	f7ff ffac 	bl	800af40 <__sfp_lock_acquire>
 800afe8:	4b1e      	ldr	r3, [pc, #120]	; (800b064 <__sfp+0x84>)
 800afea:	681e      	ldr	r6, [r3, #0]
 800afec:	69b3      	ldr	r3, [r6, #24]
 800afee:	b913      	cbnz	r3, 800aff6 <__sfp+0x16>
 800aff0:	4630      	mov	r0, r6
 800aff2:	f7ff ffbd 	bl	800af70 <__sinit>
 800aff6:	3648      	adds	r6, #72	; 0x48
 800aff8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800affc:	3b01      	subs	r3, #1
 800affe:	d503      	bpl.n	800b008 <__sfp+0x28>
 800b000:	6833      	ldr	r3, [r6, #0]
 800b002:	b30b      	cbz	r3, 800b048 <__sfp+0x68>
 800b004:	6836      	ldr	r6, [r6, #0]
 800b006:	e7f7      	b.n	800aff8 <__sfp+0x18>
 800b008:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b00c:	b9d5      	cbnz	r5, 800b044 <__sfp+0x64>
 800b00e:	4b16      	ldr	r3, [pc, #88]	; (800b068 <__sfp+0x88>)
 800b010:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b014:	60e3      	str	r3, [r4, #12]
 800b016:	6665      	str	r5, [r4, #100]	; 0x64
 800b018:	f000 f847 	bl	800b0aa <__retarget_lock_init_recursive>
 800b01c:	f7ff ff96 	bl	800af4c <__sfp_lock_release>
 800b020:	2208      	movs	r2, #8
 800b022:	4629      	mov	r1, r5
 800b024:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b028:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b02c:	6025      	str	r5, [r4, #0]
 800b02e:	61a5      	str	r5, [r4, #24]
 800b030:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b034:	f7fb ff56 	bl	8006ee4 <memset>
 800b038:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b03c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b040:	4620      	mov	r0, r4
 800b042:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b044:	3468      	adds	r4, #104	; 0x68
 800b046:	e7d9      	b.n	800affc <__sfp+0x1c>
 800b048:	2104      	movs	r1, #4
 800b04a:	4638      	mov	r0, r7
 800b04c:	f7ff ff62 	bl	800af14 <__sfmoreglue>
 800b050:	4604      	mov	r4, r0
 800b052:	6030      	str	r0, [r6, #0]
 800b054:	2800      	cmp	r0, #0
 800b056:	d1d5      	bne.n	800b004 <__sfp+0x24>
 800b058:	f7ff ff78 	bl	800af4c <__sfp_lock_release>
 800b05c:	230c      	movs	r3, #12
 800b05e:	603b      	str	r3, [r7, #0]
 800b060:	e7ee      	b.n	800b040 <__sfp+0x60>
 800b062:	bf00      	nop
 800b064:	0800b79c 	.word	0x0800b79c
 800b068:	ffff0001 	.word	0xffff0001

0800b06c <_fwalk_reent>:
 800b06c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b070:	4606      	mov	r6, r0
 800b072:	4688      	mov	r8, r1
 800b074:	2700      	movs	r7, #0
 800b076:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b07a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b07e:	f1b9 0901 	subs.w	r9, r9, #1
 800b082:	d505      	bpl.n	800b090 <_fwalk_reent+0x24>
 800b084:	6824      	ldr	r4, [r4, #0]
 800b086:	2c00      	cmp	r4, #0
 800b088:	d1f7      	bne.n	800b07a <_fwalk_reent+0xe>
 800b08a:	4638      	mov	r0, r7
 800b08c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b090:	89ab      	ldrh	r3, [r5, #12]
 800b092:	2b01      	cmp	r3, #1
 800b094:	d907      	bls.n	800b0a6 <_fwalk_reent+0x3a>
 800b096:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b09a:	3301      	adds	r3, #1
 800b09c:	d003      	beq.n	800b0a6 <_fwalk_reent+0x3a>
 800b09e:	4629      	mov	r1, r5
 800b0a0:	4630      	mov	r0, r6
 800b0a2:	47c0      	blx	r8
 800b0a4:	4307      	orrs	r7, r0
 800b0a6:	3568      	adds	r5, #104	; 0x68
 800b0a8:	e7e9      	b.n	800b07e <_fwalk_reent+0x12>

0800b0aa <__retarget_lock_init_recursive>:
 800b0aa:	4770      	bx	lr

0800b0ac <__retarget_lock_acquire_recursive>:
 800b0ac:	4770      	bx	lr

0800b0ae <__retarget_lock_release_recursive>:
 800b0ae:	4770      	bx	lr

0800b0b0 <__swhatbuf_r>:
 800b0b0:	b570      	push	{r4, r5, r6, lr}
 800b0b2:	460e      	mov	r6, r1
 800b0b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0b8:	4614      	mov	r4, r2
 800b0ba:	2900      	cmp	r1, #0
 800b0bc:	461d      	mov	r5, r3
 800b0be:	b096      	sub	sp, #88	; 0x58
 800b0c0:	da08      	bge.n	800b0d4 <__swhatbuf_r+0x24>
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b0c8:	602a      	str	r2, [r5, #0]
 800b0ca:	061a      	lsls	r2, r3, #24
 800b0cc:	d410      	bmi.n	800b0f0 <__swhatbuf_r+0x40>
 800b0ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b0d2:	e00e      	b.n	800b0f2 <__swhatbuf_r+0x42>
 800b0d4:	466a      	mov	r2, sp
 800b0d6:	f000 f951 	bl	800b37c <_fstat_r>
 800b0da:	2800      	cmp	r0, #0
 800b0dc:	dbf1      	blt.n	800b0c2 <__swhatbuf_r+0x12>
 800b0de:	9a01      	ldr	r2, [sp, #4]
 800b0e0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b0e4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b0e8:	425a      	negs	r2, r3
 800b0ea:	415a      	adcs	r2, r3
 800b0ec:	602a      	str	r2, [r5, #0]
 800b0ee:	e7ee      	b.n	800b0ce <__swhatbuf_r+0x1e>
 800b0f0:	2340      	movs	r3, #64	; 0x40
 800b0f2:	2000      	movs	r0, #0
 800b0f4:	6023      	str	r3, [r4, #0]
 800b0f6:	b016      	add	sp, #88	; 0x58
 800b0f8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b0fc <__smakebuf_r>:
 800b0fc:	898b      	ldrh	r3, [r1, #12]
 800b0fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b100:	079d      	lsls	r5, r3, #30
 800b102:	4606      	mov	r6, r0
 800b104:	460c      	mov	r4, r1
 800b106:	d507      	bpl.n	800b118 <__smakebuf_r+0x1c>
 800b108:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b10c:	6023      	str	r3, [r4, #0]
 800b10e:	6123      	str	r3, [r4, #16]
 800b110:	2301      	movs	r3, #1
 800b112:	6163      	str	r3, [r4, #20]
 800b114:	b002      	add	sp, #8
 800b116:	bd70      	pop	{r4, r5, r6, pc}
 800b118:	466a      	mov	r2, sp
 800b11a:	ab01      	add	r3, sp, #4
 800b11c:	f7ff ffc8 	bl	800b0b0 <__swhatbuf_r>
 800b120:	9900      	ldr	r1, [sp, #0]
 800b122:	4605      	mov	r5, r0
 800b124:	4630      	mov	r0, r6
 800b126:	f7ff f9e5 	bl	800a4f4 <_malloc_r>
 800b12a:	b948      	cbnz	r0, 800b140 <__smakebuf_r+0x44>
 800b12c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b130:	059a      	lsls	r2, r3, #22
 800b132:	d4ef      	bmi.n	800b114 <__smakebuf_r+0x18>
 800b134:	f023 0303 	bic.w	r3, r3, #3
 800b138:	f043 0302 	orr.w	r3, r3, #2
 800b13c:	81a3      	strh	r3, [r4, #12]
 800b13e:	e7e3      	b.n	800b108 <__smakebuf_r+0xc>
 800b140:	4b0d      	ldr	r3, [pc, #52]	; (800b178 <__smakebuf_r+0x7c>)
 800b142:	62b3      	str	r3, [r6, #40]	; 0x28
 800b144:	89a3      	ldrh	r3, [r4, #12]
 800b146:	6020      	str	r0, [r4, #0]
 800b148:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b14c:	81a3      	strh	r3, [r4, #12]
 800b14e:	9b00      	ldr	r3, [sp, #0]
 800b150:	6120      	str	r0, [r4, #16]
 800b152:	6163      	str	r3, [r4, #20]
 800b154:	9b01      	ldr	r3, [sp, #4]
 800b156:	b15b      	cbz	r3, 800b170 <__smakebuf_r+0x74>
 800b158:	4630      	mov	r0, r6
 800b15a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b15e:	f000 f91f 	bl	800b3a0 <_isatty_r>
 800b162:	b128      	cbz	r0, 800b170 <__smakebuf_r+0x74>
 800b164:	89a3      	ldrh	r3, [r4, #12]
 800b166:	f023 0303 	bic.w	r3, r3, #3
 800b16a:	f043 0301 	orr.w	r3, r3, #1
 800b16e:	81a3      	strh	r3, [r4, #12]
 800b170:	89a0      	ldrh	r0, [r4, #12]
 800b172:	4305      	orrs	r5, r0
 800b174:	81a5      	strh	r5, [r4, #12]
 800b176:	e7cd      	b.n	800b114 <__smakebuf_r+0x18>
 800b178:	0800af09 	.word	0x0800af09

0800b17c <memmove>:
 800b17c:	4288      	cmp	r0, r1
 800b17e:	b510      	push	{r4, lr}
 800b180:	eb01 0402 	add.w	r4, r1, r2
 800b184:	d902      	bls.n	800b18c <memmove+0x10>
 800b186:	4284      	cmp	r4, r0
 800b188:	4623      	mov	r3, r4
 800b18a:	d807      	bhi.n	800b19c <memmove+0x20>
 800b18c:	1e43      	subs	r3, r0, #1
 800b18e:	42a1      	cmp	r1, r4
 800b190:	d008      	beq.n	800b1a4 <memmove+0x28>
 800b192:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b196:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b19a:	e7f8      	b.n	800b18e <memmove+0x12>
 800b19c:	4601      	mov	r1, r0
 800b19e:	4402      	add	r2, r0
 800b1a0:	428a      	cmp	r2, r1
 800b1a2:	d100      	bne.n	800b1a6 <memmove+0x2a>
 800b1a4:	bd10      	pop	{r4, pc}
 800b1a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b1aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b1ae:	e7f7      	b.n	800b1a0 <memmove+0x24>

0800b1b0 <__malloc_lock>:
 800b1b0:	4801      	ldr	r0, [pc, #4]	; (800b1b8 <__malloc_lock+0x8>)
 800b1b2:	f7ff bf7b 	b.w	800b0ac <__retarget_lock_acquire_recursive>
 800b1b6:	bf00      	nop
 800b1b8:	20002684 	.word	0x20002684

0800b1bc <__malloc_unlock>:
 800b1bc:	4801      	ldr	r0, [pc, #4]	; (800b1c4 <__malloc_unlock+0x8>)
 800b1be:	f7ff bf76 	b.w	800b0ae <__retarget_lock_release_recursive>
 800b1c2:	bf00      	nop
 800b1c4:	20002684 	.word	0x20002684

0800b1c8 <_realloc_r>:
 800b1c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1cc:	4680      	mov	r8, r0
 800b1ce:	4614      	mov	r4, r2
 800b1d0:	460e      	mov	r6, r1
 800b1d2:	b921      	cbnz	r1, 800b1de <_realloc_r+0x16>
 800b1d4:	4611      	mov	r1, r2
 800b1d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b1da:	f7ff b98b 	b.w	800a4f4 <_malloc_r>
 800b1de:	b92a      	cbnz	r2, 800b1ec <_realloc_r+0x24>
 800b1e0:	f7ff f920 	bl	800a424 <_free_r>
 800b1e4:	4625      	mov	r5, r4
 800b1e6:	4628      	mov	r0, r5
 800b1e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1ec:	f000 f8fa 	bl	800b3e4 <_malloc_usable_size_r>
 800b1f0:	4284      	cmp	r4, r0
 800b1f2:	4607      	mov	r7, r0
 800b1f4:	d802      	bhi.n	800b1fc <_realloc_r+0x34>
 800b1f6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b1fa:	d812      	bhi.n	800b222 <_realloc_r+0x5a>
 800b1fc:	4621      	mov	r1, r4
 800b1fe:	4640      	mov	r0, r8
 800b200:	f7ff f978 	bl	800a4f4 <_malloc_r>
 800b204:	4605      	mov	r5, r0
 800b206:	2800      	cmp	r0, #0
 800b208:	d0ed      	beq.n	800b1e6 <_realloc_r+0x1e>
 800b20a:	42bc      	cmp	r4, r7
 800b20c:	4622      	mov	r2, r4
 800b20e:	4631      	mov	r1, r6
 800b210:	bf28      	it	cs
 800b212:	463a      	movcs	r2, r7
 800b214:	f7fb fe58 	bl	8006ec8 <memcpy>
 800b218:	4631      	mov	r1, r6
 800b21a:	4640      	mov	r0, r8
 800b21c:	f7ff f902 	bl	800a424 <_free_r>
 800b220:	e7e1      	b.n	800b1e6 <_realloc_r+0x1e>
 800b222:	4635      	mov	r5, r6
 800b224:	e7df      	b.n	800b1e6 <_realloc_r+0x1e>

0800b226 <_raise_r>:
 800b226:	291f      	cmp	r1, #31
 800b228:	b538      	push	{r3, r4, r5, lr}
 800b22a:	4604      	mov	r4, r0
 800b22c:	460d      	mov	r5, r1
 800b22e:	d904      	bls.n	800b23a <_raise_r+0x14>
 800b230:	2316      	movs	r3, #22
 800b232:	6003      	str	r3, [r0, #0]
 800b234:	f04f 30ff 	mov.w	r0, #4294967295
 800b238:	bd38      	pop	{r3, r4, r5, pc}
 800b23a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b23c:	b112      	cbz	r2, 800b244 <_raise_r+0x1e>
 800b23e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b242:	b94b      	cbnz	r3, 800b258 <_raise_r+0x32>
 800b244:	4620      	mov	r0, r4
 800b246:	f000 f831 	bl	800b2ac <_getpid_r>
 800b24a:	462a      	mov	r2, r5
 800b24c:	4601      	mov	r1, r0
 800b24e:	4620      	mov	r0, r4
 800b250:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b254:	f000 b818 	b.w	800b288 <_kill_r>
 800b258:	2b01      	cmp	r3, #1
 800b25a:	d00a      	beq.n	800b272 <_raise_r+0x4c>
 800b25c:	1c59      	adds	r1, r3, #1
 800b25e:	d103      	bne.n	800b268 <_raise_r+0x42>
 800b260:	2316      	movs	r3, #22
 800b262:	6003      	str	r3, [r0, #0]
 800b264:	2001      	movs	r0, #1
 800b266:	e7e7      	b.n	800b238 <_raise_r+0x12>
 800b268:	2400      	movs	r4, #0
 800b26a:	4628      	mov	r0, r5
 800b26c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b270:	4798      	blx	r3
 800b272:	2000      	movs	r0, #0
 800b274:	e7e0      	b.n	800b238 <_raise_r+0x12>
	...

0800b278 <raise>:
 800b278:	4b02      	ldr	r3, [pc, #8]	; (800b284 <raise+0xc>)
 800b27a:	4601      	mov	r1, r0
 800b27c:	6818      	ldr	r0, [r3, #0]
 800b27e:	f7ff bfd2 	b.w	800b226 <_raise_r>
 800b282:	bf00      	nop
 800b284:	20000190 	.word	0x20000190

0800b288 <_kill_r>:
 800b288:	b538      	push	{r3, r4, r5, lr}
 800b28a:	2300      	movs	r3, #0
 800b28c:	4d06      	ldr	r5, [pc, #24]	; (800b2a8 <_kill_r+0x20>)
 800b28e:	4604      	mov	r4, r0
 800b290:	4608      	mov	r0, r1
 800b292:	4611      	mov	r1, r2
 800b294:	602b      	str	r3, [r5, #0]
 800b296:	f7f6 fdff 	bl	8001e98 <_kill>
 800b29a:	1c43      	adds	r3, r0, #1
 800b29c:	d102      	bne.n	800b2a4 <_kill_r+0x1c>
 800b29e:	682b      	ldr	r3, [r5, #0]
 800b2a0:	b103      	cbz	r3, 800b2a4 <_kill_r+0x1c>
 800b2a2:	6023      	str	r3, [r4, #0]
 800b2a4:	bd38      	pop	{r3, r4, r5, pc}
 800b2a6:	bf00      	nop
 800b2a8:	20002688 	.word	0x20002688

0800b2ac <_getpid_r>:
 800b2ac:	f7f6 bdf2 	b.w	8001e94 <_getpid>

0800b2b0 <__sread>:
 800b2b0:	b510      	push	{r4, lr}
 800b2b2:	460c      	mov	r4, r1
 800b2b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2b8:	f000 f89c 	bl	800b3f4 <_read_r>
 800b2bc:	2800      	cmp	r0, #0
 800b2be:	bfab      	itete	ge
 800b2c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b2c2:	89a3      	ldrhlt	r3, [r4, #12]
 800b2c4:	181b      	addge	r3, r3, r0
 800b2c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b2ca:	bfac      	ite	ge
 800b2cc:	6563      	strge	r3, [r4, #84]	; 0x54
 800b2ce:	81a3      	strhlt	r3, [r4, #12]
 800b2d0:	bd10      	pop	{r4, pc}

0800b2d2 <__swrite>:
 800b2d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2d6:	461f      	mov	r7, r3
 800b2d8:	898b      	ldrh	r3, [r1, #12]
 800b2da:	4605      	mov	r5, r0
 800b2dc:	05db      	lsls	r3, r3, #23
 800b2de:	460c      	mov	r4, r1
 800b2e0:	4616      	mov	r6, r2
 800b2e2:	d505      	bpl.n	800b2f0 <__swrite+0x1e>
 800b2e4:	2302      	movs	r3, #2
 800b2e6:	2200      	movs	r2, #0
 800b2e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2ec:	f000 f868 	bl	800b3c0 <_lseek_r>
 800b2f0:	89a3      	ldrh	r3, [r4, #12]
 800b2f2:	4632      	mov	r2, r6
 800b2f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b2f8:	81a3      	strh	r3, [r4, #12]
 800b2fa:	4628      	mov	r0, r5
 800b2fc:	463b      	mov	r3, r7
 800b2fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b302:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b306:	f000 b817 	b.w	800b338 <_write_r>

0800b30a <__sseek>:
 800b30a:	b510      	push	{r4, lr}
 800b30c:	460c      	mov	r4, r1
 800b30e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b312:	f000 f855 	bl	800b3c0 <_lseek_r>
 800b316:	1c43      	adds	r3, r0, #1
 800b318:	89a3      	ldrh	r3, [r4, #12]
 800b31a:	bf15      	itete	ne
 800b31c:	6560      	strne	r0, [r4, #84]	; 0x54
 800b31e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b322:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b326:	81a3      	strheq	r3, [r4, #12]
 800b328:	bf18      	it	ne
 800b32a:	81a3      	strhne	r3, [r4, #12]
 800b32c:	bd10      	pop	{r4, pc}

0800b32e <__sclose>:
 800b32e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b332:	f000 b813 	b.w	800b35c <_close_r>
	...

0800b338 <_write_r>:
 800b338:	b538      	push	{r3, r4, r5, lr}
 800b33a:	4604      	mov	r4, r0
 800b33c:	4608      	mov	r0, r1
 800b33e:	4611      	mov	r1, r2
 800b340:	2200      	movs	r2, #0
 800b342:	4d05      	ldr	r5, [pc, #20]	; (800b358 <_write_r+0x20>)
 800b344:	602a      	str	r2, [r5, #0]
 800b346:	461a      	mov	r2, r3
 800b348:	f7f6 fdc4 	bl	8001ed4 <_write>
 800b34c:	1c43      	adds	r3, r0, #1
 800b34e:	d102      	bne.n	800b356 <_write_r+0x1e>
 800b350:	682b      	ldr	r3, [r5, #0]
 800b352:	b103      	cbz	r3, 800b356 <_write_r+0x1e>
 800b354:	6023      	str	r3, [r4, #0]
 800b356:	bd38      	pop	{r3, r4, r5, pc}
 800b358:	20002688 	.word	0x20002688

0800b35c <_close_r>:
 800b35c:	b538      	push	{r3, r4, r5, lr}
 800b35e:	2300      	movs	r3, #0
 800b360:	4d05      	ldr	r5, [pc, #20]	; (800b378 <_close_r+0x1c>)
 800b362:	4604      	mov	r4, r0
 800b364:	4608      	mov	r0, r1
 800b366:	602b      	str	r3, [r5, #0]
 800b368:	f7f6 fdc2 	bl	8001ef0 <_close>
 800b36c:	1c43      	adds	r3, r0, #1
 800b36e:	d102      	bne.n	800b376 <_close_r+0x1a>
 800b370:	682b      	ldr	r3, [r5, #0]
 800b372:	b103      	cbz	r3, 800b376 <_close_r+0x1a>
 800b374:	6023      	str	r3, [r4, #0]
 800b376:	bd38      	pop	{r3, r4, r5, pc}
 800b378:	20002688 	.word	0x20002688

0800b37c <_fstat_r>:
 800b37c:	b538      	push	{r3, r4, r5, lr}
 800b37e:	2300      	movs	r3, #0
 800b380:	4d06      	ldr	r5, [pc, #24]	; (800b39c <_fstat_r+0x20>)
 800b382:	4604      	mov	r4, r0
 800b384:	4608      	mov	r0, r1
 800b386:	4611      	mov	r1, r2
 800b388:	602b      	str	r3, [r5, #0]
 800b38a:	f7f6 fdb4 	bl	8001ef6 <_fstat>
 800b38e:	1c43      	adds	r3, r0, #1
 800b390:	d102      	bne.n	800b398 <_fstat_r+0x1c>
 800b392:	682b      	ldr	r3, [r5, #0]
 800b394:	b103      	cbz	r3, 800b398 <_fstat_r+0x1c>
 800b396:	6023      	str	r3, [r4, #0]
 800b398:	bd38      	pop	{r3, r4, r5, pc}
 800b39a:	bf00      	nop
 800b39c:	20002688 	.word	0x20002688

0800b3a0 <_isatty_r>:
 800b3a0:	b538      	push	{r3, r4, r5, lr}
 800b3a2:	2300      	movs	r3, #0
 800b3a4:	4d05      	ldr	r5, [pc, #20]	; (800b3bc <_isatty_r+0x1c>)
 800b3a6:	4604      	mov	r4, r0
 800b3a8:	4608      	mov	r0, r1
 800b3aa:	602b      	str	r3, [r5, #0]
 800b3ac:	f7f6 fda8 	bl	8001f00 <_isatty>
 800b3b0:	1c43      	adds	r3, r0, #1
 800b3b2:	d102      	bne.n	800b3ba <_isatty_r+0x1a>
 800b3b4:	682b      	ldr	r3, [r5, #0]
 800b3b6:	b103      	cbz	r3, 800b3ba <_isatty_r+0x1a>
 800b3b8:	6023      	str	r3, [r4, #0]
 800b3ba:	bd38      	pop	{r3, r4, r5, pc}
 800b3bc:	20002688 	.word	0x20002688

0800b3c0 <_lseek_r>:
 800b3c0:	b538      	push	{r3, r4, r5, lr}
 800b3c2:	4604      	mov	r4, r0
 800b3c4:	4608      	mov	r0, r1
 800b3c6:	4611      	mov	r1, r2
 800b3c8:	2200      	movs	r2, #0
 800b3ca:	4d05      	ldr	r5, [pc, #20]	; (800b3e0 <_lseek_r+0x20>)
 800b3cc:	602a      	str	r2, [r5, #0]
 800b3ce:	461a      	mov	r2, r3
 800b3d0:	f7f6 fd98 	bl	8001f04 <_lseek>
 800b3d4:	1c43      	adds	r3, r0, #1
 800b3d6:	d102      	bne.n	800b3de <_lseek_r+0x1e>
 800b3d8:	682b      	ldr	r3, [r5, #0]
 800b3da:	b103      	cbz	r3, 800b3de <_lseek_r+0x1e>
 800b3dc:	6023      	str	r3, [r4, #0]
 800b3de:	bd38      	pop	{r3, r4, r5, pc}
 800b3e0:	20002688 	.word	0x20002688

0800b3e4 <_malloc_usable_size_r>:
 800b3e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b3e8:	1f18      	subs	r0, r3, #4
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	bfbc      	itt	lt
 800b3ee:	580b      	ldrlt	r3, [r1, r0]
 800b3f0:	18c0      	addlt	r0, r0, r3
 800b3f2:	4770      	bx	lr

0800b3f4 <_read_r>:
 800b3f4:	b538      	push	{r3, r4, r5, lr}
 800b3f6:	4604      	mov	r4, r0
 800b3f8:	4608      	mov	r0, r1
 800b3fa:	4611      	mov	r1, r2
 800b3fc:	2200      	movs	r2, #0
 800b3fe:	4d05      	ldr	r5, [pc, #20]	; (800b414 <_read_r+0x20>)
 800b400:	602a      	str	r2, [r5, #0]
 800b402:	461a      	mov	r2, r3
 800b404:	f7f6 fd56 	bl	8001eb4 <_read>
 800b408:	1c43      	adds	r3, r0, #1
 800b40a:	d102      	bne.n	800b412 <_read_r+0x1e>
 800b40c:	682b      	ldr	r3, [r5, #0]
 800b40e:	b103      	cbz	r3, 800b412 <_read_r+0x1e>
 800b410:	6023      	str	r3, [r4, #0]
 800b412:	bd38      	pop	{r3, r4, r5, pc}
 800b414:	20002688 	.word	0x20002688

0800b418 <_init>:
 800b418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b41a:	bf00      	nop
 800b41c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b41e:	bc08      	pop	{r3}
 800b420:	469e      	mov	lr, r3
 800b422:	4770      	bx	lr

0800b424 <_fini>:
 800b424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b426:	bf00      	nop
 800b428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b42a:	bc08      	pop	{r3}
 800b42c:	469e      	mov	lr, r3
 800b42e:	4770      	bx	lr
